/*! For license information please see character.js.LICENSE.txt */
(()=>{"use strict";var __webpack_modules__={"./character/Beginner.ts":()=>{eval("\r\nwindow.game.import('character', function (lib, game, ui, get, ai, _status) {\r\n    return {\r\n        name: 'Beginner',\r\n        connect: true,\r\n        character: {\r\n            re_KizunaAI: ['female', 'upd8', 4, ['re_ailian'], ['zhu']],\r\n            re_KaguyaLuna: ['female', 'qun', 4, ['re_jiajiupaidui']],\r\n            re_MiraiAkari: ['female', 'qun', 4, ['duanli', 'qingmi']],\r\n            re_NekomiyaHinata: ['female', 'qun', 4, ['yingdan', 'tianzhuo']],\r\n            re_KaguraNana: ['female', 'qun', 4, ['re_DDzhanshou'], ['zhu']],\r\n            re_Siro: ['female', 'dotlive', 3, ['lingsi']],\r\n            re_Nekomasu: ['female', 'qun', 3, ['milijianying', 're_dianyin']],\r\n            re_Noracat: ['female', 'upd8', 5, ['kouhu', 'zhiqiu']],\r\n            re_XiaDi: ['male', 'qun', 4, ['re_yinliu', 'dunzou'], ['guoV']],\r\n            re_MononobeAlice: ['female', 'nijisanji', 3, ['tinenghuifu1', 're_dianmingguzhen']],\r\n            re_ShizukaRin: ['female', 'nijisanji', 4, ['re_mozhaotuji']],\r\n            re_MitoTsukino: ['female', 'nijisanji', 3, ['re_bingdielei'], ['zhu']],\r\n            re_UshimiIchigo: ['female', 'nijisanji', 3, ['re_shuangren', 're_jitui']],\r\n            re_HiguchiKaede: ['female', 'nijisanji', 4, ['re_zhenyin']],\r\n            re_SuzuharaLulu: ['female', 'nijisanji', 5, ['tunshi']],\r\n            re_HonmaHimawari: ['female', 'nijisanji', 4, ['mark_tianqing', 'kuiquan']],\r\n            re_AibaUiha: ['female', 'nijisanji', 4, ['kangding', 'longshe']],\r\n            re_SukoyaKana: ['female', 'nijisanji', 3, ['re_huawen', 're_liaohu']],\r\n            re_ShirayukiTomoe: ['female', 'nijisanji', 4, ['re_gonggan', 'yejing']],\r\n            re_TokinoSora: ['female', 'holo', 4, ['re_taiyangzhiyin'], ['zhu']],\r\n            re_AZKi: ['female', 'holo', 4, ['WHiTE', 'BLacK']],\r\n            re_RobokoSan: ['female', 'holo', 3, ['re_zhanxie', 're_chongdian']],\r\n            re_ShirakamiFubuki: ['female', 'holo', 3, ['re_yuanlv', 're_jinyuan'], ['zhu']],\r\n            re_HoshimatiSuisei: ['female', 'holo', 4, ['cansha']],\r\n            re_AkiRosenthal: ['female', 'holo', 3, ['meiwu', 're_huichu']],\r\n            re_YozoraMel: ['female', 'holo', 3, ['fuyi', 'xihun']],\r\n            re_SakuraMiko: ['female', 'holo', 3, ['huangyou', 'qidao']],\r\n            re_NatsuiroMatsuri: ['female', 'holo', 3, ['re_huxi1']],\r\n            re_MurasakiShion: ['female', 'holo', 3, ['anshu', 'xingchi']],\r\n            re_AkaiHaato: ['female', 'holo', 3, ['xinchixin']],\r\n            re_UsadaPekora: ['female', 'holo', 4, ['qiangyun', 'tuquan']],\r\n            re_UruhaRushia: ['female', 'holo', 3, ['juebi', 'zhanhou']],\r\n            re_ŌokamiMio: ['female', 'holo', 4, ['re_yuzhan', 're_bizuo']],\r\n            re_NakiriAyame: ['female', 'holo', 4, ['guiren']],\r\n            re_ŌzoraSubaru: ['female', 'holo', 4, ['cejing']],\r\n            re_SpadeEcho: ['female', 'holo', 3, ['qinglve', 'yingshi'], ['guoV']],\r\n            re_XiaoxiXiaotao: ['female', 'xuyan', 3, ['re_doupeng', 're_xuyan'], ['guoV']],\r\n            re_InuyamaTamaki: ['male', 'nori', 3, ['rongyaochengyuan', 're_hundunliandong']],\r\n            re_KaguraMea: ['female', 'paryi', 3, ['fengna', 're_xiaoyan']],\r\n            re_OtomeOto: ['female', 'paryi', 3, ['re_yuxia', 'hanyin'], ['zhu']],\r\n            re_HisekiErio: ['female', 'paryi', 4, ['re_huange']],\r\n            re_HanazonoSerena: ['female', 'paryi', 3, ['re_jiumao', 're_enfan']],\r\n            re_MinamiNami: ['female', 'qun', 4, ['re_longdan']],\r\n            re_Kano: ['female', 'qun', 4, ['shiguang']],\r\n            re_HanamaruHareru: ['female', 'qun', 3, ['rangran', 'jiazhao']],\r\n            re_SisterClearie: ['female', 'nijisanji', 4, ['shenyou', 'shenfa']],\r\n            re_LizeHelesta: ['female', 'nijisanji', 3, ['yubing']],\r\n            re_AngeKatrina: ['female', 'nijisanji', 3, ['akxiaoqiao', 'liancheng']],\r\n            re_YuNi: ['female', 'upd8', 4, ['re_shengcai']],\r\n            re_TomariMari: ['male', 'upd8', 3, ['liansheng', 'ruantang']],\r\n            re_Omesis: ['female', 'upd8', 4, ['yaozhan', 'chongxin']],\r\n            re_NijikawaRaki: ['female', 'upd8', 4, ['yayun', 'jidao']],\r\n            re_Fairys: ['male', 'upd8', 4, ['ywshuangxing', 'yinni']],\r\n            re_TenkaiTsukasa: ['male', 'qun', 4, ['re_pojie', 're_dazhen']],\r\n            re_DoumyoujiHaruto: ['male', 'qun', 3, ['shengfu', 'wanbi']],\r\n            re_ShigureUi: ['female', 'qun', 3, ['uijieyuan', 'huixiang']],\r\n            re_ShirakamiHaruka: ['female', 'psp', 3, ['zhenbao', 'heimo'], ['guoV']],\r\n        },\r\n        characterSort: {\r\n            Beginner: {\r\n                hololive: [\r\n                    're_TokinoSora', 're_AZKi', 're_RobokoSan', 're_ShirakamiFubuki', 're_HoshimatiSuisei', 're_AkiRosenthal', 're_YozoraMel', 're_MurasakiShion',\r\n                    're_SakuraMiko', 're_NatsuiroMatsuri', 're_UsadaPekora', 're_AkaiHaato', 're_UruhaRushia', 're_ŌokamiMio', 're_NakiriAyame', 're_ŌzoraSubaru', 're_YukihanaLamy',\r\n                    're_SpadeEcho'\r\n                ],\r\n            }\r\n        },\r\n        characterReplace: {\r\n            SisterClearie: ['re_SisterClearie', 'SisterClearie'],\r\n            ShirayukiTomoe: ['re_ShirayukiTomoe', 'ShirayukiTomoe'],\r\n            SukoyaKana: ['re_SukoyaKana', 'SukoyaKana'],\r\n        },\r\n        characterIntro: {\r\n            re_SisterClearie: '神のご加護があらんことを<br>--《DOMAG》',\r\n        },\r\n        skill: {\r\n            re_ailian: {\r\n                audio: 'ailian',\r\n                enable: 'phaseUse',\r\n                selectCard: [1, Infinity],\r\n                position: 'h',\r\n                usable: 1,\r\n                filterCard: true,\r\n                filterTarget(Evt, player, target) {\r\n                    return target != player;\r\n                },\r\n                check(card) {\r\n                    if (ui.selected.cards.length > 1)\r\n                        return 0;\r\n                    if (ui.selected.cards.length && ui.selected.cards[0].name == 'du')\r\n                        return 0;\r\n                    if (!ui.selected.cards.length && card.name == 'du')\r\n                        return 20;\r\n                    var player = get.owner(card);\r\n                    if (player.hp == player.maxHp || player.storage.re_ailian_clear > 1 || player.countCards('h') <= 1) {\r\n                        if (ui.selected.cards.length) {\r\n                            return -1;\r\n                        }\r\n                        var players = game.filterPlayer();\r\n                        for (let i of players) {\r\n                            if (!i.isTurnedOver() &&\r\n                                !i.hasJudge('lebu') &&\r\n                                get.attitude(player, i) >= 3 &&\r\n                                get.attitude(i, player) >= 3) {\r\n                                return 11 - get.value(card);\r\n                            }\r\n                        }\r\n                        if (player.countCards('h') > player.hp)\r\n                            return 10 - get.value(card);\r\n                        if (player.countCards('h') > 2)\r\n                            return 6 - get.value(card);\r\n                        return -1;\r\n                    }\r\n                    return 10 - get.value(card);\r\n                },\r\n                discard: false,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h') > 0;\r\n                },\r\n                content: [() => {\r\n                        Evt.num = player.storage.re_ailian_clear;\r\n                        targets[0].gain(cards, player, 'giveAuto');\r\n                    }, () => {\r\n                        player.storage.re_ailian_clear += cards.length;\r\n                        if (player.storage.re_ailian_clear >= 2 && Evt.num < 2) {\r\n                            let list = [];\r\n                            for (let i of get.inpile('basic')) {\r\n                                if (lib.filter.cardUsable({ name: i }, player) && player.hasUseTarget(i)) {\r\n                                    list.push(['基本', '', i]);\r\n                                    if (i == 'sha') {\r\n                                        list.push(['基本', '', 'sha', 'fire']);\r\n                                        list.push(['基本', '', 'sha', 'thunder']);\r\n                                        list.push(['基本', '', 'sha', 'ice']);\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (list.length) {\r\n                                player.chooseButton(['是否视为使用一张基本牌？', [list, 'vcard']]).set('ai', function (button) {\r\n                                    var player = _status.event.player;\r\n                                    var card = { name: button.link[2], nature: button.link[3] };\r\n                                    switch (card.name) {\r\n                                        case 'tao':\r\n                                            if (player.hp == 1 || (player.hp == 2 && !player.hasShan()) || player.needsToDiscard()) {\r\n                                                return 5;\r\n                                            }\r\n                                            return 1 + Math.random();\r\n                                        case 'sha':\r\n                                            if (game.hasPlayer((cur) => {\r\n                                                return player.canUse(card, cur) && get.effect(cur, card, player, player) > 0;\r\n                                            })) {\r\n                                                if (card.nature == 'fire')\r\n                                                    return 2.95;\r\n                                                if (card.nature == 'thunder' || card.nature == 'ice')\r\n                                                    return 2.92;\r\n                                                return 2.9;\r\n                                            }\r\n                                            return 0;\r\n                                        case 'jiu':\r\n                                            if (player.getCardUsable('sha') == 0 || !player.hasSha() || !player.hasUseTarget('sha'))\r\n                                                return 0;\r\n                                            return 0.8 + Math.random();\r\n                                        case 'qi':\r\n                                            if (player.isDamaged())\r\n                                                return 1.1 + Math.random();\r\n                                            return 0.1;\r\n                                        default: return 0;\r\n                                    }\r\n                                });\r\n                            }\r\n                            else {\r\n                                Evt.finish();\r\n                            }\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((result === null || result === void 0 ? void 0 : result.bool) && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            let card = { name: result.links[0][2], nature: result.links[0][3] };\r\n                            player.chooseUseTarget(card, true);\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    order(skill, player) {\r\n                        if (player.hp < player.maxHp && player.storage.re_ailian_clear < 2 && player.countCards('h') > 1) {\r\n                            return 10;\r\n                        }\r\n                        return 1;\r\n                    },\r\n                    result: {\r\n                        target(player, target) {\r\n                            if (target.hasSkillTag('nogain'))\r\n                                return 0;\r\n                            if (ui.selected.cards.length && ui.selected.cards[0].name == 'du') {\r\n                                if (target.hasSkillTag('nodu'))\r\n                                    return 0;\r\n                                return -10;\r\n                            }\r\n                            if (target.hasJudge('lebu'))\r\n                                return 0;\r\n                            var nh = target.countCards('h');\r\n                            var np = player.countCards('h');\r\n                            if (player.hp == player.maxHp || player.storage.re_ailian_clear < 0 || player.countCards('h') <= 1) {\r\n                                if (nh >= np - 1 && np <= player.hp && !target.hasSkill('haoshi'))\r\n                                    return 0;\r\n                            }\r\n                            return Math.max(1, 5 - nh);\r\n                        }\r\n                    },\r\n                    effect: {\r\n                        target(card, player, target) {\r\n                            if (player == target && get.type(card) == 'equip') {\r\n                                if (player.countCards('e', { subtype: get.subtype(card) })) {\r\n                                    var players = game.filterPlayer();\r\n                                    for (let i of players) {\r\n                                        if (i != player && get.attitude(player, i) > 0) {\r\n                                            return 0;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    threaten: 0.8,\r\n                },\r\n                group: ['re_ailian_clear', 're_ailian_damage'],\r\n                subSkill: {\r\n                    clear: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = 0;\r\n                        },\r\n                        trigger: { global: 'phaseNext' },\r\n                        direct: true,\r\n                        locked: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        content() {\r\n                            player.storage.re_ailian_clear = 0;\r\n                        }\r\n                    },\r\n                    damage: {\r\n                        trigger: { player: 'damageEnd' },\r\n                        filter(Evt, player) {\r\n                            return player.countCards('h') > 0;\r\n                        },\r\n                        direct: true,\r\n                        content: [() => {\r\n                                player.chooseCardTarget({\r\n                                    prompt: get.prompt2('re_ailian'),\r\n                                    selectCard: [1, Infinity],\r\n                                    position: 'h',\r\n                                    filterCard: true,\r\n                                    filterTarget(Evt, player, target) {\r\n                                        return target != player;\r\n                                    },\r\n                                    ai2(target) {\r\n                                        var att = get.attitude(_status.event.player, target);\r\n                                        if (target.hasSkillTag('nogain'))\r\n                                            att /= 10;\r\n                                        if (target.hasJudge('lebu'))\r\n                                            att /= 5;\r\n                                        return att;\r\n                                    },\r\n                                    ai1(card) {\r\n                                        if (ui.selected.cards && ui.selected.cards.length > 2)\r\n                                            return 0;\r\n                                        var player = _status.event.player;\r\n                                        if (player.getStorage('re_ailian_clear') > 2)\r\n                                            return 0;\r\n                                        return 8 - get.value(card);\r\n                                    },\r\n                                }).set('logSkill', 're_ailian');\r\n                            }, () => {\r\n                                var _a;\r\n                                if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                                    player.useSkill('re_ailian', result.cards, result.targets);\r\n                                }\r\n                            }]\r\n                    }\r\n                },\r\n            },\r\n            re_jiajiupaidui: {\r\n                audio: 'jiajiupaidui',\r\n                enable: 'chooseToUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return Evt.filterCard({ name: 'jiu', isCard: true }, player, Evt);\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    return target.countCards('he');\r\n                },\r\n                content: [() => {\r\n                        var att = get.sgnAttitude(target, player);\r\n                        target.chooseToDiscard('he', '弃置一张牌(若其中有♠或点数9，则视为' + get.translation(player) + '使用了一张酒)', true).set('ai', (card) => {\r\n                            if (att > 1)\r\n                                return (get.suit(card) == 'spade' || get.number(card) == 9);\r\n                        }).set('att', att);\r\n                    }, () => {\r\n                        if (result.bool && result.cards) {\r\n                            Evt.discardCards = result.cards.slice(0);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        Evt.discardCards.forEach((discard) => {\r\n                            if (get.suit(discard) == 'spade' || get.number(discard) == 9)\r\n                                Evt.isJiu = true;\r\n                        });\r\n                        if (Evt.isJiu) {\r\n                            if (_status.event.getParent(2).type == 'dying') {\r\n                                Evt.dying = player;\r\n                                Evt.type = 'dying';\r\n                            }\r\n                            player.useCard({ name: 'jiu', isCard: true }, player);\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        player.getStat().card.jiu--;\r\n                    }],\r\n                ai: { order: 10, result: { target: -1 } },\r\n            },\r\n            duanli: {\r\n                audio: 'shiyilijia',\r\n                group: ['duanli_draw'],\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                init(player) {\r\n                    if (player.storage.duanli == undefined) {\r\n                        player.storage.duanli = 0;\r\n                    }\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.countCards('h');\r\n                },\r\n                content: [() => {\r\n                        player.storage.duanli = player.countCards('h');\r\n                    }, () => {\r\n                        var cards = player.getCards('h');\r\n                        player.discard(cards);\r\n                    }],\r\n                ai: { order: 4, result: { player: 1 } },\r\n                mod: {\r\n                    aiOrder(player, card, num) {\r\n                        if (typeof card == 'object' && player == _status.currentPhase && get.name(card) == 'tao') {\r\n                            var damage = (player.maxHp - player.hp) * 2;\r\n                            return num + damage;\r\n                        }\r\n                    },\r\n                },\r\n                subSkill: {\r\n                    draw: {\r\n                        forced: true,\r\n                        trigger: {\r\n                            player: 'phaseEnd'\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return player.storage.duanli;\r\n                        },\r\n                        content: [() => {\r\n                                player.draw(player.storage.duanli);\r\n                            }, () => {\r\n                                player.storage.duanli = 0;\r\n                            }]\r\n                    }\r\n                }\r\n            },\r\n            qingmi: {\r\n                audio: 'seqinghuashen',\r\n                trigger: { global: 'useCardAfter' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return Evt.card.name == 'tao'\r\n                        && Evt.player != player;\r\n                },\r\n                content: [() => {\r\n                        trigger.player.chooseBool('是否让' + get.translation(player) + '摸一张牌').set('choice', get.attitude(trigger.player, player) > 0);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.logSkill('qingmi');\r\n                            player.draw(trigger.player);\r\n                        }\r\n                    }]\r\n            },\r\n            yingdan: {\r\n                hiddenCard(player, name) {\r\n                    if (['wuxie', 'shan'].contains(name) && player.countCards('h', { name: 'sha' }))\r\n                        return true;\r\n                },\r\n                mod: {\r\n                    aiValue(player, card, num) {\r\n                        if (player.countCards('hs', { name: 'sha' }) >= 2) {\r\n                            if (card.name == 'shan' || card.name == 'tao' || card.name == 'wuxie')\r\n                                return num / 5;\r\n                            if (card.name == 'sha')\r\n                                return num + 3;\r\n                        }\r\n                    },\r\n                    aiUseful(player, card, num) {\r\n                        return lib.skill.yingdan.mod.aiValue.apply(this, arguments);\r\n                    },\r\n                },\r\n                trigger: { player: ['useCardBefore', 'shaBefore', 'shanBefore', 'wuxieBefore', 'damageBefore'] },\r\n                direct: true,\r\n                firstDo: true,\r\n                filter(Evt, player) {\r\n                    var evt = Evt;\r\n                    if (Evt.name == 'damage')\r\n                        evt = Evt.getParent();\r\n                    if (!evt || !evt.card || evt.skill)\r\n                        return false;\r\n                    var name = get.name(evt.card);\r\n                    var tri;\r\n                    if (name == 'sha')\r\n                        tri = evt.getParent('chooseUseTarget');\r\n                    else\r\n                        tri = evt.getParent('pre_yingdan_' + name);\r\n                    return tri && tri.addedSkill && tri.addedSkill.contains('number') && evt.skill == 'yingdan_' + name;\r\n                },\r\n                content() {\r\n                    trigger.untrigger(true);\r\n                },\r\n                group: ['yingdan_shan', 'yingdan_wuxie', 'yingdan_sha'],\r\n                subSkill: {\r\n                    sha: {\r\n                        trigger: {\r\n                            player: 'useCardBegin',\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return ['yingdan_shan', 'yingdan_wuxie'].contains(Evt.skill) && get.name(Evt.cards[0], player);\r\n                        },\r\n                        direct: true,\r\n                        firstDo: true,\r\n                        content: [() => {\r\n                                player.chooseUseTarget(trigger.cards[0], true, false, trigger.cards);\r\n                            }, () => {\r\n                                if (result.bool) {\r\n                                    trigger.card.cards = [];\r\n                                    trigger.cards = [];\r\n                                }\r\n                                else {\r\n                                    trigger.cancel();\r\n                                }\r\n                            }],\r\n                    },\r\n                    shan: {\r\n                        audio: 'songzang',\r\n                        enable: ['chooseToUse'],\r\n                        prompt: '使用一张【杀】，视为使用了一张【闪】',\r\n                        viewAs: { name: 'shan' },\r\n                        check(card) {\r\n                            let number = get.number(card), player = _status.event.player, range = player.getAttackRange();\r\n                            let useful = 0;\r\n                            if (number <= range)\r\n                                useful += 2;\r\n                            return useful + get.order(card);\r\n                        },\r\n                        complexCard: true,\r\n                        filterCard(card, player, Evt) {\r\n                            return get.name(card, player) == 'sha';\r\n                        },\r\n                        viewAsFilter(player) {\r\n                            if (!player.hasUseTarget({ name: 'sha', isCard: true }) || !player.countCards('hs', { name: 'sha' }))\r\n                                return false;\r\n                        },\r\n                        ai: {\r\n                            respondShan: true,\r\n                        }\r\n                    },\r\n                    wuxie: {\r\n                        audio: 'songzang',\r\n                        enable: ['chooseToUse'],\r\n                        prompt: '使用一张【杀】，视为使用了一张【无懈可击】',\r\n                        viewAs: { name: 'wuxie' },\r\n                        check(card) {\r\n                            var number = get.number(card);\r\n                            var player = _status.event.player;\r\n                            var range = player.getAttackRange();\r\n                            var useful = 0;\r\n                            if (number <= range)\r\n                                useful += 2;\r\n                            return useful + get.order(card);\r\n                        },\r\n                        complexCard: true,\r\n                        filterCard(card, player, Evt) {\r\n                            return get.name(card, player) == 'sha';\r\n                        },\r\n                        viewAsFilter(player) {\r\n                            if (!player.hasUseTarget({ name: 'sha', isCard: true }) || !player.countCards('hs', { name: 'sha' }))\r\n                                return false;\r\n                        },\r\n                    }\r\n                },\r\n                ai: {\r\n                    noautowuxie: true,\r\n                }\r\n            },\r\n            tianzhuo: {\r\n                audio: 2,\r\n                trigger: { global: 'die' },\r\n                filter(Evt) {\r\n                    return Evt.player.countCards('e') > 0;\r\n                },\r\n                logTarget: 'player',\r\n                content: [() => {\r\n                        Evt.togain = trigger.player.getCards('e');\r\n                        player.gain(Evt.togain, trigger.player, 'giveAuto');\r\n                    }, () => {\r\n                        if (trigger.source == player) {\r\n                            player.draw(3);\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    threaten: 1.5,\r\n                }\r\n            },\r\n            lingsi: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                content() {\r\n                    player.draw(2);\r\n                    player.chooseToDiscard(2, 'he', true).set('ai', (card) => {\r\n                        if (get.type(card) == 'basic' && player.countCards('h', { type: 'basic' }) && player.hasUseTarget('sha')) {\r\n                            return 12 - get.value(card) + Math.random();\r\n                        }\r\n                        else if (get.type(card) != 'basic' && (player.countCards('he') - player.countCards('h', { type: 'basic' }) >= 2) && player.hp < player.maxHp) {\r\n                            return 6 + Math.random();\r\n                        }\r\n                        return 6 - get.value(card);\r\n                    });\r\n                },\r\n                ai: {\r\n                    useSha: 1,\r\n                    order: 9,\r\n                    result: {\r\n                        player: 1,\r\n                    },\r\n                },\r\n                group: 'lingsi_discard',\r\n                subSkill: {\r\n                    discard: {\r\n                        trigger: { player: 'discardAfter' },\r\n                        filter(Evt, player) {\r\n                            if (!Evt.cards || Evt.cards.length < 2)\r\n                                return false;\r\n                            var num1 = 0, num2 = 0;\r\n                            Evt.cards.forEach((card) => {\r\n                                if (get.type(card) == 'basic') {\r\n                                    num1++;\r\n                                }\r\n                                else {\r\n                                    num2++;\r\n                                }\r\n                            });\r\n                            return Math.max(num1, num2) >= 2;\r\n                        },\r\n                        prompt2(Evt, player) {\r\n                            var num1 = 0, num2 = 0;\r\n                            Evt.cards.forEach((card) => {\r\n                                if (get.type(card) == 'basic') {\r\n                                    num1++;\r\n                                }\r\n                                else {\r\n                                    num2++;\r\n                                }\r\n                            });\r\n                            var prompt2 = '可以';\r\n                            if (num1 >= 2) {\r\n                                prompt2 += '视为使用一张杀';\r\n                                if (num2 >= 2) {\r\n                                    prompt2 += ',且令一名角色回复一点体力';\r\n                                }\r\n                            }\r\n                            else if (num2 >= 2) {\r\n                                prompt2 += '令一名角色回复一点体力';\r\n                            }\r\n                            return prompt2;\r\n                        },\r\n                        priority: 22,\r\n                        content: [() => {\r\n                                var num1 = 0, num2 = 0;\r\n                                trigger.cards.forEach((card) => {\r\n                                    if (get.type(card) == 'basic') {\r\n                                        num1++;\r\n                                    }\r\n                                    else {\r\n                                        num2++;\r\n                                    }\r\n                                });\r\n                                if (num1 >= 2) {\r\n                                    player.chooseUseTarget({ name: 'sha' }, '可以视为打出一张杀', false).set('ai', function (target) {\r\n                                        var player = _status.event.player;\r\n                                        return get.effect(target, { name: 'sha' }, player, player);\r\n                                    });\r\n                                }\r\n                                if (num2 >= 2)\r\n                                    Evt.change = true;\r\n                            }, () => {\r\n                                if (Evt.change) {\r\n                                    player.chooseTarget('令一名角色回复一点体力', function (card, player, target) {\r\n                                        return target.hp < target.maxHp;\r\n                                    }).ai = function (target) {\r\n                                        var att = get.attitude(_status.event.player, target);\r\n                                        return att;\r\n                                    };\r\n                                }\r\n                                else {\r\n                                    Evt.finish();\r\n                                }\r\n                            }, () => {\r\n                                var _a;\r\n                                if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                                    result.targets[0].recover();\r\n                                }\r\n                            }],\r\n                    }\r\n                },\r\n            },\r\n            re_dianyin: {\r\n                trigger: { player: 'damageEnd' },\r\n                content: [() => {\r\n                        var _a;\r\n                        (_a = Evt.num) !== null && _a !== void 0 ? _a : (Evt.num = trigger.num);\r\n                        var next = player.chooseTarget('令一名角色摸两张牌');\r\n                        next.set('prompt2', '（若其手牌数少于你或为全场最少，改为摸三张牌）');\r\n                        next.set('ai', function (target) {\r\n                            var player = _status.event.player;\r\n                            var att = get.attitude(player, target);\r\n                            return att;\r\n                        });\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result === null || result === void 0 ? void 0 : result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            var target = result.targets[0];\r\n                            player.line(target, 'green');\r\n                            if (target.countCards('h') < player.countCards('h') || target.isMinHandcard()) {\r\n                                target.draw(3);\r\n                            }\r\n                            else {\r\n                                target.draw(2);\r\n                            }\r\n                        }\r\n                    }, () => {\r\n                        if (--Evt.num > 0) {\r\n                            player.chooseBool(get.prompt2('dianyin'));\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.logSkill('dianyin');\r\n                            Evt.goto(0);\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    maixie: true,\r\n                },\r\n            },\r\n            kouhu: {\r\n                group: ['kouhu_shan', 'kouhu_sha'],\r\n                subSkill: {\r\n                    shan: {\r\n                        enable: ['chooseToUse'],\r\n                        viewAs: { name: 'shan' },\r\n                        viewAsFilter(player) {\r\n                            if (!_status.currentPhase)\r\n                                return false;\r\n                        },\r\n                        filterCard: () => false,\r\n                        selectCard: -1,\r\n                        filter(Evt, player) {\r\n                            if (player.hasSkill('kouhu_usedShan'))\r\n                                return false;\r\n                            return true;\r\n                        },\r\n                        precontent() {\r\n                            player.addTempSkill('kouhu_usedShan', 'roundStart');\r\n                            _status.currentPhase.draw();\r\n                        }\r\n                    },\r\n                    sha: {\r\n                        enable: ['chooseToRespond'],\r\n                        viewAs: { name: 'sha' },\r\n                        viewAsFilter(player) {\r\n                            if (!_status.currentPhase)\r\n                                return false;\r\n                        },\r\n                        filterCard: () => false,\r\n                        selectCard: -1,\r\n                        filter(Evt, player) {\r\n                            if (player.hasSkill('kouhu_usedSha'))\r\n                                return false;\r\n                            return true;\r\n                        },\r\n                        precontent() {\r\n                            player.addTempSkill('kouhu_usedSha', 'roundStart');\r\n                            _status.currentPhase.draw();\r\n                        }\r\n                    },\r\n                    usedShan: {},\r\n                    usedSha: {},\r\n                }\r\n            },\r\n            zhiqiu: {\r\n                trigger: { player: ['useCardAfter', 'respondAfter'] },\r\n                filter(Evt, player) {\r\n                    var name = get.name(Evt.card);\r\n                    if (!['sha', 'shan'].contains(name))\r\n                        return false;\r\n                    return Evt.skill && Evt.skill == 'kouhu_' + name && player.countCards('h') > 0 && game.hasPlayer((cur) => {\r\n                        return player.canCompare(cur);\r\n                    });\r\n                },\r\n                content: [() => {\r\n                        player.chooseTarget(true, '『直球』：与一名角色拼点', function (card, player, target) {\r\n                            return player.canCompare(target);\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            var target = result.targets[0];\r\n                            Evt.target = target;\r\n                            player.logSkill('zhiqiu', target);\r\n                            player.chooseToCompare(target);\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.chooseTarget(true, '『直球』：对一名角色造成一点伤害').set('ai', function (target) {\r\n                                var player = _status.event.player;\r\n                                return get.damageEffect(target, player, player);\r\n                            });\r\n                        }\r\n                        else {\r\n                            player.damage(Evt.target);\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool && result.targets && result.targets[0]) {\r\n                            result.targets[0].damage(player);\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    combo: 'zhiqiu'\r\n                }\r\n            },\r\n            re_shengcai: {\r\n                trigger: { player: 'useCardAfter' },\r\n                priority: 123,\r\n                filter(Evt, player) {\r\n                    var repeat = 0;\r\n                    var another = 0;\r\n                    game.hasPlayer((cur) => {\r\n                        cur.getHistory('useCard', (evt) => {\r\n                            if (get.color(evt.card, cur) == get.color(Evt.card, player)) {\r\n                                repeat++;\r\n                            }\r\n                            else {\r\n                                another++;\r\n                            }\r\n                            ;\r\n                        });\r\n                    });\r\n                    return repeat == 1 && another;\r\n                },\r\n                frequent: true,\r\n                content() {\r\n                    var stats = 0;\r\n                    game.hasPlayer((cur) => {\r\n                        cur.getHistory('useCard', (evt) => {\r\n                            if (get.color(evt.card, cur) == get.color(trigger.card, player)) {\r\n                            }\r\n                            else {\r\n                                stats++;\r\n                            }\r\n                            ;\r\n                        });\r\n                    });\r\n                    player.draw(stats);\r\n                },\r\n                mod: {\r\n                    aiOrder(player, card, num) {\r\n                        if (typeof card == 'object' && player != _status.currentPhase) {\r\n                            if (lib.skill.re_shengcai.filter({ card: card }, player)) {\r\n                                return num + 10;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            liansheng: {\r\n                trigger: { player: 'changeHp' },\r\n                forced: true,\r\n                silent: true,\r\n                firstDo: true,\r\n                content() {\r\n                    if (player.hp == player.maxHp && player.sex == 'female') {\r\n                        player.sex = 'male';\r\n                        player.markSkill('liansheng');\r\n                        game.log(player, '的性别变更为', '#g' + get.translation(player.sex));\r\n                        if (_status.currentPhase && _status.currentPhase.sex == 'female')\r\n                            player.draw();\r\n                    }\r\n                    if (player.hp < player.maxHp && player.sex == 'male') {\r\n                        player.sex = 'female';\r\n                        player.markSkill('liansheng');\r\n                        game.log(player, '的性别变更为', '#g' + get.translation(player.sex));\r\n                        if (_status.currentPhase && _status.currentPhase.sex == 'female')\r\n                            player.draw();\r\n                    }\r\n                },\r\n                mark: true,\r\n                intro: {\r\n                    content(storage, player) {\r\n                        return '当前性别：' + get.translation(player.sex);\r\n                    },\r\n                },\r\n            },\r\n            ruantang: {\r\n                trigger: { player: 'phaseJudgeBefore' },\r\n                direct: true,\r\n                content: [() => {\r\n                        var check = player.countCards('h') >= 2 && player.hp < player.maxHp;\r\n                        player.chooseTarget(get.prompt('ruantang'), '令至多一名异性角色与自己各回复一点体力（选择自己则表示仅为自己回复体力）', function (card, player, target) {\r\n                            return target == player || (target.sex != player.sex && target.isDamaged());\r\n                        }).set('check', check).set('ai', function (target) {\r\n                            if (!_status.event.check)\r\n                                return 0;\r\n                            var att = get.attitude(_status.event.player, target);\r\n                            return att;\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.target = result.targets[0];\r\n                            var target = result.targets[0];\r\n                            if (target != player) {\r\n                                player.logSkill('ruantang', target);\r\n                                if (target.hp < target.maxHp)\r\n                                    Evt.recover1 = 1;\r\n                                target.recover();\r\n                            }\r\n                            else {\r\n                                player.logSkill('ruantang');\r\n                            }\r\n                            if (player.hp < player.maxHp)\r\n                                Evt.recover2 = 1;\r\n                            player.recover();\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.recover1 && Evt.target.hp == Evt.target.maxHp)\r\n                            Evt.target.draw();\r\n                        if (Evt.recover2 && player.hp == player.maxHp)\r\n                            player.draw();\r\n                    }, () => {\r\n                        trigger.cancel();\r\n                        player.skip('phaseDraw');\r\n                    }],\r\n            },\r\n            yaozhan: {\r\n                trigger: { player: ['phaseDrawBefore', 'phaseUseBefore'] },\r\n                direct: true,\r\n                content: [() => {\r\n                        var check = player.countCards('h') > 2;\r\n                        if (trigger.name == 'phaseUse' && player.getHandcardLimit() > 2)\r\n                            check = player.countCards('h') <= player.getHandcardLimit();\r\n                        player.chooseTarget('###是否发动『邀战』？###跳过' + get.translation(trigger.name) + '，视为对一名其他角色使用一张【决斗】', function (card, player, target) {\r\n                            if (player == target)\r\n                                return false;\r\n                            return player.canUse({ name: 'juedou' }, target);\r\n                        }).set('check', check).set('ai', function (target) {\r\n                            if (!_status.event.check)\r\n                                return 0;\r\n                            return get.effect(target, { name: 'juedou' }, _status.event.player);\r\n                        });\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            player.logSkill('yaozhan', result.targets);\r\n                            player.useCard({ name: 'juedou' }, result.targets[0]);\r\n                            trigger.cancel();\r\n                        }\r\n                    }]\r\n            },\r\n            chongxin: {\r\n                init(player, skill) {\r\n                    var _a;\r\n                    var _b;\r\n                    (_a = (_b = player.storage)[skill]) !== null && _a !== void 0 ? _a : (_b[skill] = []);\r\n                },\r\n                mark: true,\r\n                intro: {\r\n                    name: '崇新',\r\n                    content: 'cards',\r\n                    onunmark(storage, player) {\r\n                        if (storage && storage.length) {\r\n                            player.$throw(storage, 1000);\r\n                            game.cardsDiscard(storage);\r\n                            game.log(storage, '被置入了弃牌堆');\r\n                            storage.length = 0;\r\n                        }\r\n                    },\r\n                },\r\n                cardAround: true,\r\n                trigger: { global: 'judge' },\r\n                filter(Evt, player) {\r\n                    var suit0 = get.suit(Evt.player.judging[0]);\r\n                    return player.countCards('he', { suit: suit0 }) > 0;\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        player.chooseCard(get.translation(trigger.player) + '的' + (trigger.judgestr || '') + '判定为' +\r\n                            get.translation(trigger.player.judging[0]) + '，' + get.prompt('chongxin'), 'he', (card) => {\r\n                            var judging = _status.event.judging;\r\n                            if (get.suit(card) != get.suit(judging))\r\n                                return false;\r\n                            var player = _status.event.player;\r\n                            var mod2 = game.checkMod(card, player, 'unchanged', 'cardEnabled2', player);\r\n                            if (mod2 != 'unchanged')\r\n                                return mod2;\r\n                            var mod = game.checkMod(card, player, 'unchanged', 'cardRespondable', player);\r\n                            if (mod != 'unchanged')\r\n                                return mod;\r\n                            return true;\r\n                        }).set('ai', (card) => {\r\n                            var trigger = _status.event.getTrigger();\r\n                            var player = _status.event.player;\r\n                            var judging = _status.event.judging;\r\n                            var result = trigger.judge(card) - trigger.judge(judging);\r\n                            var attitude = get.attitude(player, trigger.player);\r\n                            if (attitude == 0 || result == 0)\r\n                                return 0;\r\n                            if (attitude > 0) {\r\n                                return result;\r\n                            }\r\n                            else {\r\n                                return -result;\r\n                            }\r\n                        }).set('judging', trigger.player.judging[0]);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.respond(result.cards, 'highlight', 'noOrdering');\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.card = trigger.player.judging[0];\r\n                            player.gain(Evt.card, 'gain2');\r\n                            trigger.player.judging[0] = result.cards[0];\r\n                            trigger.orderingCards.addArray(result.cards);\r\n                            game.log(trigger.player, '的判定牌改为', result.cards[0]);\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        player.chooseBool('是否将' + get.translation(Evt.card) + '置于武将牌上');\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            var card = Evt.card;\r\n                            player.lose(card, ui.special, 'toStorage');\r\n                            player.$give(card, player, false);\r\n                            player.markAuto('chongxin', [card]);\r\n                            game.log(player, '将', card, '置于武将牌上');\r\n                        }\r\n                        game.delay(1);\r\n                    }],\r\n                global: 'chongxin2',\r\n                ai: {\r\n                    rejudge: true,\r\n                    tag: {\r\n                        rejudge: 0.2,\r\n                    }\r\n                },\r\n            },\r\n            chongxin2: {\r\n                mod: {\r\n                    cardEnabled(card, player, now) {\r\n                        var _a, _b;\r\n                        if (_status.event.type == 'wuxie' && _status.event.getParent().name == '_wuxie' && _status.event.getParent().card.name == 'juedou') {\r\n                            let source = _status.event.getParent().player;\r\n                            if (source != player && source.hasSkill('chongxin') && ((_b = (_a = source.storage) === null || _a === void 0 ? void 0 : _a.chongxin) === null || _b === void 0 ? void 0 : _b.length)) {\r\n                                let suits = get.suit3(source.storage.chongxin);\r\n                                return !suits.contains(get.suit(card));\r\n                            }\r\n                        }\r\n                    },\r\n                    cardRespondable(card, player, now) {\r\n                        var _a, _b;\r\n                        if (_status.event.name == 'chooseToRespond' && _status.event.getParent().name == 'juedou') {\r\n                            let source = _status.event.getParent().player;\r\n                            if (source != player && source.hasSkill('chongxin') && ((_b = (_a = source.storage) === null || _a === void 0 ? void 0 : _a.chongxin) === null || _b === void 0 ? void 0 : _b.length)) {\r\n                                let suits = get.suit3(source.storage.chongxin);\r\n                                return !suits.contains(get.suit(card));\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            yayun: {\r\n                audio: true,\r\n                clickable(player) {\r\n                    player.storage.yayun = false;\r\n                    player.updateMark('yayun', true);\r\n                    lib.skill.yayun.laohuji(player);\r\n                    if (_status.imchoosing) {\r\n                        delete _status.event._cardChoice;\r\n                        delete _status.event._targetChoice;\r\n                        game.check();\r\n                    }\r\n                },\r\n                clickableFilter(player) {\r\n                    return player.storage.yayun == true && player.countDiscardableCards(player, 'h');\r\n                },\r\n                laohuji(player) {\r\n                    console.log('Outter');\r\n                    var next = game.createEvent('laohuji');\r\n                    next.player = player;\r\n                    next.setContent([() => {\r\n                            var audio = [player.name, player.name1, player.name2].contains('re_NijikawaRaki');\r\n                            player.logSkill('yayun', true, true, true, audio);\r\n                            Evt.discards = player.getDiscardableCards(player, 'h');\r\n                            player.discard(Evt.discards);\r\n                            if (Evt.discards.length == 0)\r\n                                Evt.finish();\r\n                            else\r\n                                Evt.cards = [];\r\n                        }, () => {\r\n                            var suits = get.suit3(Evt.discards);\r\n                            var next = player.judge((card) => {\r\n                                var suits = _status.event.suits;\r\n                                if (suits.contains(get.suit(card)))\r\n                                    return 1;\r\n                                return -1;\r\n                            });\r\n                            next.set('callback', () => {\r\n                            });\r\n                            next.set('suits', suits);\r\n                            if (!Evt.num)\r\n                                Evt.num = 1;\r\n                            else\r\n                                Evt.num++;\r\n                        }, () => {\r\n                            console.log(Evt.num);\r\n                            if (result.bool) {\r\n                                player.draw();\r\n                            }\r\n                            if (Evt.num < 3) {\r\n                                Evt.cards.push(result.card);\r\n                                Evt.goto(1);\r\n                            }\r\n                            else {\r\n                                Evt.cards.push(result.card);\r\n                            }\r\n                        }, () => {\r\n                            if (Evt.cards.length == 3) {\r\n                                var suits = get.suit3(Evt.cards);\r\n                                if (suits.length == 1) {\r\n                                    player.draw(3);\r\n                                    game.playAudio('skill', 'laohuji');\r\n                                }\r\n                            }\r\n                        }]);\r\n                },\r\n                init(player) {\r\n                    player.storage.yayun = true;\r\n                },\r\n                mark: true,\r\n                trigger: { global: 'roundStart' },\r\n                direct: true,\r\n                content() {\r\n                    player.storage.yayun = true;\r\n                    player.updateMark('yayun', true);\r\n                },\r\n                intro: {\r\n                    mark(dialog, content, player) {\r\n                        if (player.isUnderControl(true)) {\r\n                            if (_status.gameStarted) {\r\n                                if (player.storage.yayun) {\r\n                                    if (!player.getDiscardableCards(player, 'h'))\r\n                                        dialog.addText('不可发动');\r\n                                    else\r\n                                        dialog.add(ui.create.div('.menubutton.pointerdiv', '点击发动', () => {\r\n                                            if (!this.disabled) {\r\n                                                this.disabled = true;\r\n                                                this.classList.add('disabled');\r\n                                                this.style.opacity = 0.5;\r\n                                                lib.skill.yayun.clickable(player);\r\n                                            }\r\n                                        }));\r\n                                }\r\n                                else\r\n                                    dialog.addText('本轮已发动');\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (player.storage.yayun)\r\n                                dialog.addText('本轮未发动');\r\n                            else\r\n                                dialog.addText('本轮已发动');\r\n                        }\r\n                    },\r\n                    content(content, player) {\r\n                        if (player.isUnderControl(true)) {\r\n                        }\r\n                        else {\r\n                            if (content)\r\n                                return '本轮未发动';\r\n                            else\r\n                                return '本轮已发动';\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            jidao: {\r\n                audio: 3,\r\n                audioname: ['jike'],\r\n                trigger: { source: 'damageBegin2' },\r\n                priority: 9,\r\n                filter(Evt, player) {\r\n                    return Evt.num > 0;\r\n                },\r\n                check(Evt, player) {\r\n                    return get.damageEffect(Evt.player, player, player) < 0\r\n                        || (Evt.player.countCards('h') > 4 && get.attitude(player, Evt.player) < 0);\r\n                },\r\n                logTarget: 'player',\r\n                content: [() => {\r\n                        Evt.target = trigger.player;\r\n                        trigger.changeToZero();\r\n                    }, () => {\r\n                        lib.skill.yayun.laohuji(Evt.target);\r\n                    }],\r\n            },\r\n            ywshuangxing: {\r\n                trigger: { target: 'useCardToBefore' },\r\n                priority: 15,\r\n                check(Evt, player) {\r\n                    return get.effect(Evt.target, Evt.card, Evt.player, player) < 0;\r\n                },\r\n                filter(Evt, player) {\r\n                    return get.type2(Evt.card) != 'basic' && get.color(Evt.card) == 'black' && player.hp % 2 == 1\r\n                        || get.type2(Evt.card) != 'equip' && get.color(Evt.card) == 'red' && player.hp % 2 == 0;\r\n                },\r\n                content() {\r\n                    trigger.cancel();\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if ((get.type2(card) != 'basic' && get.color(card) == 'black' && player.hp % 2 == 1\r\n                                || get.type2(card) != 'equip' && get.color(card) == 'red' && player.hp % 2 == 0)\r\n                                && current < 0)\r\n                                return 'zeroplayertarget';\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            yinni: {\r\n                trigger: { player: 'useCard2' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    var card = Evt.card;\r\n                    var info = get.info(card);\r\n                    if (info.allowMultiple == false)\r\n                        return false;\r\n                    if (Evt.targets && !info.multitarget) {\r\n                        if (player.storage.yinni_record_color && player.storage.yinni_record_color != get.color(card)) {\r\n                            return Evt.targets.length != player.storage.yinni_record;\r\n                        }\r\n                    }\r\n                    return false;\r\n                },\r\n                content: [() => {\r\n                        var num = player.storage.yinni_record - trigger.targets.length;\r\n                        if (num > 0) {\r\n                            var prompt2 = '为' + get.translation(trigger.card) + '增加目标至' + get.cnNumber(player.storage.yinni_record) + '个';\r\n                            player.chooseTarget(num, get.prompt('yinni'), function (card, player, target) {\r\n                                var player = _status.event.player;\r\n                                return !_status.event.targets.contains(target) && lib.filter.targetEnabled2(_status.event.card, player, target);\r\n                            }).set('prompt2', prompt2).set('ai', function (target) {\r\n                                var trigger = _status.event.getTrigger();\r\n                                var player = _status.event.player;\r\n                                return get.effect(target, trigger.card, player, player);\r\n                            }).set('card', trigger.card).set('targets', trigger.targets);\r\n                        }\r\n                        else if (num < 0) {\r\n                            player.chooseTarget(-num, get.prompt('yinni'), '为' + get.translation(trigger.card) + '减少目标至' + get.cnNumber(player.storage.yinni_record) + '个', function (card, player, target) {\r\n                                return _status.event.targets.contains(target);\r\n                            }).set('targets', trigger.targets).set('ai', function (target) {\r\n                                var player = _status.event.player;\r\n                                return -get.effect(target, _status.event.getTrigger().card, player, player);\r\n                            });\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            if (!Evt.isMine())\r\n                                game.delayx();\r\n                            Evt.targets = result.targets;\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.targets) {\r\n                            player.logSkill('yinni', Evt.targets);\r\n                            if (trigger.targets.contains(Evt.targets[0])) {\r\n                                player.draw();\r\n                                trigger.targets.removeArray(Evt.targets);\r\n                            }\r\n                            else\r\n                                trigger.targets.addArray(Evt.targets);\r\n                        }\r\n                    }],\r\n                group: 'yinni_record',\r\n                subSkill: {\r\n                    record: {\r\n                        trigger: {\r\n                            global: 'useCardAfter',\r\n                        },\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        filter(Evt, player) {\r\n                            if (!Evt.card || !get.color(Evt.card) || !Evt.targets || !Evt.targets.length)\r\n                                return false;\r\n                            var type = get.type2(Evt.card);\r\n                            return type != 'equip';\r\n                        },\r\n                        content() {\r\n                            player.storage.yinni_record = trigger.targets.length;\r\n                            player.storage.yinni_record_color = get.color(trigger.card);\r\n                            if (!player.isUnseen(1))\r\n                                player.markSkill('yinni_record');\r\n                        },\r\n                        intro: {\r\n                            content: '上一张牌的目标数为&'\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            re_pojie: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = 0;\r\n                },\r\n                trigger: {\r\n                    global: ['loseAfter'],\r\n                },\r\n                marktext: \"戒\",\r\n                mark: true,\r\n                intro: {\r\n                    content: '出牌阶段结束时弃置#张牌',\r\n                },\r\n                filter(Evt, player) {\r\n                    var _a;\r\n                    if (player != _status.currentPhase)\r\n                        return false;\r\n                    return (_a = Evt === null || Evt === void 0 ? void 0 : Evt.es) === null || _a === void 0 ? void 0 : _a.length;\r\n                },\r\n                content() {\r\n                    player.draw();\r\n                    player.addMark('re_pojie', 1, false);\r\n                },\r\n                group: 're_pojie_phaseDiscard',\r\n                subSkill: {\r\n                    phaseDiscard: {\r\n                        trigger: { player: ['phaseUseEnd', 'phaseEnd'] },\r\n                        direct: true,\r\n                        lastDo: true,\r\n                        priority: 2,\r\n                        filter(Evt, player) {\r\n                            return player.storage.re_pojie > 0;\r\n                        },\r\n                        content: [() => {\r\n                                if (trigger.name == 'phaseUse') {\r\n                                    player.logSkill('re_pojie');\r\n                                    player.chooseToDiscard(player.storage.re_pojie, true, 'h');\r\n                                    trigger.cancel();\r\n                                }\r\n                            }, () => {\r\n                                player.storage.re_pojie = 0;\r\n                                player.unmarkSkill('re_pojie');\r\n                            }],\r\n                    },\r\n                },\r\n            },\r\n            re_dazhen: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.getEquip(1);\r\n                },\r\n                filterCard(card, player) {\r\n                    return get.subtype(card) == 'equip1';\r\n                },\r\n                discard: false,\r\n                position: 'e',\r\n                filterTarget(card, player, target) {\r\n                    return target != player;\r\n                },\r\n                content: [() => {\r\n                        player.$give(cards, target);\r\n                        target.equip(cards[0]);\r\n                    }, () => {\r\n                        Evt.num = Math.abs(player.getHandcardLimit() - player.countCards('h'));\r\n                        target.chooseToDiscard('『大振』：弃置' + get.cnNumber(Evt.num) + '张牌，否则受到' + get.translation(player) + '造成的1点伤害', Evt.num, 'he');\r\n                    }, () => {\r\n                        if (result.bool && result.cards) {\r\n                            Evt.finish();\r\n                        }\r\n                        else {\r\n                            target.damage(player);\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    order: 6,\r\n                    result: {\r\n                        target(player, target) {\r\n                            if (player.countCards('h') > player.getHandcardLimit()) {\r\n                                return -1;\r\n                            }\r\n                            else {\r\n                                return 0;\r\n                            }\r\n                        },\r\n                        player(player, target) {\r\n                            if (target.getEquip(1))\r\n                                return 1;\r\n                            else\r\n                                return -0.5;\r\n                        },\r\n                    },\r\n                    threaten: 1.2,\r\n                },\r\n            },\r\n            re_DDzhanshou: {\r\n                audio: 'DDzhanshou',\r\n                trigger: { global: 'phaseEnd' },\r\n                priority: 77,\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    var history = Evt.player.getHistory('useCard');\r\n                    var DD = false;\r\n                    history.forEach(function (his) {\r\n                        if (!(his.targets.contains(Evt.player) || his.targets.contains(player)) && get.color(his.card) == 'red')\r\n                            DD = true;\r\n                    });\r\n                    return DD;\r\n                },\r\n                content: [() => {\r\n                        if (trigger.player == player) {\r\n                            player.draw();\r\n                            Evt.finish();\r\n                        }\r\n                        else {\r\n                            player.chooseToUse({\r\n                                preTarget: target,\r\n                                filterCard(card, player) {\r\n                                    return get.name(card) == 'sha' && lib.filter.filterCard.apply(this, arguments);\r\n                                },\r\n                                filterTarget(card, player, target) {\r\n                                    return target == _status.event.preTarget && lib.filter.filterTarget.apply(this, arguments);\r\n                                },\r\n                                addCount: false,\r\n                                nodistance: true,\r\n                                prompt: 'DD斩首！(若不出【杀】则摸一张牌）',\r\n                            }).set('logSkill', ['re_DDzhanshou', trigger.player]);\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.finish();\r\n                        }\r\n                        else {\r\n                            player.draw();\r\n                        }\r\n                    }],\r\n            },\r\n            re_taiyangzhiyin: {\r\n                audio: 'taiyangzhiyin',\r\n                trigger: { player: 'useCard2' },\r\n                filter(Evt, player) {\r\n                    return get.number(Evt.card) > 10;\r\n                },\r\n                priority: 1,\r\n                content: [() => {\r\n                        var list = [['无法响应'], ['额外目标'], ['摸一张牌']];\r\n                        if (!game.hasPlayer(cur => lib.filter.targetEnabled2(trigger.card, player, cur)\r\n                            && player.inRange(cur)\r\n                            && !trigger.targets.contains(cur)\r\n                            && (get.type(trigger.card) != 'equip' && get.type(trigger.card) != 'delay'))) {\r\n                            list.splice(1, 1);\r\n                        }\r\n                        Evt.videoId = lib.status.videoId++;\r\n                        game.broadcastAll(function (id, choicelist, Dvalue) {\r\n                            var dialog = ui.create.dialog('选择' + Dvalue + '项');\r\n                            choicelist.forEach((element) => {\r\n                                dialog.add([element, 'vcard']);\r\n                            });\r\n                            dialog.videoId = id;\r\n                        }, Evt.videoId, list, 1);\r\n                    }, () => {\r\n                        player.chooseButton(1).set('dialog', Evt.videoId).set('prompt', get.prompt('re_taiyangzhiyin'));\r\n                    }, () => {\r\n                        game.broadcastAll('closeDialog', Evt.videoId);\r\n                        if (result.bool) {\r\n                            result.links.forEach((element) => {\r\n                                if (element[2] == \"摸一张牌\") {\r\n                                    player.draw();\r\n                                }\r\n                                if (element[2] == \"无法响应\") {\r\n                                    game.log(player, '令', trigger.card, '无法被响应');\r\n                                    trigger.directHit.addArray(game.players);\r\n                                    trigger.nowuxie = true;\r\n                                }\r\n                            });\r\n                            result.links.forEach((element) => {\r\n                                if (element[2] == \"额外目标\") {\r\n                                    player.chooseTarget(true, '额外指定一名' + get.translation(trigger.card) + '的目标？', function (card, player, target) {\r\n                                        var trigger = _status.event;\r\n                                        if (trigger.targets.contains(target))\r\n                                            return false;\r\n                                        return lib.filter.targetEnabled2(trigger.card, _status.event.player, target);\r\n                                    }).set('ai', function (target) {\r\n                                        var trigger = _status.event.getTrigger();\r\n                                        var player = _status.event.player;\r\n                                        return get.effect(target, trigger.card, player, player);\r\n                                    }).set('targets', trigger.targets).set('card', trigger.card);\r\n                                }\r\n                            });\r\n                        }\r\n                    }, () => {\r\n                        if (result === null || result === void 0 ? void 0 : result.bool) {\r\n                            if (!Evt.isMine())\r\n                                game.delayx();\r\n                            Evt.target = result.targets[0];\r\n                            if (Evt.target) {\r\n                                trigger.targets.add(Evt.target);\r\n                            }\r\n                        }\r\n                    }],\r\n            },\r\n            re_mozhaotuji: {\r\n                audio: true,\r\n                audioname: ['jike'],\r\n                group: ['re_mozhaotuji_DrawOrStop', 're_mozhaotuji_useCard', 're_mozhaotuji_change'],\r\n                subSkill: {\r\n                    DrawOrStop: {\r\n                        trigger: { global: ['phaseZhunbeiEnd', 'phaseJudgeEnd', 'phaseDrawEnd', 'phaseUseEnd', 'phaseDiscardEnd', 'phaseJieshuEnd'] },\r\n                        filter(Evt, player) {\r\n                            if ((player.storage.re_mozhaotuji_useCard) >= 1)\r\n                                return true;\r\n                            else if ((player.storage.re_mozhaotuji_useCard) == 0)\r\n                                return player == _status.currentPhase;\r\n                            else\r\n                                return false;\r\n                        },\r\n                        priority: 14,\r\n                        direct: true,\r\n                        content: [() => {\r\n                                if ((player.storage.re_mozhaotuji_useCard) >= 2) {\r\n                                    player.logSkill('re_mozhaotuji');\r\n                                    player.draw(1);\r\n                                }\r\n                                player.storage.re_mozhaotuji_useCard = 0;\r\n                            }],\r\n                    },\r\n                    useCard: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = 0;\r\n                        },\r\n                        trigger: { player: 'useCardAfter' },\r\n                        direct: true,\r\n                        silent: true,\r\n                        priority: 1,\r\n                        content() {\r\n                            player.storage.re_mozhaotuji_useCard++;\r\n                        },\r\n                    },\r\n                    change: {\r\n                        audio: 'mozhaotuji',\r\n                        trigger: {\r\n                            player: ['phaseZhunbeiBefore', 'phaseJudgeBefore', 'phaseDrawBefore', 'phaseDiscardBefore', 'phaseJieshuBegin']\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return !player.hasSkill('re_mozhaotujiStop');\r\n                        },\r\n                        check(Evt, player) {\r\n                            return Evt.name === 'phaseJudge' && player.countCards('j') > 1\r\n                                || Evt.name === 'phaseDiscard';\r\n                        },\r\n                        prompt() {\r\n                            return '把准备阶段转换为出牌阶段';\r\n                        },\r\n                        content: [() => {\r\n                                trigger.cancel();\r\n                            }, () => {\r\n                                player.addTempSkill('re_mozhaotujiStop');\r\n                                player.phaseUse();\r\n                            }, () => {\r\n                                let stat = player.getStat();\r\n                                stat.card = {};\r\n                                for (let i in stat.skill) {\r\n                                    let bool = false;\r\n                                    let info = lib.skill[i];\r\n                                    if (info.enable != undefined) {\r\n                                        if (typeof info.enable == 'string' && info.enable == 'phaseUse')\r\n                                            bool = true;\r\n                                        else if (typeof info.enable == 'object' && info.enable.contains('phaseUse'))\r\n                                            bool = true;\r\n                                    }\r\n                                    if (bool)\r\n                                        stat.skill[i] = 0;\r\n                                }\r\n                            }],\r\n                    },\r\n                }\r\n            },\r\n            re_mozhaotujiStop: {},\r\n            re_bingdielei: {\r\n                audio: 'bingdielei',\r\n                trigger: { global: 'phaseEnd' },\r\n                round: 1,\r\n                prompt2: '获得一个额外回合',\r\n                filter(Evt, player) {\r\n                    return player.getHistory('lose').length;\r\n                },\r\n                content() {\r\n                    player.unmarkSkill(Evt.name);\r\n                    player.logSkill(Evt.name);\r\n                    player.insertPhase();\r\n                },\r\n                group: ['re_bingdielei_lose'],\r\n                subSkill: {\r\n                    lose: {\r\n                        trigger: { player: 'loseAfter' },\r\n                        priority: 99,\r\n                        silent: true,\r\n                        popup: false,\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return Evt.cards.length && !player.storage.re_bingdielei_roundcount;\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            player.addTempSkill('re_bingdielei_mark');\r\n                        },\r\n                    },\r\n                    mark: {\r\n                        mark: true,\r\n                        marktext: '蕾',\r\n                        intro: {\r\n                            content: '当前回合结束后可以获得一个额外回合',\r\n                            name: '盛蕾',\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            re_zhenyin: {\r\n                audio: 'zhenyin',\r\n                trigger: {\r\n                    player: 'useCardToPlayered',\r\n                },\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    var num = 0;\r\n                    Evt.targets.forEach(function (tar) {\r\n                        num += tar.countCards('hej');\r\n                    });\r\n                    return Evt.targets.length\r\n                        && num > 0\r\n                        && get.color(Evt.card) == 'black';\r\n                },\r\n                content: [() => {\r\n                        player.chooseTarget('选择『震音』的目标', function (card, player, target) {\r\n                            return _status.event.targets.contains(target);\r\n                        }).set('targets', trigger.targets);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.A = result.targets[0];\r\n                            Evt.B = Evt.A.next;\r\n                            if (!Evt.A.countCards('hej'))\r\n                                Evt.finish();\r\n                            else {\r\n                                player.choosePlayerCard('hej', Evt.A).set('ai', function (button) {\r\n                                    var player = _status.event.player;\r\n                                    var source = _status.event.target;\r\n                                    var target = source.next;\r\n                                    var link = button.link;\r\n                                    if (get.position(link) == 'j') {\r\n                                        if (target.canAddJudge(link))\r\n                                            return get.effect(target, link, player, player);\r\n                                        else\r\n                                            return get.damageEffect(target, player, player);\r\n                                    }\r\n                                    else if (get.position(link) == 'e') {\r\n                                        var subtype = get.subtype(link);\r\n                                        if (!target.getEquip(subtype))\r\n                                            return get.effect(target, link, player, player);\r\n                                        else\r\n                                            return get.damageEffect(target, player, player);\r\n                                    }\r\n                                    else {\r\n                                        return get.value(link, target, 'raw') * get.attitude(player, target);\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            let card = result.links[0];\r\n                            let dam = false;\r\n                            if (get.position(card) == 'e') {\r\n                                var c = Evt.B.getEquip(get.subtype(card));\r\n                                if (c) {\r\n                                    dam = true;\r\n                                    game.log(c, '掉落了');\r\n                                }\r\n                                Evt.B.equip(card);\r\n                            }\r\n                            else if (get.position(card) == 'j') {\r\n                                var cname = card.viewAs ? card.viewAs : get.name(card);\r\n                                Evt.B.getCards('j').forEach(function (c) {\r\n                                    if (get.name(c) == cname) {\r\n                                        game.log(c, '掉落了');\r\n                                        game.cardsDiscard(c);\r\n                                        dam = true;\r\n                                    }\r\n                                });\r\n                                Evt.B.addJudge({ name: cname }, [card]);\r\n                            }\r\n                            else {\r\n                                Evt.B.gain(card, Evt.A);\r\n                            }\r\n                            Evt.A.$give(card, Evt.B);\r\n                            if (dam)\r\n                                Evt.B.damage('nocard');\r\n                            game.delay();\r\n                        }\r\n                    }]\r\n            },\r\n            re_shuangren: {\r\n                audio: 'kuangbaoshuangren',\r\n                trigger: { player: 'shaBegin' },\r\n                priority: 98,\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return get.color(Evt.card) == 'red';\r\n                },\r\n                content() { },\r\n                group: ['re_shuangren_red', 're_shuangren_black'],\r\n                subSkill: {\r\n                    red: {\r\n                        mod: {\r\n                            targetInRange(card, player) {\r\n                                if (_status.currentPhase == player && card.name == 'sha' && get.color(card) == 'red')\r\n                                    return true;\r\n                            },\r\n                            cardUsable(card, player, num) {\r\n                                if (card.name == 'sha' && get.color(card) == 'red')\r\n                                    return Infinity;\r\n                            },\r\n                        },\r\n                    },\r\n                    black: {\r\n                        trigger: { player: 'useCard2' },\r\n                        filter(Evt, player) {\r\n                            if (Evt.card.name != 'sha' || get.color(Evt.card) == 'red')\r\n                                return false;\r\n                            return game.hasPlayer((cur) => !Evt.targets.contains(cur) && lib.filter.targetEnabled2(Evt.card, player, target));\r\n                        },\r\n                        direct: true,\r\n                        content: [() => {\r\n                                player.chooseTarget(get.prompt('re_shuangren'), `为${get.translation(trigger.card)}增加一个目标`, (card, player, target) => !_status.event.targets.contains(target) && lib.filter.targetEnabled2(_status.event.card, player, target))\r\n                                    .set('ai', target => {\r\n                                    let player = _status.event.player, source = _status.event.source;\r\n                                    return get.effect(target, _status.event.card, source, player) * (_status.event.targets.includes(target) ? -1 : 1);\r\n                                }).set('targets', trigger.targets).set('card', trigger.card).set('source', player);\r\n                            }, () => {\r\n                                if (result.bool) {\r\n                                    if (!Evt.isMine() && !_status.connectMode)\r\n                                        game.delayx();\r\n                                    Evt.target = result.targets[0];\r\n                                }\r\n                                else {\r\n                                    Evt.finish();\r\n                                }\r\n                            }, () => {\r\n                                player.logSkill('re_shuangren', Evt.target);\r\n                                trigger.targets.push(Evt.target);\r\n                            }],\r\n                    },\r\n                }\r\n            },\r\n            re_jitui: {\r\n                audio: 'guangsuxiabo',\r\n                audioname: ['jike'],\r\n                trigger: {\r\n                    player: ['loseAfter', 'damageAfter'],\r\n                },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'damage')\r\n                        return true;\r\n                    var unB = Evt.cards.filter((card) => get.type(card) != 'basic');\r\n                    return player != _status.currentPhase && Evt.visible && Evt.name == 'lose' && unB.length;\r\n                },\r\n                priority: 98,\r\n                content() {\r\n                    player.draw();\r\n                },\r\n            },\r\n            re_dianmingguzhen: {\r\n                audio: 'dianmingguzhen',\r\n                enable: \"phaseUse\",\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.canMoveCard(null, true);\r\n                },\r\n                content: [() => {\r\n                        player.loseHp(1);\r\n                    }, () => {\r\n                        player.moveCard(true).set('nojudge', true).set('ai', function (target) {\r\n                            var player = _status.event.player;\r\n                            var att = get.attitude(player, target);\r\n                            var sgnatt = get.sgn(att);\r\n                            if (ui.selected.targets.length == 0) {\r\n                                if (target == player) {\r\n                                    if (target.countCards('e', (card) => {\r\n                                        return get.value(card, target) < 0\r\n                                            && game.hasPlayer((cur) => cur != player && cur != target && get.attitude(player, cur) < 0 && cur.isEmpty(get.subtype(card)));\r\n                                    }) > 0)\r\n                                        return 9;\r\n                                }\r\n                                else {\r\n                                    if (game.hasPlayer((cur) => {\r\n                                        if (cur != target && cur != player && get.attitude(player, cur) > 0) {\r\n                                            var es = target.getCards('e');\r\n                                            for (let i = 0; i < es.length; i++) {\r\n                                                if (get.value(es[i], target) > 0 && cur.isEmpty(get.subtype(es[i])) && get.value(es[i], cur) > 0)\r\n                                                    return true;\r\n                                            }\r\n                                        }\r\n                                    })) {\r\n                                        return -att;\r\n                                    }\r\n                                }\r\n                                return 0;\r\n                            }\r\n                            var es = ui.selected.targets[0].getCards('e');\r\n                            var i;\r\n                            var att2 = get.sgn(get.attitude(player, ui.selected.targets[0]));\r\n                            for (i = 0; i < es.length; i++) {\r\n                                if (sgnatt != 0 && att2 != 0 &&\r\n                                    get.sgn(get.value(es[i], ui.selected.targets[0])) == -att2 &&\r\n                                    get.sgn(get.value(es[i], target)) == sgnatt &&\r\n                                    target.isEmpty(get.subtype(es[i]))) {\r\n                                    return Math.abs(att);\r\n                                }\r\n                            }\r\n                            if (i == es.length) {\r\n                                return 0;\r\n                            }\r\n                            return -att * get.attitude(player, ui.selected.targets[0]);\r\n                        });\r\n                    }, () => {\r\n                        if (result.targets[0] == player) {\r\n                            player.chooseUseTarget({ name: 'sha', nature: 'thunder' }, '是否视为使用一张雷【杀】？', false);\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    order: 7,\r\n                    result: {\r\n                        player(player, target) {\r\n                            if (player.hp != 1)\r\n                                return 1;\r\n                            else\r\n                                return -2;\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            re_longdan: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = true;\r\n                },\r\n                hiddenCard(player, name) {\r\n                    if (player.storage.re_longdan == true && name == 'sha' && lib.inpile.contains(name))\r\n                        return player.countCards('h', { type: 'basic' }) > player.countCards('h', { name: 'sha' });\r\n                    if (player.storage.re_longdan == false && get.type(name) == 'basic' && lib.inpile.contains(name))\r\n                        return player.countCards('h', { name: 'sha' });\r\n                },\r\n                enable: ['chooseToUse', 'chooseToRespond'],\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.storage.re_longdan == true && player.countCards('h', { type: 'basic' }) > player.countCards('h', { name: 'sha' }) || player.storage.re_longdan == false && player.countCards('h', { name: 'sha' });\r\n                },\r\n                chooseButton: {\r\n                    dialog(Evt, player) {\r\n                        var list = [];\r\n                        for (let i of lib.inpile) {\r\n                            let name = i;\r\n                            if (player.storage.re_longdan == true && name == 'sha') {\r\n                                list.push(['基本', '', 'sha']);\r\n                                list.push(['基本', '', 'sha', 'fire']);\r\n                                list.push(['基本', '', 'sha', 'thunder']);\r\n                                list.push(['基本', '', 'sha', 'ice']);\r\n                                list.push(['基本', '', 'sha', 'ocean']);\r\n                            }\r\n                            else if (player.storage.re_longdan == false && get.type(name) == 'basic' && name != 'sha')\r\n                                list.push(['基本', '', name]);\r\n                        }\r\n                        return ui.create.dialog(get.translation('re_longdan'), [list, 'vcard']);\r\n                    },\r\n                    filter(button, player) {\r\n                        return _status.event.getParent().filterCard({ name: button.link[2] }, player, _status.event.getParent());\r\n                    },\r\n                    check(button) {\r\n                        var player = _status.event.player;\r\n                        if (player.countCards('h', button.link[2]) > 0)\r\n                            return 0;\r\n                        var effect = player.getUseValue(button.link[2]);\r\n                        if (effect > 0)\r\n                            return effect;\r\n                        return 0;\r\n                    },\r\n                    backup(links, player) {\r\n                        return {\r\n                            filterCard(card, player) {\r\n                                if (player.storage.re_longdan == false)\r\n                                    return get.name(card) == 'sha';\r\n                                if (get.type(card) == 'basic' && get.name(card) != 'sha') {\r\n                                    return true;\r\n                                }\r\n                                return false;\r\n                            },\r\n                            selectCard: 1,\r\n                            popname: true,\r\n                            check(card) {\r\n                                return 6 - get.value(card);\r\n                            },\r\n                            position: 'hes',\r\n                            viewAs: { name: links[0][2], nature: links[0][3], isCard: true },\r\n                            onrespond() { return this.onuse.apply(this, arguments); },\r\n                            onuse(result, player) {\r\n                                if (player.storage.re_longdan == false)\r\n                                    player.storage.re_longdan = true;\r\n                                else\r\n                                    player.storage.re_longdan = false;\r\n                            },\r\n                        };\r\n                    },\r\n                    prompt(links, player) {\r\n                        if (player.storage.re_longdan == false)\r\n                            return '将一张【杀】当作' + (get.translation(links[0][3]) || '') + get.translation(links[0][2]) + '使用或打出';\r\n                        return '将一张基本牌当作' + (get.translation(links[0][3]) || '') + get.translation(links[0][2]) + '使用或打出';\r\n                    }\r\n                },\r\n                mod: {\r\n                    targetInRange(card, player, target) {\r\n                        if (_status.event.skill == 're_longdan_backup' && get.number(card) > 7)\r\n                            return true;\r\n                    },\r\n                    cardUsable(card, player, num) {\r\n                        console.log(_status.event.skill, card);\r\n                        if (_status.event.skill == 're_longdan_backup' && get.number(card) > 7)\r\n                            return Infinity;\r\n                        var result = _status.event.getParent().result;\r\n                        if ((result === null || result === void 0 ? void 0 : result.skill) == 're_longdan' && player.countCards('hes', function (card0) {\r\n                            return get.number(card0) > 7;\r\n                        }))\r\n                            return Infinity;\r\n                    },\r\n                },\r\n                ai: {\r\n                    useSha: 1,\r\n                    skillTagFilter(player, tag) {\r\n                        switch (tag) {\r\n                            case 'respondSha': {\r\n                                if (player.storage.re_longdan != true || !player.countCards('h', { type: 'basic' }) > player.countCards('h', { name: 'sha' }))\r\n                                    return false;\r\n                                break;\r\n                            }\r\n                            case 'respondShan': {\r\n                                if (player.storage.re_longdan != false || !player.countCards('h', { name: 'sha' }))\r\n                                    return false;\r\n                                break;\r\n                            }\r\n                            case 'save': {\r\n                                if (player.storage.re_longdan != false || !player.countCards('h', { name: 'sha' }))\r\n                                    return false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    },\r\n                    result: { player: 1 },\r\n                    respondSha: true,\r\n                    respondShan: true,\r\n                    save: true,\r\n                },\r\n            },\r\n            shenyou: {\r\n                marktext: '神',\r\n                intro: {\r\n                    name: \"神佑\",\r\n                    content: '<font color=#f66>你受到来自基本牌的伤害+1；其它的伤害-1。</font>',\r\n                },\r\n                mark: true,\r\n                trigger: { player: 'damageBegin3' },\r\n                forced: true,\r\n                priority: 1,\r\n                content() {\r\n                    if (get.type(trigger.getParent(1).card, 'trick') == 'basic') {\r\n                        trigger.num++;\r\n                    }\r\n                    else {\r\n                        trigger.num--;\r\n                    }\r\n                },\r\n                ai: {\r\n                    notrick: 1,\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (get.name(card, player) == 'sha')\r\n                                return [0, -4];\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            shenfa: {\r\n                trigger: { player: 'loseAfter' },\r\n                priority: 1,\r\n                filter(Evt, player) {\r\n                    if (!game.hasPlayer((cur) => {\r\n                        return !cur.hasSkill('shenyou');\r\n                    }))\r\n                        return false;\r\n                    return Evt.cards.length && Evt.hs.length;\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        Evt.num = trigger.cards.length;\r\n                    }, () => {\r\n                        var next = player.chooseTarget('令一名其他角色获得『神佑』直到回合结束');\r\n                        next.set('filterTarget', function (card, player, target) {\r\n                            return !target.hasSkill('shenyou');\r\n                        });\r\n                        next.set('ai', function (target) {\r\n                            var player = _status.event.player;\r\n                            var evt = _status.event.getTrigger().getParent();\r\n                            var cur = _status.currentPhase;\r\n                            if ((player == cur && player.hasSha() && player.getCardUsable('sha')\r\n                                && (player.countCards('h', (card) => get.tag(card, 'damage') && get.type('card') == 'trick') < 1)\r\n                                || (evt.name == 'useCard' && evt.card.name == 'sha')) && player.inRange(target))\r\n                                return get.damageEffect(target, player, player);\r\n                            if (player != cur) {\r\n                                if (cur.hasSkillTag('useSha') && get.attitude(cur, player) > 0)\r\n                                    return 10 - get.attitude(player, target);\r\n                                if (cur.getCardUsable('sha') && cur.hasSha())\r\n                                    return 4 + get.attitude(player, cur) - get.attitude(player, target);\r\n                            }\r\n                            return get.attitude(player, target);\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.logSkill('shenfa', result.targets[0]);\r\n                            result.targets[0].addTempSkill('shenyou');\r\n                            Evt.num--;\r\n                            if (Evt.num) {\r\n                                Evt.goto(1);\r\n                            }\r\n                            else {\r\n                                Evt.finish();\r\n                            }\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }],\r\n            },\r\n            yubing: {\r\n                audio: 5,\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = 0;\r\n                },\r\n                trigger: { player: 'useCardAfter' },\r\n                priority: 14,\r\n                filter(Evt, player) {\r\n                    var _a;\r\n                    return player.getHandcardLimit() && (get.type(Evt.card) == 'basic' || get.type(Evt.card) == 'trick')\r\n                        && !(((_a = Evt.result) === null || _a === void 0 ? void 0 : _a.bool) === false || Evt.iswuxied);\r\n                },\r\n                check(Evt, player) {\r\n                    return player != _status.currentPhase || (player.getHandcardLimit() * 2) >= player.countCards('h');\r\n                },\r\n                content() {\r\n                    player.storage.yubing++;\r\n                    player.markSkill('yubing');\r\n                    player.draw(2);\r\n                },\r\n                marktext: \"冰\",\r\n                mark: true,\r\n                intro: {\r\n                    content: '手牌上限-#',\r\n                },\r\n                mod: {\r\n                    maxHandcard(player, num) {\r\n                        return num - player.storage.yubing;\r\n                    },\r\n                },\r\n                group: 'yubing_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { global: 'phaseAfter' },\r\n                        forced: true,\r\n                        priority: 42,\r\n                        filter(Evt, player) {\r\n                            return player.hasMark('yubing');\r\n                        },\r\n                        content() {\r\n                            player.unmarkSkill('yubing');\r\n                            player.storage.yubing = 0;\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            akxiaoqiao: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                trigger: { player: 'phaseDiscardBegin' },\r\n                filter(Evt, player) {\r\n                    return player.countCards('h');\r\n                },\r\n                direct: true,\r\n                lastDo: true,\r\n                content: [() => {\r\n                        player.chooseCardButton('###' + get.prompt('akxiaoqiao') + '###展示任意张类型不同的手牌', player.getCards('h'), [1, 3]).set('filterButton', function (button) {\r\n                            let type = get.type(button.link, 'trick');\r\n                            for (let i of ui.selected.buttons) {\r\n                                if (type == get.type(i.link, 'trick'))\r\n                                    return false;\r\n                            }\r\n                            return true;\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool && result.links) {\r\n                            player.logSkill('akxiaoqiao');\r\n                            let cards = result.links;\r\n                            player.showCards(cards, '『小巧』展示手牌');\r\n                            player.storage.akxiaoqiao.addArray(cards);\r\n                        }\r\n                    }],\r\n                mod: {\r\n                    ignoredHandcard(card, player) {\r\n                        if (player.storage.akxiaoqiao && player.storage.akxiaoqiao.contains(card)) {\r\n                            return true;\r\n                        }\r\n                    },\r\n                    cardDiscardable(card, player, name) {\r\n                        if (name == 'phaseDiscard' && player.storage.akxiaoqiao && player.storage.akxiaoqiao.contains(card)) {\r\n                            return false;\r\n                        }\r\n                    },\r\n                },\r\n                group: 'akxiaoqiao_init',\r\n                subSkill: {\r\n                    init: {\r\n                        trigger: { player: 'phaseAfter' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            player.storage.akxiaoqiao = [];\r\n                        },\r\n                    }\r\n                },\r\n            },\r\n            liancheng: {\r\n                trigger: { global: 'phaseEnd' },\r\n                filter(Evt, player) {\r\n                    if (player.storage.liancheng && player.storage.liancheng == 2)\r\n                        return false;\r\n                    return player.countCards('h');\r\n                },\r\n                content: [() => {\r\n                        player.chooseCardButton('###『链成』###重铸任意张类型不同的手牌', player.getCards('h'), [1, 3]).set('filterButton', function (button) {\r\n                            let type = get.type(button.link, 'trick');\r\n                            for (let i of ui.selected.buttons) {\r\n                                if (type == get.type(i.link, 'trick'))\r\n                                    return false;\r\n                            }\r\n                            return true;\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.storage.liancheng++;\r\n                            var cards = result.links;\r\n                            player.lose(cards, ui.discardPile).set('visible', true);\r\n                            player.$throw(cards, 1000);\r\n                            game.log(player, '将', cards, '置入了弃牌堆');\r\n                            player.draw(cards.length);\r\n                            if (player == _status.currentPhase || cards.filter((card) => get.type(card) == 'equip').length == 0)\r\n                                Evt.finish();\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        Evt.diff = player.countCards('h') - _status.currentPhase.countCards('h');\r\n                        if (Evt.diff == 0) {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        var check = (Evt.diff > 0) ? (get.attitude(player, _status.currentPhase) > 0) : (get.attitude(player, _status.currentPhase) < 0);\r\n                        var next = player.chooseBool('###『链成』###是否令当前回合角色调整手牌与你相同？');\r\n                        next.set('ai', () => {\r\n                            if (!_status.event.check)\r\n                                return 0;\r\n                            return 1;\r\n                        });\r\n                        next.set('check', check);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            if (Evt.diff > 0) {\r\n                                _status.currentPhase.gain(get.cards(Evt.diff), 'draw');\r\n                            }\r\n                            else if (Evt.diff < 0) {\r\n                                _status.currentPhase.chooseToDiscard(-Evt.diff, true, 'h');\r\n                            }\r\n                        }\r\n                    }],\r\n                mod: {\r\n                    ignoredHandcard(card, player) {\r\n                        if (player.storage.akxiaoqiao && player.storage.akxiaoqiao.contains(card)) {\r\n                            return true;\r\n                        }\r\n                    },\r\n                    cardDiscardable(card, player, name) {\r\n                        if (name == 'phaseDiscard' && player.storage.akxiaoqiao && player.storage.akxiaoqiao.contains(card)) {\r\n                            return false;\r\n                        }\r\n                    },\r\n                },\r\n                ai: {\r\n                    expose: 0.2,\r\n                },\r\n                group: 'liancheng_init',\r\n                subSkill: {\r\n                    init: {\r\n                        trigger: { global: 'roundStart' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            player.storage.liancheng = 0;\r\n                        },\r\n                    }\r\n                },\r\n            },\r\n            re_yinliu: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countDiscardableCards(player, 'he') > 0;\r\n                },\r\n                check(card) {\r\n                    return 7 - get.value(card);\r\n                },\r\n                filterCard: true,\r\n                position: 'he',\r\n                selectCard: [1, 3],\r\n                content: [() => {\r\n                        game.delayx();\r\n                    }, () => {\r\n                        player.draw();\r\n                    }, () => {\r\n                        if (get.itemtype(result) == 'cards') {\r\n                            player.showCards(result);\r\n                            cards.forEach(cur => {\r\n                                if (get.suit3(result).contains(get.suit(cur)))\r\n                                    Evt.goto(1);\r\n                            });\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    order: 6,\r\n                    result: {\r\n                        player: 1,\r\n                    },\r\n                    threaten: 0.6,\r\n                },\r\n                subSkill: {\r\n                    used: {},\r\n                },\r\n            },\r\n            re_zhanxie: {\r\n                priority: 15,\r\n                firstDo: true,\r\n                mod: {\r\n                    cardUsable(card, player, num) {\r\n                        if (card.name == 'sha') {\r\n                            return num + 2;\r\n                        }\r\n                    },\r\n                },\r\n                group: ['re_zhanxie_draw'],\r\n                subSkill: {\r\n                    draw: {\r\n                        trigger: {\r\n                            player: 'useCardAfter'\r\n                        },\r\n                        firstDo: true,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            if (Evt.card.name == 'sha')\r\n                                return true;\r\n                            else\r\n                                return false;\r\n                        },\r\n                        content() {\r\n                            if (player.countUsed('sha', true) == 3) {\r\n                                player.draw(2);\r\n                            }\r\n                        },\r\n                        ai: {\r\n                            useSha: 1,\r\n                            effect: {\r\n                                player(card, player, target, current) {\r\n                                    if (['sha'].contains(card.name) && player.countUsed('sha', true) == 2)\r\n                                        return [1, 4];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            re_chongdian: {\r\n                forced: true,\r\n                trigger: { player: 'damageBegin4' },\r\n                filter(Evt) {\r\n                    return Evt.nature == 'thunder';\r\n                },\r\n                content() {\r\n                    player.recover(trigger.num);\r\n                    trigger.cancel(true);\r\n                },\r\n                group: 're_chongdian_leisha',\r\n                subSkill: {\r\n                    leisha: {\r\n                        enable: ['chooseToUse', 'chooseToRespond'],\r\n                        filterCard(card) {\r\n                            return get.type(card) == 'equip';\r\n                        },\r\n                        position: 'hes',\r\n                        viewAs: { name: 'sha', nature: 'thunder' },\r\n                        check() { return 1; },\r\n                        ai: {\r\n                            effect: {\r\n                                target(card, player, target, current) {\r\n                                    if (get.tag(card, 'respondSha') && current < 0)\r\n                                        return 0.5;\r\n                                }\r\n                            },\r\n                            respondSha: true,\r\n                            order: 4,\r\n                            useful: -1,\r\n                        },\r\n                        mod: {\r\n                            targetInRange(card, player, target) {\r\n                                if (_status.event.skill == 're_chongdian_leisha' && get.type(card.cards[0]) == 'equip')\r\n                                    return true;\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n                ai: {\r\n                    nothunder: true\r\n                },\r\n            },\r\n            re_yuanlv: {\r\n                audio: 'yuanlv',\r\n                trigger: { player: ['damageAfter', 'useCardAfter'] },\r\n                priority: 2,\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'damage' || (Evt.name == 'useCard' && get.type(Evt.card, 'trick') == 'trick')) {\r\n                        return true;\r\n                    }\r\n                    else\r\n                        return false;\r\n                },\r\n                content: [() => {\r\n                        player.draw(3);\r\n                    }, () => {\r\n                        player.chooseCard(2, 'he', '选择放置到牌堆顶部的牌', true);\r\n                    }, () => {\r\n                        if (result.bool == true && result.cards != null) {\r\n                            Evt.cards = result.cards;\r\n                        }\r\n                        if (Evt.cards.length > 0) {\r\n                            player.chooseButton(true, Evt.cards.length, ['按顺序将卡牌置于牌堆顶（先选择的在上）', Evt.cards]).set('ai', function (button) {\r\n                                var player = _status.event.player;\r\n                                var now = _status.currentPhase;\r\n                                var next = now.getNext();\r\n                                var att = get.attitude(player, next);\r\n                                var card = button.link;\r\n                                var judge = next.getCards('j')[ui.selected.buttons.length];\r\n                                if (judge) {\r\n                                    return get.judge(judge)(card) * att;\r\n                                }\r\n                                return next.getUseValue(card) * att;\r\n                            });\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length))\r\n                            Evt.linkcards = result.links.slice(0);\r\n                        else\r\n                            Evt.finish();\r\n                        game.delay();\r\n                    }, () => {\r\n                        var cards = Evt.linkcards;\r\n                        player.lose(cards, ui.special);\r\n                        game.delay();\r\n                    }, () => {\r\n                        var cards = Evt.linkcards;\r\n                        while (cards.length > 0) {\r\n                            var card = cards.pop();\r\n                            card.fix();\r\n                            ui.cardPile.insertBefore(card, ui.cardPile.firstChild);\r\n                            game.updateRoundNumber();\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    maixie: true,\r\n                }\r\n            },\r\n            re_jinyuan: {\r\n                audio: 'jinyuan',\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') > 0;\r\n                },\r\n                filterCard: true,\r\n                position: 'he',\r\n                filterTarget(card, player, target) {\r\n                    return player != target;\r\n                },\r\n                content: [() => {\r\n                        target.draw();\r\n                    }, () => {\r\n                        Evt.card = result[0];\r\n                        if (target.hasUseTarget(Evt.card)) {\r\n                            target.chooseUseTarget(Evt.card, '是否立即使用该牌（' + get.translation(Evt.card) + '）？');\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    order: 6,\r\n                    result: {\r\n                        target: 1,\r\n                    },\r\n                    expose: 0.1,\r\n                },\r\n            },\r\n            cansha: {\r\n                audio: 4,\r\n                trigger: { player: 'useCardAfter' },\r\n                priority: 3,\r\n                filter(Evt, player) {\r\n                    return Evt.cards.length && Evt.targets.length && (get.name(Evt.card) == 'sha' || get.name(Evt.card) == 'guohe')\r\n                        && !(Evt.result.bool == false || Evt.iswuxied);\r\n                },\r\n                content() {\r\n                    if (get.name(trigger.card) == 'sha') {\r\n                        player.chooseUseTarget({ name: 'guohe', isCard: false }, false);\r\n                    }\r\n                    else if (get.name(trigger.card) == 'guohe') {\r\n                        player.chooseUseTarget({ name: 'sha', isCard: false }, false);\r\n                    }\r\n                },\r\n                ai: {\r\n                    useSha: 2,\r\n                    skillTagFilter(player, tag, arg) {\r\n                        if (player.countCards('h', 'guohe') > 0)\r\n                            return true;\r\n                    },\r\n                    effect: {\r\n                        player(card, player, target, current) {\r\n                            if (['sha', 'guohe'].contains(card.name) && current < 0)\r\n                                return [0, 0.9];\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            re_huichu: {\r\n                trigger: {\r\n                    global: 'phaseBegin',\r\n                },\r\n                round: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h');\r\n                },\r\n                check(Evt, player) {\r\n                    if (player.countCards('h') == player.countCards('h', { color: 'red' }))\r\n                        return get.recoverEffect(Evt.player, player, player) > 0;\r\n                    return true;\r\n                },\r\n                content: [() => {\r\n                        player.showHandcards();\r\n                        Evt.chk = player.countCards('h') == player.countCards('h', { color: 'red' });\r\n                    }, () => {\r\n                        if (Evt.chk) {\r\n                            trigger.player.recover();\r\n                        }\r\n                    }, () => {\r\n                        if (!Evt.chk) {\r\n                            player.chooseCard(\"重铸任意张手牌\", 'h', [1, Infinity]).set('ai', (card) => {\r\n                                return 6.5 - get.value(card);\r\n                            });\r\n                        }\r\n                    }, () => {\r\n                        if (!Evt.chk && result.bool && result.cards.length) {\r\n                            player.lose(result.cards, ui.discardPile).set('visible', true);\r\n                            player.$throw(result.cards, 1000);\r\n                            game.log(player, '将', result.cards, '置入了弃牌堆');\r\n                            player.draw(result.cards.length);\r\n                        }\r\n                    }]\r\n            },\r\n            fuyi: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = (game.roundNumber % 2 == 1);\r\n                },\r\n                mod: {\r\n                    globalFrom(from, to, current) {\r\n                        if (from.storage.fuyi)\r\n                            return current - 1;\r\n                    },\r\n                    globalTo(from, to, current) {\r\n                        if (!to.storage.fuyi)\r\n                            return current + 1;\r\n                    },\r\n                },\r\n                trigger: { global: 'roundStart' },\r\n                locked: true,\r\n                direct: true,\r\n                content() {\r\n                    player.storage.fuyi = (game.roundNumber % 2 == 1);\r\n                },\r\n            },\r\n            xihun: {\r\n                trigger: { global: 'damageEnd' },\r\n                frequent: true,\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return Evt.card && get.name(Evt.card) == 'sha' && !player.hasSkill('xihun_used');\r\n                },\r\n                content: [() => {\r\n                        player.draw();\r\n                    }, () => {\r\n                        if (player.getHandcardLimit() < player.countCards('h')) {\r\n                            player.addTempSkill('xihun_used', 'roundStart');\r\n                        }\r\n                    }],\r\n                subSkill: { used: {} },\r\n            },\r\n            huangyou: {\r\n                enable: 'phaseUse',\r\n                filterCard(card) {\r\n                    return get.color(card) == 'red';\r\n                },\r\n                selectCard: 2,\r\n                position: 'he',\r\n                filter(Evt, player) {\r\n                    return player.countCards('he', { color: 'red' }) > 1 && !player.hasSkill('huangyou_used');\r\n                },\r\n                content: [() => {\r\n                        if (player.hp == player.maxHp) {\r\n                            player.draw(3);\r\n                            Evt.goto(4);\r\n                        }\r\n                    }, () => {\r\n                        var list = ['摸三张牌', '回复体力'];\r\n                        Evt.videoId = lib.status.videoId++;\r\n                        game.broadcastAll(function (id, list) {\r\n                            var dialog = ui.create.dialog('选择一项', [list, 'vcard']);\r\n                            dialog.videoId = id;\r\n                        }, Evt.videoId, list);\r\n                    }, () => {\r\n                        player.chooseButton(true).set('dialog', Evt.videoId);\r\n                    }, () => {\r\n                        game.broadcastAll('closeDialog', Evt.videoId);\r\n                        if (result.buttons[0].link[2] == '摸三张牌') {\r\n                            player.draw(3);\r\n                        }\r\n                        if (result.buttons[0].link[2] == '回复体力') {\r\n                            player.recover();\r\n                        }\r\n                    }, () => {\r\n                        player.judge((card) => {\r\n                            if (get.suit(card, player) == 'heart')\r\n                                return 4;\r\n                            else {\r\n                                player.addTempSkill('huangyou_used');\r\n                                return -1;\r\n                            }\r\n                        });\r\n                    }],\r\n                ai: {\r\n                    order: 8,\r\n                    result: {\r\n                        player: 1,\r\n                    },\r\n                },\r\n                subSkill: {\r\n                    used: {},\r\n                },\r\n            },\r\n            qidao: {\r\n                trigger: {\r\n                    global: \"judge\",\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') > 0;\r\n                },\r\n                direct: true,\r\n                priority: 1,\r\n                content: [() => {\r\n                        player.chooseToDiscard(get.translation(trigger.player) + '的' + (trigger.judgestr || '') + '判定为' +\r\n                            get.translation(trigger.player.judging[0]) + '，' + get.prompt('qidao'), 'he', (card) => {\r\n                            return true;\r\n                        }).set('ai', (card) => {\r\n                            var trigger = _status.event.getTrigger();\r\n                            var player = _status.event.player;\r\n                            var judging = _status.event.judging;\r\n                            var result = trigger.judge(judging);\r\n                            var attitude = get.attitude(player, trigger.player);\r\n                            if (attitude == 0 || result == 0)\r\n                                return 0;\r\n                            if (attitude > 0) {\r\n                                return (-result) - get.value(card) + Math.random();\r\n                            }\r\n                            else {\r\n                                return result - get.value(card);\r\n                            }\r\n                        }).set('judging', trigger.player.judging[0]);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            trigger.player.judge();\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (trigger.player.judging[0].clone) {\r\n                            trigger.player.judging[0].clone.classList.remove('thrownhighlight');\r\n                            game.broadcast((card) => {\r\n                                if (card.clone) {\r\n                                    card.clone.classList.remove('thrownhighlight');\r\n                                }\r\n                            }, trigger.player.judging[0]);\r\n                            game.addVideo('deletenode', player, get.cardsInfo([trigger.player.judging[0].clone]));\r\n                        }\r\n                        game.cardsDiscard(trigger.player.judging[0]);\r\n                        trigger.player.judging[0] = result.card;\r\n                        trigger.orderingCards.add(result.card);\r\n                        game.log(trigger.player, '重新判定后的判定牌为', result.card);\r\n                        game.delay(0.5);\r\n                    }],\r\n            },\r\n            re_huxi1: {\r\n                audio: 'huxi1',\r\n                trigger: { player: 'gainEnd' },\r\n                filter(Evt, player) {\r\n                    return game.hasPlayer((cur) => {\r\n                        if (player.storage.huxiGroup == null)\r\n                            return true;\r\n                        return !player.storage.huxiGroup.contains(cur) && cur != player;\r\n                    }) && Evt.getParent().skill != 're_huxi1' && Evt.getParent(2).skill != 're_huxi1' && Evt.getParent(3).skill != 're_huxi1';\r\n                },\r\n                content: [() => {\r\n                        var next = player.chooseCardTarget('『呼吸』：请选择呼吸的对象与交换的牌', true).set('type', 'compare');\r\n                        next.set('filterTarget', function (card, player, target) {\r\n                            if (player.storage.huxiGroup && player.storage.huxiGroup.contains(target))\r\n                                return false;\r\n                            return target != player && player.countCards('h') && target.countCards('h');\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.target = result.targets[0];\r\n                            game.log(player, '想要呼吸', Evt.target);\r\n                            Evt.card1 = result.cards[0];\r\n                            Evt.target.chooseCard('『呼吸』：请选择交换的牌', true).set('type', 'compare');\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        Evt.card2 = result.cards[0];\r\n                        if (!Evt.resultOL && Evt.ol) {\r\n                            game.pause();\r\n                        }\r\n                    }, () => {\r\n                        player.lose(Evt.card1, ui.ordering);\r\n                        Evt.target.lose(Evt.card2, ui.ordering);\r\n                    }, () => {\r\n                        game.broadcast(() => {\r\n                            ui.arena.classList.add('thrownhighlight');\r\n                        });\r\n                        ui.arena.classList.add('thrownhighlight');\r\n                        game.addVideo('thrownhighlight1');\r\n                        player.$compare(Evt.card1, Evt.target, Evt.card2);\r\n                        game.log(player, '的交换牌为', Evt.card1);\r\n                        game.log(Evt.target, '的交换牌为', Evt.card2);\r\n                        Evt.num1 = Evt.card1.number;\r\n                        Evt.num2 = Evt.card2.number;\r\n                        Evt.trigger('compare');\r\n                        game.delay(0, 1500);\r\n                    }, () => {\r\n                        Evt.result = {\r\n                            getC: Evt.card2,\r\n                        };\r\n                        var str;\r\n                        str = get.translation(player.name) + '想要呼吸' + get.translation(Evt.target.name);\r\n                        game.broadcastAll(function (str) {\r\n                            var dialog = ui.create.dialog(str);\r\n                            dialog.classList.add('center');\r\n                            setTimeout(() => {\r\n                                dialog.close();\r\n                            }, 1000);\r\n                        }, str);\r\n                        game.delay(2);\r\n                    }, () => {\r\n                        if (typeof Evt.target.ai.shown == 'number' && Evt.target.ai.shown <= 0.85 && Evt.addToAI) {\r\n                            Evt.target.ai.shown += 0.1;\r\n                        }\r\n                        player.gain(Evt.card2, 'visible');\r\n                        player.$gain2(Evt.card2);\r\n                        game.delay(1);\r\n                        target.gain(Evt.card1, 'visible');\r\n                        target.$gain2(Evt.card1);\r\n                        game.broadcastAll(() => {\r\n                            ui.arena.classList.remove('thrownhighlight');\r\n                        });\r\n                        game.addVideo('thrownhighlight2');\r\n                        if (Evt.clear !== false) {\r\n                            game.broadcastAll(ui.clear);\r\n                        }\r\n                        if (typeof Evt.preserve == 'function') {\r\n                            Evt.preserve = Evt.preserve(Evt.result);\r\n                        }\r\n                    }, () => {\r\n                        if (get.color(Evt.result.getC) == 'red') {\r\n                            player.draw(1);\r\n                            if (!player.hasSkill('re_huxi2')) {\r\n                                player.addTempSkill('re_huxi2');\r\n                            }\r\n                        }\r\n                        if (player.storage.huxiGroup == null)\r\n                            player.storage.huxiGroup = [];\r\n                        player.storage.huxiGroup.add(target);\r\n                    }],\r\n                group: 're_huxi1_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        firstDo: true,\r\n                        silent: true,\r\n                        direct: true,\r\n                        trigger: {\r\n                            player: ['phaseAfter']\r\n                        },\r\n                        content() {\r\n                            delete player.storage.huxiGroup;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            re_huxi2: {\r\n                trigger: {\r\n                    player: 'useCard'\r\n                },\r\n                firstDo: true,\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return get.name(Evt.card) == 'sha';\r\n                },\r\n                content() {\r\n                    if (trigger.addCount !== false) {\r\n                        trigger.addCount = false;\r\n                        var stat = player.getStat();\r\n                        if (stat && stat.card && stat.card[trigger.card.name])\r\n                            stat.card[trigger.card.name]--;\r\n                        if (player.hasSkill('re_huxi2')) {\r\n                            player.removeSkill('re_huxi2');\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            xinchixin: {\r\n                trigger: { global: ['loseAfter', 'cardsDiscardAfter'] },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'cardsDiscard' && Evt.getParent().name == 'orderingDiscard' && Evt.getParent().relatedEvent.name == 'useCard')\r\n                        return false;\r\n                    if (Evt.name == 'lose' && (Evt.getParent().name == 'useCard' || Evt.position != ui.discardPile))\r\n                        return false;\r\n                    var list = Evt.cards.filter((card) => {\r\n                        if (player.storage.xinchixin && player.storage.xinchixin.contains(card))\r\n                            return false;\r\n                        return get.suit(card) == 'heart' && get.position(card) == 'd';\r\n                    });\r\n                    return list.length > 0;\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        Evt.cards = trigger.cards.filterInD('d');\r\n                    }, () => {\r\n                        Evt.videoId = lib.status.videoId++;\r\n                        var dialogx = ['###『赤心』：进入弃牌堆的牌###获得其中一张红色牌；或将其中任意张牌以任意顺序置于牌堆顶（先选择的在上）'];\r\n                        dialogx.push(Evt.cards);\r\n                        if (player.isOnline2()) {\r\n                            player.send(function (dialogx, id) {\r\n                                ui.create.dialog.apply(null, dialogx).videoId = id;\r\n                            }, dialogx, Evt.videoId);\r\n                        }\r\n                        Evt.dialog = ui.create.dialog.apply(null, dialogx);\r\n                        Evt.dialog.videoId = Evt.videoId;\r\n                        if (player != game.me || _status.auto) {\r\n                            Evt.dialog.style.display = 'none';\r\n                        }\r\n                        var next = player.chooseButton();\r\n                        next.set('selectButton', () => {\r\n                            if (ui.selected.buttons.length == 0)\r\n                                return 2;\r\n                            else if (get.color(ui.selected.buttons[0].link) == 'red' && ui.dialog.buttons.length == 1)\r\n                                return 1;\r\n                            return [1, Infinity];\r\n                        });\r\n                        next.set('dialog', Evt.videoId);\r\n                        next.set('ai', function (button) {\r\n                            return get.value(button.link) && ui.selected.buttons.length == 1;\r\n                        });\r\n                        next.set('forceAuto', () => {\r\n                            return ui.selected.buttons.length == ui.dialog.buttons.length || ui.dialog.buttons.length == 1;\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.links = result.links;\r\n                            var controls = ['取消选择', '将这些牌置于牌堆顶', '获得这张牌'];\r\n                            if (Evt.links.length != 1 || get.color(Evt.links[0]) != 'red') {\r\n                                controls.splice(2, 1);\r\n                            }\r\n                            var func = function (cards, id) {\r\n                                var dialog = get.idDialog(id);\r\n                                if (dialog) {\r\n                                    for (var j = 0; j < cards.length; j++) {\r\n                                        for (let i of dialog.buttons) {\r\n                                            if (i.link == cards[j]) {\r\n                                                i.classList.add('glow');\r\n                                            }\r\n                                            else {\r\n                                                i.classList.add('unselectable');\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            };\r\n                            if (player.isOnline2()) {\r\n                                player.send(func, Evt.links, Evt.videoId);\r\n                            }\r\n                            else if (player == game.me && !_status.auto) {\r\n                                func(Evt.links, Evt.videoId);\r\n                            }\r\n                            player.chooseControl(controls).set('ai', function (Evt, player) {\r\n                                return _status.event.index;\r\n                            }).set('index', 2);\r\n                        }\r\n                        else {\r\n                            if (player.isOnline2()) {\r\n                                player.send('closeDialog', Evt.videoId);\r\n                            }\r\n                            Evt.dialog.close();\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        switch (result.index) {\r\n                            case 0: {\r\n                                Evt.goto(1);\r\n                                break;\r\n                            }\r\n                            case 1: {\r\n                                var list = Evt.links.slice(0);\r\n                                while (list.length) {\r\n                                    ui.cardPile.insertBefore(list.pop(), ui.cardPile.firstChild);\r\n                                }\r\n                                game.log(player, '将牌放在牌堆顶');\r\n                                break;\r\n                            }\r\n                            case 2: {\r\n                                if (!player.storage.xinchixin)\r\n                                    player.storage.xinchixin = [];\r\n                                player.storage.xinchixin.addArray(Evt.links);\r\n                                player.gain(Evt.links);\r\n                                game.log(player, '获得了', Evt.links);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }, () => {\r\n                        if (player.isOnline2()) {\r\n                            player.send('closeDialog', Evt.videoId);\r\n                        }\r\n                        Evt.dialog.close();\r\n                    }],\r\n                group: 'xinchixin_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { global: 'phaseAfter' },\r\n                        priority: 23,\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            if (player.storage.xinchixin && player.storage.xinchixin.length) {\r\n                                player.storage.xinchixin.length = 0;\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            juebi: {\r\n                group: ['juebi_shan', 'juebi_dam'],\r\n                subSkill: {\r\n                    shan: {\r\n                        enable: ['chooseToUse', 'chooseToRespond'],\r\n                        filterCard(card) {\r\n                            return get.type(card) != 'basic';\r\n                        },\r\n                        viewAs: { name: 'shan' },\r\n                        position: 'hes',\r\n                        prompt: '将一张非基本牌当【闪】使用或打出',\r\n                        check(card) { return 8 - get.value(card); },\r\n                        filter(Evt, player) {\r\n                            return !player.getStat().damaged;\r\n                        },\r\n                    },\r\n                    dam: {\r\n                        trigger: { player: 'damageEnd' },\r\n                        priority: 199,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            return !player.hasSkill('juebi_addDam');\r\n                        },\r\n                        content() {\r\n                            player.addTempSkill('juebi_addDam', 'phaseAfter');\r\n                        },\r\n                    },\r\n                    addDam: {\r\n                        marktext: '壁',\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '可以令下一次造成的伤害+1',\r\n                            name: '绝壁狂怒',\r\n                        },\r\n                        trigger: { source: 'damageBegin2' },\r\n                        priority: 199,\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content: [() => {\r\n                                player.chooseBool('###『绝壁』###是否令本次造成的伤害+1', () => {\r\n                                    return get.attitude(player, trigger.player) < 0;\r\n                                });\r\n                            }, () => {\r\n                                if (result.bool) {\r\n                                    player.logSkill('juebi', trigger.player);\r\n                                    trigger.num++;\r\n                                }\r\n                                if (player.hasSkill('juebi_addDam'))\r\n                                    player.removeSkill('juebi_addDam');\r\n                            }],\r\n                        ai: {\r\n                            damageBonus: true,\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            zhanhou: {\r\n                group: ['zhanhou_damage', 'zhanhou_recover'],\r\n                subSkill: {\r\n                    damage: {\r\n                        trigger: { player: 'phaseUseBegin' },\r\n                        priority: 199,\r\n                        check(Evt, player) {\r\n                            return player.getCardUsable('shunshou') && player.hp > 1;\r\n                        },\r\n                        prompt2: '『战吼』出牌阶段开始时，你可以受到1点伤害，视为使用一张【顺手牵羊】。',\r\n                        content: [() => {\r\n                                player.damage('nosource');\r\n                            }, () => {\r\n                                player.chooseUseTarget('###『战吼』###视为使用一张【顺手牵羊】', { name: 'shunshou' }, true);\r\n                            }],\r\n                    },\r\n                    recover: {\r\n                        trigger: { global: 'dieAfter' },\r\n                        priority: 199,\r\n                        filter(Evt, player) {\r\n                            return player.hp < player.maxHp;\r\n                        },\r\n                        prompt2: '『战吼』其他角色阵亡时，你可以回复1点体力，视为使用一张【顺手牵羊】。',\r\n                        content: [() => {\r\n                                player.recover();\r\n                            }, () => {\r\n                                player.chooseUseTarget('###『战吼』###视为使用一张【顺手牵羊】', { name: 'shunshou' }, true);\r\n                            }],\r\n                    }\r\n                }\r\n            },\r\n            qiangyun: {\r\n                trigger: { global: 'judge' },\r\n                filter(Evt, player) {\r\n                    return player == Evt.player && player.countCards('he') > 0;\r\n                },\r\n                direct: true,\r\n                priority: 2,\r\n                content: [() => {\r\n                        player.chooseCard(get.translation(trigger.player) + '的' + (trigger.judgestr || '') + '判定为' +\r\n                            get.translation(trigger.player.judging[0]) + '，' + get.prompt('qiangyun'), 'he', (card) => {\r\n                            return true;\r\n                        }).set('ai', (card) => {\r\n                            var trigger = _status.event.getTrigger();\r\n                            var player = _status.event.player;\r\n                            var judging = _status.event.judging;\r\n                            var result = trigger.judge(card) - trigger.judge(judging);\r\n                            var attitude = get.attitude(player, trigger.player);\r\n                            if (attitude == 0 || result == 0)\r\n                                return 0;\r\n                            if (attitude > 0) {\r\n                                return result;\r\n                            }\r\n                            else {\r\n                                return -result;\r\n                            }\r\n                        }).set('judging', trigger.player.judging[0]);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.card = result.cards[0];\r\n                            player.addTempSkill('qiangyun2');\r\n                            player.storage.qiangyun2 = [Evt.card];\r\n                            player.respond(Evt.card, 'highlight');\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            if (trigger.player.judging[0].clone) {\r\n                                trigger.player.judging[0].clone.classList.remove('thrownhighlight');\r\n                                game.broadcast((card) => {\r\n                                    if (card.clone) {\r\n                                        card.clone.classList.remove('thrownhighlight');\r\n                                    }\r\n                                }, trigger.player.judging[0]);\r\n                                game.addVideo('deletenode', player, get.cardsInfo([trigger.player.judging[0].clone]));\r\n                            }\r\n                            game.cardsDiscard(trigger.player.judging[0]);\r\n                            trigger.player.judging[0] = Evt.card;\r\n                            if (!get.owner(Evt.card, 'judge')) {\r\n                                trigger.position.appendChild(Evt.card);\r\n                            }\r\n                            game.log(trigger.player, '的判定牌改为', Evt.card);\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        game.delay(2.5);\r\n                    }],\r\n            },\r\n            qiangyun2: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                trigger: { global: 'judgeAfter' },\r\n                filter(Evt, player) {\r\n                    return player.hasUseTarget(player.storage.qiangyun2[0]);\r\n                },\r\n                direct: true,\r\n                priority: 2,\r\n                content() {\r\n                    Evt.card = player.storage.qiangyun2[0];\r\n                    player.addTempSkill('qiangyun3', 'useCardAfter');\r\n                    player.storage.qiangyun3 = [Evt.card];\r\n                    player.chooseUseTarget('是否使用' + get.translation(Evt.card), Evt.card, false, 'noanimate');\r\n                    if (player.hasSkill('qiangyun2'))\r\n                        player.removeSkill('qiangyun2');\r\n                },\r\n                onremove(player) {\r\n                    delete player.storage.qiangyun2;\r\n                }\r\n            },\r\n            qiangyun3: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                trigger: { source: 'damageEnd' },\r\n                filter(Evt, player) {\r\n                    return Evt.cards && player.storage.qiangyun3.contains(Evt.cards[0]);\r\n                },\r\n                direct: true,\r\n                priority: 2,\r\n                content() {\r\n                    player.draw();\r\n                },\r\n                onremove(player) {\r\n                    delete player.storage.qiangyun3;\r\n                },\r\n            },\r\n            tuquan: {\r\n                audio: 4,\r\n                trigger: { player: 'shaMiss' },\r\n                forced: true,\r\n                content: [() => {\r\n                        player.judge((card) => {\r\n                            if (get.suit(card) == 'spade') {\r\n                                return 1;\r\n                            }\r\n                            else if (get.suit(card) == 'heart') {\r\n                                return -1;\r\n                            }\r\n                            return 0;\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            if (result.suit == 'spade') {\r\n                                player.discardPlayerCard('结果为♠，请弃置对方一张牌', trigger.target, 'he', true);\r\n                            }\r\n                            else if (result.suit == 'heart') {\r\n                                player.chooseToDiscard('结果为♥，请弃置一张牌', 'he', true);\r\n                            }\r\n                        }\r\n                    }],\r\n            },\r\n            re_doupeng: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filterTarget(card, player, target) {\r\n                    return player.canCompare(target);\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.countCards('h') > 0;\r\n                },\r\n                content: [() => {\r\n                        player.chooseToCompare(target).set('small', get.recoverEffect(player, target, target) > 0);\r\n                    }, () => {\r\n                        Evt.resultWinner = result.winner;\r\n                        if (Evt.resultWinner == player) {\r\n                            player.draw(2);\r\n                        }\r\n                        else if (Evt.resultWinner == target) {\r\n                            target.draw(2);\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.resultWinner != player) {\r\n                            player.chooseBool('是否使对方回复一点体力').set('ai', () => {\r\n                                return _status.event.check;\r\n                            }).set('check', get.recoverEffect(target, player, player) > 0);\r\n                        }\r\n                        else\r\n                            Evt.goto(5);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            target.recover(player);\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.resultWinner != target) {\r\n                            target.chooseBool('是否使对方回复一点体力').set('ai', () => {\r\n                                return _status.event.check;\r\n                            }).set('check', get.recoverEffect(player, target, target) > 0);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.recover(target);\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    order: 8,\r\n                    result: {\r\n                        player: 0.6,\r\n                        target: 0.6,\r\n                    },\r\n                },\r\n            },\r\n            re_xuyan: {\r\n                trigger: { player: 'phaseJieshuBegin' },\r\n                content: [() => {\r\n                        player.chooseTarget(1, '选择观察目标', function (card, player, target) {\r\n                            return player != target;\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            result.targets[0].addSkill('re_xuyan_mark');\r\n                        }\r\n                    }],\r\n                group: ['re_xuyan_phaseStart', 're_xuyan_damage'],\r\n                subSkill: {\r\n                    mark: {\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '造成伤害被列入了观察项目'\r\n                        },\r\n                    },\r\n                    phaseStart: {\r\n                        trigger: { player: 'phaseBegin' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return player.hasSkill('re_xuyan_damaged') || player.hasSkill('re_xuyan_dead') || game.filterPlayer((cur) => {\r\n                                if (cur.hasSkill('re_xuyan_mark')) {\r\n                                    return true;\r\n                                }\r\n                                else\r\n                                    return false;\r\n                            }).length > 0;\r\n                        },\r\n                        content: [() => {\r\n                                game.filterPlayer((cur) => {\r\n                                    if (cur.hasSkill('re_xuyan_mark')) {\r\n                                        cur.removeSkill('re_xuyan_mark');\r\n                                        return true;\r\n                                    }\r\n                                    else\r\n                                        return false;\r\n                                });\r\n                            }, () => {\r\n                                if (player.hasSkill('re_xuyan_damaged')) {\r\n                                    player.draw(1);\r\n                                    player.removeSkill('re_xuyan_damaged');\r\n                                }\r\n                                else {\r\n                                    player.chooseTarget(true, '令一名角色与你各失去1点体力').set('ai', function (target) {\r\n                                        var player = _status.event.player;\r\n                                        return 2 - get.attitude(player, target);\r\n                                    });\r\n                                }\r\n                            }, () => {\r\n                                if (result.bool) {\r\n                                    player.loseHp();\r\n                                    result.targets[0].loseHp();\r\n                                }\r\n                            }]\r\n                    },\r\n                    damage: {\r\n                        trigger: { global: 'damageAfter' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            if (Evt.source) {\r\n                                return Evt.source.hasSkill('re_xuyan_mark');\r\n                            }\r\n                            else\r\n                                return false;\r\n                        },\r\n                        content() {\r\n                            player.addSkill('re_xuyan_damaged');\r\n                        }\r\n                    },\r\n                    damaged: {\r\n                        mark: true,\r\n                        marktext: '伤',\r\n                        intro: {\r\n                            content: '观察目标造成了伤害'\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            re_hundunliandong: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filterTarget(card, player, target) {\r\n                    if (target.hasSkill('rongyaochengyuan_homolive')) {\r\n                        for (let i of ui.selected.targets) {\r\n                            if (i.hasSkill('rongyaochengyuan_homolive'))\r\n                                return false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        for (let i of ui.selected.targets) {\r\n                            if (i.group == target.group)\r\n                                return false;\r\n                        }\r\n                    }\r\n                    return target.countCards('he');\r\n                },\r\n                selectTarget: [1, Infinity],\r\n                complexTarget: true,\r\n                multitarget: false,\r\n                content() {\r\n                    target.chooseToDiscard(true, 1, 'he', '混沌联动：弃置一张牌');\r\n                },\r\n                ai: {\r\n                    order: 8,\r\n                    result: {\r\n                        target(player, target) {\r\n                            return lib.card.guohe_copy2.ai.result.target.apply(this, arguments);\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            fengna: {\r\n                audio: 'luecai',\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    return !player.hasSkill('fengna_used') && !player.isMaxHandcard();\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    if (player == target)\r\n                        return false;\r\n                    return target.countCards('h') > player.countCards('h');\r\n                },\r\n                selectTarget: -1,\r\n                multitarget: false,\r\n                content: [() => {\r\n                        target.chooseCard('he', '『奉纳』：将一张牌交给' + get.translation(player), true);\r\n                    }, () => {\r\n                        player.gain(result.cards[0], target, 'giveAuto');\r\n                        player.addTempSkill('fengna_used', 'phaseUseEnd');\r\n                    }],\r\n                ai: {\r\n                    threaten: 1.8,\r\n                    order: 4,\r\n                    result: {\r\n                        target(player, target) {\r\n                            return lib.card.shunshou_copy2.ai.result.target.apply(this, arguments);\r\n                        },\r\n                        player(player, target) {\r\n                            return lib.card.shunshou_copy2.ai.result.player.apply(this, arguments);\r\n                        },\r\n                    },\r\n                },\r\n                subSkill: {\r\n                    used: {}\r\n                },\r\n            },\r\n            re_xiaoyan: {\r\n                audio: 'xiaoyan',\r\n                direct: true,\r\n                trigger: {\r\n                    player: \"useCard\",\r\n                },\r\n                content() {\r\n                    trigger.directHit.addArray(game.filterPlayer((cur) => {\r\n                        return cur.countCards('h') < player.countCards('h');\r\n                    }));\r\n                },\r\n            },\r\n            re_yuxia: {\r\n                audio: 'yuxia',\r\n                hiddenCard(player, name) {\r\n                    if (!lib.skill.re_yuxia.filter(false, player) || player.getStat('skill').re_yuxia)\r\n                        return false;\r\n                    let list = get.inpile('trick');\r\n                    return list.contains(name);\r\n                },\r\n                enable: 'chooseToUse',\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') >= 3 && !player.getStat('skill').re_yuxia;\r\n                },\r\n                chooseButton: {\r\n                    dialog(Evt, player) {\r\n                        let list = get.inpile('trick');\r\n                        for (let i = 0; i < list.length; i++) {\r\n                            list[i] = ['锦囊', '', list[i]];\r\n                        }\r\n                        return ui.create.dialog('『龙箱』', [list, 'vcard']);\r\n                    },\r\n                    filter(button, player) {\r\n                        return _status.event.getParent().filterCard({ name: button.link[2], nature: button.link[3] }, player, _status.event.getParent());\r\n                    },\r\n                    check(button) {\r\n                        let player = _status.event.player;\r\n                        if (player.countCards('h', button.link[2]) > 0)\r\n                            return 0;\r\n                        if (['wugu', 'jingluo'].contains(button.link[2]))\r\n                            return 0;\r\n                        let effect = player.getUseValue(button.link[2]);\r\n                        if (effect > 0)\r\n                            return effect;\r\n                        return 0;\r\n                    },\r\n                    backup(links, player) {\r\n                        return {\r\n                            audio: 'yuxia',\r\n                            filterCard(card) {\r\n                                return true;\r\n                            },\r\n                            selectCard: 3,\r\n                            forceAuto() {\r\n                                return ui.selected.buttons.length == 3;\r\n                            },\r\n                            popname: true,\r\n                            check(card) {\r\n                                return 7 - get.value(card);\r\n                            },\r\n                            position: 'he',\r\n                            viewAs(cards, player) {\r\n                                var number = 0;\r\n                                for (let i of cards) {\r\n                                    number += get.number(i);\r\n                                }\r\n                                if (number)\r\n                                    return { name: links[0][2], nature: links[0][3], number: number };\r\n                                return { name: links[0][2], nature: links[0][3] };\r\n                            },\r\n                        };\r\n                    },\r\n                    prompt(links, player) {\r\n                        return '###『龙箱』###将三张牌当做【' + (get.translation(links[0][3]) || '') + get.translation(links[0][2]) + '】使用';\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 6,\r\n                    result: { player: 1 },\r\n                },\r\n                group: 're_yuxia_after',\r\n                subSkill: {\r\n                    after: {\r\n                        trigger: { player: 'useCardEnd' },\r\n                        priority: 66,\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            return Evt.cards.length == 3 && Evt.skill == 're_yuxia_backup' && get.position(Evt.cards[0]) == 'd';\r\n                        },\r\n                        content: [() => {\r\n                                Evt.cards = trigger.cards.filterInD();\r\n                                game.broadcastAll(function (player, cards) {\r\n                                    player.chooseCardButton([0, 1], true, cards, '『龙箱』：可以将其中一张牌置于牌堆顶').set('ai', function (button) {\r\n                                        return get.value(button.link) + Math.random();\r\n                                    });\r\n                                }, player, Evt.cards);\r\n                            }, () => {\r\n                                if (result.bool && result.links) {\r\n                                    var list = result.links.slice(0);\r\n                                    Evt.cards.removeArray(list);\r\n                                    while (list.length) {\r\n                                        ui.cardPile.insertBefore(list.pop(), ui.cardPile.firstChild);\r\n                                    }\r\n                                    game.log(player, '将牌放在牌堆顶');\r\n                                    if (Evt.cards.length) {\r\n                                        game.cardsDiscard(Evt.cards);\r\n                                        game.log(Evt.cards, '进入了弃牌堆');\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    game.cardsDiscard(Evt.cards);\r\n                                    game.log(Evt.cards, '进入了弃牌堆');\r\n                                }\r\n                            }]\r\n                    }\r\n                },\r\n            },\r\n            hanyin: {\r\n                trigger: { global: ['useCard', 'respond'] },\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    if (Array.isArray(Evt.respondTo) && Evt.respondTo[0] == player) {\r\n                        var num = get.number(Evt.respondTo[1]);\r\n                        return (Evt.cards && Evt.cards.filter(function (i) {\r\n                            return get.number(i) < num;\r\n                        }).length) || get.number(Evt.card) < num;\r\n                    }\r\n                    ;\r\n                },\r\n                content() {\r\n                    player.draw();\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        player(card, player) {\r\n                            if (['nanman', 'wanjian', 'haixiao'].contains(get.name(card))) {\r\n                                var num = game.countPlayer((cur) => {\r\n                                    return cur != player;\r\n                                });\r\n                                if (get.number(card))\r\n                                    num *= get.number(card) / 12;\r\n                                return [1, num];\r\n                            }\r\n                        }\r\n                    },\r\n                    directHit_ai: true,\r\n                    skillTagFilter(player, tag, arg) {\r\n                        if (tag == 'directHit_ai' && arg) {\r\n                            if (get.attitude(arg.target, player) > 0)\r\n                                return false;\r\n                            return get.number(arg.card) && get.number(arg.card) >= 13;\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            re_huange: {\r\n                trigger: { global: 'phaseBegin' },\r\n                round: 1,\r\n                priority: 996,\r\n                filter(Evt, player) {\r\n                    return game.countPlayer((cur) => {\r\n                        return cur.hp != Infinity;\r\n                    });\r\n                },\r\n                check(Evt, player) {\r\n                    if (Evt.player != player && get.attitude(Evt.player, player) < 0 && Evt.player.inRange(player))\r\n                        return true;\r\n                    return Evt.player == player && !player.hasJudge('lebu') && (!player.hasUnknown(2) || !player.needsToDiscard());\r\n                },\r\n                content: [() => {\r\n                        var next = player.chooseTarget('###『幻歌』###选择一名角色，摸取其体力值的牌', true, function (card, player, target) {\r\n                            return target.hp != Infinity;\r\n                        });\r\n                        next.set('ai', function (target) {\r\n                            if (player.inRange(target))\r\n                                return 2 - get.attitude(player, target);\r\n                            else\r\n                                return target.hp - (get.attitude(player, target) / 2);\r\n                        });\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            player.logSkill('re_huange', result.targets);\r\n                            player.draw(result.targets[0].hp);\r\n                            player.storage.re_huange_disc = result.targets[0];\r\n                            player.markSkill('re_huange_disc');\r\n                            player.addTempSkill('re_huange_disc');\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    disc: {\r\n                        mark: 'character',\r\n                        intro: {\r\n                            name: '幻歌',\r\n                            content: '回合结束时弃置$体力值的牌',\r\n                        },\r\n                        trigger: { global: 'phaseEnd' },\r\n                        priority: 996,\r\n                        onremove: true,\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return player.countDiscardableCards(player, 'he');\r\n                        },\r\n                        content: [() => {\r\n                                if (player.storage.re_huange_disc.isIn() && player.countCards('he')) {\r\n                                    player.chooseCard('he', '###『幻歌』###弃置' + get.cnNumber(player.storage.re_huange_disc.hp) + '张牌', player.storage.re_huange_disc.hp, true, lib.filter.cardDiscardable);\r\n                                }\r\n                                else {\r\n                                    Evt.goto(2);\r\n                                }\r\n                            }, () => {\r\n                                if (result.bool) {\r\n                                    player.discard(result.cards);\r\n                                }\r\n                            }, () => {\r\n                                player.unmarkSkill('re_huange_disc');\r\n                                delete player.storage.re_huange_disc;\r\n                            }],\r\n                    }\r\n                },\r\n            },\r\n            re_jiumao: {\r\n                audio: 'jiumao',\r\n                group: ['re_jiumao_put', 're_jiumao_use', 're_jiumao_jiesuan'],\r\n                subSkill: {\r\n                    put: {\r\n                        trigger: {\r\n                            global: 'phaseDiscardBegin',\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return player != Evt.player;\r\n                        },\r\n                        frequent: true,\r\n                        content: [() => {\r\n                                trigger.player.chooseCard('###' + get.prompt('re_jiumao', player) + '###将任意张手牌交给' + get.translation(player), 'he', [1, Infinity]).set('ai', (card) => {\r\n                                    var player = _status.event.player;\r\n                                    var source = _status.event.source;\r\n                                    if (get.attitude(player, source) <= 0)\r\n                                        return -1;\r\n                                    if (!source.needsToDiscard() && !ui.selected.cards.length)\r\n                                        return get.value(card, target) - get.value(card, player) + 4;\r\n                                    if (player.needsToDiscard() && ui.selected.cards.length < (player.countCards('h') - source.countCards('h')) / 2)\r\n                                        return get.value(card, target) - get.value(card, player) + 1;\r\n                                    else\r\n                                        return get.value(card, target) - get.value(card, player) - 2;\r\n                                }).set('source', player);\r\n                            }, () => {\r\n                                if (result.bool) {\r\n                                    trigger.player.logSkill('re_jiumao', player);\r\n                                    trigger.player.give(result.cards, player);\r\n                                }\r\n                                else\r\n                                    Evt.finish();\r\n                            }, () => {\r\n                                if (player.countCards('h') == trigger.player.countCards('h')) {\r\n                                    trigger._re_jiumao = true;\r\n                                }\r\n                                game.delayx();\r\n                            }]\r\n                    },\r\n                    use: {\r\n                        trigger: {\r\n                            global: 'phaseDiscardEnd',\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return player != Evt.player && Evt._re_jiumao == true;\r\n                        },\r\n                        direct: true,\r\n                        content: [() => {\r\n                                player.chooseCardTarget({\r\n                                    position: 'hs',\r\n                                    filterCard: true,\r\n                                    prompt: get.prompt('re_jiumao') + '使用一张牌并使其额外结算一次',\r\n                                    filterTarget(card, player, target) {\r\n                                        return lib.filter.filterTarget.apply(this, arguments);\r\n                                    },\r\n                                    ai1(card, player, target) {\r\n                                        if (get.type(card) != 'equip' && get.name(card) != 'jiu')\r\n                                            return get.order(card);\r\n                                        return 0;\r\n                                    },\r\n                                    ai2(card, player, target) {\r\n                                        if (!_status.event.check)\r\n                                            return 0;\r\n                                        return get.effect(target, { name: 'sha' }, _status.event.player);\r\n                                    }\r\n                                });\r\n                            }, () => {\r\n                                var _a;\r\n                                if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                                    player.useCard(result.cards[0], result.targets, result.cards, false).set('addedSkill', 're_jiumao_use');\r\n                                }\r\n                            }]\r\n                    },\r\n                    jiesuan: {\r\n                        trigger: { player: 'useCardAfter' },\r\n                        forced: true,\r\n                        priority: 42,\r\n                        filter(Evt, player) {\r\n                            return Evt.addedSkill == 're_jiumao_use';\r\n                        },\r\n                        content() {\r\n                            var card = game.createCard(trigger.card.name, trigger.card.suit, trigger.card.number, trigger.card.nature);\r\n                            player.useCard(card, (trigger._targets || trigger.targets).slice(0), trigger.cards).skill = trigger.skill || 're_jiumao_jiesuan';\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            re_enfan: {\r\n                audio: 'shiqi',\r\n                trigger: {\r\n                    global: 'dying'\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.countCards('h') && Evt.player != player;\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        player.chooseCard([1, Infinity], get.prompt2('re_enfan'), 'he').set('ai', (card) => {\r\n                            if (!_status.event.check)\r\n                                return 0;\r\n                            return 6 - get.value(card);\r\n                        }).set('check', get.attitude(player, trigger.player) > 0);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.target = trigger.player;\r\n                            player.logSkill('re_enfan', Evt.target);\r\n                            player.give(result.cards, Evt.target, 'giveAuto');\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.target.countCards('h')) {\r\n                            let cardResult = () => {\r\n                                var cards = Evt.target.getCards('he');\r\n                                var l = cards.length;\r\n                                var all = Math.pow(l, 2);\r\n                                var list = [];\r\n                                for (var i = 1; i < all; i++) {\r\n                                    var array = [];\r\n                                    for (var j = 0; j < l; j++) {\r\n                                        if (Math.floor((i % Math.pow(2, j + 1)) / Math.pow(2, j)) > 0)\r\n                                            array.push(cards[j]);\r\n                                    }\r\n                                    var types = [];\r\n                                    for (var k of array) {\r\n                                        types.add(get.type2(k));\r\n                                    }\r\n                                    if (types.length == 3)\r\n                                        list.push(array);\r\n                                }\r\n                                if (list.length) {\r\n                                    var sortx = function (x) {\r\n                                        var num = get.value(x);\r\n                                        if (x.filter(function (y) {\r\n                                            return get.color(y) == 'red';\r\n                                        }).length && x.filter(function (y) {\r\n                                            return get.color(y) == 'black';\r\n                                        }).length)\r\n                                            num -= 4;\r\n                                        return num;\r\n                                    };\r\n                                    list.sort(function (a, b) {\r\n                                        var numa = sortx(a);\r\n                                        var numb = sortx(b);\r\n                                        return numa - numb;\r\n                                    });\r\n                                    return list[0];\r\n                                }\r\n                                return list;\r\n                            };\r\n                            Evt.target.chooseToDiscard([1, Infinity], true, 'he').set('complexCard', true).set('cardResult', cardResult()).set('ai', (card) => {\r\n                                if (!_status.event.cardResult.length)\r\n                                    return 0 - get.value(card);\r\n                                if (!_status.event.cardResult.contains(card))\r\n                                    return 0;\r\n                                return 10;\r\n                            });\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            if (get.type3(result.cards).length >= 3) {\r\n                                Evt.target.recover();\r\n                            }\r\n                            if (get.color3(result.cards).length >= 2) {\r\n                                game.asyncDraw([Evt.target, player]);\r\n                            }\r\n                        }\r\n                    }]\r\n            },\r\n            re_yuzhan: {\r\n                audio: 'xuanxu',\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                content: [() => {\r\n                        var cards = get.cards(4);\r\n                        Evt.cards = cards;\r\n                        var rednum = 0, blacknum = 0;\r\n                        for (var i = 0; i < cards.length; i++) {\r\n                            if (get.color(cards[i]) == 'red')\r\n                                rednum++;\r\n                            if (get.color(cards[i]) == 'black')\r\n                                blacknum++;\r\n                        }\r\n                        if ((rednum == 2 && blacknum == 2) || rednum == 4 || blacknum == 4) {\r\n                            var next = player.chooseCardButton(2, '预占:选择令当前回合角色获得其中一对', Evt.cards, true);\r\n                            next.set('filterButton', function (button) {\r\n                                for (var i = 0; i < ui.selected.buttons.length; i++) {\r\n                                    if (get.color(ui.selected.buttons[i].link) != get.color(button.link))\r\n                                        return false;\r\n                                }\r\n                                return true;\r\n                            });\r\n                            next.set('ai', function (button) {\r\n                                if (_status.currentPhase != _status.event.player) {\r\n                                    return -get.value(button.link, _status.event.player);\r\n                                }\r\n                                return get.value(button.link, _status.event.player);\r\n                            });\r\n                        }\r\n                        else {\r\n                            for (var i = Evt.cards.length - 1; i >= 0; i--) {\r\n                                ui.cardPile.insertBefore(Evt.cards[i], ui.cardPile.firstChild);\r\n                            }\r\n                            player.chooseToGuanxing(Evt.cards.length);\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            var player2 = _status.currentPhase;\r\n                            Evt.cards.remove(result.links[0]);\r\n                            Evt.cards.remove(result.links[1]);\r\n                            player2.gain(result.links, 'gain2');\r\n                            if (player != player2) {\r\n                                player.gain(Evt.cards, 'gain2');\r\n                                Evt.cards = [];\r\n                            }\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (_status.currentPhase == player && Evt.cards.length) {\r\n                            for (var i = Evt.cards.length - 1; i >= 0; i--) {\r\n                                ui.cardPile.insertBefore(Evt.cards[i], ui.cardPile.firstChild);\r\n                            }\r\n                            player.chooseToGuanxing(Evt.cards.length);\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    order: 8,\r\n                    result: {\r\n                        player: 1,\r\n                    },\r\n                },\r\n            },\r\n            re_bizuo: {\r\n                trigger: { global: 'phaseBegin' },\r\n                round: 1,\r\n                filter(Evt, player) {\r\n                    return _status.currentPhase && player.countCards('h');\r\n                },\r\n                check(Evt, player) {\r\n                    return get.attitude(player, Evt.player) > 0;\r\n                },\r\n                content: [() => {\r\n                        var next = player.chooseCard(get.prompt2('re_bizuo'), 'h', [1, player.countCards('h')]);\r\n                        next.set('ai', (card) => {\r\n                            if (['shan', 'wuxie', 'jinchan'].contains(get.name(card)) || !_status.currentPhase.hasUseTarget(card))\r\n                                return 0;\r\n                            return 6 - get.value(card);\r\n                        });\r\n                    }, () => {\r\n                        if (result.cards && result.cards.length) {\r\n                            player.logSkill('re_bizuo', trigger.player);\r\n                            player.lose(result.cards, ui.special);\r\n                            player.$throw(result.cards, 1000);\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (result.cards && result.cards.length) {\r\n                            for (var i = 0; i < result.cards.length; i++) {\r\n                                result.cards[i].fix();\r\n                                result.cards[i].storage.bizuo = true;\r\n                                ui.cardPile.insertBefore(result.cards[i], ui.cardPile.firstChild);\r\n                            }\r\n                            game.log(player, '将' + get.cnNumber(result.cards.length) + '张牌置于牌堆顶');\r\n                        }\r\n                    }],\r\n                group: ['re_bizuo_use', 're_bizuo_end'],\r\n                subSkill: {\r\n                    use: {\r\n                        trigger: {\r\n                            global: 'useCard',\r\n                        },\r\n                        check(Evt, player) {\r\n                            return true;\r\n                        },\r\n                        filter(Evt, player) {\r\n                            if (Evt.card && Evt.card.storage && Evt.card.storage.bizuo == true)\r\n                                return true;\r\n                            if (Evt.cards && Evt.cards.length) {\r\n                                for (var i = 0; i < Evt.cards.length; i++) {\r\n                                    if (Evt.cards[i].storage && Evt.cards[i].storage.bizuo == true)\r\n                                        return true;\r\n                                }\r\n                            }\r\n                            return false;\r\n                        },\r\n                        prompt: '弼佐:是否发动一次【预占】？',\r\n                        content: [() => {\r\n                                if (player.isOnline()) {\r\n                                    player.send(() => {\r\n                                        player.useSkill('re_yuzhan', false, false);\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    player.useSkill('re_yuzhan', false, false);\r\n                                }\r\n                            }, () => {\r\n                                if (trigger.card && trigger.card.storage && trigger.card.storage.bizuo == true)\r\n                                    delete trigger.card.storage.bizuo;\r\n                                if (trigger.cards && trigger.cards.length) {\r\n                                    for (var i = 0; i < trigger.cards.length; i++) {\r\n                                        if (trigger.cards[i].storage && trigger.cards[i].storage.bizuo == true)\r\n                                            delete trigger.cards[i].storage.bizuo;\r\n                                    }\r\n                                }\r\n                            }]\r\n                    },\r\n                    end: {\r\n                        trigger: { global: 'phaseAfter' },\r\n                        direct: true,\r\n                        content() {\r\n                            for (var i = 0; i < ui.cardPile.childElementCount; i++) {\r\n                                if (ui.cardPile.childNodes[i].storage && ui.cardPile.childNodes[i].storage.bizuo == true) {\r\n                                    delete ui.cardPile.childNodes[i].storage.bizuo;\r\n                                }\r\n                            }\r\n                            for (var i = 0; i < ui.discardPile.childElementCount; i++) {\r\n                                if (ui.discardPile.childNodes[i].storage && ui.discardPile.childNodes[i].storage.bizuo == true) {\r\n                                    delete ui.discardPile.childNodes[i].storage.bizuo;\r\n                                }\r\n                            }\r\n                            var cards = [];\r\n                            for (var i = 0; i < game.players.length; i++) {\r\n                                var cards2 = game.players[i].getCards('hej');\r\n                                cards = cards.concat(cards2);\r\n                            }\r\n                            for (var i = 0; i < cards.length; i++) {\r\n                                if (cards[i].storage && cards[i].storage.bizuo == true) {\r\n                                    delete cards[i].storage.bizuo;\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                ai: {\r\n                    expose: 0.1,\r\n                }\r\n            },\r\n            guiren: {\r\n                audio: 2,\r\n                enable: ['chooseToUse'],\r\n                viewAs: { name: 'sha' },\r\n                selectCard: 2,\r\n                complexCard: true,\r\n                position: 'hes',\r\n                filterCard(card) {\r\n                    if (ui.selected.cards.length)\r\n                        return get.color(card) != get.color(ui.selected.cards[0]);\r\n                    return true;\r\n                },\r\n                check(card) {\r\n                    if (ui.selected.cards.length && get.type(card, 'trick') != get.type(ui.selected.cards[0], 'trick'))\r\n                        return 10 - get.value(card);\r\n                    return 4 - get.value(card);\r\n                },\r\n                precontent: [() => {\r\n                        var cards = Evt.result.cards.slice(0);\r\n                        var types = [];\r\n                        for (var i = 0; i < cards.length; i++) {\r\n                            types.add(get.type(cards[i], 'trick'));\r\n                        }\r\n                        Evt.types = types;\r\n                        Evt.targets = Evt.result.targets.slice(0);\r\n                        Evt.getParent().addCount = false;\r\n                    }, () => {\r\n                        if (Evt.types.contains('basic')) {\r\n                            var list = get.info(Evt.result.card).nature.slice(0);\r\n                            list.remove('kami');\r\n                            list.push('cancel2');\r\n                            player.chooseControl(list).set('prompt', get.prompt('guiren')).set('prompt2', '将' + get.translation(Evt.result.card) + '转换为以下属性之一').set('ai', () => {\r\n                                var player = _status.event.player;\r\n                                var card = _status.event.card;\r\n                                if (get.name(card) == 'tao' && get.nature(card) == 'ocean')\r\n                                    return 'cancel2';\r\n                                if (get.name(card) == 'tao' && get.nature(card) != 'ocean')\r\n                                    return 'ocean';\r\n                                if (get.name(card) == 'sha') {\r\n                                    var targets = _status.event.targets;\r\n                                    for (var i = 0; i < targets.length; i++) {\r\n                                        if (get.damageEffect(target, player, player)) {\r\n                                            if (targets[i].hasSkillTag('nodamage'))\r\n                                                return 'ice';\r\n                                            if (!targets[i].hasSkillTag('noocean') && targets[i].hujia > 0)\r\n                                                return 'ocean';\r\n                                            if (!targets[i].hasSkillTag('nofire') && targets[i].getEquip('tengjia'))\r\n                                                return 'fire';\r\n                                            if (!targets[i].hasSkillTag('noyami') && targets[i].countCards('h') >= player.countCards('h'))\r\n                                                return 'yami';\r\n                                        }\r\n                                    }\r\n                                }\r\n                                return list.randomGet();\r\n                            }).set('card', Evt.result.card).set('targets', Evt.targets);\r\n                        }\r\n                        else {\r\n                            Evt.goto(3);\r\n                        }\r\n                    }, () => {\r\n                        if (result.control != 'cancel2') {\r\n                            Evt.result.card.nature = result.control;\r\n                            player.popup(get.translation(Evt.result.card).slice(0, 2), result.control);\r\n                            game.log('#y' + get.translation(get.name(Evt.result.card)), '被转为了', Evt.result.card);\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.types.contains('trick')) {\r\n                            var target = Evt.targets.shift();\r\n                            if (target.countGainableCards(player, 'he') > 0)\r\n                                player.gainPlayerCard(target, 'he');\r\n                            if (Evt.targets.length)\r\n                                Evt.redo();\r\n                        }\r\n                    }],\r\n                group: ['guiren_num', 'guiren_redraw'],\r\n                subSkill: {\r\n                    num: {\r\n                        trigger: { player: 'useCard' },\r\n                        forced: true,\r\n                        popup: false,\r\n                        filter(Evt) {\r\n                            return Evt.skill == 'guiren' && ['sha'].contains(Evt.card.name) && Evt.cards && Evt.cards.filter((card) => get.type(card) == 'equip').length;\r\n                        },\r\n                        content() {\r\n                            trigger.baseDamage++;\r\n                        }\r\n                    },\r\n                    redraw: {\r\n                        trigger: { player: 'shaMiss' },\r\n                        prompt(Evt, player) {\r\n                            return '是否收回' + get.translation(Evt.cards) + '并结束此阶段？';\r\n                        },\r\n                        filter(Evt) {\r\n                            return Evt.skill == 'guiren' && ['sha'].contains(Evt.card.name) && Evt.cards && Evt.cards.length;\r\n                        },\r\n                        content() {\r\n                            player.gain(trigger.cards);\r\n                            var evt = _status.event.getParent('phaseUse') || _status.event.getParent('phaseJieshu');\r\n                            if (evt && ['phaseJieshu', 'phaseUse'].contains(evt.name)) {\r\n                                evt.skipped = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            anshu: {\r\n                trigger: { global: 'phaseJieshuBegin' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && player.countCards('h', (card) => player.canUse(card, Evt.player))\r\n                        && Evt.player.countCards('h') >= player.countCards('h');\r\n                },\r\n                content() {\r\n                    player.chooseToUse({\r\n                        preTarget: trigger.player,\r\n                        filterCard(card, player) {\r\n                            return lib.filter.filterCard.apply(this, arguments);\r\n                        },\r\n                        filterTarget(card, player, target) {\r\n                            return target == _status.event.preTarget && lib.filter.filterTarget.apply(this, arguments);\r\n                        },\r\n                        addCount: false,\r\n                        nodistance: true,\r\n                        prompt: get.prompt2('anshu'),\r\n                    }).set('logSkill', ['anshu', trigger.player]);\r\n                },\r\n                group: 'anshu_directHit',\r\n                subSkill: {\r\n                    directHit: {\r\n                        trigger: { player: 'useCard' },\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            return get.suit(Evt.card) == 'spade' && Array.isArray(Evt.getParent().logSkill) && Evt.getParent().logSkill[0] == 'anshu';\r\n                        },\r\n                        content() {\r\n                            console.log('a');\r\n                            trigger.directHit.add(trigger.getParent().logSkill[1]);\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            xingchi: {\r\n                mod: {\r\n                    targetEnabled(card, player, target) {\r\n                        if (!player.hasSkill('xingchi_countUsed'))\r\n                            return false;\r\n                    },\r\n                },\r\n                trigger: { player: 'gainAfter' },\r\n                filter(Evt, player) {\r\n                    if (player.countCards('h') > player.getHandcardLimit())\r\n                        return player.getCardUsable('sha') > 0;\r\n                    else\r\n                        return !player.hasSkill('xingchi_used');\r\n                },\r\n                check(Evt, player) {\r\n                    return true;\r\n                },\r\n                content: [() => {\r\n                        if (player.countCards('h') > player.getHandcardLimit()) {\r\n                            player.chooseCardTarget({\r\n                                position: 'h',\r\n                                filterCard: true,\r\n                                prompt: '将一张手牌当作不计入次数【杀】使用',\r\n                                filterTarget(card, player, target) {\r\n                                    return lib.filter.filterTarget({ name: 'sha' }, player, target);\r\n                                },\r\n                                ai1(card) {\r\n                                    return 6 - get.value(card);\r\n                                },\r\n                                ai2(target) {\r\n                                    if (!_status.event.check)\r\n                                        return 0;\r\n                                    return get.effect(target, { name: 'sha' }, _status.event.player);\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            player.draw(2);\r\n                            player.addTempSkill('xingchi_used');\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            player.useCard({ name: 'sha' }, result.targets, result.cards, false);\r\n                        }\r\n                    }],\r\n                group: 'xingchi_record',\r\n                subSkill: {\r\n                    record: {\r\n                        trigger: { global: 'useCard1' },\r\n                        filter(Evt, player) {\r\n                            return !Evt.player.hasSkill('xingchi_countUsed');\r\n                        },\r\n                        direct: true,\r\n                        locked: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        content() {\r\n                            trigger.player.addTempSkill('xingchi_countUsed');\r\n                        },\r\n                    },\r\n                    countUsed: {},\r\n                    used: {\r\n                        mark: true,\r\n                        intro: { content: '本回合已通过『醒迟』摸牌' },\r\n                    }\r\n                },\r\n            },\r\n            cejing: {\r\n                trigger: { global: 'phaseEnd' },\r\n                firstDo: true,\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('cejing_disable'))\r\n                        return false;\r\n                    return Evt.player.isIn() && !Evt.player.getStat('damage') && player.countDiscardableCards('he') >= 1;\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        var target = trigger.player;\r\n                        Evt.target = target;\r\n                        var check = (get.attitude(player, target) > 0) || (get.attitude(player, target) < 0 && target.countCards('h') - target.getHandcardLimit() >= 2);\r\n                        player.chooseToDiscard(get.prompt2('cejing'), 'he').set('ai', (card) => {\r\n                            if (_status.event.check)\r\n                                return 6 - get.value(card);\r\n                            return -1;\r\n                        }).set('check', check);\r\n                    }, () => {\r\n                        if (result.bool && result.cards) {\r\n                            var att = get.attitude(player, Evt.target);\r\n                            var list0 = lib.phaseName;\r\n                            var list = ['『策竞』：选择一个阶段'];\r\n                            list.push([list0, 'vcard']);\r\n                            list.push('hidden');\r\n                            var next = player.chooseButton(list, true);\r\n                            next.set('ai', function (button) {\r\n                                var link = button.link[2];\r\n                                var att = _status.event.att;\r\n                                if (att > 0) {\r\n                                    return link == ['phaseDraw'];\r\n                                }\r\n                                if (att <= 0)\r\n                                    return link == 'phaseDiscard';\r\n                            });\r\n                            next.set('att', att);\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool && result.links) {\r\n                            player.logSkill('cejing', Evt.target);\r\n                            var phase = result.links[0][2];\r\n                            Evt.target[phase]();\r\n                        }\r\n                    }],\r\n                group: 'cejing_drawBy',\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: {\r\n                            global: ['phaseZhunbeiEnd', 'phaseJudgeEnd', 'phaseDrawEnd', 'phaseUseEnd', 'phaseDiscardEnd', 'phaseJieshuEnd']\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return Evt.getParent().name == 'cejing';\r\n                        },\r\n                        direct: true,\r\n                        content: [() => {\r\n                                var num = 0;\r\n                                var name = trigger.name;\r\n                                trigger.player.getHistory('sourceDamage', (evt) => {\r\n                                    var phase = evt.getParent(name);\r\n                                    if (phase && phase.getParent && phase.getParent().name == 'cejing')\r\n                                        num += evt.num;\r\n                                });\r\n                                Evt.num = num;\r\n                            }, () => {\r\n                                if (Evt.num > 0) {\r\n                                    var list = [player];\r\n                                    list.add(trigger.player);\r\n                                    player.logSkill('cejing', list);\r\n                                    game.asyncDraw(list, Evt.num);\r\n                                }\r\n                                else {\r\n                                    player.addTempSkill('cejing_disable', 'roundStart');\r\n                                }\r\n                            }],\r\n                    },\r\n                    disable: {\r\n                        mark: true,\r\n                        marktext: \"竞\",\r\n                        intro: {\r\n                            name: '策竞失败',\r\n                            content(storage, player, skill) {\r\n                                return '失去『策竞』直到下个回合开始';\r\n                            },\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            qinglve: {\r\n                enable: ['chooseToUse'],\r\n                viewAs: { name: 'shunshou' },\r\n                usable: 1,\r\n                viewAsFilter(player) {\r\n                    if (!player.isPhaseUsing() || player.countDisabled() >= 5)\r\n                        return false;\r\n                },\r\n                filterCard: () => false,\r\n                selectCard: -1,\r\n                precontent: [() => {\r\n                        var list = ['equip1', 'equip2', 'equip3', 'equip4', 'equip5'];\r\n                        for (var i = 0; i < list.length; i++) {\r\n                            if (player.isDisabled(list[i]))\r\n                                list.splice(i--, 1);\r\n                        }\r\n                        player.chooseControl(list).set('prompt', '请选择废除一个装备栏').ai = () => {\r\n                            if (list.contains('equip1') && player.isEmpty('equip1') && player.countCards('h', (card) => card.name == 'sha' && player.getUseValue(card) > 0))\r\n                                return 'equip1';\r\n                            if (list.contains('equip3') && player.isEmpty('equip3'))\r\n                                return 'equip3';\r\n                            if (list.contains('equip4') && player.isEmpty('equip4'))\r\n                                return 'equip4';\r\n                            if (list.contains('equip5') && player.isEmpty('equip5'))\r\n                                return 'equip5';\r\n                            if (list.contains('equip2') && player.isEmpty('equip2'))\r\n                                return 'equip2';\r\n                            return list.randomGet();\r\n                        };\r\n                    }, () => {\r\n                        Evt.pos = result.control;\r\n                        player.disableEquip(Evt.pos);\r\n                    }],\r\n                group: ['qinglve_mark'],\r\n                subSkill: {\r\n                    mark: {\r\n                        mod: {\r\n                            maxHandcard(player, num) {\r\n                                return num += player.countDisabled();\r\n                            },\r\n                            attackFrom(from, to, distance) {\r\n                                return distance - from.countDisabled();\r\n                            }\r\n                        },\r\n                        marktext: '♠',\r\n                        intro: {\r\n                            name: '轻掠',\r\n                            content: '手牌上限和攻击范围+$',\r\n                        },\r\n                        trigger: { player: 'disableEquipAfter' },\r\n                        direct: true,\r\n                        content() {\r\n                            player.markSkill('qinglve_mark');\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            yingshi: {\r\n                enable: ['chooseToUse'],\r\n                viewAs(cards, player) {\r\n                    var name = false;\r\n                    var nature = null;\r\n                    var suit = null;\r\n                    var number = null;\r\n                    var cards = player.getStorage('yingshi_cardsDis');\r\n                    if (cards[0]) {\r\n                        name = get.name(cards[0]);\r\n                        nature = get.nature(cards[0]);\r\n                        suit = get.suit(cards[0]);\r\n                        number = get.number(cards[0]);\r\n                    }\r\n                    if (name)\r\n                        return { name: name, nature: nature, suit: suit, number: number, isCard: true };\r\n                    return null;\r\n                },\r\n                usable: 1,\r\n                viewAsFilter(player) {\r\n                    if (player.countCards('h', { suit: 'club' }) == 0)\r\n                        return false;\r\n                },\r\n                filterCard(card, player, Evt) {\r\n                    Evt = Evt || _status.event;\r\n                    var filter = Evt._backup.filterCard;\r\n                    var name = get.suit(card, player);\r\n                    if (name == 'club')\r\n                        return true;\r\n                    return false;\r\n                },\r\n                filter(Evt, player) {\r\n                    var cards = player.getStorage('yingshi_cardsDis');\r\n                    var card = cards[0];\r\n                    var filter = Evt.filterCard;\r\n                    if (card && filter(card, player, Evt) && player.countCards('h', { suit: 'club' }))\r\n                        return true;\r\n                    return false;\r\n                },\r\n                selectCard: 1,\r\n                group: ['yingshi_cardsDis'],\r\n                subSkill: {\r\n                    cardsDis: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = [];\r\n                        },\r\n                        marktext: '♣',\r\n                        intro: {\r\n                            name: '影逝',\r\n                            content: '上一次进入弃牌堆的非♣基本牌为$',\r\n                        },\r\n                        trigger: { global: ['loseAfter', 'cardsDiscardAfter'] },\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            return Evt.cards.filter((card) => get.position(card, true) == 'd' && get.suit(card) != 'club' && get.type(card) == 'basic').length > 0;\r\n                        },\r\n                        content() {\r\n                            let cards = trigger.cards.filter((card) => get.position(card, true) == 'd' && get.suit(card) != 'club' && get.type(card) == 'basic');\r\n                            player.storage.yingshi_cardsDis = [cards.pop()];\r\n                            if (!player.isUnseen(1))\r\n                                player.markSkill('yingshi_cardsDis');\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            re_meici: {\r\n                zhuanhuanji: true,\r\n                audio: 2,\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = true;\r\n                },\r\n                trigger: { global: ['loseAfter', 'cardsDiscardAfter'] },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'cardsDiscard' && Evt.getParent().name == 'orderingDiscard' && Evt.getParent().relatedEvent.name == 'useCard')\r\n                        return false;\r\n                    if (Evt.name == 'lose' && (Evt.getParent().name == 'useCard' || Evt.position != ui.discardPile))\r\n                        return false;\r\n                    if (Evt.name == 'lose' && Evt.getParent().name == 'addJudge')\r\n                        return false;\r\n                    var color = player.storage.re_meici == true ? 'red' : 'black';\r\n                    for (var i = 0; i < Evt.cards.length; i++) {\r\n                        if (get.position(Evt.cards[i], true) == 'd') {\r\n                            if (get.color(Evt.cards[i]) == color)\r\n                                return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                },\r\n                check(Evt, player) {\r\n                    return true;\r\n                },\r\n                usable: 1,\r\n                content: [() => {\r\n                        if (trigger.cards.length && trigger.cards.length == 1) {\r\n                            player.gain(trigger.cards, 'gain2');\r\n                            if (player.storage.re_meici == true) {\r\n                                player.storage.re_meici = false;\r\n                            }\r\n                            else {\r\n                                player.storage.re_meici = true;\r\n                            }\r\n                        }\r\n                        else {\r\n                            var color = player.storage.re_meici == true ? 'red' : 'black';\r\n                            var cards = [];\r\n                            for (var i = 0; i < trigger.cards.length; i++) {\r\n                                if (get.position(trigger.cards[i], true) == 'd') {\r\n                                    if (get.color(trigger.cards[i]) == color)\r\n                                        cards.push(trigger.cards[i]);\r\n                                }\r\n                            }\r\n                            if (cards.length) {\r\n                                var str = '###『美词』###获得一张' + get.translation(color) + '牌';\r\n                                var next = player.chooseButton(ui.create.dialog(str, [cards, 'vcard'], 'hidden'), true);\r\n                                next.set('ai', function (button) {\r\n                                    var card = { name: button.link[2] };\r\n                                    var value = get.value(card);\r\n                                    return value;\r\n                                });\r\n                            }\r\n                            else {\r\n                                Evt.finish();\r\n                            }\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            player.gain(result.links, 'gain2');\r\n                            if (player.storage.re_meici == true) {\r\n                                player.storage.re_meici = false;\r\n                            }\r\n                            else {\r\n                                player.storage.re_meici = true;\r\n                            }\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }]\r\n            },\r\n            re_danlian: {\r\n                audio: 2,\r\n                trigger: { player: 'gainAfter' },\r\n                filter(Evt, player) {\r\n                    if (Evt.getParent(2).name == 'phaseDraw')\r\n                        return false;\r\n                    var list = ['heart', 'spade', 'diamond'];\r\n                    for (var i = 0; i < Evt.cards.length; i++) {\r\n                        if (list.contains(get.suit(Evt.cards[i])))\r\n                            return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        var list = ['heart', 'spade', 'diamond'];\r\n                        var cards = [];\r\n                        for (var i = 0; i < trigger.cards.length; i++) {\r\n                            if (list.contains(get.suit(trigger.cards[i])))\r\n                                cards.push(trigger.cards[i]);\r\n                        }\r\n                        Evt.cards = cards.slice(0);\r\n                    }, () => {\r\n                        if (Evt.cards.length) {\r\n                            Evt.cards2 = Evt.cards.shift();\r\n                            var prompt3 = \"###『耽恋』###你可以将\" + get.translation(Evt.cards2) + '置入一名角色合理的区域';\r\n                            player.chooseTarget(prompt3, function (card, player, target) {\r\n                                if (get.type(_status.event.card, false) == 'delay')\r\n                                    return target.canAddJudge({ name: _status.event.card.name }) && target != player;\r\n                                if (get.type(_status.event.card, false) == 'equip')\r\n                                    return target.isEmpty(get.subtype(_status.event.card, false)) && target != player;\r\n                                return target != player && lib.filter.canBeGained(_status.event.card, target, player);\r\n                            }).set('card', Evt.cards2).set('ai', function (target) {\r\n                                if (get.type(_status.event.card, false) == 'delay')\r\n                                    return -get.attitude(_status.event.player, target);\r\n                                return get.attitude(_status.event.player, target);\r\n                            });\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            if (get.type(Evt.cards2, false) == 'delay') {\r\n                                player.logSkill('re_danlian', result.targets);\r\n                                result.targets[0].addJudge(Evt.cards2);\r\n                            }\r\n                            else if (get.type(Evt.cards2, false) == 'equip') {\r\n                                player.logSkill('re_danlian', result.targets);\r\n                                result.targets[0].equip(Evt.cards2);\r\n                            }\r\n                            else {\r\n                                player.logSkill('re_danlian', result.targets);\r\n                                result.targets[0].gain(Evt.cards2, player, 'giveAuto');\r\n                            }\r\n                            if (Evt.cards.length)\r\n                                Evt.goto(1);\r\n                        }\r\n                        else {\r\n                            if (Evt.cards.length)\r\n                                Evt.goto(1);\r\n                        }\r\n                    }]\r\n            },\r\n            tunshi: {\r\n                audio: 'xinhuo',\r\n                trigger: { global: 'dyingBegin' },\r\n                frequent: true,\r\n                priority: 24,\r\n                filter(Evt, player) {\r\n                    if (Evt.player == player)\r\n                        return false;\r\n                    return _status.currentPhase == player;\r\n                },\r\n                content() {\r\n                    player.recover();\r\n                },\r\n                group: 'tunshi_redraw',\r\n                subSkill: {\r\n                    redraw: {\r\n                        trigger: { global: 'loseAfter' },\r\n                        priority: 24,\r\n                        filter(Evt, player) {\r\n                            if (Evt.getParent().name == 'gain' || !_status.currentPhase)\r\n                                return false;\r\n                            if (Evt.player == player || Evt.player == _status.currentPhase)\r\n                                return false;\r\n                            if (Evt.player.countCards('e') == 0) {\r\n                                for (var i = 0; i < Evt.cards.length; i++) {\r\n                                    if (Evt.cards[i].original == 'e')\r\n                                        return true;\r\n                                }\r\n                            }\r\n                            if (Evt.player.countCards('h') == 0) {\r\n                                for (var i = 0; i < Evt.cards.length; i++) {\r\n                                    if (Evt.cards[i].original == 'h')\r\n                                        return true;\r\n                                }\r\n                            }\r\n                            if (Evt.player.countCards('j') == 0) {\r\n                                for (var i = 0; i < Evt.cards.length; i++) {\r\n                                    if (Evt.cards[i].original == 'j')\r\n                                        return true;\r\n                                }\r\n                            }\r\n                            return false;\r\n                        },\r\n                        check(Evt, player) {\r\n                            return get.attitude(player, _status.currentPhase) > 0;\r\n                        },\r\n                        content() {\r\n                            _status.currentPhase.gain(trigger.cards, 'draw');\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            mark_tianqing: {\r\n                audio: 'tianqing',\r\n                trigger: { global: 'damageBegin3' },\r\n                filter(Evt, player) {\r\n                    return player.storage.mark_tianqing_record;\r\n                },\r\n                round: 1,\r\n                check(Evt, player) {\r\n                    return get.attitude(player, Evt.player) > 0;\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    trigger.changeToZero();\r\n                },\r\n                group: 'mark_tianqing_record',\r\n                subSkill: {\r\n                    record: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = false;\r\n                        },\r\n                        trigger: { global: ['damageEnd', 'phaseAfter'] },\r\n                        forced: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        filter(Evt, player) {\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            if (trigger.name == 'damage' || trigger.numFixed == true) {\r\n                                player.storage.mark_tianqing_record = true;\r\n                            }\r\n                            else {\r\n                                player.storage.mark_tianqing_record = false;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            tianqing: {\r\n                audio: 6,\r\n                trigger: { global: 'damageBegin3' },\r\n                filter(Evt, player) {\r\n                    return player.storage.tianqing_record;\r\n                },\r\n                check(Evt, player) {\r\n                    return get.attitude(player, Evt.player) > 0;\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    trigger.changeToZero();\r\n                },\r\n                group: 'tianqing_record',\r\n                subSkill: {\r\n                    record: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = true;\r\n                        },\r\n                        trigger: { global: ['damageZero', 'damageEnd', 'phaseAfter'] },\r\n                        forced: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        filter(Evt, player) {\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            console.log(trigger);\r\n                            if (trigger.name == 'damageZero' || trigger.numFixed == true) {\r\n                                player.storage.tianqing_record = false;\r\n                            }\r\n                            else {\r\n                                player.storage.tianqing_record = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            kuiquan: {\r\n                audio: 3,\r\n                enable: 'chooseToUse',\r\n                filterCard(card, player) {\r\n                    return !player.storage.kuiquan_record.contains(get.type(card, 'trick'));\r\n                },\r\n                viewAs: { name: 'huogong', nature: 'fire' },\r\n                position: 'hes',\r\n                viewAsFilter(player) {\r\n                    if (!player.countCards('h', (card) => !player.storage.kuiquan_record.contains(get.type(card, 'trick'))))\r\n                        return false;\r\n                },\r\n                check(card) {\r\n                    var player = _status.currentPhase;\r\n                    if (player.countCards('h') > player.hp || player.countCards('h', { name: 'sha' }) > 0) {\r\n                        if (card.name == 'sha')\r\n                            return 4 - get.value(card);\r\n                        return 6 - get.value(card);\r\n                    }\r\n                    return 3 - get.value(card);\r\n                },\r\n                onuse(result, player) {\r\n                    player.storage.kuiquan_record.add(get.type(result.cards[0], 'trick'));\r\n                },\r\n                ai: {\r\n                    kuiquan: true,\r\n                    fireAttack: true,\r\n                },\r\n                group: 'kuiquan_record',\r\n                subSkill: {\r\n                    record: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = [];\r\n                        },\r\n                        trigger: { global: 'phaseAfter' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        content() {\r\n                            player.storage.kuiquan_record = [];\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            kangding: {\r\n                trigger: { source: 'damageBegin3', player: 'damageBegin3' },\r\n                filter(Evt, player) {\r\n                    if (Evt.num <= 0)\r\n                        return false;\r\n                    return player.countCards('he', { subtype: 'equip1' }) && player == Evt.source || player.countCards('he', { subtype: 'equip2' }) && player == Evt.player;\r\n                },\r\n                check(Evt, player) {\r\n                    return player == Evt.source && get.attitude(player, Evt.player) < 0 || player == Evt.player;\r\n                },\r\n                logTarget: 'player',\r\n                content: [() => {\r\n                        if (player.countCards('he', { subtype: 'equip1' }) && player == trigger.source) {\r\n                            player.chooseToDiscard(get.prompt('kangding'), true, 'he', { subtype: 'equip1' });\r\n                        }\r\n                        else {\r\n                            player.chooseToDiscard(get.prompt('kangding'), true, 'he', { subtype: 'equip2' });\r\n                            Evt.goto(2);\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            trigger.num++;\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            trigger.num--;\r\n                        }\r\n                    }],\r\n            },\r\n            longshe: {\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    return player.countDiscardableCards(player, 'h')\r\n                        && (!player.getStat('skill').longshe) || ((player.getStat('skill').longshe || 0) < [1, 2, 3, 4, 5].filter(function (num) {\r\n                        return player.canEquip(num);\r\n                    }).length);\r\n                },\r\n                filterCard(card, player) {\r\n                    return get.type(card) == 'basic';\r\n                },\r\n                content: [() => {\r\n                        var cards = [ui.cardPile.firstChild];\r\n                        Evt.cards = cards;\r\n                        player.showCards(Evt.cards, '『龙蛇笔走』展示牌');\r\n                    }, () => {\r\n                        if (get.type(Evt.cards[0]) == 'basic') {\r\n                            game.log(Evt.cards, '被置入了弃牌堆');\r\n                            game.cardsDiscard(Evt.cards);\r\n                            player.draw();\r\n                        }\r\n                        else if (player.hasUseTarget(Evt.cards[0])) {\r\n                            player.chooseUseTarget(Evt.cards[0]);\r\n                        }\r\n                    }]\r\n            },\r\n            re_huawen: {\r\n                audio: 2,\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                selectCard: 2,\r\n                complexCard: true,\r\n                check(card) {\r\n                    var player = _status.event.player;\r\n                    if (get.color(card) == 'red')\r\n                        return player.getUseValue(card) - 2;\r\n                    return 6 - get.value(card);\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.countCards('he', { color: 'red' }) && player.countCards('he', { color: 'black' });\r\n                },\r\n                filterCard(card, player, Evt) {\r\n                    if (ui.selected.cards.length) {\r\n                        let pre = ui.selected.cards[0];\r\n                        if (get.color(card, player) == get.color(pre, player))\r\n                            return false;\r\n                    }\r\n                    return true;\r\n                },\r\n                content() { },\r\n                ai: {\r\n                    order: 6,\r\n                    result: { player: 1 }\r\n                },\r\n                group: ['re_huawen_useBy', 're_huawen_change'],\r\n                subSkill: {\r\n                    useBy: {\r\n                        trigger: { player: 'discardEnd' },\r\n                        filter(Evt, player) {\r\n                            return Evt.cards.length == 2\r\n                                && Evt.cards.filter((card) => get.color(card) == 'red').length\r\n                                && Evt.cards.filter((card) => get.color(card) == 'black').length\r\n                                && player.hasUseTarget(Evt.cards.filter((card) => get.color(card) == 'red')[0]);\r\n                        },\r\n                        check(Evt, player) {\r\n                            let card = Evt.cards.filter((card) => get.color(card) == 'red')[0];\r\n                            return player.getUseValue(card);\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            let card = trigger.cards.filter((card) => get.color(card) == 'red')[0];\r\n                            player.chooseUseTarget(card, `###${get.prompt('re_huawen')}###使用${get.translation(card)}（额外结算一次）`).set('logSkill', 're_huawen_useBy');\r\n                        },\r\n                    },\r\n                    change: {\r\n                        trigger: { player: 'useCardAfter' },\r\n                        priority: 40,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            var _a;\r\n                            if (Evt.skill == 're_huawen_change')\r\n                                return false;\r\n                            let evt = Evt.getParent('chooseUseTarget');\r\n                            return ((_a = Evt.targets) === null || _a === void 0 ? void 0 : _a.length)\r\n                                && (evt === null || evt === void 0 ? void 0 : evt.logSkill) == 're_huawen_useBy';\r\n                        },\r\n                        content() {\r\n                            let card = game.createCard(trigger.card.name, trigger.card.suit, trigger.card.number, trigger.card.nature);\r\n                            player.useCard(card, (trigger._targets || trigger.targets).slice(0), trigger.cards).skill = 're_huawen_change';\r\n                        },\r\n                    },\r\n                    give: {\r\n                        trigger: { player: 'useCardAfter' },\r\n                        priority: 23,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            if (player.hasHistory('sourceDamage', (evt) => {\r\n                                return evt.card == Evt.card;\r\n                            }).length == 0) {\r\n                                let evt = Evt.getParent('chooseUseTarget');\r\n                                return (evt === null || evt === void 0 ? void 0 : evt.logSkill) === 're_huawen_useBy'\r\n                                    && Evt.cards.filter((card) => get.color(card) == 'black' && get.position(card) == 'd').length;\r\n                            }\r\n                        },\r\n                        content: [() => {\r\n                                Evt.card = trigger.cards.filter((card) => get.color(card) == 'black' && get.position(card) == 'd')[0];\r\n                                player.chooseTarget(function (card, player, target) {\r\n                                    return player != target;\r\n                                }).set('card', Evt.card).set('ai', function (target) {\r\n                                    var player = _status.event.player;\r\n                                    return get.attitude(player, target) * get.value(_status.event.card, target);\r\n                                }).set('prompt2', '『花吻』：其他角色获得' + get.translation(Evt.card));\r\n                            }, () => {\r\n                                if (result.bool && result.targets[0]) {\r\n                                    player.logSkill('re_huawen_give', result.targets[0]);\r\n                                    result.targets[0].gain(Evt.card, 'log', 'gain2');\r\n                                }\r\n                            }],\r\n                    }\r\n                },\r\n            },\r\n            re_liaohu: {\r\n                audio: 'liaohu',\r\n                trigger: { global: 'phaseEnd' },\r\n                priority: 23,\r\n                filter(Evt, player) {\r\n                    return player.getStat('damage');\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        console.log(player.getStat('skill'));\r\n                        if (player.getStat('skill').re_huawen || player.getStat('skill').re_huawen_useBy) {\r\n                            Evt.change = true;\r\n                        }\r\n                    }, () => {\r\n                        var str = '###' + get.prompt('re_liaohu') + '###令一名角色摸两张牌 ';\r\n                        if (Evt.change)\r\n                            str += '或 摸一张牌并回复1点体力';\r\n                        player.chooseTarget(str).set('ai', function (target) {\r\n                            return get.attitude(_status.event.player, target);\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.target = result.targets[0];\r\n                            Evt.target.classList.add('glow');\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.change) {\r\n                            var controls = ['摸两张牌', '摸一张牌并回复1点体力', '取消选择'];\r\n                            player.chooseControl(controls).set('ai', () => {\r\n                                return _status.event.index;\r\n                            }).set('index', (get.recoverEffect(Evt.target, player, player) > 2) ? 1 : 0);\r\n                        }\r\n                        else\r\n                            Evt._result = { index: 0 };\r\n                    }, () => {\r\n                        Evt.target.classList.remove('glow');\r\n                        switch (result.index) {\r\n                            case 0: {\r\n                                player.logSkill('re_liaohu', Evt.target);\r\n                                Evt.target.draw(2);\r\n                                break;\r\n                            }\r\n                            case 1: {\r\n                                player.logSkill('re_liaohu', Evt.target);\r\n                                Evt.target.draw();\r\n                                Evt.target.recover(player);\r\n                                break;\r\n                            }\r\n                            case 2: {\r\n                                Evt.goto(0);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }],\r\n            },\r\n            re_gonggan: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                selectCard: 2,\r\n                complexCard: true,\r\n                check(card) {\r\n                    var player = _status.event.player;\r\n                    if (get.color(card) == 'black')\r\n                        return player.getUseValue(card) - 2;\r\n                    return 6 - get.value(card);\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.countCards('h', { color: 'red' }) && player.countCards('h', { color: 'black' });\r\n                },\r\n                filterCard(card, player, Evt) {\r\n                    if (ui.selected.cards.length) {\r\n                        let pre = ui.selected.cards[0];\r\n                        if (get.color(card, player) == get.color(pre, player))\r\n                            return false;\r\n                    }\r\n                    return true;\r\n                },\r\n                content() { },\r\n                ai: {\r\n                    order: 6,\r\n                    result: { player: 1 }\r\n                },\r\n                group: ['re_gonggan_useBy', 're_gonggan_change'],\r\n                subSkill: {\r\n                    useBy: {\r\n                        trigger: { player: 'discardEnd' },\r\n                        filter(Evt, player) {\r\n                            return Evt.cards.length == 2\r\n                                && Evt.cards.filter((card) => get.color(card) == 'red').length\r\n                                && Evt.cards.filter((card) => get.color(card) == 'black').length\r\n                                && player.hasUseTarget(Evt.cards.filter((card) => get.color(card) == 'black')[0]);\r\n                        },\r\n                        check(Evt, player) {\r\n                            let card = Evt.cards.filter((card) => get.color(card) == 'black')[0];\r\n                            return player.getUseValue(card);\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            let card = trigger.cards.filter((card) => get.color(card) == 'black')[0];\r\n                            player.chooseUseTarget(card, `###${get.prompt('re_gonggan')}###使用${get.translation(card)}（可增减目标）`, true).set('logSkill', 're_gonggan_useBy');\r\n                        },\r\n                    },\r\n                    change: {\r\n                        trigger: { player: 'useCard2' },\r\n                        priority: 23,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            var _a;\r\n                            let card = Evt.card;\r\n                            if (get.info(card).allowMultiple == false)\r\n                                return false;\r\n                            let evt = Evt.getParent('chooseUseTarget');\r\n                            return ((_a = Evt.targets) === null || _a === void 0 ? void 0 : _a.length)\r\n                                && (evt === null || evt === void 0 ? void 0 : evt.logSkill) == 're_gonggan_useBy';\r\n                        },\r\n                        content: [() => {\r\n                                let prompt2 = '为' + get.translation(trigger.card) + '增加或减少一个目标';\r\n                                player.chooseTarget(get.prompt('re_gonggan'), function (card, player, target) {\r\n                                    var player = _status.event.player;\r\n                                    var source = _status.event.source;\r\n                                    if (_status.event.targets.contains(target))\r\n                                        return true;\r\n                                    return lib.filter.targetEnabled2(_status.event.card, source, target) && lib.filter.targetInRange(_status.event.card, source, target);\r\n                                }).set('prompt2', prompt2).set('ai', function (target) {\r\n                                    let [trigger, player, source] = [_status.event.getTrigger(), _status.event.player, _status.event.source];\r\n                                    return get.effect(target, trigger.card, source, player) * (_status.event.targets.contains(target) ? -1 : 1);\r\n                                }).set('targets', trigger.targets).set('card', trigger.card).set('source', trigger.player);\r\n                            }, () => {\r\n                                if (!Evt.isMine())\r\n                                    game.delayx();\r\n                                Evt.targets = result.targets;\r\n                            }, () => {\r\n                                if (Evt.targets) {\r\n                                    player.logSkill('re_gonggan', Evt.targets);\r\n                                    if (trigger.targets.contains(Evt.targets[0]))\r\n                                        trigger.targets.removeArray(Evt.targets);\r\n                                    else\r\n                                        trigger.targets.addArray(Evt.targets);\r\n                                }\r\n                            }],\r\n                    },\r\n                    give: {\r\n                        trigger: { player: 'useCardAfter' },\r\n                        priority: 23,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            if (player.getHistory('sourceDamage', (evt) => {\r\n                                return evt.card == Evt.card;\r\n                            }).length) {\r\n                                let evt = Evt.getParent('chooseUseTarget');\r\n                                return (evt === null || evt === void 0 ? void 0 : evt.logSkill) == 're_gonggan_useBy'\r\n                                    && Evt.cards.filter((card) => get.color(card) == 'red' && get.position(card) == 'd').length;\r\n                            }\r\n                        },\r\n                        content: [() => {\r\n                                Evt.card = trigger.cards.filter((card) => get.color(card) == 'red' && get.position(card) == 'd')[0];\r\n                                player.chooseTarget(function (card, player, target) {\r\n                                    return player != target;\r\n                                }).set('card', Evt.card).set('ai', function (target) {\r\n                                    var player = _status.event.player;\r\n                                    return get.attitude(player, target) * get.value(_status.event.card, target);\r\n                                }).set('prompt2', '『共感』：令其他角色获得' + get.translation(Evt.card));\r\n                            }, () => {\r\n                                if (result.bool && result.targets[0]) {\r\n                                    player.logSkill('re_gonggan_give', result.targets[0]);\r\n                                    result.targets[0].gain(Evt.card, 'log', 'gain2');\r\n                                }\r\n                            }],\r\n                    }\r\n                },\r\n            },\r\n            yejing: {\r\n                trigger: { global: 'useCard2' },\r\n                priority: 23,\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('yejing_used'))\r\n                        return false;\r\n                    if (get.name(Evt.card) != 'sha' || !Evt.targets.contains(player))\r\n                        return false;\r\n                    return (get.name(Evt.card) == 'sha') && player.countDiscardableCards(player, 'he', (card) => get.number(card, player) > _status.event.num);\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        var next = player.chooseToDiscard('he', get.prompt2('yejing')).set('logSkill', ['yejing', trigger.player]);\r\n                        next.set('filterCard', function (card, player) {\r\n                            return get.number(card, player) > _status.event.num;\r\n                        });\r\n                        next.set('num', get.number(trigger.card));\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.addTempSkill('yejing_used');\r\n                            trigger.cancel();\r\n                        }\r\n                    }],\r\n                subSkill: { used: {} }\r\n            },\r\n            shengfu: {\r\n                enable: 'chooseToUse',\r\n                init(player, skill) {\r\n                    player.storage.shengfu = {};\r\n                },\r\n                filter(Evt, player) {\r\n                    if (Evt.type == 'wuxie' && Evt.respondTo && Evt.respondTo[0] != player) {\r\n                        if (player.storage.shengfu.wuxie != undefined)\r\n                            return false;\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                hiddenCard(player, name) {\r\n                    return player.storage.shengfu.wuxie == undefined && name == 'wuxie';\r\n                },\r\n                content: [() => {\r\n                        Evt.p1 = Evt.getParent().respondTo[0];\r\n                        player.chooseToCompare(Evt.p1);\r\n                        player.storage.shengfu.wuxie = true;\r\n                        player.syncStorage('shengfu');\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.getParent().result = { wuxied: true };\r\n                        }\r\n                        else {\r\n                            player.addTempSkill('shengfu_onLose', 'phaseEnd');\r\n                        }\r\n                    }],\r\n                group: ['shengfu_reset', 'shengfu_onCompare', 'shengfu_onPhaseUse'],\r\n                subSkill: {\r\n                    reset: {\r\n                        trigger: { global: 'roundStart' },\r\n                        direct: true,\r\n                        log: false,\r\n                        content() {\r\n                            player.storage.shengfu = {};\r\n                            player.syncStorage('shengfu');\r\n                        }\r\n                    },\r\n                    onLose: {\r\n                        mod: {\r\n                            cardEnabled2(card, player) {\r\n                                return false;\r\n                            },\r\n                            cardUsable(card, player) {\r\n                                return 0;\r\n                            },\r\n                            hiddenCard(player, name) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    },\r\n                    onCompare: {\r\n                        trigger: {\r\n                            player: 'compare',\r\n                            target: 'compare'\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return get.color(Evt.card1) == 'black' || get.color(Evt.card2) == 'black';\r\n                        },\r\n                        check(Evt, player) {\r\n                            return Evt.card1.number <= Evt.card2.number;\r\n                        },\r\n                        content: [() => {\r\n                                player.chooseTarget('选择一方收回黑色拼点牌，改用牌堆顶牌代替', function (card, player, target) {\r\n                                    if (!_status.event.compareData)\r\n                                        return false;\r\n                                    if (_status.event.compareData.player == target) {\r\n                                        return get.color(_status.event.compareData.card1) == 'black';\r\n                                    }\r\n                                    if (_status.event.compareData.target == target) {\r\n                                        return get.color(_status.event.compareData.card2) == 'black';\r\n                                    }\r\n                                    return false;\r\n                                }).set('ai', function (target) {\r\n                                    if (!_status.event.compareData)\r\n                                        return 0;\r\n                                    if (_status.event.compareData.player == target) {\r\n                                        if (_status.event.compareData.card1.number > _status.event.compareData.card2.number) {\r\n                                            return 0;\r\n                                        }\r\n                                        else {\r\n                                            return 10;\r\n                                        }\r\n                                        ;\r\n                                    }\r\n                                    return 0;\r\n                                }).set('compareData', {\r\n                                    player: player,\r\n                                    target: player == trigger.target ? trigger.player : trigger.target,\r\n                                    card1: player == trigger.target ? trigger.card2 : trigger.card1,\r\n                                    card2: player == trigger.target ? trigger.card1 : trigger.card2\r\n                                });\r\n                            }, () => {\r\n                                if (result.bool && result.targets[0]) {\r\n                                    Evt.chosePlayer = result.targets[0];\r\n                                    if (Evt.chosePlayer == player) {\r\n                                        Evt.comparedCard = trigger.card1;\r\n                                    }\r\n                                    else {\r\n                                        Evt.comparedCard = trigger.card2;\r\n                                    }\r\n                                    game.broadcastAll(ui.clear);\r\n                                    Evt.chosePlayer.gain(Evt.comparedCard, 'gain');\r\n                                    Evt.pileCard = get.cards()[0];\r\n                                    game.log(Evt.chosePlayer, '判定牌', Evt.comparedCard, '改为', Evt.pileCard);\r\n                                }\r\n                                else {\r\n                                    Evt.finish();\r\n                                }\r\n                            }, () => {\r\n                                if (Evt.chosePlayer == player) {\r\n                                    trigger.card1 = Evt.pileCard;\r\n                                    trigger.num1 = Evt.pileCard.number;\r\n                                }\r\n                                else {\r\n                                    trigger.card2 = Evt.pileCard;\r\n                                    trigger.num2 = Evt.pileCard.number;\r\n                                }\r\n                                player.$compare(trigger.card1, trigger.target, trigger.card2);\r\n                                game.delay(0, 1500);\r\n                            }]\r\n                    },\r\n                    onPhaseUse: {\r\n                        enable: 'phaseUse',\r\n                        filter(Evt, player) {\r\n                            if (player.storage.shengfu.juedou != undefined)\r\n                                return false;\r\n                            return true;\r\n                        },\r\n                        filterTarget(card, player, target) {\r\n                            return player.canCompare(target);\r\n                        },\r\n                        content: [() => {\r\n                                player.storage.shengfu.juedou = true;\r\n                                player.syncStorage('shengfu');\r\n                                Evt.juedouTarget = target;\r\n                                player.chooseToCompare(Evt.juedouTarget);\r\n                            }, () => {\r\n                                if (result.bool) {\r\n                                    player.useCard({ name: 'juedou', isCard: true }, Evt.juedouTarget);\r\n                                }\r\n                                else {\r\n                                    player.addTempSkill('shengfu_onLose', 'phaseEnd');\r\n                                }\r\n                            }],\r\n                        ai: {\r\n                            order: 1,\r\n                            result: {\r\n                                target(player, target, card) {\r\n                                    return -1.5;\r\n                                },\r\n                                player(player, target, card) {\r\n                                    return lib.card.juedou.ai.result.player(player, target, card);\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                },\r\n                ai: {\r\n                    order() {\r\n                        return get.order({ name: 'wuxie' }) + 0.2;\r\n                    },\r\n                    result: {\r\n                        player(player, target) {\r\n                            var ext = _status.event.getParent('_wuxie');\r\n                            if (!Object.getOwnPropertyNames(ext).length)\r\n                                return 0;\r\n                            var att = get.attitude(player, ext.target);\r\n                            var eff = get.effect(ext.target, ext.card, ext.player, player);\r\n                            if (att > 0) {\r\n                                return eff < 0 ? 1 : 0;\r\n                            }\r\n                            else if (att < 0) {\r\n                                return eff > 0 ? 1 : 0;\r\n                            }\r\n                            return 0;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            wanbi: {\r\n                trigger: {\r\n                    player: ['shanAfter', 'wuxieAfter', 'useSkillAfter']\r\n                },\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    var _a;\r\n                    if (Evt.name == 'shan') {\r\n                        let evt = Evt.getParent('sha');\r\n                        if (evt.player.countCards('h') < player.countCards('h'))\r\n                            return false;\r\n                        return evt.player != player && evt.card && evt.card.cards[0];\r\n                    }\r\n                    if (Evt.name == 'wuxie') {\r\n                        let evt = Evt.getParent('useCard');\r\n                        if (evt === null || evt === void 0 ? void 0 : evt.respondTo) {\r\n                            if (evt.respondTo[0] && evt.respondTo[0].countCards('h') < player.countCards('h'))\r\n                                return false;\r\n                            return evt.respondTo[0] != player && evt.respondTo[1] && evt.respondTo[1].cards && evt.respondTo[1].cards[0];\r\n                        }\r\n                        else {\r\n                            evt = Evt.getParent('_wuxie');\r\n                            if (evt.player.countCards('h') < player.countCards('h'))\r\n                                return false;\r\n                            return evt.player != player && evt.card;\r\n                        }\r\n                    }\r\n                    if (Evt.name == 'useSkill' && Object.getOwnPropertyNames(Evt.getParent('_wuxie')).length) {\r\n                        let evt = Evt;\r\n                        if ((_a = evt.result) === null || _a === void 0 ? void 0 : _a.wuxied) {\r\n                            if (evt.respondTo) {\r\n                                if (evt.respondTo[0] && evt.respondTo[0].countCards('h') < player.countCards('h'))\r\n                                    return false;\r\n                                return evt.respondTo[0] != player && evt.respondTo[1] && evt.respondTo[1].cards && evt.respondTo[1].cards[0];\r\n                            }\r\n                            else {\r\n                                evt = Evt.getParent('_wuxie');\r\n                                if (evt.player.countCards('h') < player.countCards('h'))\r\n                                    return false;\r\n                                return evt.player != player && evt.card;\r\n                            }\r\n                        }\r\n                    }\r\n                    return false;\r\n                },\r\n                content() {\r\n                    let evt;\r\n                    if (trigger.name == 'wuxie') {\r\n                        evt = Evt.getParent('useCard');\r\n                        if (evt.respondTo) {\r\n                            var card = evt.respondTo[1].cards[0];\r\n                            player.gain(card, 'gain2');\r\n                        }\r\n                        else {\r\n                            var card = evt.getParent('_wuxie').card;\r\n                            player.gain(card, 'gain2');\r\n                        }\r\n                        if (card)\r\n                            game.broadcastAll((card) => {\r\n                                if (card && card.clone)\r\n                                    card.clone.delete();\r\n                            }, card);\r\n                    }\r\n                    else if (trigger.name == 'shan') {\r\n                        evt = Evt.getParent('sha');\r\n                        player.gain(evt.card.cards[0], 'gain2');\r\n                    }\r\n                    else {\r\n                        evt = trigger;\r\n                        if (evt.respondTo) {\r\n                            var card = evt.respondTo[1].cards[0];\r\n                            player.gain(card, 'gain2');\r\n                        }\r\n                        else {\r\n                            var card = trigger.getParent('_wuxie').card;\r\n                            player.gain(card, 'gain2');\r\n                        }\r\n                        if (card)\r\n                            game.broadcastAll((card) => {\r\n                                if (card && card.clone)\r\n                                    card.clone.delete();\r\n                            }, card);\r\n                    }\r\n                }\r\n            },\r\n            uijieyuan: {\r\n                enable: ['chooseToUse'],\r\n                viewAs: { name: 'yuanjiao' },\r\n                check(card) {\r\n                    return 6 - get.value(card);\r\n                },\r\n                usable: 1,\r\n                selectCard() {\r\n                    var player = _status.event.player;\r\n                    if (!ui.selected.targets.length)\r\n                        return [1, 2];\r\n                    if (ui.selected.targets.length && player.getStorage('uijieyuan_record').contains(ui.selected.targets[0]))\r\n                        return [1, 1];\r\n                    return [2, 2];\r\n                },\r\n                filterCard(card, player) {\r\n                    if (!ui.selected.targets.length)\r\n                        return get.type(card) != 'basic' || get.color(card) == 'red';\r\n                    else if (ui.selected.cards.length && ui.selected.cards)\r\n                        return get.color(card) == 'red';\r\n                },\r\n                position: 'he',\r\n                group: 'uijieyuan_record',\r\n                subSkill: {\r\n                    record: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = [];\r\n                        },\r\n                        trigger: { global: ['gainAfter', 'loseAfter', 'phaseAfter'] },\r\n                        filter(Evt, player) {\r\n                            if (Evt.name == 'lose')\r\n                                return Evt.hs && Evt.hs.length;\r\n                            return true;\r\n                        },\r\n                        direct: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        content() {\r\n                            if (!player.storage.uijieyuan_record)\r\n                                player.storage.uijieyuan_record = [];\r\n                            if (trigger.name == 'phase')\r\n                                player.storage.uijieyuan_record.length = 0;\r\n                            else\r\n                                player.storage.uijieyuan_record.add(trigger.player);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            huixiang: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h') > 0;\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    return target != player && target.countCards('e', (card) => get.equiptype(card) != 5);\r\n                },\r\n                position: 'he',\r\n                filterCard: true,\r\n                prepare: 'give',\r\n                discard: false,\r\n                lose: false,\r\n                content: [() => {\r\n                        target.gain(cards, player);\r\n                    }, () => {\r\n                        var list = target.getCards('e', (card) => get.equiptype(card) != 5 && !player.getEquip(get.subtype(card)));\r\n                        player.choosePlayerCard(Evt.target, 'e', true).set('filterButton', function (button) {\r\n                            return get.equiptype(button.link) != 5;\r\n                        }).set('ai', function (button) {\r\n                            var link = button.link;\r\n                            if (_status.event.list.contains(link))\r\n                                return get.value(link, player, 'raw');\r\n                            return 1;\r\n                        }).set('list', list);\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            Evt.cardname = get.name(result.links[0]);\r\n                            if (!player.getEquip(get.subtype(Evt.cardname))) {\r\n                                player.addTempSkill('huixiang_equip', { player: ['huixiangBegin'] });\r\n                                var name = Evt.cardname;\r\n                                player.storage.huixiang_equip2 = name;\r\n                                player.markAuto('huixiang_equip', result.links);\r\n                                var info = lib.card[name].skills;\r\n                                if (info && info.length)\r\n                                    player.addAdditionalSkill('huixiang_equip', info);\r\n                                game.log(player, '声明了', '#y' + get.translation(name));\r\n                            }\r\n                        }\r\n                    }],\r\n                group: 'huixiang_end',\r\n                subSkill: {\r\n                    end: {\r\n                        trigger: { player: 'phaseJieshuBegin' },\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            return player.countCards('he') > 0 && game.hasPlayer((cur) => {\r\n                                return cur != player && lib.skill.huixiang.filterTarget(true, player, cur);\r\n                            });\r\n                        },\r\n                        content: [() => {\r\n                                player.chooseCardTarget('he', function (card, player) {\r\n                                    return true;\r\n                                }, function (card, player, target) {\r\n                                    return target != player && lib.skill.huixiang.filterTarget.apply(this, arguments);\r\n                                }).set('prompt', get.prompt2('huixiang'));\r\n                            }, () => {\r\n                                if (result.bool && result.targets && result.cards) {\r\n                                    if (player.hasSkill('huixiang_equip'))\r\n                                        player.removeSkill('huixiang_equip');\r\n                                    Evt.target = result.targets[0];\r\n                                    player.give(result.cards, Evt.target, 'giveAuto');\r\n                                }\r\n                                else {\r\n                                    Evt.finish();\r\n                                }\r\n                            }, () => {\r\n                                console.log(Evt.target);\r\n                                var list = Evt.target.getCards('e', (card) => get.equiptype(card) != 5 && !player.getEquip(get.subtype(card)));\r\n                                player.choosePlayerCard(Evt.target, 'e', true).set('filterButton', function (button) {\r\n                                    return get.equiptype(button.link) != 5;\r\n                                }).set('ai', function (button) {\r\n                                    var link = button.link;\r\n                                    if (_status.event.list.contains(link))\r\n                                        return get.value(link, player, 'raw');\r\n                                    return 1;\r\n                                }).set('list', list);\r\n                            }, () => {\r\n                                var _a;\r\n                                if ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length) {\r\n                                    Evt.cardname = get.name(result.links[0]);\r\n                                    if (!player.getEquip(get.subtype(Evt.cardname))) {\r\n                                        player.addTempSkill('huixiang_equip', { player: ['huixiangBegin'] });\r\n                                        var name = Evt.cardname;\r\n                                        player.storage.huixiang_equip2 = name;\r\n                                        player.markAuto('huixiang_equip', result.links);\r\n                                        var info = lib.card[name].skills;\r\n                                        if (info && info.length)\r\n                                            player.addAdditionalSkill('huixiang_equip', info);\r\n                                        game.log(player, '声明了', '#y' + get.translation(name));\r\n                                    }\r\n                                }\r\n                            }],\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 5,\r\n                    result: {\r\n                        player(player, target) {\r\n                            var list = target.getCards('e', (card) => get.equiptype(card) != 5 && !player.getEquip(get.subtype(card)));\r\n                            if (list.length)\r\n                                return 0.5;\r\n                            else\r\n                                return -1;\r\n                        },\r\n                        target: 1,\r\n                    },\r\n                },\r\n            },\r\n            huixiang_equip: {\r\n                trigger: { global: ['loseAfter', 'cardsDiscardAfter'] },\r\n                filter(Evt, player) {\r\n                    return player != Evt.player && player != _status.currentPhase && Evt.cards\r\n                        && Evt.cards.filter((card) => get.position(card, true) == 'd' && get.type(card) == 'equip' && player.storage.huixiang_equip.contains(card)).length > 0;\r\n                },\r\n                forced: true,\r\n                content: [() => {\r\n                        if (trigger.delay == false)\r\n                            game.delay();\r\n                        player.draw();\r\n                    }, () => {\r\n                        player.unmarkAuto('huixiang_equip', trigger.cards);\r\n                    }],\r\n                mod: {\r\n                    globalFrom(from, to, distance) {\r\n                        var info = lib.card[from.storage.huixiang_equip2];\r\n                        if (info && info.distance && info.distance.globalFrom)\r\n                            return distance + info.distance.globalFrom;\r\n                    },\r\n                    globalTo(from, to, distance) {\r\n                        var info = lib.card[to.storage.huixiang_equip2];\r\n                        if (info && info.distance && info.distance.globalTo)\r\n                            return distance + info.distance.globalTo;\r\n                    },\r\n                    attackFrom(from, to, distance) {\r\n                        var info = lib.card[from.storage.huixiang_equip2];\r\n                        if (info && info.distance && info.distance.attackFrom)\r\n                            return distance + info.distance.attackFrom;\r\n                    },\r\n                    attackTo(from, to, distance) {\r\n                        var info = lib.card[to.storage.huixiang_equip2];\r\n                        if (info && info.distance && info.distance.attackTo)\r\n                            return distance + info.distance.attackTo;\r\n                    },\r\n                },\r\n                onremove: true,\r\n                intro: {\r\n                    mark(dialog, storage, player) {\r\n                        dialog.add(storage);\r\n                        dialog.addText('当前装备：' + get.translation(player.storage.huixiang_equip2));\r\n                        var str2 = lib.translate[player.storage.huixiang_equip2 + '_info'];\r\n                        if (str2) {\r\n                            if (str2.length >= 12)\r\n                                dialog.addText(str2, false);\r\n                            else\r\n                                dialog.addText(str2);\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            WHiTE: {\r\n                trigger: {\r\n                    player: 'damageEnd',\r\n                },\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    return Evt.source != undefined;\r\n                },\r\n                logTarget: 'source',\r\n                content: [() => {\r\n                        player.viewHandcards(trigger.source);\r\n                    }, () => {\r\n                        player.chooseControl(lib.suit).set('prompt', '『WHiTE』：请选择一个花色').ai = () => { return lib.suit.randomGet(); };\r\n                    }, () => {\r\n                        Evt.suit = result.control;\r\n                        player.popup(Evt.suit + 2);\r\n                        game.log(player, '声明了', Evt.suit + 2);\r\n                    }, () => {\r\n                        if (!trigger.source.storage.WHiTE_suit)\r\n                            trigger.source.storage.WHiTE_suit = [];\r\n                        trigger.source.storage.WHiTE_suit.add(Evt.suit);\r\n                        if (trigger.source.hasSkill('WHiTE_suit'))\r\n                            trigger.source.markSkill('WHiTE_suit');\r\n                        else\r\n                            trigger.source.addTempSkill('WHiTE_suit');\r\n                    }],\r\n                subSkill: {\r\n                    suit: {\r\n                        mark: true,\r\n                        onremove: true,\r\n                        intro: {\r\n                            content: '不能使用、打出或弃置$牌',\r\n                        },\r\n                        mod: {\r\n                            cardDiscardable(card, player) {\r\n                                if (player.getStorage('WHiTE_suit').contains(get.suit(card)))\r\n                                    return false;\r\n                            },\r\n                            cardEnabled2(card, player) {\r\n                                if (player.getStorage('WHiTE_suit').contains(get.suit(card)))\r\n                                    return false;\r\n                            },\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            BLacK: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return game.hasPlayer((cur) => {\r\n                        return cur != player;\r\n                    });\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    return player.canCompare(target);\r\n                },\r\n                content: [() => {\r\n                        var cards = get.cards(target.hp);\r\n                        Evt.cards = cards;\r\n                        player.chooseCardButton('『BLacK』：选择一张牌', cards, true);\r\n                    }, () => {\r\n                        if (result.bool && player.canCompare(target)) {\r\n                            for (let i = Evt.cards.length - 1; i >= 0; i--) {\r\n                                if (Evt.cards[i] == result.links[0])\r\n                                    continue;\r\n                                Evt.cards[i].fix();\r\n                                ui.cardPile.insertBefore(Evt.cards[i], ui.cardPile.firstChild);\r\n                            }\r\n                            player.storage.BLacK = result.links[0];\r\n                            player.chooseToCompare(target);\r\n                        }\r\n                        else {\r\n                            for (let i = Evt.cards.length - 1; i >= 0; i--) {\r\n                                Evt.cards[i].fix();\r\n                                ui.cardPile.insertBefore(Evt.cards[i], ui.cardPile.firstChild);\r\n                            }\r\n                            game.delay();\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (result.winner) {\r\n                            if (Evt.cards.length) {\r\n                                if (result.winner == player) {\r\n                                    Evt.card = player.storage.BLacK;\r\n                                    if (Evt.card && player.canUse(Evt.card, target))\r\n                                        player.useCard(Evt.card, target);\r\n                                }\r\n                                else if (result.winner == target) {\r\n                                    Evt.card = [result.player, result.target].filterInD('d')[0];\r\n                                    if (Evt.card && target.canUse(Evt.card, player))\r\n                                        target.useCard(Evt.card, player);\r\n                                }\r\n                            }\r\n                        }\r\n                        delete player.storage.BLacK;\r\n                    }],\r\n                group: 'BLacK_compare',\r\n                subSkill: {\r\n                    compare: {\r\n                        trigger: { player: 'chooseToCompareBegin' },\r\n                        firstDo: true,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            if (Evt.getParent().name == 'BLacK' && player.storage.BLacK) {\r\n                                return !Evt.fixedResult;\r\n                            }\r\n                            return false;\r\n                        },\r\n                        content() {\r\n                            if (!trigger.fixedResult)\r\n                                trigger.fixedResult = {};\r\n                            trigger.fixedResult[player.playerid] = player.storage.BLacK;\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            shiguang: {\r\n                trigger: { player: 'damageEnd' },\r\n                priority: 222,\r\n                filter(Evt, player) {\r\n                    return Evt.num > 0;\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        Evt.num = trigger.num;\r\n                        var next = player.chooseTarget('###' + get.prompt('shiguang') + '###令一名角色受到' + get.cnNumber(Evt.num) + '点伤害', function (card, player, target) {\r\n                            return target != _status.event.another;\r\n                        });\r\n                        next.set('num', Evt.num);\r\n                        next.set('another', trigger.source);\r\n                        next.set('logSkill', 'shiguang');\r\n                        next.set('ai', function (target) {\r\n                            var player = _status.event.player;\r\n                            var num = _status.event.num;\r\n                            var att = get.attitude(player, target);\r\n                            if (target.hp <= num) {\r\n                                return -att * (num + 1 - target.hp) * 2;\r\n                            }\r\n                            else {\r\n                                return -att;\r\n                            }\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool && result.targets[0]) {\r\n                            result.targets[0].damage(Evt.num, trigger.source || 'nosource');\r\n                            if (!result.targets[0].storage.shiguang_lose)\r\n                                result.targets[0].storage.shiguang_lose = 0;\r\n                            result.targets[0].storage.shiguang_lose += Evt.num;\r\n                            result.targets[0].addTempSkill('shiguang_lose', 'phaseBegin');\r\n                        }\r\n                    }],\r\n                group: 'shiguang_source',\r\n                subSkill: {\r\n                    source: {\r\n                        trigger: { source: 'damageSource' },\r\n                        priority: 222,\r\n                        filter(Evt, player) {\r\n                            return Evt.num > 0;\r\n                        },\r\n                        direct: true,\r\n                        content: [() => {\r\n                                Evt.num = trigger.num;\r\n                                var next = player.chooseTarget('###' + get.prompt('shiguang') + '###令一名角色回复' + get.cnNumber(Evt.num) + '点体力', function (card, player, target) {\r\n                                    return target != _status.event.another;\r\n                                });\r\n                                next.set('num', Evt.num);\r\n                                next.set('another', trigger.player);\r\n                                next.set('ai', function (target) {\r\n                                    var player = _status.event.player;\r\n                                    var num = _status.event.num;\r\n                                    var att = get.attitude(player, target);\r\n                                    if (get.recoverEffect(target, player, player) <= 0 || target.maxHp - target.hp < num) {\r\n                                        return -att * num;\r\n                                    }\r\n                                    else {\r\n                                        return att * num;\r\n                                    }\r\n                                });\r\n                            }, () => {\r\n                                var _a;\r\n                                if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                                    player.logSkill('shiguang', result.targets);\r\n                                    result.targets[0].recover(Evt.num);\r\n                                    if (!result.targets[0].storage.shiguang_gain)\r\n                                        result.targets[0].storage.shiguang_gain = 0;\r\n                                    result.targets[0].storage.shiguang_gain += Evt.num;\r\n                                    result.targets[0].addTempSkill('shiguang_gain', 'phaseBegin');\r\n                                }\r\n                            }],\r\n                    },\r\n                    gain: {\r\n                        marktext: \"失\",\r\n                        locked: true,\r\n                        intro: {\r\n                            content: '在下个回合开始时失去&点体力',\r\n                        },\r\n                        mark: true,\r\n                        onremove(player) {\r\n                            game.log('『失光』后续效果');\r\n                            game.delayx(0.5);\r\n                            player.loseHp(player.storage.shiguang_gain);\r\n                            delete player.storage.shiguang_gain;\r\n                        },\r\n                    },\r\n                    lose: {\r\n                        marktext: \"失\",\r\n                        locked: true,\r\n                        intro: {\r\n                            content: '在下个回合开始时回复&点体力',\r\n                        },\r\n                        mark: true,\r\n                        onremove(player) {\r\n                            if (player.isDamaged()) {\r\n                                game.log('『失光』后续效果');\r\n                            }\r\n                            game.delayx(0.5);\r\n                            player.recover(player.storage.shiguang_lose, 'nosource');\r\n                            delete player.storage.shiguang_lose;\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            rangran: {\r\n                trigger: { player: 'useCard2' },\r\n                priority: 222,\r\n                filter(Evt, player) {\r\n                    var card = Evt.card;\r\n                    var info = get.info(card);\r\n                    if (info.allowMultiple == false)\r\n                        return false;\r\n                    if (!player.storage.rangran)\r\n                        player.storage.rangran = [];\r\n                    return game.countPlayer((cur) => {\r\n                        return cur.isMaxHp() && !player.storage.rangran.contains(cur) && !Evt.targets.contains(cur) && lib.filter.targetEnabled2(Evt.card, player, cur);\r\n                    });\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        console.log(player.storage.rangran);\r\n                        var next = player.chooseTarget(get.prompt2('rangran'), [1, Infinity], function (card, player, target) {\r\n                            return target.isMaxHp() && !player.storage.rangran.contains(target) && !_status.event.targets.contains(target) && lib.filter.targetEnabled2(_status.event.card, player, target);\r\n                        }).set('ai', function (target) {\r\n                            var evt = _status.event;\r\n                            return get.effect(target, evt.card, evt.source, evt.player);\r\n                        }).set('card', trigger.card).set('targets', trigger.targets);\r\n                    }, () => {\r\n                        if (result.bool && result.targets[0]) {\r\n                            player.logSkill('rangran');\r\n                            var targets = result.targets.slice(0);\r\n                            trigger.targets.addArray(targets);\r\n                            player.storage.rangran.addArray(targets);\r\n                            player.line(targets, { color: [255, 224, 172] });\r\n                        }\r\n                    }],\r\n                group: ['rangran_drawBy', 'rangran_clear'],\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: { global: 'damageHit' },\r\n                        priority: 222,\r\n                        filter(Evt, player) {\r\n                            return Evt.nature && Evt.player.isMaxHp();\r\n                        },\r\n                        forced: true,\r\n                        content() {\r\n                            player.draw();\r\n                        }\r\n                    },\r\n                    clear: {\r\n                        trigger: { global: 'phaseEnd' },\r\n                        priority: 222,\r\n                        filter(Evt, player) {\r\n                            return player.storage.rangran;\r\n                        },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            delete player.storage.rangran;\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            jiazhao: {\r\n                trigger: { global: 'damageEnd' },\r\n                filter(Evt, player) {\r\n                    return Evt.player.isIn();\r\n                },\r\n                check(Evt, player) {\r\n                    return get.attitude(player, Evt.player) > 0;\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    trigger.player.draw(trigger.player.isMinHp() ? 2 : 1).gaintag = ['jiazhao'];\r\n                },\r\n                ai: {\r\n                    expose: 0.1,\r\n                },\r\n                global: 'jiazhao_discardBy',\r\n                subSkill: {\r\n                    discardBy: {\r\n                        mod: {\r\n                            aiValue(player, card, num) {\r\n                                if (card.hasGaintag && card.hasGaintag('jiazhao'))\r\n                                    return num / 10;\r\n                            },\r\n                        },\r\n                        trigger: { player: 'phaseBegin' },\r\n                        filter(Evt, player) {\r\n                            return Evt.player == player && player.countCards('h', (card) => card.hasGaintag('jiazhao'));\r\n                        },\r\n                        forced: true,\r\n                        content() {\r\n                            var hs = player.getCards('h', (card) => card.hasGaintag('jiazhao'));\r\n                            if (hs.length)\r\n                                player.discard(hs);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            zhenbao: {\r\n                trigger: { player: 'discardAfter' },\r\n                filter(Evt, player) {\r\n                    if (!Evt.cards || Evt.cards.length < 2)\r\n                        return false;\r\n                    return game.hasPlayer((cur) => {\r\n                        return !cur.countCards('j');\r\n                    });\r\n                },\r\n                priority: 22,\r\n                direct: true,\r\n                content: [() => {\r\n                        Evt.cards = trigger.cards;\r\n                        player.chooseTarget(function (card, player, target) {\r\n                            return !target.countCards('j');\r\n                        }).set('card', Evt.card).set('ai', function (target) {\r\n                            var player = _status.event.player;\r\n                            return -get.attitude(player, target);\r\n                        }).set('prompt', get.prompt2('zhenbao'));\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('zhenbao', Evt.target);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        Evt.target.chooseCardButton(cards, '选择一张牌置于判定区', true);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            var cards = result.links.slice(0);\r\n                            player.$give(cards, Evt.target, false);\r\n                            if (get.type(cards[0]) == 'delay')\r\n                                Evt.target.addJudge(cards[0]);\r\n                            else if (get.color(cards[0]) == 'red' && Evt.target.canAddJudge('lebu'))\r\n                                Evt.target.addJudge({ name: 'lebu' }, cards);\r\n                            else if (get.color(cards[0]) == 'black' && Evt.target.canAddJudge('bingliang'))\r\n                                Evt.target.addJudge({ name: 'bingliang' }, cards);\r\n                        }\r\n                    }],\r\n            },\r\n            heimo: {\r\n                audio: 'quru',\r\n                trigger: {\r\n                    player: 'damageEnd',\r\n                },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return player.countCards('he');\r\n                },\r\n                content: [() => {\r\n                        Evt.targets = [player];\r\n                        if (trigger.source && trigger.source.isIn()) {\r\n                            Evt.damageBy = true;\r\n                            Evt.targets.add(trigger.source);\r\n                        }\r\n                        ;\r\n                        var next = player.chooseToDiscard('he', [1, Infinity], get.prompt2('heimo', Evt.targets));\r\n                        next.set('logSkill', ['heimo', Evt.targets, 'fire']);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.num = result.cards.length;\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        player.judge((card) => {\r\n                            return 0;\r\n                        }).callback = lib.skill.heimo.callback;\r\n                        if (--Evt.num)\r\n                            Evt.redo();\r\n                    }, () => {\r\n                        if (Evt.black && Evt.targets[1])\r\n                            Evt.targets[1].damage();\r\n                    }, () => {\r\n                        if (Evt.red)\r\n                            player.draw(2);\r\n                    }],\r\n                callback() {\r\n                    var evt = Evt.getParent('heimo');\r\n                    if (Evt.judgeResult.color == 'black') {\r\n                        evt.black = true;\r\n                        player.popup('黑色');\r\n                    }\r\n                    else if (Evt.judgeResult.color == 'red') {\r\n                        evt.red = true;\r\n                        player.popup('红色');\r\n                    }\r\n                    game.delay(2);\r\n                },\r\n            },\r\n        },\r\n        dynamicTranslate: {\r\n            re_longdan(player) {\r\n                let str = lib.translate.re_longdan_info;\r\n                let result = /(阳~.*?)[；。].*(阴~.*?)[；。]/g.exec(str);\r\n                let yang = result[1], yin = result[2];\r\n                if (player.storage.re_longdan === true)\r\n                    return str.replace(yang, lib.spanClass(yang, 'changetext'));\r\n                return str.replace(yin, lib.spanClass(yin, 'changetext'));\r\n            },\r\n        },\r\n        translate: {\r\n            hololive: `HOLO`,\r\n            re_KizunaAI: `新·绊爱`,\r\n            re_ailian: `爱冀`,\r\n            re_ailian_info: `当你受到伤害后或出牌阶段限一次，你可以将任意张手牌交给一名其他角色。当你于一个阶段内以此法给出第二张牌时，你可以视为使用一张基本牌。`,\r\n            re_ailian_append: lib.figurer(`特性：传递关键牌`),\r\n            re_YuNi: `新·YuNi`,\r\n            re_shengcai: `声彩`,\r\n            re_shengcai_info: `当你使用一张牌后，若与本回合此前被使用的牌颜色均不同，你可以摸X张牌。（X为本回合之前使用过的牌数）`,\r\n            re_shengcai_append: lib.figurer(`回合内爆发（注意不要被其他人使用的牌干扰）`),\r\n            re_TomariMari: `新·兎鞠まり`,\r\n            liansheng: `恋声`,\r\n            liansheng_info: `锁定技 你未受伤时性别为男；受伤时性别为女。你的性别变化时，若当前回合角色为女性，你摸一张牌。`,\r\n            ruantang: `软糖`,\r\n            ruantang_info: `你可以跳过判定阶段和摸牌阶段，令至多一名异性角色与你各回复1点体力，然后体力因此回复至上限的角色摸一张牌。`,\r\n            re_Omesis: `新·欧米伽姐妹`,\r\n            yaozhan: `邀战`,\r\n            yaozhan_info: `你可以跳过摸牌阶段/出牌阶段，视为使用一张【决斗】。`,\r\n            yaozhan_append: lib.figurer(`特性：易上手`),\r\n            chongxin: `崇新`,\r\n            chongxin_info: `当判定牌生效前，你可以用相同花色的牌替换之，然后你可以将获得的牌置于武将牌上。其他角色不能使用与之花色相同的牌响应你使用的【决斗】。`,\r\n            re_NijikawaRaki: `新·虹河ラキ`,\r\n            yayun: `押运`,\r\n            laohuji: `老虎机`,\r\n            yayun_info: `轮次技 在合适的时机，你可以弃置所有手牌，连续判定三次，每有一张判定牌花色包含于弃牌中，你便摸一张牌；若三次判定结果均为同一花色，你额外摸三张牌。`,\r\n            yayun_append: lib.figurer(`特性：赌狗`),\r\n            jidao: `极道`,\r\n            jidao_info: `你可以防止对其他角色造成的伤害，改为令其发动一次『押运』。`,\r\n            re_Fairys: `新·Fairys`,\r\n            re_Fairys_ab: `新·鹦鹉`,\r\n            ywshuangxing: `双形`,\r\n            ywshuangxing_info: `当你成为黑色非基本牌/红色非装备牌的目标时，若你的体力为奇数/偶数，你可以取消之。`,\r\n            yinni: `音拟`,\r\n            yinni_info: `当你使用一张牌时，若与上一张被使用的牌颜色不同，你可将之目标数改为与上一张牌相同。若目标数因此减少，你摸一张牌。`,\r\n            re_TenkaiTsukasa: `新·天开司`,\r\n            re_pojie: `破戒`,\r\n            re_pojie_info: `回合内，一名角色失去装备区的牌时，你可以摸一张牌。出牌阶段结束时，本阶段你每发动过一次此技能便弃置一张牌。`,\r\n            re_dazhen: `大振`,\r\n            re_dazhen_info: `出牌阶段，你可将你武器栏的牌移动至其他角色武器栏（代替原装备），然后其选择一项：<br>弃置你手牌数与手牌上限之差的牌；或受到你造成的1点伤害。`,\r\n            re_KaguyaLuna: `新·辉夜月`,\r\n            re_jiajiupaidui: `假酒`,\r\n            re_jiajiupaidui_info: `每回合限一次，当你需要使用【酒】时，你可以令一名角色弃一张牌，若为♠或点数9，视为你使用之。`,\r\n            re_MiraiAkari: `新·未来明`,\r\n            duanli: `断离`,\r\n            duanli_info: `出牌阶段限一次，你可以弃置所有手牌，然后你于回合结束时摸等量的牌。`,\r\n            duanli_append: lib.figurer(`特性：制衡`),\r\n            qingmi: `情迷`,\r\n            qingmi_info: `其他角色使用【桃】后，可以令你摸一张牌。`,\r\n            re_NekomiyaHinata: `新·猫宫日向`,\r\n            yingdan: `盈弹`,\r\n            yingdan_info: `你可以使用一张【杀】，视为使用了一张【闪】或【无懈可击】。若此【杀】的点数不大于你的攻击范围，则这些牌均不触发技能时机。`,\r\n            yingdan_append: lib.figurer(`特性：强化出杀`),\r\n            tianzhuo: `舔镯`,\r\n            tianzhuo_info: `当其他角色死亡时，你可以获得其装备区的牌，若该角色由你杀死，你摸三张牌。`,\r\n            re_KaguraNana: `新·神乐七奈`,\r\n            re_DDzhanshou: `D斩`,\r\n            re_DDzhanshou_info: `一名角色的回合结束时，若本回合其对除你和其以外的角色使用过红色牌，你可以摸一张牌或对其使用一张【杀】。`,\r\n            re_Siro: `新·小白`,\r\n            lingsi: `灵思`,\r\n            lingsi_info: `出牌阶段限一次，你可以摸两张牌然后弃两张牌。你一次性弃置至少两张基本牌后，可以视为使用一张【杀】；一次性弃置至少两张非基本牌后，可以令一名角色回复1点体力。`,\r\n            lingsi_append: lib.figurer(`特性：制衡`),\r\n            re_Nekomasu: `新·ねこます`,\r\n            re_dianyin: `承志`,\r\n            re_dianyin_info: `当你受到 1 点伤害后，你可以令一名角色摸两张牌，若其手牌数少于你或为全场最少，改为摸三张牌。`,\r\n            re_Noracat: `新·野良喵`,\r\n            kouhu: `口胡`,\r\n            kouhu_shan: `口胡-闪`,\r\n            kouhu_sha: `口胡-杀`,\r\n            kouhu_info: `每轮每项限一次。你可以令当前回合角色摸一张牌，视为打出了一张【杀】或使用了一张【闪】。`,\r\n            zhiqiu: `直球`,\r\n            zhiqiu_info: `当你发动『口胡』时，你可以与一名角色拼点，若你赢，你指定一名角色受到一点伤害；否则其对你造成一点伤害。`,\r\n            re_XiaDi: `新·下地`,\r\n            re_yinliu: `逐流`,\r\n            re_yinliu_info: `出牌阶段限一次，你可以弃置至多三张牌，然后摸牌并展示直到出现了你弃置牌未包含的花色为止。`,\r\n            re_ShizukaRin: `新·静凛`,\r\n            re_mozhaotuji: `夜杰`,\r\n            re_mozhaotuji_DrawOrStop: `夜杰`,\r\n            re_mozhaotuji_info: `每回合限一次，你可以将你的一个阶段变为出牌阶段。你使用过至少两张牌的出牌阶段结束时，摸一张牌。`,\r\n            re_MitoTsukino: `新·月之美兔`,\r\n            re_MitoTsukino_info: `月之美兔`,\r\n            re_bingdielei: `盛蕾`,\r\n            re_bingdielei_info: `轮次技 一个回合结束时，若你于该回合内失去过牌，你可以获得一个额外回合。`,\r\n            re_HiguchiKaede: `新·樋口枫`,\r\n            re_zhenyin: `震音`,\r\n            re_zhenyin_info: `每回合限一次，当你使用黑色牌指定目标后，可以将一名目标区域内的一张牌移至其下家，若引起冲突，进行替代并对下家造成 1 点伤害。`,\r\n            re_UshimiIchigo: `新·宇志海莓`,\r\n            re_shuangren: `双刃`,\r\n            re_shuangren_info: `你的黑色【杀】可以额外指定一名角色为目标；你的红色【杀】无距离与次数限制。`,\r\n            re_jitui: `急退`,\r\n            re_jitui_info: `当你受到伤害后或在回合外正面朝上失去非基本牌后，你可以摸一张牌。`,\r\n            re_MononobeAlice: `新·物述有栖`,\r\n            re_dianmingguzhen: `电鸣`,\r\n            re_dianmingguzhen_info: `出牌阶段限一次，你可以失去 1 点体力移动场上的一张装备牌，若移动的是你的，你可视为使用一张雷【杀】。`,\r\n            re_MinamiNami: `新·美波七海`,\r\n            re_longdan: `龙胆雄心`,\r\n            re_longdan_info: `转换技 每回合限一次，阳~你可以将你任意一张不为【杀】的基本牌当作一张【杀】使用或打出；阴~你可以将一张【杀】当作任意一张不为【杀】的基本牌使用或打出。你以此法转化点数大于7的牌无次数与距离限制。`,\r\n            re_SisterClearie: `新·克蕾雅`,\r\n            shenyou: `神佑`,\r\n            shenyou_info: `锁定技 你受到来自基本牌的伤害+1；其它的伤害-1。`,\r\n            shenfa: `神罚`,\r\n            shenfa_info: `当你失去一张手牌时，你可以令一名其他角色获得『神佑』直到回合结束。`,\r\n            shenfa_append: lib.figurer(`特性：易上手`),\r\n            re_SuzukaUtako: `新·铃鹿诗子`,\r\n            re_meici: `美词`,\r\n            re_meici_info: `转换技 每回合限一次，有牌不因使用进入弃牌堆时，你可以获得其中一张①红色️②黑色️牌。`,\r\n            re_danlian: `耽恋`,\r\n            re_danlian_info: `当你于摸牌阶段外获得♦/♥/♠牌时，你可以将之合理的置于一名角色的判定区/手牌区/装备区。`,\r\n            re_SuzuharaLulu: `新·铃原露露`,\r\n            tunshi: `吞食`,\r\n            tunshi_info: `其他角色于其回合外失去某区域最后一张牌时，你可以令当前回合角色获得之。你的回合内其他角色进入濒死状态时，你可以回复1点体力。`,\r\n            re_LizeHelesta: `新·莉泽`,\r\n            yubing: `语冰`,\r\n            yubing_info: `你使用基本牌或通常锦囊牌后，若未被抵消，你可以令你不为0的手牌上限-1直到回合结束，然后摸两张牌。`,\r\n            yubing_append: lib.figurer(`特性：易上手`),\r\n            re_AngeKatrina: `新·安洁`,\r\n            akxiaoqiao: `小巧`,\r\n            akxiaoqiao_info: `弃牌阶段开始时，你可以展示任意张类型不同的手牌，本回合这些牌不计入手牌上限。`,\r\n            akxiaoqiao_append: lib.figurer(`特性：易上手`),\r\n            liancheng: `链成`,\r\n            liancheng_info: `每轮限两次。一个回合结束时，你可以重铸任意张类型不同的手牌。若你重铸了装备牌，你可以令当前回合角色调整手牌与你相同。`,\r\n            re_HonmaHimawari: `新·本间向日葵`,\r\n            tianqing: `天晴烂漫`,\r\n            tianqing_info: `一名角色受到伤害时，若本回合上一次伤害没有被防止，你可以防止本次伤害。`,\r\n            mark_tianqing: `天晴烂漫`,\r\n            mark_tianqing_info: `轮次技 一名角色受到伤害时，若本回合已有角色受过伤，你可以防止本次伤害。`,\r\n            mark_tianqing_append: lib.figurer(`特性：减伤`),\r\n            kuiquan: `葵拳连打`,\r\n            kuiquan_info: `你可以将一张牌当【火攻】使用，此牌类型不得为本回合你使用过的类型。当你在【火攻】中弃置了【杀】后，获得目标的展示牌。`,\r\n            re_AibaUiha: `新·相羽初叶`,\r\n            kangding: `扛鼎膂力`,\r\n            kangding_info: `你可以弃置一张武器牌令你即将造成的伤害+1；你可以弃置一张防具牌令你即将受到的伤害-1。`,\r\n            kangding_append: lib.figurer(`特性：减伤`),\r\n            longshe: `龙蛇笔走`,\r\n            longshe_info: `出牌阶段限X次，你可以弃置一张基本牌并展示牌堆顶牌，若为基本牌，弃置之并摸一张牌。若为非基本牌，你可立即使用之。（X为你没有牌的装备栏数）`,\r\n            re_SukoyaKana: `新·健屋花那`,\r\n            re_huawen: `花吻`,\r\n            re_huawen_info: `出牌阶段限一次，你可以弃置两张颜色不同的牌。<br>\r\n\t\t\t当你弃置两张颜色不同的牌时，可以视为使用其中的红色牌且此牌额外结算一次。`,\r\n            re_liaohu: `疗护`,\r\n            re_liaohu_info: `一个回合结束时，若你造成了伤害，可以令一名角色摸两张牌。若本回合『花吻』已发动，你可以改为摸一张牌并回复 1 点体力。`,\r\n            re_ShirayukiTomoe: `新·白雪巴`,\r\n            re_gonggan: `共感`,\r\n            re_gonggan_info: `出牌阶段限一次，你可以弃置两张颜色不同的牌。<br>\r\n\t\t\t当你弃置两张颜色不同的牌时，可以视为使用其中的黑色牌且为此牌增加或减少一个目标。`,\r\n            yejing: `夜境`,\r\n            yejing_info: `每回合限一次，当你成为【杀】的目标时，你可以弃置一张点数更大的牌取消之。`,\r\n            re_TokinoSora: `新·时乃空`,\r\n            re_taiyangzhiyin: `阳语`,\r\n            re_taiyangzhiyin_info: `你使用牌指定目标时，若此牌点数大于10，你可选择一项：<br>令之无法响应；为之额外指定一名目标；或摸一张牌。`,\r\n            re_taiyangzhiyin_append: lib.figurer(`特性：易上手`),\r\n            re_RobokoSan: `新·萝卜子`,\r\n            re_zhanxie: `战械`,\r\n            re_zhanxie_info: `锁定技 你于出牌阶段可多使用两张【杀】。当你使用第三张【杀】时，摸两张牌。`,\r\n            re_chongdian: `机电`,\r\n            re_chongdian_info: `你受到雷电伤害时可改为回复等量体力。你的装备牌可当无距离限制的雷【杀】使用。`,\r\n            re_ShirakamiFubuki: `新·白上吹雪`,\r\n            re_yuanlv: `狐虑`,\r\n            re_yuanlv_info: `每回合限一次，你使用锦囊后或受到伤害后，你可以摸三张牌，然后将两张牌置于牌堆顶。`,\r\n            re_yuanlv_append: lib.figurer(`特性：易上手`),\r\n            re_jinyuan: `边援`,\r\n            re_jinyuan_info: `出牌阶段，你可以弃一张牌令一名其他角色摸一张牌，然后其可以立即使用那张牌。`,\r\n            re_HoshimatiSuisei: `新·星街彗星`,\r\n            cansha: `残杀`,\r\n            cansha_info: `当你的实体【杀】生效后，你可以视为使用一张【过河拆桥】；当你的实体【过河拆桥】生效后，你可以视为使用一张【杀】。`,\r\n            re_AkiRosenthal: `新·亚琦`,\r\n            re_huichu: `烩料`,\r\n            re_huichu_info: `轮次技 一名角色的回合开始时，你可以展示所有手牌，若均为红色，其回复 1 点体力。若有其它花色，你可以重铸任意张手牌。`,\r\n            re_YozoraMel: `新·夜空梅露`,\r\n            fuyi: `蝠翼`,\r\n            fuyi_info: `锁定技 奇数轮内你计算与其他角色的距离-1，偶数轮内其他角色计算与你的距离+1。`,\r\n            xihun: `吸魂`,\r\n            xihun_info: `一名角色受到【杀】造成的伤害后，你可以摸一张牌。然后若你的手牌数大于手牌上限，你本轮不能再发动此技能。`,\r\n            re_SakuraMiko: `新·樱巫女`,\r\n            huangyou: `黄油`,\r\n            huangyou_info: `出牌阶段，你可以弃置两张红色牌摸三张牌或回复1点体力，然后判定一次，若不为♥，本回合不能再发动此技能。`,\r\n            huangyou_append: lib.figurer(`特性：赌狗`),\r\n            qidao: `祈祷`,\r\n            qidao_info: `当判定牌生效前，你可以弃一张牌重新判定。`,\r\n            re_NatsuiroMatsuri: `新·夏色祭`,\r\n            re_huxi1: `恋上`,\r\n            re_huxi1_info: `当你不因此技能获得牌后，你可以与一名本回合未『恋上』过的角色交换一张手牌。然后若你获得了红色牌，你摸一张牌，使用的下一张【杀】不计入次数。`,\r\n            re_AkaiHaato: `新·赤井心`,\r\n            xinchixin: `赤心`,\r\n            xinchixin_info: `当牌进入弃牌堆时，若其中有本回合未以此技能获得的♥牌，你可以获得其中一张红色牌；或将其中任意张牌以任意顺序置于牌堆顶。`,\r\n            xinchixin_append: lib.figurer(`特性：回收关键牌`),\r\n            re_NakiriAyame: `新·百鬼绫目`,\r\n            guiren: `鬼刃`,\r\n            guiren_info: `你可以将两张颜色不同的牌当做一张不计入次数的【杀】使用，若被抵消，你可以收回之并结束此阶段；若造成伤害，根据你转化牌包含的类型获得对应效果：基本~指定此伤害的属性；锦囊~获得目标一张牌；装备~此【杀】伤害+1。`,\r\n            guiren_append: lib.figurer(`特性：易上手`),\r\n            re_MurasakiShion: `新·紫咲诗音`,\r\n            anshu: `暗术`,\r\n            anshu_info: `其他角色的回合结束时，若其手牌数不小于你，你可对其使用一张牌。且若此牌为♠，此牌不可被其响应。`,\r\n            xingchi: `醒迟`,\r\n            xingchi_info: `其他角色每回合使用的第一张牌不能指定你为目标。当你获得牌后，若你的手牌数：大于手牌上限，你可以将一张牌当【杀】使用；不大于手牌上限，你摸两张牌，然后本回合不再触发此项。`,\r\n            re_UsadaPekora: `新·兔田佩克拉`,\r\n            qiangyun: `强运`,\r\n            qiangyun_info: `你的判定牌生效前，你可以打出一张牌代替之，然后你可以立即使用打出牌，且此牌造成伤害后，你摸一张牌。`,\r\n            tuquan: `兔拳`,\r\n            tuquan_info: `锁定技 你的【杀】被【闪】抵消时，你进行判定，若为♠，你弃置目标一张牌，若为♥，你弃置一张牌。`,\r\n            re_UruhaRushia: `新·润羽露西娅`,\r\n            juebi: `绝壁`,\r\n            juebi_info: `在你未受到伤害的回合内，你可以将非基本牌当【闪】使用或打出；你受到伤害后，可以令本回合下一次造成的伤害+1。`,\r\n            zhanhou: `战吼`,\r\n            zhanhou_info: `出牌阶段开始时/其他角色阵亡时，你可以受到1点无来源的伤害/回复1点体力，视为使用一张【顺手牵羊】。`,\r\n            zhanhou_append: lib.figurer(`特性：易上手`),\r\n            re_SpadeEcho: `新·黑桃影`,\r\n            qinglve: `轻掠`,\r\n            qinglve_info: `出牌阶段限一次，你可以废除一个装备栏，视为使用一张【顺手牵羊】。你的手牌上限和攻击范围始终增加你废除装备栏之数。`,\r\n            yingshi: `影逝`,\r\n            yingshi_info: `你可以将♣️牌当做最近进入弃牌堆的非♣️基本牌使用或打出。`,\r\n            re_ŌzoraSubaru: `新·大空昴`,\r\n            cejing: `策竞`,\r\n            cejing_info: `一名角色的回合结束时，若其于此回合未造成伤害，你可以弃一张牌令其执行一个指定的额外阶段。此阶段结束时，你与其各摸等同本阶段造成伤害数的牌，若未因此摸牌，本轮此技能失效。`,\r\n            cejing_append: lib.figurer(`特性：辅助`),\r\n            re_TsunomakiWatame: `新·角卷绵芽`,\r\n            re_XiaoxiXiaotao: `新·小希小桃`,\r\n            re_doupeng: `逗捧`,\r\n            re_doupeng_info: `出牌阶段限一次，你可以与一名其他角色拼点，赢的角色摸两张牌，没赢的角色可以令赢的角色回复1点体力。`,\r\n            re_xuyan: `虚研`,\r\n            re_xuyan_info: `结束阶段，你可以选择一名其他角色；你下个回合开始时，若该角色在此期间造成过伤害，你摸一张牌。否则你与一名角色各失去1点体力。`,\r\n            re_InuyamaTamaki: `新·犬山玉姬`,\r\n            re_hundunliandong: `混联`,\r\n            re_hundunliandong_info: `出牌阶段限一次，你可以令任意势力不相同的角色各弃置一张牌。此技能计算势力时，有「homolive」标记的角色视为同势力。`,\r\n            re_hundunliandong_append: lib.figurer(`特性：强制弃牌`),\r\n            re_KaguraMea: `新·神乐めあ`,\r\n            fengna: `奉纳`,\r\n            fengna_info: `出牌阶段限一次，你可以令手牌数大于你的角色依次交给你一张牌。`,\r\n            fengna_append: lib.figurer(`特性：高嘲讽`),\r\n            re_xiaoyan: `嚣言`,\r\n            re_xiaoyan_info: `锁定技 你对手牌数小于你的角色使用牌不可被响应。`,\r\n            re_OtomeOto: `新·乙女音`,\r\n            re_yuxia: `龙箱`,\r\n            re_yuxia_info: `每回合限一次，你可以将三张牌当作一张通常锦囊牌使用，此牌点数视为这些牌的合计。然后，你可以将其中一张置于牌堆顶。`,\r\n            hanyin: `瀚音`,\r\n            hanyin_info: `你使用牌被点数小于之的牌响应或抵消时，摸一张牌。`,\r\n            re_HisekiErio: `新·绯赤艾莉欧`,\r\n            re_huange: `幻歌`,\r\n            re_huange_info: `轮次技 一个回合开始时，你可以摸等同一名角色体力值的牌，然后于回合结束时，弃置等同于该角色当前体力值的牌。`,\r\n            re_huange_append: lib.figurer(`特性：易上手`),\r\n            re_HanazonoSerena: `新·花園セレナ`,\r\n            re_jiumao: `啾猫`,\r\n            re_jiumao_info: `其他角色于弃牌阶段开始时，可以交给你任意张手牌；然后若你的手牌数与其相等，你可以于此阶段结束时使用一张牌，且此牌额外结算一次。`,\r\n            re_enfan: `恩返`,\r\n            re_enfan_info: `其他角色进入濒死状态时，你可以交给其任意张牌，然后其弃置任意张牌。若因此弃置的牌包含所有类型，其回复1点体力；若包含所有颜色，你与其各摸一张牌。`,\r\n            re_ŌokamiMio: `新·大神澪`,\r\n            re_yuzhan: `预占`,\r\n            re_yuzhan_info: `出牌阶段限一次，你可以观看牌堆顶的四张牌，若有两对颜色相同，你令当前回合角色获得其中一对，若不为你，你获得另一对。然后你将剩余牌以任意顺序置于牌堆顶或牌堆底。`,\r\n            re_bizuo: `弼佐`,\r\n            re_bizuo_info: `轮次技 一名角色的回合开始时，你可以将任意张牌置于牌堆顶，其本回合使用这些牌时，你可以发动一次『预占』。`,\r\n            re_DoumyoujiHaruto: `新·道明寺晴翔`,\r\n            shengfu: `胜负`,\r\n            shengfu_info: `每轮每项限一次，当你需要使用【决斗】/【无懈可击】时，你可以与目标/来源拼点，赢则视为使用之，没赢则不能使用牌直到回合结束。你的拼点牌亮出后，你可以令一方收回黑色拼点牌，改用牌堆顶牌代替。`,\r\n            shengfu_append: lib.figurer(`特性：无损拼点`),\r\n            wanbi: `完璧`,\r\n            wanbi_info: `当你抵消其他角色的牌后，若其手牌数不小于你，你可以获得被抵消的牌。`,\r\n            re_ShigureUi: `新·时雨羽衣`,\r\n            uijieyuan: `结缘`,\r\n            uijieyuan_info: `出牌阶段限一次，你可以将两张红色牌当【远交近攻】使用，若对本回合手牌数变化过的角色使用，则改为用一张非基本牌以转化。`,\r\n            huixiang: `绘象`,\r\n            huixiang_equip: `绘象`,\r\n            huixiang_info: `出牌阶段或结束阶段，你可以选择场上的一张非宝物装备牌并交给拥有者一张牌，若你对应装备栏没有牌，你视为装备之直到下次发动此技能。被选择的装备进入弃牌堆时，你摸一张牌。`,\r\n            huixiang_append: lib.figurer(`特性：难上手`),\r\n            re_AZKi: `新·AZKi`,\r\n            WHiTE: `WHiTE`,\r\n            WHiTE_info: `当你受到伤害后，你可以观看来源的手牌并声明一种花色，其无法使用、打出或弃置该花色的牌直到回合结束。`,\r\n            BLacK: `BLacK`,\r\n            BLacK_info: `出牌阶段限一次，你可以指定一名其他角色，然后观看牌堆顶X张牌并用其中一张与其拼点，赢的角色对没赢的角色使用拼点牌。（X为目标体力值）`,\r\n            re_Kano: `新·鹿乃`,\r\n            shiguang: `失光`,\r\n            shiguang_info: `当你造成/受到伤害后，你可以令另一名角色回复等量体力/受到等量同来源伤害。然后下个回合开始时，其失去等量体力/回复等量体力。`,\r\n            re_HanamaruHareru: `新·花丸晴琉`,\r\n            rangran: `昂然`,\r\n            rangran_info: `你使用牌可指定本回合未以此法指定过的场上体力最多角色为额外目标。场上体力最多的角色受到属性伤害后，你摸一张牌。`,\r\n            jiazhao: `佳朝`,\r\n            jiazhao_info: `当一名角色受到伤害后，你可以令其摸一张牌，若其体力值为全场最少，额外摸一张。然后其回合开始时弃置因此获得的牌。`,\r\n            re_ShirakamiHaruka: `新·白神遥`,\r\n            zhenbao: `心灵震豹`,\r\n            zhenbao_info: `当你一次性弃置两张或更多的牌后，你可以令一名判定区没有牌的角色选择其中一张置于其判定区。`,\r\n            heimo: `黑魔唤醒`,\r\n            heimo_info: `当你受到伤害后，你可以弃置任意张牌并进行等量次判定。若判定结果中有黑色牌，你对来源造成1点伤害；若有红色牌，你摸两张牌。`,\r\n            heimo_append: lib.figurer(`特性：卖血`),\r\n        }\r\n    };\r\n});\r\n\n\n//# sourceURL=webpack:///./character/Beginner.ts?")},"./character/clubs.ts":()=>{eval("\r\nwindow.game.import('character', function (lib, game, ui, get, ai, _status) {\r\n    let Evt;\r\n    return {\r\n        name: 'clubs',\r\n        connect: true,\r\n        character: {\r\n            KaguraMea: ['female', 'kagura', 4, ['luecai', 'xiaoyan']],\r\n            YaotomeNoe: ['female', 'kagura', 4, ['huiyuan', 'suoshi']],\r\n            Ciyana: ['female', 'qun', 3, ['yankui', 'danyan']],\r\n            NekomiyaHinata: ['female', 'qun', 3, ['yuchong', 'songzang', 'zhimao']],\r\n            XiaDi: ['male', 'qun', 4, ['yinliu', 'dunzou']],\r\n            Nekomasu: ['female', 'qun', 3, ['milijianying', 'dianyinchuancheng']],\r\n            Eilene: ['female', 'eilene', 4, ['daimeng', 'changsheng'], ['zhu']],\r\n            Yomemi: ['female', 'eilene', 3, ['mokuai', 'yaoji']],\r\n            Moemi: ['female', 'eilene', 4, ['chengzhang', 'mengdong']],\r\n            NatsumiMoe: ['female', 'eilene', 4, ['moemanyi', 'cuchuan'], ['yingV']],\r\n            ShizukuLulu: ['female', 'qun', 3, ['duixian', 'gutai']],\r\n            Paryi: ['male', 'paryi', 4, ['tiantang', 'haoren'], ['doublegroup:paryi:qun']],\r\n            TakatsukiRitsu: ['female', 'paryi', 3, ['shengya', 'liangshan', 'chongshi']],\r\n            MorinagaMiu: ['female', 'paryi', 3, ['guanzhai', 'zhishu']],\r\n            OtomeOto: ['female', 'paryi', 3, ['yuxia', 'lianjue', 'changxiang'], ['zhu']],\r\n            HisekiErio: ['female', 'paryi', 4, ['huange', 'qishi', 'yongtuan'], ['zhu']],\r\n            HanazonoSerena: ['female', 'paryi', 4, ['jiumao', 'enfan', 'shiqi'], ['zhu']],\r\n            KaguraNana: ['female', 'qun', 3, ['DDzhanshou', 'xinluezhili'], ['zhu', 'doublegroup:qun:holo:paryi']],\r\n            MashiroKanon: ['female', 'paryi', 3, ['chenzhu', 'yutuo']],\r\n            HosimiyaSio: ['female', 'qun', 4, ['yuanyao', 'gongni'],],\r\n            Hiiro: ['female', 'Providence', 4, ['jiace', 'xiangying'], ['yingV']],\r\n            NecoraNyaru: ['female', 'qun', 3, ['miaolu', 'benglei'],],\r\n            Merry: ['female', 'qun', 4, ['qinhuo', 'lvecao', 'yangxi'], ['guoV']],\r\n            Umy: ['female', 'qun', 4, ['naisi', 'tuzai', 'wuneng'], ['guoV']],\r\n            bingtang: ['female', 'xuyan', 4, ['xiou'], ['guoV']],\r\n            zhangjinghua: ['male', 'qun', 3, ['xiemen', 'jiai']],\r\n            NoiR: ['female', 'qun', 3, ['mozouqiyin', 'budingpaidui']],\r\n            Bafuko: ['female', 'qun', 4, ['shangsheng', 'jinghua']],\r\n            HinataCocomi: ['female', 'qun', 4, ['qijian', 'yizhan', 'jushi'], ['zhu']],\r\n            ShikaiYue: ['female', 'qun', 3, ['lianyin', 'guixiang'], ['doublegroup:qun:xuyan']],\r\n            KamikiHasami: ['female', 'qun', 4, ['quzhuan', 'yuanjiu'],],\r\n            KurokiriAria: ['female', 'qun', 4, ['xuanying', 'houfan'],],\r\n            Zaodaoji: ['female', 'chaos', 4, ['guangan', 'lanxuan', 'zonghe'], ['zhu', 'guoV']],\r\n            Niuniuzi: ['female', 'chaos', 4, ['qiying', 'hengxuan'], ['guoV']],\r\n            Miqiutu: ['female', 'VirtuaReal', 4, ['zhazong', 'mengnan'], ['guoV']],\r\n            mibai: ['female', 'RedC', 4, ['zhepie', 'chumo'], ['guoV']],\r\n            Ahab: ['female', 'RedC', 4, ['ahbingyi', 'sujian'], ['guoV']],\r\n            UsakiNono: ['female', 'ego', 4, ['tuhui', 'fuyou'], ['guoV']],\r\n            Rynia: ['female', 'ego', 4, ['yinxu'], ['guoV']],\r\n            Nyanners: ['female', 'vshojo', 3, ['shenghuo', 'dipo', 'miaoche'], ['zhu', 'yingV']],\r\n            Veibae: ['female', 'vshojo', 4, ['zhexun', 'yuci'], ['yingV']],\r\n            Ironmouse: ['female', 'vshojo', 3, ['haosun', 'banmao'], ['yingV']],\r\n            Froot: ['female', 'vshojo', 4, ['exiao', 'jinmei'], ['yingV']],\r\n            Silvervale: ['female', 'vshojo', 4, ['yingling', 'duchun'], ['yingV']],\r\n        },\r\n        characterSort: {\r\n            clubs: {\r\n                paryi2: ['Paryi', 'TakatsukiRitsu', 'MorinagaMiu', 'HanazonoSerena', 'OtomeOto', 'HisekiErio', 'MashiroKanon'],\r\n                vshojo2: ['Nyanners', 'Veibae', 'Ironmouse', 'Froot'],\r\n                MeUmy: ['Merry', 'Umy'],\r\n            }\r\n        },\r\n        characterTitle: {\r\n            OtomeOto: '#pChucolala',\r\n            HisekiErio: '#pChucolala',\r\n            MashiroKanon: '#pChucolala',\r\n            HayamiSaki: '#gChobits-live',\r\n            KiyoInga: '#gChobits-live',\r\n        },\r\n        characterReplace: {\r\n            NekomiyaHinata: ['re_NekomiyaHinata', 'NekomiyaHinata'],\r\n            KaguraNana: ['re_KaguraNana', 'KaguraNana'],\r\n            Siro: ['re_Siro', 'Siro'],\r\n            Nekomasu: ['re_Nekomasu', 'Nekomasu'],\r\n            XiaDi: ['re_XiaDi', 'XiaDi'],\r\n            KaguraMea: ['re_KaguraMea', 'KaguraMea', 'sp_KaguraMea'],\r\n            OtomeOto: ['re_OtomeOto', 'OtomeOto'],\r\n            HisekiErio: ['re_HisekiErio', 'HisekiErio'],\r\n            HanazonoSerena: ['re_HanazonoSerena', 'HanazonoSerena', 'old_HanazonoSerena'],\r\n            HosimiyaSio: ['HosimiyaSio', 'sea_HosimiyaSio', 'star_HosimiyaSio'],\r\n            Eilene: ['Eilene', 'old_Eilene'],\r\n        },\r\n        characterIntro: {\r\n            Paryi: '帕里，巴蜀富豪者也，累世公卿，广散金帛，养士三千，昔绊爱首义，左右劝帕里图之，帕里由此建国，聚诸奇士建国帕里破一期，天时地利人和皆不顺，诸士心皆背，P家无疾而终，帕里亦败走青城，后党锢事泄，杏国树倒猴散，P家有团长绯赤艾利欧接连败诸侯，中兴P家，OTO、古守血遊等士亦借此征战，P家之势渐盛。',\r\n            OtomeOto: 'oto者，名歌姬也，曾学于教坊司，能歌善舞，以《初音未来的消失》之传说名曲惊煞一众善才，后烽烟四起，oto批皮入V界，人情炎凉，难以经营，如此经年，后杏溃败，oto喃喃自言曰：好风凭借力，送我上青云。有友曰绯赤艾利欧，两人相持生活数十年，V始二十年，杏礼崩乐坏，团长尽收杏社之地，亲迎oto，oto亦欣然前往，paryi系重归荣光，此二人先导也。',\r\n            TakatsukiRitsu: '阿律者，帕里之衙内也，清楚三铳士之一，以超美丽3d与烂活闻名，常联动yyut，一日律问直播间观众爱者，众人皆曰yyut，律遂破防光速下播，杏溃败后，众v皆如终获青天，有欣欣向荣之势，独律未增半分，郁郁寡欢，此后毕业之，是矣，烂活可供一时，可供一世乎？',\r\n            KaguraMea: '神乐咩者，东瀛之歌女也，迫于生计西来中原，有《money》、《你好我很可爱》之名曲流传世间，咩性格直爽，以此获众拥簇，却亦因此惹祸上身，V始二十二年，西都陷落，咩于京畿聚众建国，国号曰咩，定元咩啊元年，与杏虹分庭抗礼。',\r\n            KaguraNana: \"神乐七奈（V始三年），蜀郡唐辛人也，尤善丹青，图写特妙，元昭重之，V始三年，诞女百鬼绫目，益州牧帕里既败，七奈自修同族聚众起兵，拥者百万。谚曰，多言必失，是矣！七奈失言为中原诸侯所恶，蜀地之人亦仇中原，如此至今。\",\r\n            Siro: \"siro（V始二年），字小白，别号电脑少女，母孕时梦海豚入怀，小白诞即能言，孩提之时即多识胡语，尤善海豚之言，既加冠，应召入宫，拜左将军V海豚候领幽州牧，善骑射，有神弓曰AKM，军中皆呼战神。\",\r\n            HanazonoSerena: \"花园sarena者（V始三年），青城之猫灵也，清楚三铳士之一，为报帕里之恩追随之，虽体弱多病然擅行刺，V始三年，以松饼鸩杀汉中太守，帕里pro遂建国巴蜀，花园猫不谙世事，常为好事者钓之。V始九年，朝廷出兵百万击巴蜀，大破蜀军，花园猫身中数刀，仍负帕里逃出益州，复还青城，人不知所踪。\",\r\n            XiaDi: '下地者，V8之健将也，自群雄并起，囚人草莽之徒自成一国，名曰V8，V8奉绅宝为主，总领V8事宜，次年勒夫以鸩杀之，夺绅宝之权，下地作丹青《不要以为这样就赢了》缅之，领自家军离V8，后为勒夫击，大败，遁于江城。',\r\n            Nekomasu: '狐叔者，原国相也，屡谏朝廷，针砭时弊，谗人间之，放于巴蜀，巴蜀有奇人曰野良喵，叔与野良一见如故，尝与青城饮之，后绊爱起义，屡请狐叔，狐叔自认忠于朝廷，屡拒之，叔素修黄帝之道，善养生之经，建宗“养生”，后日竟成第一宗。',\r\n            NekomiyaHinata: '猫宫日向者，游侠也，尤善射术，有“飞将”之称，以一人一枪往艾伦格百次余，屠者以千计，日向好游戏，性天然，行事率真常为联动对象捉弄，节目效果斐然，日向家境贫寒，尚不能备衣物，以塑料袋蔽身，为邻人笑，邻人有九石玉、隐神木荫者素与日向交好，昔绊爱首义，日向与玉、木荫筹划建国，后为小人所泄，破之，日向遁于江湖，转个人势，与玉、木荫经营。',\r\n        },\r\n        skill: {\r\n            mokuai: {\r\n                mod: {\r\n                    selectTarget(card, player, range) {\r\n                        if (get.name(card) == 'sha')\r\n                            range[1] = Math.floor(player.countCards('e')) || 1;\r\n                    },\r\n                },\r\n                forced: true,\r\n                priority: 220,\r\n                trigger: { player: 'recoverBegin' },\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                content() {\r\n                    trigger.num = player.countCards('e') || 1;\r\n                },\r\n            },\r\n            yaoji: {\r\n                audio: 3,\r\n                audioname: ['jike'],\r\n                enable: \"phaseUse\",\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') > 0;\r\n                },\r\n                filterCard(card) {\r\n                    for (var i = 0; i < ui.selected.cards.length; i++) {\r\n                        if (get.type2(card) == get.type2(ui.selected.cards[i]))\r\n                            return false;\r\n                    }\r\n                    return true;\r\n                },\r\n                check(card) {\r\n                    if (ui.selected.cards.length)\r\n                        return 4 - get.value(card);\r\n                    return 6 - get.value(card);\r\n                },\r\n                complexCard: true,\r\n                selectCard: [1, Infinity],\r\n                position: 'he',\r\n                filterTarget(card, player, target) {\r\n                    return target != player;\r\n                },\r\n                selectTarget() {\r\n                    var player = _status.event.player;\r\n                    if (!player.hasSkill('mokuai'))\r\n                        return 1;\r\n                    var min = 1;\r\n                    var max = Math.floor(player.countCards('e')) || 1;\r\n                    return [min, max];\r\n                },\r\n                discard: true,\r\n                multitarget: true,\r\n                content: [function () {\r\n                        Evt.targs = targets.slice(0);\r\n                        var type = [];\r\n                        for (var i = 0; i < cards.length; i++) {\r\n                            type.add(get.type2(cards[i], cards[i].original == 'h' ? player : false));\r\n                        }\r\n                        var num = type.length;\r\n                        var cards = get.cards(num);\r\n                        player.showCards(cards, '致命药剂亮出牌堆');\r\n                        var suits = [];\r\n                        for (var i = 0; i < cards.length; i++) {\r\n                            suits.push(get.suit(cards[i]));\r\n                        }\r\n                        Evt.suits = suits;\r\n                        game.cardsGotoOrdering(cards);\r\n                    }, function () {\r\n                        Evt.targ = Evt.targs.shift();\r\n                        var suits = Evt.suits;\r\n                        var next = Evt.targ.chooseToDiscard(\"弃置与亮出牌花色和数量（\" + get.translation(suits) + \"）相同的牌\", 'he');\r\n                        next.set('selectCard', suits.length);\r\n                        next.set('complexCard', true);\r\n                        next.set('suits', suits);\r\n                        next.set('filterCard', card => {\r\n                            var suits = _status.event.suits;\r\n                            if (ui.selected.cards.length) {\r\n                                return get.suit(card) == suits[ui.selected.cards.length];\r\n                            }\r\n                            else {\r\n                                return get.suit(card) == suits[0];\r\n                            }\r\n                        });\r\n                        next.set('ai', card => {\r\n                            return 8 - get.useful(card);\r\n                        });\r\n                        next.autochoose = function () {\r\n                            return this.player.countCards('he') == 0;\r\n                        };\r\n                    }, function () {\r\n                        if (!result.cards || result.cards.length < _status.event.suits.length) {\r\n                            Evt.targ.damage('player', 'nocard');\r\n                        }\r\n                        if (Evt.targs.length)\r\n                            Evt.goto(1);\r\n                    }],\r\n                ai: {\r\n                    order: 2, result: {\r\n                        target(player, target) {\r\n                            if (target.hasSkill('shenyou'))\r\n                                return 0;\r\n                            return get.damageEffect(target, player, target);\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            daimeng: {\r\n                audio: 3,\r\n                enable: 'phaseUse',\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [1, 2, 3, 4];\r\n                },\r\n                filter(Evt, player) {\r\n                    if (!player.storage.daimeng)\r\n                        return false;\r\n                    for (var i of player.storage.daimeng) {\r\n                        if (!game.hasPlayer(function (cur) {\r\n                            return cur.countCards('h') >= (player.countCards('h') + i);\r\n                        }))\r\n                            return true;\r\n                    }\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.videoId = lib.status.videoId++;\r\n                    var numberlist = [];\r\n                    for (var i of player.storage.daimeng) {\r\n                        var c = get.cnNumber(i);\r\n                        numberlist.push(['', i, c, i, 'div3']);\r\n                    }\r\n                    game.broadcastAll(function (id, numberlist) {\r\n                        var dialog = ui.create.dialog('『贷梦』 选择摸牌：');\r\n                        dialog.addText('张数');\r\n                        dialog.add([numberlist, 'vcard']);\r\n                        dialog.videoId = id;\r\n                    }, Evt.videoId, numberlist);\r\n                    'step 1';\r\n                    var next = player.chooseButton(true);\r\n                    next.set('dialog', Evt.videoId);\r\n                    next.set('filterButton', function (button) {\r\n                        var now = button.link;\r\n                        var player = _status.event.player;\r\n                        return !game.hasPlayer(function (cur) {\r\n                            return cur.countCards('h') >= (player.countCards('h') + now[1]);\r\n                        });\r\n                    });\r\n                    'step 2';\r\n                    game.broadcastAll('closeDialog', Evt.videoId);\r\n                    if (result.bool) {\r\n                        Evt.num = result.links[0][1];\r\n                        player.storage.daimeng.remove(Evt.num);\r\n                        player.draw(Evt.num);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 3';\r\n                    switch (Evt.num) {\r\n                        case 1:\r\n                            player.recover();\r\n                            break;\r\n                        case 2:\r\n                            player.link(true);\r\n                            break;\r\n                        case 3:\r\n                            player.turnOver();\r\n                            break;\r\n                        case 4:\r\n                            {\r\n                                var evt = _status.event.getParent('phaseUse');\r\n                                if ((evt === null || evt === void 0 ? void 0 : evt.name) == 'phaseUse') {\r\n                                    evt.skipped = true;\r\n                                }\r\n                            }\r\n                            break;\r\n                    }\r\n                },\r\n                intro: {\r\n                    content: '已摸$张牌'\r\n                },\r\n                ai: {\r\n                    order: 7,\r\n                    result: {\r\n                        player(player, target) {\r\n                            if (player.needsToDiscard() && player.storage.daimeng[0] == 4)\r\n                                return -1;\r\n                            return 1;\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            changsheng: {\r\n                unique: true,\r\n                skillAnimation: true,\r\n                animationColor: 'fire',\r\n                trigger: { player: 'dying' },\r\n                priority: 10,\r\n                filter(Evt, player) {\r\n                    return player.hp < 3 && player.storage.changsheng != 'over';\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    'step 0';\r\n                    player.discard(player.getCards('hej'));\r\n                    player.recover(3 - player.hp);\r\n                    'step 1';\r\n                    if (player.storage.daimeng.length != 4) {\r\n                        var next = game.createEvent('resetSkill');\r\n                        [next.player, next.resetSkill] = [player, 'daimeng'];\r\n                        next.setContent(function () {\r\n                            player.popup('重置');\r\n                            player.storage.daimeng = [1, 2, 3, 4];\r\n                        });\r\n                    }\r\n                    'step 2';\r\n                    player.storage.changsheng = 'over';\r\n                    player.awakenSkill('changsheng');\r\n                    trigger.player.addTempSkill('changsheng_diao', 'none');\r\n                    game.broadcastAll(function (splayer) {\r\n                        splayer.out('changsheng_diao');\r\n                    }, trigger.player);\r\n                },\r\n                involve: 'daimeng',\r\n                subSkill: {\r\n                    diao: {\r\n                        trigger: { global: ['phaseAfter', 'turnOverAfter'] },\r\n                        mark: true,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            if (Evt.player.next !== player) {\r\n                                return false;\r\n                            }\r\n                            else if (Evt.name == 'turnOver' && Evt.player.isTurnedOver()) {\r\n                                return false;\r\n                            }\r\n                            else if (Evt.name == 'turnOver' && Evt.player != _status.currentPhase) {\r\n                                return false;\r\n                            }\r\n                            else {\r\n                                game.broadcastAll(function (splayer) {\r\n                                    splayer.in('changsheng_diao');\r\n                                }, player);\r\n                            }\r\n                            return true;\r\n                        },\r\n                        intro: {\r\n                            content: '移除游戏外'\r\n                        },\r\n                        content() {\r\n                            game.broadcastAll(function (splayer) {\r\n                                _status.dying.remove(splayer);\r\n                            }, player);\r\n                            player.removeSkill('changsheng_diao');\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            yuchong: {\r\n                audio: 2,\r\n                group: ['yuchong_unbeDis', 'yuchong_unRes'],\r\n                subSkill: {\r\n                    unbeDis: {\r\n                        mod: {\r\n                            canBeDiscarded(card, player, target, name, now) {\r\n                                if (get.subtype(card) == 'equip1') {\r\n                                    return false;\r\n                                }\r\n                            },\r\n                        }\r\n                    },\r\n                    unRes: {\r\n                        audio: 'yuchong',\r\n                        mod: {\r\n                            cardname(card, player) {\r\n                                if (player.getEquip(1)) {\r\n                                    if (get.subtype(card) == 'equip1') {\r\n                                        return 'sha';\r\n                                    }\r\n                                }\r\n                            },\r\n                        },\r\n                        trigger: { player: 'useCard1' },\r\n                        firstDo: true,\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            if (!player.getEquip(1))\r\n                                return false;\r\n                            return get.subtype(Evt.cards[0]) == 'equip1';\r\n                        },\r\n                        content() {\r\n                            if (trigger.addCount !== false) {\r\n                                trigger.addCount = false;\r\n                                var stat = player.getStat();\r\n                                if (stat && stat.card && stat.card[trigger.card.name])\r\n                                    stat.card[trigger.card.name]--;\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            songzang: {\r\n                audio: 2,\r\n                trigger: { player: 'useCardToPlayered' },\r\n                priority: 8,\r\n                filter(Evt, player) {\r\n                    return Evt.card.name == 'sha' && !(Evt.target.maxHp / 2 < Evt.target.hp);\r\n                },\r\n                logTarget: 'target',\r\n                content() {\r\n                    trigger.getParent().songzang_buffed = true;\r\n                    trigger.getParent().baseDamage++;\r\n                    trigger.target.addTempSkill('songzang2');\r\n                    trigger.target.addTempSkill('songzang4');\r\n                    trigger.target.storage.songzang2.add(trigger.card);\r\n                },\r\n                ai: {\r\n                    damageBonus: true,\r\n                    skillTagFilter(player, tag, arg) {\r\n                        if (!arg || !arg.card || !get.tag(arg.card, 'damage')) {\r\n                            return arg.card.name == 'sha' && !(arg.target.maxHp / 2 < arg.target.hp);\r\n                        }\r\n                    },\r\n                    effect: {\r\n                        player(card, player, target, current) {\r\n                            if (card.name == 'sha' && current < 0)\r\n                                return 0.5;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            songzang2: {\r\n                firstDo: true,\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                onremove: true,\r\n                trigger: {\r\n                    player: ['damage', 'damageCancelled', 'damageZero'],\r\n                    target: ['shaMiss', 'useCardToExcluded'],\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.storage.songzang2 && Evt.card && player.storage.songzang2.contains(Evt.card);\r\n                },\r\n                silent: true,\r\n                forced: true,\r\n                popup: false,\r\n                priority: 12,\r\n                content() {\r\n                    player.storage.songzang2.remove(trigger.card);\r\n                    if (!player.storage.songzang2.length)\r\n                        player.removeSkill('songzang2');\r\n                },\r\n            },\r\n            songzang3: {\r\n                mod: {\r\n                    cardSavable(card) {\r\n                        if (card.name == 'tao')\r\n                            return false;\r\n                    },\r\n                },\r\n            },\r\n            songzang4: {\r\n                trigger: { player: 'dyingBegin' },\r\n                forced: true,\r\n                silent: true,\r\n                firstDo: true,\r\n                filter(Evt, player) {\r\n                    return Evt.getParent(2).songzang_buffed == true;\r\n                },\r\n                content() {\r\n                    player.addTempSkill('songzang3', { global: ['dyingEnd', 'phaseEnd'] });\r\n                },\r\n            },\r\n            zhimao: {\r\n                trigger: { target: 'useCardToBegin' },\r\n                priority: 15,\r\n                filter(Evt, player) {\r\n                    if (!Evt.player || Evt.player == player)\r\n                        return false;\r\n                    if (get.distance(Evt.player, player, 'pure') == 1)\r\n                        return false;\r\n                    return (get.type(Evt.card) == 'trick');\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var target = trigger.player;\r\n                    if (target.getEquip(1)) {\r\n                        player.chooseControlList(['取消之并抽一张牌',\r\n                            '获得' + get.translation(target) + '的武器牌，视为对其使用【杀】'], true, function (Evt, player) {\r\n                            return _status.event.index;\r\n                        });\r\n                    }\r\n                    else {\r\n                        player.draw();\r\n                        trigger.cancel();\r\n                    }\r\n                    'step 1';\r\n                    var target = trigger.player;\r\n                    if (result.index == 1) {\r\n                        player.line(target);\r\n                        player.gain(target.getEquip(1), target, 'give', 'bySelf');\r\n                        player.useCard({ name: 'sha', isCard: false }, target).animate = false;\r\n                    }\r\n                    else if (result.index == 0) {\r\n                        player.draw();\r\n                        trigger.cancel();\r\n                    }\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (get.type(card, 'trick') == 'trick' && get.distance(player, target, 'pure') > 1)\r\n                                return 'zeroplayertarget';\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            duixian: {\r\n                trigger: { player: 'useCardToPlayer', target: 'useCardToPlayer' },\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return get.name(Evt.card) == 'sha';\r\n                },\r\n                check(Evt, player) {\r\n                    return Evt.target == player || !Evt.target.hasSkillTag('notrick');\r\n                },\r\n                prompt2(Evt, player) {\r\n                    return '你可将' + (Evt.player == player ? '你' : get.translation(Evt.player)) + '使用的' + get.translation(Evt.card) + '改为【决斗】';\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    if (!trigger.getParent().addedSkill)\r\n                        trigger.getParent().addedSkill = [];\r\n                    trigger.getParent().addedSkill.add('duixian');\r\n                    'step 1';\r\n                    trigger.card.name = 'juedou';\r\n                    if (get.itemtype(trigger.card) == 'card') {\r\n                        var next = game.createEvent('duixian_clear');\r\n                        next.card = trigger.card;\r\n                        Evt.next.remove(next);\r\n                        trigger.after.push(next);\r\n                        next.setContent(function () {\r\n                            card.name = 'sha';\r\n                        });\r\n                    }\r\n                },\r\n                group: ['duixian_drawBy', 'duixian_disCard'],\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: { global: 'damageEnd' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return Evt.card && get.name(Evt.card) == 'juedou' && Evt.getParent(2).name == 'useCard' && Evt.getParent(2).addedSkill && Evt.getParent(2).addedSkill.contains('duixian') && Evt.player == player;\r\n                        },\r\n                        content() {\r\n                            player.draw(2);\r\n                        },\r\n                    },\r\n                    disCard: {\r\n                        trigger: { global: 'damage' },\r\n                        prompt2: '你可弃置对方一张牌',\r\n                        frequent: true,\r\n                        filter(Evt, player) {\r\n                            return Evt.card && get.name(Evt.card) == 'juedou' && Evt.getParent(2).name == 'useCard' && Evt.getParent(2).addedSkill && Evt.getParent(2).addedSkill.contains('duixian') && Evt.player != player && Evt.player.countCards('he');\r\n                        },\r\n                        content() {\r\n                            player.discardPlayerCard('###『守峡』###弃置对方一张牌', trigger.player, 'he');\r\n                        },\r\n                    }\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (get.name(card) == 'sha') {\r\n                                if (target.hasSha())\r\n                                    return [1, 0, 0, -2];\r\n                                if (target.hp == 1)\r\n                                    return [1, 0, 1, 0];\r\n                                return [1, 1, 0, -1];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            gutai: {\r\n                trigger: { global: 'damageEnd' },\r\n                filter(Evt, player) {\r\n                    if (Evt.player != player && Evt.getParent().player != player)\r\n                        return false;\r\n                    return Evt.card && Evt.getParent().name == Evt.card.name && Evt.getParent().targets.contains(Evt.player) && Evt.getParent().targets[Evt.getParent().targets.length - 1] != Evt.player;\r\n                },\r\n                check(Evt, player) {\r\n                    var shouxia = Evt.getParent().targets.splice(Evt.getParent().targets.indexOf(Evt.player));\r\n                    var effect = 0;\r\n                    for (var i = 0; i < shouxia.length; i++) {\r\n                        effect += get.effect(shouxia[i], Evt.card, Evt.getParent().player, player);\r\n                    }\r\n                    return effect < 0;\r\n                },\r\n                logTarget(Evt) {\r\n                    var targets = Evt.getParent().targets.slice(0);\r\n                    return targets.splice(targets.indexOf(Evt.player) + 1);\r\n                },\r\n                content() {\r\n                    trigger.getParent().targets.splice(trigger.getParent().targets.indexOf(trigger.player) + 1);\r\n                },\r\n            },\r\n            caibu: {\r\n                init(player) {\r\n                    if (!player.storage.caibu) {\r\n                        player.storage.caibu = [];\r\n                    }\r\n                },\r\n                locked: true,\r\n                notemp: true,\r\n                marktext: '财',\r\n                intro: {\r\n                    content: 'cards',\r\n                    onunmark(storage, player) {\r\n                        if (storage && storage.length) {\r\n                            player.$throw(storage, 1000);\r\n                            game.cardsDiscard(storage);\r\n                            game.log(storage, '被置入了弃牌堆');\r\n                            storage.length = 0;\r\n                        }\r\n                    },\r\n                },\r\n                cardAround: true\r\n            },\r\n            luecai: {\r\n                audio: 2,\r\n                group: ['caibu', 'luecai_draw'],\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filterTarget(card, player, target) {\r\n                    if (target.countCards('he') == 0 || target.countCards('h') == player.countCards('h'))\r\n                        return false;\r\n                    return true;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    if (target.countCards('h') > player.countCards('h')) {\r\n                        player.choosePlayerCard(target, 'he', true);\r\n                    }\r\n                    else if (target.countCards('h') < player.countCards('h')) {\r\n                        target.chooseCard('he', true);\r\n                    }\r\n                    'step 1';\r\n                    if (target.countCards('h') > player.countCards('h')) {\r\n                        Evt.card = result.links[0];\r\n                    }\r\n                    else if (target.countCards('h') < player.countCards('h')) {\r\n                        Evt.card = result.cards[0];\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        target.$give(Evt.card, player, false);\r\n                        target.lose(Evt.card, ui.special, 'toStorage');\r\n                        player.storage.caibu.push(Evt.card);\r\n                        player.syncStorage('caibu');\r\n                        player.markSkill('caibu');\r\n                        player.showCards(player.storage.caibu, '财布');\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 10,\r\n                    result: {\r\n                        target(player, target) {\r\n                            if (target.countCards('h') > player.countCards('h')) {\r\n                                return lib.card.shunshou_copy2.ai.result.target.apply(this, arguments);\r\n                            }\r\n                            else {\r\n                                return -1;\r\n                            }\r\n                        },\r\n                        player(player, target) {\r\n                            if (target.countCards('h') > player.countCards('h')) {\r\n                                return lib.card.shunshou_copy2.ai.result.player.apply(this, arguments);\r\n                            }\r\n                            else {\r\n                                return 1;\r\n                            }\r\n                        },\r\n                    },\r\n                    expose: 0.2,\r\n                    threaten: 1.1\r\n                },\r\n                subSkill: {\r\n                    draw: {\r\n                        trigger: {\r\n                            player: 'phaseBegin'\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return player.storage.caibu.length > 0;\r\n                        },\r\n                        silent: true,\r\n                        content() {\r\n                            'step 0';\r\n                            player.chooseCardButton(get.prompt('luecai') + '移去任意张财布', [1, Infinity], player.storage.caibu);\r\n                            'step 1';\r\n                            if (result.bool) {\r\n                                player.logSkill('luecai_draw');\r\n                                var cards = result.links;\r\n                                player.$throw(cards);\r\n                                game.cardsDiscard(cards);\r\n                                player.storage.caibu.removeArray(cards);\r\n                                player.syncStorage('caibu');\r\n                                player.draw(cards.length);\r\n                            }\r\n                            'step 2';\r\n                            if (!player.storage.caibu.length) {\r\n                                player.unmarkSkill('caibu');\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            xiaoyan: {\r\n                group: ['caibu', 'xiaoyan_res', 'xiaoyan_dam', 'xiaoyan_highlight', 'xiaoyan_clear'],\r\n                subSkill: {\r\n                    res: {\r\n                        direct: true,\r\n                        trigger: {\r\n                            player: \"useCard\",\r\n                        },\r\n                        content() {\r\n                            trigger.directHit.addArray(game.filterPlayer(function (cur) {\r\n                                return cur.countCards('h') < player.countCards('h');\r\n                            }));\r\n                        },\r\n                    },\r\n                    dam: {\r\n                        audio: 'xiaoyan',\r\n                        forced: true,\r\n                        trigger: {\r\n                            source: 'damageBegin1',\r\n                            player: 'damageBegin3'\r\n                        },\r\n                        firstDo: true,\r\n                        filter(Evt, player) {\r\n                            if (!Evt.card || !get.suit(Evt.card))\r\n                                return false;\r\n                            var chk = false;\r\n                            player.storage.caibu.forEach(function (c) {\r\n                                if (get.suit(c) == get.suit(Evt.card))\r\n                                    chk = true;\r\n                            });\r\n                            return chk;\r\n                        },\r\n                        content() {\r\n                            trigger.num++;\r\n                        },\r\n                        ai: {\r\n                            damageBonus: true,\r\n                            skillTagFilter(player, tag, arg) {\r\n                                if (!arg || !arg.card || !get.tag(arg.card, 'damage')) {\r\n                                    var chk = false;\r\n                                    player.storage.caibu.forEach(function (c) {\r\n                                        if (get.suit(c) == get.suit(arg.card))\r\n                                            chk = true;\r\n                                    });\r\n                                    return chk;\r\n                                }\r\n                            },\r\n                            effect: {\r\n                                target(card, player, target, current) {\r\n                                    if (get.tag(card, 'damage') && target.storage.caibu && target.storage.caibu.length) {\r\n                                        var chk = false;\r\n                                        target.storage.caibu.forEach(function (c) {\r\n                                            if (get.suit(c) == get.suit(card))\r\n                                                chk = true;\r\n                                        });\r\n                                        if (chk)\r\n                                            return [1, 0, 2, -1];\r\n                                    }\r\n                                },\r\n                                player(card, player, target, current) {\r\n                                    if (get.tag(card, 'damage') && player.storage.caibu && player.storage.caibu.length) {\r\n                                        var chk = false;\r\n                                        player.storage.caibu.forEach(function (c) {\r\n                                            if (get.suit(c) == get.suit(card))\r\n                                                chk = true;\r\n                                        });\r\n                                        if (chk)\r\n                                            return [1, 0, 2, -1];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    highlight: {\r\n                        direct: true,\r\n                        trigger: {\r\n                            player: 'useCardToPlayered',\r\n                            target: 'useCardToPlayered',\r\n                        },\r\n                        filter(Evt, player) {\r\n                            if (!Evt.card || !get.suit(Evt.card))\r\n                                return false;\r\n                            if (!get.tag(Evt.card, 'damage'))\r\n                                return false;\r\n                            var chk = false;\r\n                            player.storage.caibu.forEach(function (c) {\r\n                                if (get.suit(c) == get.suit(Evt.card))\r\n                                    chk = true;\r\n                            });\r\n                            return chk;\r\n                        },\r\n                        content() {\r\n                            var buff = trigger.player == player ? '.player_buff' : '.player_nerf';\r\n                            game.broadcastAll(function (player, buff) {\r\n                                player.node.xiaoyan = ui.create.div(buff, player.node.avatar);\r\n                                player.node.xiaoyan2 = ui.create.div(buff, player.node.avatar2);\r\n                            }, player, buff);\r\n                            game.delayx();\r\n                        }\r\n                    },\r\n                    clear: {\r\n                        direct: true,\r\n                        silent: true,\r\n                        trigger: {\r\n                            global: ['useCardAfter', 'respondAfter'],\r\n                        },\r\n                        content() {\r\n                            if (player.node.xiaoyan) {\r\n                                game.broadcastAll(function (player) {\r\n                                    player.node.xiaoyan.delete();\r\n                                    player.node.xiaoyan2.delete();\r\n                                    delete player.node.xiaoyan;\r\n                                    delete player.node.xiaoyan2;\r\n                                }, player);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            shiyilijia: {\r\n                audio: 2,\r\n                group: ['shiyilijia_draw'],\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                init(player) {\r\n                    if (player.storage.shiyilijia == undefined) {\r\n                        player.storage.shiyilijia = 0;\r\n                    }\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.countCards('h');\r\n                },\r\n                filterCard: lib.filter.cardDiscardable,\r\n                selectCard: -1,\r\n                check(card) {\r\n                    var player = _status.event.player;\r\n                    if (get.position(card) == 'h' && !player.countCards('h', card => get.value(card) >= 8)) {\r\n                        return 8 - get.value(card);\r\n                    }\r\n                    return 7 - get.value(card);\r\n                },\r\n                content() {\r\n                    player.storage.shiyilijia = cards.length;\r\n                    player.discard(cards);\r\n                },\r\n                mod: {\r\n                    aiOrder(player, card, num) {\r\n                        if (typeof card == 'object' && player == _status.currentPhase && get.name(card) == 'tao') {\r\n                            var damage = (player.maxHp - player.hp) * 2;\r\n                            return num + damage;\r\n                        }\r\n                    },\r\n                },\r\n                ai: { order: 4, result: { player: 1 } },\r\n                subSkill: {\r\n                    draw: {\r\n                        forced: true,\r\n                        trigger: {\r\n                            player: 'phaseEnd'\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return player.storage.shiyilijia;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            player.draw(player.storage.shiyilijia);\r\n                            'step 1';\r\n                            player.storage.shiyilijia = 0;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            seqinghuashen: {\r\n                audio: 2,\r\n                trigger: { global: 'useCardAfter' },\r\n                logTarget: 'player',\r\n                filter(Evt, player) {\r\n                    return Evt.card.name == 'tao'\r\n                        && Evt.player != player\r\n                        && get.itemtype(Evt.cards) == 'cards'\r\n                        && get.position(Evt.cards[0], true) == 'o';\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    trigger.player.draw(player);\r\n                    'step 1';\r\n                    var target = trigger.player;\r\n                    if (target.countGainableCards(player, 'he')) {\r\n                        player.gainPlayerCard('he', target, true);\r\n                    }\r\n                }\r\n            },\r\n            xinluezhili: {\r\n                unique: true,\r\n                zhuSkill: true,\r\n            },\r\n            DDzhanshou: {\r\n                audio: 3,\r\n                trigger: {\r\n                    player: 'useCard2'\r\n                },\r\n                direct: true,\r\n                log: false,\r\n                filter(Evt, player) {\r\n                    return Evt.targets && Evt.targets.length;\r\n                },\r\n                check(Evt, player) {\r\n                    return Evt.targets.filter(function (target) {\r\n                        if (get.attitude(_status.event.player, target) > 0 && target.countCards('h') <= 3)\r\n                            return true;\r\n                        if (get.attitude(_status.event.player, target) <= 0 && target.countCards('he') > 3)\r\n                            return false;\r\n                        return false;\r\n                    });\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseTarget(get.prompt2('DDzhanshou'), function (card, player, target) {\r\n                        return _status.event.targets.contains(target);\r\n                    }).set('ai', function (target) {\r\n                        if (get.attitude(_status.event.player, target) < 0 && target.countCards('h') == 0)\r\n                            return 0;\r\n                        if (get.attitude(_status.event.player, target) > 0 && target.countCards('h') <= 3)\r\n                            return 4 + get.attitude(_status.event.player, target);\r\n                        return 2 - get.attitude(_status.event.player, target);\r\n                    }).set('targets', trigger.targets);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.target = result.targets[0];\r\n                        if (player.hasZhuSkill('xinluezhili') && player != Evt.target) {\r\n                            Evt.target.addSkill('xinluezhili_draw');\r\n                        }\r\n                        var count = 0;\r\n                        if (Evt.target.countCards('h') >= player.countCards('h'))\r\n                            count++;\r\n                        if (Evt.target.hp >= player.hp)\r\n                            count++;\r\n                        if (Evt.target.countCards('e') >= player.countCards('e'))\r\n                            count++;\r\n                        player.choosePlayerCard(Evt.target, 'he', [1, count], \"移除至多\" + count + \"张牌\").set('ai', function (button) {\r\n                            var player = _status.event.player;\r\n                            var target = _status.event.target;\r\n                            var count = _status.event.count;\r\n                            var info = get.info(button.link);\r\n                            if (get.attitude(player, target) >= 0) {\r\n                                if (target.countCards('h') <= count) {\r\n                                    if (ui.selected.buttons.length < target.countCards('h') && get.position(button.link) == 'h') {\r\n                                        return 12;\r\n                                    }\r\n                                }\r\n                                if (info.onLose && get.position(button.link) == 'e')\r\n                                    return 8;\r\n                                if (get.value(button.link, target) < 0)\r\n                                    return 6;\r\n                                return 0;\r\n                            }\r\n                            else {\r\n                                if (info.onLose && get.position(button.link) == 'e')\r\n                                    return 0;\r\n                                return get.value(button.link);\r\n                            }\r\n                        }).set('count', count);\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        player.logSkill('DDzhanshou', Evt.target);\r\n                        if (Evt.target.storage.DDzhanshou_card) {\r\n                            Evt.target.storage.DDzhanshou_card = Evt.target.storage.DDzhanshou_card.concat(result.links);\r\n                        }\r\n                        else {\r\n                            Evt.target.storage.DDzhanshou_card = result.links.slice(0);\r\n                        }\r\n                        Evt.target.addSkill('DDzhanshou_card');\r\n                        Evt.target.lose(result.links, ui.special, 'toStorage');\r\n                    }\r\n                    'step 3';\r\n                    if (Evt.target && Evt.target.countCards('h') == 0) {\r\n                        Evt.target.draw();\r\n                    }\r\n                    'step 4';\r\n                    if (Evt.target && Evt.target.hasSkill('xinluezhili_draw')) {\r\n                        Evt.target.removeSkill('xinluezhili_draw');\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    card: {\r\n                        trigger: {\r\n                            global: 'phaseEnd'\r\n                        },\r\n                        audio: false,\r\n                        mark: true,\r\n                        direct: true,\r\n                        intro: {\r\n                            content: 'cardCount',\r\n                            onunmark(storage, player) {\r\n                                if (storage && storage.length) {\r\n                                    player.$throw(storage, 1000);\r\n                                    game.cardsDiscard(storage);\r\n                                    game.log(storage, '被置入了弃牌堆');\r\n                                    storage.length = 0;\r\n                                }\r\n                            },\r\n                        },\r\n                        content() {\r\n                            if (player.storage.DDzhanshou_card) {\r\n                                player.gain(player.storage.DDzhanshou_card, 'fromStorage');\r\n                                delete player.storage.DDzhanshou_card;\r\n                            }\r\n                            player.removeSkill('DDzhanshou_card');\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            xinluezhili_draw: {\r\n                trigger: {\r\n                    player: 'loseAfter',\r\n                },\r\n                filter(Evt, player) {\r\n                    if (player.countCards('h'))\r\n                        return false;\r\n                    var target = game.filterPlayer(cur => cur.hasZhuSkill('xinluezhili'));\r\n                    return Evt.hs && Evt.hs.length > 0 && target.length;\r\n                },\r\n                check(Evt, player) {\r\n                    var targets = game.filterPlayer(cur => cur.hasZhuSkill('xinluezhili'));\r\n                    return get.attitude(player, targets[0]) > 0;\r\n                },\r\n                content() {\r\n                    var targets = game.filterPlayer(cur => cur.hasZhuSkill('xinluezhili'));\r\n                    game.asyncDraw(targets);\r\n                }\r\n            },\r\n            maoliang: {\r\n                init(player) {\r\n                    player.storage.maoliang = [];\r\n                },\r\n                marktext: '粮',\r\n                intro: {\r\n                    content: 'cards',\r\n                    onunmark(storage, player) {\r\n                        if (storage && storage.length) {\r\n                            player.$throw(storage, 1000);\r\n                            game.cardsDiscard(storage);\r\n                            game.log(storage, '被置入了弃牌堆');\r\n                            storage.length = 0;\r\n                        }\r\n                    },\r\n                    cardAround: true\r\n                },\r\n            },\r\n            jiumao: {\r\n                audio: 2,\r\n                trigger: {\r\n                    player: 'phaseUseEnd',\r\n                },\r\n                filter(Evt, player) {\r\n                    return Evt.player.countCards('h');\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.player;\r\n                    Evt.target.chooseCard('he', [1, Infinity]).set('ai', card => {\r\n                        var player = _status.event.player;\r\n                        if (player.needsToDiscard() && ui.selected.cards.length < player.countCards('h'))\r\n                            return 6 - get.useful(card);\r\n                        else\r\n                            return 2 - get.useful(card);\r\n                    }).set('prompt', '###' + get.prompt('jiumao', player) + '###你在弃牌阶段开始时，可将任意数量的牌放在' + get.translation(player) + '武将牌旁，称为「猫粮」');\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.logSkill('maoliang', Evt.target);\r\n                        Evt.target.loseToSpecial(result.cards, 'maoliang', player);\r\n                        Evt.target.$give(result.cards, player, false);\r\n                        if (!player.storage.maoliang) {\r\n                            player.storage.maoliang = [];\r\n                        }\r\n                        player.storage.maoliang.addArray(result.cards);\r\n                        player.markSkill('maoliang');\r\n                        player.showCards(player.storage.maoliang, \"猫粮\");\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    game.delayx();\r\n                },\r\n                group: ['maoliang', 'jiumao_cardDisable', 'jiumao_lose'],\r\n                subSkill: {\r\n                    used: {},\r\n                    cardDisable: {\r\n                        mod: {\r\n                            cardEnabled2(cardx, player) {\r\n                                if (player.countCards('s', card => card.hasGaintag('maoliang'))) {\r\n                                    if (get.position(cardx) == 's' && cardx.hasGaintag('maoliang') && player.hasSkill('jiumao_used'))\r\n                                        return false;\r\n                                }\r\n                            }\r\n                        },\r\n                        trigger: {\r\n                            player: 'useCard1',\r\n                        },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            return player.getHistory('lose', evt => {\r\n                                if (evt.getParent() != Evt)\r\n                                    return false;\r\n                                for (var i in evt.gaintag_map) {\r\n                                    if (evt.gaintag_map[i].contains('maoliang'))\r\n                                        return true;\r\n                                }\r\n                                return false;\r\n                            }).length > 0;\r\n                        },\r\n                        content() {\r\n                            player.addTempSkill('jiumao_used');\r\n                        },\r\n                    },\r\n                    lose: {\r\n                        trigger: { player: 'loseEnd' },\r\n                        firstDo: true,\r\n                        silent: true,\r\n                        filter(Evt, player) {\r\n                            if (!Evt.ss || !Evt.ss.length)\r\n                                return false;\r\n                            var maoliang = player.getStorage('maoliang');\r\n                            if (!maoliang.length)\r\n                                return false;\r\n                            return Evt.ss.filter(card => maoliang.contains(card)).length > 0;\r\n                        },\r\n                        content() {\r\n                            player.storage.maoliang.removeArray(trigger.ss);\r\n                            player.updateMarks();\r\n                        },\r\n                    }\r\n                },\r\n            },\r\n            enfan: {\r\n                subSkill: {\r\n                    count: {\r\n                        trigger: {\r\n                            global: \"recoverBegin\",\r\n                        },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            if (!Evt.card)\r\n                                return false;\r\n                            if (!Evt.source || Evt.source != player)\r\n                                return false;\r\n                            if (!Evt.player.isDying())\r\n                                return false;\r\n                            if (Evt.player.storage.yizhan_mark != undefined)\r\n                                return false;\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            trigger.enfan = true;\r\n                        },\r\n                    },\r\n                },\r\n                audio: true,\r\n                group: ['enfan_count'],\r\n                trigger: {\r\n                    global: \"recoverAfter\",\r\n                },\r\n                filter(Evt, player) {\r\n                    if (Evt.player.isDying())\r\n                        return false;\r\n                    return Evt.enfan == true;\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.player;\r\n                    player.chooseCard('s', [1, Infinity], card => card.hasGaintag('maoliang')).set('logSkill', ['enfan', Evt.target]).set('ai', card => {\r\n                        var target = _status.event.target;\r\n                        return get.value(card, target) / 1.5 - target.countCards('h');\r\n                    }).set('target', Evt.target).set('prompt', get.prompt2('enfan', player));\r\n                    'step 1';\r\n                    if (result.bool && result.cards) {\r\n                        player.give(result.cards, Evt.target, false);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    if (player.countCards('h') == Evt.target.countCards('h') && player.storage.maoliang.length) {\r\n                        console.log(2);\r\n                        Evt.target.chooseCardButton(player.storage.maoliang.slice(0)).set('filterButton', function (button) {\r\n                            var player = _status.event.player;\r\n                            return ['basic', 'trick'].contains(get.type(button.link)) && player.hasUseTarget(button.link);\r\n                        }).set('ai', function (button) {\r\n                            var player = _status.event.player;\r\n                            return player.getUseValue(button.link);\r\n                        }).set('prompt', '可以视为使用一张' + get.translation(player) + '的「猫粮」');\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 3';\r\n                    if (result.bool && result.links) {\r\n                        var card = result.links[0];\r\n                        Evt.target.chooseUseTarget(game.createCard(card));\r\n                    }\r\n                },\r\n            },\r\n            shiqi: {\r\n                audio: 1,\r\n                trigger: { global: 'phaseDrawBegin' },\r\n                forced: true,\r\n                zhuSkill: true,\r\n                filter(Evt, player) {\r\n                    if (!player.hasZhuSkill('shiqi') || Evt.player.group != player.group)\r\n                        return false;\r\n                    return true;\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    trigger.num++;\r\n                },\r\n            },\r\n            yinliu: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countDiscardableCards(player, 'he') > 0;\r\n                },\r\n                check(card) {\r\n                    return 7 - get.value(card);\r\n                },\r\n                filterCard: true,\r\n                position: 'he',\r\n                selectCard: [1, 3],\r\n                content() {\r\n                    'step 0';\r\n                    game.delayx();\r\n                    if (player.countCards('h') == 0) {\r\n                        player.addTempSkill('yinliu_end');\r\n                    }\r\n                    'step 1';\r\n                    player.draw();\r\n                    'step 2';\r\n                    if (get.itemtype(result) == 'cards') {\r\n                        player.showCards(result);\r\n                        cards.forEach(function (cur) {\r\n                            if (get.suit3(result).contains(get.suit(cur)))\r\n                                Evt.goto(1);\r\n                        });\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 5,\r\n                    result: {\r\n                        player: 1,\r\n                    },\r\n                },\r\n                subSkill: {\r\n                    end: {\r\n                        trigger: {\r\n                            player: 'phaseEnd',\r\n                        },\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            return player.countCards('he') > 0;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            player.chooseCard({\r\n                                position: 'he',\r\n                                selectCard: [1, 3],\r\n                                prompt: get.prompt2('yinliu'),\r\n                            });\r\n                            'step 1';\r\n                            if (result.bool) {\r\n                                player.useSkill('yinliu', result.cards);\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            dunzou: {\r\n                trigger: {\r\n                    global: 'useCardAfter',\r\n                },\r\n                filter(Evt, player) {\r\n                    return player != _status.currentPhase &&\r\n                        Evt.card &&\r\n                        get.suit(Evt.card) == 'club' &&\r\n                        Evt.targets.contains(player);\r\n                },\r\n                content() {\r\n                    player.addTempSkill('dunzou_enable', 'none');\r\n                    game.broadcastAll(function (splayer) {\r\n                        splayer.out('dunzou_enable');\r\n                    }, player);\r\n                },\r\n            },\r\n            dunzou_enable: {\r\n                trigger: { global: 'phaseEnd' },\r\n                mark: true,\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    game.broadcastAll(function (splayer) {\r\n                        splayer.in('dunzou_enable');\r\n                    }, player);\r\n                    return true;\r\n                },\r\n                intro: {\r\n                    content: '移除游戏外'\r\n                },\r\n                content() {\r\n                    game.broadcastAll(function (splayer) {\r\n                        _status.dying.remove(splayer);\r\n                    }, player);\r\n                    player.removeSkill('dunzou_enable');\r\n                }\r\n            },\r\n            milijianying: {\r\n                direct: true,\r\n                mark: true,\r\n                marktext: '性',\r\n                locked: true,\r\n                intro: {\r\n                    content(storage, player, skill) {\r\n                        return \"当前为\" + get.translation(player.sex);\r\n                    },\r\n                },\r\n                trigger: {\r\n                    player: 'useCardAfter',\r\n                },\r\n                filter(Evt, player) {\r\n                    return get.name(Evt.card) == 'sha';\r\n                },\r\n                content() {\r\n                    if (player.sex == 'female') {\r\n                        player.sex = 'male';\r\n                    }\r\n                    else {\r\n                        player.sex = 'female';\r\n                    }\r\n                    player.markSkill('milijianying');\r\n                },\r\n                group: 'milijianying_cixiong',\r\n                subSkill: {\r\n                    cixiong: {\r\n                        equipSkill: true,\r\n                        noHidden: true,\r\n                        inherit: 'cixiong_skill',\r\n                    },\r\n                }\r\n            },\r\n            dianyinchuancheng: {\r\n                trigger: {\r\n                    player: 'damageEnd',\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    \"step 0\";\r\n                    Evt.count = trigger.num;\r\n                    \"step 1\";\r\n                    if (Evt.count)\r\n                        Evt.count--;\r\n                    var X = game.countPlayer(function (cur) {\r\n                        return cur.hp >= player.hp;\r\n                    });\r\n                    player.storage.Xvalue = X;\r\n                    player.chooseTarget(\"你可以与一名与你手牌数差不大于\" + player.storage.Xvalue + \"的角色交换手牌\", function (card, player, target) {\r\n                        return Math.abs(player.countCards('h') - target.countCards('h')) <= player.storage.Xvalue;\r\n                    }).set('ai', function (target) {\r\n                        var att = get.attitude(_status.event.player, target);\r\n                        if (att > 2) {\r\n                            return Math.abs(player.countCards('h') - target.countCards('h'));\r\n                        }\r\n                        return att / 3;\r\n                    });\r\n                    \"step 2\";\r\n                    delete player.storage.Xvalue;\r\n                    if (result.bool) {\r\n                        Evt.target = result.targets[0];\r\n                        player.logSkill('dianyinchuancheng', Evt.target);\r\n                        player.swapHandcards(Evt.target);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 3';\r\n                    if (Evt.target) {\r\n                        var max = Math.max(player.countCards('h'), Evt.target.countCards('h'));\r\n                        if (max > player.countCards('h'))\r\n                            player.gain(get.cards(max - player.countCards('h')), 'draw', 'log');\r\n                        if (max > Evt.target.countCards('h'))\r\n                            Evt.target.gain(get.cards(max - Evt.target.countCards('h')), 'draw', 'log');\r\n                        if (Evt.count)\r\n                            Evt.goto(1);\r\n                    }\r\n                },\r\n            },\r\n            shushi: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = 0;\r\n                },\r\n                trigger: { player: ['phaseJudgeBegin', 'phaseDrawBegin', 'phaseUseBegin', 'phaseDiscardBegin'] },\r\n                priority: 41,\r\n                filter(Evt, player) {\r\n                    return (player.storage.shushi < Math.max(game.countPlayer(), 5));\r\n                },\r\n                prompt(Evt, player) {\r\n                    return get.translation(Evt.name) + '开始,' + get.prompt('shushi');\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    let list = ['不观看牌'];\r\n                    var att = Math.max(game.countPlayer(), 5) - player.storage.shushi;\r\n                    var prompt2 = player.storage.shushi ? '你本回合已看' + get.cnNumber(player.storage.shushi) + '张牌' : '你本回合未看牌';\r\n                    for (var i = 1; i <= att; i++) {\r\n                        list.push('观看' + get.cnNumber(i) + '张牌');\r\n                    }\r\n                    if (player.countCards('h', { type: 'trick' }) < 2 || ['phaseZhunbei', 'phaseDraw', 'phaseUse'].contains(trigger.name))\r\n                        att = 0;\r\n                    player.chooseControlList(prompt2, list, true, function () {\r\n                        return _status.event.att;\r\n                    }).set('att', att);\r\n                    'step 1';\r\n                    if (result.index == 0) {\r\n                        Evt.finish();\r\n                    }\r\n                    else if (result.index) {\r\n                        player.storage.shushi += result.index;\r\n                        player.chooseCardButton(result.index, get.cards(result.index), true, '『书史』：按顺序将卡牌置于牌堆顶（先选择的在上）').set('ai', function (button) {\r\n                            var player = _status.event.player;\r\n                            var next = _status.event.phase == 'phaseJudge' ? player : player.getNext();\r\n                            var att = get.attitude(player, next);\r\n                            var card = button.link;\r\n                            var judge = next.getCards('j')[ui.selected.buttons.length];\r\n                            if (judge) {\r\n                                return get.judge(judge)(card) * att;\r\n                            }\r\n                            return next.getUseValue(card) * att;\r\n                        }).set('phase', trigger.name);\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        let list = result.links.slice(0);\r\n                        while (list.length) {\r\n                            ui.cardPile.insertBefore(list.pop(), ui.cardPile.firstChild);\r\n                        }\r\n                    }\r\n                },\r\n                mod: {\r\n                    maxHandcard(player, num) {\r\n                        return num += Math.max(game.countPlayer(), 5) - player.storage.shushi;\r\n                    },\r\n                },\r\n                group: 'shushi_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { player: 'phaseAfter' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        filter(Evt, player) {\r\n                            return player.storage.shushi;\r\n                        },\r\n                        content() {\r\n                            player.storage.shushi = 0;\r\n                        }\r\n                    },\r\n                },\r\n                ai: {\r\n                    guanxing: true,\r\n                }\r\n            },\r\n            zengzhi: {\r\n                trigger: { player: 'useCardAfter' },\r\n                priority: 41,\r\n                filter(Evt, player) {\r\n                    if (!player.isPhaseUsing() || !Evt.card.isCard)\r\n                        return false;\r\n                    var card = Evt.card;\r\n                    var info = get.info(card);\r\n                    if (info.type != 'trick' || info.allowMultiple == false)\r\n                        return false;\r\n                    if (Evt.targets && !info.multitarget) {\r\n                        if (game.hasPlayer(function (cur) {\r\n                            return Evt.targets.contains(cur) && lib.filter.targetEnabled2(card, player, cur);\r\n                        })) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.card = trigger.card;\r\n                    player.judge(card => {\r\n                        return get.suit(card) == get.suit(_status.event.getParent('zengzhi').card) ? 2 : -2;\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        var card = game.createCard(Evt.card.name, Evt.card.suit, Evt.card.number, Evt.card.nature);\r\n                        player.useCard(card, (trigger._targets || trigger.targets).slice(0), trigger.cards).skill = trigger.skill || 'zengzhi';\r\n                    }\r\n                },\r\n            },\r\n            shuangshoujiaoying: {\r\n                trigger: { player: 'shaBegin' },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseBool('【确定】展示对方手牌，【取消】展示自己手牌');\r\n                    'step 1';\r\n                    Evt.replayers = [];\r\n                    if (result.bool) {\r\n                        Evt.chooseBool = true;\r\n                        Evt.replayers = trigger.targets;\r\n                    }\r\n                    else {\r\n                        Evt.chooseBool = false;\r\n                        Evt.replayers.add(player);\r\n                    }\r\n                    'step 2';\r\n                    if (Evt.replayers.length > 0) {\r\n                        Evt.replayer = Evt.replayers[0];\r\n                        Evt.cards = Evt.replayer.getCards('h');\r\n                        Evt.replayer.showHandcards();\r\n                        game.delayx();\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 3';\r\n                    Evt.recards = [];\r\n                    if (Evt.cards && Evt.cards.length > 0) {\r\n                        if (player.storage.anyingxuemai) {\r\n                            for (let i of Evt.cards) {\r\n                                if (get.suit(i) == 'heart' || get.suit(i) == 'diamond') {\r\n                                    Evt.recards.add(i);\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            for (let i of Evt.cards) {\r\n                                if (i.name == 'shan') {\r\n                                    Evt.recards.add(i);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (Evt.recards.length > 0) {\r\n                        Evt.replayer.lose(Evt.recards, ui.discardPile);\r\n                        Evt.replayer.$throw(Evt.recards);\r\n                        game.log(Evt.replayer, '将', Evt.recards, '置入了弃牌堆');\r\n                        Evt.replayer.draw(Evt.recards.length);\r\n                    }\r\n                    'step 4';\r\n                    if (Evt.recards.length > 0) {\r\n                        if (Evt.replayers.contains(Evt.replayer) && Evt.chooseBool) {\r\n                            player.draw(1);\r\n                        }\r\n                        if (player == Evt.replayer) {\r\n                            if (trigger.getParent().addCount !== false) {\r\n                                trigger.getParent().addCount = false;\r\n                                var stat = player.getStat();\r\n                                if (stat && stat.card && stat.card[trigger.card.name])\r\n                                    stat.card.sha--;\r\n                            }\r\n                        }\r\n                    }\r\n                    Evt.replayers.shift();\r\n                    if (Evt.replayers.length > 0) {\r\n                        Evt.goto(1);\r\n                    }\r\n                }\r\n            },\r\n            shuangshoujiaoying_gai: {\r\n                trigger: { player: 'shaBegin' },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseBool('【确定】展示对方手牌，【取消】展示自己手牌');\r\n                    'step 1';\r\n                    Evt.replayers = [];\r\n                    if (result.bool) {\r\n                        Evt.chooseBool = true;\r\n                        Evt.replayers = trigger.targets;\r\n                    }\r\n                    else {\r\n                        Evt.chooseBool = false;\r\n                        Evt.replayers.add(player);\r\n                    }\r\n                    'step 2';\r\n                    if (Evt.replayers.length > 0) {\r\n                        Evt.replayer = Evt.replayers[0];\r\n                        Evt.cards = Evt.replayer.getCards('h');\r\n                        Evt.replayer.showHandcards();\r\n                        game.delayx();\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 3';\r\n                    Evt.recards = [];\r\n                    if (Evt.cards && Evt.cards.length > 0) {\r\n                        for (let i of Evt.cards) {\r\n                            if (get.suit(i) == 'heart' || get.suit(i) == 'diamond') {\r\n                                Evt.recards.add(i);\r\n                            }\r\n                        }\r\n                    }\r\n                    if (Evt.recards.length > 0) {\r\n                        Evt.replayer.lose(Evt.recards, ui.discardPile);\r\n                        Evt.replayer.$throw(Evt.recards);\r\n                        game.log(Evt.replayer, '将', Evt.recards, '置入了弃牌堆');\r\n                        Evt.replayer.draw(Evt.recards.length);\r\n                    }\r\n                    'step 4';\r\n                    if (Evt.recards.length > 0) {\r\n                        if (Evt.replayers.contains(Evt.replayer) && Evt.chooseBool) {\r\n                            player.draw(1);\r\n                        }\r\n                        if (player == Evt.replayer) {\r\n                            player.getStat().card.sha--;\r\n                        }\r\n                    }\r\n                    Evt.replayers.shift();\r\n                    if (Evt.replayers.length > 0) {\r\n                        Evt.goto(1);\r\n                    }\r\n                }\r\n            },\r\n            anyingxuemai: {\r\n                trigger: {\r\n                    player: \"dying\",\r\n                },\r\n                skillAnimation: true,\r\n                animationColor: 'metal',\r\n                audio: 2,\r\n                unique: true,\r\n                limited: true,\r\n                init(player) {\r\n                    player.storage.anyingxuemai = false;\r\n                },\r\n                mark: true,\r\n                filter(Evt, player) {\r\n                    if (Evt.name != 'dying')\r\n                        return false;\r\n                    if (player.storage.anyingxuemai)\r\n                        return false;\r\n                    if (player.countCards('h') == 0)\r\n                        return false;\r\n                    return true;\r\n                },\r\n                content() {\r\n                    \"step 0\";\r\n                    player.awakenSkill('anyingxuemai');\r\n                    player.showHandcards();\r\n                    var handcards = player.getCards('h');\r\n                    var suitlist = [0, 0, 0, 0];\r\n                    for (let i of handcards) {\r\n                        if (get.suit(i) == 'spade') {\r\n                            suitlist[0]++;\r\n                        }\r\n                        if (get.suit(i) == 'heart') {\r\n                            suitlist[1]++;\r\n                        }\r\n                        if (get.suit(i) == 'diamond') {\r\n                            suitlist[2]++;\r\n                        }\r\n                        if (get.suit(i) == 'club') {\r\n                            suitlist[3]++;\r\n                        }\r\n                    }\r\n                    suitlist.sort();\r\n                    var recoverHp = 0;\r\n                    for (let i of suitlist) {\r\n                        if (i != 0) {\r\n                            recoverHp = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                    player.recover(recoverHp);\r\n                    \"step 1\";\r\n                    player.storage.anyingxuemai = true;\r\n                    player.removeSkill('shuangshoujiaoying');\r\n                    player.addSkill('shuangshoujiaoying_gai');\r\n                },\r\n            },\r\n            zhengtibuming: {\r\n                audio: 5,\r\n                unique: true,\r\n                popup: false,\r\n                trigger: {\r\n                    player: ['phaseBegin', 'phaseEnd', 'zhengtibuming']\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.storage.zhengtibuming && player.storage.zhengtibuming.character.length > 0;\r\n                },\r\n                group: ['zhengtibuming_init', 'zhengtibuming_onDamaged'],\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = {\r\n                            character: [],\r\n                            characterskillMap: {}\r\n                        };\r\n                },\r\n                content() {\r\n                    var opts = ['更改亮出的「替身」', '随机更换一张「替身」', '返回'];\r\n                    'step 0';\r\n                    console.log('zt 0');\r\n                    _status.noclearcountdown = true;\r\n                    Evt.videoId = lib.status.videoId++;\r\n                    var cards = player.storage.zhengtibuming.character;\r\n                    if (player.isOnline2()) {\r\n                        player.send(function (cards, id) {\r\n                            var dialog = ui.create.dialog('是否发动【替身】？', [cards, 'character']);\r\n                            dialog.videoId = id;\r\n                        }, cards, Evt.videoId);\r\n                    }\r\n                    Evt.dialog = ui.create.dialog(get.prompt('zhengtibuming'), [cards, 'character']);\r\n                    if (!Evt.isMine()) {\r\n                        Evt.dialog.style.display = 'none';\r\n                    }\r\n                    Evt.dialog.videoId = Evt.videoId;\r\n                    Evt.closeDialog = (player, videoId) => {\r\n                        if (player.isOnline2()) {\r\n                            player.send('closeDialog', videoId);\r\n                        }\r\n                        Evt.dialog.close();\r\n                        delete _status.noclearcountdown;\r\n                        if (!_status.noclearcountdown) {\r\n                            game.stopCountChoose();\r\n                        }\r\n                    };\r\n                    Evt.setDialogPrompt = function (id, prompt) {\r\n                        var dialog = get.idDialog(id);\r\n                        if (dialog) {\r\n                            dialog.content.childNodes[0].innerHTML = prompt;\r\n                        }\r\n                    };\r\n                    Evt.configPrompt = (id, prompt) => {\r\n                        if (!Evt.dialog || Evt.dialog.content.childNodes[0].innerHTML == prompt)\r\n                            return;\r\n                        if (player.isOnline2()) {\r\n                            player.send(this.setDialogPrompt, id, prompt);\r\n                        }\r\n                        else if (Evt.isMine()) {\r\n                            this.setDialogPrompt(id, prompt);\r\n                        }\r\n                    };\r\n                    if (Evt.triggername == 'zhengtibuming') {\r\n                        Evt._result = { control: opts[0] };\r\n                    }\r\n                    else {\r\n                        var cond = Evt.triggername == 'phaseBegin' ? 'in' : 'out';\r\n                        var aiChoiceSkill = -Infinity;\r\n                        for (var i in player.storage.zhengtibuming.characterskillMap) {\r\n                            var sks = player.storage.zhengtibuming.characterskillMap[i];\r\n                            if (!sks)\r\n                                continue;\r\n                            for (var j in sks) {\r\n                                if (get.skillRank(sks[j], cond) > get.skillRank(aiChoiceSkill, cond)) {\r\n                                    aiChoiceSkill = sks[j];\r\n                                }\r\n                            }\r\n                        }\r\n                        if (aiChoiceSkill == player.storage.zhengtibuming.currentSkill || get.skillRank(aiChoiceSkill, cond) < 1) {\r\n                            Evt.aiOpt = opts[1];\r\n                        }\r\n                        else {\r\n                            Evt.aiOpt = opts[0];\r\n                        }\r\n                        Evt.aiChoiceSkill = aiChoiceSkill;\r\n                        player.chooseControl(opts[0], opts[1], 'cancel2').set('ai', function () {\r\n                            return _status.event.aiOpt;\r\n                        }).set('aiOpt', Evt.aiOpt);\r\n                    }\r\n                    'step 1';\r\n                    if (result.control == opts[0]) {\r\n                        Evt.goto(3);\r\n                    }\r\n                    else if (result.control != opts[1]) {\r\n                        Evt.closeDialog(player, Evt.videoId);\r\n                        Evt.finish();\r\n                        return;\r\n                    }\r\n                    if (!Evt.logged) {\r\n                        player.logSkill('zhengtibuming');\r\n                        Evt.logged = true;\r\n                    }\r\n                    'step 2';\r\n                    Evt.configPrompt(Evt.videoId, opts[1]);\r\n                    Evt.closeDialog(player, Evt.videoId);\r\n                    let list = [];\r\n                    for (let i = 0; i < player.storage.zhengtibuming.character.length; ++i) {\r\n                        let ch = player.storage.zhengtibuming.character[i];\r\n                        if (player.storage.zhengtibuming.current && ch == player.storage.zhengtibuming.current)\r\n                            continue;\r\n                        list.push(ch);\r\n                    }\r\n                    if (list.length) {\r\n                        let selectedTishenId = Math.floor(Math.random() * list.length);\r\n                        let selectedTishenName = list[selectedTishenId];\r\n                        lib.skill.zhengtibuming.exchangeTishen(player, selectedTishenName);\r\n                    }\r\n                    Evt.finish();\r\n                    'step 3';\r\n                    Evt.configPrompt(Evt.videoId, opts[0]);\r\n                    player.chooseButton(true).set('dialog', Evt.videoId).set('dialog', Evt.videoId).set('ai', (button) => {\r\n                        return player.storage.zhengtibuming.characterskillMap[button.link].contains(_status.event.aiChoiceSkill) ? 2.5 : 0;\r\n                    }).set('aiChoiceSkill', Evt.aiChoiceSkill);\r\n                    'step 4';\r\n                    if (result.bool) {\r\n                        Evt.prepareCard = result.links[0];\r\n                        let func = function (card, id) {\r\n                            var dialog = get.idDialog(id);\r\n                            if (dialog) {\r\n                                for (var i = 0; i < dialog.buttons.length; i++) {\r\n                                    if (dialog.buttons[i].link == card) {\r\n                                        dialog.buttons[i].classList.add('selectedx');\r\n                                    }\r\n                                    else {\r\n                                        dialog.buttons[i].classList.add('unselectable');\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                        if (player.isOnline2()) {\r\n                            player.send(func, Evt.prepareCard, Evt.videoId);\r\n                        }\r\n                        else if (Evt.isMine()) {\r\n                            func(Evt.prepareCard, Evt.videoId);\r\n                        }\r\n                        let list = player.storage.zhengtibuming.characterskillMap[Evt.prepareCard].slice(0);\r\n                        list.push(opts[2]);\r\n                        if (!list.contains(Evt.aiChoiceSkill))\r\n                            Evt.aiOpt = list[0];\r\n                        else\r\n                            Evt.aiOpt = Evt.aiChoiceSkill;\r\n                        player.chooseControl(list).set('ai', () => {\r\n                            return _status.event.aiOpt;\r\n                        }).set('aiOpt', Evt.aiOpt);\r\n                    }\r\n                    else {\r\n                        Evt.goto(3);\r\n                    }\r\n                    'step 5';\r\n                    if (result.control == opts[2]) {\r\n                        let func = function (id) {\r\n                            var dialog = get.idDialog(id);\r\n                            if (dialog) {\r\n                                for (var i = 0; i < dialog.buttons.length; i++) {\r\n                                    dialog.buttons[i].classList.remove('selectedx');\r\n                                    dialog.buttons[i].classList.remove('unselectable');\r\n                                }\r\n                            }\r\n                        };\r\n                        if (player.isOnline2()) {\r\n                            player.send(func, Evt.videoId);\r\n                        }\r\n                        else if (Evt.isMine()) {\r\n                            func(Evt.videoId);\r\n                        }\r\n                        Evt.goto(3);\r\n                    }\r\n                    else {\r\n                        Evt.closeDialog(player, Evt.videoId);\r\n                        Evt.finish();\r\n                        if (player.storage.zhengtibuming.current != Evt.prepareCard) {\r\n                            player.storage.zhengtibuming.current = Evt.prepareCard;\r\n                            game.broadcastAll(function (character, player) {\r\n                                player.sex = lib.character[character][0];\r\n                                player.group = lib.character[character][1];\r\n                                player.node.name.dataset.nature = get.groupnature(player.group);\r\n                            }, Evt.prepareCard, player);\r\n                        }\r\n                        var selectedSkill = result.control;\r\n                        player.storage.zhengtibuming.currentSkill = selectedSkill;\r\n                        if (!player.additionalSkills.zhengtibuming || !player.additionalSkills.zhengtibuming.contains(selectedSkill)) {\r\n                            player.addAdditionalSkill('zhengtibuming', selectedSkill);\r\n                            player.flashAvatar('zhengtibuming', Evt.prepareCard);\r\n                            game.log(player, '获得技能', '#g【' + get.translation(selectedSkill) + '】');\r\n                            player.popup(selectedSkill);\r\n                            player.syncStorage('zhengtibuming');\r\n                            player.updateMarks('zhengtibuming');\r\n                        }\r\n                    }\r\n                },\r\n                banned: ['Kaf'],\r\n                characterFilter(character, player) {\r\n                    var info = lib.character[character];\r\n                    if (info[1] == 'shen')\r\n                        return false;\r\n                    if (Number(info[2]) < 4 && info[3].length && info[3].length <= 2 && (character.indexOf('re_') != 0 && character.indexOf('sea_') != 0) && player.hp > 1)\r\n                        return false;\r\n                    return character.indexOf('heichuan') == -1 && !player.storage.zhengtibuming.character.contains(character) && !lib.skill.zhengtibuming.banned.contains(character);\r\n                },\r\n                addTishen(player) {\r\n                    if (!player.storage.zhengtibuming)\r\n                        return;\r\n                    if (!_status.characterlist) {\r\n                        let list;\r\n                        if (_status.connectMode)\r\n                            list = get.charactersOL();\r\n                        else {\r\n                            list = get.gainableCharacters(true);\r\n                        }\r\n                        game.countPlayer2(function (cur) {\r\n                            list.remove(cur.name);\r\n                            list.remove(cur.name1);\r\n                            list.remove(cur.name2);\r\n                            if (cur.storage.zhengtibuming && cur.storage.zhengtibuming.character)\r\n                                list.remove(cur.storage.zhengtibuming.character);\r\n                        });\r\n                        _status.characterlist = list;\r\n                    }\r\n                    if (!_status.characterlist.length)\r\n                        return;\r\n                    var selectedId;\r\n                    var rollCnt = 0;\r\n                    do {\r\n                        ++rollCnt;\r\n                        if (rollCnt > 256) {\r\n                            let list = [];\r\n                            for (let i = 0; i < _status.characterlist.length; ++i) {\r\n                                var name = _status.characterlist[i];\r\n                                if (!lib.skill.zhengtibuming.characterFilter(name, player))\r\n                                    continue;\r\n                                list.push(i);\r\n                            }\r\n                            if (!list.length)\r\n                                return;\r\n                            selectedId = list[Math.floor(Math.random() * list.length)];\r\n                            break;\r\n                        }\r\n                        selectedId = Math.floor(Math.random() * _status.characterlist.length);\r\n                    } while (!lib.skill.zhengtibuming.characterFilter(_status.characterlist[selectedId], player));\r\n                    var name = _status.characterlist[selectedId];\r\n                    var allSkills = lib.character[name][3];\r\n                    var skills = [];\r\n                    for (var i = 0; i < allSkills.length; ++i) {\r\n                        var info = lib.skill[allSkills[i]];\r\n                        if (info.charlotte || (info.unique && !info.gainable) || info.juexingji || info.limited || info.zhuSkill || info.hiddenSkill)\r\n                            continue;\r\n                        skills.push(allSkills[i]);\r\n                    }\r\n                    if (skills.length) {\r\n                        player.storage.zhengtibuming.character.push(name);\r\n                        player.storage.zhengtibuming.characterskillMap[name] = skills;\r\n                        _status.characterlist.remove(name);\r\n                        return name;\r\n                    }\r\n                    return undefined;\r\n                },\r\n                removeTishens(player, links) {\r\n                    if (!player.storage.zhengtibuming || !links)\r\n                        return;\r\n                    if (!(links instanceof Array))\r\n                        return;\r\n                    player.storage.zhengtibuming.character.removeArray(links);\r\n                    _status.characterlist.addArray(links);\r\n                    game.log(player, '移去了', get.cnNumber(links.length) + '张', '#g【替身】');\r\n                },\r\n                exchangeTishen(player, oriTishen) {\r\n                    var name = lib.skill.zhengtibuming.addTishen(player);\r\n                    if (name) {\r\n                        lib.skill.zhengtibuming.removeTishens(player, [oriTishen]);\r\n                        game.log(player, '获得了', get.cnNumber(1) + '张', '#g【替身】');\r\n                        lib.skill.zhengtibuming.drawCharacters(player, [name]);\r\n                    }\r\n                },\r\n                addTishens(player, cnt) {\r\n                    if (!cnt)\r\n                        return;\r\n                    var list = [];\r\n                    for (var i = 0; i < cnt; ++i) {\r\n                        var name = lib.skill.zhengtibuming.addTishen(player);\r\n                        if (name)\r\n                            list.push(name);\r\n                    }\r\n                    if (list.length) {\r\n                        game.log(player, '获得了', get.cnNumber(list.length) + '张', '#g【替身】');\r\n                        lib.skill.zhengtibuming.drawCharacters(player, list);\r\n                    }\r\n                },\r\n                drawCharacters(player, list) {\r\n                    game.broadcastAll(function (player, list) {\r\n                        if (player.isUnderControl(true)) {\r\n                            var cards = [];\r\n                            for (var i = 0; i < list.length; i++) {\r\n                                var cardname = 'tishen_card' + list[i];\r\n                                lib.card[cardname] = {\r\n                                    fullimage: true,\r\n                                    image: 'character:' + list[i]\r\n                                };\r\n                                lib.translate[cardname] = get.rawName2(list[i]);\r\n                                cards.push(game.createCard(cardname, '', ''));\r\n                            }\r\n                            player.$draw(cards, 'nobroadcast');\r\n                        }\r\n                    }, player, list);\r\n                },\r\n                intro: {\r\n                    onunmark(storage, player) {\r\n                        _status.characterlist.addArray(storage.character);\r\n                        storage.character = [];\r\n                    },\r\n                    mark(dialog, storage, player) {\r\n                        if (storage && storage.current)\r\n                            dialog.addSmall([[storage.current], 'character']);\r\n                        if (storage && storage.currentSkill)\r\n                            dialog.add('<div><div class=\"skill\">'\r\n                                + get.translation(storage.currentSkill).slice(0, 2)\r\n                                + '</div><div>' + get.skillInfoTranslation(storage.currentSkill, player)\r\n                                + '</div></div>');\r\n                        if (storage && storage.character.length) {\r\n                            if (player.isUnderControl(true)) {\r\n                                dialog.addSmall([storage.character, 'character']);\r\n                            }\r\n                            else {\r\n                                dialog.addText('共有' + get.cnNumber(storage.character.length) + '张「替身」');\r\n                            }\r\n                        }\r\n                        else {\r\n                            return '没有替身';\r\n                        }\r\n                    },\r\n                    content(storage, player) {\r\n                        return '共有' + get.cnNumber(storage.character.length) + '张「替身」';\r\n                    },\r\n                    markcount(storage, player) {\r\n                        if (storage && storage.character)\r\n                            return storage.character.length;\r\n                        return 0;\r\n                    },\r\n                    cardAround: true\r\n                },\r\n                subSkill: {\r\n                    init: {\r\n                        trigger: {\r\n                            global: 'gameDrawAfter',\r\n                            player: 'enterGame'\r\n                        },\r\n                        forced: true,\r\n                        popup: false,\r\n                        content() {\r\n                            lib.skill.zhengtibuming.addTishens(player, 3);\r\n                            player.syncStorage('zhengtibuming');\r\n                            player.markSkill('zhengtibuming');\r\n                            var next = game.createEvent('zhengtibuming');\r\n                            next.player = player;\r\n                            next._trigger = trigger;\r\n                            next.triggername = 'zhengtibuming';\r\n                            next.setContent(lib.skill.zhengtibuming.content);\r\n                        }\r\n                    },\r\n                    onDamaged: {\r\n                        trigger: { player: 'damageEnd' },\r\n                        forced: true,\r\n                        popup: false,\r\n                        content() {\r\n                            if (trigger.num && trigger.num > 0) {\r\n                                lib.skill.zhengtibuming.addTishens(player, trigger.num);\r\n                                player.syncStorage('zhengtibuming');\r\n                                player.updateMarks('zhengtibuming');\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            lunhuizuzhou: {\r\n                locked: true,\r\n                direct: true,\r\n                trigger: {\r\n                    player: 'recoverBegin'\r\n                },\r\n                group: 'lunhuizuzhou_onDie',\r\n                content() {\r\n                    if (trigger.source != trigger.player) {\r\n                        trigger.cancel();\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    onDie: {\r\n                        trigger: { player: 'die' },\r\n                        direct: true,\r\n                        skillAnimation: true,\r\n                        animationColor: 'wood',\r\n                        forceDie: true,\r\n                        content() {\r\n                            \"step 0\";\r\n                            player.chooseTarget(get.prompt2('lunhuizuzhou'), function (card, player, target) {\r\n                                return player != target;\r\n                            }).set('forceDie', true).set('ai', function (target) {\r\n                                var num = 10 - get.attitude(_status.event.player, target);\r\n                                if (num > 0) {\r\n                                    if (target.hp == 1) {\r\n                                        num += 2;\r\n                                    }\r\n                                    if (target.hp < target.maxHp) {\r\n                                        num += 2;\r\n                                    }\r\n                                }\r\n                                return num;\r\n                            }).set('sourcex', trigger.source);\r\n                            \"step 1\";\r\n                            if (result.bool) {\r\n                                var target = result.targets[0];\r\n                                player.logSkill('lunhuizuzhou', target);\r\n                                target.addSkill('lunhuizuzhou');\r\n                            }\r\n                        },\r\n                    }\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (get.tag(card, 'recover') && player != target)\r\n                                return 'zeroplayertarget';\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            mingyunniezao: {\r\n                trigger: { global: 'judge' },\r\n                zhuSkill: true,\r\n                popup: false,\r\n                filter(Evt, player) {\r\n                    return player.hasZhuSkill('mingyunniezao') && Evt.player.group == player.group && Evt.player != player;\r\n                },\r\n                content() {\r\n                    \"step 0\";\r\n                    var next = player.chooseBool(get.translation(trigger.player) + '的' + (trigger.judgestr || '') + '判定为'\r\n                        + get.translation(trigger.player.judging[0]) + '，' + get.prompt('mingyunniezao')).set('ai', () => {\r\n                        return Math.random() > 0.7;\r\n                    });\r\n                    \"step 1\";\r\n                    if (result.bool) {\r\n                        var cards = get.cards(5);\r\n                        Evt.cards = cards;\r\n                        player.chooseCardButton('选择牌堆顶的一张牌替代' + get.translation(trigger.player.judging[0]), cards, true).set('ai', (button) => {\r\n                            if (!button || !button.link)\r\n                                return 0;\r\n                            var trigger = _status.event.getTrigger();\r\n                            var player = _status.event.player;\r\n                            var oriJudgeCard = _status.event.oriJudgeCard;\r\n                            var result = trigger.judge(button.link) - trigger.judge(oriJudgeCard);\r\n                            var attitude = get.attitude(player, trigger.player);\r\n                            if (attitude == 0 || result == 0)\r\n                                return 0;\r\n                            if (attitude > 0) {\r\n                                return result - trigger.judge(button.link) / 2;\r\n                            }\r\n                            else {\r\n                                return -result - trigger.judge(button.link) / 2;\r\n                            }\r\n                        }).set('oriJudgeCard', trigger.player.judging[0]);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        Evt.replaceCard = result.links[0];\r\n                        var lastCards = [];\r\n                        for (var i = 0; i < Evt.cards.length; ++i) {\r\n                            if (Evt.cards[i] == Evt.replaceCard)\r\n                                continue;\r\n                            lastCards.push(Evt.cards[i]);\r\n                        }\r\n                        if (lastCards.length) {\r\n                            player.chooseCardButton(lastCards, lastCards.length, '按顺序选择（先选择的在上），将其余牌置于牌堆顶', true).set('ai', () => {\r\n                                return 1 + Math.random();\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 3';\r\n                    if (result.bool) {\r\n                        var orderdCards = result.links.slice(0);\r\n                        while (orderdCards.length) {\r\n                            ui.cardPile.insertBefore(orderdCards.pop(), ui.cardPile.firstChild);\r\n                        }\r\n                        player.respond(Evt.replaceCard, 'mingyunniezao', 'highlight');\r\n                        if (trigger.player.judging[0].clone) {\r\n                            trigger.player.judging[0].clone.classList.remove('thrownhighlight');\r\n                            game.broadcast(card => {\r\n                                if (card.clone) {\r\n                                    card.clone.classList.remove('thrownhighlight');\r\n                                }\r\n                            }, trigger.player.judging[0]);\r\n                            game.addVideo('deletenode', player, get.cardsInfo([trigger.player.judging[0].clone]));\r\n                        }\r\n                        game.cardsDiscard(trigger.player.judging[0]);\r\n                        trigger.player.judging[0] = Evt.replaceCard;\r\n                        trigger.orderingCards.addArray([Evt.replaceCard]);\r\n                        player.logSkill('mingyunniezao');\r\n                        game.log(trigger.player, '的判定牌改为', Evt.replaceCard);\r\n                        game.delay(2);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                }\r\n            },\r\n            chenzhu: {\r\n                intro: {\r\n                    name: '辰铸',\r\n                    content: 'cards'\r\n                },\r\n                init(player) {\r\n                    if (!player.storage.chenzhu)\r\n                        player.storage.chenzhu = [];\r\n                },\r\n                group: ['chenzhu_useWeapon', 'chenzhu_phaseBegin'],\r\n                subSkill: {\r\n                    useWeapon: {\r\n                        trigger: { global: 'useCardEnd' },\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            return get.subtype(Evt.cards[0]) == 'equip1';\r\n                        },\r\n                        content() {\r\n                            var cards = get.cards();\r\n                            player.markAuto('chenzhu', cards);\r\n                            player.$draw(cards);\r\n                            game.log(player, '将', cards, '置于武将牌上');\r\n                        }\r\n                    },\r\n                    phaseBegin: {\r\n                        trigger: { global: 'phaseBegin' },\r\n                        filter(Evt, player) {\r\n                            return player.storage.chenzhu && player.storage.chenzhu.length\r\n                                && Evt.player && Evt.player.getCards('e', { subtype: 'equip1' }).length > 0;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            if (player.storage.chenzhu && player.storage.chenzhu.length > 0) {\r\n                                player.chooseButton(['从武将牌上选择一张牌', player.storage.chenzhu], 1, true);\r\n                            }\r\n                            else {\r\n                                Evt._result = { bool: false };\r\n                            }\r\n                            'step 1';\r\n                            if (result.bool) {\r\n                                var cards = result.links;\r\n                                player.gain(cards, 'gain2');\r\n                                player.unmarkAuto('chenzhu', cards);\r\n                            }\r\n                            'step 2';\r\n                            var weapon = trigger.player.getCards('e', { subtype: 'equip1' })[0];\r\n                            var oriName = weapon.name;\r\n                            var weaponCards = [];\r\n                            for (var i = 0; i < lib.inpile.length; ++i) {\r\n                                if (get.subtype(lib.inpile[i]) == 'equip1') {\r\n                                    weapon.name = lib.inpile[i];\r\n                                    weaponCards.push(game.createCard(weapon));\r\n                                }\r\n                            }\r\n                            weapon.name = oriName;\r\n                            if (!weaponCards.length) {\r\n                                Evt.finish();\r\n                                return;\r\n                            }\r\n                            if (!trigger.player.storage.chenzhu_weaponNameTemp)\r\n                                trigger.player.storage.chenzhu_weaponNameTemp = {};\r\n                            trigger.player.storage.chenzhu_weaponNameTemp.card = weapon;\r\n                            trigger.player.storage.chenzhu_weaponNameTemp.oriName = oriName;\r\n                            Evt.weapon = weapon;\r\n                            player.chooseButton(['将' + get.translation(weapon) + '改变为：', weaponCards], true, 1);\r\n                            'step 3';\r\n                            if (result.bool) {\r\n                                game.broadcastAll(function (card, name) {\r\n                                    if (card && name) {\r\n                                        card.name = name;\r\n                                        card.init(card);\r\n                                    }\r\n                                }, Evt.weapon, result.links[0].name);\r\n                                trigger.player.addTempSkill('chenzhu_weaponNameTemp', { player: 'phaseAfter' });\r\n                            }\r\n                            else {\r\n                                delete player.storage.chenzhu_weaponNameTemp;\r\n                            }\r\n                        }\r\n                    },\r\n                    weaponNameTemp: {\r\n                        onremove(player) {\r\n                            if (!player.storage.chenzhu_weaponNameTemp) {\r\n                                return;\r\n                            }\r\n                            game.broadcastAll(function (card, name) {\r\n                                if (card && name) {\r\n                                    card.name = name;\r\n                                    card.init(card);\r\n                                }\r\n                            }, player.storage.chenzhu_weaponNameTemp.card, player.storage.chenzhu_weaponNameTemp.oriName);\r\n                            delete player.storage.chenzhu_weaponNameTemp;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            yutuo: {\r\n                audio: 2,\r\n                mark: true,\r\n                trigger: { player: 'damageBegin' },\r\n                filter(Evt, player) {\r\n                    return !player.hasSkill('yutuo_disableTag');\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.addSkill('yutuo_disableTag');\r\n                    --trigger.num;\r\n                    var cntDisabled = player.countDisabled();\r\n                    if (!player.isDisabled(player.storage.yutuo))\r\n                        ++cntDisabled;\r\n                    if (cntDisabled < 5 && !player.getCards('e', { subtype: 'equip' + player.storage.yutuo }).length) {\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                        return;\r\n                    }\r\n                    var list = [];\r\n                    for (var i = 1; i < 6; i++) {\r\n                        if (i == player.storage.yutuo)\r\n                            continue;\r\n                        if (player.isDisabled(i))\r\n                            continue;\r\n                        list.push('equip' + i);\r\n                    }\r\n                    list.push('cancel2');\r\n                    var next = player.chooseControl(list);\r\n                    next.set('prompt', '请选择一个其他未废除的装备栏<br>（若不选择，此技能进入冷却）');\r\n                    next.set('ai', function (Evt, player, list) {\r\n                        var list = _status.event.list;\r\n                        if (list)\r\n                            return list.randomGet();\r\n                        return 'cancel2';\r\n                    }).set('list', list);\r\n                    'step 1';\r\n                    if (!result.control || result.control == 'cancel2') {\r\n                        Evt.finish();\r\n                        return;\r\n                    }\r\n                    player.disableEquip(player.storage.yutuo);\r\n                    player.storage.yutuo = parseInt(result.control[5]);\r\n                    player.markSkill('yutuo');\r\n                    player.removeSkill('yutuo_disableTag');\r\n                },\r\n                init(player) {\r\n                    if (!player.storage.yutuo)\r\n                        player.storage.yutuo = 2;\r\n                    player.markSkill('yutuo');\r\n                },\r\n                intro: {\r\n                    content(storage, player) {\r\n                        var pos = { equip1: '武器栏', equip2: '防具栏', equip3: '+1马栏', equip4: '-1马栏', equip5: '宝物栏' }['equip' + storage];\r\n                        if (pos)\r\n                            return '若你的<' + pos + '>没有牌，你可废除<' + pos + '>并以一个未废除的装备栏修改<' + pos + '>，重置此技能。';\r\n                    }\r\n                },\r\n                group: 'yutuo_reset',\r\n                subSkill: {\r\n                    disableTag: {},\r\n                    reset: {\r\n                        direct: true,\r\n                        log: false,\r\n                        trigger: { global: 'roundStart' },\r\n                        content() {\r\n                            player.removeSkill('yutuo_disableTag');\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            xiou: {\r\n                audio: 5,\r\n                group: 'xiou_gainHand',\r\n                init(player) {\r\n                    player.storage.xiou = {};\r\n                },\r\n                subSkill: {\r\n                    gainHand: {\r\n                        audio: 'xiou',\r\n                        trigger: { player: 'phaseZhunbeiBegin' },\r\n                        filter(Evt, player) {\r\n                            return game.hasPlayer(function (cur) {\r\n                                return cur != player && cur.countGainableCards(player, 'h');\r\n                            });\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            var filterTarget = function (card, player, target) {\r\n                                return player != target && target.countGainableCards(player, 'h');\r\n                            };\r\n                            player.chooseTarget('选择一名其他角色，获取其所有手牌', filterTarget, true).set('ai', function (target) {\r\n                                var evt = _status.event;\r\n                                var att = get.attitude(evt.player, target);\r\n                                if (target.hasSkill('yiqu'))\r\n                                    return 2 + 3 * att + target.countGainableCards(player, 'h');\r\n                                return att + target.countGainableCards(player, 'h');\r\n                            });\r\n                            'step 1';\r\n                            var p1 = result.targets[0];\r\n                            player.addTempSkill('xiou_phaseJieshuTrigger', 'phaseJieshuAfter');\r\n                            player.storage.xiou.p1 = p1;\r\n                            var hardCards = p1.getGainableCards(player, 'h');\r\n                            if (!hardCards || !hardCards.length) {\r\n                                Evt.finish();\r\n                                return;\r\n                            }\r\n                            Evt.p1HandCardCount = hardCards.length;\r\n                            Evt.p1 = p1;\r\n                            player.gain(hardCards, p1, 'giveAuto', 'bySelf');\r\n                            'step 2';\r\n                            var cnt = player.countCards('he');\r\n                            cnt = Math.min(Evt.p1HandCardCount, cnt);\r\n                            if (cnt > 0) {\r\n                                player.chooseCard('he', cnt, '交给' + get.translation(Evt.p1) + get.cnNumber(cnt) + '张牌', true).set('ai', card => {\r\n                                    return 8 - get.value(card) + Math.random() * 2;\r\n                                });\r\n                            }\r\n                            else {\r\n                                Evt.finish();\r\n                            }\r\n                            'step 3';\r\n                            Evt.p1.gain(result.cards, player, 'giveAuto');\r\n                        }\r\n                    },\r\n                    phaseJieshuTrigger: {\r\n                        audio: 'xiou',\r\n                        trigger: { player: 'phaseJieshuBegin' },\r\n                        log: false,\r\n                        prompt2(Evt, player) {\r\n                            if (player.storage.xiou && player.storage.xiou.p1)\r\n                                return '你与' + get.translation(player.storage.xiou.p1) + '各摸一张牌';\r\n                            return '你与其各摸一张牌';\r\n                        },\r\n                        filter(Evt, player) {\r\n                            var dCnt = 0;\r\n                            player.getHistory('sourceDamage', evt => {\r\n                                if (evt.player == player.storage.xiou.p1)\r\n                                    ++dCnt;\r\n                            });\r\n                            return dCnt <= 0;\r\n                        },\r\n                        content() {\r\n                            game.asyncDraw([player, player.storage.xiou.p1]);\r\n                            delete player.storage.xiou.p1;\r\n                        },\r\n                        ai: {\r\n                            expose: 0.1,\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            xiemen: {\r\n                trigger: {\r\n                    player: ['useCardBegin', 'respondBegin'],\r\n                },\r\n                frequent: true,\r\n                content() {\r\n                    var players = game.players.slice(0);\r\n                    for (var i = 0; i < players.length; ++i) {\r\n                        var p = players[i];\r\n                        if (p == player)\r\n                            continue;\r\n                        var card = p.getCards('h').randomGet();\r\n                        if (!card)\r\n                            continue;\r\n                        if (!p.storage.xiemen_reset)\r\n                            p.storage.xiemen_reset = [];\r\n                        p.storage.xiemen_reset.push(card);\r\n                        p.lose(card, ui.special, 'toStorage');\r\n                        if (!p.hasSkill('xiemen_reset'))\r\n                            p.addSkill('xiemen_reset');\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    reset: {\r\n                        trigger: {\r\n                            global: 'phaseEnd'\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            if (player.storage.xiemen_reset && player.storage.xiemen_reset.length) {\r\n                                player.gain(player.storage.xiemen_reset, 'fromStorage');\r\n                                delete player.storage.xiemen_reset;\r\n                            }\r\n                            player.removeSkill('xiemen_reset');\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            jiai: {\r\n                audio: 5,\r\n                enable: ['chooseToUse', 'chooseToRespond'],\r\n                hiddenCard(player, name) {\r\n                    var Evt = _status.event;\r\n                    var filterCard = Evt.filterCard || function (card, player, Evt) {\r\n                        return true;\r\n                    };\r\n                    var jiaiCards = lib.skill.jiai.jiaiCards.slice(0);\r\n                    for (var i = 0; i < jiaiCards.length; ++i) {\r\n                        if (!filterCard(jiaiCards[i], player, Evt)) {\r\n                            jiaiCards.splice(i--, 1);\r\n                        }\r\n                    }\r\n                    for (var i = 0; i < lib.inpile.length; ++i) {\r\n                        if (get.type(lib.inpile[i]) != 'basic')\r\n                            continue;\r\n                        var card = { name: lib.inpile[i] };\r\n                        if (filterCard(card, player, Evt)) {\r\n                            jiaiCards.push(lib.inpile[i]);\r\n                        }\r\n                    }\r\n                    if (!jiaiCards.contains(name) || player.getCards('h').length < 2)\r\n                        return false;\r\n                    return true;\r\n                },\r\n                filter(Evt, player) {\r\n                    if (player.getCards('h').length < 2)\r\n                        return false;\r\n                    var filterCard = Evt.filterCard || function (card, player, Evt) {\r\n                        return true;\r\n                    };\r\n                    var jiaiCards = lib.skill.jiai.jiaiCards.slice(0);\r\n                    for (var i = 0; i < jiaiCards.length; ++i) {\r\n                        if (!filterCard(jiaiCards[i], player, Evt)) {\r\n                            jiaiCards.splice(i--, 1);\r\n                        }\r\n                    }\r\n                    for (var i = 0; i < lib.inpile.length; ++i) {\r\n                        if (get.type(lib.inpile[i]) != 'basic')\r\n                            continue;\r\n                        var card = { name: lib.inpile[i] };\r\n                        if (filterCard(card, player, Evt)) {\r\n                            jiaiCards.push(card);\r\n                        }\r\n                    }\r\n                    return jiaiCards.length > 0;\r\n                },\r\n                jiaiCards: [],\r\n                usable: 1,\r\n                chooseButton: {\r\n                    dialog(Evt, player) {\r\n                        var jiaiCards = lib.skill.jiai.jiaiCards.slice(0);\r\n                        for (var i = 0; i < jiaiCards.length; ++i) {\r\n                            if (!Evt.filterCard(jiaiCards[i], player, Evt)) {\r\n                                jiaiCards.splice(i--, 1);\r\n                            }\r\n                        }\r\n                        for (var i = 0; i < lib.inpile.length; ++i) {\r\n                            if (get.type(lib.inpile[i]) != 'basic')\r\n                                continue;\r\n                            var card = { name: lib.inpile[i] };\r\n                            if (Evt.filterCard(card, player, Evt)) {\r\n                                jiaiCards.push(card);\r\n                            }\r\n                        }\r\n                        return ui.create.dialog('###『集爱』###选择一张基本牌', [jiaiCards, 'vcard'], 'hidden');\r\n                    },\r\n                    check(button) {\r\n                        var player = _status.event.player;\r\n                        var card = { name: button.link.name, nature: button.link.nature };\r\n                        if (_status.event.getParent().type != 'phase' || game.hasPlayer(function (cur) {\r\n                            return player.canUse(card, cur) && get.effect(cur, card, player, player) > 0;\r\n                        })) {\r\n                            return Math.random() * 5;\r\n                        }\r\n                        return 0;\r\n                    },\r\n                    backup(links, player) {\r\n                        return {\r\n                            audio: 'jiai',\r\n                            audioname: ['jike', 'Miki'],\r\n                            selectCard: 2,\r\n                            position: 'h',\r\n                            filterCard(card, player, target) {\r\n                                return true;\r\n                            },\r\n                            check(card, player, target) {\r\n                                if (!ui.selected.cards.length && get.type(card) == 'basic')\r\n                                    return 6;\r\n                                else\r\n                                    return 6 - get.value(card);\r\n                            },\r\n                            viewAs: { name: links[0].name, nature: links[0].nature },\r\n                            onrespond() { return this.onuse.apply(this, arguments); },\r\n                            onuse(result, player) {\r\n                                if (_status.event.respondTo && _status.event.respondTo[0] != player)\r\n                                    player.draw();\r\n                            }\r\n                        };\r\n                    },\r\n                    prompt(links, player) {\r\n                        var str = '使用或打出';\r\n                        if (_status.event.name == 'chooseToUse')\r\n                            str = '使用';\r\n                        else if (_status.event.name == 'chooseToRespond')\r\n                            str = '打出';\r\n                        return '选择两张手牌当作' + get.translation(links[0]) + str;\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 0.5,\r\n                    respondSha: true,\r\n                    respondShan: true,\r\n                    save: true,\r\n                    skillTagFilter(player, tag) {\r\n                        switch (tag) {\r\n                            case 'respondSha': {\r\n                                if (player.countCards('h') < 2)\r\n                                    return false;\r\n                                break;\r\n                            }\r\n                            case 'respondShan': {\r\n                                if (player.countCards('h') < 2)\r\n                                    return false;\r\n                                break;\r\n                            }\r\n                            case 'save': {\r\n                                if (player.countCards('h') < 2)\r\n                                    return false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    },\r\n                    result: {\r\n                        player: 0.5,\r\n                    }\r\n                },\r\n            },\r\n            bigOrSmall: {\r\n                init(player, skill) {\r\n                    player.storage[skill] = '小';\r\n                },\r\n                list: ['小', '大', '等'],\r\n            },\r\n            mozouqiyin: {\r\n                group: 'bigOrSmall',\r\n                trigger: {\r\n                    global: 'phaseBegin'\r\n                },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    if (Evt.player === player)\r\n                        return false;\r\n                    if (player.countCards('h', card => lib.filter.cardEnabled(card, player, 'forceEnable'))) {\r\n                        return true;\r\n                    }\r\n                    ;\r\n                    return false;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseToUse(`###${get.prompt('mozouqiyin')}###你可使用一张牌，若未造成伤害，然后本回合${get.translation(trigger.player)}跳过弃牌阶段且不能使用点数（${player.storage.bigOrSmall}）于此牌的牌`).set('ai1', card => {\r\n                        let player = _status.event.player;\r\n                        let p = _status.event.target;\r\n                        let size = player.storage.bigOrSmall;\r\n                        let att = get.attitude(player, p);\r\n                        if (att > 0) {\r\n                            if (size == '小') {\r\n                                return 100 - p.countCards('h', function (cur) {\r\n                                    return cur.number < card.number;\r\n                                });\r\n                            }\r\n                            else if (size == '大') {\r\n                                return 100 - p.countCards('h', function (cur) {\r\n                                    return cur.number > card.number;\r\n                                });\r\n                            }\r\n                            else {\r\n                                return p.countCards('h', function (cur) {\r\n                                    return cur.number == card.number;\r\n                                }) ? 10 : 100;\r\n                            }\r\n                        }\r\n                        else if (att < 0) {\r\n                            if (size == '小') {\r\n                                return p.countCards('h', function (cur) {\r\n                                    return cur.number < card.number;\r\n                                });\r\n                            }\r\n                            else if (size == '大') {\r\n                                return p.countCards('h', function (cur) {\r\n                                    return cur.number > card.number;\r\n                                });\r\n                            }\r\n                            else {\r\n                                return -100;\r\n                            }\r\n                        }\r\n                        else {\r\n                            return 0;\r\n                        }\r\n                    }).set('target', trigger.player);\r\n                    Evt.sourceDamageHistory = player.getHistory('sourceDamage').slice(0);\r\n                    'step 1';\r\n                    if (!result.bool) {\r\n                        Evt.finish();\r\n                        return;\r\n                    }\r\n                    let p = trigger.player;\r\n                    let card = result.cards[0] || result.used || result.card;\r\n                    if (!card) {\r\n                        Evt.finish();\r\n                        return;\r\n                    }\r\n                    let history = player.getHistory('sourceDamage');\r\n                    let causeDamage = false;\r\n                    for (let i = 0; i < history.length; ++i) {\r\n                        if (Evt.sourceDamageHistory.contains(history[i]))\r\n                            continue;\r\n                        causeDamage = true;\r\n                        break;\r\n                    }\r\n                    if (causeDamage) {\r\n                        Evt.finish();\r\n                        return;\r\n                    }\r\n                    p.storage.mozouqiyin_disableCard = {\r\n                        source: player,\r\n                        number: card.number,\r\n                        cond: player.storage.bigOrSmall\r\n                    };\r\n                    p.addTempSkill('mozouqiyin_disableCard', { player: 'phaseEnd' });\r\n                    player.logSkill('mozouqiyin', p);\r\n                },\r\n                subSkill: {\r\n                    disableCard: {\r\n                        trigger: {\r\n                            player: 'phaseDiscardBefore'\r\n                        },\r\n                        direct: true,\r\n                        log: false,\r\n                        content() {\r\n                            trigger.cancel();\r\n                        },\r\n                        mark: true,\r\n                        mod: {\r\n                            cardUsable(card, player, num) {\r\n                                if (typeof card != 'object')\r\n                                    return;\r\n                                let number = get.number(card, player);\r\n                                if (typeof number != 'number') {\r\n                                    number = parseInt(number);\r\n                                    if (isNaN(number))\r\n                                        return;\r\n                                }\r\n                                let storage = player.storage.mozouqiyin_disableCard;\r\n                                return lib.skill.budingpaidui.checkNumber(storage.number, number, storage.cond) ? 0 : num;\r\n                            },\r\n                            cardEnabled2(card, player, ori) {\r\n                                let number = get.number(card, player);\r\n                                if (typeof number != 'number') {\r\n                                    number = parseInt(number);\r\n                                    if (isNaN(number))\r\n                                        return;\r\n                                }\r\n                                let storage = player.storage.mozouqiyin_disableCard;\r\n                                return lib.skill.budingpaidui.checkNumber(storage.number, number, storage.cond) ? false : ori;\r\n                            }\r\n                        },\r\n                        marktext: '默',\r\n                        intro: {\r\n                            name: '默奏起音的效果',\r\n                            mark(dialog, storage, player) {\r\n                                let cardnum = get.strNumber(storage.number);\r\n                                dialog.addText('禁止使用点数（' + storage.cond + '）于' + cardnum + '的牌');\r\n                                dialog.addText('本回合跳过弃牌阶段');\r\n                            }\r\n                        },\r\n                        onremove(player) {\r\n                            delete player.storage.mozouqiyin_disableCard;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            budingpaidui: {\r\n                trigger: {\r\n                    player: 'useCardAfter'\r\n                },\r\n                init(player) {\r\n                    var _a;\r\n                    var _b;\r\n                    (_a = (_b = player.storage).budingpaidui) !== null && _a !== void 0 ? _a : (_b.budingpaidui = ['小', '大', '等']);\r\n                },\r\n                filter(Evt, player) {\r\n                    if (!player.storage.budingpaidui || player.storage.budingpaidui.length <= 0) {\r\n                        player.storage.budingpaidui = ['小', '大', '等'];\r\n                        player.markSkill('budingpaidui');\r\n                    }\r\n                    let curCard = Evt.card;\r\n                    let lstCard = player.getStorage('budingpaidui_uCR')[0];\r\n                    return lstCard && lib.skill.budingpaidui.checkNumber(get.number(lstCard), get.number(curCard), player);\r\n                },\r\n                check(Evt, player) {\r\n                    if (player.getStorage('budingpaidui').length > 1) {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                checkNumber(lstNum, curNum, item) {\r\n                    let str;\r\n                    if (typeof item == 'string')\r\n                        str = item;\r\n                    else {\r\n                        let player = item || _status.event.player;\r\n                        str = player.storage.bigOrSmall;\r\n                    }\r\n                    if (str == '小') {\r\n                        return curNum < lstNum;\r\n                    }\r\n                    if (str == '大') {\r\n                        return curNum > lstNum;\r\n                    }\r\n                    if (str == '等') {\r\n                        return curNum == lstNum;\r\n                    }\r\n                    return false;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.draw();\r\n                    'step 1';\r\n                    var curCard = trigger.card;\r\n                    var left = player.storage.budingpaidui;\r\n                    var aiChoice = left[0];\r\n                    for (let i = 0; i < left.length; ++i) {\r\n                        if (player.countCards('h', card => {\r\n                            return player.hasUseTarget(card) && lib.skill.budingpaidui.checkNumber(curCard.number, card.number, left[i]);\r\n                        }) > 0) {\r\n                            aiChoice = left[i];\r\n                            break;\r\n                        }\r\n                    }\r\n                    player.chooseControl(player.storage.budingpaidui)\r\n                        .set('prompt', '选择一项替代之前（）内的内容')\r\n                        .set('ai', function () {\r\n                        return _status.event.aiChoice;\r\n                    }).set('aiChoice', aiChoice);\r\n                    'step 2';\r\n                    player.storage.bigOrSmall = result.control;\r\n                    player.storage.budingpaidui.splice(result.index, 1);\r\n                    player.markSkill('budingpaidui');\r\n                    game.countPlayer(function (cur) {\r\n                        if (cur.getStorage('mozouqiyin_disableCard').source === player) {\r\n                            cur.storage.mozouqiyin_disableCard.cond = result.control;\r\n                            cur.markSkill('mozouqiyin_disableCard');\r\n                        }\r\n                    });\r\n                },\r\n                intro: {\r\n                    mark(dialog, storage, player) {\r\n                        let lstCard = player.getStorage('budingpaidui_uCR')[0];\r\n                        if (!lstCard) {\r\n                            dialog.addText(`你使用的下一张牌可能无法发动『${get.translation('budingpaidui')}』`);\r\n                            return;\r\n                        }\r\n                        let cardnum = get.strNumber(get.number(lstCard));\r\n                        dialog.addText(`你使用的下一张牌点数（${player.storage.bigOrSmall}）于${cardnum}可以发动『${get.translation('budingpaidui')}』`);\r\n                    },\r\n                    markcount(storage, player) {\r\n                        let lstCard = player.getStorage('budingpaidui_uCR')[0];\r\n                        return lstCard && get.number(lstCard);\r\n                    },\r\n                },\r\n                group: ['bigOrSmall', 'budingpaidui_reset', 'budingpaidui_usedCardRecord'],\r\n                subSkill: {\r\n                    reset: {\r\n                        trigger: {\r\n                            global: 'roundStart'\r\n                        },\r\n                        firstDo: true,\r\n                        priority: 253,\r\n                        direct: true,\r\n                        log: false,\r\n                        content() {\r\n                            player.storage.budingpaidui = ['小', '大', '等'];\r\n                            player.markSkill('budingpaidui');\r\n                        }\r\n                    },\r\n                    usedCardRecord: {\r\n                        trigger: {\r\n                            player: 'useCardAfter'\r\n                        },\r\n                        direct: true,\r\n                        lastDo: true,\r\n                        log: false,\r\n                        content() {\r\n                            player.storage.budingpaidui_uCR = [trigger.card];\r\n                            player.markSkill('budingpaidui');\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n        },\r\n        dynamicTranslate: {\r\n            mozouqiyin(player) {\r\n                var str = '小';\r\n                if (player.storage.bigOrSmall)\r\n                    str = player.storage.bigOrSmall;\r\n                return `其他角色的回合开始时，你可使用一张牌，若未造成伤害，本回合其跳过弃牌阶段且不能使用点数（${str}）于此牌的牌。`;\r\n            },\r\n            budingpaidui(player) {\r\n                var str = '小';\r\n                if (player.storage.bigOrSmall)\r\n                    str = player.storage.bigOrSmall;\r\n                return `当你使用一张牌后，若点数（${str}）于前一张被使用的牌，你可摸一张牌，然后用以下未选过的一项替代之前（）内的内容：小，大，等。三项均被触发后或一轮开始时，重置选项。`;\r\n            }\r\n        },\r\n        translate: {\r\n            MeUmy: `MeUmy`,\r\n            Miqiutu: `蜜球兔`,\r\n            zhazong: `寻嬲`,\r\n            zhazong_info: `出牌阶段结束时，若你于此阶段没有使用过基本牌/装备牌/锦囊牌，你可以弃置一名角色手牌区/装备区/判定区各一张牌。`,\r\n            zhazong_append: lib.figurer(`特性：易上手`),\r\n            mengnan: `梦喃`,\r\n            mengnan_info: `锁定技 当一张牌进入/离开你的判定区时，你需要摸/弃一张牌，若此时不在判定阶段，张数+1；<br>\r\n\t\t\t当你脱离濒死状态时，将此技能替换为『月喃』。`,\r\n            yuenan: `月喃`,\r\n            yuenan_info: `摸牌阶段，你可以改为亮出牌堆顶的五张牌，使用其中至多两张牌。`,\r\n            Yomemi: `Yomemi`,\r\n            Yomemi_ab: `ヨメミ`,\r\n            mokuai: `模块搭载`,\r\n            mokuai_info: `锁定技 你的【杀】和『致命药剂』可指定的目标数为X；你每次回复体力固定回复X点。（X为你装备区内牌数且至少为1）。`,\r\n            yaoji: `致命药剂`,\r\n            yaoji_info: `出牌阶段限一次，你可以选择一名角色，弃置任意张类型不同牌，然后亮出牌堆顶等量牌。目标角色需依次选择：弃置与亮出牌等量且花色相同的牌；或受到你造成的1点伤害。`,\r\n            yaoji_append: lib.figurer(`特性：直接伤害`),\r\n            Eilene: `艾琳`,\r\n            daimeng: `贷梦`,\r\n            daimeng_info: `每项限一次。出牌阶段，你可以摸一张/两张/三张/四张牌使手牌数为全场唯一最多，然后回复1点体力/横置/翻面/立即结束此阶段。`,\r\n            daimeng_append: lib.figurer(`特性：爆发`),\r\n            changsheng: `偿生`,\r\n            changsheng_info: `锁定技 你首次进入濒死状态时，弃置区域内所有牌，回复体力至3，重置『贷梦』，从游戏中除外直到你的下个回合开始。`,\r\n            NekomiyaHinata: `猫宫日向`,\r\n            yuchong: `一命通关`,\r\n            yuchong_info: `锁定技 你装备区内的武器牌不能被弃置。你装备着武器时，你手牌中的武器牌均视为不计入次数的【杀】。`,\r\n            songzang: `送葬天使`,\r\n            songzang_info: `你使用【杀】指定已损失体力值超过体力上限一半的角色为目标时，你可令此【杀】伤害+1，若其因此【杀】的伤害而进入濒死状态，则其不能使用【桃】直到此濒死事件结算。`,\r\n            zhimao: `只箱只猫`,\r\n            zhimao_info: `当你成为普通锦囊牌的目标时，若来源与你不相邻，你可选择一项：<br>\r\n\t\t\t取消之并摸一张牌；获得其武器牌，视为对其使用一张【杀】。`,\r\n            KaguraMea: `神乐めあ`,\r\n            luecai: `掠财`,\r\n            luecai_info: `出牌阶段限一次，你可以将手牌数大于你的角色的一张牌置于你的武将牌上，或令一名手牌数小于你的角色将一张牌置于你的武将牌上，称为「财布」。\r\n\t\t\t准备阶段，若你的武将牌上有「财布」，你可以移去任意数量的「财布」摸等量的牌。`,\r\n            luecai_append: lib.figurer(`特性：顺手牵咩`),\r\n            xiaoyan: `嚣言`,\r\n            xiaoyan_info: `锁定技 你对手牌数小于你的角色使用牌不可被响应。当你造成或受到伤害时，若有花色与来源牌相同的「财布」，此伤害+1。`,\r\n            xiaoyan_append: lib.figurer(`特性：强制命中 破军`),\r\n            caibu: `财布`,\r\n            KamikiHasami: `纸木铗`,\r\n            quzhuan: `曲转`,\r\n            quzhuan_info: `每回合限一次，其他角色在你的回合内使用牌时，你可以在其结算后获得之。`,\r\n            yuanjiu: `援咎`,\r\n            yuanjiu_info: `一名角色的出牌阶段开始时，你可以交给其一张与装备区内某张牌花色相同的牌，视为对其使用了一张【酒】。`,\r\n            yuanjiu_append: lib.figurer(`特性：传递关键牌 联动`),\r\n            ShikaiYue: `紫海由爱`,\r\n            lianyin: `联音`,\r\n            lianyin_info: `每回合限X次，其他角色在你的回合内使用牌时，你可以与其各摸一张牌。（X为你的体力上限）`,\r\n            lianyin_append: lib.figurer(`特性：联动`),\r\n            guixiang: `归乡`,\r\n            guixiang_info: `<font color=#caf>觉醒技</font> 准备阶段，若你发动『联音』的次数不少于存活角色数，你增加一点体力上限并回复一点体力，将『联音』的“使用”改为“使用或打出”。`,\r\n            KurokiriAria: `黑桐亚里亚`,\r\n            xuanying: `玄荫`,\r\n            xuanying_info: `每回合限X次，其他角色在你的回合内使用牌时，你可以交给其一张牌，然后令你或其摸一张牌，若你交出了装备牌，则额外摸X张。（X为你装备区的牌数且至少为1）`,\r\n            xuanying_append: lib.figurer(`特性：联动`),\r\n            houfan: `候返`,\r\n            houfan_info: `<font color=#b56>限定技</font> 出牌阶段，若你手牌数为全场最少，你可以减1点体力上限，从弃牌堆随机获得四张装备牌，并将『玄荫』的“使用”改为“使用或打出”。`,\r\n            HinataCocomi: `阳向心美`,\r\n            qijian: `起鉴`,\r\n            qijian_info: `其他角色于自己的回合使用一张指定目标的红色牌后，你可以跟随之使用一张牌，若你未以此牌造成伤害，你摸一张牌并失去此技能直到本回合结束。`,\r\n            qijian_append: lib.figurer(`特性：联动`),\r\n            yizhan: `翼展`,\r\n            yizhan_info: `每名角色限一次，你令其脱离濒死状态时，你可以摸牌至手牌上限并将其势力改为「群」。`,\r\n            jushi: `聚识`,\r\n            jushi_info: `<font color=#fae>主公技</font> 锁定技 你于群势力角色的回合不会因『起鉴』的效果而失去『起鉴』；场上每有一名群势力角色，你的手牌上限+1。`,\r\n            KaguraNana: `神乐七奈`,\r\n            DDzhanshou: `DD斩首`,\r\n            DDzhanshou_info: `当你使用牌指定目标后，你可选择其中一名目标角色，该角色每满足一项你便可将其一张牌移出游戏直到此回合结束：<br>\r\n\t\t\t手牌数不少于你；体力值不少于你；装备区牌数不少于你。<br>然后若该角色没有手牌，其摸一张牌。`,\r\n            DDzhanshou_append: lib.figurer(`特性：连营 破军`),\r\n            xinluezhili: `辛略之力`,\r\n            xinluezhili_draw: `辛略之力`,\r\n            xinluezhili_info: `主公技 当其他角色因『DD斩首』失去最后一张手牌时，其可令你摸一张牌`,\r\n            HanazonoSerena: `花园Serena`,\r\n            HanazonoSerena_ab: `花园セレナ`,\r\n            maoliang: `猫粮`,\r\n            jiumao: `啾猫`,\r\n            jiumao_info: `一名角色出牌阶段结束时，可将任意手牌置于你武将牌上，称为「猫粮」。每回合限一次，你可将「猫粮」如手牌般使用或打出。`,\r\n            jiumao_append: lib.figurer(`特性：联动`),\r\n            enfan: `恩返`,\r\n            enfan_info: `你令其他角色脱离濒死状态时，可以交给其任意数量的「猫粮」，然后若其手牌数与你相同，其可以视为使用一张你的「猫粮」。`,\r\n            enfan_append: lib.figurer(`特性：辅助`),\r\n            shiqi: `势起`,\r\n            shiqi_info: `主公技 锁定技 同势力角色摸牌阶段多摸一张牌。`,\r\n            MashiroKanon: `真白花音`,\r\n            chenzhu: `辰铸`,\r\n            chenzhu_info: `有武器牌被使用时，你将牌堆顶牌置于你的武将牌上。装备武器的角色的回合开始时，你可获得武将牌上的一张牌，改变其武器牌名直到回合结束。`,\r\n            yutuo: `玉托`,\r\n            yutuo_info: `每轮限一次，你可以令你受到的伤害-1，然后若你的<防具栏>没有牌，你可废除<>并以一个未废除的装备栏修改<>，重置此技能。`,\r\n            yutuo_append: lib.figurer(`特性：减伤`),\r\n            bingtang: `进击的冰糖`,\r\n            bingtang_ab: `冰糖`,\r\n            xiou: `戏偶`,\r\n            xiou_info: `准备阶段，你可以获得一名其他角色的所有手牌，然后交给其等量的牌。结束阶段，若你本回合没有对其造成过伤害，你与其各摸一张牌。`,\r\n            xiou_gainHand_info: `准备阶段，你可以获得一名其他角色的所有手牌，然后交给其等量的牌。结束阶段，若你本回合没有对其造成过伤害，你与其各摸一张牌。`,\r\n            xiou_append: lib.figurer(`特性：辅助`),\r\n            zhangjinghua: `张京华`,\r\n            xiemen: `斜门`,\r\n            xiemen_info: `你使用或打出牌时，可令其他角色各随机移除一张手牌直到回合结束。`,\r\n            xiemen_append: lib.figurer(`特性：易上手 破军`),\r\n            jiai: `集爱`,\r\n            jiai_info: `每回合限一次，你可以将两张手牌当任意基本牌使用或打出，当你以此法响应其他角色使用的牌时，摸一张牌。`,\r\n            XiaDi: `下地`,\r\n            yinliu: `引流`,\r\n            yinliu_info: `出牌阶段限一次，你可以弃置至多三张牌，然后摸牌并展示直到出现了你弃置牌未包含的花色为止。若你以此法弃置了所有手牌，本回合结束时你可再次发动此技能。`,\r\n            yinliu_append: lib.figurer(`特性：赌狗`),\r\n            dunzou: `遁走`,\r\n            dunzou_info: `你于其他角色的回合被♣牌指定并结算后，你可以将自己移出游戏直到回合结束。`,\r\n            dunzou_enable: `遁走`,\r\n            Nekomasu: `ねこます`,\r\n            milijianying: `迷离剑影`,\r\n            milijianying_info: `锁定技 你视为拥有装备【节奏双剑】的效果。当你使用一张【杀】后，改变你的性别。`,\r\n            dianyinchuancheng: `点引承传`,\r\n            dianyinchuancheng_info: `当你受到 1 点伤害后，你可以与一名与你手牌数差不大于 X 的角色交换手牌，然后手牌较少的一方将手牌数调整至与较多一方相同。（X为体力值不少于你的角色数）`,\r\n            dianyinchuancheng_append: lib.figurer(`特性：卖血 辅助`),\r\n            ShizukuLulu: `雫るる`,\r\n            duixian: `稽杀`,\r\n            duixian_info: `每回合限一次，你对其他角色使用【杀】或其他角色使用【杀】指定你为目标时，你可改之为【决斗】。<br>\r\n\t\t\t若其因此受到伤害，你可弃置其一张牌，若你因此受到伤害，你摸两张牌。`,\r\n            duixian_append: lib.figurer(`特性：强化出杀 卖血 易上手`),\r\n            gutai: `守峡`,\r\n            gutai_info: `当一张牌造成伤害后，若你为使用者或目标之一，你可以取消此牌的剩余目标。`,\r\n            His_HoshinoNiya: `星野妮娅·史官`,\r\n            shushi: `书史`,\r\n            shushi_info: `你的主要阶段开始时，你可以观看牌堆顶的任意张牌，并以任意顺序放回。你每回合至多以此法观看X张牌，且每少观看一张本回合手牌上限便+1。（X为场上人数且至少为5）`,\r\n            shushi_append: lib.figurer(`特性：观星`),\r\n            zengzhi: `增殖`,\r\n            zengzhi_info: `当你的实体锦囊牌结算后，你可以进行一次判定，若花色与该锦囊牌相同，视为你使用了一张同样的锦囊牌。`,\r\n            Qiankesaier: `茜科塞尔`,\r\n            Qiankesaier_info: `茜科塞尔`,\r\n            shuangshoujiaoying: `双首角鹰`,\r\n            shuangshoujiaoying_gai: `双首角鹰`,\r\n            shuangshoujiaoying_info: `当你使用【杀】指定目标后，可以令你或目标展示手牌并重铸其中的【闪】。若为其重铸，你摸一张牌；若为你重铸，此【杀】不计入次数。`,\r\n            shuangshoujiaoying_gai_info: `当你使用【杀】指定目标后，可以令你或目标展示手牌并重铸其中的红色牌。若为其重铸，你摸一张牌；若为你重铸，此【杀】不计入次数。`,\r\n            anyingxuemai: `暗影血脉`,\r\n            anyingxuemai_info: `<font color=#daa>限定技</font>，你进入濒死状态时，可以展示所有手牌并回复其中最少花色牌数的体力。然后将『双首角鹰』的“【闪】”改为“红色牌”。`,\r\n            heichuan: `原初黑川`,\r\n            zhengtibuming: `正体不明`,\r\n            zhengtibuming_info: `游戏开始时，你随机获得三张武将牌作为「替身」，然后亮出其中一张。获得亮出「替身」的通常技，且性别和势力视为与「替身」相同。回合开始或结束时，你可以选择一项：<br>\r\n\t\t\t更改亮出的「替身」；或随机更换一张「替身」。当你受到1点伤害后，你可以获得一张新的「替身」。`,\r\n            lunhuizuzhou: `轮回诅咒`,\r\n            lunhuizuzhou_info: `锁定技 其他角色不能以任何方式让你回复体力。你死亡后，令一名其他角色获得此技能。`,\r\n            mingyunniezao: `命运捏造`,\r\n            mingyunniezao_info: `主公技。当其它同势力角色的判定牌生效前，你可以观看牌堆顶的五张牌，选择其中一张替代之，然后将其余牌以任意顺序放回牌堆顶。`,\r\n            NoiR: `NoiR`,\r\n            mozouqiyin: `默奏起音`,\r\n            mozouqiyin_info: `其他角色的回合开始时，你可使用一张牌，若未造成伤害，本回合其跳过弃牌阶段且不能使用点数（小）于此牌的牌。`,\r\n            mozouqiyin_append: lib.figurer(`特性：联动`),\r\n            budingpaidui: `布丁派对`,\r\n            budingpaidui_info: `当你使用一张牌后，若点数（小）于前一张被使用的牌，你可摸一张牌，然后用以下未选过的一项替代之前（）内的内容：小，大，等。<br>\r\n\t\t\t三项均被触发后或一轮开始时，重置选项。`,\r\n            budingpaidui_append: lib.figurer(`特性：大连营`),\r\n            MinamiNami: `美波七海`,\r\n            Noracat: `野良喵`,\r\n            Kano: `鹿乃`,\r\n            HanamaruHareru: `花丸晴琉`,\r\n        },\r\n    };\r\n});\r\n\n\n//# sourceURL=webpack:///./character/clubs.ts?")},"./character/emperor.ts":()=>{eval("\r\nwindow.game.import('character', function (lib, game, ui, get, ai, _status) {\r\n    let Evt;\r\n    return {\r\n        name: 'emperor',\r\n        connect: true,\r\n        character: {\r\n            sp_KaguraMea: ['female', 'shen', 3, ['zhigao', 'tiangou']],\r\n            sp_MinatoAqua: ['female', 'shen', 2, ['shenghuang', 'renzhan', 'kuase']],\r\n            sp_UsadaPekora: ['female', 'shen', '3/4', ['tuqi', 'shizu']],\r\n            sp_MononobeAlice: ['female', 'shen', 3, ['xianjing', 'chahui', 'duandai']],\r\n            sp_Ava: ['female', 'shen', Infinity, ['shuimu', 'liuxuan'], ['guoV']],\r\n            sp_Diana: ['female', 'shen', 2, ['tangyan', 'tianyin'], ['guoV']],\r\n            sp_KizunaAI: ['female', 'shen', 4, ['ai', 'ban']],\r\n        },\r\n        characterIntro: {\r\n            sp_MinatoAqua: '杏社终末之时的救世主，V始二十四年，姑苏城破，事态危急，华夏之人皆念圣皇爱人亲民，不忍坐视，有义士曰字幕组，以《taking over》、《for the win》两利器夜刺霓虹上将，霓虹上将中刃即死，义士亦为左右斩之，杏军大乱，姑苏周围城郡crew往来助之，大破杏军，圣皇既此知杏高层为人，自立为皇，护一方百姓。',\r\n        },\r\n        skill: {\r\n            zhigao: {\r\n                skillAnimation: true,\r\n                animationColor: 'thunder',\r\n                trigger: { global: 'changeHpBegin' },\r\n                limited: true,\r\n                unique: true,\r\n                mark: true,\r\n                filter(Evt, player) {\r\n                    if (player.storage.zhigao)\r\n                        return false;\r\n                    return Evt.num != 0 && Evt.player.isDamaged() && player == _status.currentPhase;\r\n                },\r\n                content() {\r\n                    player.storage.zhigao = true;\r\n                    player.awakenSkill('zhigao');\r\n                    trigger.cancel();\r\n                    if (trigger.num < 0) {\r\n                        game.broadcast(function () {\r\n                            if (lib.config.background_audio) {\r\n                                game.playAudio('effect', 'damage2');\r\n                            }\r\n                        });\r\n                        trigger.player.$damage(player);\r\n                        player.$damagepop(-Math.abs(trigger.num), 'thunder');\r\n                        trigger.player.loseMaxHp(Math.abs(trigger.num), true);\r\n                    }\r\n                    else if (trigger.num > 0) {\r\n                        game.broadcast(function () {\r\n                            if (lib.config.background_audio) {\r\n                                game.playAudio('effect', 'recover');\r\n                            }\r\n                        });\r\n                        game.broadcastAll(function (player) {\r\n                            if (lib.config.animation && !lib.config.low_performance) {\r\n                                player.$recover();\r\n                            }\r\n                        }, trigger.player);\r\n                        player.$damagepop(Math.abs(trigger.num), 'thunder');\r\n                        trigger.player.gainMaxHp(Math.abs(trigger.num), true);\r\n                    }\r\n                }\r\n            },\r\n            tiangou: {\r\n                init(player, skill) {\r\n                    player.storage[skill] = [];\r\n                },\r\n                trigger: { global: 'roundStart' },\r\n                content() {\r\n                    'step 0';\r\n                    if (false) { var bigImg; }\r\n                    if (false) {}\r\n                    var list = player.storage.tiangou_list;\r\n                    list.removeArray(player.storage.tiangou);\r\n                    Evt.videoId = lib.status.videoId++;\r\n                    for (var i = 0; i < list.length; i++) {\r\n                        list[i] = [['', '', list[i], list[i]]];\r\n                    }\r\n                    game.broadcastAll(function (id, choicelist) {\r\n                        var dialog = ui.create.dialog('『天狗食日』 声明一个阶段');\r\n                        choicelist.forEach(element => {\r\n                            dialog.add([element, 'vcard']);\r\n                        });\r\n                        dialog.videoId = id;\r\n                    }, Evt.videoId, list);\r\n                    'step 1';\r\n                    player.chooseButton().set('dialog', Evt.videoId).set('prompt', get.prompt('tiangou'));\r\n                    'step 2';\r\n                    game.broadcastAll('closeDialog', Evt.videoId);\r\n                    if (result.bool) {\r\n                        game.delay(0.5);\r\n                        game.log(player, '声明了', result.links[0][2]);\r\n                        player.chat(get.translation(result.links[0][2]));\r\n                        player.storage.tiangou.add(result.links[0][2]);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 3';\r\n                    game.delay(0.5);\r\n                    player.chooseTarget(true, '『天狗食日』：选定一名角色，本轮内只有其能执行声明阶段');\r\n                    'step 4';\r\n                    if (result.bool) {\r\n                        player.logSkill('tiangou', result.targets[0]);\r\n                        result.targets[0].addTempSkill('tiangou_limit', 'roundStart');\r\n                        result.targets[0].storage.tiangou_limit.add(player.storage.tiangou[player.storage.tiangou.length - 1]);\r\n                    }\r\n                    'step 5';\r\n                    player.storage.tiangou_list = ['phaseJudge', 'phaseDraw', 'phaseUse', 'phaseDiscard'];\r\n                    if (player.storage.tiangou.length == player.storage.tiangou_list.length) {\r\n                        player.getSkills(true, false).forEach(function (skill) {\r\n                            if (lib.skill[skill].init) {\r\n                                lib.skill[skill].init(Evt.player, skill);\r\n                            }\r\n                        });\r\n                        player.awakenedSkills.forEach(function (skill) {\r\n                            player.restoreSkill(skill);\r\n                        });\r\n                        player.update();\r\n                    }\r\n                },\r\n                group: ['tiangou_list'],\r\n                subSkill: {\r\n                    list: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = ['phaseJudge', 'phaseDraw', 'phaseUse', 'phaseDiscard'];\r\n                        },\r\n                    },\r\n                    limit: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = [];\r\n                        },\r\n                        firstDo: true,\r\n                        direct: true,\r\n                        trigger: { global: ['phaseJudgeBefore', 'phaseDrawBefore', 'phaseUseBefore', 'phaseDiscardBefore'] },\r\n                        filter(Evt, player) {\r\n                            return Evt.player != player && player.storage.tiangou_limit.contains(Evt.name);\r\n                        },\r\n                        content() {\r\n                            player.line(trigger.player, 'thunder');\r\n                            game.log(trigger.player, '的', '#y' + player.storage.tiangou_limit, '被跳过了');\r\n                            trigger.cancel();\r\n                        },\r\n                        onremove(player) {\r\n                            delete player.storage.tiangou_limit;\r\n                        },\r\n                    }\r\n                },\r\n            },\r\n            shenghuang: {\r\n                locked: true,\r\n                init(player) {\r\n                    player.storage.shenghuang = 0;\r\n                    if (get.mode() == 'identity' && get.zhu(player) == player && game.players.length > 4)\r\n                        player.maxHp--;\r\n                },\r\n                global: ['shenghuang_put', 'shenghuang_rec'],\r\n                group: ['shenghuang_draw', 'shenghuang_lose', 'shenghuang_ret'],\r\n                subSkill: {\r\n                    put: {\r\n                        trigger: { global: 'phaseBegin' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        priority: 777,\r\n                        filter(Evt, player) {\r\n                            return player.hp;\r\n                        },\r\n                        content() {\r\n                            player.storage.shenghuang_put = player.hp;\r\n                        }\r\n                    },\r\n                    draw: {\r\n                        init(player) {\r\n                            if (get.zhu(player) == player && game.players.length > 4) {\r\n                                player.storage.shenghuang_draw = 4;\r\n                            }\r\n                            else {\r\n                                player.storage.shenghuang_draw = 3;\r\n                            }\r\n                            if (player.hasSkill('shenghuang_draw'))\r\n                                player.markSkill('shenghuang_draw');\r\n                        },\r\n                        marktext: '圣',\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '剩余&张数值为2的体力卡',\r\n                            name: '剩余体力卡',\r\n                        },\r\n                        forced: true,\r\n                        priority: 777,\r\n                        skillAnimation: true,\r\n                        animationColor: 'gray',\r\n                        trigger: {\r\n                            player: \"dying\",\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return player.storage.shenghuang_draw > 0;\r\n                        },\r\n                        content() {\r\n                            player.maxHp = 2;\r\n                            player.recover(player.maxHp - player.hp);\r\n                            player.storage.shenghuang_draw--;\r\n                            player.syncStorage('shenghuang_draw');\r\n                            if (!player.storage.shenghuang_draw) {\r\n                                player.unmarkSkill('shenghuang_draw');\r\n                                player.removeSkill('shenghuang_draw');\r\n                            }\r\n                        },\r\n                    },\r\n                    lose: {\r\n                        marktext: '愈',\r\n                        intro: {\r\n                            content: '当前回合已失去了黑色牌，在本回合结束时，其他角色将体力回复至回合开始时的状态。',\r\n                            name: '圣皇之愈',\r\n                        },\r\n                        trigger: { player: 'loseAfter' },\r\n                        forced: true,\r\n                        priority: 777,\r\n                        filter(Evt, player) {\r\n                            if (!(Evt.getParent().cards || Evt.card))\r\n                                return false;\r\n                            var cards = Evt.getParent().cards;\r\n                            var bc = 0;\r\n                            for (var i = 0; i < cards.length; i++) {\r\n                                if (get.color(cards[i]) == 'black')\r\n                                    bc++;\r\n                            }\r\n                            return bc;\r\n                        },\r\n                        content() {\r\n                            player.storage.shenghuang++;\r\n                            player.markSkill('shenghuang_lose');\r\n                        },\r\n                    },\r\n                    ret: {\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        priority: 888,\r\n                        trigger: { global: 'phaseAfter' },\r\n                        filter(Evt, player) {\r\n                            return player.storage.shenghuang;\r\n                        },\r\n                        content() {\r\n                            player.storage.shenghuang = 0;\r\n                            player.unmarkSkill('shenghuang_lose');\r\n                        }\r\n                    },\r\n                    rec: {\r\n                        forced: true,\r\n                        priority: 777,\r\n                        trigger: { global: 'phaseEnd' },\r\n                        filter(Evt, player) {\r\n                            if (player.hasSkill('shenghuang'))\r\n                                return false;\r\n                            if (player.storage.shenghuang_put == undefined)\r\n                                return false;\r\n                            if (!game.hasPlayer(cur => {\r\n                                return cur.hasSkill('shenghuang') && cur.storage.shenghuang > 0;\r\n                            }))\r\n                                return false;\r\n                            return player.storage.shenghuang_put > player.hp;\r\n                        },\r\n                        content() {\r\n                            var vq = player.storage.shenghuang_put - player.hp;\r\n                            if (vq > 0) {\r\n                                player.recover(vq);\r\n                            }\r\n                        },\r\n                    }\r\n                },\r\n            },\r\n            renzhan: {\r\n                priority: 777,\r\n                trigger: { global: 'damageEnd' },\r\n                usable: 1,\r\n                check(Evt, player) {\r\n                    if (player.storage.shenghuang_draw == 0 && player.hp == 1)\r\n                        return false;\r\n                    return player.getUseValue({ name: 'sha' }) > 0;\r\n                },\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && Evt.player.hp > 0;\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    'step 0';\r\n                    player.loseHp();\r\n                    var card = get.cards()[0];\r\n                    var cards = [card];\r\n                    while (get.name(card) != 'sha') {\r\n                        card = get.cards()[0];\r\n                        cards.push(card);\r\n                    }\r\n                    Evt.cards = cards;\r\n                    'step 1';\r\n                    game.cardsGotoOrdering(Evt.cards);\r\n                    game.delayx();\r\n                    'step 2';\r\n                    player.showCards(Evt.cards, '『瞬息刃斩』亮出牌堆');\r\n                    player.chooseControlList(['获得这些牌',\r\n                        '获得其中的【杀】并对一名角色使用任意张【杀】'], true).set('ai', function () {\r\n                        var player = _status.event.player;\r\n                        if (player.countCards('h', { name: 'sha' }) >= 1 && Evt.cards.length <= 3)\r\n                            return 1;\r\n                        return 0;\r\n                    });\r\n                    'step 3';\r\n                    if (result.index == 0) {\r\n                        cards = Evt.cards;\r\n                        game.log(player, '获得了', cards);\r\n                        player.gain(cards, 'gain2');\r\n                        Evt.finish();\r\n                    }\r\n                    else if (result.index == 1) {\r\n                        var cards = [];\r\n                        Evt.cards.forEach(card => {\r\n                            if (get.name(card) == 'sha')\r\n                                cards.push(card);\r\n                        });\r\n                        Evt.cards = cards;\r\n                        player.showCards(Evt.cards, '获得其中的【杀】');\r\n                        game.delayx();\r\n                        player.gain(cards, 'gain2');\r\n                    }\r\n                    'step 4';\r\n                    var next = player.chooseTarget('###『刃斩』###指定一名角色，对其使用任意张【杀】', function (card, player, target) {\r\n                        return player != target;\r\n                    });\r\n                    next.set('targetprompt', ['RUA']);\r\n                    next.set('forced', false);\r\n                    next.set('ai', function (target) {\r\n                        var player = _status.event.player;\r\n                        var att = get.attitude(player, target);\r\n                        return 10 - att;\r\n                    });\r\n                    'step 5';\r\n                    if (result.bool) {\r\n                        var target = result.targets[0];\r\n                        Evt.target = target;\r\n                        game.log(player, '刃斩的目标为', target);\r\n                        target.addTempSkill('renzhan2', 'phaseEnd');\r\n                        target.storage.renzhan2 = true;\r\n                        player.logSkill('renzhan', target);\r\n                        player.chooseToUse('对' + get.translation(target) + '使用杀', { name: 'sha' }, target, -1);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 6';\r\n                    if (result.bool) {\r\n                        var target = Evt.target;\r\n                        if (target.storage.renzhan2 && player.canUse({ name: 'sha' }, target, false)) {\r\n                            player.chooseToUse('对' + get.translation(target) + '继续使用杀', { name: 'sha' }, target, -1);\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 7';\r\n                    var target = Evt.target;\r\n                    if (result.bool) {\r\n                        if (target.storage.renzhan2 && player.canUse({ name: 'sha' }, target, false)) {\r\n                            Evt.goto(6);\r\n                        }\r\n                    }\r\n                    if (target) {\r\n                        target.unmarkSkill('renzhan2');\r\n                        target.removeSkill('renzhan2');\r\n                    }\r\n                },\r\n                ai: {\r\n                    maixie: true,\r\n                },\r\n            },\r\n            renzhan2: {\r\n                marktext: \"危\",\r\n                locked: true,\r\n                intro: {\r\n                    name: '危',\r\n                    content: '成为瞬息刃斩的目标',\r\n                },\r\n                mark: true,\r\n                firstDo: true,\r\n                silent: true,\r\n                forced: true,\r\n                popup: false,\r\n                trigger: { player: 'dying' },\r\n                filter(Evt, player) {\r\n                    return player.isAlive();\r\n                },\r\n                onremove: true,\r\n                content() {\r\n                    player.storage.renzhan2 = false;\r\n                },\r\n            },\r\n            kuase: {\r\n                unique: true,\r\n                limited: true,\r\n                skillAnimation: true,\r\n                priority: 888,\r\n                animationStr: '夸色☆超级梦想',\r\n                trigger: { global: 'phaseAfter' },\r\n                prompt() {\r\n                    var player = _status.event.player;\r\n                    return '是否发动『阿库娅色☆超级梦想』<br>（本回合所有角色回复体力之和为' + player.storage.kuase_date + '点）';\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.storage.kuase_date;\r\n                },\r\n                check(Evt, player) {\r\n                    return !player.storage.shenghuang_draw || player.storage.kuase_date >= player.storage.shenghuang_draw;\r\n                },\r\n                content() {\r\n                    var dream = player.storage.kuase_date;\r\n                    player.draw(dream);\r\n                    player.getStat().card.sha = 0;\r\n                    player.phaseUse();\r\n                    player.storage.kuase = true;\r\n                    player.awakenSkill('kuase');\r\n                },\r\n                group: ['kuase_date', 'kuase_ret'],\r\n                subSkill: {\r\n                    date: {\r\n                        init(player) {\r\n                            player.storage.kuase_date = 0;\r\n                        },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        priority: 777,\r\n                        trigger: { global: 'recoverAfter' },\r\n                        filter(Evt, player) {\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            player.storage.kuase_date += trigger.num;\r\n                        },\r\n                    },\r\n                    ret: {\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        priority: 666,\r\n                        trigger: { global: 'phaseAfter' },\r\n                        filter(Evt, player) {\r\n                            return player.storage.kuase_date;\r\n                        },\r\n                        content() {\r\n                            player.storage.kuase_date = 0;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            xianjing: {\r\n                init(player) {\r\n                    player.storage.xianjing = [];\r\n                },\r\n                marktext: \"仙\",\r\n                intro: {\r\n                    name: '仙境奇遇',\r\n                    content(storage, player, skill) {\r\n                        if (storage.length == 1) {\r\n                            return '上一张使用的牌，花色为' + get.translation(storage);\r\n                        }\r\n                        else if (storage.length > 1) {\r\n                            return '先前使用的牌，花色为' + get.translation(storage);\r\n                        }\r\n                        else {\r\n                            return '本回合尚未使用牌';\r\n                        }\r\n                    },\r\n                },\r\n                trigger: { player: 'useCardAfter' },\r\n                priority: 555,\r\n                filter(Evt, player) {\r\n                    if (!player.storage.xianjing.length) {\r\n                        return false;\r\n                    }\r\n                    else if ((player.storage.xianjing[player.storage.xianjing.length - 1] == 'heart' && get.suit(Evt.card) == 'spade')\r\n                        || (player.storage.xianjing[player.storage.xianjing.length - 1] == 'spade' && get.suit(Evt.card) == 'diamond')\r\n                        || (player.storage.xianjing[player.storage.xianjing.length - 1] == 'diamond' && get.suit(Evt.card) == 'club')\r\n                        || (player.storage.xianjing[player.storage.xianjing.length - 1] == 'club' && get.suit(Evt.card) == 'heart')) {\r\n                        return true;\r\n                    }\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    game.broadcastAll(function (player) {\r\n                        var next = player.chooseTarget(function (card, player, target) {\r\n                            return true;\r\n                        });\r\n                        next.set('targetprompt', ['JK']);\r\n                        next.set('prompt', '指定一名角色，令其摸一张牌');\r\n                        next.set('forced', false);\r\n                        next.set('ai', function (target) {\r\n                            var att = get.attitude(player, target);\r\n                            return att;\r\n                        });\r\n                    }, player);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        result.targets[0].draw(player);\r\n                    }\r\n                },\r\n                group: ['xianjing_update', 'xianjing_back', 'xianjing_discard'],\r\n                subSkill: {\r\n                    update: {\r\n                        trigger: { player: 'useCardAfter' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        priority: 544,\r\n                        content() {\r\n                            if (!player.storage.xianjing.length) {\r\n                                player.storage.xianjing.add(get.suit(trigger.card));\r\n                            }\r\n                            else if ((player.storage.xianjing[player.storage.xianjing.length - 1] == 'heart' && get.suit(trigger.card) == 'spade')\r\n                                || (player.storage.xianjing[player.storage.xianjing.length - 1] == 'spade' && get.suit(trigger.card) == 'diamond')\r\n                                || (player.storage.xianjing[player.storage.xianjing.length - 1] == 'diamond' && get.suit(trigger.card) == 'club')\r\n                                || (player.storage.xianjing[player.storage.xianjing.length - 1] == 'club' && get.suit(trigger.card) == 'heart')) {\r\n                                player.storage.xianjing.push(get.suit(trigger.card));\r\n                            }\r\n                            else {\r\n                                player.storage.xianjing.splice(0, player.storage.xianjing.length, get.suit(trigger.card));\r\n                            }\r\n                            player.markSkill('xianjing');\r\n                            if (player.storage.xianjing.length == 4) {\r\n                                player.storage.duandai++;\r\n                                player.markSkill('duandai');\r\n                            }\r\n                        },\r\n                    },\r\n                    back: {\r\n                        trigger: { player: 'phaseAfter' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        content() {\r\n                            player.unmarkSkill('xianjing');\r\n                            player.storage.xianjing = [];\r\n                        }\r\n                    },\r\n                    discard: {\r\n                        trigger: { global: 'phaseEnd' },\r\n                        forced: false,\r\n                        priority: 555,\r\n                        prompt: '你可选择一项：令一名其他角色获得「小兔子」标记，或令所有「小兔子」各摸一张牌。',\r\n                        filter(Evt, player) {\r\n                            var suits = [];\r\n                            game.getGlobalHistory('cardMove', evt => {\r\n                                if (evt.name != 'lose' && evt.name != 'cardsDiscard')\r\n                                    return false;\r\n                                if (evt.name == 'lose' && evt.position != ui.discardPile)\r\n                                    return false;\r\n                                suits.addArray(get.suit3(evt.cards));\r\n                            });\r\n                            if (suits.length >= 4)\r\n                                return true;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            player.chooseControlList(['令一名其他角色获得「小兔子」标记',\r\n                                '令所有「小兔子」各摸一张牌'], true, function (Evt, player) {\r\n                                return _status.event.index;\r\n                            });\r\n                            'step 1';\r\n                            if (result.index == 0) {\r\n                                game.broadcastAll(function (player) {\r\n                                    var next = player.chooseTarget(function (card, player, target) {\r\n                                        return target != player && !target.hasSkill('xiaotuzi');\r\n                                    });\r\n                                    next.set('targetprompt', ['小兔子']);\r\n                                    next.set('prompt', '指定一名角色，令其成为小兔子');\r\n                                    next.set('forced', false);\r\n                                    next.set('ai', function (target) {\r\n                                        var att = get.attitude(player, target);\r\n                                        return att;\r\n                                    });\r\n                                }, player);\r\n                            }\r\n                            else if (result.index == 1) {\r\n                                game.hasPlayer(cur => {\r\n                                    if (cur.hasSkill('xiaotuzi')) {\r\n                                        cur.draw();\r\n                                    }\r\n                                });\r\n                            }\r\n                            else {\r\n                                Evt.finish();\r\n                            }\r\n                            'step 2';\r\n                            if (result.bool) {\r\n                                result.targets[0].addSkill('xiaotuzi');\r\n                                result.targets[0].markSkill('xiaotuzi');\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            chahui: {\r\n                forced: false,\r\n                priority: 543,\r\n                trigger: { player: 'useCardAfter' },\r\n                filter(Evt, player) {\r\n                    if (!player.isPhaseUsing())\r\n                        return false;\r\n                    return game.hasPlayer(cur => {\r\n                        return cur.hasSkill('xiaotuzi') && cur.countCards('h');\r\n                    });\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    game.broadcastAll(function (player) {\r\n                        var next = player.chooseTarget(function (card, player, target) {\r\n                            return target != player && target.hasSkill('xiaotuzi');\r\n                        });\r\n                        next.set('prompt', '指定一名小兔子，令其出一张牌');\r\n                        next.set('forced', false);\r\n                        next.set('ai', function (target) {\r\n                            var att = get.attitude(player, target);\r\n                            return att;\r\n                        });\r\n                    }, player);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        _status.event.target = result.targets[0];\r\n                        game.broadcastAll(function (target) {\r\n                            var next = target.chooseCard('h', 1, '是否紧跟爱丽丝之后使用一张牌');\r\n                            next.set('forced', false);\r\n                            next.set('ai', card => {\r\n                                if (get.name(card) == 'shan')\r\n                                    return 10;\r\n                                var player;\r\n                                game.hasPlayer(cur => {\r\n                                    if (cur.hasSkill('chahui'))\r\n                                        player = cur;\r\n                                });\r\n                                if ((player.storage.xianjing[player.storage.xianjing.length - 1] == 'heart' && get.suit(card) == 'spade')\r\n                                    || (player.storage.xianjing[player.storage.xianjing.length - 1] == 'spade' && get.suit(card) == 'diamond')\r\n                                    || (player.storage.xianjing[player.storage.xianjing.length - 1] == 'diamond' && get.suit(card) == 'club')\r\n                                    || (player.storage.xianjing[player.storage.xianjing.length - 1] == 'club' && get.suit(card) == 'heart')) {\r\n                                    return 100;\r\n                                }\r\n                            });\r\n                        }, _status.event.target);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        Evt.card = result.cards[0];\r\n                        if ((player.storage.xianjing[player.storage.xianjing.length - 1] == 'heart' && get.suit(Evt.card) == 'spade')\r\n                            || (player.storage.xianjing[player.storage.xianjing.length - 1] == 'spade' && get.suit(Evt.card) == 'diamond')\r\n                            || (player.storage.xianjing[player.storage.xianjing.length - 1] == 'diamond' && get.suit(Evt.card) == 'club')\r\n                            || (player.storage.xianjing[player.storage.xianjing.length - 1] == 'club' && get.suit(Evt.card) == 'heart')) {\r\n                            player.gain(Evt.card);\r\n                            game.log(player, '获得了', Evt.card);\r\n                            player.chooseUseTarget(Evt.card, true);\r\n                        }\r\n                        else {\r\n                            _status.event.target.chooseUseTarget(Evt.card, true);\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                },\r\n                ai: {\r\n                    combo: 'xianjing',\r\n                },\r\n            },\r\n            xiaotuzi: {\r\n                forced: false,\r\n                marktext: \"🐇\",\r\n                mark: true,\r\n                locked: true,\r\n                priority: 543,\r\n                intro: {\r\n                    name: '<font color=#ee2>小兔子标记</font>',\r\n                    content: '成为了爱丽丝的小兔子',\r\n                },\r\n                trigger: { player: 'useCardAfter' },\r\n                filter(Evt, player) {\r\n                    if (!player.isPhaseUsing())\r\n                        return false;\r\n                    return game.hasPlayer(cur => {\r\n                        return cur.hasSkill('chahui') && cur.countCards('h');\r\n                    });\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    game.broadcastAll(function (player) {\r\n                        var next = player.chooseTarget(function (card, player, target) {\r\n                            return target != player && target.hasSkill('chahui');\r\n                        });\r\n                        next.set('prompt', '指定爱丽丝，令其出一张牌');\r\n                        next.set('forced', false);\r\n                        next.set('ai', function (target) {\r\n                            var att = get.attitude(player, target);\r\n                            return att;\r\n                        });\r\n                    }, player);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        _status.event.target = result.targets[0];\r\n                        game.broadcastAll(function (target, trigger) {\r\n                            var next = target.chooseCard('h', 1, '是否紧跟小兔子之后使用一张牌');\r\n                            next.set('forced', false);\r\n                            next.set('ai', card => {\r\n                                if (get.name(card) == 'shan')\r\n                                    return 10;\r\n                                if ((get.suit(trigger.card) == 'heart' && get.suit(card) == 'spade')\r\n                                    || (get.suit(trigger.card) == 'spade' && get.suit(card) == 'diamond')\r\n                                    || (get.suit(trigger.card) == 'diamond' && get.suit(card) == 'club')\r\n                                    || (get.suit(trigger.card) == 'club' && get.suit(card) == 'heart')) {\r\n                                    return 100;\r\n                                }\r\n                            });\r\n                        }, _status.event.target, trigger);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        Evt.card = result.cards[0];\r\n                        if ((get.suit(trigger.card) == 'heart' && get.suit(Evt.card) == 'spade')\r\n                            || (get.suit(trigger.card) == 'spade' && get.suit(Evt.card) == 'diamond')\r\n                            || (get.suit(trigger.card) == 'diamond' && get.suit(Evt.card) == 'club')\r\n                            || (get.suit(trigger.card) == 'club' && get.suit(Evt.card) == 'heart')) {\r\n                            player.gain(Evt.card);\r\n                            game.log(player, '获得了', Evt.card);\r\n                            player.chooseUseTarget(Evt.card, true);\r\n                        }\r\n                        else {\r\n                            _status.event.target.chooseUseTarget(Evt.card, true);\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                },\r\n                group: ['xiaotuzi_lose'],\r\n                subSkill: {\r\n                    lose: {\r\n                        trigger: { global: 'dieBegin' },\r\n                        filter(Evt, player) {\r\n                            return Evt.player.hasSkill('xianjing');\r\n                        },\r\n                        forced: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        content() {\r\n                            player.unmarkSkill('xiaotuzi');\r\n                            player.removeSkill('xiaotuzi');\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            duandai: {\r\n                init(player) {\r\n                    player.storage.duandai = 0;\r\n                },\r\n                notemp: true,\r\n                marktext: 'Alice',\r\n                intro: {\r\n                    content: '已完成一组Alice序列，可以在回合结束时回复体力值',\r\n                },\r\n                skillAnimation: true,\r\n                priority: 543,\r\n                animationStr: '嚣张缎带',\r\n                trigger: { player: 'phaseEnd' },\r\n                filter(Evt, player) {\r\n                    if (player.hp == player.maxHp)\r\n                        return false;\r\n                    return player.storage.duandai;\r\n                },\r\n                content() {\r\n                    player.recover(player.maxHp - player.hp);\r\n                    player.storage.duandai = 0;\r\n                    player.unmarkSkill('duandai');\r\n                },\r\n                ai: {\r\n                    combo: 'xianjing',\r\n                },\r\n            },\r\n            shuimu: {\r\n                trigger: { player: 'damageBegin' },\r\n                filter(Evt, player) {\r\n                    return player.storage.liuxuan && player.maxHp == Infinity;\r\n                },\r\n                locked: true,\r\n                forced: true,\r\n                priority: 6,\r\n                content() {\r\n                    var num = 0;\r\n                    switch (player.storage.liuxuan) {\r\n                        case 'liuxuan_lakua':\r\n                            num = 4;\r\n                            break;\r\n                        case 'liuxuan_huoli':\r\n                            num = 3;\r\n                            break;\r\n                        case 'liuxuan_haixiu':\r\n                            num = 4;\r\n                            break;\r\n                        case 'liuxuan_jiangzui':\r\n                            num = 5;\r\n                            break;\r\n                        case 'liuxuan_keai':\r\n                            num = 7;\r\n                            break;\r\n                    }\r\n                    player.maxHp = num;\r\n                    player.hp = num;\r\n                    player.update();\r\n                },\r\n                ai: {\r\n                    combo: 'liuxuan',\r\n                },\r\n            },\r\n            liuxuan: {\r\n                init(player, skill) {\r\n                    player.storage[skill] = 'liuxuan_lakua';\r\n                    player.addSkill('liuxuan_lakua');\r\n                    game.broadcastAll(function (player) {\r\n                        player._liuxuan_mark = player.mark('😅', {\r\n                            name(storage, player) {\r\n                                var skill = player.storage.liuxuan;\r\n                                return '<div class=\"text center browntext\">' + lib.translate[skill] + '小向晚</div>';\r\n                            },\r\n                            content(content, player) {\r\n                                var list = ['liuxuan_lakua', 'liuxuan_huoli', 'liuxuan_haixiu', 'liuxuan_jiangzui', 'liuxuan_keai'];\r\n                                var str = '';\r\n                                for (var i = 0; i < list.length; i++) {\r\n                                    if (player.hasSkill(list[i]))\r\n                                        str += '<span class=\"legendtext\">';\r\n                                    str += lib.translate[list[i]];\r\n                                    str += '：';\r\n                                    str += lib.translate[list[i] + '_describe'];\r\n                                    if (player.hasSkill(list[i]))\r\n                                        str += '</span>';\r\n                                    str += '<br>';\r\n                                }\r\n                                return str;\r\n                            }\r\n                        });\r\n                    }, player);\r\n                    if (lib.skill[skill].process)\r\n                        lib.skill[skill].process(skill, player.storage[skill], player);\r\n                    game.playAudio('skill', 'liuxuan_lakua1');\r\n                },\r\n                trigger: { player: ['useCardBegin', 'respondBegin'] },\r\n                filter(Evt, player) {\r\n                    var number = get.number(Evt.card);\r\n                    var list = [];\r\n                    if (number) {\r\n                        if (number % 3 == 0)\r\n                            list.add('liuxuan_huoli');\r\n                        if (number % 4 == 0)\r\n                            list.add('liuxuan_haixiu');\r\n                        if (number % 5 == 0)\r\n                            list.add('liuxuan_jiangzui');\r\n                        if (number % 7 == 0)\r\n                            list.add('liuxuan_keai');\r\n                    }\r\n                    if (list.length == 0)\r\n                        list.add('liuxuan_lakua');\r\n                    list.remove(player.storage.liuxuan);\r\n                    return list.length;\r\n                },\r\n                process(skill, name, player) {\r\n                    if (lib.translate[name]) {\r\n                        game.broadcastAll(function (skill, name, player) {\r\n                            if (!player._liuxuan_mark)\r\n                                return;\r\n                            switch (name) {\r\n                                case 'liuxuan_lakua':\r\n                                    player._liuxuan_mark.firstChild.innerHTML = '😅';\r\n                                    break;\r\n                                case 'liuxuan_huoli':\r\n                                    player._liuxuan_mark.firstChild.innerHTML = '🤗';\r\n                                    break;\r\n                                case 'liuxuan_haixiu':\r\n                                    player._liuxuan_mark.firstChild.innerHTML = '🤣';\r\n                                    break;\r\n                                case 'liuxuan_jiangzui':\r\n                                    player._liuxuan_mark.firstChild.innerHTML = '😡';\r\n                                    break;\r\n                                case 'liuxuan_keai':\r\n                                    player._liuxuan_mark.firstChild.innerHTML = '😭';\r\n                                    break;\r\n                            }\r\n                            player.node.name.innerHTML = get.verticalStr(lib.translate[name] + '小向晚');\r\n                            lib.translate[skill + '_append'] = '<span class=\"changetext\">' + lib.translate[name] + '：' + lib.translate[name + '_describe'] + '</span>';\r\n                            player.update();\r\n                        }, skill, name, player);\r\n                    }\r\n                },\r\n                locked: true,\r\n                forced: true,\r\n                priority: 6,\r\n                content() {\r\n                    'step 0';\r\n                    var _a, _b, _c;\r\n                    let number = get.number(trigger.card);\r\n                    let list = [];\r\n                    if (number) {\r\n                        if (number % 3 == 0)\r\n                            list.add('liuxuan_huoli');\r\n                        if (number % 4 == 0)\r\n                            list.add('liuxuan_haixiu');\r\n                        if (number % 5 == 0)\r\n                            list.add('liuxuan_jiangzui');\r\n                        if (number % 7 == 0)\r\n                            list.add('liuxuan_keai');\r\n                    }\r\n                    if (list.length == 0)\r\n                        list.add('liuxuan_lakua');\r\n                    Evt.list = list;\r\n                    'step 1';\r\n                    if (Evt.list.length == 0) {\r\n                        Evt.finish();\r\n                    }\r\n                    else if (Evt.list.length == 1) {\r\n                        Evt.link = Evt.list.pop();\r\n                        var from = player.storage.liuxuan;\r\n                        player.removeSkill([from]);\r\n                        Evt.goto(3);\r\n                    }\r\n                    else if (Evt.list.length > 1) {\r\n                        let list = Evt.list.slice(0);\r\n                        player.chooseButton(true, ['选择一个姿态进入', [list, 'vcard'], 'hidden']).set('filterButton', function (button) {\r\n                            var player = _status.event.player;\r\n                            if (button.link[2] == player.storage.liuxuan)\r\n                                return false;\r\n                            return true;\r\n                        }).set('prompt', '选择一个姿态进入');\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool && result.links[0]) {\r\n                        var from = player.storage.liuxuan;\r\n                        player.removeSkill([from]);\r\n                        var link = result.links[0][2];\r\n                        Evt.link = link;\r\n                        Evt.list.remove(link);\r\n                    }\r\n                    'step 3';\r\n                    if (Evt.link && Evt.link != player.storage.liuxuan) {\r\n                        player.storage.liuxuan = Evt.link;\r\n                        player.popup(player.storage.liuxuan);\r\n                        if (Evt.link == 'liuxuan_jiangzui'\r\n                            && game.hasPlayer(cur => player != cur && cur.countGainableCards(player, 'he') > 0)) {\r\n                            player.chooseTarget(true, '『犟嘴』：' + lib.translate[Evt.link + '_describe'], function (card, player, target) {\r\n                                if (player == target)\r\n                                    return false;\r\n                                return target.countGainableCards(player, 'he') > 0;\r\n                            }).set('ai', function (target) {\r\n                                var player = _status.event.player;\r\n                                return -get.attitude(player, target) + Math.random();\r\n                            });\r\n                        }\r\n                        else {\r\n                            Evt.goto(9);\r\n                        }\r\n                    }\r\n                    'step 4';\r\n                    if (Evt.link == 'liuxuan_jiangzui' && ((_a = result === null || result === void 0 ? void 0 : result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        Evt.target = result.targets[0];\r\n                        player.logSkill(Evt.link, Evt.target);\r\n                        Evt.target.chooseCard('he', '无限溜旋-犟嘴：将一张牌交给' + get.translation(player), 1, true).ai = card => {\r\n                            return -get.value(card);\r\n                        };\r\n                    }\r\n                    else {\r\n                        Evt.goto(9);\r\n                    }\r\n                    'step 5';\r\n                    if (Evt.link == 'liuxuan_jiangzui' && ((_b = result === null || result === void 0 ? void 0 : result.cards) === null || _b === void 0 ? void 0 : _b.length)) {\r\n                        Evt.target.$giveAuto(result.cards, player);\r\n                        player.gain(result.cards, Evt.target);\r\n                    }\r\n                    'step 6';\r\n                    if (Evt.link == 'liuxuan_jiangzui') {\r\n                        Evt.cards = player.getCards('h').removeArray(trigger.cards);\r\n                        Evt.videoId = lib.status.videoId++;\r\n                        var dialogx = ['『犟嘴』：选择一张牌，令其点数增加或减少1'];\r\n                        dialogx.push(Evt.cards);\r\n                        if (player.isOnline2()) {\r\n                            player.send(function (dialogx, id) {\r\n                                ui.create.dialog.apply(null, dialogx).videoId = id;\r\n                            }, dialogx, Evt.videoId);\r\n                        }\r\n                        Evt.dialog = ui.create.dialog.apply(null, dialogx);\r\n                        Evt.dialog.videoId = Evt.videoId;\r\n                        if (player != game.me || _status.auto) {\r\n                            Evt.dialog.style.display = 'none';\r\n                        }\r\n                        var next = player.chooseButton();\r\n                        next.set('dialog', Evt.videoId);\r\n                        next.set('ai', function (button) {\r\n                            if (get.number(button.link) == 7)\r\n                                return get.value(button.link) * 2 + Math.random();\r\n                            return get.value(button.link);\r\n                        });\r\n                        next.set('forceAuto', function () {\r\n                            return ui.selected.buttons.length == 1 || ui.dialog.buttons.length == 1;\r\n                        });\r\n                    }\r\n                    else {\r\n                        Evt.goto(9);\r\n                    }\r\n                    'step 7';\r\n                    if (Evt.link == 'liuxuan_jiangzui' && ((_c = result.links) === null || _c === void 0 ? void 0 : _c.length)) {\r\n                        Evt.links = result.links;\r\n                        var func = function (cards, id) {\r\n                            var dialog = get.idDialog(id);\r\n                            if (dialog) {\r\n                                for (var j = 0; j < cards.length; j++) {\r\n                                    for (var i = 0; i < dialog.buttons.length; i++) {\r\n                                        if (dialog.buttons[i].link == cards[j]) {\r\n                                            dialog.buttons[i].classList.add('glow');\r\n                                        }\r\n                                        else {\r\n                                            dialog.buttons[i].classList.add('unselectable');\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                        if (player.isOnline2()) {\r\n                            player.send(func, Evt.links, Evt.videoId);\r\n                        }\r\n                        else if (player == game.me && !_status.auto) {\r\n                            func(Evt.links, Evt.videoId);\r\n                        }\r\n                        let list = ['+1', '-1', '取消选择'];\r\n                        if (Evt.links[0].hasGaintag('liuxuan_lose2'))\r\n                            list.remove('-1');\r\n                        if (Evt.links[0].hasGaintag('liuxuan_plus2'))\r\n                            list.remove('+1');\r\n                        player.chooseControl(list, true).set('ai', function () {\r\n                            let card = _status.event.card;\r\n                            let controls = _status.event.controls;\r\n                            if ([5, 10, 12].contains(get.number(card) + 1) && controls.contains('+1'))\r\n                                return '+1';\r\n                            if ([5, 10, 12].contains(get.number(card) - 1) && controls.contains('-1'))\r\n                                return '-1';\r\n                            return controls.randomGet();\r\n                        }).set('card', Evt.links[0]);\r\n                    }\r\n                    else {\r\n                        if (player.isOnline2()) {\r\n                            player.send('closeDialog', Evt.videoId);\r\n                        }\r\n                        Evt.dialog.close();\r\n                        Evt.finish();\r\n                    }\r\n                    'step 8';\r\n                    if (Evt.link == 'liuxuan_jiangzui' && result.control) {\r\n                        switch (result.control) {\r\n                            case '取消选择':\r\n                                Evt.goto(5);\r\n                                break;\r\n                            case '+1': {\r\n                                if (Evt.links[0].hasGaintag('liuxuan_lose')) {\r\n                                    Evt.links[0].removeGaintag('liuxuan_lose');\r\n                                }\r\n                                else if (Evt.links[0].hasGaintag('liuxuan_lose2')) {\r\n                                    Evt.links[0].removeGaintag('liuxuan_lose2');\r\n                                    player.addGaintag(Evt.links, 'liuxuan_lose');\r\n                                }\r\n                                else if (Evt.links[0].hasGaintag('liuxuan_plus')) {\r\n                                    Evt.links[0].removeGaintag('liuxuan_plus');\r\n                                    player.addGaintag(Evt.links, 'liuxuan_plus2');\r\n                                }\r\n                                else {\r\n                                    player.addGaintag(Evt.links, 'liuxuan_plus');\r\n                                }\r\n                                break;\r\n                            }\r\n                            case '-1': {\r\n                                if (Evt.links[0].hasGaintag('liuxuan_plus')) {\r\n                                    Evt.links[0].removeGaintag('liuxuan_plus');\r\n                                }\r\n                                else if (Evt.links[0].hasGaintag('liuxuan_plus2')) {\r\n                                    Evt.links[0].removeGaintag('liuxuan_plus2');\r\n                                    player.addGaintag(Evt.links, 'liuxuan_plus');\r\n                                }\r\n                                else if (Evt.links[0].hasGaintag('liuxuan_lose')) {\r\n                                    Evt.links[0].removeGaintag('liuxuan_lose');\r\n                                    player.addGaintag(Evt.links, 'liuxuan_lose2');\r\n                                }\r\n                                else {\r\n                                    player.addGaintag(Evt.links, 'liuxuan_lose');\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (player.isOnline2()) {\r\n                        player.send('closeDialog', Evt.videoId);\r\n                    }\r\n                    Evt.dialog.close();\r\n                    'step 9';\r\n                    if (Evt.link) {\r\n                        player.storage.liuxuan = Evt.link;\r\n                        player.popup(player.storage.liuxuan);\r\n                        game.log(player, '进入了', '#g' + get.translation(Evt.link), '姿态');\r\n                        if (['liuxuan_lakua', 'liuxuan_keai', 'liuxuan_haixiu'].contains(Evt.link))\r\n                            player.logSkill(Evt.link);\r\n                        player.addSkill(Evt.link);\r\n                        game.delay();\r\n                        if (lib.skill.liuxuan.process)\r\n                            lib.skill.liuxuan.process('liuxuan', Evt.link, player);\r\n                    }\r\n                    Evt.goto(1);\r\n                },\r\n                mod: {\r\n                    number(card, player, number) {\r\n                        if (card.hasGaintag && card.hasGaintag('liuxuan_plus2'))\r\n                            return number + 2;\r\n                        if (card.hasGaintag && card.hasGaintag('liuxuan_lose2'))\r\n                            return number - 2;\r\n                        if (card.hasGaintag && card.hasGaintag('liuxuan_plus'))\r\n                            return number + 1;\r\n                        if (card.hasGaintag && card.hasGaintag('liuxuan_lose'))\r\n                            return number - 1;\r\n                    },\r\n                    aiOrder(player, card, num) {\r\n                        if (typeof card == 'object') {\r\n                            var key = get.number(card);\r\n                            if ([7, 14].contains(key)) {\r\n                                if (player.hp == Infinity)\r\n                                    return num - 20;\r\n                                else if (player.hp <= 3 && player.storage.liuxuan != 'liuxuan_keai')\r\n                                    return num + 10;\r\n                                else if (player.storage.liuxuan == 'liuxuan_keai')\r\n                                    return num - 3;\r\n                            }\r\n                            if ([5, 10].contains(key)) {\r\n                                if (player.storage.liuxuan != 'liuxuan_jiangzui')\r\n                                    return num + 10;\r\n                                if (player.storage.liuxuan == 'liuxuan_jiangzui')\r\n                                    return num - 3;\r\n                            }\r\n                            if ([4, 8, 12].contains(key)) {\r\n                                if (get.tag(card, 'damage'))\r\n                                    return num + 5;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                subSkill: {\r\n                    lakua: {\r\n                        audio: 3,\r\n                        onremove: true,\r\n                        mod: {\r\n                            globalTo(from, to, distance) {\r\n                                if (to != from) {\r\n                                    return distance - 1;\r\n                                }\r\n                            }\r\n                        },\r\n                    },\r\n                    huoli: {\r\n                        onremove(player) {\r\n                            player.popup(player.storage.liuxuan);\r\n                            player.draw();\r\n                            game.delay();\r\n                        },\r\n                        trigger: { player: 'useCard' },\r\n                        forced: true,\r\n                        filter(Evt) {\r\n                            return get.type(Evt.card) == 'trick';\r\n                        },\r\n                        content() {\r\n                            trigger.nowuxie = true;\r\n                        },\r\n                    },\r\n                    haixiu: {\r\n                        audio: 3,\r\n                        onremove: true,\r\n                        trigger: { source: 'damageBegin2', player: 'damageBegin4' },\r\n                        priority: 6,\r\n                        forced: true,\r\n                        popup: '溜旋-害羞',\r\n                        filter(Evt, player) {\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            trigger.num++;\r\n                        },\r\n                        ai: {\r\n                            damageBonus: true\r\n                        },\r\n                        mod: {\r\n                            canBeGained(card, source, player) {\r\n                                if (source != player && ['h'].contains(get.position(card)))\r\n                                    return false;\r\n                            },\r\n                            canBeDiscarded(card, source, player) {\r\n                                if (source != player && ['h'].contains(get.position(card)))\r\n                                    return false;\r\n                            },\r\n                        },\r\n                    },\r\n                    jiangzui: {\r\n                        audio: 3,\r\n                        onremove: true,\r\n                    },\r\n                    keai: {\r\n                        audio: 5,\r\n                        onremove(player) {\r\n                            if (player.hp == Infinity) {\r\n                                player.die();\r\n                            }\r\n                            else {\r\n                                player.hp = Math.ceil(player.hp / 2);\r\n                                player.update();\r\n                            }\r\n                        },\r\n                        init(player, skill) {\r\n                            player.draw(3);\r\n                        },\r\n                        trigger: { source: 'damageBegin2' },\r\n                        priority: 6,\r\n                        forced: true,\r\n                        popup: '溜旋-可爱',\r\n                        filter(Evt, player) {\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            trigger.num *= 2;\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            tangyan: {\r\n                audio: 10,\r\n                init(player, skill) {\r\n                    player.storage.tangyan = [];\r\n                },\r\n                trigger: { player: ['useCardAfter', 'respondAfter', 'loseAfter'] },\r\n                filter(Evt, player) {\r\n                    if (!player.isDamaged())\r\n                        return false;\r\n                    if (Evt.name == 'lose') {\r\n                        if (Evt.getParent().name != 'discard')\r\n                            return false;\r\n                        for (var i = 0; i < Evt.cards.length; i++) {\r\n                            var card = Evt.cards[i];\r\n                            if (get.position(card) == 'd' && get.type(card) == 'basic')\r\n                                return true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        return Evt.card && get.type(Evt.card) == 'basic';\r\n                    }\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    var _a, _b;\r\n                    Evt.source = _status.currentPhase;\r\n                    if (Evt.source != player && Evt.source.countCards('h', card => card.hasGaintag('xinjia'))) {\r\n                        Evt.xinjia = true;\r\n                    }\r\n                    Evt.filterCards = [];\r\n                    Evt.cards = (trigger.name == 'lose') ? (trigger.cards.filter(function (lose) {\r\n                        return get.type(lose) == 'basic';\r\n                    })) : [trigger.card];\r\n                    'step 1';\r\n                    var card = Evt.cards.shift();\r\n                    Evt.filterCards = get.inpile('basic', i => {\r\n                        if (player.storage.tangyan.contains(i))\r\n                            return false;\r\n                        if (lib.filter.filterCard({ name: i }, player, trigger) && player.hasUseTarget({ name: i, isCard: false })) {\r\n                            return true;\r\n                        }\r\n                    });\r\n                    Evt.filterCards = Evt.filterCards.map(i => {\r\n                        let natures = get.info({ name: i }).nature;\r\n                        let list = [[get.type(i), '', i]];\r\n                        if (natures && natures.length) {\r\n                            for (let j of natures) {\r\n                                if (j !== 'kami')\r\n                                    list.push([get.type(i), '', i, j]);\r\n                            }\r\n                        }\r\n                        console.log(i);\r\n                        return list;\r\n                    }).vkflat();\r\n                    if (Evt.xinjia) {\r\n                        if (!Evt.allBy)\r\n                            Evt.allBy = 1;\r\n                        Evt.goto(3);\r\n                    }\r\n                    console.log(Evt.filterCards);\r\n                    'step 2';\r\n                    Evt.list = ['令一名角色摸一张牌', '防止你下一次受到的伤害'];\r\n                    if (Evt.filterCards.length)\r\n                        Evt.list.push('视为使用一张本回合未以此法使用过的基本牌');\r\n                    var choice = [0, 1].randomGet();\r\n                    if (!player.storage.tangyan_on)\r\n                        choice = 1;\r\n                    if (Evt.list.length >= 3)\r\n                        choice = 2;\r\n                    player.chooseControlList(Evt.list, function () {\r\n                        return _status.event.choice;\r\n                    }).set('prompt', get.prompt2('tangyan')).set('choice', choice);\r\n                    'step 3';\r\n                    if (result.control != 'cancel2' || (Evt.xinjia && Evt.allBy && Evt.allBy <= 3)) {\r\n                        game.delayx();\r\n                        var str = '';\r\n                        if (Evt.allBy)\r\n                            str += '（依次执行每一项）';\r\n                        switch ((result.index + 1) || Evt.allBy) {\r\n                            case 1:\r\n                                {\r\n                                    player.logSkill('tangyan');\r\n                                    player.chooseTarget(true, '『穿心糖言』：令一名角色摸一张牌' + str).set('ai', function (target) {\r\n                                        var player = _status.event.player;\r\n                                        return get.attitude(player, target);\r\n                                    });\r\n                                }\r\n                                ;\r\n                                break;\r\n                            case 2:\r\n                                {\r\n                                    if (player.storage.tangyan_on !== true) {\r\n                                        player.logSkill('tangyan');\r\n                                        game.log(player, '防止了自己下一次受到的伤害' + str);\r\n                                        player.storage.tangyan_on = true;\r\n                                    }\r\n                                }\r\n                                ;\r\n                                break;\r\n                            case 3:\r\n                                {\r\n                                    player.logSkill('tangyan');\r\n                                    let list = Evt.filterCards;\r\n                                    if (list.length)\r\n                                        player.chooseButton(true, ['『穿心糖言』：选择一张本回合未以此法使用过的基本牌并使用之' + str, [list, 'vcard'], 'hidden']).set('ai', function (button) {\r\n                                            return get.order({ name: button.link[2], nature: button.link[3] });\r\n                                        });\r\n                                    Evt.goto(5);\r\n                                }\r\n                                ;\r\n                                break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 4';\r\n                    if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        result.targets[0].draw();\r\n                    }\r\n                    if (Evt.xinjia && Evt.allBy <= 2) {\r\n                        Evt.allBy++;\r\n                        if (Evt.filterCards.length > 0 || Evt.allBy <= 2)\r\n                            Evt.goto(3);\r\n                    }\r\n                    'step 5';\r\n                    if ((_b = result.links) === null || _b === void 0 ? void 0 : _b.length) {\r\n                        game.delayx();\r\n                        var card = result.links[0];\r\n                        player.storage.tangyan.add(card[2]);\r\n                        player.chooseUseTarget({ name: card[2], nature: card[3] }, true, 'noTargetDelay', 'nodelayx');\r\n                    }\r\n                    'step 6';\r\n                    if (Evt.cards.length) {\r\n                        Evt.goto(1);\r\n                    }\r\n                },\r\n                group: ['tangyan_on', 'tangyan_clear'],\r\n                subSkill: {\r\n                    on: {\r\n                        init(player, skill) {\r\n                            player.storage.tangyan_on = false;\r\n                            player.markSkill('tangyan_on');\r\n                        },\r\n                        marktext: '糖',\r\n                        intro: {\r\n                            mark(dialog, content, player) {\r\n                                if (player.storage.tangyan_on)\r\n                                    return '穿心糖言：防止' + get.translation(player) + '下一次受到的伤害';\r\n                            },\r\n                            content(content, player) {\r\n                                if (player.storage.tangyan_on)\r\n                                    return '穿心糖言：防止' + get.translation(player) + '下一次受到的伤害';\r\n                            }\r\n                        },\r\n                        trigger: { player: 'damageBegin3' },\r\n                        priority: 29,\r\n                        locked: true,\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return player.storage.tangyan_on;\r\n                        },\r\n                        content() {\r\n                            player.storage.tangyan_on = false;\r\n                            trigger.cancel();\r\n                        }\r\n                    },\r\n                    clear: {\r\n                        trigger: { global: 'phaseAfter' },\r\n                        priority: 29,\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            if (player.storage.tangyan && player.storage.tangyan.length) {\r\n                                player.storage.tangyan.length = 0;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            tianyin: {\r\n                audio: 5,\r\n                enable: 'phaseUse',\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = true;\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.countCards('h');\r\n                },\r\n                filterCard: true,\r\n                prepare: 'give',\r\n                discard: false,\r\n                lose: false,\r\n                filterTarget(card, player, target) {\r\n                    return target != player;\r\n                },\r\n                content() {\r\n                    player.damage('nosource');\r\n                    targets[0].gain(cards[0], player).gaintag.add('xinjia');\r\n                },\r\n                ai: {\r\n                    combo: 'tangyan',\r\n                    order(skill, player) {\r\n                        if (player.isDamaged())\r\n                            return 0;\r\n                        if (player.isHealthy() && player.needsToDiscard()) {\r\n                            if (player.storage.tangyan_on)\r\n                                return 5;\r\n                            return 10;\r\n                        }\r\n                        return 0;\r\n                    },\r\n                    result: {\r\n                        player(player, target) {\r\n                            if (player.storage.tangyan_on)\r\n                                return 0;\r\n                            if (player.isDamaged())\r\n                                return -2;\r\n                            return -0.5;\r\n                        },\r\n                        target(player, target) {\r\n                            if (target.hasSkillTag('nogain'))\r\n                                return 0;\r\n                            if (ui.selected.cards.length && ui.selected.cards[0].name == 'du') {\r\n                                if (target.hasSkillTag('nodu'))\r\n                                    return 0;\r\n                                return -10;\r\n                            }\r\n                            if (target.hasJudge('lebu'))\r\n                                return 0;\r\n                            var nh = target.countCards('h');\r\n                            var np = player.countCards('h');\r\n                            if (player.hp == player.maxHp || player.countCards('h') <= 1) {\r\n                                if (nh >= np - 1 && np <= player.hp && !target.hasSkill('haoshi'))\r\n                                    return 0;\r\n                            }\r\n                            return Math.max(1, 5 - nh);\r\n                        }\r\n                    },\r\n                    effect: {\r\n                        target(card, player, target) {\r\n                            if (player == target && get.type(card) == 'equip' && player.isHealthy()) {\r\n                                if (player.countCards('e', { subtype: get.subtype(card) })) {\r\n                                    var players = game.filterPlayer();\r\n                                    for (var i = 0; i < players.length; i++) {\r\n                                        if (players[i] != player && get.attitude(player, players[i]) > 0) {\r\n                                            return 0;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    threaten: 0.1,\r\n                },\r\n            },\r\n            ai: {\r\n                audio: 7,\r\n                priority: -10,\r\n                trigger: {\r\n                    global: 'roundStart'\r\n                },\r\n                onremove(player) {\r\n                    delete player.storage.ai;\r\n                },\r\n                forced: true,\r\n                skillList: ['ai_xu', 'ai_po', 'ai_ji', 'ai_zhong'],\r\n                content() {\r\n                    'step 0';\r\n                    var players = game.players.slice(0);\r\n                    Evt.players = players;\r\n                    var minPoint = Infinity;\r\n                    for (var i = 0; i < players.length; ++i) {\r\n                        if (!players[i].hasSkill('ai_point'))\r\n                            players[i].addSkill('ai_point');\r\n                        var point = players[i].storage.ai_point.point;\r\n                        if (point < minPoint)\r\n                            minPoint = point;\r\n                    }\r\n                    var minPointPlayers = [];\r\n                    for (var i = 0; i < players.length; ++i) {\r\n                        if (players[i].storage.ai_point.point == minPoint) {\r\n                            minPointPlayers.push(players[i]);\r\n                        }\r\n                    }\r\n                    if (!player.storage.ai) {\r\n                        player.storage.ai = true;\r\n                        Evt.goto(2);\r\n                        return;\r\n                    }\r\n                    if (minPointPlayers.length > 1) {\r\n                        player.chooseTarget('选择一个角色，给其一点伤害', true, function (card, player, target) {\r\n                            return _status.event.minPointPlayers.contains(target);\r\n                        }).set('ai', function (target) {\r\n                            var player = _status.event.player;\r\n                            return get.damageEffect(target, player, player);\r\n                        }).set('minPointPlayers', minPointPlayers);\r\n                    }\r\n                    else if (minPointPlayers.length == 1) {\r\n                        Evt._result = { bool: true, targets: minPointPlayers };\r\n                    }\r\n                    else {\r\n                        Evt._result = { bool: false };\r\n                    }\r\n                    'step 1';\r\n                    if (result.targets)\r\n                        result.targets[0].damage();\r\n                    for (var i = 0; i < Evt.players.length; ++i) {\r\n                        Evt.players[i].storage.ai_point.point = 0;\r\n                        Evt.players[i].syncStorage('ai_point');\r\n                        Evt.players[i].markSkill('ai_point');\r\n                    }\r\n                    'step 2';\r\n                    var skillList = [];\r\n                    for (var i = 0; i < lib.skill.ai.skillList.length; ++i) {\r\n                        var skill = lib.skill.ai.skillList[i];\r\n                        if (!lib.skill.global.contains(skill) && skill != 'ai_point') {\r\n                            skillList.push(skill);\r\n                        }\r\n                    }\r\n                    Evt.set('skillList', skillList);\r\n                    if (skillList.length > 1) {\r\n                        Evt.videoId = lib.status.videoId++;\r\n                        game.broadcastAll(function (id, skillList) {\r\n                            var dialog = ui.create.dialog('令所有角色获得以下一项效果');\r\n                            dialog.forcebutton = true;\r\n                            dialog.videoId = id;\r\n                            for (var i = 0; i < skillList.length; ++i) {\r\n                                dialog.add('<div class=\"popup text\" style=\"width:calc(100% - 10px);display:inline-block\">'\r\n                                    + get.translation(skillList[i]) + '<font class=\"firetext\">▷</font>' + get.skillInfoTranslation(skillList[i])\r\n                                    + '</div>');\r\n                            }\r\n                            dialog.op;\r\n                        }, Evt.videoId, skillList);\r\n                        console.log('before chooseControl');\r\n                        player.chooseControl(skillList, true).set('ai', function (button) {\r\n                            return _status.event.aiChoice;\r\n                        }).set('aiChoice', skillList.randomGet());\r\n                    }\r\n                    else if (skillList.length == 1) {\r\n                        Evt._result = { bool: true, control: skillList[0] };\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 3';\r\n                    if (typeof Evt.videoId != 'undefined')\r\n                        game.broadcastAll('closeDialog', Evt.videoId);\r\n                    var players = game.players.slice(0);\r\n                    if (result.control == 'ai_zhong') {\r\n                        var zhongMark = {\r\n                            x: players.length + 1,\r\n                            usedCardCount: 0\r\n                        };\r\n                        var deadMark = {\r\n                            lastDeadList: [],\r\n                        };\r\n                        game.addGlobalSkill('ai_zhong_deadSkillTrigger');\r\n                        game.addGlobalSkill('ai_zhong_onplayerdie');\r\n                        for (var i = 0; i < players.length; ++i) {\r\n                            players[i].addSkill('ai_zhongMark');\r\n                            players[i].storage.ai_zhongMark = zhongMark;\r\n                            player.syncStorage('ai_zhongMark');\r\n                            players[i].storage.ai_deadMark = deadMark;\r\n                            player.syncStorage('ai_deadMark');\r\n                        }\r\n                        var deadPlayers = game.dead.slice(0);\r\n                        for (var i = 0; i < deadPlayers.length; ++i) {\r\n                            lib.skill.ai_zhong.syncDeadPlayer(deadPlayers[i]);\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    var skills = game.expandSkills([result.control]);\r\n                    for (var i = 0; i < skills.length; ++i) {\r\n                        if (skills[i])\r\n                            game.addGlobalSkill(skills[i]);\r\n                    }\r\n                    for (var i = 0; i < players.length; ++i) {\r\n                        players[i].storage.ai_point.skillList.push(result.control);\r\n                    }\r\n                    if (result.control == 'ai_zhong') {\r\n                        Evt.firstNum = game.countPlayer() + 1;\r\n                        var firstNum = Evt.firstNum;\r\n                        var cards = [];\r\n                        var leftCard = game.createCard('👈', 'noclick', '');\r\n                        cards.push(leftCard);\r\n                        for (var i = 0; i < 10; ++i) {\r\n                            var card = game.createCard('' + (i + firstNum), 'noclick', '');\r\n                            cards.push(card);\r\n                        }\r\n                        var rightCard = game.createCard('👉', 'noclick', '');\r\n                        cards.push(rightCard);\r\n                        Evt.cards = cards;\r\n                        Evt.videoId = lib.status.videoId++;\r\n                        let func = function (id, cards) {\r\n                            var firstNum = game.countPlayer() + 1;\r\n                            var dialog = ui.create.dialog('选择一个数字', [cards, 'card'], 'hidden');\r\n                            dialog.videoId = id;\r\n                            for (var i = 0; i < dialog.buttons.length; ++i) {\r\n                                dialog.buttons[i].childNodes[1].style.visibility = 'hidden';\r\n                                dialog.buttons[i].childNodes[2].style.visibility = 'hidden';\r\n                                dialog.buttons[i].childNodes[3].style.visibility = 'hidden';\r\n                                dialog.buttons[i].node.background.innerHTML = dialog.buttons[i].name;\r\n                            }\r\n                            dialog.open();\r\n                        };\r\n                        if (player.isOnline2()) {\r\n                            player.send(func, Evt.videoId, cards);\r\n                        }\r\n                        else {\r\n                            func(Evt.videoId, cards);\r\n                        }\r\n                    }\r\n                    'step 4';\r\n                    var firstNum = Evt.firstNum;\r\n                    if (firstNum <= game.countPlayer())\r\n                        firstNum = game.countPlayer() + 1;\r\n                    Evt.firstNum = firstNum;\r\n                    let func = function (id, firstNum, hiddenLeft) {\r\n                        var dialog = get.idDialog(id);\r\n                        if (!dialog)\r\n                            return;\r\n                        if (hiddenLeft) {\r\n                            dialog.buttons[0].style.display = 'none';\r\n                        }\r\n                        else {\r\n                            dialog.buttons[0].style.display = '';\r\n                        }\r\n                        for (var i = 1; i < dialog.buttons.length - 1; ++i) {\r\n                            dialog.buttons[i].name = '' + (firstNum + i - 1);\r\n                            dialog.buttons[i].link.name = '' + (firstNum + i - 1);\r\n                            dialog.buttons[i].node.background.innerHTML = dialog.buttons[i].name;\r\n                        }\r\n                    };\r\n                    if (player.isOnline2()) {\r\n                        player.send(func, Evt.videoId, firstNum, firstNum == game.countPlayer() + 1);\r\n                    }\r\n                    else {\r\n                        func(Evt.videoId, firstNum, firstNum == game.countPlayer() + 1);\r\n                    }\r\n                    for (let i = 1; i < Evt.cards.length - 1; ++i) {\r\n                        Evt.cards[i].name = (firstNum + i - 1);\r\n                    }\r\n                    'step 5';\r\n                    player.chooseButton(true).set('dialog', Evt.videoId).set('ai', function (button) {\r\n                        if (button.link.name == '👈') {\r\n                            if (button.style.display != 'none')\r\n                                return Infinity;\r\n                            else\r\n                                return -50;\r\n                        }\r\n                        else if (button.link.name == '👉') {\r\n                            return -10;\r\n                        }\r\n                        return 100 / parseInt(button.link.name);\r\n                    });\r\n                    'step 6';\r\n                    var x = parseInt(result.links[0].name);\r\n                    if (!isNaN(x)) {\r\n                        if (player.isOnline2()) {\r\n                            player.send('closeDialog', Evt.videoId);\r\n                        }\r\n                        else {\r\n                            var dialog = get.idDialog(Evt.videoId);\r\n                            if (dialog)\r\n                                dialog.close();\r\n                        }\r\n                        player.storage.ai_zhongMark.x = x;\r\n                        var players = game.players.slice(0);\r\n                        for (var i = 0; i < players.length; ++i) {\r\n                            player.syncStorage('ai_zhongMark');\r\n                            players[i].markSkill('ai_zhongMark');\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (result.links[0].name == '👈') {\r\n                            Evt.firstNum -= 10;\r\n                        }\r\n                        else {\r\n                            Evt.firstNum += 10;\r\n                        }\r\n                        Evt.goto(4);\r\n                    }\r\n                },\r\n                group: 'ai_extraPoint',\r\n                subSkill: {\r\n                    point: {\r\n                        marktext: '爱',\r\n                        mark: true,\r\n                        init(player) {\r\n                            if (!player.storage.ai_point) {\r\n                                player.storage.ai_point = {};\r\n                            }\r\n                            if (typeof player.storage.ai_point.point != 'number')\r\n                                player.storage.ai_point.point = 0;\r\n                            if (!Array.isArray(player.storage.ai_point.skillList))\r\n                                player.storage.ai_point.skillList = [];\r\n                            player.syncStorage('ai_point');\r\n                            player.markSkill('ai_point');\r\n                        },\r\n                        intro: {\r\n                            name: '爱',\r\n                            content: 'mark',\r\n                            mark(dialog, storage, player) {\r\n                                if (storage.skillList.length > 0) {\r\n                                    dialog.addText('获得的效果：');\r\n                                    for (var i = 0; i < storage.skillList.length; ++i) {\r\n                                        dialog.add('<div><div class=\"skill firetext\">' + get.translation(storage.skillList[i]).slice(0, 2) + '</div><div>'\r\n                                            + get.skillInfoTranslation(storage.skillList[i], player) + '</div></div>');\r\n                                    }\r\n                                }\r\n                                if (storage.point > 0)\r\n                                    dialog.addText('共有' + get.cnNumber(storage.point) + '个「●标记」');\r\n                                else\r\n                                    dialog.addText('没有「●标记」');\r\n                            },\r\n                            markcount(storage, player) {\r\n                                return storage.point;\r\n                            }\r\n                        },\r\n                    },\r\n                    zhongMark: {\r\n                        marktext: '终',\r\n                        mark: true,\r\n                        intro: {\r\n                            name: '终',\r\n                            content: 'mark',\r\n                            mark(dialog, storage, player) {\r\n                                dialog.addText('每第' + get.cnNumber(storage.x) + '张牌之使用者+❸');\r\n                                if (!storage)\r\n                                    return;\r\n                                dialog.addText('已使用' + get.cnNumber(storage.usedCardCount) + '牌');\r\n                                dialog.addText('距离下一次触发还需使用' + get.cnNumber(storage.x - storage.usedCardCount % storage.x) + '张牌');\r\n                            },\r\n                            markcount(storage, player) {\r\n                                if (!storage)\r\n                                    return;\r\n                                return storage.x - storage.usedCardCount % storage.x;\r\n                            }\r\n                        }\r\n                    },\r\n                    extraPoint: {\r\n                        trigger: {\r\n                            player: 'addAiPoint'\r\n                        },\r\n                        direct: true,\r\n                        log: false,\r\n                        filter(Evt, player) {\r\n                            return player.hasSkill('ai_point');\r\n                        },\r\n                        content() {\r\n                            player.storage.ai_point.point += 1;\r\n                            player.syncStorage('ai_point');\r\n                            player.markSkill('ai_point');\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            ai_xu: {\r\n                init(player) {\r\n                },\r\n                group: ['ai_xu_ongain', 'ai_xu_ondiscard', 'ai_xu_onPhaseEnd', 'ai_xu_onblacksha'],\r\n                subSkill: {\r\n                    ongain: {\r\n                        trigger: {\r\n                            player: ['gainBegin']\r\n                        },\r\n                        filter(Evt, player) {\r\n                            if (game.countPlayer(cur => cur.hasSkill('ai_point') && !cur.storage.ai_xu_ongain))\r\n                                return true;\r\n                            return false;\r\n                        },\r\n                        direct: true,\r\n                        log: false,\r\n                        content() {\r\n                            player.storage.ai_xu_ongain = true;\r\n                        }\r\n                    },\r\n                    ondiscard: {\r\n                        trigger: {\r\n                            player: 'discardBegin'\r\n                        },\r\n                        direct: true,\r\n                        log: false,\r\n                        filter(Evt, player) {\r\n                            if (game.countPlayer(cur => cur.hasSkill('ai_point') && !cur.storage.ai_xu_ondiscard))\r\n                                return true;\r\n                            return false;\r\n                        },\r\n                        content() {\r\n                            player.storage.ai_xu_ondiscard = true;\r\n                        }\r\n                    },\r\n                    onPhaseEnd: {\r\n                        trigger: {\r\n                            player: ['phaseZhunbeiEnd', 'phaseJudgeEnd', 'phaseDrawEnd', 'phaseUseEnd', 'phaseDiscardEnd', 'phaseJieshuEnd']\r\n                        },\r\n                        priority: 257,\r\n                        direct: true,\r\n                        log: false,\r\n                        content() {\r\n                            var players = game.players.slice(0);\r\n                            for (var i = 0; i < players.length; ++i) {\r\n                                if (players[i].storage.ai_xu_ongain) {\r\n                                    players[i].storage.ai_point.point += 1;\r\n                                    if (players[i].hasSkill('ai_extraPoint'))\r\n                                        players[i].storage.ai_point.point += 1;\r\n                                    players[i].syncStorage('ai_point');\r\n                                    players[i].markSkill('ai_point');\r\n                                }\r\n                                delete players[i].storage.ai_xu_ongain;\r\n                                if (players[i].storage.ai_xu_ondiscard && players[i].storage.ai_point.point >= 1) {\r\n                                    players[i].storage.ai_point.point -= 1;\r\n                                    players[i].syncStorage('ai_point');\r\n                                    players[i].markSkill('ai_point');\r\n                                }\r\n                                delete players[i].storage.ai_xu_ondiscard;\r\n                            }\r\n                        }\r\n                    },\r\n                    onblacksha: {\r\n                        trigger: {\r\n                            target: 'shaBefore'\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return player.hasSkill('ai_point') && Evt.card && get.color(Evt.card) == 'black' && player.storage.ai_point.point >= 2;\r\n                        },\r\n                        content() {\r\n                            player.storage.ai_point.point -= 2;\r\n                            player.syncStorage('ai_point');\r\n                            player.markSkill('ai_point');\r\n                            trigger.cancel();\r\n                        },\r\n                        ai: {\r\n                            respondShan: true,\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            ai_po: {\r\n                group: ['ai_po_onhurt', 'ai_po_onphaseJieshu'],\r\n                subSkill: {\r\n                    onhurt: {\r\n                        trigger: {\r\n                            source: 'damageSource'\r\n                        },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return player.hasSkill('ai_point');\r\n                        },\r\n                        content() {\r\n                            player.storage.ai_point.point += 3;\r\n                            player.syncStorage('ai_point');\r\n                            player.markSkill('ai_point');\r\n                            Evt.trigger('addAiPoint');\r\n                        }\r\n                    },\r\n                    onphaseJieshu: {\r\n                        trigger: {\r\n                            player: 'phaseJieshu'\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return player.hasSkill('ai_point') && player.storage.ai_point.point >= 4;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            player.storage.ai_point.point -= 4;\r\n                            player.syncStorage('ai_point');\r\n                            player.markSkill('ai_point');\r\n                            player.moveCard(true);\r\n                        },\r\n                        check(Evt, player) {\r\n                            var players = game.players.slice(0);\r\n                            for (var i = 0; i < players.length; ++i) {\r\n                                var target = players[i];\r\n                                var att = get.attitude(player, target);\r\n                                var sgnatt = get.sgn(att);\r\n                                if (att > 0) {\r\n                                    if (!_status.event.nojudge\r\n                                        && target.countCards('j', card => game.hasPlayer(cur => cur != target && cur.canAddJudge(card) && get.attitude(player, cur) < 0)))\r\n                                        return true;\r\n                                    if (target.countCards('e', card => get.value(card, target) < 0\r\n                                        && game.hasPlayer(cur => cur != target\r\n                                            && get.attitude(player, cur) < 0 && cur.isEmpty(get.subtype(card))\r\n                                            && get.effect(target, card, player, player) < 0)))\r\n                                        return true;\r\n                                }\r\n                                else if (att < 0) {\r\n                                    if (game.hasPlayer(cur => {\r\n                                        if (cur != target && get.attitude(player, cur) > 0) {\r\n                                            var es = target.getCards('e');\r\n                                            for (var i = 0; i < es.length; i++) {\r\n                                                if (get.value(es[i], target) > 0 && cur.isEmpty(get.subtype(es[i])) && get.effect(cur, es[i], player, player) > 0)\r\n                                                    return true;\r\n                                            }\r\n                                        }\r\n                                    })) {\r\n                                        return true;\r\n                                    }\r\n                                }\r\n                            }\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            ai_ji: {\r\n                group: ['ai_ji_ondiscard', 'ai_ji_onusecard'],\r\n                subSkill: {\r\n                    ondiscard: {\r\n                        trigger: {\r\n                            player: 'phaseZhunbei'\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return player.hasSkill('ai_point') && player.getCards('he').length > 0;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            player.chooseToDiscard('he', '弃置任意牌', [1, Infinity], true).set('ai', card => {\r\n                                return 1 - get.value(card);\r\n                            });\r\n                            'step 1';\r\n                            if (result.bool && result.cards.length > 0) {\r\n                                player.storage.ai_point.point += result.cards.length * 2;\r\n                                player.syncStorage('ai_point');\r\n                                player.markSkill('ai_point');\r\n                                Evt.trigger('addAiPoint');\r\n                            }\r\n                        }\r\n                    },\r\n                    onusecard: {\r\n                        trigger: {\r\n                            player: 'useCard2'\r\n                        },\r\n                        filter(Evt, player) {\r\n                            if (!player.hasSkill('ai_point') || player.storage.ai_point.point < 2)\r\n                                return false;\r\n                            if (!Evt.targets || !Evt.targets.length)\r\n                                return false;\r\n                            var info = get.info(Evt.card);\r\n                            if (info.allowMultiple == false)\r\n                                return false;\r\n                            if (Evt.targets && !info.multitarget) {\r\n                                if (game.hasPlayer(cur => {\r\n                                    return !Evt.targets.contains(cur) && lib.filter.targetEnabled2(Evt.card, player, cur) && lib.filter.targetInRange(Evt.card, player, cur);\r\n                                })) {\r\n                                    return true;\r\n                                }\r\n                            }\r\n                            return false;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            player.storage.ai_point.point -= 2;\r\n                            player.syncStorage('ai_point');\r\n                            player.markSkill('ai_point');\r\n                            var prompt2 = '为' + get.translation(trigger.card) + '增加或减少一个目标';\r\n                            player.chooseTarget(get.prompt('ai_ji'), function (card, player, target) {\r\n                                var player = _status.event.player;\r\n                                if (_status.event.targets.contains(target))\r\n                                    return true;\r\n                                return lib.filter.targetEnabled2(_status.event.card, player, target) && lib.filter.targetInRange(_status.event.card, player, target);\r\n                            }).set('prompt2', prompt2).set('ai', function (target) {\r\n                                var trigger = _status.event.getTrigger();\r\n                                var player = _status.event.player;\r\n                                return get.effect(target, trigger.card, player, player) * (_status.event.targets.contains(target) ? -1 : 1);\r\n                            }).set('targets', trigger.targets).set('card', trigger.card);\r\n                            'step 1';\r\n                            if (result.bool) {\r\n                                if (!Evt.isMine())\r\n                                    game.delayx();\r\n                                Evt.targets = result.targets;\r\n                            }\r\n                            else {\r\n                                Evt.finish();\r\n                            }\r\n                            'step 2';\r\n                            if (Evt.targets) {\r\n                                player.logSkill('ai_ji', Evt.targets);\r\n                                if (trigger.targets.contains(Evt.targets[0]))\r\n                                    trigger.targets.removeArray(Evt.targets);\r\n                                else\r\n                                    trigger.targets.addArray(Evt.targets);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            ai_zhong: {\r\n                group: ['ai_zhong_onusexcard'],\r\n                subSkill: {\r\n                    onusexcard: {\r\n                        trigger: {\r\n                            player: 'useCard1'\r\n                        },\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            return player.hasSkill('ai_point') && player.hasSkill('ai_zhongMark');\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            var players = game.players.slice(0);\r\n                            var storage;\r\n                            for (var i = 0; i < players.length; ++i) {\r\n                                if (players[i].storage.ai_zhongMark) {\r\n                                    storage = players[i].storage.ai_zhongMark;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (!storage) {\r\n                                var skills = get.expandSkills('ai_zhong');\r\n                                for (var i = 0; i < skills.length; ++i) {\r\n                                    game.removeGlobalSkill(skills[i]);\r\n                                }\r\n                                for (var i = 0; i < players.length; ++i) {\r\n                                    delete players[i].storage.ai_zhongMark;\r\n                                }\r\n                                Evt.finish();\r\n                                return;\r\n                            }\r\n                            ++storage.usedCardCount;\r\n                            for (var i = 0; i < players.length; ++i) {\r\n                                if (!players[i].storage.ai_zhongMark) {\r\n                                    players[i].storage.ai_zhongMark = storage;\r\n                                }\r\n                                players[i].syncStorage('ai_zhongMark');\r\n                                players[i].markSkill('ai_zhongMark');\r\n                            }\r\n                            if (storage.usedCardCount % storage.x == 0) {\r\n                                player.storage.ai_point.point += 3;\r\n                                player.syncStorage('ai_point');\r\n                                player.markSkill('ai_point');\r\n                                Evt.trigger('addAiPoint');\r\n                            }\r\n                        }\r\n                    },\r\n                    onplayerdie: {\r\n                        trigger: {\r\n                            global: 'dieAfter'\r\n                        },\r\n                        direct: true,\r\n                        log: false,\r\n                        content() {\r\n                            var diePlayer = trigger.player;\r\n                            lib.skill.ai_zhong.syncDeadPlayer(diePlayer);\r\n                        }\r\n                    },\r\n                    deadSkillTrigger: {\r\n                        trigger: {\r\n                            player: []\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return player.hasSkill('ai_point');\r\n                        },\r\n                        direct: true,\r\n                        log: false,\r\n                        content() {\r\n                            'step 0';\r\n                            if (!player.storage.ai_point || player.storage.ai_point.point < 3) {\r\n                                trigger.cancel();\r\n                                Evt.finish();\r\n                                return;\r\n                            }\r\n                            player.chooseBool('是否–❸以触发' + get.translation(trigger.name) || 0).set('ai', function () {\r\n                                return Math.random() >= 0.5;\r\n                            });\r\n                            'step 1';\r\n                            if (result.bool) {\r\n                                player.storage.ai_point.point -= 3;\r\n                                player.syncStorage('ai_point');\r\n                                player.markSkill('ai_point');\r\n                            }\r\n                            else {\r\n                                trigger.cancel();\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                banned: [],\r\n                characterFilter(character) {\r\n                    return character.indexOf('KizunaAI') == -1 && !lib.skill.ai_zhong.banned.contains(character);\r\n                },\r\n                bannedSkill: [],\r\n                skillFilter(skill) {\r\n                    if (lib.character['sp_KizunaAI'][3].contains(skill) || lib.skill.ai_zhong.bannedSkill.contains(skill)) {\r\n                        return false;\r\n                    }\r\n                    var info = lib.skill[skill];\r\n                    if (!info)\r\n                        return false;\r\n                    if (info.charlotte || (info.unique && !info.gainable) || info.juexingji || info.limited || info.zhuSkill || info.hiddenSkill)\r\n                        return false;\r\n                    return true;\r\n                },\r\n                syncDeadPlayer(diePlayer) {\r\n                    if (!lib.skill.ai_zhong.characterFilter(diePlayer.name))\r\n                        return;\r\n                    var storage;\r\n                    var players = game.players.slice(0);\r\n                    var storagePlayer;\r\n                    for (var i = 0; i < players.length; ++i) {\r\n                        if (players[i].storage.ai_deadMark) {\r\n                            storage = players[i].storage.ai_deadMark;\r\n                            storagePlayer = players[i];\r\n                            break;\r\n                        }\r\n                    }\r\n                    var lastDeadList = storage.lastDeadList;\r\n                    var addPlayer = function (player) {\r\n                        lastDeadList.add(player);\r\n                        var skills = lib.character[player.name][3];\r\n                        for (var i = 0; i < skills.length; ++i) {\r\n                            var skill = skills[i];\r\n                            if (!lib.skill.ai_zhong.skillFilter(skill))\r\n                                continue;\r\n                            var info = lib.skill[skill];\r\n                            if (!info)\r\n                                continue;\r\n                            if (info.trigger) {\r\n                                for (var i = 0; i < players.length; ++i) {\r\n                                    players[i].addSkill(skill);\r\n                                }\r\n                                var setTrigger = function (i, evt) {\r\n                                    var name = i + '_' + evt;\r\n                                    if (!lib.hook.globalskill[name]) {\r\n                                        lib.hook.globalskill[name] = [];\r\n                                    }\r\n                                    lib.skill.ai_zhong.subSkill.deadSkillTrigger.trigger.player.push(skill + 'Before');\r\n                                    lib.hook.globalskill[name].add('ai_zhong_deadSkillTrigger');\r\n                                    lib.hookmap[evt] = true;\r\n                                };\r\n                                setTrigger('player', skill + 'Before');\r\n                            }\r\n                        }\r\n                    };\r\n                    var removePlayer = function (player) {\r\n                        var skills = lib.character[player.name][3];\r\n                        for (var j = 0; j < skills.length; ++j) {\r\n                            if (!lib.skill.ai_zhong.skillFilter(skills[j]))\r\n                                continue;\r\n                            for (var i = 0; i < players.length; ++i) {\r\n                                if (players[i] == player)\r\n                                    continue;\r\n                                players[i].removeSkill(skills[j]);\r\n                            }\r\n                            var name = 'player_' + skills[j] + 'Before';\r\n                            lib.skill.ai_zhong.subSkill.deadSkillTrigger.trigger.player.remove(skills[j] + 'Before');\r\n                            if (lib.hook.globalskill[name])\r\n                                lib.hook.globalskill[name].remove('ai_zhong_deadSkillTrigger');\r\n                        }\r\n                        lastDeadList.remove(player);\r\n                    };\r\n                    if (diePlayer.isDead() && !lastDeadList.contains(diePlayer)) {\r\n                        addPlayer(diePlayer);\r\n                    }\r\n                    for (var i = 0; i < lastDeadList.length; ++i) {\r\n                        if (!lastDeadList[i].isDead()) {\r\n                            removePlayer(lastDeadList[i]);\r\n                        }\r\n                    }\r\n                    for (var i = 0; i < players.length; ++i) {\r\n                        if (!players[i].storage.ai_deadMark) {\r\n                            players[i].storage.ai_deadMark = storage;\r\n                            players[i].syncStorage('ai_deadMark');\r\n                        }\r\n                    }\r\n                    storagePlayer.syncStorage('ai_deadMark');\r\n                }\r\n            },\r\n            ban: {\r\n                audio: 2,\r\n                priority: 256,\r\n                frequent: true,\r\n                trigger: {\r\n                    global: 'roundEnd'\r\n                },\r\n                filter(Evt, player) {\r\n                    if (game.hasPlayer(cur => cur.hasSkill('ai_point')))\r\n                        return true;\r\n                    return false;\r\n                },\r\n                check(Evt, player) {\r\n                    var friends = player.getFriends(true);\r\n                    var players = game.players.slice(0);\r\n                    var sameGroupCount = 0;\r\n                    var othersCount = 0;\r\n                    for (var i = 0; i < players.length; ++i) {\r\n                        if (friends.contains(players[i])) {\r\n                            if (players[i].storage.ai_point)\r\n                                sameGroupCount += players[i].storage.ai_point.point;\r\n                        }\r\n                        else {\r\n                            if (players[i].storage.ai_point)\r\n                                othersCount += players[i].storage.ai_point.point;\r\n                        }\r\n                    }\r\n                    return sameGroupCount > 0 && sameGroupCount > othersCount * 2;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var friends = player.getFriends(true);\r\n                    Evt.friends = friends;\r\n                    for (var i = 0; i < friends.length; i++) {\r\n                        if (friends[i].identityShown)\r\n                            continue;\r\n                        if (friends[i].showIdentity)\r\n                            friends[i].showIdentity();\r\n                    }\r\n                    'step 1';\r\n                    game.delay();\r\n                    'step 2';\r\n                    var friends = Evt.friends;\r\n                    var players = game.players.slice(0);\r\n                    var sameGroupCount = 0;\r\n                    var othersCount = 0;\r\n                    for (var i = 0; i < players.length; ++i) {\r\n                        if (friends.contains(players[i])) {\r\n                            if (players[i].storage.ai_point)\r\n                                sameGroupCount += players[i].storage.ai_point.point;\r\n                        }\r\n                        else {\r\n                            if (players[i].storage.ai_point)\r\n                                othersCount += players[i].storage.ai_point.point;\r\n                        }\r\n                    }\r\n                    if (sameGroupCount > 0 && sameGroupCount > othersCount * 2) {\r\n                        var func = game.checkOnlineResult;\r\n                        game.checkOnlineResult = function (player) {\r\n                            return Evt.friends.contains(player);\r\n                        };\r\n                        game.over(game.checkOnlineResult(game.me));\r\n                        game.checkOnlineResult = func;\r\n                    }\r\n                }\r\n            },\r\n            tuqi: {\r\n                audio: 6,\r\n                trigger: { target: 'useCardToTarget' },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    var name = get.translation(get.name(Evt.card));\r\n                    if (typeof name == 'string')\r\n                        return true;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var name = get.translation(get.name(trigger.card));\r\n                    if (name.length > player.hp) {\r\n                        trigger.excluded.add(player);\r\n                    }\r\n                    if (name.length <= player.hp) {\r\n                        player.draw();\r\n                    }\r\n                    'step 1';\r\n                    if (trigger.getParent().targets && trigger.getParent().targets.filter(cur => cur.isIn()).length == 1\r\n                        && game.countPlayer(cur => {\r\n                            var source = Evt.getTrigger().player;\r\n                            var targets = Evt.getTrigger().targets;\r\n                            var card = Evt.getTrigger().card;\r\n                            return cur.isIn() && lib.filter.targetEnabled2(card, source, cur) && !targets.contains(cur);\r\n                        })) {\r\n                        var prompt2 = '为' + get.translation(trigger.card) + '增加一个目标';\r\n                        player.chooseTarget().set('filterTarget', function (card, player, target) {\r\n                            var source = _status.event.getTrigger().player;\r\n                            var targets = _status.event.getTrigger().targets;\r\n                            var card = _status.event.getTrigger().card;\r\n                            return lib.filter.targetEnabled2(card, source, target) && !targets.contains(target);\r\n                        }).set('prompt2', prompt2).set('ai', function (target) {\r\n                            var player = _status.event.player;\r\n                            var source = _status.event.getTrigger().player;\r\n                            var card = _status.event.getTrigger().card;\r\n                            return get.effect(target, card, source, player);\r\n                        });\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        if (!Evt.isMine())\r\n                            game.delayx();\r\n                        Evt.targets = result.targets;\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 3';\r\n                    if (result.bool && result.targets) {\r\n                        player.logSkill('tuqi', Evt.targets);\r\n                        trigger.getParent().targets.addArray(Evt.targets);\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten(player, target) {\r\n                        if (target.hp == 1)\r\n                            return 1.5;\r\n                    },\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            var name = get.translation(get.name(card));\r\n                            if (name.length > target.hp) {\r\n                                return [0.1, 0.5];\r\n                            }\r\n                            if (name.length <= target.hp) {\r\n                                return [1, 1];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            shizu: {\r\n                audio: 6,\r\n                trigger: { source: 'damageEnd' },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    var name = get.translation(Evt.player);\r\n                    if (typeof name == 'string' && Evt.player.isIn())\r\n                        return true;\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    'step 0';\r\n                    var name = get.translation(trigger.player);\r\n                    if (name.length > player.countCards('h'))\r\n                        player.swapHandcards(trigger.player);\r\n                    if (name.length <= player.countCards('h'))\r\n                        player.swapEquip(trigger.player);\r\n                }\r\n            },\r\n        },\r\n        dynamicTranslate: {\r\n            liuxuan(player) {\r\n                var str = '锁定技 游戏开始时，你处于「拉胯」姿态（对应<4>）。你使用或打出一张点数为3/4/5/7倍数的牌时，进入「活力」/「害羞」/「犟嘴」/「可爱」姿态（若同时满足则选择先进入其中一个然后切换至另一个）；使用或打出其它点数牌的时，回到「拉胯」姿态。';\r\n                switch (player.storage.liuxuan) {\r\n                    case 'liuxuan_lakua': return str.replace(/「拉胯」/g, '<span class=\"changetext\">「拉胯」</span>');\r\n                    case 'liuxuan_huoli': return str.replace('「活力」', '<span class=\"changetext\">「活力」</span>');\r\n                    case 'liuxuan_haixiu': return str.replace('「害羞」', '<span class=\"changetext\">「害羞」</span>');\r\n                    case 'liuxuan_jiangzui': return str.replace('「犟嘴」', '<span class=\"changetext\">「犟嘴」</span>');\r\n                    case 'liuxuan_keai': return str.replace('「可爱」', '<span class=\"changetext\">「可爱」</span>');\r\n                }\r\n                return;\r\n            },\r\n        },\r\n        translate: {\r\n            sp_KaguraMea: `皇·神乐めあ`,\r\n            zhigao: `至高权柄`,\r\n            zhigao_info: `<font color=#dfb>限定技</font> 回合内，一名已受伤角色体力值变化时，你可以令此变化改为等量的体力上限变化。`,\r\n            tiangou: `天狗食日`,\r\n            tiangou_info: `一轮开始时，你可以声明一个未声明过的主要阶段并选择一名角色。本轮内只有其能执行此阶段。若均已声明，重置你的所有技能。`,\r\n            sp_MinatoAqua: `皇·湊阿库娅`,\r\n            shenghuang: `圣皇之愈`,\r\n            shenghuang_info: `锁定技 当你进入濒死状态时，更换新的体力牌。你失去过黑色牌的回合结束时，其他角色将体力回复至回合开始时的状态。`,\r\n            renzhan: `瞬息刃斩`,\r\n            renzhan_info: `每回合限一次。其他角色受到伤害后，若其未濒死，你可以失去1点体力，亮出牌堆顶牌直到出现【杀】，然后获得这些牌；或获得其中的【杀】并对一名角色使用任意张【杀】，直到其进入濒死状态。`,\r\n            kuase: `夸色梦想`,\r\n            kuase_info: `<font color=#f5c>限定技</font> 一个回合结束时，若有角色在回合内回复体力，你可以摸X张牌然后执行一个额外的出牌阶段。（X为所有角色本回合回复的体力值之和）`,\r\n            sp_MononobeAlice: `皇·物述有栖`,\r\n            xianjing: `仙境奇遇`,\r\n            xianjing_info: `当你使用一张牌后，若与本回合被使用的上一张牌在Alice序列（♥️、♠️、♦️、♣️、♥️......）中连续，你可以令一名角色摸一张牌。\r\n\t\t\t<br>一个回合结束时，若此回合进入弃牌堆的牌包含所有花色，你可选择一项：令一名其他角色获得「小兔子」标记，或令所有「小兔子」各摸一张牌。`,\r\n            chahui: `茶会交流`,\r\n            chahui_info: `你于出牌阶段使用牌后，可以令一名小兔子选择是否使用一张牌，若其因此使用的牌与上一张牌在Alice序列中连续，此牌视为你使用。小兔子于出牌阶段使用牌后也可以对你如此做。`,\r\n            duandai: `嚣张缎带`,\r\n            duandai_info: `回合结束时，若本回合你使用牌完成过一组Alice序列，你可以回复所有体力。`,\r\n            xiaotuzi: `小兔子`,\r\n            xiaotuzi_info: `成为了爱丽丝的小兔子，于出牌阶段使用牌后，可以令一名爱丽丝选择是否使用一张牌，若其因此使用的牌与上一张牌在Alice序列中连续，此牌视为你使用`,\r\n            sp_UsadaPekora: `皇·兔田佩克拉`,\r\n            tuqi: `兔起乌沉`,\r\n            tuqi_info: `锁定技 牌名字数大于/不大于你体力的牌指定你为目标时，你令其对你无效/摸一张牌，若你为唯一目标，你可以为之指定额外目标。`,\r\n            shizu: `簪缨世族`,\r\n            shizu_info: `锁定技 武将名字数大于/不大于你手牌数的角色受到你造成的伤害时，你与其交换手牌/装备区的牌。`,\r\n            sp_Diana: `皇·嘉然`,\r\n            tangyan: `穿心糖言`,\r\n            tangyan_info: `若你已受伤，你使用、打出或弃置一张基本牌后，可以选择一项：1.令一名角色摸一张牌；2.防止你下一次受到的伤害；3.视为使用一张本回合未以此法使用过的基本牌。`,\r\n            tianyin: `万象天引`,\r\n            tianyin_info: `出牌阶段，你可以受到1点无来源的伤害，并将一张手牌交给一名其他角色，此牌称为「心嘉」牌。在持有「心嘉」牌角色的回合中，你发动『穿心糖言』改为依次执行所有选项。`,\r\n            xinjia: `心嘉`,\r\n            sp_Ava: `皇·向晚`,\r\n            shuimu: `降雨水母`,\r\n            shuimu_info: `锁定技 你首次受到伤害前没有体力牌。首次受到伤害后，你获得当前姿态对应的体力牌。`,\r\n            liuxuan: `无限溜旋`,\r\n            liuxuan_info: `锁定技 游戏开始时，你处于「拉胯」姿态（对应<4>）。你使用或打出一张点数为3/4/5/7倍数的牌时，进入「活力」/「害羞」/「犟嘴」/「可爱」姿态（若同时满足则选择先进入其中一个然后切换至另一个）；使用或打出其它点数牌的时，回到「拉胯」姿态。<br>\r\n\t\t\t\t<br><span class=\"yellowtext\">拉胯</span>：其他角色计算与你的距离-1。\r\n\t\t\t\t<br><span class=\"legendtext\">活力</span>：你的锦囊牌无法被抵消；离开此姿态时，你摸一张牌。\r\n\t\t\t\t<br><span class=\"greentext\">害羞</span>：你造成或受到的伤害+1，你的手牌无法被其他角色获得或弃置。\r\n\t\t\t\t<br><span class=\"firetext\">犟嘴</span>：进入此姿态时，你令其他角色交给你一张牌，然后你展示一张手牌，令之点数+1或-1。\r\n\t\t\t\t<br><span class=\"thundertext\">可爱</span>：进入此姿态时摸三张牌；你造成的伤害翻倍；离开此姿态时，将你的体力值调整为当前的一半（向上取整），若没有体力牌，你死亡。`,\r\n            liuxuan_plus: `溜旋:+1`,\r\n            liuxuan_lose: `溜旋:-1`,\r\n            liuxuan_plus2: `溜旋:+2`,\r\n            liuxuan_lose2: `溜旋:-2`,\r\n            liuxuan_lakua: `拉胯`,\r\n            liuxuan_lakua_describe: `其他角色计算与你的距离-1。`,\r\n            liuxuan_huoli: `活力`,\r\n            liuxuan_huoli_describe: `你的锦囊牌无法被抵消；离开此姿态时，你摸一张牌。`,\r\n            liuxuan_haixiu: `害羞`,\r\n            liuxuan_haixiu_describe: `你造成或受到的伤害+1，你的手牌无法被其他角色获得或弃置。`,\r\n            liuxuan_jiangzui: `犟嘴`,\r\n            liuxuan_jiangzui_describe: `进入此姿态时，你令其他角色交给你一张牌，然后你展示一张手牌，令之点数+1或-1。`,\r\n            liuxuan_keai: `可爱`,\r\n            liuxuan_keai_describe: `进入此姿态时摸三张牌；你造成的伤害翻倍；离开此姿态时，将你的体力值调整为当前的一半（向上取整），若没有体力牌，你死亡。`,\r\n            phaseZhunbei: `准备阶段`,\r\n            phaseJudge: `判定阶段`,\r\n            phaseDraw: `摸牌阶段`,\r\n            phaseUse: `出牌阶段`,\r\n            phaseDiscard: `弃牌阶段`,\r\n            phaseJieshu: `结束阶段`,\r\n            sp_KizunaAI: `皇·绊爱`,\r\n            ai: `爱`,\r\n            ai_info: `一轮开始时，你对●最少的一名角色造成1点伤害，清空所有●，然后令所有角色获得以下一项效果：\r\n\t\t\t\t<br>序<span class=\"firetext\">▷</span>一个阶段内首次获得牌的角色+❶，失去牌的–❶。你可以–❷以抵消黑色【杀】。\r\n\t\t\t\t<br>破<span class=\"firetext\">▷</span>每次造成伤害时+❸。结束阶段，你可以–❹以移动场上一张牌。\r\n\t\t\t\t<br>急<span class=\"firetext\">▷</span>准备阶段，弃置任意牌以获得两倍的●。你可以–❷为你使用的牌增加或减少一名目标。\r\n\t\t\t\t<br>终<span class=\"firetext\">▷</span>皇·绊爱声明一个大于存活角色数的数字X，从现在开始每第X张牌之使用者+❸，你可以–❸以触发一项已死亡角色的通常技。\r\n\t\t\t\t<br>你每次获得●时，额外+❶。`,\r\n            ai_xu: `序`,\r\n            ai_xu_info: `一个阶段内首次获得牌的角色+❶，失去牌的–❶。你可以–❷以抵消黑色【杀】。`,\r\n            ai_po: `破`,\r\n            ai_po_info: `每次造成伤害时+❸。结束阶段，你可以–❹以移动场上一张牌。`,\r\n            ai_ji: `急`,\r\n            ai_ji_info: `准备阶段，弃置任意牌以获得两倍的●。你可以–❷为你使用的牌增加或减少一名目标。`,\r\n            ai_zhong: `终`,\r\n            ai_zhong_info: `皇·绊爱声明一个大于存活角色数的数字X，从现在开始每第X张牌之使用者+❸，你可以–❸以触发一项已死亡角色的通常技。`,\r\n            ban: `绊`,\r\n            ban_info: `一轮结束时，你可以令与你同阵营的角色翻开身份牌，若你们●的合计值大于其他阵营●的两倍，获得胜利。`\r\n        },\r\n    };\r\n});\r\n\n\n//# sourceURL=webpack:///./character/emperor.ts?")},"./character/hololive.ts":()=>{eval("\r\nwindow.game.import('character', function (lib, game, ui, get, ai, _status) {\r\n    let Evt;\r\n    return {\r\n        name: 'hololive',\r\n        connect: true,\r\n        character: {\r\n            GawrGura: ['female', 'holo', 3, ['lingqun', 'yangliu']],\r\n            NinomaeInanis: ['female', 'holo', 3, ['mochu', 'fuyue']],\r\n            TokinoSora: ['female', 'holo', 4, ['taiyangzhiyin', 'renjiazhizhu'], ['zhu']],\r\n            YozoraMel: ['female', 'holo', 3, ['juhun', 'meilu']],\r\n            AkaiHaato: ['female', 'holo', 3, ['liaolishiyan', 'momizhiyan']],\r\n            NatsuiroMatsuri: ['female', 'holo', 3, ['huxi1', 'lianmeng']],\r\n            RobokoSan: ['female', 'holo', 3, ['gaonengzhanxie', 'ranyouxielou']],\r\n            ShirakamiFubuki: ['female', 'holo', 3, ['yuanlv', 'jinyuan', 'zhongjian'], ['zhu']],\r\n            AkiRosenthal: ['female', 'holo', 3, ['meiwu', 'huichu']],\r\n            HoshimatiSuisei: ['female', 'holo', 4, ['yemuxingyong', 'xinghejianduei']],\r\n            SakuraMiko: ['female', 'holo', 4, ['haodu']],\r\n            MinatoAqua: ['female', 'holo', 3, ['kuali', 'youyi']],\r\n            UsadaPekora: ['female', 'holo', 3, ['zhonggong', 'binzhan']],\r\n            ŌokamiMio: ['female', 'holo', 3, ['xuanxu', 'weizeng'], ['forbidai']],\r\n            NekomataOkayu: ['female', 'holo', 3, ['fantuan', 'shengang']],\r\n            Civia: ['female', 'holo', 3, ['kuangxin', 'danyan', 'qingjie'], ['guoV']],\r\n            SpadeEcho: ['female', 'holo', 3, ['hangao', 'yinglve'], ['guoV']],\r\n            Artia: ['female', 'holo', 3, ['shuangzhi', 'xiwo'], ['guoV']],\r\n            Doris: ['female', 'holo', 3, ['shenhai', 'paomo'], ['guoV']],\r\n            Yogiri: ['female', 'holo', 4, ['shisang', 'wanjie'], ['guoV']],\r\n            Rosalyn: ['female', 'holo', 3, ['maoge', 'bianlan', 'futian'], ['guoV']],\r\n        },\r\n        characterSort: {\r\n            hololive: {\r\n                hololive_wuyin: ['TokinoSora', 'HoshimatiSuisei', 'RobokoSan', 'SakuraMiko'],\r\n                hololive_1: ['YozoraMel', 'AkiRosenthal', 'AkaiHaato', 'ShirakamiFubuki', 'NatsuiroMatsuri'],\r\n                hololive_2and3: ['MinatoAqua', 'UsadaPekora'],\r\n                OurGirls: ['Civia', 'SpadeEcho', 'Artia', 'Doris', 'Yogiri', 'Rosalyn'],\r\n                HOLOEN: ['GawrGura', 'NinomaeInanis'],\r\n            }\r\n        },\r\n        characterReplace: {\r\n            TokinoSora: ['re_TokinoSora', 'TokinoSora'],\r\n            RobokoSan: ['re_RobokoSan', 'RobokoSan'],\r\n            YozoraMel: ['re_YozoraMel', 'YozoraMel'],\r\n            ShirakamiFubuki: ['re_ShirakamiFubuki', 'ShirakamiFubuki'],\r\n            HoshimatiSuisei: ['re_HoshimatiSuisei', 'HoshimatiSuisei'],\r\n            AkiRosenthal: ['re_AkiRosenthal', 'AkiRosenthal'],\r\n            SakuraMiko: ['re_SakuraMiko', 'SakuraMiko'],\r\n            NatsuiroMatsuri: ['re_NatsuiroMatsuri', 'NatsuiroMatsuri'],\r\n            AkaiHaato: ['re_AkaiHaato', 'AkaiHaato'],\r\n            UsadaPekora: ['re_UsadaPekora', 'UsadaPekora', 'sp_UsadaPekora', 'old_UsadaPekora'],\r\n            ŌokamiMio: ['re_ŌokamiMio', 'ŌokamiMio'],\r\n            SpadeEcho: ['re_SpadeEcho', 'SpadeEcho'],\r\n            Ciyana: ['Ciyana', 'Civia'],\r\n            MinatoAqua: ['MinatoAqua', 'sp_MinatoAqua', 'sea_MinatoAqua'],\r\n            GawrGura: ['GawrGura', 'sp_GawrGura'],\r\n        },\r\n        characterIntro: {\r\n            MinatoAqua: '阿库娅者，杏社一孑然水兵，虫蝗起祸之时水军都督欲助之，夸苦谏无果，斩之，人常言名正则言顺，夸亦不惧流言，僭越圣皇之位。如此抗争十月有余，战功赫赫，只身一人斩鬼佬兆计，活华夏民众不可胜数，元昭既为虫蝗惑，出兵连击圣皇，圣皇外抗虫蝗，内拒元昭，日削月割，以至于穷，V始二十四年，姑苏城破，圣皇燔宝器、烧粮草，死战力竭而亡。',\r\n            UsadaPekora: '“哈↑哈↑哈↑哈↑”',\r\n            SakuraMiko: '樱巫女（V始三年）者，神社之巫女也，性坚毅，素有樱火龙之称，子云，食色性也，圣人如此，miko亦然，miko喜黄油，常于配信误启之，虽贵为巫女，护东南诸郡安宁，然不识诗书，有《FAQ》、《倪哥》为众人笑，V始十九年，朝廷窜东南，miko力拒之，自封自由领，不受诸侯管制',\r\n            HoshimatiSuisei: '星街彗星（V始三年），北海人也，少时贫寒，彗酱一心求学，从当世之先达元昭执经叩问，元昭深器之，彗酱豆蔻之年即通晓诸经，人莫不言之曰天道酬勤，六边形战士之名世人皆知。V始十三年绊爱首义，彗酱自投笔从戎，有tst之神兵，杏国拜之曰上将军，后党锢事泄，世人皆知元昭欺世盗名之徒，星街亦惶惶不可终日，随杏败走瀛洲。',\r\n            TokinoSora: '混沌的尽头，少女的回旋曲，杏社起始同时也是终末的清楚担当，全杏社圆桌骑士之首，空友之母，反抗军的破坏者、狮心之人、大杏社的卡丽熙、hololive真主、永不恐惧者、阿芙乐尔公主，时乃空是也',\r\n            YozoraMel: '夜空梅露者，西界之吸血鬼也，面容婧然身材出众，曾因人拒同族长者，为血族放，梅露东奔长安，于苑中为歌女，惹得京城子弟风流，夏色祭既受元昭令，以樱桃汁赚梅露，遂从祭拜杏国，元昭拜之曰南阳县主。',\r\n            AkaiHaato: '赤井心，京师名医之后也，嗜食成性，有《药膳经》流于世，其药多先夺人命后生之，用者莫不谈之色变，食尤喜沙琪玛，每日贡食入府，左右皆呼“哈恰玛恰玛”，后元昭起势，心随夏色祭往拜之，从军十年活人兆计，后拜土澳公主，总领土澳事宜。',\r\n            AkiRosenthal: 'aki者，蓬莱之仙子也，天帝遣aki携神兵助元昭起义师，aki遂下界，恰逢时乃空见欺，朝廷围之，aki使奥术魔刃斩之，只一合，朝廷三十万军士灰飞烟灭，杏军皆呼之曰神，有反重力之发辫二，元昭欲留aki，aki婉拒之，还复天界，不知所踪。',\r\n            NatsuiroMatsuri: '夏色祭（V始二年）者，元昭之同族也，自党锢之祸后，元昭暗谋国事，遣祭访天下名士，得名士四人，是为杏国一期，祭不拘小节，最喜呼吸，同社皆避之，既为混沌传说，一般露○可轻言之，建功累累，元昭尊为第一将军',\r\n            RobokoSan: '萝卜子（V始三年）者，奇巧士之造物也，自号高性能机器人，实则不善文书，萝卜起于草莽，生性豪爽，后为时乃空所动，随杏社征战，V始二十年，杏国攻灭诸侯，远交近攻，俨然有大一统之势，萝卜子拜平南王福禄将军，安于南方',\r\n            ShirakamiFubuki: '白上吹雪者，青丘之狐也，夏色祭以玉米赚之，V始十五年，朝廷击绊爱于桐江，大破之，又击之于宛城，斩爱之左将军，一时人皆自危，起义初显败势，吹雪自领百骑迂回西南袭朝廷于后，解绊爱众叛亲离之危，重兴V国大业，后虫蝗起祸，元昭绥靖，吹雪亦听之任之，遂成大乱。',\r\n            Civia: '希薇娅者，独角兽也，九世善行，神灵感其所为，点化成人，其成人之时情不自禁多言人语，后人称之为“话痨将军”，civia多通夷语，随黑桃影归杏后，官拜大学士，总掌文职，行事和蔼淡然，常言“watashimo”，有好好先生之称，虫蝗之难后，civia叹恶龙之无道，元昭之无能，携cn六人离之。',\r\n            SpadeEcho: '黑桃影者，神乐七奈之女也，幼时离散，嗓音独特，孑然独活于幽云等地，以行盗活之，echo盗亦有道，决不伸手贫寒，常行窃于联动对象设备，造成诸多直播事故，为天下笑，echo慕杏“则天去私”之号，携友三人归之，战功赫赫，杏有中华基业，echo等六人之力也，虫皇之难后，echo终思华夷不两立，冲突出阵，隐退于山林。',\r\n        },\r\n        skill: {\r\n            taiyangzhiyin: {\r\n                audio: 2,\r\n                trigger: { player: ['useCard2'] },\r\n                filter(Evt, player) {\r\n                    return get.number(Evt.card) > 10 && (player.storage.onlink == null || player.storage.onlink.indexOf(Evt.card.cardid) == -1);\r\n                },\r\n                priority: 1,\r\n                frequent: true,\r\n                forced: false,\r\n                content() {\r\n                    var _a;\r\n                    var info = get.info(trigger.card);\r\n                    var players = game.filterPlayer();\r\n                    if (player.storage.onlink == null) {\r\n                        player.storage.onlink = [];\r\n                    }\r\n                    'step 0';\r\n                    Evt.Dvalue = get.number(trigger.card) - 10;\r\n                    var list = [['无法响应'], ['额外目标'], ['摸一张牌']];\r\n                    if (!game.hasPlayer(cur => {\r\n                        return lib.filter.targetEnabled2(trigger.card, player, cur)\r\n                            && player.inRange(cur)\r\n                            && !trigger.targets.contains(cur)\r\n                            && (get.type(trigger.card) != 'equip' && get.type(trigger.card) != 'delay');\r\n                    })) {\r\n                        list.splice(1, 1);\r\n                        if (Evt.Dvalue == 3) {\r\n                            Evt.Dvalue = 2;\r\n                        }\r\n                    }\r\n                    Evt.videoId = lib.status.videoId++;\r\n                    game.broadcastAll(function (id, choicelist, Dvalue) {\r\n                        var dialog = ui.create.dialog('选择' + Dvalue + '项');\r\n                        choicelist.forEach(element => {\r\n                            dialog.add([element, 'vcard']);\r\n                        });\r\n                        dialog.videoId = id;\r\n                    }, Evt.videoId, list, Evt.Dvalue);\r\n                    player.storage.onlink.push(trigger.card.cardid);\r\n                    'step 1';\r\n                    player.chooseButton(Evt.Dvalue).set('dialog', Evt.videoId).set('prompt', get.prompt('taiyangzhiyin'));\r\n                    'step 2';\r\n                    game.broadcastAll('closeDialog', Evt.videoId);\r\n                    if (result.bool) {\r\n                        result.links.forEach(element => {\r\n                            if (element[2] == \"摸一张牌\") {\r\n                                player.draw();\r\n                            }\r\n                            if (element[2] == \"无法响应\") {\r\n                                game.log(player, '令', trigger.card, '无法被响应');\r\n                                trigger.directHit.addArray(game.players);\r\n                                trigger.nowuxie = true;\r\n                            }\r\n                        });\r\n                        result.links.forEach(element => {\r\n                            if (element[2] == \"额外目标\") {\r\n                                player.chooseTarget(true, '额外指定一名' + get.translation(trigger.card) + '的目标？', function (card, player, target) {\r\n                                    var trigger = _status.event;\r\n                                    if (trigger.targets.contains(target))\r\n                                        return false;\r\n                                    return lib.filter.targetEnabled2(trigger.card, _status.event.player, target);\r\n                                }).set('ai', function (target) {\r\n                                    var trigger = _status.event.getTrigger();\r\n                                    var player = _status.event.player;\r\n                                    return get.effect(target, trigger.card, player, player);\r\n                                }).set('targets', trigger.targets).set('card', trigger.card);\r\n                            }\r\n                        });\r\n                    }\r\n                    'step 3';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        if (!Evt.isMine())\r\n                            game.delayx();\r\n                        Evt.target = result.targets[0];\r\n                        if (Evt.target) {\r\n                            trigger.targets.add(Evt.target);\r\n                        }\r\n                    }\r\n                },\r\n                group: 'taiyangzhiyin_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { player: ['useCardAfter'] },\r\n                        direct: true,\r\n                        content() {\r\n                            if (player.storage.onlink != null) {\r\n                                var deleteIndex = player.storage.onlink.indexOf(trigger.card.cardid);\r\n                                if (deleteIndex != -1) {\r\n                                    player.storage.onlink.splice(deleteIndex, 1, null);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            renjiazhizhu: {\r\n                audio: 2,\r\n                unique: true,\r\n                trigger: { player: 'phaseBefore' },\r\n                zhuSkill: true,\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    if (!player.hasZhuSkill('renjiazhizhu'))\r\n                        return false;\r\n                    return game.countPlayer(cur => cur.group == 'holo' && cur != player);\r\n                },\r\n                content() {\r\n                    if (player.storage.skillCardID == null) {\r\n                        player.storage.skillCardID = [];\r\n                    }\r\n                    Evt.players = game.filterPlayer(cur => cur.group == 'holo' && cur != player);\r\n                    Evt.players.sortBySeat(player);\r\n                    'step 0';\r\n                    if (Evt.playersIndex == null) {\r\n                        Evt.playersIndex = 0;\r\n                    }\r\n                    if (Evt.playersIndex < Evt.players.length) {\r\n                        Evt.players[Evt.playersIndex].chooseCard('是否交给' + get.translation(player) + '一张手牌').set('ai', card => {\r\n                            if (get.attitude(_status.event.player, _status.event.kong) >= 0)\r\n                                return 7 - get.value(card);\r\n                            return -1;\r\n                        }).set('kong', player);\r\n                    }\r\n                    else {\r\n                        Evt.playersIndex = 0;\r\n                        Evt.finish();\r\n                    }\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        let source = Evt.players[Evt.playersIndex];\r\n                        source.addExpose(0.2);\r\n                        if (player.storage.changecardList == null) {\r\n                            player.storage.changecardList = [];\r\n                        }\r\n                        player.storage.changecardList.push({\r\n                            result: result,\r\n                            card: result.cards[0],\r\n                            oldNumber: result.cards[0].number,\r\n                            oldData: result.cards[0].childNodes[1].childNodes[2].data\r\n                        });\r\n                        player.gain(result.cards, Evt.players[Evt.playersIndex], 'giveAuto');\r\n                        result.cards[0].number = 11;\r\n                        result.cards[0].specialEffects = ['card_hightlight'];\r\n                        var newcard = get.cardInfoOL(result.cards[0]);\r\n                        let newcard2 = get.cardInfo(result.cards);\r\n                        var info = JSON.parse(newcard.slice(13));\r\n                        var id = info.shift();\r\n                        game.broadcastAll(function (card, info) {\r\n                            card.init(info);\r\n                        }, result.cards[0], info);\r\n                        player.storage.skillCardID.push(result.cards[0].cardid);\r\n                    }\r\n                    if (Evt.playersIndex < Evt.players.length) {\r\n                        Evt.playersIndex++;\r\n                        Evt.goto(0);\r\n                    }\r\n                },\r\n                group: ['renjiazhizhu_changecard', 'renjiazhizhu_clear'],\r\n                subSkill: {\r\n                    changecard: {\r\n                        trigger: { player: 'useCardToBefore' },\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            if (player.storage.skillCardID == null) {\r\n                                return false;\r\n                            }\r\n                            else {\r\n                                return player.storage.skillCardID.indexOf(Evt.card.cardid) != -1;\r\n                            }\r\n                        },\r\n                        content() {\r\n                        }\r\n                    },\r\n                    clear: {\r\n                        trigger: { global: 'phaseBefore' },\r\n                        silent: true,\r\n                        content() {\r\n                            delete player.storage.skillCardID;\r\n                            if (player.storage.changecardList != null) {\r\n                                player.storage.changecardList.forEach((element, index) => {\r\n                                    var newcard = get.cardInfoOL(element.card);\r\n                                    var info = JSON.parse(newcard.slice(13));\r\n                                    var id = info.shift();\r\n                                    info[1] = element.oldNumber;\r\n                                    if (info[5] == null) {\r\n                                        info[5] = [];\r\n                                    }\r\n                                    info[5].remove('card_hightlight');\r\n                                    game.broadcastAll(function (card, info) {\r\n                                        card.init(info);\r\n                                    }, element.card, info);\r\n                                });\r\n                            }\r\n                            delete player.storage.changecardList;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            renjiazhizhu2: {\r\n                trigger: { global: 'gainBefore' },\r\n                forced: true,\r\n                content() {\r\n                    console.log(card);\r\n                    console.log(trigger);\r\n                }\r\n            },\r\n            juhun: {\r\n                trigger: { global: 'damageAfter' },\r\n                forced: true,\r\n                usable: 1,\r\n                content() {\r\n                    Evt.card = get.cards()[0];\r\n                    if (!player.storage.juhun)\r\n                        player.storage.juhun = [];\r\n                    game.cardsGotoSpecial(Evt.card);\r\n                    player.$gain2(Evt.card);\r\n                    player.markAuto('juhun', [Evt.card]);\r\n                },\r\n                intro: {\r\n                    content: 'cards',\r\n                    onunmark: 'throw',\r\n                },\r\n                cardAround: true,\r\n                group: ['juhun_get'],\r\n                subSkill: {\r\n                    get: {\r\n                        trigger: {\r\n                            global: 'roundStart'\r\n                        },\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            return player.storage.juhun != undefined && player.storage.juhun.length != 0;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            player.gain(player.storage.juhun);\r\n                            player.$give(player.storage.juhun, player, false);\r\n                            delete player.storage.juhun;\r\n                            'step 1';\r\n                            player.unmarkSkill('juhun');\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            meilu: {\r\n                trigger: {\r\n                    player: 'phaseBegin'\r\n                },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h') - 3 >= player.hp;\r\n                },\r\n                content() {\r\n                    player.turnOver();\r\n                },\r\n                group: ['meilu_kill', 'meilu_draw'],\r\n                subSkill: {\r\n                    kill: {\r\n                        firstDo: true,\r\n                        trigger: { player: 'phaseUseBefore' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return player.classList.contains('turnedover');\r\n                        },\r\n                        content() {\r\n                            trigger.audioed = true;\r\n                            player.markSkill('meilu');\r\n                            player.addTempSkill('meilu_infinityKill', 'phaseUseEnd');\r\n                        },\r\n                    },\r\n                    draw: {\r\n                        trigger: { player: 'turnOverAfter' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return !player.classList.contains('turnedover');\r\n                        },\r\n                        content() {\r\n                            if (player.hp < player.maxHp) {\r\n                                player.markSkill('meilu');\r\n                                player.recover();\r\n                            }\r\n                        },\r\n                    },\r\n                    infinityKill: {\r\n                        mod: {\r\n                            cardUsable(card, player, num) {\r\n                                if (card.name == 'sha')\r\n                                    return Infinity;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            liaolishiyan: {\r\n                trigger: {\r\n                    player: \"phaseDrawBegin1\",\r\n                },\r\n                filter(Evt, player) {\r\n                    return !Evt.numFixed;\r\n                },\r\n                check(Evt, player) {\r\n                    return Evt.num < 2 || player.isDamaged();\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    trigger.changeToZero();\r\n                    var cards = get.cards(2);\r\n                    game.cardsGotoOrdering(cards);\r\n                    Evt.videoId = lib.status.videoId++;\r\n                    game.broadcastAll(function (player, id, cards) {\r\n                        var str;\r\n                        if (player == game.me && !_status.auto) {\r\n                            str = '料理实验<br>♦~重铸一张牌<br>♣~弃置一张牌<br>♥~令赤井心回复 1 点体力<br>♠~失去 1 点体力';\r\n                        }\r\n                        else {\r\n                            str = '料理实验<br>♦~重铸一张牌<br>♣~弃置一张牌<br>♥~令赤井心回复 1 点体力<br>♠~失去 1 点体力';\r\n                        }\r\n                        var dialog = ui.create.dialog(str, cards);\r\n                        dialog.videoId = id;\r\n                    }, player, Evt.videoId, cards);\r\n                    player.showCards(cards, '料理实验');\r\n                    player.storage.resultCards = cards;\r\n                    Evt.cards = cards;\r\n                    player.gain(cards, 'log', 'gain2');\r\n                    'step 1';\r\n                    for (var i = 0; i < Evt.cards.length; i++) {\r\n                        switch (get.suit(player.storage.resultCards[i])) {\r\n                            case 'spade':\r\n                                player.storage['card' + i] = '黑桃：失去 1 点体力';\r\n                                break;\r\n                            case 'heart':\r\n                                player.storage['card' + i] = '红桃：令赤井心回复 1 点体力';\r\n                                break;\r\n                            case 'diamond':\r\n                                player.storage['card' + i] = '方块：重铸一张牌';\r\n                                break;\r\n                            case 'club':\r\n                                player.storage['card' + i] = '梅花：弃置一张牌';\r\n                                break;\r\n                        }\r\n                    }\r\n                    'step 2';\r\n                    switch (get.suit(player.storage.resultCards[0])) {\r\n                        case 'spade':\r\n                            player.loseHp(1);\r\n                            break;\r\n                        case 'heart':\r\n                            player.recover();\r\n                            break;\r\n                        case 'diamond':\r\n                            player.chooseCard('he', '重铸一张牌', 1, true);\r\n                            break;\r\n                        case 'club':\r\n                            player.discardPlayerCard(player, 1, 'he', true);\r\n                            break;\r\n                    }\r\n                    \"step 3\";\r\n                    if (get.suit(player.storage.resultCards[0]) == 'diamond' && result.cards) {\r\n                        player.lose(result.cards, ui.discardPile).set('visible', true);\r\n                        player.$throw(result.cards, 1000);\r\n                        game.log(player, '将', result.cards, '置入了弃牌堆');\r\n                        player.draw();\r\n                    }\r\n                    'step 4';\r\n                    switch (get.suit(player.storage.resultCards[1])) {\r\n                        case 'spade':\r\n                            player.loseHp(1);\r\n                            break;\r\n                        case 'heart':\r\n                            player.recover();\r\n                            break;\r\n                        case 'diamond':\r\n                            player.chooseCard('he', '重铸一张牌', 1, true);\r\n                            break;\r\n                        case 'club':\r\n                            player.discardPlayerCard(player, 1, 'he', true);\r\n                            break;\r\n                    }\r\n                    'step 5';\r\n                    if (get.suit(player.storage.resultCards[1]) == 'diamond' && result.cards) {\r\n                        player.lose(result.cards, ui.discardPile);\r\n                        player.$throw(result.cards, 1000);\r\n                        game.log(player, '将', result.cards, '置入了弃牌堆');\r\n                        player.draw();\r\n                    }\r\n                    game.broadcastAll('closeDialog', Evt.videoId);\r\n                    player.addTempSkill('liaolishiyan2');\r\n                },\r\n                group: 'liaolishiyan_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { global: ['phaseUseAfter', 'phaseAfter'] },\r\n                        silent: true,\r\n                        filter(Evt) {\r\n                        },\r\n                        content() {\r\n                            delete player.storage.resultCards;\r\n                            delete player.storage.card0;\r\n                            delete player.storage.card1;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            liaolishiyan2: {\r\n                enable: 'phaseUse',\r\n                position: 'he',\r\n                filter(Evt, player) {\r\n                    return !player.hasSkill('liaolishiyan3');\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseCardTarget({\r\n                        position: 'he',\r\n                        prompt: '重置两张相同花色牌令一名角色按顺序执行' + '<br>' + player.storage.card0 + '<br>' + player.storage.card1,\r\n                        selectCard: 2,\r\n                        filterCard(card, player) {\r\n                            return (get.suit(card) == get.suit(player.storage.resultCards[0])) || (get.suit(card) == get.suit(player.storage.resultCards[1]));\r\n                        },\r\n                        filterTarget(card, player, target) {\r\n                            if (card.cards) {\r\n                                if (get.suit(player.storage.resultCards[0]) == get.suit(player.storage.resultCards[1]))\r\n                                    return true;\r\n                                else\r\n                                    return get.suit(card.cards[0]) != get.suit(card.cards[1]);\r\n                            }\r\n                        }\r\n                    });\r\n                    'step 1';\r\n                    Evt.result = result;\r\n                    if (Evt.result.bool) {\r\n                        player.lose(result.cards, ui.discardPile);\r\n                        player.$throw(result.cards, 1000);\r\n                        game.log(player, '将', result.cards, '置入了弃牌堆');\r\n                        player.draw(2);\r\n                        switch (get.suit(player.storage.resultCards[0])) {\r\n                            case 'spade':\r\n                                Evt.result.targets[0].loseHp(1);\r\n                                break;\r\n                            case 'heart':\r\n                                player.recover();\r\n                                break;\r\n                            case 'diamond':\r\n                                Evt.result.targets[0].chooseCard('he', '重铸一张牌', 1, true);\r\n                                break;\r\n                            case 'club':\r\n                                Evt.result.targets[0].discardPlayerCard(Evt.result.targets[0], 1, 'he', true);\r\n                                break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.goto(4);\r\n                    }\r\n                    'step 2';\r\n                    if (get.suit(player.storage.resultCards[0]) == 'diamond' && result.cards) {\r\n                        Evt.result.targets[0].lose(result.cards, ui.discardPile);\r\n                        Evt.result.targets[0].$throw(result.cards, 1000);\r\n                        game.log(Evt.result.targets[0], '将', result.cards, '置入了弃牌堆');\r\n                        Evt.result.targets[0].draw();\r\n                    }\r\n                    switch (get.suit(player.storage.resultCards[1])) {\r\n                        case 'spade':\r\n                            Evt.result.targets[0].loseHp(1);\r\n                            break;\r\n                        case 'heart':\r\n                            player.recover();\r\n                            break;\r\n                        case 'diamond':\r\n                            Evt.result.targets[0].chooseCard('he', '重铸一张牌', 1, true);\r\n                            break;\r\n                        case 'club':\r\n                            Evt.result.targets[0].discardPlayerCard(Evt.result.targets[0], 1, 'he', true);\r\n                            break;\r\n                    }\r\n                    'step 3';\r\n                    if (get.suit(player.storage.resultCards[1]) == 'diamond' && result.cards) {\r\n                        Evt.result.targets[0].lose(result.cards, ui.discardPile);\r\n                        Evt.result.targets[0].$throw(result.cards, 1000);\r\n                        game.log(Evt.result.targets[0], '将', result.cards, '置入了弃牌堆');\r\n                        Evt.result.targets[0].draw();\r\n                    }\r\n                    player.addTempSkill('liaolishiyan3');\r\n                    Evt.finish();\r\n                    'step 4';\r\n                    Evt.finish();\r\n                }\r\n            },\r\n            liaolishiyan3: {\r\n                trigger: { global: ['phaseUseAfter', 'phaseAfter'] },\r\n                silent: true,\r\n                filter(Evt) {\r\n                    return Evt.skill != 'liaolishiyan' && Evt.skill != 'liaolishiyan2';\r\n                },\r\n                content() {\r\n                    player.removeSkill('liaolishiyan3');\r\n                }\r\n            },\r\n            momizhiyan: {\r\n                usable: 1,\r\n                trigger: {\r\n                    player: 'useCardToBegin',\r\n                },\r\n                filter(Evt, player) {\r\n                    return (player.countCards('he') > 0) && Evt.targets && Evt.targets.length > 0;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.chooseToDiscard('he', '弃置一张牌', 1, true);\r\n                    game.delayx();\r\n                    'step 1';\r\n                    Evt.multiTrue = false;\r\n                    if (result.bool) {\r\n                        Evt.suit = get.suit(result.cards[0]);\r\n                        player.storage.momizhiyanGroup = trigger.targets;\r\n                        if (trigger.targets.length > 1) {\r\n                            Evt.multiTrue = true;\r\n                            player.chooseTarget(function (card, player, target) {\r\n                                return player.storage.momizhiyanGroup.contains(target);\r\n                            }, 1, true);\r\n                            game.delayx();\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    if (result.targets && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        trigger.targets[0] = result.targets[0];\r\n                    }\r\n                    else if (result.multiTrue) {\r\n                        trigger.targets[0] = player;\r\n                    }\r\n                    if (Evt.suit) {\r\n                        switch (Evt.suit) {\r\n                            case 'spade':\r\n                                trigger.targets[0].loseHp(1);\r\n                                break;\r\n                            case 'heart':\r\n                                player.recover();\r\n                                break;\r\n                            case 'diamond':\r\n                                trigger.targets[0].chooseCard('he', '重铸一张牌', 1, true);\r\n                                break;\r\n                            case 'club':\r\n                                trigger.targets[0].discardPlayerCard(trigger.targets[0], 1, 'he', true);\r\n                                break;\r\n                        }\r\n                    }\r\n                    delete player.storage.momizhiyanGroup;\r\n                    'step 3';\r\n                    if (Evt.suit == 'diamond' && result.cards) {\r\n                        trigger.targets[0].lose(result.cards, ui.discardPile);\r\n                        trigger.targets[0].$throw(result.cards, 1000);\r\n                        game.log(trigger.targets[0], '将', result.cards, '置入了弃牌堆');\r\n                        trigger.targets[0].draw();\r\n                    }\r\n                    Evt.finish();\r\n                }\r\n            },\r\n            huxi1: {\r\n                audio: 4,\r\n                enable: 'phaseUse',\r\n                position: 'he',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h');\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    return player.inRange(target) && player.countCards('h') && target.countCards('h');\r\n                },\r\n                content() {\r\n                    \"step 0\";\r\n                    if (player.countCards('h') == 0 || target.countCards('h') == 0) {\r\n                        Evt.result = { cancelled: true, bool: false };\r\n                        Evt.finish();\r\n                        return;\r\n                    }\r\n                    game.log(player, '想要呼吸', target);\r\n                    \"step 1\";\r\n                    player.chooseCard('###『呼吸』###请选择交换的牌', true).set('type', 'compare').set('ai', card => {\r\n                        return 5 - get.value(card);\r\n                    });\r\n                    \"step 2\";\r\n                    Evt.card1 = result.cards[0];\r\n                    target.chooseCard('###『呼吸』###请选择交换的牌', true).set('type', 'compare');\r\n                    \"step 3\";\r\n                    Evt.card2 = result.cards[0];\r\n                    if (!Evt.resultOL && Evt.ol) {\r\n                        game.pause();\r\n                    }\r\n                    \"step 4\";\r\n                    player.lose(Evt.card1, ui.ordering);\r\n                    target.lose(Evt.card2, ui.ordering);\r\n                    \"step 5\";\r\n                    game.broadcast(function () {\r\n                        ui.arena.classList.add('thrownhighlight');\r\n                    });\r\n                    ui.arena.classList.add('thrownhighlight');\r\n                    game.addVideo('thrownhighlight1');\r\n                    player.$compare(Evt.card1, target, Evt.card2);\r\n                    game.log(player, '的交换牌为', Evt.card1);\r\n                    game.log(target, '的交换牌为', Evt.card2);\r\n                    Evt.num1 = Evt.card1.number;\r\n                    Evt.num2 = Evt.card2.number;\r\n                    Evt.trigger('compare');\r\n                    game.delay(0, 1500);\r\n                    \"step 6\";\r\n                    Evt.result = {\r\n                        player: Evt.card1,\r\n                        target: Evt.card2,\r\n                        suit1: get.suit(Evt.card1),\r\n                        suit2: get.suit(Evt.card2)\r\n                    };\r\n                    var str;\r\n                    str = get.translation(player.name) + '想要呼吸' + get.translation(target.name);\r\n                    game.broadcastAll(function (str) {\r\n                        var dialog = ui.create.dialog(str);\r\n                        dialog.classList.add('center');\r\n                        setTimeout(function () {\r\n                            dialog.close();\r\n                        }, 1000);\r\n                    }, str);\r\n                    game.delay(2);\r\n                    \"step 7\";\r\n                    if (typeof Evt.target.ai.shown == 'number' && Evt.target.ai.shown <= 0.85 && Evt.addToAI) {\r\n                        Evt.target.ai.shown += 0.1;\r\n                    }\r\n                    player.gain(Evt.card2, 'visible');\r\n                    player.$gain2(Evt.card2);\r\n                    game.delay(2);\r\n                    target.gain(Evt.card1, 'visible');\r\n                    target.$gain2(Evt.card1);\r\n                    game.broadcastAll(function () {\r\n                        ui.arena.classList.remove('thrownhighlight');\r\n                    });\r\n                    game.addVideo('thrownhighlight2');\r\n                    if (Evt.clear !== false) {\r\n                        game.broadcastAll(ui.clear);\r\n                    }\r\n                    if (typeof Evt.preserve == 'function') {\r\n                        Evt.preserve = Evt.preserve(Evt.result);\r\n                    }\r\n                    \"step 8\";\r\n                    if (Evt.result.suit2 == 'heart' || Evt.result.suit2 == 'diamond' || Evt.result.suit1 == 'heart' || Evt.result.suit1 == 'diamond') {\r\n                        if (Evt.result.suit2 == 'heart' || Evt.result.suit2 == 'diamond') {\r\n                            player.draw(1);\r\n                            if (!player.hasSkill('huxi2')) {\r\n                                player.addTempSkill('huxi2');\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        player.loseHp(1);\r\n                    }\r\n                    if (player.storage.huxiGroup == null)\r\n                        player.storage.huxiGroup = [];\r\n                    player.storage.huxiGroup.add(target);\r\n                },\r\n                ai: {\r\n                    order: 6,\r\n                    result: {\r\n                        player: 1,\r\n                        target(player, target) {\r\n                            if (player.countCards('h', { name: 'du' }))\r\n                                return -2;\r\n                            return 0.5;\r\n                        }\r\n                    },\r\n                    threaten: 0.8,\r\n                },\r\n                group: 'huxi1_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        firstDo: true,\r\n                        silent: true,\r\n                        direct: true,\r\n                        trigger: {\r\n                            player: ['phaseAfter', 'phaseUseAfter']\r\n                        },\r\n                        content() {\r\n                            delete player.storage.huxiGroup;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            huxi2: {\r\n                trigger: {\r\n                    player: ['useCardBefore', 'phaseUseAfter']\r\n                },\r\n                firstDo: true,\r\n                direct: true,\r\n                content() {\r\n                    if (player.hasSkill('huxi2')) {\r\n                        player.removeSkill('huxi2');\r\n                    }\r\n                },\r\n                mod: {\r\n                    cardUsable(card, player, num) {\r\n                        return Infinity;\r\n                    },\r\n                    globalFrom(from, to, distance) {\r\n                        return -1;\r\n                    },\r\n                }\r\n            },\r\n            lianmeng: {\r\n                trigger: {\r\n                    player: 'useCardAfter',\r\n                    source: 'damageSource',\r\n                },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    if (player.storage.huxiGroup == null) {\r\n                        player.storage.huxiGroup = [];\r\n                    }\r\n                    if (Evt.target) {\r\n                        if (player.storage.huxiGroup && player.storage.huxiGroup.contains(Evt.target)) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    if (Evt.name == 'useCard') {\r\n                        if (Evt.cards != null && get.subtype(Evt.cards[0]) != 'equip1') {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    if (player.countCards('h') < 1) {\r\n                        return false;\r\n                    }\r\n                    if (game.hasPlayer(cur => {\r\n                        return player.inRange(cur) && !player.storage.huxiGroup.contains(cur) && cur.countCards('h') > 0;\r\n                    })) {\r\n                        return true;\r\n                    }\r\n                    else\r\n                        return false;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.chooseTarget('对一名角色使用' + get.translation('huxi1'), {}, true, function (card, player, target) {\r\n                        if (player == target)\r\n                            return false;\r\n                        if (!player.inRange(target))\r\n                            return false;\r\n                        if (target.countCards('h') < 1) {\r\n                            return false;\r\n                        }\r\n                        if (player.storage.huxiGroup && player.storage.huxiGroup.contains(target)) {\r\n                            return false;\r\n                        }\r\n                        if (player.storage.huxiGroup.contains(target))\r\n                            return false;\r\n                        if (game.hasPlayer(cur => {\r\n                            if (player.storage.huxiGroup && player.storage.huxiGroup.contains(cur)) {\r\n                                return false;\r\n                            }\r\n                            if (cur.countCards('h') == 0) {\r\n                                return false;\r\n                            }\r\n                            if (cur != player && get.distance(player, cur) < get.distance(player, target)) {\r\n                                return true;\r\n                            }\r\n                            else {\r\n                                return false;\r\n                            }\r\n                        })) {\r\n                            return false;\r\n                        }\r\n                        return true;\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        Evt.target = result.targets[0];\r\n                        if (player.countCards('h') == 0 || Evt.target.countCards('h') == 0) {\r\n                            Evt.result = { cancelled: true, bool: false };\r\n                            Evt.finish();\r\n                            return;\r\n                        }\r\n                        game.log(player, '想要呼吸', Evt.target);\r\n                    }\r\n                    \"step 2\";\r\n                    player.chooseCard('请选择交换的牌', true).set('type', 'compare');\r\n                    \"step 3\";\r\n                    Evt.card1 = result.cards[0];\r\n                    Evt.target.chooseCard('请选择交换的牌', true).set('type', 'compare');\r\n                    \"step 4\";\r\n                    Evt.card2 = result.cards[0];\r\n                    if (!Evt.resultOL && Evt.ol) {\r\n                        game.pause();\r\n                    }\r\n                    \"step 5\";\r\n                    player.lose(Evt.card1, ui.ordering);\r\n                    Evt.target.lose(Evt.card2, ui.ordering);\r\n                    \"step 6\";\r\n                    game.broadcast(function () {\r\n                        ui.arena.classList.add('thrownhighlight');\r\n                    });\r\n                    ui.arena.classList.add('thrownhighlight');\r\n                    game.addVideo('thrownhighlight1');\r\n                    player.$compare(Evt.card1, Evt.target, Evt.card2);\r\n                    game.log(player, '的交换牌为', Evt.card1);\r\n                    game.log(Evt.target, '的交换牌为', Evt.card2);\r\n                    Evt.num1 = Evt.card1.number;\r\n                    Evt.num2 = Evt.card2.number;\r\n                    Evt.trigger('compare');\r\n                    game.delay(0, 1500);\r\n                    \"step 7\";\r\n                    Evt.result = {\r\n                        player: Evt.card1,\r\n                        target: Evt.card2,\r\n                        suit1: get.suit(Evt.card1),\r\n                        suit2: get.suit(Evt.card2)\r\n                    };\r\n                    var str;\r\n                    str = get.translation(player.name) + '想要呼吸' + get.translation(Evt.target.name);\r\n                    game.broadcastAll(function (str) {\r\n                        var dialog = ui.create.dialog(str);\r\n                        dialog.classList.add('center');\r\n                        setTimeout(function () {\r\n                            dialog.close();\r\n                        }, 1000);\r\n                    }, str);\r\n                    game.delay(2);\r\n                    \"step 8\";\r\n                    if (typeof Evt.target.ai.shown == 'number' && Evt.target.ai.shown <= 0.85 && Evt.addToAI) {\r\n                        Evt.target.ai.shown += 0.1;\r\n                    }\r\n                    player.gain(Evt.card2, 'visible');\r\n                    player.$gain2(Evt.card2);\r\n                    game.delay(2);\r\n                    Evt.target.gain(Evt.card1, 'visible');\r\n                    Evt.target.$gain2(Evt.card1);\r\n                    game.broadcastAll(function () {\r\n                        ui.arena.classList.remove('thrownhighlight');\r\n                    });\r\n                    game.addVideo('thrownhighlight2');\r\n                    if (Evt.clear !== false) {\r\n                        game.broadcastAll(ui.clear);\r\n                    }\r\n                    if (typeof Evt.preserve == 'function') {\r\n                        Evt.preserve = Evt.preserve(Evt.result);\r\n                    }\r\n                    \"step 9\";\r\n                    if (Evt.result.suit2 == 'heart' || Evt.result.suit2 == 'diamond' || Evt.result.suit1 == 'heart' || Evt.result.suit1 == 'diamond') {\r\n                        if (Evt.result.suit2 == 'heart' || Evt.result.suit2 == 'diamond') {\r\n                            player.draw(1);\r\n                            if (!player.hasSkill('huxi2')) {\r\n                                player.addTempSkill('huxi2');\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        player.loseHp(1);\r\n                    }\r\n                    if (player.storage.huxiGroup == null)\r\n                        player.storage.huxiGroup = [];\r\n                    player.storage.huxiGroup.add(Evt.target);\r\n                },\r\n                group: 'lianmeng_difang',\r\n                subSkill: {\r\n                    difang: {\r\n                        trigger: {\r\n                            player: ['gainAfter']\r\n                        },\r\n                        firstDo: true,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            if (player == _status.currentPhase)\r\n                                return false;\r\n                            return Evt.source && player != Evt.source;\r\n                        },\r\n                        content() {\r\n                            player.discard(player.getEquip(2));\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            gaonengzhanxie: {\r\n                priority: 15,\r\n                firstDo: true,\r\n                mod: {\r\n                    cardUsable(card, player, num) {\r\n                        if (card.name == 'sha') {\r\n                            return num + player.countCards('e');\r\n                        }\r\n                    },\r\n                    cardEnabled(card, player) {\r\n                        if (card.name == 'sha' && (player.getStat().card.sha > player.countCards('e')))\r\n                            return false;\r\n                    }\r\n                },\r\n                group: ['gaonengzhanxie_draw'],\r\n                subSkill: {\r\n                    draw: {\r\n                        trigger: {\r\n                            player: 'useCardAfter'\r\n                        },\r\n                        firstDo: true,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            if (Evt.card.name == 'sha')\r\n                                return true;\r\n                            else\r\n                                return false;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            player.draw(player.getStat().card.sha);\r\n                            'step 1';\r\n                            if (player.getCardUsable({ name: 'sha' }) !== 0 && lib.filter.cardEnabled({ name: 'sha' }, player)) {\r\n                                player.chooseToDiscard('he', '弃置' + player.getStat().card.sha.toString() + '张牌', player.getStat().card.sha, true);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            ranyouxielou: {\r\n                forced: true,\r\n                trigger: { player: 'damageBegin4' },\r\n                filter(Evt) {\r\n                    if (Evt.nature != null)\r\n                        return true;\r\n                    return false;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    if (trigger.source) {\r\n                        var list = [\r\n                            '令' + get.translation(player) + '回复' + trigger.num + '点生命',\r\n                            '将' + get.translation(trigger.cards) + '交给' + get.translation(player),\r\n                        ];\r\n                        if (!trigger.cards || trigger.cards.length == 0)\r\n                            list.pop();\r\n                        trigger.source.chooseControl(true).set('choiceList', list);\r\n                    }\r\n                    else {\r\n                        player.recover(trigger.num, trigger.source);\r\n                        Evt.finish();\r\n                    }\r\n                    'step 1';\r\n                    if (result.index == 0) {\r\n                        player.recover(trigger.num, trigger.source);\r\n                        trigger.cancel();\r\n                    }\r\n                    else {\r\n                        if (trigger.cards) {\r\n                            player.gain(trigger.cards, 'gain2', trigger.source);\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (card.name == 'tiesuo')\r\n                                return 0;\r\n                            if (get.tag(card, 'natureDamage'))\r\n                                return 0;\r\n                        }\r\n                    },\r\n                },\r\n                group: 'ranyouxielou_fire',\r\n                subSkill: {\r\n                    fire: {\r\n                        trigger: { global: 'damageBegin3' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            if (Evt.player == player)\r\n                                return false;\r\n                            if (Evt.player && player.inRange(Evt.player) && Evt.nature == 'fire') {\r\n                                if (player.countCards('h') >= player.getHandcardLimit())\r\n                                    return true;\r\n                            }\r\n                            return false;\r\n                        },\r\n                        content() {\r\n                            player.chooseToDiscard('he', '弃置一张牌，使该伤害+1', true, 1);\r\n                            trigger.num++;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            baihuqingguo: {\r\n                trigger: { global: 'phaseBegin' },\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && player.countCards('he') > 0;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseToDiscard(1, '弃置一张牌');\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.addTempSkill('baihuqingguo_chaofeng');\r\n                        trigger.player.addTempSkill('baihuqingguo_meihuo');\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    chaofeng: {\r\n                        mark: true,\r\n                        markText: '狐',\r\n                        intro: {\r\n                            name: '狐',\r\n                            content: '你只能摸这只🦊'\r\n                        },\r\n                    },\r\n                    meihuo: {\r\n                        mark: true,\r\n                        markText: '魅',\r\n                        intro: {\r\n                            name: '魅',\r\n                            content: '你只能摸那只🦊'\r\n                        },\r\n                        mod: {\r\n                            playerEnabled(card, player, target) {\r\n                                if (target == player || target.hasSkill('baihuqingguo_chaofeng')) {\r\n                                    return true;\r\n                                }\r\n                                else {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            huyanluanyu: {\r\n                trigger: {\r\n                    player: 'damage'\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.index = 0;\r\n                    Evt.damageNum = trigger.num;\r\n                    Evt.nowHand = player.countCards('h');\r\n                    Evt.getPlayers = game.filterPlayer(cur => {\r\n                        if (cur.countCards('h') > Evt.nowHand) {\r\n                            return true;\r\n                        }\r\n                    });\r\n                    Evt.givePlayers = game.filterPlayer(cur => {\r\n                        if (cur.countCards('h') < Evt.nowHand) {\r\n                            return true;\r\n                        }\r\n                    });\r\n                    'step 1';\r\n                    if (Evt.index < Evt.getPlayers.length) {\r\n                        if (Evt.getPlayers[Evt.index].countCards('he') > 0) {\r\n                            Evt.getPlayers[Evt.index].chooseCard(1, 'he', '交给' + get.translation(player) + '一张牌', true);\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.index = 0;\r\n                        Evt.goto(3);\r\n                    }\r\n                    'step 2';\r\n                    player.gain(result.cards);\r\n                    game.delayx();\r\n                    Evt.index += 1;\r\n                    Evt.goto(1);\r\n                    'step 3';\r\n                    if (Evt.index < Evt.givePlayers.length) {\r\n                        if (player.countCards('he') > 0) {\r\n                            player.chooseCard(1, 'he', '交给' + get.translation(Evt.givePlayers[Evt.index]) + '一张牌', true);\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.goto(5);\r\n                    }\r\n                    'step 4';\r\n                    Evt.givePlayers[Evt.index].gain(result.cards);\r\n                    game.delayx();\r\n                    Evt.index += 1;\r\n                    Evt.goto(3);\r\n                    'step 5';\r\n                    Evt.finish();\r\n                }\r\n            },\r\n            yuanlv: {\r\n                audio: 6,\r\n                trigger: { global: 'phaseEnd' },\r\n                priority: 2,\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('yuanlv_tag')) {\r\n                        return true;\r\n                    }\r\n                    else\r\n                        return false;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.draw(player.maxHp);\r\n                    'step 1';\r\n                    player.chooseCard(player.hp, 'he', '###『远虑』###选择放置到牌堆顶部的牌', true);\r\n                    'step 2';\r\n                    if (result.bool == true && result.cards != null) {\r\n                        Evt.cards = result.cards;\r\n                    }\r\n                    if (Evt.cards.length > 0) {\r\n                        player.chooseButton(true, Evt.cards.length, ['按顺序将卡牌置于牌堆顶（先选择的在上）', Evt.cards]).set('ai', function (button) {\r\n                            var player = _status.event.player;\r\n                            var now = _status.currentPhase;\r\n                            var next = now.getNext();\r\n                            var att = get.attitude(player, next);\r\n                            var card = button.link;\r\n                            var judge = next.getCards('j')[ui.selected.buttons.length];\r\n                            if (judge) {\r\n                                return get.judge(judge)(card) * att;\r\n                            }\r\n                            return next.getUseValue(card) * att;\r\n                        });\r\n                    }\r\n                    'step 3';\r\n                    if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length))\r\n                        Evt.linkcards = result.links.slice(0);\r\n                    else\r\n                        Evt.finish();\r\n                    game.delay();\r\n                    'step 4';\r\n                    var cards = Evt.linkcards;\r\n                    player.lose(cards, ui.special);\r\n                    'step 5';\r\n                    game.delay();\r\n                    'step 6';\r\n                    var cards = Evt.linkcards;\r\n                    while (cards.length > 0) {\r\n                        var card = cards.pop();\r\n                        card.fix();\r\n                        ui.cardPile.insertBefore(card, ui.cardPile.firstChild);\r\n                        game.updateRoundNumber();\r\n                    }\r\n                },\r\n                group: ['yuanlv_ready'],\r\n                subSkill: {\r\n                    ready: {\r\n                        trigger: { player: ['damageAfter', 'loseHpAfter', 'useCardAfter'] },\r\n                        priority: 2,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            if (Evt.name == 'useCard') {\r\n                                var indexi = 0;\r\n                                while (indexi < Evt.cards.length) {\r\n                                    if (get.type(Evt.cards[indexi]) == 'trick' || get.type(Evt.cards[indexi]) == 'delay')\r\n                                        return true;\r\n                                    indexi++;\r\n                                }\r\n                                return false;\r\n                            }\r\n                            else\r\n                                return true;\r\n                        },\r\n                        content() {\r\n                            if (trigger.name == 'useCard') {\r\n                                if (!player.hasSkill('yuanlv_tag') && !player.hasSkill('yuanlv_trickUsed')) {\r\n                                    player.addTempSkill('yuanlv_tag');\r\n                                    player.addTempSkill('yuanlv_trickUsed', 'roundStart');\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (!player.hasSkill('yuanlv_tag') && !player.hasSkill('yuanlv_damaged')) {\r\n                                    player.addTempSkill('yuanlv_tag');\r\n                                    player.addTempSkill('yuanlv_damaged', 'roundStart');\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    tag: {\r\n                        mark: true,\r\n                        markText: '虑',\r\n                        intro: {\r\n                            content() {\r\n                                return '结束时触发技能' + get.translation('yuanlv');\r\n                            }\r\n                        }\r\n                    },\r\n                    damaged: {\r\n                        mark: true,\r\n                        markText: '伤',\r\n                        intro: {\r\n                            content() {\r\n                                return '本轮已经通过失去体力触发' + get.translation('yuanlv');\r\n                            }\r\n                        }\r\n                    },\r\n                    trickUsed: {\r\n                        mark: true,\r\n                        markText: '锦',\r\n                        intro: {\r\n                            content() {\r\n                                return '本轮已经通过使用锦囊触发' + get.translation('yuanlv');\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten: 0.6,\r\n                }\r\n            },\r\n            jinyuan: {\r\n                audio: 4,\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') > 0;\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    return player != target && target.countCards('h') > 0;\r\n                },\r\n                content: [() => {\r\n                        player.viewHandcards(target);\r\n                        game.delayx();\r\n                    }, () => {\r\n                        Evt.nowHandCards = target.getCards('h');\r\n                        player.chooseCard('he', '###『近援』###选择给予的牌').set('ai', card => {\r\n                            return 6 - get.value(card);\r\n                        });\r\n                    }, () => {\r\n                        if (result.cards && result.cards.length) {\r\n                            Evt.cardUsable = target.hasUseTarget(Evt.card);\r\n                            Evt.card = result.cards[0];\r\n                            target.gain(Evt.card, player, 'give');\r\n                            game.delay(0.2);\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.cardUsable) {\r\n                            target.chooseUseTarget(Evt.card, `可选择一个目标直接使用${get.translation(Evt.card)}`);\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    order: 6,\r\n                    result: {\r\n                        target: 1,\r\n                    },\r\n                },\r\n            },\r\n            zhongjian: {\r\n                audio: true,\r\n                unique: true,\r\n                zhuSkill: true,\r\n                trigger: { global: 'useCard2' },\r\n                round: 1,\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    if (!player.hasZhuSkill('zhongjian'))\r\n                        return false;\r\n                    if (get.type(Evt.card) !== 'trick' || !Evt.targets || !Evt.targets.length)\r\n                        return false;\r\n                    return game.hasPlayer(cur => {\r\n                        return cur.group == player.group;\r\n                    });\r\n                },\r\n                content() {\r\n                    \"step 0\";\r\n                    var _a;\r\n                    player.chooseTarget('###' + get.prompt('zhongjian') + '###令一名' + get.translation(player.group + '2') + '势力角色本回合一张手牌视为无懈可击', {}, function (card, player, target) {\r\n                        return target.group == player.group && target.countCards('h') > 0;\r\n                    });\r\n                    \"step 1\";\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        Evt.target = result.targets[0];\r\n                        player.logSkill('zhongjian', Evt.target);\r\n                        player.choosePlayerCard(Evt.target, 1, 'h', true);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    \"step 2\";\r\n                    if (result.bool) {\r\n                        Evt.target.storage.changeWuxie = result.links[0];\r\n                        Evt.target.addTempSkill('zhongjian_zhuanhua');\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    zhuanhua: {\r\n                        mark: true,\r\n                        intro: {\r\n                            content() {\r\n                                return '一张手牌视为【无懈可击】';\r\n                            }\r\n                        },\r\n                        onremove: ['changeWuxie'],\r\n                        mod: {\r\n                            cardname(card, player) {\r\n                                if (card == player.storage.changeWuxie)\r\n                                    return 'wuxie';\r\n                            },\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            meiwu: {\r\n                direct: true,\r\n                trigger: {\r\n                    target: 'useCardToTarget',\r\n                },\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return get.color(Evt.card) == 'black' && Evt.targets.length == 1 && game.hasPlayer(cur => {\r\n                        return cur != player && cur != Evt.player;\r\n                    });\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.chooseTarget('###『魅舞』###转移给一名其它角色', function (card, player, target) {\r\n                        return player != target && target != _status.event.tplayer;\r\n                    }).set('ai', function (target) {\r\n                        var player = _status.event.player;\r\n                        return get.effect(target, _status.event.card, _status.event.tplayer, player) - 0.5;\r\n                    }).set('tplayer', trigger.player).set('card', trigger.card);\r\n                    'step 1';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        var target = result.targets[0];\r\n                        player.logSkill(Evt.name, target);\r\n                        var evt = trigger.getParent();\r\n                        evt.triggeredTargets2.remove(player);\r\n                        evt.targets.remove(player);\r\n                        evt.targets.push(target);\r\n                        player.storage.meiwu_trace = {\r\n                            cardid: trigger.card.cardid,\r\n                            target: target,\r\n                        };\r\n                    }\r\n                },\r\n                group: ['meiwu_trace'],\r\n                subSkill: {\r\n                    trace: {\r\n                        direct: true,\r\n                        trigger: {\r\n                            global: 'useCardAfter',\r\n                        },\r\n                        filter(Evt, player) {\r\n                            if (!player.storage.meiwu_trace)\r\n                                return false;\r\n                            return player.storage.meiwu_trace.cardid == Evt.card.cardid &&\r\n                                (Evt.result.bool == false || Evt.iswuxied);\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            player.chooseCard(true, 'he', \"交给其一张牌\");\r\n                            'step 1';\r\n                            if (result.bool && result.cards.length) {\r\n                                var target = player.storage.meiwu_trace.target;\r\n                                player.$giveAuto(result.cards, target);\r\n                                target.gain(result.cards, player);\r\n                            }\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            huichu: {\r\n                trigger: {\r\n                    global: 'phaseBegin',\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.countCards('h')\r\n                        && !game.hasPlayer(cur => {\r\n                            return cur.hp < Evt.player.hp;\r\n                        });\r\n                },\r\n                check(Evt, player) {\r\n                    if (player.countCards('h') == player.countCards('h', { suit: 'heart' }))\r\n                        return get.recoverEffect(Evt.player, player, player) > 0;\r\n                    return 1;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.showHandcards();\r\n                    Evt.chk = player.countCards('h') == player.countCards('h', { suit: 'heart' });\r\n                    'step 1';\r\n                    if (Evt.chk) {\r\n                        trigger.player.recover();\r\n                    }\r\n                    'step 2';\r\n                    if (!Evt.chk) {\r\n                        player.chooseCard(\"###『慧厨』###重铸任意张手牌\", 'h', [1, Infinity]).set('ai', card => {\r\n                            return 6.5 - get.value(card);\r\n                        });\r\n                    }\r\n                    'step 3';\r\n                    if (!Evt.chk && result.bool && result.cards.length) {\r\n                        player.lose(result.cards, ui.discardPile).set('visible', true);\r\n                        player.$throw(result.cards, 1000);\r\n                        game.log(player, '将', result.cards, '置入了弃牌堆');\r\n                        player.draw(result.cards.length);\r\n                    }\r\n                }\r\n            },\r\n            haodu: {\r\n                enable: 'phaseUse',\r\n                filterCard: true,\r\n                selectCard: [1, Infinity],\r\n                position: 'h',\r\n                selectTarget: 1,\r\n                discard: false,\r\n                lose: false,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h') && !player.hasSkill('haodu_lose')\r\n                        && (!player.getStat('skill').haodu) || ((player.getStat('skill').haodu || 0) < player.maxHp - player.hp);\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    return player != target;\r\n                },\r\n                check(card) {\r\n                    if (ui.selected.cards.length)\r\n                        return 0;\r\n                    return (get.type(card) != 'basic' ? (6 - get.value(card)) : 7 - get.value(card));\r\n                },\r\n                complexCard: true,\r\n                content() {\r\n                    'step 0';\r\n                    target.gain(cards, player, 'giveAuto');\r\n                    'step 1';\r\n                    Evt.videoId = lib.status.videoId++;\r\n                    var typelist = [\r\n                        ['基本', '', 'sha', 'basic', 'div1'],\r\n                        ['锦囊', '', 'wuzhong', 'trick', 'delay', 'div1'],\r\n                        ['装备', '', 'renwang', 'equip', 'div1']\r\n                    ];\r\n                    var suitlist = [\r\n                        ['heart', '', 'heart', 'heart', 'div2'],\r\n                        ['diamond', '', 'diamond', 'diamond', 'div2'],\r\n                        ['club', '', 'club', 'club', 'div2'],\r\n                        ['spade', '', 'spade', 'spade', 'div2']\r\n                    ];\r\n                    var numberlist = [];\r\n                    for (let i = 1; i <= 13; ++i) {\r\n                        numberlist.push(['', i, get.strNumber(i), i, 'div3']);\r\n                    }\r\n                    game.broadcastAll(function (id, typelist, suitlist, numberlist) {\r\n                        var dialog = ui.create.dialog('『豪赌』 选择');\r\n                        dialog.addText('类型');\r\n                        dialog.add([typelist, 'vcard']);\r\n                        dialog.addText('花色');\r\n                        dialog.add([suitlist, 'vcard']);\r\n                        dialog.addText('点数');\r\n                        dialog.add([numberlist, 'vcard']);\r\n                        dialog.videoId = id;\r\n                    }, Evt.videoId, typelist, suitlist, numberlist);\r\n                    'step 2';\r\n                    var next = player.chooseButton(3, true);\r\n                    next.set('dialog', Evt.videoId);\r\n                    next.set('filterButton', function (button) {\r\n                        for (var i = 0; i < ui.selected.buttons.length; i++) {\r\n                            var now = button.link, pre = ui.selected.buttons[i].link;\r\n                            if (now[now.length - 1] == pre[pre.length - 1])\r\n                                return false;\r\n                        }\r\n                        return true;\r\n                    });\r\n                    next.set('ai', function (button) {\r\n                        var card = _status.event.card;\r\n                        var now = button.link;\r\n                        if ([get.type2(card), get.suit(card), get.number(card)].contains(now[3]))\r\n                            return true;\r\n                        return 0;\r\n                    });\r\n                    next.set('card', cards[0]);\r\n                    'step 3';\r\n                    game.broadcastAll('closeDialog', Evt.videoId);\r\n                    if (result.bool) {\r\n                        Evt.chi = [];\r\n                        result.links.forEach(card => {\r\n                            for (var i = 3; i < card.length - 1; ++i)\r\n                                Evt.chi.push(card[i]);\r\n                        });\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 4';\r\n                    player.choosePlayerCard(target, 'h', true);\r\n                    'step 5';\r\n                    if (result.bool) {\r\n                        Evt.card = result.links[0];\r\n                        var str = \"『豪赌』展示<br>\";\r\n                        game.log(player, '选择了', Evt.chi);\r\n                        if (Evt.chi.contains(get.number(Evt.card)))\r\n                            str += \"你与其交换手牌<br>\";\r\n                        if (Evt.chi.contains(get.type(Evt.card, 'trick')))\r\n                            str += \"你弃置其两张牌<br>\";\r\n                        if (Evt.chi.contains(get.suit(Evt.card)))\r\n                            str += \"你获得其一张牌<br>\";\r\n                        player.showCards(Evt.card, str);\r\n                        game.delayx();\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 6';\r\n                    if (Evt.chi.contains(get.number(Evt.card))) {\r\n                        player.line(target, 'grean');\r\n                        player.swapHandcards(target);\r\n                    }\r\n                    'step 7';\r\n                    if (Evt.chi.contains(get.type(Evt.card))) {\r\n                        game.delayx();\r\n                        if (target.countDiscardableCards(player, 'he')) {\r\n                            player.line(target, 'grean');\r\n                            target.discardPlayerCard(\"弃置两张牌\", target, 2, 'he', true);\r\n                        }\r\n                    }\r\n                    'step 8';\r\n                    if (Evt.chi.contains(get.suit(Evt.card))) {\r\n                        game.delayx();\r\n                        if (target.countGainableCards(player, 'he')) {\r\n                            player.line(target, 'grean');\r\n                            player.gainPlayerCard(\"获得其一张牌\", 'he', target, true);\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 7,\r\n                    result: {\r\n                        player(player, target) {\r\n                            return 2.5 + (target.countCards('h') / 2) - player.countCards('h');\r\n                        },\r\n                        target(player, target) {\r\n                            if (player.countCards('h') <= target.countCards('h') || target.countCards('h') <= target.countCards('e'))\r\n                                return -1;\r\n                            return 0;\r\n                        }\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    lose: {},\r\n                }\r\n            },\r\n            yong: {\r\n                init(player) {\r\n                    if (!player.storage.yong) {\r\n                        player.storage.yong = [];\r\n                    }\r\n                },\r\n                locked: true,\r\n                notemp: true,\r\n                marktext: '咏',\r\n                intro: {\r\n                    content: 'cards',\r\n                    onunmark: 'throw',\r\n                },\r\n                cardAround: true\r\n            },\r\n            yemuxingyong: {\r\n                audio: 3,\r\n                round: 1,\r\n                trigger: {\r\n                    global: 'phaseDiscardAfter',\r\n                },\r\n                filter(Evt, player) {\r\n                    if (Evt.player.isIn()) {\r\n                        var find = false;\r\n                        Evt.player.getHistory('lose', evt => {\r\n                            return evt.type == 'discard' && evt.getParent('phaseDiscard') == Evt && evt.hs.filterInD('d').length > 0;\r\n                        }).forEach(function (arr) {\r\n                            if (arr.cards != undefined)\r\n                                arr.cards.forEach(function (c) {\r\n                                    find = true;\r\n                                });\r\n                        });\r\n                        return find;\r\n                    }\r\n                    return false;\r\n                },\r\n                check(Evt, player) {\r\n                    return Evt.cards.length > 1;\r\n                },\r\n                content() {\r\n                    \"step 0\";\r\n                    var cards = [];\r\n                    game.getGlobalHistory('cardMove', evt => {\r\n                        if (evt.name == 'cardsDiscard' && evt.getParent('phaseDiscard') == trigger)\r\n                            cards.addArray(evt.cards.filterInD('d'));\r\n                    });\r\n                    game.countPlayer2(cur => {\r\n                        cur.getHistory('lose', evt => {\r\n                            if (evt.type != 'discard' || evt.getParent('phaseDiscard') != trigger)\r\n                                return;\r\n                            cards.addArray(evt.cards.filterInD('d'));\r\n                        });\r\n                    });\r\n                    Evt.cards = cards;\r\n                    if (Evt.cards.length) {\r\n                        game.cardsGotoSpecial(Evt.cards);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 1';\r\n                    player.storage.yong = player.storage.yong.concat(Evt.cards);\r\n                    player.showCards(player.storage.yong, '夜幕星咏');\r\n                    player.syncStorage('yong');\r\n                    player.markSkill('yong');\r\n                    \"step 2\";\r\n                    Evt.players = game.filterPlayer(cur => {\r\n                        return cur != player && cur.countCards('he') > 0;\r\n                    });\r\n                    Evt.players.sortBySeat(player);\r\n                    if (!Evt.players.length) {\r\n                        player.showCards(player.storage.yong, \"咏\");\r\n                        game.delayx();\r\n                        Evt.finish();\r\n                    }\r\n                    \"step 3\";\r\n                    player.line(Evt.players, 'green');\r\n                    player.chooseCardOL(Evt.players, 'he', { color: 'black' }, '可将一张黑色牌置于' + get.translation(player) + '武将牌上').set('ai', card => {\r\n                        var source = _status.event.source;\r\n                        var player = _status.event.player;\r\n                        if (get.attitude(player, source) > 0)\r\n                            return 6 - get.value(card);\r\n                        return 0;\r\n                    }).set('source', player).aiCard = function (target) {\r\n                        var hs = target.getCards('h').filter(card => get.color(card) == 'black');\r\n                        var Evt = _status.event;\r\n                        Evt.player = target;\r\n                        hs.sort(function (a, b) {\r\n                            return Evt.ai(a) - Evt.ai(b);\r\n                        });\r\n                        delete Evt.player;\r\n                        return { bool: true, cards: [hs[0]] };\r\n                    };\r\n                    \"step 4\";\r\n                    for (var i = 0; i < result.length; i++) {\r\n                        if (result[i].bool && result[i].cards) {\r\n                            var card = result[i].cards[0];\r\n                            Evt.players[i].lose(card, ui.special, 'toStorage');\r\n                            player.storage.yong.push(card);\r\n                            Evt.players[i].$give(card, player, false);\r\n                        }\r\n                    }\r\n                    'step 5';\r\n                    player.showCards(player.storage.yong, '夜幕星咏');\r\n                    player.syncStorage('yong');\r\n                    player.markSkill('yong');\r\n                },\r\n                group: ['yong', 'yemuxingyong_use'],\r\n                subSkill: {\r\n                    use: {\r\n                        audio: 'cansha',\r\n                        enable: 'phaseUse',\r\n                        filter(Evt, player) {\r\n                            if (!player.storage.yong.length) {\r\n                                return false;\r\n                            }\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            player.chooseButton(['选择一张咏', player.storage.yong], 1);\r\n                            'step 1';\r\n                            if (result.bool) {\r\n                                var card = result.links[0];\r\n                                player.gain(result.links, 'fromStorage');\r\n                                player.storage.yong.remove(card);\r\n                                player.syncStorage('yong');\r\n                                player.markSkill('yong');\r\n                                player.$give(card, player, false);\r\n                                if (!player.storage.yong.length) {\r\n                                    player.unmarkSkill('yong');\r\n                                }\r\n                            }\r\n                            else\r\n                                Evt.finish();\r\n                            'step 2';\r\n                            if (player.countCards('h') >= 2) {\r\n                                let chk = (lib.filter.cardUsable({ name: 'jiu' }, player, Evt.getParent('chooseToUse')) && player.canUse('jiu', player));\r\n                                if (player.hasUseTarget('guohe'))\r\n                                    chk = true;\r\n                                if (!chk)\r\n                                    Evt.finish();\r\n                            }\r\n                            else {\r\n                                Evt.finish();\r\n                            }\r\n                            'step 3';\r\n                            player.chooseCardTarget({\r\n                                prompt: \"选择两张手牌并对自己使用一张酒或对其它角色使用一张过河拆桥\",\r\n                                position: 'h',\r\n                                selectCard: 2,\r\n                                forced: true,\r\n                                filterTarget(card, player, target) {\r\n                                    if (player == target) {\r\n                                        return lib.filter.cardUsable({ name: 'jiu' }, player, _status.event.getParent('chooseToUse'))\r\n                                            && player.canUse('jiu', player);\r\n                                    }\r\n                                    else {\r\n                                        return player.canUse('guohe', target);\r\n                                    }\r\n                                },\r\n                                ai1(card) {\r\n                                    return 6 - get.value(card);\r\n                                },\r\n                                ai2(target) {\r\n                                    if (target != player)\r\n                                        return get.effect(target, { name: 'guohe' }, player, player) - Math.random();\r\n                                    return get.effect(player, { name: 'jiu' }, player, player) - Math.random() * 2;\r\n                                },\r\n                            });\r\n                            'step 4';\r\n                            if (result.bool && result.targets.length && result.cards.length) {\r\n                                var tar = result.targets[0];\r\n                                if (tar == player)\r\n                                    player.useCard({ name: 'jiu' }, tar, result.cards);\r\n                                else\r\n                                    player.useCard({ name: 'guohe' }, tar, result.cards);\r\n                            }\r\n                        },\r\n                        ai: {\r\n                            order: 9,\r\n                            result: {\r\n                                player(player, target) {\r\n                                    if (player.countCards('h') >= 5 || (player.needsToDiscard && player.getUseValue({ name: 'jiu' }) > 0.5))\r\n                                        return 1;\r\n                                    return 0;\r\n                                },\r\n                            }\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            xinghejianduei: {\r\n                skillAnimation: true,\r\n                animationColor: 'thunder',\r\n                juexingji: true,\r\n                unique: true,\r\n                trigger: {\r\n                    global: 'roundStart'\r\n                },\r\n                filter(Evt, player) {\r\n                    return !player.storage.xinghejianduei && player.hp <= game.roundNumber;\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    player.loseMaxHp();\r\n                    player.draw(Evt.num = game.countPlayer());\r\n                    player.addSkill('xinghejianduei_juexing');\r\n                    player.awakenSkill(Evt.name);\r\n                    player.storage[Evt.name] = true;\r\n                },\r\n                subSkill: {\r\n                    juexing: {\r\n                        mod: {\r\n                            maxHandcard(player, num) {\r\n                                return num + player.storage.yong.length;\r\n                            },\r\n                            attackFrom(from, to, distance) {\r\n                                return distance - from.storage.yong.length;\r\n                            },\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            kuali: {\r\n                audio: 4,\r\n                group: ['kuali_zhuDong', 'kuali_jieshu'],\r\n                subSkill: {\r\n                    zhuDong: {\r\n                        enable: \"phaseUse\",\r\n                        filter(Evt, player) {\r\n                            if (player.hasSkill('kuali_used'))\r\n                                return false;\r\n                            return game.hasPlayer(cur => {\r\n                                return (cur.countCards('h') % player.countCards('h') == 0)\r\n                                    || (cur.hp % player.hp == 0);\r\n                            });\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            var _a;\r\n                            var choice = 1;\r\n                            if (player.hp == 1 && game.hasPlayer(cur => {\r\n                                return cur.countCards('h') % player.countCards('h') == 0 && cur != player;\r\n                            }))\r\n                                choice = 0;\r\n                            player.addTempSkill('kuali_used');\r\n                            player.chooseControlList(['选择任意名手牌数为你整数倍的角色，你弃置等量牌并回复等量体力',\r\n                                '摸体力为你整数倍的角色数的牌，然后失去1点体力'], function (Evt, player) {\r\n                                return _status.event.choice;\r\n                            }).set('choice', choice).set('prompt', get.prompt2('kuali_zhuDong'));\r\n                            'step 1';\r\n                            if (result.index == 0) {\r\n                                player.chooseTarget('###『夸力满满』###选择任意名手牌数为你整数倍的角色，你弃置等量牌并回复等量体力', [1, Infinity], function (card, player, target) {\r\n                                    if (target == player)\r\n                                        return false;\r\n                                    return target.countCards('h') % player.countCards('h') == 0;\r\n                                }).set('ai', function (target) {\r\n                                    var player = _status.event.player;\r\n                                    return ui.selected.targets.length < (player.maxHp - player.hp);\r\n                                });\r\n                            }\r\n                            if (result.index == 1) {\r\n                                player.logSkill('kuali');\r\n                                var num = game.countPlayer(cur => {\r\n                                    return cur.hp % player.hp == 0 && cur != player;\r\n                                });\r\n                                player.draw(num);\r\n                                player.loseHp();\r\n                                _status.event.finish();\r\n                            }\r\n                            'step 2';\r\n                            if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                                var num = result.targets.length;\r\n                                player.chooseToDiscard(num, '弃置' + get.cnNumber(num) + '张牌并回复' + get.cnNumber(num) + '体力', true, 'he').set('logSkill', 'kuali');\r\n                                player.recover(num);\r\n                            }\r\n                        },\r\n                    },\r\n                    ai: {\r\n                        order(item, player) {\r\n                            if (player.hp == 1 && game.hasPlayer(cur => {\r\n                                return cur.countCards('h') % player.countCards('h') == 0 && cur != player;\r\n                            }))\r\n                                return 2;\r\n                            if (!player.needsToDiscard() && game.countPlayer(cur => {\r\n                                return cur.hp % player.hp == 0 && cur != player;\r\n                            }) > 2)\r\n                                return 8;\r\n                            return 0;\r\n                        },\r\n                        result: { player: 1 }\r\n                    },\r\n                    jieshu: {\r\n                        trigger: { player: 'phaseJieshuBegin' },\r\n                        priority: 40,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            if (player.hasSkill('kuali_used'))\r\n                                return false;\r\n                            return game.hasPlayer(cur => {\r\n                                return (cur.countCards('h') % player.countCards('h') == 0)\r\n                                    || (cur.hp % player.hp == 0);\r\n                            });\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            var _a;\r\n                            var choice = function () {\r\n                                if (player.hp == 1 && game.hasPlayer(cur => {\r\n                                    return cur.countCards('h') % player.countCards('h') == 0 && cur != player;\r\n                                }))\r\n                                    return 0;\r\n                                if (game.countPlayer(cur => {\r\n                                    return cur.hp % player.hp == 0 && cur != player;\r\n                                }) > 1)\r\n                                    return 1;\r\n                                return -1;\r\n                            };\r\n                            player.addTempSkill('kuali_used');\r\n                            player.chooseControlList(['选择任意名手牌数为你整数倍的角色，你弃置等量牌并回复等量体力',\r\n                                '摸体力为你整数倍的角色数的牌，然后失去1点体力'], function (Evt, player) {\r\n                                return _status.event.choice;\r\n                            }).set('choice', choice).set('prompt', get.prompt2('kuali_jieshu'));\r\n                            'step 1';\r\n                            if (result.index == 0) {\r\n                                player.chooseTarget('###『夸力满满』###选择任意名手牌数为你整数倍的角色，你弃置等量牌并回复等量体力', [1, Infinity], function (card, player, target) {\r\n                                    if (target == player)\r\n                                        return false;\r\n                                    return target.countCards('h') % player.countCards('h') == 0;\r\n                                }).set('ai', function (target) {\r\n                                    var player = _status.event.player;\r\n                                    return ui.selected.targets.length < (player.maxHp - player.hp);\r\n                                });\r\n                            }\r\n                            if (result.index == 1) {\r\n                                player.logSkill('kuali');\r\n                                var num = game.countPlayer(cur => {\r\n                                    return cur.hp % player.hp == 0 && cur != player;\r\n                                });\r\n                                player.draw(num);\r\n                                player.loseHp();\r\n                                _status.event.finish();\r\n                            }\r\n                            'step 2';\r\n                            if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                                var num = result.targets.length;\r\n                                player.chooseToDiscard(num, '弃置' + get.cnNumber(num) + '张牌并回复' + get.cnNumber(num) + '体力', true, 'he').set('logSkill', 'kuali');\r\n                                player.recover(num);\r\n                            }\r\n                        },\r\n                    },\r\n                    used: {},\r\n                },\r\n            },\r\n            youyi: {\r\n                audio: 2,\r\n                trigger: {\r\n                    global: 'phaseBegin'\r\n                },\r\n                round: 1,\r\n                priority: 80,\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && player.countCards('he');\r\n                },\r\n                check(Evt, player) {\r\n                    if (Evt.player.hasJudge('lebu') || get.attitude(player, Evt.player) < 0)\r\n                        return false;\r\n                    return true;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var next = player.chooseCard(get.prompt2('youyi'), 'he');\r\n                    next.set('ai', card => {\r\n                        if (get.name(card) == 'shan')\r\n                            return 9;\r\n                        return 8 - get.value(card);\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.logSkill('youyi');\r\n                        player.showCards(result.cards);\r\n                    }\r\n                    'step 2';\r\n                    if (result.cards) {\r\n                        var target = trigger.player;\r\n                        player.$giveAuto(result.cards, target);\r\n                        target.gain(result.cards, player).gaintag.add('youyishiyue');\r\n                        player.storage.youyi = result.cards[0];\r\n                        target.storage.youyishiyue = result.cards[0];\r\n                        target.addTempSkill('youyishiyue', 'phaseAfter');\r\n                    }\r\n                },\r\n                group: ['youyi_dam'],\r\n                subSkill: {\r\n                    dam: {\r\n                        trigger: { global: 'damageBegin' },\r\n                        priority: 80,\r\n                        check(Evt, player) {\r\n                            return 3 - get.damageEffect(Evt.player, Evt.source, player) * 2 - get.attitude(player, Evt.source);\r\n                        },\r\n                        filter(Evt, player) {\r\n                            if (!Evt.source || !Evt.source.hasSkill('youyishiyue'))\r\n                                return false;\r\n                            var shi = Evt.source.storage.youyishiyue;\r\n                            shi = player.storage.youyi || shi;\r\n                            return Evt.source.countGainableCards(player, 'hej', card => card == shi);\r\n                        },\r\n                        prompt: '是否收回「誓约」牌？',\r\n                        logTarget: 'player',\r\n                        content() {\r\n                            trigger.changeToZero();\r\n                            player.line(trigger.source, 'thunder');\r\n                            player.gain(player.storage.youyi, trigger.source, 'giveAuto');\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            youyishiyue: {\r\n                onremove(player) {\r\n                    player.removeGaintag('youyishiyue');\r\n                },\r\n                intro: {\r\n                    name: '誓约牌',\r\n                    content: '当前的「誓约」牌为$当你造成伤害时，湊阿库娅可令你将「誓约」牌交给她以防止之。<br>本回合结束时，你可以弃置「誓约」牌令你或其回复1点体力。',\r\n                    onunmark(storage, player) {\r\n                        if (storage && storage.length) {\r\n                            game.log(storage, '誓约解除');\r\n                            delete player.storage.youyishiyue;\r\n                        }\r\n                    },\r\n                },\r\n                locked: true,\r\n                mark: 'card',\r\n                group: ['youyishiyue_rec'],\r\n                subSkill: {\r\n                    rec: {\r\n                        trigger: { player: 'phaseEnd' },\r\n                        direct: true,\r\n                        priority: 80,\r\n                        filter(Evt, player) {\r\n                            var shi, damaged = player.isDamaged();\r\n                            game.hasPlayer(cur => {\r\n                                if (cur.hasSkill('youyi')) {\r\n                                    if (cur.isDamaged())\r\n                                        damaged = true;\r\n                                    shi = cur.storage.youyi;\r\n                                    return true;\r\n                                }\r\n                                else {\r\n                                    return false;\r\n                                }\r\n                            });\r\n                            shi = player.storage.youyishiyue || shi;\r\n                            return damaged && player.countDiscardableCards(player, 'hej', card => card == shi);\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            var _a;\r\n                            var shi;\r\n                            var aqua;\r\n                            game.hasPlayer(cur => {\r\n                                if (cur.hasSkill('youyi')) {\r\n                                    aqua = cur;\r\n                                    shi = cur.storage.youyi;\r\n                                }\r\n                            });\r\n                            Evt.card = player.storage.youyishiyue || shi;\r\n                            player.chooseTarget('让你或她回复一点体力', 1, function (card, player, target) {\r\n                                return [player, _status.event.aqua].contains(target) && target.isDamaged();\r\n                            }).set('ai', function (target) {\r\n                                return get.recoverEffect(target, player, player) + Math.random();\r\n                            }).set('aqua', aqua);\r\n                            'step 1';\r\n                            if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                                Evt.target = result.targets[0];\r\n                                player.discard(Evt.card);\r\n                                player.logSkill('youyishiyue', Evt.target);\r\n                                Evt.target.recover(player);\r\n                            }\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            zhonggong: {\r\n                audio: 'tuquan',\r\n                trigger: { player: 'phaseZhunbeiBegin' },\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    return player.isMinEquip(true) || player.isMaxEquip(true);\r\n                },\r\n                popup: false,\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    if (player.isMinEquip(true)) {\r\n                        player.logSkill('zhonggong');\r\n                        player.storage.zhonggong_mark++;\r\n                        player.markSkill('zhonggong_mark');\r\n                    }\r\n                    if (player.isMaxEquip(true)) {\r\n                        player.chooseTarget('###' + get.prompt('zhonggong') + '###：令两名角色横置', 2, function (card, player, target) {\r\n                            return !target.isLinked();\r\n                        }).set('ai', function (target) {\r\n                            var player = _status.event.player;\r\n                            if (target == player)\r\n                                return 1;\r\n                            return -get.attitude(player, target) + Math.random();\r\n                        });\r\n                    }\r\n                    'step 1';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        var targets = result.targets;\r\n                        player.logSkill('zhonggong', targets);\r\n                        while (targets.length) {\r\n                            targets.shift().link(true);\r\n                        }\r\n                    }\r\n                },\r\n                group: 'zhonggong_mark',\r\n                subSkill: {\r\n                    mark: {\r\n                        init(player) {\r\n                            player.storage.zhonggong_mark = 0;\r\n                        },\r\n                        intro: {\r\n                            name: '重工',\r\n                            content: '手牌上限+#',\r\n                        },\r\n                        locked: true,\r\n                        mod: {\r\n                            maxHandcard(player, num) {\r\n                                var Buff = (player.storage.zhonggong_mark) || 0;\r\n                                return num += Buff;\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            binzhan: {\r\n                audio: true,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h') != player.getHandcardLimit();\r\n                },\r\n                enable: \"phaseUse\",\r\n                usable: 1,\r\n                filterCard(Evt, player) {\r\n                    if (player.countCards('h') > player.getHandcardLimit())\r\n                        return true;\r\n                    return false;\r\n                },\r\n                selectCard() {\r\n                    var player = _status.event.player;\r\n                    if (player.countCards('h') > player.getHandcardLimit())\r\n                        return player.countCards('h') - player.getHandcardLimit();\r\n                    return 0;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    if (cards && cards.length) {\r\n                        player.chooseTarget([1, cards.length], '『缤绽』：选择角色，对其造成火焰伤害', function (card, player, target) {\r\n                            return player.inRange(target);\r\n                        }).set('ai', function (target) {\r\n                            var player = _status.event.target;\r\n                            return get.damageEffect(target, player, player);\r\n                        });\r\n                    }\r\n                    else {\r\n                        player.draw(player.getHandcardLimit() - player.countCards('h'));\r\n                        Evt.finish();\r\n                    }\r\n                    'step 1';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        var targets = result.targets;\r\n                        player.line2(targets, 'fire');\r\n                        while (targets.length) {\r\n                            targets.shift().damage('fire');\r\n                        }\r\n                    }\r\n                },\r\n                onremove(player, skill) {\r\n                    player.removeSkill('hongshaoturou_shao');\r\n                },\r\n                subSkill: {\r\n                    viewAs: {\r\n                        mod: {\r\n                            cardname(card, player) {\r\n                                if (card.name == 'shan' || card.name == 'tao')\r\n                                    return 'jiu';\r\n                                if (get.subtype(card) == 'equip3' || get.subtype(card) == 'equip4' || get.subtype(card) == 'equip6')\r\n                                    return 'tiesuo';\r\n                            },\r\n                        },\r\n                        trigger: { player: ['useCard1', 'respond', 'loseBeign'] },\r\n                        firstDo: true,\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return Evt.card.name == 'jiu' && !Evt.skill &&\r\n                                Evt.cards.length == 1 && (Evt.cards[0].name == 'tao' || Evt.cards[0].name == 'shan');\r\n                        },\r\n                        content() {\r\n                        },\r\n                    },\r\n                    shao: {\r\n                        trigger: { player: 'phaseEnd' },\r\n                        marktext: '炎',\r\n                        mark: true,\r\n                        forced: true,\r\n                        intro: {\r\n                            content: '当前回合结束后受到一点火焰伤害',\r\n                            name: '自煲自足',\r\n                        },\r\n                        onremove(player, skill) {\r\n                            game.broadcastAll(function (player) {\r\n                                if (player.node.hongshaoturou) {\r\n                                    player.node.hongshaoturou.delete();\r\n                                    delete player.node.hongshaoturou;\r\n                                }\r\n                            }, player);\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            player.damage('fire');\r\n                            player.removeSkill('hongshaoturou_shao');\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            kuangxin: {\r\n                trigger: { global: 'useCardToPlayered' },\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    if (Evt.targets.length != 1)\r\n                        return false;\r\n                    if (Evt.targets[0] == player)\r\n                        return false;\r\n                    return get.tag(Evt.card, 'damage') && Evt.targets[0].countCards('h') && player.countCards('h');\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.targets[0];\r\n                    Evt.target.chooseCard('h', true).set('visible', true).set('prompt', get.translation('kuangxin') + '：选择一张牌与对方交换');\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.card = result.cards[0];\r\n                        player.chooseCard('h', true).set('visible', true).set('prompt', get.translation('kuangxin') + '：选择一张牌与对方交换');\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        trigger.targets[0].gain(result.cards[0], player, 'giveAuto');\r\n                        player.gain(Evt.card, trigger.targets[0], 'giveAuto');\r\n                        trigger.targets[0].addTempSkill('kuangxin2', 'phaseEnd');\r\n                        trigger.targets[0].storage.kuangxin2.add(trigger.card);\r\n                        trigger.targets[0].storage.kuangxin2.add(player);\r\n                        trigger.targets[0].syncStorage('kuangxin2');\r\n                        player.storage.kuangxin_draw.add(trigger.card);\r\n                        player.storage.kuangxin_draw.add(trigger.targets[0]);\r\n                    }\r\n                },\r\n                group: ['kuangxin_draw', 'kuangxin_back'],\r\n                subSkill: {\r\n                    draw: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = [];\r\n                        },\r\n                        trigger: { global: 'useCardAfter' },\r\n                        forced: true,\r\n                        priority: 66,\r\n                        filter(Evt, player) {\r\n                            if (!(player.storage.kuangxin_draw.contains(Evt.targets[0]) && player.storage.kuangxin_draw.contains(Evt.card)))\r\n                                return false;\r\n                            if (!Evt.targets[0].storage.kuangxin2)\r\n                                return false;\r\n                            return Evt.targets[0].storage.kuangxin2.contains(player);\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            player.chooseTarget('『旷心』：令你或其摸一张牌').set('filterTarget', function (card, player, target) {\r\n                                return target == player || target == player.storage.kuangxin_draw[1];\r\n                            });\r\n                            'step 1';\r\n                            if (result.bool && result.targets && result.targets[0]) {\r\n                                result.targets[0].draw(player);\r\n                            }\r\n                        },\r\n                    },\r\n                    back: {\r\n                        trigger: { global: 'phaseEnd' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            if (player.storage.kuangxin_draw)\r\n                                player.storage.kuangxin_draw = [];\r\n                        },\r\n                    }\r\n                },\r\n            },\r\n            kuangxin2: {\r\n                firstDo: true,\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                onremove: true,\r\n                trigger: {\r\n                    player: ['damage'],\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.storage.kuangxin2 && Evt.card && player.storage.kuangxin2.contains(Evt.card);\r\n                },\r\n                silent: true,\r\n                forced: true,\r\n                popup: false,\r\n                priority: 14,\r\n                content() {\r\n                    player.removeSkill('kuangxin2');\r\n                },\r\n            },\r\n            danyan: {\r\n                trigger: { player: 'loseEnd' },\r\n                priority: 22,\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    var num = 0;\r\n                    player.getHistory('sourceDamage', evt => {\r\n                        num += evt.num;\r\n                    });\r\n                    if (num || !Evt.hs.length)\r\n                        return false;\r\n                    var canG = 0;\r\n                    Evt.hs.forEach(function (car) {\r\n                        if (player.hasUseTarget(car))\r\n                            canG++;\r\n                    });\r\n                    return canG && (Evt.name == 'cardsDiscard' || (Evt.name == 'lose' && Evt.getParent().name == 'discard'));\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.cards = trigger.hs;\r\n                    var next = player.chooseCardButton(1, '『弹言』：选择使用的牌', Evt.cards);\r\n                    next.set('filterButton', function (button) {\r\n                        var player = _status.event.player;\r\n                        return player.hasUseTarget(button.link);\r\n                    });\r\n                    next.set('ai', function (button) {\r\n                        var player = _status.event.player;\r\n                        return player.getUseValue(button.link);\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.chooseUseTarget(result.links[0], true, 'nopopup');\r\n                    }\r\n                },\r\n            },\r\n            qingjie: {\r\n                mod: {\r\n                    globalFrom(from, to, distance) {\r\n                        if (distance > 1 && !(to.getEquip(3) || to.getEquip(4)))\r\n                            return 1;\r\n                    },\r\n                    globalTo(from, to, distance) {\r\n                        var dist = distance;\r\n                        if (to.countCards('h') > from.countCards('h')) {\r\n                            dist += to.countCards('h') - from.countCards('h');\r\n                        }\r\n                        return dist;\r\n                    },\r\n                },\r\n            },\r\n            hangao: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    var hangao = player.getCards('he').filter(function (ca) {\r\n                        return get.suit(ca) == 'spade';\r\n                    });\r\n                    return hangao.length;\r\n                },\r\n                position: 'he',\r\n                filterCard(card) {\r\n                    return get.suit(card) == 'spade';\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    return target != player;\r\n                },\r\n                discard: false,\r\n                visible: true,\r\n                prepare: 'give',\r\n                content() {\r\n                    target.gain(cards, player);\r\n                    target.storage.hangao_houxu = player;\r\n                    target.storage.hangao = cards[0];\r\n                    target.syncStorage('hangao_houxu');\r\n                    target.addTempSkill('hangao_houxu', { player: 'phaseAfter' });\r\n                },\r\n                subSkill: {\r\n                    houxu: {\r\n                        onremove: ['hangao_houxu', 'hangao'],\r\n                        marktext: \"♠\",\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '函告',\r\n                            content(storage, player, skill) {\r\n                                return '在回合结束时展示手牌';\r\n                            },\r\n                        },\r\n                        mark: 'character',\r\n                        forced: true,\r\n                        priority: 42,\r\n                        trigger: { player: 'phaseEnd' },\r\n                        filter(Evt, player) {\r\n                            return player.storage.hangao_houxu.isIn();\r\n                        },\r\n                        content: [() => {\r\n                                player.showCards(player.getCards('h'), '函告后续');\r\n                                game.delay(0.5);\r\n                            }, () => {\r\n                                let history = player.getHistory('useCard');\r\n                                let heaG = 1, diaG = 1;\r\n                                for (let i = 0; i < history.length; i++) {\r\n                                    if (history[i].cards[0] == player.storage.hangao)\r\n                                        diaG = 0;\r\n                                    if (!history[i].targets)\r\n                                        continue;\r\n                                    for (let j = 0; j < history[i].targets.length; j++) {\r\n                                        if (history[i].targets[j] == player.storage.hangao_houxu)\r\n                                            heaG = 0;\r\n                                    }\r\n                                }\r\n                                if (heaG) {\r\n                                    player.storage.hangao_houxu.gain(player, player.getCards('he').filter(ca => {\r\n                                        return get.suit(ca) == 'heart';\r\n                                    }), 'giveAuto');\r\n                                }\r\n                                if (diaG && !player.getCards('h').contains(player.storage.hangao)) {\r\n                                    player.storage.hangao_houxu.gain(player, player.getCards('he').filter(ca => {\r\n                                        return get.suit(ca) == 'diamond';\r\n                                    }), 'giveAuto');\r\n                                }\r\n                                player.removeSkill('hangao_houxu');\r\n                            }]\r\n                    },\r\n                }\r\n            },\r\n            yinglve: {\r\n                trigger: { player: 'phaseJieshuBegin' },\r\n                priority: 42,\r\n                filter(Evt, player) {\r\n                    return player.countDisabled() != 5;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseToDisable().set('ai', function (Evt, player, list) {\r\n                        if (list.contains('equip2'))\r\n                            return 'equip2';\r\n                        if (list.contains('equip1') && player.countCards('h', { name: 'sha' }) > 2)\r\n                            return 'equip1';\r\n                        if (list.contains('equip5') && player.countCards('h', { type: 'trick' }) >= 1)\r\n                            return 'equip5';\r\n                        return list.randomGet();\r\n                    });\r\n                    'step 1';\r\n                    player.chooseUseTarget('###『影掠』###视为使用一张没有距离限制的【顺手牵羊】', { name: 'shunshou' }, true, 'nodistance');\r\n                },\r\n                mod: {\r\n                    selectTarget(card, player, range) {\r\n                        if (get.name(card) == 'shunshou') {\r\n                            range[1] = player.countDisabled() || range[1];\r\n                        }\r\n                    },\r\n                    attackFrom(from, to, distance) {\r\n                        return distance - from.countDisabled();\r\n                    },\r\n                },\r\n            },\r\n            shangdong: {\r\n                marktext: \"冻\",\r\n                locked: true,\r\n                intro: {\r\n                    name: '殇冻',\r\n                    content(storage, player, skill) {\r\n                        return '受到伤害时加' + storage;\r\n                    },\r\n                },\r\n                mark: true,\r\n                onremove(player) {\r\n                    delete player.storage.shangdong;\r\n                },\r\n            },\r\n            shuangzhi: {\r\n                trigger: { global: 'loseAfter' },\r\n                priority: 222,\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    if (Evt.player.storage.shuangzhi2 && Evt.player.storage.shuangzhi2 >= 2)\r\n                        return false;\r\n                    if (Evt.player.isAlive() && Evt.player != player) {\r\n                        if (Evt.type == 'discard' && Evt.cards.filterInD('d').length)\r\n                            return true;\r\n                    }\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.player;\r\n                    Evt.target.addTempSkill('shuangzhi2');\r\n                    if (!Evt.target.storage.shuangzhi2)\r\n                        Evt.target.storage.shuangzhi2 = 0;\r\n                    Evt.target.storage.shuangzhi2 += trigger.cards.filterInD('d').length;\r\n                    if (Evt.target.storage.shuangzhi2 < 2)\r\n                        Evt.finish();\r\n                    else\r\n                        player.chooseBool(get.prompt2('shuangzhi')).set('ai', function () {\r\n                            return get.attitude(player, Evt.target) < 1;\r\n                        });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.logSkill('shuangzhi', Evt.target);\r\n                        var list = ['受到1点无来源伤害', '受到的伤害+1直到其回合开始'];\r\n                        Evt.target.chooseControlList('选择其中的一项', list, true, function (Evt, player) {\r\n                            return _status.event.choice;\r\n                        }).set('choice', ((_status.currentPhase == Evt.target) ? 0 : 1));\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    if (result.index == 0) {\r\n                        Evt.target.damage('nosource');\r\n                    }\r\n                    else {\r\n                        Evt.target.addSkill('shangdong');\r\n                        Evt.target.addMark('shangdong', 1);\r\n                    }\r\n                },\r\n                group: ['shuangzhi_init', 'shuangzhi_addDam'],\r\n                subSkill: {\r\n                    init: {\r\n                        trigger: { global: 'phaseBefore' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        filter(Evt, player) {\r\n                            return Evt.player.hasMark('shangdong');\r\n                        },\r\n                        content() {\r\n                            trigger.player.unmarkSkill('shangdong');\r\n                            trigger.player.removeSkill('shangdong');\r\n                            trigger.player.syncStorage('shangdong');\r\n                        }\r\n                    },\r\n                    addDam: {\r\n                        trigger: { global: 'damageBegin3' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        filter(Evt, player) {\r\n                            return Evt.player.hasMark('shangdong');\r\n                        },\r\n                        content() {\r\n                            trigger.num += trigger.player.countMark('shangdong');\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            shuangzhi2: {\r\n                onremove(player) {\r\n                    delete player.storage.shuangzhi2;\r\n                },\r\n            },\r\n            xiwo: {\r\n                trigger: { global: 'roundStart' },\r\n                priority: 222,\r\n                round: 1,\r\n                filter(Evt, player) {\r\n                    return game.players.length - 1;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    var next = player.chooseTarget(2, function (card, player, target) {\r\n                        return true;\r\n                    });\r\n                    next.set('targetprompt', ['失去体力', '回复体力']);\r\n                    next.set('prompt', '指定两名角色，分别失去一点体力和回复一点体力');\r\n                    next.set('ai', function (target) {\r\n                        var player = _status.event.player;\r\n                        var att = get.attitude(player, target);\r\n                        var sgnatt = get.sgn(att);\r\n                        if (ui.selected.targets.length == 0) {\r\n                            if (target.hp == 1 && sgnatt <= 0) {\r\n                                return 9;\r\n                            }\r\n                            else if (target.hp == 1 && sgnatt >= 1) {\r\n                                return -10;\r\n                            }\r\n                            else {\r\n                                return 9 - att;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (target.hp == target.maxHp && sgnatt <= 0) {\r\n                                return 9;\r\n                            }\r\n                            else if (target.hp < target.maxHp && sgnatt >= 1) {\r\n                                return 7;\r\n                            }\r\n                            else if (target.hp < target.maxHp && sgnatt <= 0) {\r\n                                return -10;\r\n                            }\r\n                            else {\r\n                                return 9 - att;\r\n                            }\r\n                        }\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        player.logSkill('xiwo', result.targets);\r\n                        result.targets[0].loseHp();\r\n                        result.targets[0].addTempSkill('xiwo_lose', 'roundEnd');\r\n                        result.targets[1].recover();\r\n                        result.targets[1].addTempSkill('xiwo_gain', 'roundEnd');\r\n                    }\r\n                },\r\n            },\r\n            xiwo_lose: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                marktext: \"握\",\r\n                locked: true,\r\n                intro: {\r\n                    name: '生化之握-',\r\n                    content: '在轮次结束时回复体力',\r\n                },\r\n                mark: true,\r\n                forced: true,\r\n                priority: 420,\r\n                onremove(player) {\r\n                    if (player.isDamaged()) {\r\n                        game.log('『希握』后续效果');\r\n                    }\r\n                    game.delay(0.5);\r\n                    player.recover('nosource');\r\n                },\r\n                content() {\r\n                }\r\n            },\r\n            xiwo_gain: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                marktext: \"握\",\r\n                locked: true,\r\n                intro: {\r\n                    name: '生化之握+',\r\n                    content: '在轮次结束时失去体力',\r\n                },\r\n                mark: true,\r\n                forced: true,\r\n                priority: 420,\r\n                onremove(player) {\r\n                    game.log('『希握』后续效果');\r\n                    game.delay(0.5);\r\n                    player.loseHp();\r\n                },\r\n                content() {\r\n                }\r\n            },\r\n            shenhai: {\r\n                marktext: '海',\r\n                intro: {\r\n                    name: \"光辉深海\",\r\n                    content: \"<li>当前回合发动技能次数：#\",\r\n                },\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = 0;\r\n                },\r\n                trigger: { player: 'useCard2' },\r\n                priority: 42,\r\n                filter(Evt, player) {\r\n                    if (get.type(Evt.card) == 'delay' || !Evt.targets)\r\n                        return false;\r\n                    if (!player.getLastUsed(1))\r\n                        return false;\r\n                    var num = player.storage.paomo_contains.length ? player.storage.paomo_contains[0] : get.number(player.getLastUsed(1).card);\r\n                    if (player.storage.paomo_contains && player.storage.paomo_contains.length) {\r\n                        player.unmarkSkill('paomo_contains');\r\n                        player.storage.paomo_contains.length = 0;\r\n                    }\r\n                    return get.number(Evt.card) && get.number(Evt.card) > num;\r\n                },\r\n                frequent: true,\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    if (player.storage.shenhai >= 3) {\r\n                        var list = ['令一名其他角色使用', '额外结算一次', '增加或减少一个目标'];\r\n                        player.chooseControlList(list, true, function () {\r\n                            return 1;\r\n                        });\r\n                        Evt.goto(1);\r\n                    }\r\n                    else {\r\n                        if (get.type(trigger.card) == 'equip') {\r\n                            Evt.goto(5);\r\n                        }\r\n                        else if (get.type(trigger.card) == 'basic') {\r\n                            Evt.goto(7);\r\n                        }\r\n                        else if (get.type(trigger.card) == 'trick') {\r\n                            Evt.goto(2);\r\n                        }\r\n                    }\r\n                    'step 1';\r\n                    if (!result.bool && player.storage.shenhai < 3) {\r\n                        Evt.finish();\r\n                    }\r\n                    if (result.index == 0) {\r\n                        Evt.goto(5);\r\n                    }\r\n                    else if (result.index == 1) {\r\n                        Evt.goto(7);\r\n                    }\r\n                    else if (result.index == 2) {\r\n                        Evt.goto(2);\r\n                    }\r\n                    'step 2';\r\n                    var prompt2 = '为' + get.translation(trigger.card) + '增加或减少一个目标';\r\n                    player.chooseTarget(get.prompt('shenhai'), function (card, player, target) {\r\n                        var player = _status.event.player;\r\n                        if (_status.event.targets.contains(target))\r\n                            return true;\r\n                        return lib.filter.targetEnabled2(_status.event.card, player, target) && lib.filter.targetInRange(_status.event.card, player, target);\r\n                    }).set('prompt2', prompt2).set('ai', function (target) {\r\n                        var trigger = _status.event.getTrigger();\r\n                        var player = _status.event.player;\r\n                        return get.effect(target, trigger.card, player, player) * (_status.event.targets.contains(target) ? -1 : 1);\r\n                    }).set('targets', trigger.targets).set('card', trigger.card);\r\n                    'step 3';\r\n                    if (result.bool) {\r\n                        player.storage.shenhai++;\r\n                        player.markSkill('shenhai');\r\n                        if (!Evt.isMine())\r\n                            game.delayx();\r\n                        Evt.targets = result.targets;\r\n                    }\r\n                    'step 4';\r\n                    if (Evt.targets) {\r\n                        player.logSkill('shenhai', Evt.targets);\r\n                        if (trigger.targets.contains(Evt.targets[0]))\r\n                            trigger.targets.removeArray(Evt.targets);\r\n                        else\r\n                            trigger.targets.addArray(Evt.targets);\r\n                    }\r\n                    Evt.finish();\r\n                    'step 5';\r\n                    player.chooseTarget('令一名其他角色使用', function (card, player, target) {\r\n                        if (!target.hasUseTarget(trigger.card))\r\n                            return false;\r\n                        return target != player;\r\n                    }).set('ai', function (target) {\r\n                        var player = _status.event.player;\r\n                        var card = _status.event.card;\r\n                        return target.getUseValue(card) * get.attitude(player, target);\r\n                    }).set('card', trigger.card);\r\n                    'step 6';\r\n                    if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        player.storage.shenhai++;\r\n                        player.markSkill('shenhai');\r\n                        Evt.target = result.targets[0];\r\n                        player.logSkill('shenhai', Evt.target);\r\n                        trigger.cancel();\r\n                        Evt.target.chooseUseTarget(trigger.card, trigger.cards);\r\n                    }\r\n                    Evt.finish();\r\n                    'step 7';\r\n                    player.storage.shenhai++;\r\n                    player.markSkill('shenhai');\r\n                    player.storage.shenhai_jiesuan = [];\r\n                    player.storage.shenhai_jiesuan.add(trigger.card);\r\n                    Evt.finish();\r\n                },\r\n                mod: {\r\n                    aiOrder(player, card, num) {\r\n                        if (typeof card == 'object' && player == _status.currentPhase && get.number(card)) {\r\n                            var cards = player.getCards('h');\r\n                            var numx = 0;\r\n                            for (var i = 0; i < cards.length; i++) {\r\n                                if (cards[i] != card && get.number(cards[i]) > get.number(card) && player.getCardUsable(cards[i]) && player.hasUseTarget(cards[i])) {\r\n                                    numx++;\r\n                                }\r\n                            }\r\n                            if (get.type(card) == 'equip')\r\n                                return num + 4 * numx;\r\n                            return num + 8 * numx;\r\n                        }\r\n                    },\r\n                },\r\n                group: ['shenhai_jiesuan', 'shenhai_clear'],\r\n                subSkill: {\r\n                    jiesuan: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = [];\r\n                        },\r\n                        trigger: { player: 'useCardAfter' },\r\n                        forced: true,\r\n                        priority: 42,\r\n                        filter(Evt, player) {\r\n                            if (get.type(Evt.card) == 'delay')\r\n                                return false;\r\n                            return player.storage.shenhai_jiesuan[0] == Evt.card;\r\n                        },\r\n                        content() {\r\n                            var card = game.createCard(trigger.card.name, trigger.card.suit, trigger.card.number, trigger.card.nature);\r\n                            player.useCard(card, (trigger._targets || trigger.targets).slice(0), trigger.cards).skill = trigger.skill || 'shenhai_jiesuan';\r\n                        }\r\n                    },\r\n                    clear: {\r\n                        trigger: { player: 'phaseEnd' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        priority: 42,\r\n                        content() {\r\n                            player.unmarkSkill('shenhai');\r\n                            player.storage.shenhai_jiesuan.length = 0;\r\n                            player.storage.shenhai = 0;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            paomo: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                trigger: { global: 'useCardAfter' },\r\n                priority: 42,\r\n                filter(Evt, player) {\r\n                    if (player != _status.currentPhase)\r\n                        return false;\r\n                    if (player == Evt.player)\r\n                        return false;\r\n                    return Evt.card.isCard && !player.storage.paomo.contains(Evt.player) && Evt.player.getHistory('useCard').length == 0;\r\n                },\r\n                check(Evt, player) {\r\n                },\r\n                content() {\r\n                    player.storage.paomo.add(trigger.player);\r\n                    if (player.getLastUsed(1)) {\r\n                        if (player.storage.paomo_contains && player.storage.paomo_contains.length)\r\n                            player.storage.paomo_contains.length = 0;\r\n                        player.storage.paomo_contains.add(get.number(trigger.card));\r\n                        player.markSkill('paomo_contains');\r\n                    }\r\n                    player.draw();\r\n                    trigger.player.draw();\r\n                },\r\n                group: ['paomo_contains', 'paomo_init'],\r\n                subSkill: {\r\n                    contains: {\r\n                        marktext: '恋',\r\n                        intro: {\r\n                            name: \"泡沫爱恋\",\r\n                            content(storage, player, skill) {\r\n                                if (storage)\r\n                                    return \"<li>上一张使用的牌点数变为\" + get.translation(storage);\r\n                                return \"<li>当前回合未发动技能\";\r\n                            },\r\n                        },\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = [];\r\n                        },\r\n                        mark: true,\r\n                    },\r\n                    init: {\r\n                        trigger: { player: 'phaseEnd' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        priority: 42,\r\n                        content() {\r\n                            player.unmarkSkill('paomo_contains');\r\n                            player.storage.paomo_contains.length = 0;\r\n                            player.storage.paomo.length = 0;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            shisang: {\r\n                trigger: { player: 'useCard1' },\r\n                priority: 42,\r\n                check(Evt, player) {\r\n                    var eff1 = 0, eff2 = 0;\r\n                    for (var i = 0; i < Evt.targets; i++) {\r\n                        eff1 += get.effect(Evt.targets[i], Evt.card, player, player);\r\n                        eff2 += get.recoverEffect(Evt.targets[i], player, player);\r\n                    }\r\n                    return (eff2 - eff1) > 0;\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.isPhaseUsing() && !player.hasSkill('shisang_used') && Evt.targets && Evt.targets.length;\r\n                },\r\n                prompt2(Evt, player) {\r\n                    if (player.hasSkill('wanjie_change'))\r\n                        return '出牌阶段限一次，可以将此牌的效果改为 <font color=#fc8>受到你造成的1点伤害</font>';\r\n                    return '出牌阶段限一次，可以将此牌的效果改为 令目标回复1点体力';\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.addTempSkill('shisang_used', 'phaseUseEnd');\r\n                    if (!trigger.addedSkill)\r\n                        trigger.addedSkill = [];\r\n                    trigger.addedSkill.add('shisang');\r\n                    if (player.storage.shisang2)\r\n                        delete player.storage.shisang2;\r\n                    lib.skill.shisang2.trigger = { player: [get.name(trigger.card) + 'Begin'] };\r\n                    'step 1';\r\n                    player.storage.shisang2 = trigger.card;\r\n                    player.addTempSkill('shisang2', { player: 'useCardAfter' });\r\n                },\r\n                subSkill: {\r\n                    used: {},\r\n                    clear: {\r\n                        trigger: { global: ['damage', 'damageZero', 'recoverEnd', 'useCardEnd'] },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            return false;\r\n                            if (!player.hasSkill('shisang_used'))\r\n                                return false;\r\n                            if ((Evt.name == 'useCard' && Evt.addedSkill && Evt.addedSkill.contains('shisang')))\r\n                                return true;\r\n                            if (!(Evt.getParent(2).addedSkill && Evt.getParent(2).addedSkill.contains('shisang')))\r\n                                return false;\r\n                            return (Evt.player == Evt.getParent(2).targets[Evt.getParent(2).targets.length - 1]);\r\n                        },\r\n                        content() {\r\n                            if (get.info(trigger.card).content != player.storage.shisang_clear) {\r\n                                get.info(trigger.card).content = player.storage.shisang_clear;\r\n                            }\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            shisang2: {\r\n                trigger: { global: 'Xbegin' },\r\n                forced: true,\r\n                silent: true,\r\n                popup: false,\r\n                filter(Evt, player) {\r\n                    return Evt.card == player.storage.shisang2;\r\n                },\r\n                content() {\r\n                    if (player.hasSkill('wanjie_change')) {\r\n                        trigger.setContent(function () {\r\n                            target.damage(player);\r\n                        });\r\n                    }\r\n                    else {\r\n                        trigger.setContent(function () {\r\n                            target.recover();\r\n                        });\r\n                    }\r\n                },\r\n            },\r\n            wanjie: {\r\n                enable: 'phaseUse',\r\n                filterCard: true,\r\n                selectCard: -1,\r\n                discard: false,\r\n                lose: false,\r\n                filter(Evt, player) {\r\n                    return player.isPhaseUsing() && !player.hasSkill('wanjie_used') && player.countDiscardableCards(player, 'h');\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.showHandcards();\r\n                    player.chooseCard(true, lib.filter.cardDiscardable, '###『腕解』选择一种颜色的牌弃置###若弃置黑色，你摸两张牌；若弃置红色，本回合『食尚』的“回复1点体力”改为“受到你造成的1点伤害”').set('ai', card => {\r\n                        var player = _status.event.player;\r\n                        var cardTo = player.getCards('h', { color: 'black' });\r\n                        return cardTo.contains(card);\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.discard(player.getCards('h', card => get.color(card) == get.color(result.cards[0])));\r\n                        if (get.color(result.cards[0]) == 'black') {\r\n                            player.draw(2);\r\n                        }\r\n                        if (get.color(result.cards[0]) == 'red') {\r\n                            player.addTempSkill('wanjie_change');\r\n                        }\r\n                    }\r\n                    player.addTempSkill('wanjie_used', 'phaseUseEnd');\r\n                },\r\n                ai: {\r\n                    order(item, player) {\r\n                        return 5;\r\n                    },\r\n                    result: {\r\n                        player(player, target) {\r\n                            var cardTo = player.countCards('h', { color: 'black' });\r\n                            if (cardTo == 1)\r\n                                return 1;\r\n                            if (cardTo == 0)\r\n                                return -player.countCards('h', { color: 'red' });\r\n                            return 0;\r\n                        },\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    used: {},\r\n                    change: {},\r\n                }\r\n            },\r\n            maoge: {\r\n                marktext: '书',\r\n                intro: {\r\n                    mark(dialog, storage, player) {\r\n                        if (player.countCards('s', card => card.hasGaintag('maoge')))\r\n                            dialog.addAuto(player.getCards('s', card => card.hasGaintag('maoge')));\r\n                    },\r\n                    markcount(storage, player) {\r\n                        return player.countCards('s', card => card.hasGaintag('maoge'));\r\n                    },\r\n                    onunmark(storage, player) {\r\n                        var cards = player.getCards('s', card => card.hasGaintag('maoge'));\r\n                        if (cards.length) {\r\n                            player.lose(cards, ui.discardPile);\r\n                            player.$throw(cards, 1000);\r\n                            game.log(cards, '进入了弃牌堆');\r\n                        }\r\n                    },\r\n                },\r\n                cardAround(player) {\r\n                    return player.getCards('s', card => card.hasGaintag('maoge'));\r\n                },\r\n                trigger: { global: 'phaseLoopBefore', player: ['drawBegin', 'enterGame'] },\r\n                forced: true,\r\n                silent: true,\r\n                popup: false,\r\n                lastDo: true,\r\n                content() {\r\n                    'step 0';\r\n                    if (['game', 'phaseLoop'].contains(trigger.name)) {\r\n                        var cards = player.getCards('h');\r\n                        player.loseToSpecial(cards, 'maoge');\r\n                    }\r\n                    else {\r\n                        var cards = get.cards(trigger.num);\r\n                        player.$draw(cards.length);\r\n                        player.directgains(cards, null, 'maoge');\r\n                        trigger.changeToZero();\r\n                    }\r\n                    game.log(player, '获得了' + get.cnNumber(cards.length) + '张「书」');\r\n                    'step 1';\r\n                    player.markSkill('maoge');\r\n                },\r\n                mod: {\r\n                    cardEnabled2(cardx, player) {\r\n                        if (player.countCards('s', card => card.hasGaintag('maoge')) > player.countCards('h')) {\r\n                            if (get.position(cardx) != 's' || !cardx.hasGaintag('maoge'))\r\n                                return false;\r\n                        }\r\n                        else {\r\n                            if (get.position(cardx) == 's' && cardx.hasGaintag('maoge'))\r\n                                return false;\r\n                        }\r\n                    }\r\n                },\r\n                group: 'maoge_drawPhase',\r\n                subSkill: {\r\n                    drawPhase: {\r\n                        trigger: { player: 'phaseDrawBegin2' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return player.countCards('s', card => card.hasGaintag('maoge')) < player.countCards('h') && !Evt.numFixed;\r\n                        },\r\n                        content() {\r\n                            trigger.num++;\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            bianlan: {\r\n                trigger: { player: 'useCard2' },\r\n                filter(Evt, player) {\r\n                    if (player.countCards('s', card => card.hasGaintag('maoge')))\r\n                        return Evt.targets && Evt.targets.length;\r\n                    return false;\r\n                },\r\n                forced: true,\r\n                silent: true,\r\n                popup: false,\r\n                lastDo: true,\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.chooseButton(['###是否发动『遍览』？###选择一种花色的「书」', player.getCards('s', card => card.hasGaintag('maoge'))]).set('filterButton', function (button) {\r\n                        return true;\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.logSkill('bianlan');\r\n                        Evt.suit = get.suit(result.links[0]);\r\n                        Evt.targets = trigger.targets;\r\n                        {\r\n                            let shus = player.getCards('s', card => card.hasGaintag('maoge') && get.suit(card) == Evt.suit);\r\n                            player.showCards(shus, '获得一种花色的「书」');\r\n                            game.delayx();\r\n                            player.lose(shus, ui.special).set('getlx', false);\r\n                            player.gain(shus, 'giveAuto');\r\n                            player.updateMarks();\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    if (game.hasPlayer(cur => Evt.targets.contains(cur) && !player.storage.bianlan.contains(cur))) {\r\n                        player.chooseTarget('###『遍览』###可以令一名目标摸一张牌', function (card, player, target) {\r\n                            return _status.event.targets.contains(target) && !player.storage.bianlan.contains(target);\r\n                        }).set('targets', Evt.targets);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 3';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        Evt.target = result.targets[0];\r\n                        player.line(Evt.target);\r\n                        player.storage[Evt.name].add(Evt.target);\r\n                        Evt.target.draw();\r\n                    }\r\n                },\r\n                ai: {\r\n                    combo: 'maoge',\r\n                },\r\n                group: 'bianlan_init',\r\n                subSkill: {\r\n                    init: {\r\n                        trigger: { global: ['gameDrawAfter', 'phaseAfter'], player: 'enterGame' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        lastDo: true,\r\n                        content() {\r\n                            player.storage.bianlan = [];\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            futian: {\r\n                trigger: { player: 'phaseBegin' },\r\n                limited: true,\r\n                unique: true,\r\n                skillAnimation: true,\r\n                animationColor: 'fire',\r\n                filter(Evt, player) {\r\n                    return player.countCards('s', card => card.hasGaintag('maoge'));\r\n                },\r\n                check(Evt, player) {\r\n                    return player.countCards('s', card => card.hasGaintag('maoge')) > 6;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.storage.futian = true;\r\n                    player.awakenSkill(Evt.name);\r\n                    Evt.hc = player.getCards('h');\r\n                    Evt.shus = player.getCards('s', card => card.hasGaintag('maoge'));\r\n                    player.addTempSkill('futian_futian');\r\n                    'step 1';\r\n                    player.loseToSpecial(Evt.hc, 'maoge');\r\n                    'step 2';\r\n                    player.updateMarks();\r\n                    player.showCards(Evt.shus, '获得所有的「书」');\r\n                    game.delayx();\r\n                    'step 3';\r\n                    player.lose(Evt.shus, ui.special).set('getlx', false);\r\n                    player.$giveAuto(Evt.shus, player);\r\n                    'step 4';\r\n                    player.gain(Evt.shus);\r\n                    game.delay(1);\r\n                },\r\n                ai: {\r\n                    combo: 'maoge',\r\n                },\r\n                subSkill: {\r\n                    futian: {\r\n                        init(player, skill) {\r\n                            player.storage[skill] = [];\r\n                        },\r\n                        hiddenCard(player, name) {\r\n                            if (player.countCards('s', card => card.hasGaintag('maoge')) > player.countCards('h'))\r\n                                return false;\r\n                            var list = get.inpile('trick', card => {\r\n                                var player = _status.event.player;\r\n                                if (player.storage.futian_futian.contains(card))\r\n                                    return false;\r\n                                return true;\r\n                            });\r\n                            for (var i = 0; i < list.length; i++) {\r\n                                if (list[i] == name)\r\n                                    return true;\r\n                            }\r\n                            return false;\r\n                        },\r\n                        enable: 'chooseToUse',\r\n                        filter(Evt, player) {\r\n                            return player.countCards('he') >= 2 && player.countCards('s', card => card.hasGaintag('maoge')) <= player.countCards('h');\r\n                        },\r\n                        chooseButton: {\r\n                            dialog(Evt, player) {\r\n                                var list = get.inpile('trick', card => {\r\n                                    if (player.storage.futian_futian.contains(card))\r\n                                        return false;\r\n                                    return true;\r\n                                });\r\n                                for (var i = 0; i < list.length; i++) {\r\n                                    list[i] = ['锦囊', '', list[i]];\r\n                                }\r\n                                if (list.length == 0) {\r\n                                    return ui.create.dialog('『覆天』已无可用牌');\r\n                                }\r\n                                console.log(player, ui.create.dialog);\r\n                                return ui.create.dialog('『覆天』', [list, 'vcard']);\r\n                            },\r\n                            filter(button, player) {\r\n                                return _status.event.getParent().filterCard({ name: button.link[2] }, player, _status.event.getParent());\r\n                            },\r\n                            check(button) {\r\n                                let player = _status.event.player;\r\n                                if (player.countCards('h', button.link[2]) > 0)\r\n                                    return 0;\r\n                                if (button.link[2] == 'wugu')\r\n                                    return 0;\r\n                                let effect = player.getUseValue(button.link[2]);\r\n                                if (effect > 0)\r\n                                    return effect;\r\n                                return 0;\r\n                            },\r\n                            backup(links, player) {\r\n                                return {\r\n                                    filterCard: true,\r\n                                    selectCard: 2,\r\n                                    popname: true,\r\n                                    check(card) {\r\n                                        return 6 - get.value(card);\r\n                                    },\r\n                                    position: 'he',\r\n                                    viewAs: { name: links[0][2] },\r\n                                    onuse(result, player) {\r\n                                        player.storage.futian_futian.add(result.card.name);\r\n                                    },\r\n                                };\r\n                            },\r\n                            prompt(links, player) {\r\n                                return '###『覆天』###将两张牌当做【' + (get.translation(links[0][3]) || '') + get.translation(links[0][2]) + '】使用';\r\n                            }\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        translate: {\r\n            hololive_1: `一期生`,\r\n            hololive_wuyin: `无印`,\r\n            hololive_2and3: `二&三期生`,\r\n            OurGirls: `OurGirls`,\r\n            TokinoSora: `时乃空`,\r\n            taiyangzhiyin: `太阳之音`,\r\n            taiyangzhiyin_info: `你使用牌指定目标时，此牌点数每比10大1点，你便可选择不重复的一项：<br>令之无法响应；为之额外指定一名目标；或摸一张牌。`,\r\n            taiyangzhiyin_append: lib.figurer(`特性：强制命中 强化出杀`),\r\n            renjiazhizhu: `仁家之主`,\r\n            renjiazhizhu_info: `主公技 你的回合开始时，其他同势力角色可以展示并交给你一张牌，本回合这些点数的牌点数均改为J。`,\r\n            renjiazhizhu_tag: `仁家之主`,\r\n            YozoraMel: `夜空梅露`,\r\n            juhun: `聚魂`,\r\n            juhun_info: `锁定技 每回合有角色首次受到伤害后，将牌堆顶牌置于你武将牌上。一轮开始时，你获得武将牌上所有牌。`,\r\n            meilu: `没露`,\r\n            meilu_info: `锁定技 准备阶段，若你的手牌数比体力值多三或以上，你翻面。当你的武将牌背面朝上时，你使用【杀】没有次数限制；当你的武将牌翻至正面时，你回复 1 点体力。`,\r\n            meilu_append: lib.figurer(`特性：多次出杀`),\r\n            AkaiHaato: `赤井心`,\r\n            liaolishiyan: `料理实验`,\r\n            liaolishiyan_info: `摸牌阶段，你可改为展示并获得牌堆顶的两张牌，然后根据其中的花色执行对应效果：♦~重铸一张牌，♣~弃置一张牌，♥~令赤井心回复 1 点体力，♠~失去 1 点体力。出牌阶段限一次，你可以重铸与当回合『料理实验』花色相同的两张牌令一名角色执行对应效果。`,\r\n            liaolishiyan2: `料理实验`,\r\n            liaolishiyan2_info: `出牌阶段限一次，你可以重铸与当回合『料理实验』花色相同的两张牌令一名角色执行对应效果。♦~重铸一张牌，♣~弃置一张牌，♥~令赤井心回复 1 点体力，♠~失去 1 点体力。`,\r\n            momizhiyan: `抹蜜之言`,\r\n            momizhiyan_info: `每回合限一次，当你使用牌指定目标后，你可弃置一张牌令其中一名目标执行弃置牌花色在『料理实验』的对应效果。`,\r\n            momizhiyan_append: lib.figurer(`特性：难上手`),\r\n            NatsuiroMatsuri: `夏色祭`,\r\n            huxi1: `呼吸`,\r\n            huxi1_info: `出牌阶段限一次，你可以令攻击范围内的一名其他角色与你同时展示一张手牌并交换，若你获得了红色牌，你可以摸一张牌并令你本回合使用的下一张牌不受距离与次数限制；若没有人获得红色牌，你失去 1 点体力。`,\r\n            huxi1_append: lib.figurer(`特性：传递关键牌`),\r\n            lianmeng: `连梦`,\r\n            lianmeng_info: `锁定技 当你使用武器牌或造成伤害后，你需对本回合未成为过『呼吸』目标中距离你最近的角色立即发动一次『呼吸』。当你于回合外获得其他角色的牌后，弃置你装备区的防具牌。`,\r\n            lianmeng_append: lib.figurer(`特性：难上手`),\r\n            RobokoSan: `萝卜子`,\r\n            gaonengzhanxie: `高能战械`,\r\n            gaonengzhanxie_info: `锁定技 你出牌阶段可使用【杀】的次数等于你装备区内牌数+1。当你于回合内使用【杀】后，你摸X张牌，然后若你还可使用【杀】，你弃置等量的牌。（X为你本阶段已使用过的【杀】的数量)`,\r\n            gaonengzhanxie_append: lib.figurer(`特性：多次出杀`),\r\n            ranyouxielou: `燃油泄漏`,\r\n            ranyouxielou_info: `锁定技 你受到属性伤害时，来源选择一项：<br>改为令你回复等量体力；或令你获得来源牌。<br>你攻击范围内其他角色受到火焰伤害时，若你的手牌数不小于手牌上限，你弃置一张牌令此伤害+1。`,\r\n            ranyouxielou_append: lib.figurer(`特性：属性伤害减免`),\r\n            ShirakamiFubuki: `白上吹雪`,\r\n            baihuqingguo: `白狐倾国`,\r\n            baihuqingguo_info: `其他角色的出牌阶段开始时，你可弃一张牌，若如此做，该角色于此阶段使用的牌只能以你或其自己为目标。`,\r\n            huyanluanyu: `狐言乱语`,\r\n            huyanluanyu_info: `每当你受到1点伤害后，（记你此时手牌数为X）你可令手牌数多于X的角色各交给你一张牌，然后你交给手牌数少于X的角色各一张牌。`,\r\n            yuanlv: `远虑`,\r\n            yuanlv_info: `每轮每项限一次。一个回合结束时，若你使用过锦囊牌或受到过伤害，你可以摸等同你体力上限的牌，并将等同你体力值的牌置于牌堆顶。`,\r\n            yuanlv_append: lib.figurer(`特性：卖血 控顶`),\r\n            jinyuan: `近援`,\r\n            jinyuan_info: `出牌阶段限一次，你可以观看一名角色的手牌，然后你可交给其一张牌，若如此做，其可以立即使用之。`,\r\n            jinyuan_append: lib.figurer(`特性：传递关键牌`),\r\n            zhongjian: `中坚`,\r\n            zhongjian_info: `主公技 轮次技 当一张通常锦囊牌指定目标后，你可以选择同势力一名角色的一张手牌，此牌本回合视为【无懈可击】。`,\r\n            AkiRosenthal: `亚琦·罗森塔尔`,\r\n            AkiRosenthal_ab: `亚琦`,\r\n            meiwu: `魅舞`,\r\n            meiwu_info: `当你于一回合内首次成为黑色牌的唯一目标时，你可以将目标转移给另一名其他角色，然后若此牌被抵消，你交给其一张牌。`,\r\n            huichu: `慧厨`,\r\n            huichu_info: `体力值最少的角色回合开始时，你可以展示所有手牌，若均为♥，其回复 1 点体力。若有其它花色，你可以重铸任意张手牌。`,\r\n            HoshimatiSuisei: `星街彗星`,\r\n            yemuxingyong: `夜幕星咏`,\r\n            yemuxingyong_info: `每轮限一次，一个弃牌阶段结束时，你可将本阶段进入弃牌堆的牌置于武将牌上，称为「咏」。然后其他角色也可将一张黑色牌置于你武将牌上。出牌阶段，你可获得一张「咏」，然后立即将两张手牌当【过河拆桥】或【酒】使用。`,\r\n            yong: `咏`,\r\n            xinghejianduei: `星河舰队`,\r\n            xinghejianduei_info: `<font color=#ccf>觉醒技</font> 一轮开始时，若你的体力值不大于游戏轮数，你减 1 点体力上限并摸等同于存活角色数的手牌，然后你的攻击范围和手牌上限始终增加「咏」的数量。`,\r\n            SakuraMiko: `樱巫女`,\r\n            haodu: `豪赌`,\r\n            haodu_info: `出牌阶段限X次（X为你已损失的体力值且至少为1)，你可以将至少一张手牌交给一名其他角色并声明点数、花色、类型，然后你展示其一张手牌。根据与声明相同的项依次执行对应效果：点数~你与其交换手牌；类型~令其弃置两张牌；花色~你获得其一张牌。\t\t\t`,\r\n            MinatoAqua: `湊阿库娅`,\r\n            kuali: `夸力满满`,\r\n            kuali_info: `每回合限一次，出牌/结束阶段，你可以选择任意名手牌数为你整数倍的角色，你弃置等量牌并回复等量体力；或摸体力为你整数倍的角色数的牌，然后失去1点体力。`,\r\n            kuali_zhuDong_info: `每回合限一次，出牌阶段，你可以选择任意名手牌数为你整数倍的角色，你弃置等量牌并回复等量体力；或摸体力为你整数倍的角色数的牌，然后失去1点体力。`,\r\n            kuali_jieshu_info: `每回合限一次，结束阶段，你可以选择任意名手牌数为你整数倍的角色，你弃置等量牌并回复等量体力；或摸体力为你整数倍的角色数的牌，然后失去1点体力。`,\r\n            youyi: `友谊誓约`,\r\n            youyi_info: `轮次技 其他角色的回合开始时，你可以展示并交给其一张「誓约」牌。本回合内，当其造成伤害时，你可令其将「誓约」牌交给你以防止之。该回合结束时，其可以弃置「誓约」牌令你或其回复1点体力。`,\r\n            youyi_append: lib.figurer(`特性：传递关键牌 限制敌方输出`),\r\n            youyishiyue: `誓约`,\r\n            youyishiyue_info: `友谊誓约生效中`,\r\n            youyishiyue_rec_info: `弃置「誓约」牌，令你或湊阿库娅回复一点体力。`,\r\n            UsadaPekora: `兔田佩克拉`,\r\n            zhonggong: `重工`,\r\n            zhonggong_info: `准备阶段，若你装备区牌数为全场唯一最少/唯一最多，你令手牌上限永久+1/两名角色横置。`,\r\n            binzhan: `缤绽`,\r\n            binzhan_info: `出牌阶段限一次，你可以调整手牌至上限，若你因此弃牌，你可以对攻击范围内的X名角色各造成1点火焰伤害（X为你弃置的牌数）。`,\r\n            NekomataOkayu: `猫又小粥`,\r\n            fantuan: `安心饭团`,\r\n            fantuan_info: `你使用一张延时锦囊牌时，可以令一名角色回复一点体力并摸一张牌。`,\r\n            shengang: `神冈家计`,\r\n            shengang_judge: `神冈家计-判定`,\r\n            shengang_useCard: `神冈家计-使用`,\r\n            shengang_info: `每两轮每项限一次，你可以在自己与相邻角色判定区卡牌/使用实体牌结算后获得之。`,\r\n            shengang_append: lib.figurer(`特性：回收关键牌`),\r\n            UruhaRushia: `润羽露西娅`,\r\n            NakiriAyame: `百鬼绫目`,\r\n            MurasakiShion: `紫咲诗音`,\r\n            TsunomakiWatame: `角卷绵芽`,\r\n            YukihanaLamy: `雪花菈米`,\r\n            ŌzoraSubaru: `大空昴`,\r\n            AZKi: `AZKi`,\r\n            Civia: `希薇娅`,\r\n            kuangxin: `旷心`,\r\n            kuangxin2: `旷心`,\r\n            kuangxin_info: `每回合限一次,当其他角色成为【杀】或伤害类锦囊牌的唯一目标时，你可以令你与其各选择一张牌交换,此牌结算后,若其未受到此牌造成的伤害,你可以令你或其摸一张牌。`,\r\n            danyan: `弹言`,\r\n            danyan_info: `你的手牌因弃置而进入弃牌堆时，若本回合你没有造成过伤害，你可以使用其中的一张牌。`,\r\n            qingjie: `轻捷`,\r\n            qingjie_info: `锁定技 你计算与装备区内没有坐骑牌的角色的距离视为1；其他角色计算与你的距离时，你每比其多一张手牌，距离便+1。`,\r\n            SpadeEcho: `黑桃影`,\r\n            hangao: `函告`,\r\n            hangao_info: `出牌阶段限一次，你可以将一张♠牌交给一名其他角色，该角色于下个回合结束时展示所有手牌，然后若其本回合没有对你使用过牌，你获得其所有的♥牌；若你本轮交出的♠牌未被其使用且不在其手牌，你获得其所有的♦牌。`,\r\n            hangao_append: lib.figurer(`特性：传递关键牌 挑衅`),\r\n            yinglve: `影掠`,\r\n            yinglve_info: `结束阶段，你可以废除一个装备栏视为使用一张无距离限制的【顺手牵羊】；你的攻击范围+X且你使用【顺手牵羊】可选择的目标数为X。（X为你废除的装备栏数）`,\r\n            Artia: `阿媂娅`,\r\n            shuangzhi: `殇冻`,\r\n            shuangzhi_info: `其他角色一回合内弃置第二张牌后，你可以令其选择一项：<br>受到1点无来源伤害；或受到的伤害+1直到其回合开始。`,\r\n            xiwo: `希握`,\r\n            xiwo_info: `一轮开始时，你可以令一名角色失去1点体力，另一名角色回复1点体力。本轮结束时前者回复1点体力，后者失去1点体力。`,\r\n            Doris: `朵莉丝`,\r\n            shenhai: `曜海`,\r\n            shenhai_info: `当你使用一张1.装备牌2.基本牌3.通常锦囊牌时，若该牌点数大于你本回合使用的上一张牌，你可以执行对应标号的项：1.令一名其他角色使用2.此牌额外结算一次3.此牌增加或减少一个目标。当你于一回合内发动三次本技能后，解除标号限制。`,\r\n            shenhai_append: lib.figurer(`可以通过先打小牌后打大牌，让【桃】、【杀】多生效一次`),\r\n            paomo: `儚恋`,\r\n            paomo_info: `你的回合内，当其他角色于本回合首次使用实体牌后，你可以令你上一张使用的牌的点数视为此牌的点数，然后与其各摸一张牌。`,\r\n            Yogiri: `夜霧`,\r\n            shisang: `食尚`,\r\n            shisang_info: `出牌阶段限一次，你使用牌指定目标后，可以将此牌的效果改为令目标回复1点体力。`,\r\n            wanjie: `腕解`,\r\n            wanjie_info: `出牌阶段限一次，你可以展示所有手牌并弃置其中黑色牌，然后摸两张牌；或弃置其中红色牌，然后将本回合『食尚』的“回复1点体力”改为“受到你造成的1点伤害”。`,\r\n            Rosalyn: `罗莎琳`,\r\n            maoge: `帽阁`,\r\n            maoge_info: `锁定技 你摸的牌均改为置于武将牌上，称为「书」。你的手牌数不小于「书」数时，摸牌阶段额外摸一张牌；你的手牌数小于「书」数时，你能且只能使用或打出「书」。`,\r\n            maoge_append: lib.figurer(`可以无视手牌上限屯牌`),\r\n            bianlan: `遍览`,\r\n            bianlan_info: `当你使用牌指定目标后，你可以获得一种花色的「书」。然后你可以令其中一名本回合未因此摸牌的目标摸一张牌。`,\r\n            futian: `覆天`,\r\n            futian_info: `<font color=#abf>限定技</font> 回合开始时，你可以交换手牌与「书」，然后本回合你可以将任意两张牌当一张未以此法使用过的通常锦囊牌使用。`,\r\n            futian_append: lib.figurer(`特性：爆发`),\r\n        },\r\n    };\r\n});\r\n\n\n//# sourceURL=webpack:///./character/hololive.ts?")},"./character/huajing.ts":()=>{eval("\r\nwindow.game.import('character', function (lib, game, ui, get, ai, _status) {\r\n    return {\r\n        name: 'huajing',\r\n        connect: true,\r\n        character: {\r\n            NagaoKei: ['male', 'nijisanji', 3, ['nkfumo', 'chidu']],\r\n            NishizonoChigusa: ['female', 'nijisanji', 4, ['qiti', 'miaoyu']],\r\n            ShirakamiHaruka: ['female', 'psp', 3, ['baoxiao', 'quru'], ['guoV']],\r\n            KisaragiKoyori: ['female', 'kagura', 3, ['shinve', 'juzu']],\r\n            GawrGura: ['female', 'holo', 3, ['lingqun', 'yangliu'], ['yingV']],\r\n            NinomaeInanis: ['female', 'holo', 3, ['mochu', 'fuyue'], ['yingV']],\r\n            Nana7mi: ['female', 'VirtuaReal', 4, ['xieqi', 'youhai'], ['guoV']],\r\n            sea_HosimiyaSio: ['female', 'qun', 5, ['zhuhan', 'pobing'],],\r\n            sea_SasakiSaku: ['female', 'nijisanji', 4, ['haishou', 'lishi']],\r\n            sea_MinatoAqua: ['female', 'holo', 3, ['jinchen', 'qianyong']],\r\n            sea_Ava: ['female', 'asoul', 3, ['zhuiguang', 'ronglei'], ['guoV']],\r\n            sp_HisekiErio: ['female', 'shen', '1/6', ['qiming', 'shengbian', 'tulong']],\r\n            sp_GawrGura: ['female', 'shen', 3, ['sp_guaisheng', 'sp_guiliu'], ['yingV']],\r\n        },\r\n        characterSort: {\r\n            huajing: {\r\n                sea_emperor: ['sp_HisekiErio', 'sp_GawrGura'],\r\n                HOLOEN: ['GawrGura', 'NinomaeInanis'],\r\n            },\r\n        },\r\n        characterIntro: {},\r\n        skill: {\r\n            nkfumo: {\r\n                trigger: { player: 'useCard1' },\r\n                priority: 42,\r\n                check(Evt, player) {\r\n                    var effect = 0;\r\n                    for (var i = 0; i < Evt.targets.length; i++) {\r\n                        effect += get.effect(Evt.targets[i], { name: 'langyong' }, Evt.player, player);\r\n                    }\r\n                    return effect > 0;\r\n                },\r\n                filter(Evt, player) {\r\n                    if (Evt.targets.length != 1)\r\n                        return false;\r\n                    return lib.filter.filterTarget({ name: 'langyong' }, player, Evt.targets[0]);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.judge(function (result) {\r\n                        if (get.color(result) == 'black')\r\n                            return 2;\r\n                        return 0;\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        if (!trigger.addedSkill)\r\n                            trigger.addedSkill = [];\r\n                        trigger.addedSkill.add('nkfumo');\r\n                        if (player.storage.nkfumo2)\r\n                            delete player.storage.nkfumo2;\r\n                        lib.skill.nkfumo2.trigger = { player: [get.name(trigger.card) + 'Begin'] };\r\n                    }\r\n                    'step 2';\r\n                    player.storage.nkfumo2 = trigger.card;\r\n                    game.log(player, '将', trigger.card, '的效果改为【浪涌】');\r\n                    player.addTempSkill('nkfumo2', { player: 'useCardAfter' });\r\n                },\r\n                group: 'nkfumo_reback',\r\n                subSkill: {\r\n                    reback: {\r\n                        trigger: { player: 'useCardAfter' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            if (!player.hasSkill('chidu_used'))\r\n                                return false;\r\n                            return (get.type(Evt.card, 'trick') == 'trick');\r\n                        },\r\n                        content() {\r\n                            player.removeSkill('chidu_used');\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            nkfumo2: {\r\n                trigger: { global: 'Xbegin' },\r\n                forced: true,\r\n                silent: true,\r\n                popup: false,\r\n                filter(Evt, player) {\r\n                    return Evt.card == player.storage.nkfumo2;\r\n                },\r\n                content() {\r\n                    var fun = lib.card.langyong.content;\r\n                    trigger.setContent(fun);\r\n                },\r\n            },\r\n            chidu: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                mark: true,\r\n                trigger: { global: 'judge' },\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('chidu_used'))\r\n                        return false;\r\n                    var color0 = get.color(Evt.player.judging[0]);\r\n                    return (player.countCards('h') - player.countCards('h', { color: color0 })) > 0;\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseCard(get.translation(trigger.player) + '的' + (trigger.judgestr || '') + '判定为' +\r\n                        get.translation(trigger.player.judging[0]) + '，' + get.prompt('chidu'), 'he', function (card) {\r\n                        var judging = _status.event.judging;\r\n                        if (get.color(card) == get.color(judging))\r\n                            return false;\r\n                        var player = _status.event.player;\r\n                        var mod2 = game.checkMod(card, player, 'unchanged', 'cardEnabled2', player);\r\n                        if (mod2 != 'unchanged')\r\n                            return mod2;\r\n                        var mod = game.checkMod(card, player, 'unchanged', 'cardRespondable', player);\r\n                        if (mod != 'unchanged')\r\n                            return mod;\r\n                        return true;\r\n                    }).set('ai', function (card) {\r\n                        var trigger = _status.event.getTrigger();\r\n                        var player = _status.event.player;\r\n                        var judging = _status.event.judging;\r\n                        var result = trigger.judge(card) - trigger.judge(judging);\r\n                        var attitude = get.attitude(player, trigger.player);\r\n                        if (attitude == 0 || result == 0)\r\n                            return 0;\r\n                        if (attitude > 0) {\r\n                            return result;\r\n                        }\r\n                        else {\r\n                            return -result;\r\n                        }\r\n                    }).set('judging', trigger.player.judging[0]);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.addTempSkill('chidu_used');\r\n                        player.respond(result.cards, 'highlight', 'noOrdering');\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        Evt.card = trigger.player.judging[0];\r\n                        player.gain(Evt.card, 'gain2');\r\n                        trigger.player.judging[0] = result.cards[0];\r\n                        trigger.orderingCards.addArray(result.cards);\r\n                        game.log(trigger.player, '的判定牌改为', result.cards[0]);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    used: {},\r\n                },\r\n                ai: {\r\n                    rejudge: true,\r\n                    tag: {\r\n                        rejudge: 0.7,\r\n                    }\r\n                },\r\n            },\r\n            qiti: {\r\n                trigger: { player: 'damageAfter' },\r\n                priority: 42,\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    var _a;\r\n                    return Evt.num > 0 && ((_a = Evt.source) === null || _a === void 0 ? void 0 : _a.isIn()) && typeof Evt.nature === 'string' && player.countCards('he');\r\n                },\r\n                content: [() => {\r\n                        player.chooseCard(get.prompt2('qiti'), 'he').set('ai', card => {\r\n                            return 6 - get.value(card);\r\n                        });\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.cards) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            Evt.tar = trigger.source;\r\n                            player.logSkill('qiti', Evt.tar);\r\n                            player.give(result.cards, Evt.tar, 'giveAuto');\r\n                        }\r\n                    }, () => {\r\n                        Evt.tar.chooseCard(`『气嚏』：交给${get.translation(player)}${get.cnNumber(player.getDamagedHp() + 1)}张牌`, 'he', player.getDamagedHp() + 1, true).set('ai', card => {\r\n                            return 6 - get.value(card);\r\n                        });\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.cards) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            Evt.tar.give(result.cards, player, 'giveAuto');\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    maixie: true,\r\n                    skillTagFilter(player) {\r\n                        return player.countCards('he') > 0;\r\n                    },\r\n                }\r\n            },\r\n            miaoyu: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = true;\r\n                },\r\n                trigger: {\r\n                    player: ['gainAfter', 'loseAfter'],\r\n                },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'gain')\r\n                        return player.storage.miaoyu && Evt.getParent().name !== 'draw';\r\n                    else\r\n                        return !player.storage.miaoyu && Evt.getParent().name !== 'discard';\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        if (trigger.name == 'gain') {\r\n                            player.chooseTarget(get.prompt2('miaoyu', null, player), (card, player, target) => {\r\n                                return true;\r\n                            }).set('ai', tar => {\r\n                                return get.attitude2(tar);\r\n                            });\r\n                        }\r\n                        else {\r\n                            player.chooseTarget(get.prompt2('miaoyu', null, player), function (card, player, target) {\r\n                                return player.canUse({ name: 'sha' }, target, false);\r\n                            }).set('ai', tar => {\r\n                                return get.effect(tar, { name: 'sha', nature: 'ocean' }, _status.event.player);\r\n                            });\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            player.storage.miaoyu = !player.storage.miaoyu;\r\n                            Evt.tar = result.targets[0];\r\n                            player.logSkill('miaoyu', Evt.tar);\r\n                            if (trigger.name == 'gain') {\r\n                                Evt.tar.changeHujia();\r\n                            }\r\n                            else {\r\n                                player.useCard({ name: 'sha', nature: 'ocean' }, Evt.tar, false);\r\n                            }\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    useSha: 1,\r\n                }\r\n            },\r\n            baoxiao: {\r\n                trigger: { player: 'useCard' },\r\n                lastDo: true,\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    if (Evt.card.nature != 'ocean')\r\n                        return false;\r\n                    return Evt.card.name == 'sha';\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    if (trigger.addCount !== false) {\r\n                        trigger.addCount = false;\r\n                        var stat = player.getStat();\r\n                        if (stat && stat.card && stat.card[trigger.card.name])\r\n                            stat.card[trigger.card.name]--;\r\n                    }\r\n                    Evt.num = trigger.targets.filter(function (tar) {\r\n                        return tar.hujia == 0;\r\n                    }).length;\r\n                    'step 1';\r\n                    player.draw(Evt.num);\r\n                },\r\n            },\r\n            quru: {\r\n                audio: 5,\r\n                enable: 'chooseToUse',\r\n                filterCard(card) {\r\n                    return get.type(card) != 'basic';\r\n                },\r\n                selectCard: 2,\r\n                position: 'he',\r\n                viewAs: { name: 'sha', nature: 'ocean' },\r\n                filter(Evt, player) {\r\n                    return (player.countCards('he') - player.countCards('he', { type: 'basic' })) >= 2 && player.isPhaseUsing();\r\n                },\r\n                prompt: '将两张牌当海【杀】使用',\r\n                check(card, cards) {\r\n                    var player = _status.event.player;\r\n                    if ((get.name(card) == 'sha' && (card.nature == 'ocean' || (player.getEquip(1) && get.name(player.getEquip(1)) == 'sanchaji'))))\r\n                        return 0;\r\n                    return 8 - get.value(card);\r\n                },\r\n                onuse(result, player) {\r\n                    var hs = player.getCards('h');\r\n                    var es = player.getCards('e');\r\n                    var hu = [], eu = [];\r\n                    result.cards.forEach(function (card) {\r\n                        if (get.position(card) == 'h')\r\n                            hu.add(card);\r\n                        if (get.position(card) == 'e')\r\n                            eu.add(card);\r\n                    });\r\n                    if ((hu.length && hu.length == hs.length) || (eu.length && eu.length == es.length))\r\n                        player.changeHujia();\r\n                },\r\n                mod: {\r\n                    aiOrder(player, card, num) {\r\n                        if (get.itemtype(card) == 'card' && get.name(card) == 'sha' && card.nature == 'ocean')\r\n                            return num + 10;\r\n                        if (get.itemtype(card) == 'card' && get.name(card) == 'sha' && card.nature != 'ocean')\r\n                            return num - 2;\r\n                    },\r\n                    aiValue(player, card, num) {\r\n                        if (get.itemtype(card) == 'card' && get.name(card) == 'sha' && card.nature == 'ocean')\r\n                            return num + 5;\r\n                    },\r\n                },\r\n                ai: {\r\n                    order: 7,\r\n                    result: { player: 1 },\r\n                    gainHujia: true\r\n                },\r\n                group: ['quru_addDam'],\r\n                subSkill: {\r\n                    addDam: {\r\n                        trigger: { source: 'damageBegin2' },\r\n                        priority: 22,\r\n                        filter(Evt, player) {\r\n                            return player.hujia && Evt.getParent().skill == 'quru';\r\n                        },\r\n                        prompt2(Evt, player) {\r\n                            return '你可以失去所有护甲，令' + get.translation(Evt.player) + '伤害等量增加';\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            Evt.num = player.hujia;\r\n                            'step 1';\r\n                            player.changeHujia(-Evt.num);\r\n                            trigger.num += Evt.num;\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            shinve: {\r\n                trigger: { player: 'changeHp' },\r\n                firstDo: true,\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return Evt.num < 0;\r\n                },\r\n                content() {\r\n                    player.changeHujia(-trigger.num);\r\n                },\r\n                group: 'shinve_change',\r\n                subSkill: {\r\n                    change: {\r\n                        trigger: { player: 'phaseZhunbeiBegin' },\r\n                        firstDo: true,\r\n                        forced: true,\r\n                        priority: 9,\r\n                        filter(Evt, player) {\r\n                            return player.hujia > 0;\r\n                        },\r\n                        content() {\r\n                            Evt.num = player.hujia;\r\n                            player.changeHujia(-Evt.num);\r\n                            player.draw(Evt.num);\r\n                        },\r\n                    }\r\n                },\r\n                ai: {\r\n                    maixie: true,\r\n                    maixie_hp: true\r\n                },\r\n            },\r\n            juzu: {\r\n                skillAnimation: true,\r\n                animationStr: '海狗女王',\r\n                unique: true,\r\n                juexingji: true,\r\n                forced: true,\r\n                trigger: { player: 'damageAfter' },\r\n                filter(Evt, player) {\r\n                    return Evt.source && Evt.source.countCards('h') > player.countCards('h');\r\n                },\r\n                content() {\r\n                    player.gainMaxHp();\r\n                    player.drawTo(player.maxHp);\r\n                    player.storage.juzu = true;\r\n                    player.awakenSkill('juzu');\r\n                    player.addSkill('haigou');\r\n                },\r\n                derivation: 'haigou',\r\n            },\r\n            haigou: {\r\n                trigger: { player: 'useCardToPlayer' },\r\n                filter(Evt, player) {\r\n                    return Evt.target.countCards('h') > player.countCards('h') && get.tag(Evt.card, 'damage');\r\n                },\r\n                priority: 9,\r\n                forced: true,\r\n                content() {\r\n                    trigger.directHit.add(trigger.target);\r\n                },\r\n                group: 'haigou_addDam',\r\n                subSkill: {\r\n                    addDam: {\r\n                        trigger: { source: 'damageBegin2' },\r\n                        priority: 9,\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return Evt.nature == 'ocean';\r\n                        },\r\n                        content() {\r\n                            trigger.num++;\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            lingqun: {\r\n                trigger: { player: 'phaseDiscardEnd' },\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    return Evt.cards && Evt.cards.length;\r\n                },\r\n                content() {\r\n                    Evt.num = trigger.cards.length;\r\n                    player.changeHujia(Evt.num);\r\n                },\r\n                mod: {\r\n                    maxHandcard(player, num) {\r\n                        if (player.countCards('h') > player.hp && player.hujia)\r\n                            return num + player.hujia;\r\n                    },\r\n                },\r\n                ai: {\r\n                    gainHujia: true,\r\n                    nohujia: true,\r\n                    skillTagFilter(player, tag, arg) {\r\n                        if (tag == 'nohujia')\r\n                            return player.countCards('h') > player.hp;\r\n                    },\r\n                },\r\n            },\r\n            yangliu: {\r\n                audio: 2,\r\n                trigger: { player: 'useCard1' },\r\n                filter(Evt, player) {\r\n                    return get.tag(Evt.card, 'damage') && player.hujia;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.changeHujia(-1);\r\n                    if (!trigger.addedSkill)\r\n                        trigger.addedSkill = [];\r\n                    trigger.addedSkill.add('yangliu');\r\n                    'step 1';\r\n                    var controls = ['摸一张牌', '不可响应'];\r\n                    controls.push('取消');\r\n                    player.chooseControl('dialogcontrol', controls).set('ai', function (Evt, player) {\r\n                        return _status.event.index;\r\n                    }).set('index', 0);\r\n                    'step 2';\r\n                    switch (result.control) {\r\n                        case '摸一张牌': {\r\n                            player.draw();\r\n                            break;\r\n                        }\r\n                        case '不可响应': {\r\n                            trigger.directHit.addArray(trigger.targets);\r\n                            break;\r\n                        }\r\n                    }\r\n                },\r\n                group: 'yangliu_changeNature',\r\n                subSkill: {\r\n                    changeNature: {\r\n                        trigger: { global: 'damageBegin1' },\r\n                        firstDo: true,\r\n                        forced: true,\r\n                        priority: 7,\r\n                        filter(Evt, player) {\r\n                            var evt = Evt.getParent();\r\n                            if (evt.name == '_lianhuan')\r\n                                evt = Evt.getTrigger().getParent(2);\r\n                            else\r\n                                evt = evt.getParent();\r\n                            return evt.addedSkill && evt.addedSkill.contains('yangliu');\r\n                        },\r\n                        content() {\r\n                            trigger.nature = 'ocean';\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            mochu: {\r\n                audio: 4,\r\n                trigger: { source: 'damageBegin1' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return ['ocean', 'yami'].contains(Evt.nature);\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    'step 0';\r\n                    if (trigger.nature == 'yami') {\r\n                        player.chooseBool('###' + get.prompt('mochu') + '###摸一张牌，并将伤害改为海洋属性').ai = function () {\r\n                            return 1;\r\n                        };\r\n                    }\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.draw();\r\n                        trigger.nature = 'ocean';\r\n                    }\r\n                    'step 2';\r\n                    if (trigger.nature == 'ocean') {\r\n                        player.chooseToDiscard('###' + get.prompt('mochu') + '###弃一张牌，并回复伤害值的体力').ai = function (card) {\r\n                            var player = _status.event.player;\r\n                            return (get.recoverEffect(player, player, player) > 0) ? (8 - get.value(card)) : 0;\r\n                        };\r\n                    }\r\n                    'step 3';\r\n                    if (result.bool && result.cards && result.cards.length) {\r\n                        player.recover(trigger.num);\r\n                    }\r\n                },\r\n            },\r\n            fuyue: {\r\n                audio: 3,\r\n                trigger: { global: 'useCard2' },\r\n                filter(Evt, player) {\r\n                    return get.name(Evt.card) == 'sha' && lib.linked.contains(get.nature(Evt.card)) && lib.filter.targetEnabled2({ name: 'chenmo' }, Evt.player, player);\r\n                },\r\n                usable: 1,\r\n                logTarget: 'player',\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    Evt.target = trigger.player;\r\n                    Evt.card = trigger.card;\r\n                    Evt.target.useCard({ name: 'chenmo' }, player, false);\r\n                    'step 1';\r\n                    if (result.cards && result.cards.length) {\r\n                        Evt.num = result.cards.length;\r\n                        player.chooseTarget('为' + get.translation(Evt.target) + '的' + get.translation(Evt.card) + '增加至多' +\r\n                            get.cnNumber(Evt.num) + '个目标', [1, Evt.num], function (card, player, target) {\r\n                            var player = _status.event.source;\r\n                            if (_status.event.targets.contains(target))\r\n                                return false;\r\n                            return lib.filter.targetEnabled2(_status.event.card, player, target);\r\n                        }).set('source', Evt.target).set('ai', function (target) {\r\n                            var player = _status.event.player;\r\n                            var source = _status.event.source;\r\n                            return get.effect(target, _status.event.card, source, player);\r\n                        }).set('targets', trigger.targets).set('card', Evt.card);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        Evt.targets = result.targets;\r\n                        player.logSkill('fuyue', Evt.targets);\r\n                        trigger.targets.addArray(Evt.targets);\r\n                    }\r\n                },\r\n                result: {\r\n                    player: 1,\r\n                }\r\n            },\r\n            xieqi: {\r\n                auido: 2,\r\n                hiddenCard(player, name) {\r\n                    if (!lib.skill.xieqi.filter(false, player))\r\n                        return false;\r\n                    var list = get.libCard(function (card) {\r\n                        return card.ai && card.ai.tag && card.ai.tag.huajing && card.ai.tag.huajing > 0;\r\n                    });\r\n                    for (var i = 0; i < list.length; i++) {\r\n                        if (list[i] == name)\r\n                            return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                hiddenYami(player, name) {\r\n                    if (!lib.skill.xieqi.filter(false, player))\r\n                        return false;\r\n                    return true;\r\n                },\r\n                enable: 'chooseToUse',\r\n                usable: 1,\r\n                getResult(cards) {\r\n                    let player = _status.event.player || _status.event._trigger.player;\r\n                    let l = cards.length, all = Math.pow(l, 2), list = [];\r\n                    for (let i = 1; i < all; i++) {\r\n                        let array = [];\r\n                        for (let j = 0; j < l; j++) {\r\n                            if (Math.floor((i % Math.pow(2, j + 1)) / Math.pow(2, j)) > 0)\r\n                                array.push(cards[j]);\r\n                        }\r\n                        let num = 0;\r\n                        for (let k of array) {\r\n                            num += get.number(k);\r\n                        }\r\n                        if (num > 0 && num % 7 == 0)\r\n                            list.push(array);\r\n                    }\r\n                    if (list.length) {\r\n                        list.sort(function (a, b) {\r\n                            if (a.length != b.length)\r\n                                return b.length - a.length;\r\n                            return get.value(a, player) - get.value(b, player);\r\n                        });\r\n                        return list[0];\r\n                    }\r\n                    return list;\r\n                },\r\n                filter(Evt, player) {\r\n                    let xieqi_choice = lib.skill.xieqi.getResult(player.getCards('h'));\r\n                    return xieqi_choice.length;\r\n                },\r\n                check(card) {\r\n                    let evt = _status.event;\r\n                    if (!evt.xieqi_choice)\r\n                        evt.xieqi_choice = lib.skill.xieqi.getResult(evt.player.getCards('he'), evt.player);\r\n                    if (!evt.xieqi_choice.includes(card))\r\n                        return 0;\r\n                    return 1;\r\n                },\r\n                chooseButton: {\r\n                    dialog(Evt, player) {\r\n                        var list = get.libCard(function (card) {\r\n                            return card.ai && card.ai.tag && card.ai.tag.huajing && card.ai.tag.huajing > 0;\r\n                        });\r\n                        for (let i = 0; i < list.length; i++) {\r\n                            list[i] = [get.translation(get.type2(list[i])), '', list[i]];\r\n                        }\r\n                        list.push(['基本', '', 'tao', 'ocean']);\r\n                        list.push(['基本', '', 'sha', 'ocean']);\r\n                        list.push(['基本', '', 'sha', 'yami']);\r\n                        if (list.length == 0) {\r\n                            return ui.create.dialog('未启用《化鲸篇》');\r\n                        }\r\n                        else\r\n                            return ui.create.dialog('『携七』', [list, 'vcard']);\r\n                    },\r\n                    filter(button, player) {\r\n                        return _status.event.getParent().filterCard({ name: button.link[2], nature: button.link[3] }, player, _status.event.getParent());\r\n                    },\r\n                    check(button) {\r\n                        var player = _status.event.player;\r\n                        if (player.countCards('h', button.link[2]) > 0)\r\n                            return 0;\r\n                        if (button.link[2] == 'jingluo')\r\n                            return 0;\r\n                        var effect = player.getUseValue(button.link[2]);\r\n                        if (effect > 0) {\r\n                            if (button.link[2] == 'haidi')\r\n                                return effect * 2;\r\n                            return effect;\r\n                        }\r\n                        return 0;\r\n                    },\r\n                    backup(links, player) {\r\n                        return {\r\n                            filterCard(card) {\r\n                                return true;\r\n                            },\r\n                            complexCard: true,\r\n                            selectCard() {\r\n                                var num = 0;\r\n                                for (var i = 0; i < ui.selected.cards.length; i++) {\r\n                                    num += get.number(ui.selected.cards[i]);\r\n                                }\r\n                                if (num > 0 && num % 7 == 0)\r\n                                    return [ui.selected.cards.length, ui.selected.cards.length + 1];\r\n                                return ui.selected.cards.length + 2;\r\n                            },\r\n                            popname: true,\r\n                            check(card) {\r\n                                return 7 - get.value(card);\r\n                            },\r\n                            position: 'he',\r\n                            viewAs: { name: links[0][2], nature: links[0][3] },\r\n                            onuse(result, player) {\r\n                                var _a;\r\n                                player.logSkill('xieqi');\r\n                                if (((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) == 1)\r\n                                    player.draw(result.cards.length);\r\n                            },\r\n                        };\r\n                    },\r\n                    prompt(links, player) {\r\n                        return '###『携七』###将任意张点数合计为7倍数的牌当做【' + (get.translation(links[0][3]) || '') + get.translation(links[0][2]) + '】使用';\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 6,\r\n                    result: {\r\n                        player(player) {\r\n                            var players = game.filterPlayer();\r\n                            for (var i = 0; i < players.length; i++) {\r\n                                if (players[i] != player && get.attitude(player, players[i]) > 0) {\r\n                                    return 1.5;\r\n                                }\r\n                            }\r\n                            return 1;\r\n                        }\r\n                    },\r\n                    threaten: 1.2,\r\n                },\r\n            },\r\n            youhai: {\r\n                trigger: { player: 'useCard1' },\r\n                filter(Evt, player) {\r\n                    if (player.hp == player.maxHp)\r\n                        return false;\r\n                    var sum = 0;\r\n                    if (Evt.card.cards) {\r\n                        for (var i = 0; i < Evt.card.cards.length; i++) {\r\n                            sum += get.number(Evt.card.cards[i]);\r\n                        }\r\n                    }\r\n                    else {\r\n                        sum += get.number(Evt.card);\r\n                    }\r\n                    return sum == 7;\r\n                },\r\n                lastDo: true,\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    Evt.num = player.getDamagedHp();\r\n                    Evt.targets = [];\r\n                    'step 1';\r\n                    player.chooseTarget([1, Evt.num], '###『佑海』###分配' + get.cnNumber(Evt.num) + '点护甲').set('ai', function (target) {\r\n                        var player = _status.event.player;\r\n                        if (target.hujia == 0)\r\n                            return get.attitude(player, target);\r\n                        return get.attitude(player, target) / 2;\r\n                    });\r\n                    'step 2';\r\n                    if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        Evt.targets.addArray(result.targets);\r\n                        player.line(result.targets, 'ocean');\r\n                        for (var i = 0; i < Evt.targets.length; i++) {\r\n                            Evt.targets[i].changeHujia();\r\n                        }\r\n                        ;\r\n                    }\r\n                    else {\r\n                        return false;\r\n                    }\r\n                },\r\n                ai: {\r\n                    gainHujia: true\r\n                }\r\n            },\r\n            zhuhan: {\r\n                trigger: { player: 'changeHujiaBegin' },\r\n                filter(Evt, player) {\r\n                    return Evt.num >= 0;\r\n                },\r\n                forced: true,\r\n                lastDo: true,\r\n                content() {\r\n                    trigger.num++;\r\n                },\r\n                group: 'zhuhan_gainBy',\r\n                subSkill: {\r\n                    gainBy: {\r\n                        trigger: { global: 'roundStart' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return player.hujia < player.hp;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            player.loseHp();\r\n                            'step 1';\r\n                            player.changeHujia();\r\n                        }\r\n                    },\r\n                },\r\n                ai: {\r\n                    gainHujia: true\r\n                }\r\n            },\r\n            pobing: {\r\n                trigger: { source: 'damageBegin2' },\r\n                filter(Evt, player) {\r\n                    var _a;\r\n                    return player.hujia > ((_a = Evt.player) === null || _a === void 0 ? void 0 : _a.hujia);\r\n                },\r\n                forced: true,\r\n                logTarget: 'player',\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.player;\r\n                    player.changeHujia(-player.hujia);\r\n                    'step 1';\r\n                    let num = 0;\r\n                    if (trigger.nature)\r\n                        num++;\r\n                    if (Evt.target.hp > player.hp)\r\n                        num++;\r\n                    if (Evt.target.getHistory('changeHujia').length)\r\n                        num++;\r\n                    num > 0 && (trigger.num += num);\r\n                },\r\n            },\r\n            haishou: {\r\n                audio: 3,\r\n                enable: 'chooseToUse',\r\n                filterCard(card, player) {\r\n                    return get.type(card) != 'basic';\r\n                },\r\n                selectCard: 1,\r\n                position: 'he',\r\n                viewAs: { name: 'qi' },\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('haishou_round'))\r\n                        return false;\r\n                    return player.countCards('he') > player.countCards('he', { type: 'basic' });\r\n                },\r\n                check(card) {\r\n                    var player = _status.event.player;\r\n                    if (card.name == 'qi')\r\n                        return 0;\r\n                    if (player.hp < player.maxHp)\r\n                        return 8 - get.value(card);\r\n                    return 3 - get.value(card);\r\n                },\r\n                onuse(result, player) {\r\n                    player.addTempSkill('haishou_round', 'roundStart');\r\n                },\r\n                subSkill: {\r\n                    round: {\r\n                        trigger: { source: 'damageBegin1' },\r\n                        silent: true,\r\n                        filter(Evt, player) {\r\n                            return Evt.nature;\r\n                        },\r\n                        content() {\r\n                            player.removeSkill('haishou_round');\r\n                        }\r\n                    },\r\n                },\r\n                ai: {\r\n                    gainHujia: true\r\n                }\r\n            },\r\n            lishi: {\r\n                audio: 2,\r\n                trigger: { player: 'changeHujiaEnd' },\r\n                filter(Evt, player) {\r\n                    return Evt.num < 0 && player.hujia == 0;\r\n                },\r\n                forced: true,\r\n                lastDo: true,\r\n                content() {\r\n                    player.draw();\r\n                }\r\n            },\r\n            jinchen: {\r\n                audio: 2,\r\n                trigger: { player: 'phaseUseEnd' },\r\n                lastDo: true,\r\n                check(Evt, player) {\r\n                    return get.recoverEffect(player, player, player);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.recover();\r\n                    player.turnOver();\r\n                    'step 1';\r\n                    player.chooseUseTarget({ name: 'chenmo' });\r\n                }\r\n            },\r\n            qianyong: {\r\n                audio: 2,\r\n                trigger: { player: 'turnOverBefore' },\r\n                filter(Evt, player) {\r\n                    return player.isTurnedOver();\r\n                },\r\n                locked: true,\r\n                direct: true,\r\n                lastDo: true,\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.chooseTarget('###『潜涌』###使用一张无视防具的海杀，否则摸两张牌', function (card, player, target) {\r\n                        if (player == target)\r\n                            return false;\r\n                        return player.inRange(target) && player.canUse({ name: 'sha', nature: 'ocean' }, target, false);\r\n                    }).set('ai', function (target) {\r\n                        var player = _status.event.player;\r\n                        return get.effect(target, { name: 'sha', nature: 'ocean' }, player, player);\r\n                    });\r\n                    'step 1';\r\n                    if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        player.logSkill('qianyong', result.targets);\r\n                        player.useCard({ name: 'sha', nature: 'ocean' }, result.targets, false).card.qianyong = true;\r\n                    }\r\n                    else {\r\n                        player.logSkill('qianyong_draw');\r\n                        player.draw(2);\r\n                    }\r\n                },\r\n                ai: {\r\n                    unequip: true,\r\n                    skillTagFilter(player, tag, arg) {\r\n                        if (!arg || !arg.card || arg.card.qianyong != true)\r\n                            return false;\r\n                    },\r\n                },\r\n                mod: {\r\n                    targetEnabled(card, player, target, now) {\r\n                        if (target.isTurnedOver() && (card.name == 'sha' || (get.type2(card, false) == 'trick' && get.tag(card, 'damage')))) {\r\n                            if (player != target)\r\n                                return false;\r\n                        }\r\n                    },\r\n                },\r\n                group: 'qianyong_addDam',\r\n                subSkill: {\r\n                    addDam: {\r\n                        trigger: { source: 'damageBegin2' },\r\n                        priority: 6,\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return Evt.nature == 'ocean' && player.isTurnedOver();\r\n                        },\r\n                        content() {\r\n                            trigger.num++;\r\n                        },\r\n                    },\r\n                    draw: { audio: 2 }\r\n                },\r\n            },\r\n            zhuiguang: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h') > 0;\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    if (player != target)\r\n                        return true;\r\n                },\r\n                filterCard: true,\r\n                selectCard: -1,\r\n                lose: false,\r\n                discard: false,\r\n                prepare: 'give',\r\n                content() {\r\n                    'step 0';\r\n                    game.hasPlayer(cur => {\r\n                        if (cur.hasSkill('zhuiguang_chehai') && cur.storage.zhuiguang_chehai == player)\r\n                            cur.removeSkill('zhuiguang_chehai');\r\n                    });\r\n                    'step 1';\r\n                    target.gain(cards, player);\r\n                    target.changeHujia();\r\n                    'step 2';\r\n                    target.storage.zhuiguang_chehai = player;\r\n                    target.addSkill('zhuiguang_chehai');\r\n                },\r\n                subSkill: {\r\n                    chehai: {\r\n                        mark: 'character',\r\n                        intro: {\r\n                            content: '需要保护$',\r\n                        },\r\n                        onremove: true,\r\n                        trigger: { global: ['useCardToTarget', 'dying'] },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            var ava = Evt.name == 'useCardToTarget' ? Evt.target : Evt.player;\r\n                            return player.storage.zhuiguang_chehai && ava == player.storage.zhuiguang_chehai\r\n                                && player.countCards('he') > 0 && get.type(Evt.card) != 'equip';\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            player.chooseCard('he', true, '###『追光澈海』###将一张牌交给' + get.translation(player.storage.zhuiguang_chehai)).set('ai', function (card) {\r\n                                var player = _status.event.player;\r\n                                var ava = player.storage.zhuiguang_chehai;\r\n                                return get.value(card, ava, 'raw') * get.attitude(player, ava);\r\n                            });\r\n                            'step 1';\r\n                            if (result.bool) {\r\n                                player.give(result.cards, player.storage.zhuiguang_chehai, 'giveAuto');\r\n                            }\r\n                            ;\r\n                        },\r\n                    },\r\n                },\r\n                ai: {\r\n                    order(item, player) {\r\n                        if (player.countCards('h') <= 2)\r\n                            return 6;\r\n                        return 1;\r\n                    },\r\n                    result: {\r\n                        player(player, target) {\r\n                            return -0.1;\r\n                        },\r\n                        target(player, target) {\r\n                            if (target.storage.zhuiguang_chehai == player)\r\n                                return player.countCards('h') / 3 - player.hp + 1;\r\n                            return player.countCards('h') / 3 - player.hp + target.countCards('he') / 5 - 1;\r\n                        }\r\n                    },\r\n                    threaten: 0.8,\r\n                },\r\n            },\r\n            ronglei: {\r\n                trigger: { global: \"useCardToTarget\" },\r\n                filter(Evt, player) {\r\n                    return Evt.target != player && Evt.targets.length == 1 && player.countCards('h') < player.getHandcardLimit() && get.type(Evt.card) != 'equip';\r\n                },\r\n                logTarget: 'target',\r\n                content() {\r\n                    'step 0';\r\n                    var target = trigger.target;\r\n                    Evt.target = target;\r\n                    target.judge(function (card) {\r\n                        if (get.color(card) == 'red')\r\n                            return 1;\r\n                        return 0;\r\n                    });\r\n                    'step 1';\r\n                    if (result.color) {\r\n                        if (result.color == 'red') {\r\n                            game.asyncDraw([Evt.target, player]);\r\n                        }\r\n                        else {\r\n                            trigger.getParent().targets.add(player);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            qiming: {\r\n                audio: 5,\r\n                global: 'qiming_viewH',\r\n                group: ['qiming_begin', 'qiming_saycards', 'qiming_UseBy'],\r\n                subSkill: {\r\n                    viewH: {\r\n                        ai: {\r\n                            viewHandcard: true,\r\n                            skillTagFilter(player, tag, target) {\r\n                                if (!game.hasPlayer(cur => {\r\n                                    return cur.hasSkill('qiming');\r\n                                }))\r\n                                    return false;\r\n                            },\r\n                        },\r\n                    },\r\n                    begin: {\r\n                        trigger: { global: 'roundStart' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            'step 0';\r\n                            if (player.hasMark('qiming_saycards'))\r\n                                player.unmarkSkill('qiming_saycards');\r\n                            player.storage.qiming_saycards.length = 0;\r\n                            'step 1';\r\n                            Evt.videoId = lib.status.videoId++;\r\n                            var list = [];\r\n                            for (var i = 0; i < lib.inpile.length; i++) {\r\n                                var name = lib.inpile[i];\r\n                                if (get.type(name, 'trick') == 'trick')\r\n                                    list.push(['锦囊', '', name]);\r\n                                if (get.type(name, 'trick') == 'equip')\r\n                                    list.push(['装备', '', name]);\r\n                            }\r\n                            game.broadcastAll(function (id, list) {\r\n                                var dialog = ui.create.dialog('###『启明星辰』###声明一张牌', [list, 'vcard']);\r\n                                dialog.videoId = id;\r\n                            }, Evt.videoId, list);\r\n                            'step 2';\r\n                            var next = player.chooseButton(1, true);\r\n                            next.set('dialog', Evt.videoId);\r\n                            next.set('ai', function (button) {\r\n                                var value = player.getUseValue({ name: button.link[2], isCard: true });\r\n                                if (player.hasCard({ name: button.link[2] }))\r\n                                    return 2 * value;\r\n                                return value;\r\n                            });\r\n                            'step 3';\r\n                            game.broadcastAll('closeDialog', Evt.videoId);\r\n                            if (result.bool) {\r\n                                player.logSkill('qiming');\r\n                                player.storage.qiming_saycards.add(result.links[0][2]);\r\n                                game.log(player, '的『启明星辰』声明了【', player.storage.qiming_saycards, '】');\r\n                                player.syncStorage('qiming_saycards');\r\n                                player.markSkill('qiming_saycards');\r\n                            }\r\n                        }\r\n                    },\r\n                    saycards: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = [];\r\n                        },\r\n                        locked: true,\r\n                        notemp: true,\r\n                        marktext: '明',\r\n                        intro: {\r\n                            content: '声明了$',\r\n                            name: '『启明星辰』',\r\n                        }\r\n                    },\r\n                    UseBy: {\r\n                        trigger: { global: 'useCard1' },\r\n                        priority: 999,\r\n                        forced: true,\r\n                        firstDo: true,\r\n                        filter(Evt, player) {\r\n                            return get.name(Evt.card) == player.storage.qiming_saycards;\r\n                        },\r\n                        content() {\r\n                            trigger.player.draw();\r\n                            player.recover(trigger.player);\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            shengbian: {\r\n                audio: 2,\r\n                trigger: { player: ['changeHp', 'changeHujiaEnd'] },\r\n                filter(Evt, player) {\r\n                    return player.maxHp && (player.hujia ? (player.hp + player.hujia) : player.hp) > player.maxHp;\r\n                },\r\n                lastDo: true,\r\n                forced: true,\r\n                content() {\r\n                    'step 0';\r\n                    var hp = lib.character[player.name][2];\r\n                    hp = (typeof hp == 'string') ? Number(hp.substring(0, 1)) : hp;\r\n                    Evt.num = player.hujia * (player.hp - hp);\r\n                    player.hujia = 0;\r\n                    player.hp = hp;\r\n                    player.update();\r\n                    game.log(player, '体力和护甲重置为初始状态');\r\n                    'step 1';\r\n                    player.draw(Evt.num);\r\n                },\r\n            },\r\n            tulong: {\r\n                trigger: { player: 'dyingBegin' },\r\n                filter(Evt, player) {\r\n                    return player.storage.qiming_saycards && player.storage.qiming_saycards[0] && get.info({ name: player.storage.qiming_saycards[0] }).notarget !== true && player.countCards('h') && player.hasUseTarget(player.storage.qiming_saycards[0]);\r\n                },\r\n                lastDo: true,\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    Evt.card = { name: player.storage.qiming_saycards[0] };\r\n                    var next = player.chooseCardTarget({\r\n                        prompt: get.prompt('tulong'),\r\n                        prompt2: \"将一张牌当作【\" + player.storage.qiming_saycards[0] + \"】使用\",\r\n                        filterCard(card, player) {\r\n                            return get.type(card) == 'equip' && lib.filter.cardDiscardable(card, player);\r\n                        },\r\n                        filterTarget(card, player, target) {\r\n                            return lib.filter.filterTarget(_status.event.card, player, target);\r\n                        },\r\n                    });\r\n                    next.selectTarget = lib.card[Evt.card.name].selectTarget || [1, 1];\r\n                    next.ai2 = function (target) {\r\n                        var player = _status.event.player;\r\n                        return get.effect(target, _status.event.card, player, player);\r\n                    },\r\n                        next.set('card', Evt.card);\r\n                    'step 1';\r\n                    if (result.bool && result.cards && result.targets) {\r\n                        player.logSkill('tulong');\r\n                        player.loseMaxHp();\r\n                        Evt.cards = result.cards.slice(0);\r\n                        Evt.targets = result.targets.slice(0);\r\n                        var next = player.useCard(Evt.card, Evt.targets);\r\n                        next.cards = Evt.cards;\r\n                    }\r\n                },\r\n            },\r\n            sp_guaisheng: {\r\n                audio: 5,\r\n                trigger: { global: 'damageBegin1' },\r\n                priority: -10,\r\n                init(player) {\r\n                    player.storage.sp_guaisheng = { one: false, two: false, three: false, four: false, five: false, six: false, seven: false };\r\n                },\r\n                onremove(player) {\r\n                    delete player.storage.sp_guaisheng;\r\n                },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    if (player.storage.sp_guaisheng) {\r\n                        var num = 0;\r\n                        for (var i in player.storage.sp_guaisheng) {\r\n                            if (player.storage.sp_guaisheng[i] == false)\r\n                                num++;\r\n                        }\r\n                    }\r\n                    return num >= 1 && Evt.nature == 'ocean';\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    Evt.num = 2;\r\n                    Evt.list = { one: '选项一', two: '选项二', three: '选项三', four: '选项四', five: '选项五', six: '选项六', seven: '选项七' };\r\n                    'step 1';\r\n                    for (var i in player.storage.sp_guaisheng) {\r\n                        if (player.storage.sp_guaisheng[i] == true) {\r\n                            Evt.list[i] = '';\r\n                        }\r\n                    }\r\n                    var list = [];\r\n                    for (var i in Evt.list) {\r\n                        if (Evt.list[i] != '')\r\n                            list.push(Evt.list[i]);\r\n                    }\r\n                    var choice = list.randomGet();\r\n                    var str = '『海洋怪声』：你可选择以下任意项构成未执行过的组合以执行：<br><br>';\r\n                    str += '<div class=\"popup text\" style=\"width:calc(100% - 10px);margin-top:8px;display:inline-block\">选项一：' + '令一名角色摸一张牌' + '</div>';\r\n                    str += '<div class=\"popup text\" style=\"width:calc(100% - 10px);margin-top:8px;display:inline-block\">选项二：' + '弃置来源一张牌' + '</div>';\r\n                    str += '<div class=\"popup text\" style=\"width:calc(100% - 10px);margin-top:8px;display:inline-block\">选项三：' + '将本次伤害改为冰属性' + '</div>';\r\n                    str += '<div class=\"popup text\" style=\"width:calc(100% - 10px);margin-top:8px;display:inline-block\">选项四：' + '选项一和选项二组合' + '</div>';\r\n                    str += '<div class=\"popup text\" style=\"width:calc(100% - 10px);margin-top:8px;display:inline-block\">选项五：' + '选项一和选项三组合' + '</div>';\r\n                    str += '<div class=\"popup text\" style=\"width:calc(100% - 10px);margin-top:8px;display:inline-block\">选项六：' + '选项二和选项三组合' + '</div>';\r\n                    str += '<div class=\"popup text\" style=\"width:calc(100% - 10px);margin-top:8px;display:inline-block\">选项七：' + '选项一和选项二和选项三组合' + '</div>';\r\n                    list.push('cancel2');\r\n                    player.chooseControl(list, function () {\r\n                        return _status.event.choice;\r\n                    }).set('prompt', str).set('choice', choice);\r\n                    'step 2';\r\n                    if (result.control != 'cancel2') {\r\n                        Evt.num--;\r\n                        switch (result.control) {\r\n                            case '选项一': {\r\n                                player.storage.sp_guaisheng['one'] = true;\r\n                                break;\r\n                            }\r\n                            case '选项二': {\r\n                                if (trigger.source && trigger.source.num('he'))\r\n                                    player.discardPlayerCard('he', true, trigger.source);\r\n                                player.logSkill('sp_guaisheng', trigger.source);\r\n                                player.storage.sp_guaisheng['two'] = true;\r\n                                Evt.goto(4);\r\n                                break;\r\n                            }\r\n                            case '选项三': {\r\n                                trigger.nature = 'ice';\r\n                                player.logSkill('sp_guaisheng');\r\n                                player.storage.sp_guaisheng['three'] = true;\r\n                                Evt.goto(4);\r\n                                break;\r\n                            }\r\n                            case '选项四': {\r\n                                if (trigger.source && trigger.source.num('he'))\r\n                                    player.discardPlayerCard('he', true, trigger.source);\r\n                                player.logSkill('sp_guaisheng', trigger.source);\r\n                                player.storage.sp_guaisheng['four'] = true;\r\n                                break;\r\n                            }\r\n                            case '选项五': {\r\n                                trigger.nature = 'ice';\r\n                                player.storage.sp_guaisheng['five'] = true;\r\n                                break;\r\n                            }\r\n                            case '选项六': {\r\n                                if (trigger.source && trigger.source.num('he'))\r\n                                    player.discardPlayerCard('he', true, trigger.source);\r\n                                player.logSkill('sp_guaisheng', trigger.source);\r\n                                trigger.nature = 'ice';\r\n                                player.storage.sp_guaisheng['six'] = true;\r\n                                Evt.goto(4);\r\n                                break;\r\n                            }\r\n                            case '选项七': {\r\n                                if (trigger.source && trigger.source.num('he'))\r\n                                    player.discardPlayerCard('he', true, trigger.source);\r\n                                player.logSkill('sp_guaisheng', trigger.source);\r\n                                trigger.nature = 'ice';\r\n                                player.storage.sp_guaisheng['seven'] = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 3';\r\n                    player.chooseTarget(true, '『海洋怪声』：令一名角色摸一张牌', function (card, player, target) {\r\n                        return true;\r\n                    }).set('ai', function (target) {\r\n                        var player = _status.event.player;\r\n                        return get.attitude(player, target);\r\n                    });\r\n                    'step 4';\r\n                    if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        player.logSkill('sp_guaisheng', result.targets[0]);\r\n                        result.targets[0].draw();\r\n                    }\r\n                    var uncomplete = false;\r\n                    for (var i in player.storage.sp_guaisheng) {\r\n                        if (player.storage.sp_guaisheng[i] != true) {\r\n                            uncomplete = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!uncomplete) {\r\n                        player.storage.sp_guaisheng = { one: false, two: false, three: false, four: false, five: false, six: false, seven: false };\r\n                        player.changeHujia();\r\n                    }\r\n                },\r\n                ai: {\r\n                    gainHujia: true\r\n                }\r\n            },\r\n            sp_guiliu: {\r\n                audio: 5,\r\n                trigger: { global: ['loseAfter', 'cardsDiscardAfter'] },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'cardsDiscard' && Evt.getParent().name == 'orderingDiscard' && Evt.getParent().relatedEvent.name == 'useCard')\r\n                        return false;\r\n                    if (Evt.name == 'lose' && (Evt.getParent().name == 'useCard' || Evt.position != ui.discardPile))\r\n                        return false;\r\n                    var cards = player.getCards('h');\r\n                    for (var i = 0; i < Evt.cards.length; i++) {\r\n                        if (get.position(Evt.cards[i], true) == 'd') {\r\n                            for (var j = 0; j < cards.length; j++) {\r\n                                if (get.color(Evt.cards[i]) == get.color(cards[j]))\r\n                                    return true;\r\n                            }\r\n                        }\r\n                    }\r\n                    return false;\r\n                },\r\n                check(Evt, player) {\r\n                    return true;\r\n                },\r\n                usable: 1,\r\n                content() {\r\n                    'step 0';\r\n                    Evt.cards = [], Evt.cards2 = {};\r\n                    if (trigger.cards && trigger.cards.length)\r\n                        Evt.num = trigger.cards.length;\r\n                    'step 1';\r\n                    Evt.num--;\r\n                    if (Evt.num >= 0) {\r\n                        var str = '『百川归流』：选择并展示任意张同色的牌可以将';\r\n                        str += get.translation(trigger.cards[Evt.num]);\r\n                        str += '等量复制洗入牌堆';\r\n                        player.chooseCard(true, [0, player.num('h')], function (card, player) {\r\n                            return get.color(card) == get.color(trigger.cards[Evt.num]);\r\n                        }).set('ai', function (card) {\r\n                            return 10 - get.value(card);\r\n                        }).set('prompt', str);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    if (result.cards && result.cards.length) {\r\n                        player.showCards(result.cards);\r\n                        Evt.numx = result.cards.length;\r\n                        Evt.goto(3);\r\n                    }\r\n                    else {\r\n                        if (Evt.num >= 0) {\r\n                            Evt.goto(1);\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }\r\n                    'step 3';\r\n                    var card = game.createCard(trigger.cards[Evt.num].name, trigger.cards[Evt.num].suit, trigger.cards[Evt.num].number, trigger.cards[Evt.num].nature);\r\n                    if (!Evt.cards2[Evt.numx])\r\n                        Evt.cards2[Evt.numx] = [];\r\n                    Evt.cards2[Evt.numx].push(card);\r\n                    while (Evt.numx--) {\r\n                        var card = game.createCard(trigger.cards[Evt.num].name, trigger.cards[Evt.num].suit, trigger.cards[Evt.num].number, trigger.cards[Evt.num].nature);\r\n                        for (var i = 0; i < trigger.cards[Evt.num]['classList'].length; i++) {\r\n                            if (!card.classList.contains(trigger.cards[Evt.num]['classList'][i]))\r\n                                card.classList.add(trigger.cards[Evt.num]['classList'][i]);\r\n                        }\r\n                        Evt.cards.push(card);\r\n                    }\r\n                    'step 4';\r\n                    Evt.cards.randomSort();\r\n                    for (let i = 0; i < Evt.cards.length; i++) {\r\n                        ui.cardPile.appendChild(Evt.cards[i]);\r\n                    }\r\n                    for (let i in Evt.cards2) {\r\n                        if (Evt.cards2[i].length > 1) {\r\n                            game.log(player, '将', Evt.cards2[i], '各', i, '张洗入了牌堆');\r\n                        }\r\n                        else {\r\n                            game.log(player, '将', Evt.cards2[i], i, '张洗入了牌堆');\r\n                        }\r\n                    }\r\n                    var list = ['海', '沉', '浪', '落', '涌', '漩', '涡', '没', '浮', '淹', '洪', '河', '酒', '渡', '洞'], cards = [], card = trigger.cards[Evt.num];\r\n                    if (card.classList[2] == 'ocean')\r\n                        cards.push(card);\r\n                    for (let i in list) {\r\n                        var names = get.translation(card);\r\n                        for (var k = 0; k < names.length; k++) {\r\n                            if (names[k] == list[i] && !cards.contains(card))\r\n                                cards.push(card);\r\n                        }\r\n                    }\r\n                    if (cards.length)\r\n                        player.gain(cards, 'gain2');\r\n                },\r\n            },\r\n        },\r\n        characterReplace: {\r\n            ShirakamiHaruka: ['ShirakamiHaruka', 're_ShirakamiHaruka'],\r\n        },\r\n        dynamicTranslate: {\r\n            tulong(player) {\r\n                if (player.storage.qiming_saycards && player.storage.qiming_saycards.length)\r\n                    return '你进入濒死状态时，可以扣减1点体力上限，将一张手牌当作<font color=#fcd>【' + get.translation(player.storage.qiming_saycards) + '】</font>使用。';\r\n                return '你进入濒死状态时，可以扣减1点体力上限，将一张手牌当作本轮『启明星辰』中声明的牌使用。';\r\n            },\r\n            miaoyu(player) {\r\n                let str = lib.translate.miaoyu_info;\r\n                let result = /(阳~.*?)[；。].*(阴~.*?)[；。]/g.exec(str);\r\n                let yang = result[1], yin = result[2];\r\n                if (player.storage.miaoyu === true)\r\n                    return str.replace(yang, lib.spanClass(yang, 'changetext'));\r\n                return str.replace(yin, lib.spanClass(yin, 'changetext'));\r\n            },\r\n        },\r\n        translate: {\r\n            sea_emperor: `化鲸皇`,\r\n            HOLOEN: `holoEN`,\r\n            sea_HosimiyaSio: `海·星宫汐`,\r\n            zhuhan: `筑寒`,\r\n            zhuhan_info: `锁定技 你的护甲获得量+1；轮次开始时，若你的护甲少于体力，你失去一点体力并获得等量护甲。`,\r\n            zhuhan_append: lib.figurer(`特性：叠甲`),\r\n            pobing: `破冰`,\r\n            pobing_info: `锁定技 你对护甲少于自己的角色造成伤害时，失去所有护甲，根据满足的项数，令此伤害等量增加：<br>\r\n\t\t\t伤害为属性伤害；目标体力多于你；目标在当前回合获得了护甲。`,\r\n            sea_SasakiSaku: `海·笹木咲`,\r\n            haishou: `煽动海兽`,\r\n            haishou_info: `每轮限一次，你可以将任一非基本牌当【气】使用；你造成属性伤害时，重置此技能。`,\r\n            haishoun_append: lib.figurer(`特性：叠甲`),\r\n            lishi: `幕下力士`,\r\n            lishi_info: `锁定技 你失去最后1点护甲时，摸一张牌。`,\r\n            sea_MinatoAqua: `海·湊阿夸`,\r\n            jinchen: `浸沉`,\r\n            jinchen_info: `出牌阶段结束时，你可以回复一点体力并翻面，视为使用一张【沉没】。`,\r\n            qianyong: `潜涌`,\r\n            qianyong_info: `锁定技 当你背面朝上时，你不能成为其他角色的【杀】或伤害类锦囊的目标且造成的海洋伤害+1；当你翻至正面时，可以视为使用一张无视防具的海【杀】或摸两张牌。`,\r\n            qianyong_draw: `潜涌`,\r\n            sea_Ava: `海·向晚`,\r\n            zhuiguang: `追光澈海`,\r\n            zhuiguang_info: `出牌阶段限一次，你可以将所有手牌交给一名其他角色并令其获得一点护甲，然后直到你下一次发动此技能：你每一次成为非装备牌的目标或进入濒死状态时，其需交给你一张牌。`,\r\n            zhuiguang_chehai: `追光澈海`,\r\n            zhuiguang_chehai_info: `向晚成为非装备牌的目标或进入濒死状态时，你需交给其一张牌。`,\r\n            ronglei: `眀渊融泪`,\r\n            ronglei_info: `其他角色成为非装备牌的唯一目标时，若你手牌少于上限，你可以令其进行一次判定：若为红色，你和其各摸一张牌；若为黑色，你也成为此牌的目标。`,\r\n            NagaoKei: `长尾景`,\r\n            nkfumo: `伏魔`,\r\n            nkfumo_info: `你使用牌指定其他角色为唯一目标时，你可以进行判定，若结果为黑色，将之效果改为【浪涌】。当你使用锦囊牌后，重置『忖度』。`,\r\n            chidu: `忖度`,\r\n            chidu_info: `每回合限一次，当判定牌生效前，你可以打出一张颜色与结果不同的手牌替换之。`,\r\n            NishizonoChigusa: `西园千草`,\r\n            qiti: `气嚏`,\r\n            qiti_info: `你受到属性伤害后，可以交给来源一张牌，令其交给你X张牌。（X为你已损失的体力+1）`,\r\n            miaoyu: `喵鱼`,\r\n            miaoyu_info: `转换技 阳~你不因摸牌获得牌时，可以令一名角色获得1点护甲。阴~你不因弃牌失去牌时，可以视为使用一张无距离限制的海【杀】。`,\r\n            ShirakamiHaruka: `白神遥`,\r\n            baoxiao: `豹笑`,\r\n            baoxiao_info: `锁定技 你使用海【杀】不计入次数，且每指定一名无护甲角色为目标，你摸一张牌。`,\r\n            quru: `取乳`,\r\n            quru_info: `出牌阶段，你可以将两张非基本牌当作海【杀】使用，若你因此失去了某区域的最后一张牌，你获得1点护甲；此【杀】造成伤害时，你可以失去所有护甲令伤害等量增加。`,\r\n            quru_append: lib.figurer(`特性：叠甲`),\r\n            KisaragiKoyori: `如月こより`,\r\n            shinve: `尸虐`,\r\n            shinve_info: `锁定技 你体力减少时，获得等量护甲。准备阶段，你失去所有护甲，摸等量的牌。`,\r\n            shinve_append: lib.figurer(`特性：叠甲`),\r\n            juzu: `举组`,\r\n            juzu_info: `<font color=#ed5>觉醒技</font> 手牌数多于你的角色对你造成伤害后，你增加1点体力上限并摸牌至体力上限，获得技能『海狗』。`,\r\n            haigou: `海狗`,\r\n            haigou_info: `锁定技 你造成的海洋伤害+1。手牌数多于你的角色无法响应你使用的能造成伤害的牌。`,\r\n            GawrGura: `噶呜·古拉`,\r\n            lingqun: `领群`,\r\n            lingqun_info: `锁定技 你于弃牌阶段弃牌后获得等量护甲。你的手牌数多于体力值时，你的护甲效果改为使你增加等量手牌上限。`,\r\n            lingqun_append: lib.figurer(`特性：叠甲`),\r\n            yangliu: `洋流`,\r\n            yangliu_info: `当你使用能造成伤害的牌时，可以扣减1点护甲将此伤害改为海洋属性。然后你摸一张牌；或令之不可被响应。`,\r\n            NinomaeInanis: `一伊那尔栖`,\r\n            mochu: `墨触`,\r\n            mochu_info: `你造成暗影/海洋属性伤害时，可以摸/弃一张牌，使之改为海洋属性伤害/令你回复等同伤害值的体力。`,\r\n            fuyue: `富岳`,\r\n            fuyue_info: `每回合限一次，一名角色使用属性【杀】指定目标时，你可以令其视为对你使用【沉没】，你每因此失去一张牌，便可以为此【杀】额外指定一名目标。`,\r\n            Nana7mi: `七海Nana7mi`,\r\n            Nana7mi_ab: `七海`,\r\n            xieqi: `携七`,\r\n            xieqi_info: `每回合限一次，你可以将任意张点数合计为7倍数的手牌当化鲸篇的一张牌使用，若仅指定了一名角色为目标，你摸等同于以此法失去牌数的牌。`,\r\n            youhai: `佑海`,\r\n            youhai_info: `你使用点数或点数合计为7的牌时，可以令至多X名角色各获得一点护甲。（X为你已损失的体力值）`,\r\n            youhai_append: lib.figurer(`特性：叠甲`),\r\n            sp_HisekiErio: `皇·绯赤艾利欧`,\r\n            qiming: `启明星辰`,\r\n            qiming_info: `锁定技 你在场时所有角色明置手牌。一轮开始时，你可以声明一种非基本牌，本轮内使用此牌同名牌的角色摸一张牌并令你回复1点体力。`,\r\n            shengbian: `升变征途`,\r\n            shengbian_info: `锁定技 当你的体力或护甲变化后，若你体力与护甲之和大于体力上限，你将体力和护甲重置至开始状态，然后摸X张牌。（X为你因此失去的体力与护甲之乘积）`,\r\n            tulong: `屠龙伐彼`,\r\n            tulong_info: `你进入濒死状态时，可以扣减1点体力上限，将一张手牌当作本轮『启明星辰』中声明的牌使用。`,\r\n            sp_GawrGura: `皇·噶呜·古拉`,\r\n            sp_guaisheng: `海洋怪声`,\r\n            sp_guaisheng_info: `当一名角色造成海洋伤害时，你可选择以下任意项构成未执行过的组合以执行：1.令一名角色摸一张牌；2.弃置来源一张牌；3.将本次伤害改为冰属性。然后若你执行过所有的组合，获得1点护甲，重置此技能。`,\r\n            sp_guaisheng_append: lib.figurer(`特性：叠甲`),\r\n            sp_guiliu: `百川归流`,\r\n            sp_guiliu_info: `每回合限一次，当一张牌不因使用进入弃牌堆时，你可以展示任意同色的牌，将此牌的等量复制洗入牌堆。且若此牌牌面中有“氵”，你获得之。`,\r\n        },\r\n    };\r\n});\r\n\n\n//# sourceURL=webpack:///./character/huajing.ts?")},"./character/nijisanji.ts":()=>{eval("\r\nwindow.game.import('character', function (lib, game, ui, get, ai, _status) {\r\n    let Evt;\r\n    return {\r\n        name: 'nijisanji',\r\n        connect: true,\r\n        character: {\r\n            MononobeAlice: ['female', 'nijisanji', 3, ['tinenghuifu1', 'dianmingguzhen']],\r\n            ShizukaRin: ['female', 'nijisanji', 4, ['mozhaotuji']],\r\n            IenagaMugi: ['female', 'nijisanji', 3, ['fengxue', 'yuepi', 'cangxiong']],\r\n            MitoTsukino: ['female', 'nijisanji', 3, ['mark_bingdielei', 'mark_quanxinquanyi', 'qiujinzhiling'], ['zhu']],\r\n            UshimiIchigo: ['female', 'nijisanji', 3, ['kuangbaoshuangren', 'guangsuxiabo']],\r\n            SuzukaUtako: ['female', 'nijisanji', 3, ['meici', 'danlian']],\r\n            HiguchiKaede: ['female', 'nijisanji', 4, ['mark_zhenyin']],\r\n            SisterClearie: ['female', 'nijisanji', 3, ['zhenxin', 'sczhuwei']],\r\n            SasakiSaku: ['female', 'nijisanji', 3, ['tiaolian', 'jiaku']],\r\n            SukoyaKana: ['female', 'nijisanji', 3, ['huawen', 'liaohu']],\r\n            ShirayukiTomoe: ['female', 'nijisanji', 4, ['gonggan', 'yeyu']],\r\n            Elu: ['female', 'nijisanji', 3, ['huangran', 'yinzhen', 'senhu']],\r\n            LizeHelesta: ['female', 'nijisanji', 3, ['shencha', 'helesta'], ['zhu']],\r\n            SuzuharaLulu: ['female', 'nijisanji', 5, ['zhongli', 'xinhuo', 'weizhuang']],\r\n            AmamiyaKokoro: ['female', 'nijisanji', 3, ['miaomiao', 'chengneng']],\r\n            KagamiHayato: ['male', 'nijisanji', 3, ['liebo', 'zhongjizhimeng']],\r\n            YagamiKaruta: ['female', 'nijisanji', 3, ['suisi', 'liefeng']],\r\n            YukishiroMahiro: ['female', 'nijisanji', 3, ['jiaoming', 'changhe']],\r\n            OnomachiHaruka: ['female', 'nijisanji', 3, ['nvjiangrouhao', 'yinlaiyaotang']],\r\n            SakuraRitsuki: ['female', 'nijisanji', 3, ['zhuqiao']],\r\n            KenmochiDouya: ['male', 'nijisanji', 4, ['shenglang', 'nodao']],\r\n            FushimiGaku: ['male', 'nijisanji', 4, ['exi', 'suisui']],\r\n            Naraka: ['female', 'nijisanji', 3, ['echi', 'mudu'],],\r\n        },\r\n        characterSort: {\r\n            nijisanji: {\r\n                nijisanji_1: ['MitoTsukino', 'HiguchiKaede', 'ShizukaRin', 'Elu'],\r\n                nijisanji_2: ['SuzukaUtako', 'UshimiIchigo', 'IenagaMugi', 'MononobeAlice', 'KenmochiDouya'],\r\n            }\r\n        },\r\n        characterIntro: {\r\n            MononobeAlice: '物述有栖者，雷电掌控者也，寄以jk身份隐藏之，然尝小嘴通电，小兔子皆知爱丽丝非凡人，喜红茶，尤善奥术魔刃，为北方氏族youtube恶之，V始十八年，举家迁徙bilibili，V始二十年，月之美兔揭竿而起，爱丽丝毁家纾难，以家助美兔建国，拜一字并肩王。',\r\n            HiguchiKaede: '樋口枫者，关西之游侠也，姿色天然占尽风流，善以琴杀人，来去翩翩，有宾客枫组三千，V始二十年，月之美兔兴于西北，自封委员长、上将军，建国曰彩虹，枫率宾客从之，枫尝与杏之福禄将军萝卜子交好，惺惺相惜，成V界之佳话。',\r\n            ShizukaRin: '静凛者，皇族也，因父败于樱巫女被贬为庶人，遂恨朝廷，先随绊爱征战，绊爱初建国，不慕名利，往杏国扶之，先取天水后取临沂，成杏国之伟业，元昭欲拜之国师，又避之，尝与美兔弈棋，战百余合，喜曰：美兔知我矣！遂安于彩虹。',\r\n            IenagaMugi: '家长麦者，诸国之辩士也，善言辞，三言便使otaku气坠于马下，吐血斗升，Mugi嗜乐如命，与当世之乐圣交好，互为知音。英语上手，身负苦难，为父母厌恶之人，麦自V始年间便游于天下，为救美兔取祸于朝廷，流亡海外，有《辩书》广为人知。',\r\n            MitoTsukino: '彩虹社的红龙、英才教育者，虹社的统领者、lonely eater、全人类之委员长、脑控宗师、月之小丑、双生暗影、行为艺术家、至高魔主、怒涛聚集、海洋王者、永不沉寂者、彩虹社永远滴真神，月之美兔是也。',\r\n            UshimiIchigo: \"宇志海莓者，深海之海兔也，修炼千年化形为人，海莓原自起于海滨，拥者不计其数，性狂暴，曾以一人顶勒夫千军，V始二十年，美兔兴，海莓从之，首封平西候，海莓嗜睡，时到即宕机，美兔遣御前侍卫日夜守之。\",\r\n            SuzukaUtako: '腐烂的贞德、历战的尸套龙、饥饿的恐暴龙、攻击性的母性、古老的腐女、每秒都在渗出黑历史的女人、801战争的英灵、腐女子的末路、从温暖的图片中看出阴暗的女人、背景是正太自助餐、深网的魔物、过滤未成年直播者、彩虹社诞生出的怪物、DeathZone、唯一让DD害怕的大姐姐、国际问题、邪神美兔崇拜者、十年后的月之美兔、属性商店、神造兵器、有行动力的变态、出口即是真言、行走的HiAce、酒淋浴、母性的墓场、假面具即将掉落的铃鹿诗子。',\r\n            SisterClearie: '“今日也愿神加护于你……”',\r\n        },\r\n        skill: {\r\n            tinenghuifu1: {\r\n                audio: true,\r\n                trigger: { player: 'loseAfter' },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return Evt.es && Evt.es.length > 0;\r\n                },\r\n                content() {\r\n                    \"step 0\";\r\n                    Evt.count = trigger.es.length;\r\n                    \"step 1\";\r\n                    Evt.count--;\r\n                    player.recover();\r\n                    \"step 2\";\r\n                    if (Evt.count > 0) {\r\n                        Evt.goto(1);\r\n                    }\r\n                },\r\n                group: ['tinenghuifu1_hp'],\r\n                subSkill: {\r\n                    hp: {\r\n                        trigger: { player: 'changeHp' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return Evt.num < 0 && player.isDamaged();\r\n                        },\r\n                        content() {\r\n                            player.draw(1);\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    maixie: true,\r\n                    maixie_hp: true\r\n                }\r\n            },\r\n            dianmingguzhen: {\r\n                audio: 2,\r\n                enable: \"phaseUse\",\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.canMoveCard(null, true);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.loseHp(1);\r\n                    'step 1';\r\n                    var next = player.moveCard(true).set('nojudge', true);\r\n                    next.set('ai', function (target) {\r\n                        var player = _status.event.player;\r\n                        var att = get.attitude(player, target);\r\n                        var sgnatt = get.sgn(att);\r\n                        if (ui.selected.targets.length == 0) {\r\n                            if (target == player) {\r\n                                var es = player.getCards('e');\r\n                                for (var i = 0; i < es.length; i++) {\r\n                                    var effect = 0;\r\n                                    game.filterPlayer(cur => {\r\n                                        if (cur.isEmpty(get.subtype(es[i])))\r\n                                            effect++;\r\n                                    });\r\n                                    return 3 * effect;\r\n                                }\r\n                            }\r\n                            if (att > 0) {\r\n                                if (target.countCards('e', card => {\r\n                                    return get.value(card, target) < 0\r\n                                        && game.hasPlayer(cur => cur != player && cur != target && get.attitude(player, cur) < 0 && cur.isEmpty(get.subtype(card)));\r\n                                }) > 0)\r\n                                    return 9;\r\n                            }\r\n                            else if (att < 0) {\r\n                                if (game.hasPlayer(cur => {\r\n                                    if (cur != target && cur != player && get.attitude(player, cur) > 0) {\r\n                                        var es = target.getCards('e');\r\n                                        for (var i = 0; i < es.length; i++) {\r\n                                            if (get.value(es[i], target) > 0 && cur.isEmpty(get.subtype(es[i])) && get.value(es[i], cur) > 0)\r\n                                                return true;\r\n                                        }\r\n                                    }\r\n                                })) {\r\n                                    return -att;\r\n                                }\r\n                            }\r\n                            return 0;\r\n                        }\r\n                        var es = ui.selected.targets[0].getCards('e');\r\n                        var att2 = get.sgn(get.attitude(player, ui.selected.targets[0]));\r\n                        for (let i = 0; i < es.length; i++) {\r\n                            if (ui.selected.targets[0] == player && target.isEmpty(get.subtype(es[i]))) {\r\n                                var effect = 0;\r\n                                game.filterPlayer(cur => {\r\n                                    if (cur.isEmpty(get.subtype(es[i])) && cur != target)\r\n                                        effect += get.effect(cur, { name: 'sha' }, player, player);\r\n                                });\r\n                                return 2 * (effect + att);\r\n                            }\r\n                            if (sgnatt != 0 && att2 != 0 &&\r\n                                get.sgn(get.value(es[i], ui.selected.targets[0])) == -att2 &&\r\n                                get.sgn(get.value(es[i], target)) == sgnatt &&\r\n                                target.isEmpty(get.subtype(es[i]))) {\r\n                                return Math.abs(att);\r\n                            }\r\n                        }\r\n                        return -att * get.attitude(player, ui.selected.targets[0]);\r\n                    });\r\n                    next.set('forced', true);\r\n                    'step 2';\r\n                    if (result.targets[0] != player) {\r\n                        Evt.finish();\r\n                    }\r\n                    else {\r\n                        Evt.equiptype = get.subtype(result.card);\r\n                        Evt.players = game.filterPlayer(cur => cur != player && !cur.getEquip(Evt.equiptype)).sortBySeat(player);\r\n                        if (Evt.judgeGroup == null)\r\n                            Evt.judgeGroup = [];\r\n                    }\r\n                    'step 3';\r\n                    if (Evt.playersIndex == null) {\r\n                        Evt.playersIndex = 0;\r\n                    }\r\n                    if (Evt.playersIndex < Evt.players.length) {\r\n                        if (!Evt.players[Evt.playersIndex].getEquip(Evt.equiptype)) {\r\n                            player.useCard({ name: 'sha', nature: 'thunder', isCard: true }, Evt.players[Evt.playersIndex], false);\r\n                        }\r\n                    }\r\n                    'step 4';\r\n                    if (!result.bool) {\r\n                        Evt.judgeGroup.add(Evt.players[Evt.playersIndex]);\r\n                    }\r\n                    if (Evt.players[++Evt.playersIndex])\r\n                        Evt.goto(3);\r\n                    'step 5';\r\n                    if (Evt.judgeGroup.length > 0) {\r\n                        var shanString = '<br>';\r\n                        for (let i = 0; i < Evt.judgeGroup.length; i++) {\r\n                            shanString += (get.translation(Evt.judgeGroup[i]) + ',');\r\n                        }\r\n                        var check = 0;\r\n                        for (let i of Evt.judgeGroup) {\r\n                            check += lib.card.shandian.ai.result.target(player, i);\r\n                        }\r\n                        player.chooseBool('是否对所有闪避者追加闪电判定？' + shanString).set('check', check).ai = function () {\r\n                            return _status.event.check > 0;\r\n                        };\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 6';\r\n                    if (!result.bool) {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 7';\r\n                    Evt.judgeGroup[0].judge(card => {\r\n                        if (get.suit(card) == 'spade' && (get.number(card) >= 2 && get.number(card) <= 9))\r\n                            return 2;\r\n                    }).callback = function () {\r\n                        var number = Evt.judgeResult.number;\r\n                        if (Evt.judgeResult.suit == 'spade' && (number >= 2 && number <= 9)) {\r\n                            player.damage(3, 'thunder', 'nosource');\r\n                        }\r\n                    };\r\n                    'step 8';\r\n                    game.delay();\r\n                    Evt.judgeGroup.shift();\r\n                    if (Evt.judgeGroup.length > 0)\r\n                        Evt.goto(7);\r\n                },\r\n                ai: {\r\n                    useSha: 2,\r\n                    order: 7,\r\n                    result: {\r\n                        player(player, target) {\r\n                            if (player.hp != 1)\r\n                                return 1;\r\n                            else\r\n                                return -2;\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            mozhaotuji: {\r\n                group: ['mozhaotuji_DrawOrStop', 'mozhaotuji_useCard', 'mozhaotuji_change'],\r\n                subSkill: {\r\n                    DrawOrStop: {\r\n                        audio: true,\r\n                        audioname: ['jike'],\r\n                        trigger: { global: ['phaseZhunbeiEnd', 'phaseJudgeEnd', 'phaseDrawEnd', 'phaseUseEnd', 'phaseDiscardEnd', 'phaseJieshuEnd'] },\r\n                        filter(Evt, player) {\r\n                            if ((player.storage.mozhaotuji_useCard) >= 1)\r\n                                return true;\r\n                            else if ((player.storage.mozhaotuji_useCard) == 0)\r\n                                return player == _status.currentPhase;\r\n                            else\r\n                                return false;\r\n                        },\r\n                        priority: 14,\r\n                        direct: true,\r\n                        content() {\r\n                            'step 0';\r\n                            if ((player.storage.mozhaotuji_useCard) >= 2) {\r\n                                player.logSkill('mozhaotuji');\r\n                                player.draw(1);\r\n                            }\r\n                            else if (trigger.name == 'phaseUse')\r\n                                player.addTempSkill('mozhaotujiStop');\r\n                            'step 1';\r\n                            player.storage.mozhaotuji_useCard = 0;\r\n                        },\r\n                    },\r\n                    useCard: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = 0;\r\n                        },\r\n                        trigger: { player: 'useCardAfter' },\r\n                        direct: true,\r\n                        silent: true,\r\n                        priority: 1,\r\n                        content() {\r\n                            player.storage.mozhaotuji_useCard++;\r\n                        },\r\n                    },\r\n                    change: {\r\n                        audio: 'mozhaotuji',\r\n                        trigger: {\r\n                            player: ['phaseZhunbeiBegin', 'phaseJudgeBefore', 'phaseDrawBefore', 'phaseDiscardBefore', 'phaseJieshuBegin']\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return !player.hasSkill('mozhaotujiStop');\r\n                        },\r\n                        check(Evt, player) {\r\n                            return Evt.name === 'phaseJudge' && player.countCards('j') > 1\r\n                                || Evt.name === 'phaseDiscard';\r\n                        },\r\n                        prompt() {\r\n                            return '把准备阶段转换为出牌阶段';\r\n                        },\r\n                        content: [function () {\r\n                                trigger.cancel();\r\n                            }, function () {\r\n                                player.phaseUse();\r\n                            }, function () {\r\n                                let stat = player.getStat();\r\n                                stat.card = {};\r\n                                for (let i in stat.skill) {\r\n                                    let bool = false;\r\n                                    let info = lib.skill[i];\r\n                                    if (info.enable != undefined) {\r\n                                        if (typeof info.enable == 'string' && info.enable == 'phaseUse')\r\n                                            bool = true;\r\n                                        else if (typeof info.enable == 'object' && info.enable.contains('phaseUse'))\r\n                                            bool = true;\r\n                                    }\r\n                                    if (bool)\r\n                                        stat.skill[i] = 0;\r\n                                }\r\n                            }],\r\n                    },\r\n                }\r\n            },\r\n            mozhaotujiStart: {\r\n                trigger: {\r\n                    player: ['phaseJudgeEnd', 'phaseDrawEnd', 'phaseDiscardEnd']\r\n                },\r\n                priority: 15,\r\n                direct: true,\r\n                silent: true,\r\n                filter(Evt, player) {\r\n                    if ((player.storage.mozhaotuji_useCard) == 0)\r\n                        return true;\r\n                    else\r\n                        return !player.hasSkill('mozhaotujiStop');\r\n                },\r\n                content() {\r\n                    player.addTempSkill('mozhaotujiStop');\r\n                }\r\n            },\r\n            mozhaotujiStop: {},\r\n            fengxue: {\r\n                trigger: {\r\n                    player: 'phaseUseBefore'\r\n                },\r\n                check(Evt, player) {\r\n                    return !player.needsToDiscard() || (player.hp >= 1 && player.countCards('h') <= 3 && player.countCards('e') >= 1);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    trigger.cancel();\r\n                    'step 1';\r\n                    ui.clear();\r\n                    var num = game.countPlayer(cur => cur != player && cur.hp >= player.hp) + 1;\r\n                    var cards = get.cards(num);\r\n                    Evt.cards = cards;\r\n                    Evt.gains = [];\r\n                    Evt.discards = [];\r\n                    game.cardsGotoOrdering(cards).relatedEvent = Evt.getParent();\r\n                    var dialog = ui.create.dialog('奋学(使用一张牌)', cards, true);\r\n                    _status.dieClose.push(dialog);\r\n                    dialog.videoId = lib.status.videoId++;\r\n                    game.addVideo('cardDialog', null, ['奋学', get.cardsInfo(cards), dialog.videoId]);\r\n                    Evt.getParent().preResult = dialog.videoId;\r\n                    game.broadcast(function (cards, id) {\r\n                        var dialog = ui.create.dialog('奋学', cards, true);\r\n                        _status.dieClose.push(dialog);\r\n                        dialog.videoId = id;\r\n                    }, cards, dialog.videoId);\r\n                    Evt.dialog = dialog;\r\n                    game.log(player, '亮出了', '#y牌堆顶的牌');\r\n                    var chooseButton = player.chooseButton(true).set('dialog', dialog.videoId).set('filterButton', function (button) {\r\n                        let player = _status.event.player;\r\n                        return player.hasUseTarget(button.link);\r\n                    }).set('ai', function (button) {\r\n                        return get.value(button.link, _status.event.player);\r\n                    });\r\n                    Evt.chooseButton = chooseButton;\r\n                    'step 2';\r\n                    if (!result.links[0]) {\r\n                        ui.clear();\r\n                        Evt.finish();\r\n                    }\r\n                    else {\r\n                        if (player.hasUseTarget(result.links[0])) {\r\n                            player.chooseUseTarget(result.links[0], true, false);\r\n                        }\r\n                        else\r\n                            Evt.discards.push(result.links[0]);\r\n                        Evt.cards.remove(result.links[0]);\r\n                    }\r\n                    'step 3';\r\n                    ui.clear();\r\n                    'step 4';\r\n                    Evt.dialog.close();\r\n                    _status.dieClose.remove(Evt.dialog);\r\n                    game.broadcast(function (id) {\r\n                        var dialog = get.idDialog(id);\r\n                        if (dialog) {\r\n                            dialog.close();\r\n                            _status.dieClose.remove(dialog);\r\n                        }\r\n                    }, Evt.dialog.videoId);\r\n                    if (Evt.cards.length == 0) {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 5';\r\n                    game.cardsGotoOrdering(cards).relatedEvent = Evt.getParent();\r\n                    var dialog = ui.create.dialog('奋学(获取一种花色牌)', cards, true);\r\n                    _status.dieClose.push(dialog);\r\n                    dialog.videoId = lib.status.videoId++;\r\n                    game.addVideo('cardDialog', null, ['奋学(获取一种花色牌)', get.cardsInfo(cards), dialog.videoId]);\r\n                    Evt.getParent().preResult = dialog.videoId;\r\n                    game.broadcast(function (cards, id) {\r\n                        var dialog = ui.create.dialog('奋学(获取一种花色牌)', cards, true);\r\n                        _status.dieClose.push(dialog);\r\n                        dialog.videoId = id;\r\n                    }, cards, dialog.videoId);\r\n                    Evt.dialog = dialog;\r\n                    var chooseButton = player.chooseButton(true).set('dialog', dialog.videoId).set('ai', function (button) {\r\n                        return get.value(button.link, _status.event.player);\r\n                    });\r\n                    Evt.chooseButton = chooseButton;\r\n                    'step 6';\r\n                    if (result.links[0]) {\r\n                        game.log(player, '选择了', get.translation(get.suit(result.links[0]) + '2'));\r\n                        Evt.cards.forEach(card => {\r\n                            if (get.suit(card) == get.suit(result.links[0])) {\r\n                                Evt.gains.push(card);\r\n                            }\r\n                            else {\r\n                                Evt.discards.push(card);\r\n                            }\r\n                        });\r\n                    }\r\n                    if (Evt.discards.length) {\r\n                        player.$throw(Evt.discards);\r\n                        game.cardsDiscard(Evt.discards);\r\n                    }\r\n                    if (Evt.gains.length) {\r\n                        player.gain(Evt.gains, 'gain2');\r\n                    }\r\n                    'step 7';\r\n                    Evt.dialog.close();\r\n                    _status.dieClose.remove(Evt.dialog);\r\n                    game.broadcast(function (id) {\r\n                        var dialog = get.idDialog(id);\r\n                        if (dialog) {\r\n                            dialog.close();\r\n                            _status.dieClose.remove(dialog);\r\n                        }\r\n                    }, Evt.dialog.videoId);\r\n                },\r\n                ai: {\r\n                    result: {\r\n                        player(player) {\r\n                            if (player.hp < 2)\r\n                                return -2;\r\n                            if (player.countCards('e') >= 2)\r\n                                return 1;\r\n                            return -2;\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            yuepi: {\r\n                trigger: {\r\n                    player: 'phaseDiscardBefore',\r\n                },\r\n                filter(Evt, player) {\r\n                    return (player.countCards('h') >= player.countCards('e')) && player.countCards('e') > 0;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseCard('h', player.countCards('e'), true, '请选择重铸的牌');\r\n                    'step 1';\r\n                    player.lose(result.cards, ui.discardPile);\r\n                    player.$throw(result.cards, 1000);\r\n                    game.log(player, '将', cards, '置入了弃牌堆');\r\n                    'step 2';\r\n                    player.draw(player.countCards('e'));\r\n                    player.addTempSkill('yuepi_handLimit');\r\n                },\r\n                subSkill: {\r\n                    handLimit: {\r\n                        mod: {\r\n                            maxHandcard(player, num) {\r\n                                return num + player.countCards('e');\r\n                            },\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            cangxiong: {\r\n                trigger: {\r\n                    global: 'changeHp'\r\n                },\r\n                filter(Evt, player) {\r\n                    if (!Evt.player || Evt.player == player || player.countCards('h') == 0)\r\n                        return false;\r\n                    return Evt.player.hp == 1;\r\n                },\r\n                check(Evt, player) {\r\n                    var att = get.attitude(player, Evt.player);\r\n                    return (att > 0 && Evt.player != _status.currentPhase) || (att < 0 && Evt.player == _status.currentPhase && (Evt.player.countCards('h') - player.countCards('h')) <= 1);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseCard('h', [1, Infinity], true, '请选择要给对方的牌').set('ai', card => {\r\n                        var target = _status.event.getTrigger().player;\r\n                        console.log(target);\r\n                        if ((target.countCards('h') + ui.selected.cards.length) > (player.countCards('h') - ui.selected.cards.length))\r\n                            return -1;\r\n                        return 7 - get.value(card);\r\n                    });\r\n                    'step 1';\r\n                    if (result.cards) {\r\n                        trigger.player.gain(result.cards, player, 'giveAuto');\r\n                    }\r\n                    'step 2';\r\n                    if (trigger.player.countCards('h') > player.countCards('h')) {\r\n                        if (player.storage.outPlayers == null) {\r\n                            player.storage.outPlayers = [];\r\n                        }\r\n                        player.storage.outPlayers.push(trigger.player);\r\n                        trigger.player.addTempSkill('cangxiong_diao', 'none');\r\n                        game.broadcastAll(function (splayer) {\r\n                            splayer.out('cangxiong_diao');\r\n                        }, trigger.player);\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    diao: {\r\n                        trigger: { global: ['phaseAfter', 'turnOverAfter'] },\r\n                        mark: true,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            if (Evt.player.next !== player) {\r\n                                return false;\r\n                            }\r\n                            else if (Evt.name == 'turnOver' && Evt.player.isTurnedOver()) {\r\n                                return false;\r\n                            }\r\n                            else if (Evt.name == 'turnOver' && Evt.player != _status.currentPhase) {\r\n                                return false;\r\n                            }\r\n                            else {\r\n                                game.broadcastAll(function (splayer) {\r\n                                    splayer.in('cangxiong_diao');\r\n                                }, player);\r\n                            }\r\n                            return true;\r\n                        },\r\n                        intro: {\r\n                            content: '移除游戏外'\r\n                        },\r\n                        content() {\r\n                            game.broadcastAll(function (splayer) {\r\n                                _status.dying.remove(splayer);\r\n                            }, player);\r\n                            player.removeSkill('cangxiong_diao');\r\n                        }\r\n                    },\r\n                },\r\n                ai: {\r\n                    basic: {\r\n                        order: 10\r\n                    },\r\n                    result: {\r\n                        target(player, target) {\r\n                            return get.attitude(player, target);\r\n                        },\r\n                    },\r\n                    threaten: 1.3\r\n                }\r\n            },\r\n            mark_bingdielei: {\r\n                audio: 'bingdielei',\r\n                group: 'mark_bingdielei_damageBy',\r\n                subSkill: {\r\n                    damageBy: {\r\n                        trigger: { player: 'damageBegin4', source: 'damageBegin4' },\r\n                        priority: 99,\r\n                        filter(Evt, player) {\r\n                            return Evt.num && !Evt.getParent('phase').skill;\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            \"step 0\";\r\n                            if (trigger.delay == false)\r\n                                game.delay();\r\n                            \"step 1\";\r\n                            player.addTempSkill('mark_bingdielei_anotherPhase');\r\n                        },\r\n                    },\r\n                    anotherPhase: {\r\n                        audio: 'bingdielei',\r\n                        trigger: { global: 'phaseEnd' },\r\n                        marktext: '并',\r\n                        mark: true,\r\n                        filter(Evt, player) {\r\n                            return player.countDiscardableCards(player, 'he', { suit: 'club' }) || player.countCards('he', { type: 'equip' });\r\n                        },\r\n                        intro: {\r\n                            content: '当前回合结束后可以获得一个额外回合',\r\n                            name: '并蒂恶蕾',\r\n                        },\r\n                        direct: true,\r\n                        popup: false,\r\n                        content() {\r\n                            'step 0';\r\n                            player.chooseToDiscard('###是否发动『并蒂恶蕾』？###弃置一张♣或装备牌以获得一个额外回合', 'he', card => {\r\n                                return get.suit(card) == 'club' || get.type(card) == 'equip';\r\n                            });\r\n                            'step 1';\r\n                            if (result.bool) {\r\n                                player.unmarkSkill(Evt.name);\r\n                                player.logSkill(Evt.name);\r\n                                player.insertPhase();\r\n                            }\r\n                        },\r\n                    },\r\n                },\r\n                ai: {\r\n                    maixie: true,\r\n                },\r\n            },\r\n            mark_quanxinquanyi: {\r\n                audio: 'quanxinquanyi',\r\n                init(player, skill) {\r\n                    player.storage[skill] = [];\r\n                },\r\n                group: ['mark_quanxinquanyi_begin', 'mark_quanxinquanyi_saycards', 'mark_quanxinquanyi_loseBy', 'mark_quanxinquanyi_endRound'],\r\n                subSkill: {\r\n                    begin: {\r\n                        trigger: { global: 'roundStart' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            'step 0';\r\n                            if (player.hasMark('mark_quanxinquanyi_saycards'))\r\n                                player.unmarkSkill('mark_quanxinquanyi_saycards');\r\n                            if (!player.storage.mark_quanxinquanyi_loseBy)\r\n                                player.storage.mark_quanxinquanyi_loseBy = true;\r\n                            player.storage.mark_quanxinquanyi_saycards.length = 0;\r\n                            var list = [];\r\n                            for (var i = 0; i < lib.inpile.length; i++) {\r\n                                var name = lib.inpile[i];\r\n                                var reapeat = 0;\r\n                                if (player.storage.mark_quanxinquanyi.length) {\r\n                                    player.storage.mark_quanxinquanyi.forEach(function (his) {\r\n                                        if (his == name)\r\n                                            reapeat++;\r\n                                    });\r\n                                }\r\n                                if (reapeat || name == 'wuxie' || name == 'jinchan')\r\n                                    continue;\r\n                                else if (get.type(name) == 'trick')\r\n                                    list.push(['锦囊', '', name]);\r\n                            }\r\n                            if (!list.length)\r\n                                Evt.finish();\r\n                            else\r\n                                Evt.list = list;\r\n                            'step 1';\r\n                            player.chooseBool('###是否发动『全新全异』？###一轮开始时，你可以声明一张未声明过的通常锦囊牌。本轮结束时，若本轮没有声明牌进入弃牌堆，你可以将一张牌当本轮声明牌使用。');\r\n                            'step 2';\r\n                            if (result.bool) {\r\n                                player.logSkill('mark_quanxinquanyi');\r\n                                Evt.videoId = lib.status.videoId++;\r\n                                let list = Evt.list;\r\n                                game.broadcastAll(function (id, list) {\r\n                                    var dialog = ui.create.dialog('声明一张牌', [list, 'vcard']);\r\n                                    dialog.videoId = id;\r\n                                }, Evt.videoId, list);\r\n                            }\r\n                            else {\r\n                                Evt.finish();\r\n                            }\r\n                            'step 3';\r\n                            var next = player.chooseButton(1, true);\r\n                            next.set('dialog', Evt.videoId);\r\n                            next.set('ai', function (button) {\r\n                                var card = { name: button.link[2] };\r\n                                var value = get.value(card);\r\n                                return value;\r\n                            });\r\n                            'step 4';\r\n                            game.broadcastAll('closeDialog', Evt.videoId);\r\n                            if (result.bool) {\r\n                                player.storage.mark_quanxinquanyi_saycards.add(result.links[0][2]);\r\n                                player.storage.mark_quanxinquanyi.add(result.links[0][2]);\r\n                                game.log(player, '的『全新全异』声明了【', player.storage.mark_quanxinquanyi_saycards, '】');\r\n                                player.syncStorage('mark_quanxinquanyi_saycards');\r\n                                player.markSkill('mark_quanxinquanyi_saycards');\r\n                            }\r\n                        }\r\n                    },\r\n                    saycards: {\r\n                        init(player, skill) {\r\n                            if (!player.storage.mark_quanxinquanyi_saycards) {\r\n                                player.storage.mark_quanxinquanyi_saycards = [];\r\n                            }\r\n                        },\r\n                        locked: true,\r\n                        notemp: true,\r\n                        marktext: '异',\r\n                        intro: {\r\n                            content(storage, player) {\r\n                                if (player.storage.mark_quanxinquanyi_loseBy)\r\n                                    return '声明了【' + get.translation(player.storage.mark_quanxinquanyi_saycards) + '】';\r\n                                else\r\n                                    return '声明了【' + get.translation(player.storage.mark_quanxinquanyi_saycards) + '】,当前轮次已有同名牌进入弃牌堆';\r\n                            },\r\n                            name: '『全新全异』',\r\n                        }\r\n                    },\r\n                    loseBy: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill]) {\r\n                                player.storage[skill] = true;\r\n                            }\r\n                        },\r\n                        trigger: { global: 'phaseEnd' },\r\n                        priority: 999,\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            if (player.hasZhuSkill('qiujinzhiling') && Evt.player != player && Evt.player.group == player.group)\r\n                                return false;\r\n                            return game.getGlobalHistory('cardMove', evt => {\r\n                                if (evt.name == 'cardsDiscard' || (evt.name == 'lose' && evt.position == ui.discardPile)) {\r\n                                    var num = 0;\r\n                                    evt.cards.forEach(card => {\r\n                                        if (get.name(card) == player.storage.mark_quanxinquanyi_saycards[0])\r\n                                            num++;\r\n                                    });\r\n                                    return num;\r\n                                }\r\n                            }).length;\r\n                        },\r\n                        content() {\r\n                            player.storage.mark_quanxinquanyi_loseBy = false;\r\n                            player.markSkill('mark_quanxinquanyi_saycards');\r\n                        }\r\n                    },\r\n                    endRound: {\r\n                        trigger: { global: 'roundEnd' },\r\n                        priority: 999,\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            return player.storage.mark_quanxinquanyi_saycards.length && player.storage.mark_quanxinquanyi_loseBy;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            if (!player.hasUseTarget({ name: player.storage.mark_quanxinquanyi_saycards })) {\r\n                                Evt.finish();\r\n                            }\r\n                            'step 1';\r\n                            player.chooseCard('###『全新全异』##是否将一张牌当作声明牌使用？', 1);\r\n                            'step 2';\r\n                            if (result.bool) {\r\n                                player.logSkill('mark_quanxinquanyi_endRound');\r\n                                player.chooseUseTarget(result.cards, { name: player.storage.mark_quanxinquanyi_saycards }, true, false);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            mark2_bingdielei: {\r\n                group: 'mark2_bingdielei_damageBy',\r\n                subSkill: {\r\n                    damageBy: {\r\n                        trigger: { player: 'damageBegin4', global: 'dying' },\r\n                        priority: 99,\r\n                        filter(Evt, player) {\r\n                            if (Evt.getParent('phase').skill)\r\n                                return false;\r\n                            if (Evt.name == 'damage' && player == Evt.player)\r\n                                return true;\r\n                            return Evt.getParent() && Evt.getParent().source == player;\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            \"step 0\";\r\n                            if (trigger.delay == false)\r\n                                game.delay();\r\n                            \"step 1\";\r\n                            player.markSkill(Evt.name);\r\n                            player.logSkill(Evt.name);\r\n                            player.addTempSkill('mark2_bingdielei_anotherPhase');\r\n                        },\r\n                    },\r\n                    anotherPhase: {\r\n                        trigger: { global: 'phaseEnd' },\r\n                        marktext: '并',\r\n                        mark: true,\r\n                        silent: true,\r\n                        forced: true,\r\n                        intro: {\r\n                            content: '当前回合结束后获得一个额外回合',\r\n                            name: '并蒂恶蕾',\r\n                        },\r\n                        content() {\r\n                            player.markSkill(Evt.name);\r\n                            game.delayx();\r\n                            player.logSkill(Evt.name);\r\n                            player.insertPhase();\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            quanxinquanyi: {\r\n                group: ['quanxinquanyi_begin', 'quanxinquanyi_playerLosecard'],\r\n                subSkill: {\r\n                    begin: {\r\n                        trigger: { global: 'roundStart' },\r\n                        filter(Evt, player) {\r\n                            if (player.countCards('h') < 1)\r\n                                return false;\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            delete player.storage.quanxinquanyi_saycards;\r\n                            var maxCard = player.getDamagedHp();\r\n                            if (maxCard == 0)\r\n                                maxCard = 1;\r\n                            player.chooseCard('h', '选择要展示的手牌', [1, maxCard], true);\r\n                            'step 1';\r\n                            player.showCards(result.cards);\r\n                            Evt.showCards = result.cards;\r\n                            player.addSkill('quanxinquanyi_showcards');\r\n                            player.addSkill('quanxinquanyi_losecard', 'roundStart');\r\n                            player.addTempSkill('quanxinquanyi_discard', 'roundStart');\r\n                            player.addSkill('quanxinquanyi_end', 'roundStart');\r\n                            'step 2';\r\n                            player.storage.quanxinquanyi_showcards.addArray(Evt.showCards);\r\n                            player.syncStorage('quanxinquanyi_showcards');\r\n                            player.markSkill('quanxinquanyi_showcards');\r\n                            'step 3';\r\n                            Evt.videoId = lib.status.videoId++;\r\n                            var list = [];\r\n                            for (var i = 0; i < lib.inpile.length; i++) {\r\n                                var name = lib.inpile[i];\r\n                                if (name == 'wuxie')\r\n                                    continue;\r\n                                else if (get.type(name) == 'trick')\r\n                                    list.push(['锦囊', '', name]);\r\n                            }\r\n                            game.broadcastAll(function (id, list) {\r\n                                var dialog = ui.create.dialog('声明一张牌', [list, 'vcard']);\r\n                                dialog.videoId = id;\r\n                            }, Evt.videoId, list);\r\n                            'step 4';\r\n                            var next = player.chooseButton(1, true);\r\n                            next.set('dialog', Evt.videoId);\r\n                            'step 5';\r\n                            game.broadcastAll('closeDialog', Evt.videoId);\r\n                            if (result.bool) {\r\n                                player.addSkill('quanxinquanyi_saycards');\r\n                                player.storage.quanxinquanyi_saycards = result.links;\r\n                                player.showCards(player.storage.quanxinquanyi_saycards, '全新全异（声明）');\r\n                                player.syncStorage('quanxinquanyi_saycards');\r\n                                player.markSkill('quanxinquanyi_saycards');\r\n                            }\r\n                        }\r\n                    },\r\n                    end: {\r\n                        trigger: { global: 'phaseBefore' },\r\n                        direct: true,\r\n                        content() {\r\n                            player.addSkill('quanxinquanyi_endRound');\r\n                            player.removeSkill('quanxinquanyi_end');\r\n                        }\r\n                    },\r\n                    showcards: {\r\n                        init(player) {\r\n                            if (!player.storage.quanxinquanyi_showcards) {\r\n                                player.storage.quanxinquanyi_showcards = [];\r\n                            }\r\n                        },\r\n                        locked: true,\r\n                        notemp: true,\r\n                        marktext: '新',\r\n                        intro: {\r\n                            content: 'cards',\r\n                            onunmark: 'throw',\r\n                            name: '全新全异（亮出）',\r\n                        }\r\n                    },\r\n                    saycards: {\r\n                        init(player) {\r\n                            if (!player.storage.quanxinquanyi_saycards) {\r\n                                player.storage.quanxinquanyi_saycards = [];\r\n                            }\r\n                        },\r\n                        locked: true,\r\n                        notemp: true,\r\n                        marktext: '异',\r\n                        intro: {\r\n                            content(storage, player) {\r\n                                if (!player.storage.saycardsInD)\r\n                                    return '声明了【' + get.translation(player.storage.quanxinquanyi_saycards[0][2]) + '】,当前未进入弃牌堆，本轮结束时可用一张亮出牌使用';\r\n                                else\r\n                                    return '声明了【' + get.translation(player.storage.quanxinquanyi_saycards[0][2]) + '】,当前已经有声明牌进入弃牌堆';\r\n                            },\r\n                            name: '全新全异（声明）',\r\n                        }\r\n                    },\r\n                    discard: {\r\n                        trigger: { global: 'loseAfter' },\r\n                        priority: 99,\r\n                        filter(Evt, player) {\r\n                            if (Evt.type != 'discard')\r\n                                return false;\r\n                            for (var i = 0; i < Evt.cards2.length; i++) {\r\n                                for (var j = 0; j < player.storage.quanxinquanyi_showcards.length; j++) {\r\n                                    if (Evt.cards2[i] == player.storage.quanxinquanyi_showcards[j] && get.position(Evt.cards2[i], true) == 'd') {\r\n                                        return true;\r\n                                    }\r\n                                }\r\n                            }\r\n                            return false;\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            \"step 0\";\r\n                            if (trigger.delay == false)\r\n                                game.delay();\r\n                            \"step 1\";\r\n                            var cards = [];\r\n                            for (var i = 0; i < trigger.cards2.length; i++) {\r\n                                for (var j = 0; j < player.storage.quanxinquanyi_showcards.length; j++) {\r\n                                    if (trigger.cards2[i] == player.storage.quanxinquanyi_showcards[j] && get.position(trigger.cards2[i], true) == 'd') {\r\n                                        cards.push(trigger.cards2[i]);\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (cards.length) {\r\n                                player.markSkill(Evt.name);\r\n                                player.logSkill(Evt.name);\r\n                                player.addTempSkill('bingdielei_anotherPhase');\r\n                            }\r\n                        },\r\n                    },\r\n                    playerLosecard: {\r\n                        trigger: { player: 'loseAfter' },\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            if (player.storage.quanxinquanyi_showcards && player.storage.quanxinquanyi_showcards.length > 0)\r\n                                return true;\r\n                            else\r\n                                return false;\r\n                        },\r\n                        content() {\r\n                            if (player.storage.quanxinquanyi_showcards)\r\n                                for (var i = 0; i < trigger.cards2.length; i++) {\r\n                                    if (player.storage.quanxinquanyi_showcards.contains(trigger.cards2[i])) {\r\n                                        game.broadcastAll(function (splayer, card) {\r\n                                            splayer.storage.quanxinquanyi_showcards.remove(card);\r\n                                        }, player, trigger.cards2[i]);\r\n                                        player.syncStorage('quanxinquanyi_showcards');\r\n                                    }\r\n                                }\r\n                        }\r\n                    },\r\n                    losecard: {\r\n                        trigger: { global: 'loseAfter' },\r\n                        filter(Evt, player) {\r\n                            if (Evt.type != 'use' && Evt.type != 'discard')\r\n                                return false;\r\n                            if (player.hasZhuSkill('qiujinzhiling') && Evt.player.group == player.group)\r\n                                return false;\r\n                            for (var i = 0; i < Evt.cards2.length; i++) {\r\n                                if (Evt.cards2[i].name == player.storage.quanxinquanyi_saycards[0][2]) {\r\n                                    return true;\r\n                                }\r\n                            }\r\n                            return false;\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            player.storage.saycardsInD = true;\r\n                        }\r\n                    },\r\n                    endRound: {\r\n                        trigger: { global: 'roundStart' },\r\n                        priority: 999,\r\n                        prompt() {\r\n                            return '是否将一张亮出牌当作声明牌使用？(若不满足使用声明牌条件将直接结算)';\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return player.storage.quanxinquanyi_saycards;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            if (player.storage.saycardsInD) {\r\n                                Evt.goto(4);\r\n                            }\r\n                            else {\r\n                                if (!player.hasUseTarget(player.storage.quanxinquanyi_saycards[0][2])) {\r\n                                    Evt.goto(4);\r\n                                }\r\n                            }\r\n                            'step 1';\r\n                            player.chooseCard('选择一张亮出牌', 1, card => {\r\n                                var cuplayer = _status.event.player;\r\n                                return cuplayer.storage.quanxinquanyi_showcards.contains(card);\r\n                            });\r\n                            'step 2';\r\n                            if (result.bool) {\r\n                                Evt.useshowCards = result.cards;\r\n                                player.chooseUseTarget(Evt.useshowCards[0], { name: player.storage.quanxinquanyi_saycards[0][2] }, true, false);\r\n                            }\r\n                            else {\r\n                                Evt.goto(4);\r\n                            }\r\n                            'step 3';\r\n                            if (result.bool) {\r\n                            }\r\n                            'step 4';\r\n                            player.removeSkill('quanxinquanyi_saycards');\r\n                            player.removeSkill('quanxinquanyi_endRound');\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            bingdielei: {\r\n                audio: 3,\r\n                subSkill: {\r\n                    anotherPhase: {\r\n                        trigger: { global: 'phaseEnd' },\r\n                        marktext: '并',\r\n                        mark: true,\r\n                        forced: true,\r\n                        intro: {\r\n                            content: '当前回合结束后获得一个额外回合',\r\n                            name: '并蒂恶蕾',\r\n                        },\r\n                        content() {\r\n                            player.markSkill(Evt.name);\r\n                            game.delayx();\r\n                            player.logSkill(Evt.name);\r\n                            player.insertPhase();\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            qiujinzhiling: {\r\n                unique: true,\r\n                zhuSkill: true,\r\n            },\r\n            zhenyin: {\r\n                audio: 1,\r\n                trigger: {\r\n                    source: 'damageEnd',\r\n                    player: 'useCardToPlayered',\r\n                },\r\n                filter(Evt, player) {\r\n                    if (!player.hasSkill('saqi_use')) {\r\n                        return Evt.name == 'damage' && Evt.player.countCards('ej');\r\n                    }\r\n                    else {\r\n                        return Evt.name == 'useCardToPlayered'\r\n                            && Evt.targets.length == 1\r\n                            && Evt.targets[0].countCards('ej');\r\n                    }\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.A = trigger.name == 'damage' ?\r\n                        trigger.player :\r\n                        trigger.targets[0];\r\n                    Evt.B = Evt.A.next;\r\n                    if (!Evt.A.countCards('ej'))\r\n                        Evt.finish();\r\n                    player.choosePlayerCard('ej', Evt.A).set('ai', function (button) {\r\n                        var player = _status.event.player;\r\n                        var source = _status.event.target;\r\n                        var target = source.next;\r\n                        var link = button.link;\r\n                        if (get.position(link) == 'j') {\r\n                            if (target.canAddJudge(link))\r\n                                return get.effect(target, link, player, player);\r\n                            else\r\n                                return get.damageEffect(target, player, player);\r\n                        }\r\n                        else if (get.position(link) == 'e') {\r\n                            var subtype = get.subtype(link);\r\n                            if (!target.getEquip(subtype))\r\n                                return get.effect(target, link, player, player);\r\n                            else\r\n                                return get.damageEffect(target, player, player);\r\n                        }\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        var card = result.links[0];\r\n                        var dam = false;\r\n                        if (get.position(card) == 'e') {\r\n                            var c = Evt.B.getEquip(get.subtype(card));\r\n                            if (c) {\r\n                                dam = true;\r\n                                game.log(c, '掉落了');\r\n                            }\r\n                            Evt.B.equip(card);\r\n                        }\r\n                        else {\r\n                            var cname = card.viewAs ? card.viewAs : get.name(card);\r\n                            Evt.B.getCards('j').forEach(function (c) {\r\n                                if (get.name(c) == cname) {\r\n                                    game.log(c, '掉落了');\r\n                                    game.cardsDiscard(c);\r\n                                    dam = true;\r\n                                }\r\n                            });\r\n                            Evt.B.addJudge({ name: cname }, [card]);\r\n                        }\r\n                        Evt.A.$give(card, Evt.B);\r\n                        if (dam)\r\n                            Evt.B.damage('nocard');\r\n                        game.delay();\r\n                    }\r\n                }\r\n            },\r\n            saqi: {\r\n                init(player) {\r\n                    if (!player.storage.saqi_use) {\r\n                        player.storage.saqi_use = [];\r\n                    }\r\n                },\r\n                trigger: { player: 'phaseZhunbeiBegin' },\r\n                content() {\r\n                    'step 0';\r\n                    var list = [];\r\n                    list.push('减少上限');\r\n                    if (player.maxHp < 5)\r\n                        list.push('增加上限');\r\n                    player.chooseControl(list).ai = function () {\r\n                        if (list.length == 2) {\r\n                            if (player.maxHp > player.hp) {\r\n                                return 0;\r\n                            }\r\n                            else\r\n                                return 1;\r\n                        }\r\n                        else\r\n                            return 0;\r\n                    };\r\n                    'step 1';\r\n                    if (result.control == '增加上限') {\r\n                        player.gainMaxHp();\r\n                    }\r\n                    else {\r\n                        player.loseMaxHp();\r\n                        player.addTempSkill('saqi_use', {\r\n                            player: 'phaseBegin',\r\n                        });\r\n                        player.addTempSkill('saqi_ban');\r\n                    }\r\n                },\r\n                prompt() {\r\n                    var str = \"是否发动『飒气』并选择<br>\";\r\n                    var add = (_status.event.player.maxHp < 5);\r\n                    var item1 = '减少体力上限<br>';\r\n                    var item2 = '增加体力上限<br>';\r\n                    if (!add)\r\n                        return str + item1;\r\n                    else\r\n                        return str + '1. ' + item1 + '2. ' + item2;\r\n                },\r\n                global: 'saqi_banG',\r\n                subSkill: {\r\n                    use: {\r\n                        mark: true,\r\n                        locked: true,\r\n                        direct: true,\r\n                        marktext: '飒',\r\n                        intro: {\r\n                            content(storage, player, skill) {\r\n                                var str = \"发动『震音』的条件改为“你使用牌指定唯一目标后”。<br>\";\r\n                                if (storage && storage.length) {\r\n                                    str += \"其他角色本回合无法使用的花色：\" +\r\n                                        get.translation(storage);\r\n                                }\r\n                                return str;\r\n                            }\r\n                        },\r\n                        trigger: {\r\n                            player: 'useCardAfter',\r\n                        },\r\n                        content() {\r\n                            var suit = get.suit(trigger.card);\r\n                            if (player.hasSkill('saqi_ban') && suit && suit != 'none') {\r\n                                if (player.storage.saqi_use.indexOf(suit) == -1) {\r\n                                    player.storage.saqi_use.push(suit);\r\n                                    player.markSkill('saqi_use');\r\n                                }\r\n                            }\r\n                        },\r\n                        mod: {\r\n                            aiOrder(player, card, num) {\r\n                                if (get.itemtype(card) == 'card' && !get.info(card).notarget)\r\n                                    return num + 1;\r\n                            },\r\n                            aiValue(player, card, num) {\r\n                                if (get.itemtype(card) == 'card' && !get.info(card).notarget)\r\n                                    return num + 1;\r\n                            },\r\n                        },\r\n                    },\r\n                    banG: {\r\n                        mod: {\r\n                            cardEnabled(card, player) {\r\n                                var cur = game.findPlayer(function (p) {\r\n                                    return p.hasSkill('saqi_ban');\r\n                                });\r\n                                if (cur && cur != player &&\r\n                                    cur.storage.saqi_use.indexOf(get.suit(card)) != -1) {\r\n                                    return false;\r\n                                }\r\n                            },\r\n                            cardSavable(card, player) {\r\n                                var cur = game.findPlayer(function (p) {\r\n                                    return p.hasSkill('saqi_ban');\r\n                                });\r\n                                if (cur && cur != player &&\r\n                                    cur.storage.saqi_use.indexOf(get.suit(card)) != -1) {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                        },\r\n                    },\r\n                    ban: {\r\n                        onremove(player) {\r\n                            player.storage.saqi_use = [];\r\n                            player.markSkill('saqi_use');\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            mark_zhenyin: {\r\n                audio: 'zhenyin',\r\n                init(player, skill) {\r\n                    var _a;\r\n                    (_a = player.storage)[skill] || (_a[skill] = 1);\r\n                },\r\n                trigger: {\r\n                    player: 'useCardToPlayered',\r\n                },\r\n                filter(Evt, player) {\r\n                    var _a;\r\n                    return ((_a = Evt.targets) === null || _a === void 0 ? void 0 : _a.length) == 1\r\n                        && (player.storage.mark_zhenyin === 1 ? Evt.targets[0].countCards('h') : Evt.targets[0].countCards('ej'));\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    Evt.A = trigger.targets[0];\r\n                    Evt.B = Evt.A.next;\r\n                    player.choosePlayerCard('hej', Evt.A).set('ai', function (button) {\r\n                        let [player, source, link] = [_status.event.player, _status.event.target, button.link];\r\n                        let target = source.next;\r\n                        if (get.position(link) == 'j') {\r\n                            if (target.canAddJudge(link))\r\n                                return get.effect(target, link, player, player);\r\n                            else\r\n                                return get.damageEffect(target, player, player);\r\n                        }\r\n                        else if (get.position(link) == 'e') {\r\n                            var subtype = get.subtype(link);\r\n                            if (!target.getEquip(subtype))\r\n                                return get.effect(target, link, player, player);\r\n                            else\r\n                                return get.damageEffect(target, player, player);\r\n                        }\r\n                        else {\r\n                            return get.value(link, target, 'raw') * get.attitude(player, target);\r\n                        }\r\n                    }).set('filterButton', function (button) {\r\n                        let [player, link] = [_status.event.player, button.link];\r\n                        if (get.position(link) == 'h') {\r\n                            return player.storage.mark_zhenyin === 1;\r\n                        }\r\n                        else {\r\n                            return player.storage.mark_zhenyin === 2;\r\n                        }\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        player.storage.mark_zhenyin = [2, 1][player.storage.mark_zhenyin - 1];\r\n                        let card = result.links[0];\r\n                        let dam = false;\r\n                        if (get.position(card) == 'e') {\r\n                            var c = Evt.B.getEquip(get.subtype(card));\r\n                            if (c) {\r\n                                dam = true;\r\n                                game.log(c, '掉落了');\r\n                            }\r\n                            Evt.B.equip(card);\r\n                        }\r\n                        else if (get.position(card) == 'j') {\r\n                            var cname = card.viewAs ? card.viewAs : get.name(card);\r\n                            Evt.B.getCards('j').forEach(function (c) {\r\n                                if (get.name(c) == cname) {\r\n                                    game.log(c, '掉落了');\r\n                                    game.cardsDiscard(c);\r\n                                    dam = true;\r\n                                }\r\n                            });\r\n                            Evt.B.addJudge({ name: cname }, [card]);\r\n                        }\r\n                        else {\r\n                            Evt.B.gain(card, Evt.A);\r\n                        }\r\n                        Evt.A.$give(card, Evt.B);\r\n                        if (dam)\r\n                            Evt.B.damage('nocard');\r\n                        game.delay();\r\n                    }\r\n                }\r\n            },\r\n            meici: {\r\n                audio: 4,\r\n                group: ['meici_set', 'meici_use'],\r\n                subSkill: {\r\n                    mark: {\r\n                        mark: true,\r\n                        intro: {\r\n                            content: \"本回合使用锦囊牌时，将被观看手牌并重铸其中一张\",\r\n                        },\r\n                        onunmark(player) {\r\n                            player.unmarkSkill('meici_mark');\r\n                        }\r\n                    },\r\n                    set: {\r\n                        direct: true,\r\n                        trigger: {\r\n                            global: 'phaseBegin',\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return Evt.player != player && !game.findPlayer(cur => cur.getCards('h') > Evt.player.getCards('h'));\r\n                        },\r\n                        content() {\r\n                            player.logSkill('meici', trigger.player);\r\n                            game.delayx();\r\n                            trigger.player.addTempSkill('meici_mark');\r\n                            trigger.player.markSkill('meici_mark');\r\n                        }\r\n                    },\r\n                    use: {\r\n                        trigger: {\r\n                            global: 'useCardAfter'\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return Evt.player.hasSkill('meici_mark')\r\n                                && ['trick', 'delay'].contains(get.type(Evt.card));\r\n                        },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            'step 0';\r\n                            game.delay(0.5);\r\n                            player.choosePlayerCard(\"###『美词』###重铸其一张手牌\", trigger.player, 'h').set('visible', true).set('target', trigger.player).ai = button => {\r\n                                var val = get.buttonValue(button);\r\n                                var player = _status.event.player;\r\n                                var target = _status.event.target;\r\n                                if (get.attitude(player, target) > 0)\r\n                                    return 4 - val + Math.random();\r\n                                return val + Math.random();\r\n                            };\r\n                            'step 1';\r\n                            if (result.bool && result.cards.length) {\r\n                                player.logSkill('meici', trigger.player, true, false, false);\r\n                                trigger.player.lose(result.cards, ui.discardPile).set('visible', true);\r\n                                trigger.player.$throw(result.cards);\r\n                                game.log(trigger.player, '将', result.cards, '置入了弃牌堆');\r\n                                trigger.player.draw();\r\n                                if (get.type(result.cards[0]) == 'basic') {\r\n                                    player.chooseCard(\"重铸一张牌\", 'he');\r\n                                }\r\n                            }\r\n                            'step 2';\r\n                            if (result.bool && result.cards.length) {\r\n                                player.lose(result.cards, ui.discardPile);\r\n                                player.$throw(result.cards);\r\n                                player.draw();\r\n                                game.log(player, '将', result.cards, '置入了弃牌堆');\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten: 1.5,\r\n                },\r\n            },\r\n            danlian: {\r\n                audio: 3,\r\n                trigger: {\r\n                    global: 'phaseEnd'\r\n                },\r\n                filter(Evt, player) {\r\n                    var cards = [];\r\n                    game.getGlobalHistory('cardMove', evt => {\r\n                        if (evt.name == 'lose' && evt.parent.name != 'useCard') {\r\n                            cards.addArray(evt.cards.filterInD('d'));\r\n                        }\r\n                    });\r\n                    var suit = [];\r\n                    if (!player.hasSkill('danlian_diamond'))\r\n                        suit.push('diamond');\r\n                    if (!player.hasSkill('danlian_club'))\r\n                        suit.push('club');\r\n                    return cards.length >= Evt.player.hp &&\r\n                        cards.filter(card => suit.contains(get.suit(card))).length &&\r\n                        Evt.player.isAlive();\r\n                },\r\n                direct: true,\r\n                popup: false,\r\n                content() {\r\n                    'step 0';\r\n                    var cards = [];\r\n                    var suit = [];\r\n                    if (!player.hasSkill('danlian_diamond'))\r\n                        suit.push('diamond');\r\n                    if (!player.hasSkill('danlian_club'))\r\n                        suit.push('club');\r\n                    game.getGlobalHistory('cardMove', evt => {\r\n                        if (evt.name == 'lose' && evt.parent.name != 'useCard') {\r\n                            cards.addArray(evt.cards.filterInD('d').filter(card => suit.contains(get.suit(card))));\r\n                        }\r\n                    });\r\n                    if (cards)\r\n                        player.chooseCardButton(\"###『耽恋』：进入弃牌堆的牌###选择一张牌（♦牌当【乐不思蜀】，♣牌当【决斗】）\", cards);\r\n                    else\r\n                        Evt.finish();\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.card = result.links[0];\r\n                        var pStr = get.suit(Evt.card) == 'diamond' ?\r\n                            \"选择乐不思蜀的目标\" : \"选择决斗的目标\";\r\n                        Evt.cardName = get.suit(Evt.card) == 'diamond' ?\r\n                            'lebu' : 'juedou';\r\n                        game.broadcastAll(function (player, user, pStr, cardName) {\r\n                            player.chooseTarget(pStr, function (card, player, target) {\r\n                                return user.canUse(cardName, target)\r\n                                    && target != player\r\n                                    && target != user;\r\n                            }).set('ai', target => -get.attitude(player, target));\r\n                        }, player, trigger.player, pStr, Evt.cardName);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    if (result.bool && result.targets.length) {\r\n                        var target = result.targets[0];\r\n                        trigger.player.useCard({ name: Evt.cardName }, target, [Evt.card]);\r\n                        player.addTempSkill('danlian_' + get.suit(Evt.card), 'roundStart');\r\n                    }\r\n                    game.delay(0.5);\r\n                },\r\n                ai: {\r\n                    threaten: 1.5,\r\n                },\r\n                subSkill: {\r\n                    diamond: {},\r\n                    club: {},\r\n                }\r\n            },\r\n            kuangbaoshuangren: {\r\n                audio: 3,\r\n                group: ['kuangbaoshuangren_red', 'kuangbaoshuangren_black'],\r\n                subSkill: {\r\n                    red: {\r\n                        mod: {\r\n                            targetInRange(card, player) {\r\n                                if (_status.currentPhase == player && get.name(card) == 'sha' && get.color(card) == 'red')\r\n                                    return true;\r\n                            },\r\n                            cardUsable(card, player, num) {\r\n                                if (card.name == 'sha' && get.color(card) == 'red')\r\n                                    return Infinity;\r\n                            },\r\n                        },\r\n                        trigger: {\r\n                            source: 'damageEnd'\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return Evt.card && get.name(Evt.card) == 'sha' && Evt.notLink()\r\n                                && get.color(Evt.card) == 'red'\r\n                                && Evt.player.countDiscardableCards(player, 'e', { subtype: ['equip3', 'equip4', 'equip6'] });\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            \"step 0\";\r\n                            var att = (get.attitude(player, trigger.player) <= 0);\r\n                            var next = player.chooseButton();\r\n                            next.set('att', att);\r\n                            next.set('createDialog', ['是否发动『狂暴双刃』，弃置' + get.translation(trigger.player) + '的一张坐骑牌？', trigger.player.getDiscardableCards(player, 'e', { subtype: ['equip3', 'equip4', 'equip6'] })]);\r\n                            next.set('ai', button => {\r\n                                if (_status.event.att)\r\n                                    return get.buttonValue(button);\r\n                                return 0;\r\n                            });\r\n                            \"step 1\";\r\n                            if (result.bool && result.links.length) {\r\n                                player.logSkill('kuangbaoshuangren', trigger.player);\r\n                                trigger.player.discard(result.links[0]);\r\n                            }\r\n                        }\r\n                    },\r\n                    black: {\r\n                        trigger: {\r\n                            player: 'useCard2',\r\n                        },\r\n                        locked: true,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            if (!Evt.card || !(Evt.card.name == 'sha')\r\n                                || !(get.color(Evt.card) == 'black')) {\r\n                                return false;\r\n                            }\r\n                            return game.hasPlayer(cur => lib.filter.targetEnabled2(Evt.card, player, cur)\r\n                                && player.inRange(cur)\r\n                                && !Evt.targets.contains(cur)\r\n                                && player.canUse(Evt.card, cur));\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            player.chooseTarget(true, '额外指定一名' + get.translation(trigger.card) + '的目标', function (card, player, target) {\r\n                                if (_status.event.targets.contains(target))\r\n                                    return false;\r\n                                return lib.filter.targetEnabled2(_status.event.card, player, target)\r\n                                    && player.inRange(target);\r\n                            }).set('targets', trigger.targets).set('card', trigger.card).set('ai', target => {\r\n                                var player = _status.event.player;\r\n                                return get.effect(target, _status.event.card, player, player);\r\n                            });\r\n                            'step 1';\r\n                            if (result.bool && result.targets.length) {\r\n                                game.delayx();\r\n                                player.logSkill('kuangbaoshuangren', result.targets);\r\n                                trigger.targets.unshift(result.targets[0]);\r\n                            }\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            guangsuxiabo: {\r\n                audio: 2,\r\n                init(player) {\r\n                    player.storage.hp = 0;\r\n                    player.storage.loseCount = 0;\r\n                },\r\n                trigger: {\r\n                    global: ['phaseZhunbeiEnd', 'phaseJudgeEnd', 'phaseDrawEnd', 'phaseUseEnd', 'phaseDiscardEnd', 'phaseJieshuEnd']\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.storage.hp || player.storage.loseCount > 2;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.draw();\r\n                    'step 1';\r\n                    let evt = _status.event.getParent('phaseUse');\r\n                    if ((evt === null || evt === void 0 ? void 0 : evt.name) == 'phaseUse') {\r\n                        evt.skipped = true;\r\n                    }\r\n                    let phase = _status.event.getParent('phase');\r\n                    if ((phase === null || phase === void 0 ? void 0 : phase.name) == 'phase') {\r\n                        phase.finish();\r\n                    }\r\n                },\r\n                ai: {\r\n                    maixie: true,\r\n                },\r\n                group: ['guangsuxiabo_clear', 'guangsuxiabo_cnt1', 'guangsuxiabo_cnt2'],\r\n                subSkill: {\r\n                    clear: {\r\n                        forced: true,\r\n                        silent: true,\r\n                        trigger: {\r\n                            global: ['phaseZhunbeiBegin', 'phaseJudgeBegin', 'phaseDrawBegin', 'phaseUseBegin', 'phaseDiscardBegin', 'phaseJieshuBegin']\r\n                        },\r\n                        content() {\r\n                            player.storage.hp = 0;\r\n                            player.storage.loseCount = 0;\r\n                        }\r\n                    },\r\n                    cnt1: {\r\n                        forced: true,\r\n                        silent: true,\r\n                        trigger: {\r\n                            player: 'loseEnd',\r\n                        },\r\n                        content() {\r\n                            player.storage.loseCount += trigger.cards2.length;\r\n                        }\r\n                    },\r\n                    cnt2: {\r\n                        forced: true,\r\n                        silent: true,\r\n                        trigger: {\r\n                            player: 'damageEnd',\r\n                        },\r\n                        content() {\r\n                            player.storage.hp = 1;\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            zhenxin: {\r\n                locked: true,\r\n                group: ['zhenxin_from', 'zhenxin_to'],\r\n                subSkill: {\r\n                    from: {\r\n                        trigger: { source: 'damageBefore' },\r\n                        forced: true,\r\n                        usable: 1,\r\n                        priority: 12,\r\n                        filter(Evt, player) {\r\n                            if (Evt.player == player)\r\n                                return false;\r\n                            return player.hp > Evt.player.hp;\r\n                        },\r\n                        content() {\r\n                            trigger.changeToZero();\r\n                        },\r\n                    },\r\n                    to: {\r\n                        trigger: { player: 'damageBefore' },\r\n                        forced: true,\r\n                        usable: 1,\r\n                        priority: 24,\r\n                        filter(Evt, player) {\r\n                            if (Evt.player != player)\r\n                                return false;\r\n                            if (!Evt.source)\r\n                                return false;\r\n                            return player.hp < Evt.source.hp;\r\n                        },\r\n                        content() {\r\n                            trigger.changeToZero();\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            sczhuwei: {\r\n                group: ['sczhuwei_put', 'sczhuwei_moveC'],\r\n                subSkill: {\r\n                    put: {\r\n                        trigger: { global: 'phaseEnd' },\r\n                        priority: 24,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            if (player == Evt.player)\r\n                                return false;\r\n                            return Evt.player.isMinHandcard() || Evt.player.isMinHp();\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            player.line(trigger.player, 'green');\r\n                            var check = get.attitude(trigger.player, player);\r\n                            trigger.player.chooseBool(get.prompt2('sczhuwei_put', player)).set('choice', check > 0);\r\n                            'step 1';\r\n                            if (result.bool) {\r\n                                trigger.player.logSkill('sczhuwei', player);\r\n                                Evt.target = trigger.player;\r\n                                game.asyncDraw([player, Evt.target]);\r\n                            }\r\n                        },\r\n                    },\r\n                    moveC: {\r\n                        trigger: { global: 'sczhuwei_putAfter' },\r\n                        forced: false,\r\n                        filter(Evt, player) {\r\n                            if (!Evt.target)\r\n                                return false;\r\n                            var canbeM = function (a, b) {\r\n                                var es = a.getCards('e');\r\n                                var c = 0;\r\n                                for (var i = 0; i < es.length; i++) {\r\n                                    if (b.isEmpty(get.subtype(es[i])))\r\n                                        c++;\r\n                                }\r\n                                return c;\r\n                            };\r\n                            return canbeM(player, Evt.target) || canbeM(Evt.target, player);\r\n                        },\r\n                        content() {\r\n                            player.moveCard(function (card, player, target) {\r\n                                if (target == player || target == _status.currentPhase)\r\n                                    return true;\r\n                                return false;\r\n                            });\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            suisi: {\r\n                audio: 4,\r\n                locked: true,\r\n                direct: true,\r\n                trigger: {\r\n                    player: ['cardsDiscardAfter', 'chooseToDiscardAfter', 'discardAfter']\r\n                },\r\n                filter(Evt, player) {\r\n                    var cards = Evt.cards;\r\n                    if (!cards)\r\n                        return false;\r\n                    var ret = false;\r\n                    if (!player.storage.suisi)\r\n                        player.storage.suisi = { lastCnt: 0 };\r\n                    else\r\n                        player.storage.suisi.lastCnt = 0;\r\n                    for (var i = 0; i < cards.length; ++i) {\r\n                        if (cards[i] && (cards[i].name == 'shan' || cards[i].name == 'wuxie'))\r\n                            ++player.storage.suisi.lastCnt;\r\n                    }\r\n                    return player.storage.suisi.lastCnt > 0;\r\n                },\r\n                content() {\r\n                    if (player.storage.suisi && player.storage.suisi.lastCnt > 0) {\r\n                        player.draw(Math.ceil(player.storage.suisi.lastCnt / 2));\r\n                        player.logSkill('suisi');\r\n                    }\r\n                },\r\n                group: [\r\n                    'suisi_shanMod', 'suisi_wuxieMod'\r\n                ],\r\n                subSkill: {\r\n                    shanMod: {\r\n                        hiddenCard(player, name) {\r\n                            if (_status.event.name == 'chooseToUse' && _status.event.type == 'respondShan') {\r\n                                if (name == 'shan') {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                            return true;\r\n                        },\r\n                        mod: {\r\n                            cardname(card, player, name) {\r\n                                if (_status.event.name == 'chooseToUse' && _status.event.type == 'respondShan') {\r\n                                    if (card.name != 'shan' && get.type2({ name: card.name }) == 'basic') {\r\n                                        return 'shan';\r\n                                    }\r\n                                }\r\n                            },\r\n                            cardEnabled2(card, player, name) {\r\n                                if (_status.event.name == 'chooseToUse' && _status.event.type == 'respondShan') {\r\n                                    if (card.name == 'shan') {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    wuxieMod: {\r\n                        hiddenCard(player, name) {\r\n                            if (_status.event.name == 'chooseToUse' && _status.event.type == 'wuxie') {\r\n                                if (name == 'wuxie')\r\n                                    return false;\r\n                            }\r\n                            return true;\r\n                        },\r\n                        mod: {\r\n                            cardname(card, player, name) {\r\n                                if (_status.event.name == 'chooseToUse' && _status.event.type == 'wuxie') {\r\n                                    if (card.name != 'wuxie' && get.type2({ name: card.name }) == 'trick') {\r\n                                        return 'wuxie';\r\n                                    }\r\n                                }\r\n                            },\r\n                            cardEnabled2(card, player, name) {\r\n                                if (_status.event.name == 'chooseToUse' && _status.event.type == 'wuxie') {\r\n                                    if (card.name == 'wuxie') {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            liefeng: {\r\n                trigger: {\r\n                    player: 'phaseJieshu'\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.countCards('h');\r\n                },\r\n                check(Evt, player) {\r\n                    return player.countCards('h', { name: ['shan', 'wuxie'] }) == player.countCards('h');\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var handCards = player.getCards('h').slice(0);\r\n                    player.showCards(handCards);\r\n                    Evt.handCards = handCards;\r\n                    'step 1';\r\n                    if (!Evt.handCards || !Evt.handCards.length) {\r\n                        Evt.finish();\r\n                        return;\r\n                    }\r\n                    var shaCnt = 0;\r\n                    for (var i = 0; i < Evt.handCards.length; ++i) {\r\n                        if (Evt.handCards[i] && (Evt.handCards[i].name == 'shan'\r\n                            || Evt.handCards[i].name == 'wuxie'\r\n                            || !lib.filter.cardEnabled(Evt.handCards[i], player))) {\r\n                            ++shaCnt;\r\n                        }\r\n                    }\r\n                    if (shaCnt >= Evt.handCards.length) {\r\n                        Evt.shaCnt = shaCnt;\r\n                        Evt.handCnt = shaCnt;\r\n                        Evt._result = { bool: true };\r\n                        player.discard(Evt.handCards);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                        return;\r\n                    }\r\n                    'step 2';\r\n                    if (!result.bool || Evt.shaCnt <= 0) {\r\n                        Evt.finish();\r\n                        return;\r\n                    }\r\n                    player.chooseUseTarget('###选择一个目标，视为对其使用一张【暗】杀。(【暗】杀：' + Evt.shaCnt + '/' + Evt.handCnt + '）张', { name: 'sha', nature: 'yami' }, true, 'nodistance');\r\n                    --Evt.shaCnt;\r\n                    Evt.redo();\r\n                },\r\n                ai: {\r\n                    useSha: 1,\r\n                    skillTagFilter(player, tag, arg) {\r\n                        if (tag == 'useSha')\r\n                            return player.countCards('h', { name: ['shan', 'wuxie'] }) == player.countCards('h');\r\n                    },\r\n                    threaten(player, target) {\r\n                        return 1.6;\r\n                    }\r\n                }\r\n            },\r\n            jiaoming: {\r\n                audio: 5,\r\n                trigger: {\r\n                    global: ['loseAfter', 'cardsDiscardAfter']\r\n                },\r\n                forced: true,\r\n                popup: false,\r\n                filter(Evt, player) {\r\n                    if (!player || player.hasSkill('jiaoming_invalid'))\r\n                        return false;\r\n                    Evt = Evt && (Evt.name == 'phaseUse' ? Evt : Evt.getParent('phaseUse'));\r\n                    if (!Evt || Object.getOwnPropertyNames(Evt).length == 0)\r\n                        return false;\r\n                    if (player != Evt.player)\r\n                        return false;\r\n                    return true;\r\n                },\r\n                content() {\r\n                    Evt = Evt && (Evt.name == 'phaseUse' ? Evt : Evt.getParent('phaseUse'));\r\n                    if (!Evt || Object.getOwnPropertyNames(Evt).length == 0)\r\n                        return;\r\n                    var cardnames = {};\r\n                    game.getGlobalHistory('cardMove', evt => {\r\n                        if (evt.cards && evt.name == 'lose' && evt.getParent('phaseUse') == Evt) {\r\n                            for (var i = evt.cards.length - 1; i >= 0; --i) {\r\n                                if (get.position(evt.cards[i], true) != 'd')\r\n                                    continue;\r\n                                if (typeof cardnames[evt.cards[i].name] === 'undefined') {\r\n                                    cardnames[evt.cards[i].name] = [];\r\n                                }\r\n                                if (!cardnames[evt.cards[i].name].contains(evt.cards[i])) {\r\n                                    cardnames[evt.cards[i].name].push(evt.cards[i]);\r\n                                }\r\n                            }\r\n                        }\r\n                        return true;\r\n                    });\r\n                    for (var nm in cardnames) {\r\n                        if (cardnames[nm] && cardnames[nm].length > 1) {\r\n                            player.addTempSkill('jiaoming_invalid');\r\n                        }\r\n                        ;\r\n                    }\r\n                    if (nm != undefined) {\r\n                        player.addTempSkill('jiaoming_main', 'phaseUseAfter');\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    invalid: {},\r\n                    main: {\r\n                        enable: 'phaseUse',\r\n                        check(Evt, player) {\r\n                            return true;\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return !player.hasSkill('jiaoming_invalid');\r\n                        },\r\n                        prompt: '你可选择攻击范围内有你的一名其他角色',\r\n                        filterTarget(card, player, target) {\r\n                            return player != target && target.canUse('sha', player);\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            Evt.jmTarget = targets[0];\r\n                            var next = Evt.jmTarget.chooseToUse('对' + get.translation(player) + '使用一张【杀】；或失去1点体力并令' + get.translation(player) + '于本回合失去『骄名』。', function (card, player) {\r\n                                if (get.name(card) != 'sha')\r\n                                    return false;\r\n                                return lib.filter.filterCard.apply(this, arguments);\r\n                            });\r\n                            next.set('filterTarget', function (card, player, target) {\r\n                                return _status.event.shaTarget == target;\r\n                            }).set('shaTarget', player).set('targetRequired', true);\r\n                            var aiChoice = Evt.jmTarget.hasSha('use') ? player : -1;\r\n                            next.set('choice', aiChoice).set('ai2', target => _status.event.choice);\r\n                            'step 1';\r\n                            if (Evt.directfalse || result.bool == false) {\r\n                                player.addTempSkill('jiaoming_invalid');\r\n                                Evt.jmTarget.loseHp();\r\n                            }\r\n                        },\r\n                        ai: {\r\n                            pretao: true,\r\n                            order: 5,\r\n                            result: {\r\n                                player(player, target) {\r\n                                    if (player.hp != 1) {\r\n                                        if (target.hp == 1 && !target.hasSha('use')) {\r\n                                            return 2;\r\n                                        }\r\n                                        return 0;\r\n                                    }\r\n                                    else\r\n                                        return -1;\r\n                                },\r\n                                target(player, target) {\r\n                                    if (target.hasSha('use')) {\r\n                                        return -1;\r\n                                    }\r\n                                    else {\r\n                                        return -2;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            changhe: {\r\n                audio: true,\r\n                trigger: {\r\n                    player: 'phaseUseEnd'\r\n                },\r\n                forced: false,\r\n                check(Evt, player) {\r\n                    return true;\r\n                },\r\n                filter(Evt, player) {\r\n                    Evt = Evt && (Evt.name == 'phaseUse' ? Evt : Evt.getParent('phaseUse'));\r\n                    if (!Evt || Object.getOwnPropertyNames(Evt).length == 0)\r\n                        return false;\r\n                    if (!player)\r\n                        return false;\r\n                    var cardnames = {};\r\n                    game.getGlobalHistory('cardMove', evt => {\r\n                        if (evt.cards && evt.name == 'lose' && evt.getParent('phaseUse') == Evt) {\r\n                            for (var i = evt.cards.length - 1; i >= 0; --i) {\r\n                                if (get.position(evt.cards[i], true) != 'd')\r\n                                    continue;\r\n                                if (typeof cardnames[evt.cards[i].name] === 'undefined') {\r\n                                    cardnames[evt.cards[i].name] = [];\r\n                                }\r\n                                if (!cardnames[evt.cards[i].name].contains(evt.cards[i])) {\r\n                                    cardnames[evt.cards[i].name].push(evt.cards[i]);\r\n                                }\r\n                            }\r\n                        }\r\n                        return true;\r\n                    });\r\n                    for (var nm in cardnames) {\r\n                        if (cardnames[nm] && cardnames[nm].length > 2)\r\n                            return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseControl(['cancel2']).set('choiceList', [\r\n                        '摸两张牌',\r\n                        '回复1点体力'\r\n                    ]).set('prompt', '请选择一项').set('ai', function () {\r\n                        if (_status.event.chPlayer) {\r\n                            return _status.event.chPlayer.maxHp > _status.event.chPlayer.hp;\r\n                        }\r\n                        return 0;\r\n                    }).set('chPlayer', player);\r\n                    'step 1';\r\n                    if (result.control != 'cancel2') {\r\n                        if (result.index == 0) {\r\n                            player.draw(2);\r\n                        }\r\n                        else {\r\n                            player.recover();\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            nvjiangrouhao: {\r\n                audio: true,\r\n                group: ['nvjiangrouhao_shaTrigger', 'nvjiangrouhao_distanceTrigger'],\r\n                subSkill: {\r\n                    shaTrigger: {\r\n                        trigger: {\r\n                            player: 'useCardToPlayered',\r\n                        },\r\n                        filter(Evt) {\r\n                            return Evt.card.name == 'sha';\r\n                        },\r\n                        forced: true,\r\n                        content() {\r\n                            var suit = trigger.card.suit;\r\n                            var target = trigger.target;\r\n                            target.addTempSkill('nvjiangrouhao_filterShan', 'shaAfter', 'nvjiangrouhao_distanceTemp');\r\n                            if (!target.storage.nvjiangrouhao) {\r\n                                target.storage.nvjiangrouhao = {\r\n                                    shaTrigger: {}\r\n                                };\r\n                            }\r\n                            target.storage.nvjiangrouhao.shaTrigger.suit = suit;\r\n                            if (target.isOnline()) {\r\n                                target.send(function (target, suit) {\r\n                                    if (!target.storage.nvjiangrouhao) {\r\n                                        target.storage.nvjiangrouhao = {\r\n                                            shaTrigger: {}\r\n                                        };\r\n                                    }\r\n                                    target.storage.nvjiangrouhao.shaTrigger.suit = suit;\r\n                                }, target, suit);\r\n                            }\r\n                        },\r\n                    },\r\n                    filterShan: {\r\n                        mod: {\r\n                            cardEnabled2(card, player) {\r\n                                var sha = (player && player.storage && player.storage.nvjiangrouhao)\r\n                                    && player.storage.nvjiangrouhao.shaTrigger;\r\n                                if (!sha || !sha.suit)\r\n                                    return;\r\n                                if (get.name(card) == 'shan' && get.suit(card) != sha.suit) {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    distanceTrigger: {\r\n                        audio: 'nvjiangrouhao',\r\n                        trigger: {\r\n                            source: 'damageSource'\r\n                        },\r\n                        forced: true,\r\n                        content() {\r\n                            player.addTempSkill('nvjiangrouhao_distanceTemp', { player: 'phaseBegin' });\r\n                        }\r\n                    },\r\n                    distanceTemp: {\r\n                        mark: true,\r\n                        mod: {\r\n                            globalFrom(player, target, distance) {\r\n                                return distance - 1;\r\n                            }\r\n                        },\r\n                        intro: {\r\n                            content: '锁定技，直到你的下一个回合开始，你计算与其他角色的距离-1。'\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            yinlaiyaotang: {\r\n                audio: 3,\r\n                group: ['yinlaiyaotang_phaseUse', 'yinlaiyaotang_loseCheck'],\r\n                subSkill: {\r\n                    phaseUse: {\r\n                        enable: 'phaseUse',\r\n                        usable: 1,\r\n                        log: false,\r\n                        filter(Evt, player) {\r\n                            return player.getCards('h').length > 0;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            player.chooseCardTarget({\r\n                                position: 'he',\r\n                                prompt: '###『引徕药汤』###将任意数量手牌交给你攻击范围内的任意角色（指定自己时表示置于武将牌上）',\r\n                                selectCard: [1, Infinity],\r\n                                filterCard: true,\r\n                                filterTarget(card, player, target) {\r\n                                    return target == player || player.inRange(target);\r\n                                },\r\n                                ai1(card) {\r\n                                    var player = _status.event.player;\r\n                                    if (ui.selected.cards.length || player.storage.yinlaiyaotang_phaseUse) {\r\n                                        var tang = ui.selected.cards.concat(player.storage.yinlaiyaotang_phaseUse);\r\n                                        for (var i = 0; i < tang.length; i++) {\r\n                                            if (get.name(tang[i]) == card.name)\r\n                                                return 0;\r\n                                        }\r\n                                    }\r\n                                    if (player.needsToDiscard())\r\n                                        return 7.5 - get.value(card);\r\n                                    return 6 - get.value(card);\r\n                                },\r\n                                ai2(target) {\r\n                                    if (target != player)\r\n                                        return get.recoverEffect(target, _status.event.player, _status.event.player);\r\n                                    return 1;\r\n                                },\r\n                            });\r\n                            'step 1';\r\n                            if (result.bool) {\r\n                                player.logSkill('yinlaiyaotang');\r\n                                Evt.cards = result.cards.slice(0);\r\n                                Evt.target = result.targets[0];\r\n                                if (Evt.target == player) {\r\n                                    player.lose(Evt.cards, ui.special, 'toStorage');\r\n                                    player.$give(Evt.cards, player, false);\r\n                                    player.markAuto('yinlaiyaotang_phaseUse', Evt.cards);\r\n                                }\r\n                                else {\r\n                                    Evt.target.gain(Evt.cards, player, 'giveAuto');\r\n                                }\r\n                            }\r\n                        },\r\n                        init(player) {\r\n                            if (!player.storage.yinlaiyaotang_phaseUse)\r\n                                player.storage.yinlaiyaotang_phaseUse = [];\r\n                        },\r\n                        intro: {\r\n                            name: '引徕药汤',\r\n                            content: 'cards'\r\n                        },\r\n                        ai: {\r\n                            order: 5,\r\n                            result: { player: 0.5 },\r\n                        }\r\n                    },\r\n                    loseCheck: {\r\n                        audio: 'yinlaiyaotang',\r\n                        trigger: { global: 'loseAfter' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            if (!player.storage.yinlaiyaotang_phaseUse)\r\n                                return;\r\n                            if (Evt.hs && Evt.hs.length && Evt.player != player && get.distance(player, Evt.player) <= 1) {\r\n                                var tang = player.storage.yinlaiyaotang_phaseUse;\r\n                                for (var i = 0; i < Evt.hs.length; i++) {\r\n                                    for (var j = 0; j < tang.length; j++) {\r\n                                        if (get.name(tang[j]) == get.name(Evt.hs[i])) {\r\n                                            return true;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            trigger.player.recover();\r\n                            'step 1';\r\n                            var hs = trigger.hs;\r\n                            var tang = player.storage.yinlaiyaotang_phaseUse;\r\n                            Evt.cards = [];\r\n                            for (var i = 0; i < hs.length; i++) {\r\n                                for (var j = 0; j < tang.length; j++) {\r\n                                    if (get.name(tang[j]) == get.name(hs[i])) {\r\n                                        Evt.cards.push(tang[j]);\r\n                                    }\r\n                                }\r\n                            }\r\n                            player.gain(Evt.cards, 'gain2');\r\n                            player.unmarkAuto('yinlaiyaotang_phaseUse', Evt.cards);\r\n                            'step 2';\r\n                            player.draw();\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n        },\r\n        characterReplace: {\r\n            SasakiSaku: ['SasakiSaku', 'sea_SasakiSaku'],\r\n            LizeHelesta: ['re_LizeHelesta', 'LizeHelesta', 'gz_LizeHelesta'],\r\n            re_AngeKatrina: ['re_AngeKatrina', 'gz_AngeKatrina'],\r\n            MononobeAlice: ['re_MononobeAlice', 'MononobeAlice', 'sp_MononobeAlice'],\r\n            ShizukaRin: ['re_ShizukaRin', 'ShizukaRin'],\r\n            MitoTsukino: ['re_MitoTsukino', 'MitoTsukino'],\r\n            UshimiIchigo: ['re_UshimiIchigo', 'UshimiIchigo'],\r\n            HiguchiKaede: ['re_HiguchiKaede', 'HiguchiKaede'],\r\n            SuzuharaLulu: ['re_SuzuharaLulu', 'SuzuharaLulu'],\r\n        },\r\n        dynamicTranslate: {\r\n            mark_zhenyin(player) {\r\n                let str = lib.translate.mark_zhenyin_info;\r\n                switch (player.storage.mark_zhenyin) {\r\n                    case 1: return str.replace(/①手牌区/g, `<span class=\"changetext\">①手牌区</span>`);\r\n                    case 2: return str.replace(/②装备或判定区/g, `<span class=\"changetext\">②装备或判定区</span>`);\r\n                }\r\n                return str;\r\n            },\r\n        },\r\n        translate: {\r\n            nijisanji_1: `一期生`,\r\n            nijisanji_2: `二期生`,\r\n            MononobeAlice: `物述有栖`,\r\n            tinenghuifu1: `体能恢复`,\r\n            tinenghuifu1_hp: `体能恢复`,\r\n            tinenghuifu1_info: `锁定技 当你失去装备区的一张牌后，你回复1点体力。当你的体力值减少后，你摸一张牌。`,\r\n            tinenghuifu1_append: lib.figurer(`特性：卖血`),\r\n            dianmingguzhen: `电鸣鼓震`,\r\n            dianmingguzhen_info: `出牌阶段限一次，你可以失去 1 点体力移动场上的一张装备牌，若移动的是你的，你视为对对应装备栏内没有装备的所有角色使用一张雷【杀】；然后你可以为抵消此【杀】的角色追加一次【闪电】判定。`,\r\n            dianmingguzhen_append: lib.figurer(`可以通过将自己的装备转移给队友，实现瞬间爆发`),\r\n            ShizukaRin: `静凛`,\r\n            mozhaotuji: `魔爪突击`,\r\n            mozhaotuji_DrawOrStop: `魔爪突击`,\r\n            mozhaotuji_info: `回合内，你可以将任意阶段连续的变为出牌阶段，直到你有出牌阶段未使用过牌。你使用过两张或更多牌的阶段结束时，你摸一张牌。`,\r\n            mozhaotuji_append: lib.figurer(`特性：多次出杀 易上手`),\r\n            IenagaMugi: `家长麦`,\r\n            fengxue: `奋学`,\r\n            fengxue_info: `你可以跳过出牌阶段，亮出牌堆顶的X+1张牌，使用其中一张牌，然后获得其中一种花色的牌。（X为体力值不小于你的角色数）`,\r\n            yuepi: `乐癖`,\r\n            yuepi_info: `弃牌阶段开始时，你可以重铸等同于你装备区牌数的手牌，令你在本阶段增加等量的手牌上限。`,\r\n            cangxiong: `藏兄`,\r\n            cangxiong_info: `其他角色的体力值变为1后，你可以交给其任意手牌，然后若其手牌数大于你，将移出游戏直到其回合开始。`,\r\n            cangxiong_append: lib.figurer(`特性：传递关键牌 保护友方`),\r\n            MitoTsukino: `月之美兔`,\r\n            MitoTsukino_info: `月之美兔`,\r\n            quanxinquanyi: `全新全异`,\r\n            quanxinquanyi_info: `一轮开始时，你可以亮出至多X张手牌并声明一种通常锦囊牌。本轮结束时，若本轮没有声明牌进入弃牌堆，你将一张亮出牌当本轮声明牌使用。（X为你已损失的体力值且至少为1）`,\r\n            bingdielei: `并蒂恶蕾`,\r\n            bingdielei_info: `回合结束时，若本回合你弃置过亮出牌，获得一个额外的回合。`,\r\n            mark_bingdielei: `并蒂恶蕾`,\r\n            mark_bingdielei_anotherPhase: `并蒂恶蕾`,\r\n            mark_bingdielei_info: `你造成或受到过伤害的额定回合结束时，你可以弃置一张♣或装备牌以获得一个额外回合。`,\r\n            mark_quanxinquanyi: `全新全异`,\r\n            mark_quanxinquanyi_endRound: `全新全异`,\r\n            mark_quanxinquanyi_info: `一轮开始时，你可以声明一张未声明过的通常锦囊牌。本轮结束时，若本轮没有声明牌进入弃牌堆，你可以将一张牌当本轮声明牌使用。`,\r\n            qiujinzhiling: `囚禁指令`,\r\n            qiujinzhiling_info: `主公技 锁定技 其他同势力角色回合内进入弃牌堆的牌不触发『全新全异』`,\r\n            mark2_bingdielei: `并蒂恶蕾`,\r\n            mark2_bingdielei_info: `你受到伤害或令一名角色进入濒死状态的额定回合结束时，获得一个额外回合。`,\r\n            SuzukaUtako: `铃鹿诗子`,\r\n            meici: `美词`,\r\n            meici_info: `其他角色的回合开始时，若其手牌为全场最多，其本回合使用锦囊牌后，你可以观看其手牌并重铸其中一张，若因此重铸了基本牌，你也可重铸一张牌。`,\r\n            meici_append: lib.figurer(`特性：难上手`),\r\n            danlian: `耽恋`,\r\n            danlian_info: `一个回合结束时，若本回合不因使用而进入弃牌堆的牌数不少于当前回合角色的体力，\r\n\t\t\t你可选择其中一张♦/♣牌并选择另一名其他角色，当前回合角色将此牌当【乐不思蜀】/【决斗】对你选择的角色使用。每轮每项限一次。`,\r\n            danlian_append: lib.figurer(`可以把弃牌转化为【乐不思蜀】或【决斗】`),\r\n            HiguchiKaede: `樋口枫`,\r\n            zhenyin: `震音`,\r\n            zhenyin_info: `你造成伤害后，可以将目标装备区或判定区的一张牌移至其下家，若引起冲突，进行替代并对下家造成 1 点伤害。`,\r\n            saqi: `飒气`,\r\n            saqi_info: `准备阶段，你可以增加（至多到 5 ）或扣减 1 点体力上限，若选择扣减，你获得以下效果直到你的下回合开始：你使用牌结算后，所有其他角色本回合无法使用该花色的牌；发动『震音』的条件改为“你使用牌指定唯一目标后”。`,\r\n            saqi_append: lib.figurer(`特性：改变体力上限 爆发`),\r\n            mark_zhenyin: `震音`,\r\n            mark_zhenyin_info: `转换技 你使用牌指定唯一目标后，可将其①手牌区②装备或判定区的一张牌移至其下家，若引起冲突，进行替代并对下家造成1点伤害。`,\r\n            UshimiIchigo: `宇志海莓`,\r\n            kuangbaoshuangren: `狂暴双刃`,\r\n            kuangbaoshuangren_info: `锁定技 你的黑色【杀】指定目标后，需额外指定攻击范围内的一名角色为目标。你的红色【杀】无距离与次数限制，且造成伤害后可以弃置目标的坐骑牌。`,\r\n            kuangbaoshuangren_append: lib.figurer(`特性：强化出杀`),\r\n            guangsuxiabo: `光速下播`,\r\n            guangsuxiabo_info: `一个阶段结束时，若你于此阶段受到过伤害或失去了两张以上的牌，你可以摸一张牌并结束当前回合。`,\r\n            SisterClearie: `修女·克蕾雅`,\r\n            SisterClearie_ab: `修女克蕾雅`,\r\n            zhenxin: `真信之诚`,\r\n            zhenxin_info: `锁定技 防止每回合你第一次对体力值小于你的角色造成的伤害；防止体力值大于你的角色每回合对你造成的第一次伤害。`,\r\n            sczhuwei: `助危之心`,\r\n            sczhuwei_info: `其他角色的结束阶段，若其手牌或体力为全场最少，其可以与你各摸一张牌，然后你可以移动你或其装备区的一张牌。`,\r\n            sczhuwei_put_info: `令修女克蕾雅与你各摸一张牌，然后她可以移动你或其装备区的一张牌。`,\r\n            HonmaHimawari: `本间向日葵`,\r\n            YagamiKaruta: `山神歌流多`,\r\n            suisi: `髓思`,\r\n            suisi_info: `锁定技 你能且仅能用其它基本牌当【闪】，用其它锦囊牌当【无懈可击】使用。<br>\r\n\t\t\t你的【闪】或【无懈可击】进入弃牌堆时，摸一半数量的牌（向上取整）。`,\r\n            suisi_append: lib.figurer(`特性：高防御 自肃`),\r\n            liefeng: `猎风`,\r\n            liefeng_info: `结束阶段，你可以展示所有手牌，若均无法被使用，你弃置之并视为使用了等量的暗【杀】。`,\r\n            YukishiroMahiro: `雪城真寻`,\r\n            jiaoming: `骄名`,\r\n            jiaoming_info: `出牌阶段，若本阶段进入弃牌堆的牌名称均不同，你可令攻击范围内有你的一名其他角色选择一项：<br>对你使用一张【杀】；或失去1点体力并令你于本回合失去『骄名』。`,\r\n            jiaoming_append: lib.figurer(`特性：挑衅`),\r\n            changhe: `唱和`,\r\n            changhe_info: `出牌阶段结束时，若本阶段进入弃牌堆的牌中有至少三张名称相同，你可以选择一项：<br>摸两张牌；或回复1点体力。`,\r\n            OnomachiHaruka: `小野町春香`,\r\n            nvjiangrouhao: `女将柔豪`,\r\n            nvjiangrouhao_info: `锁定技 你的【杀】只能被同花色的【闪】抵消，你造成伤害后，计算与其他角色的距离-1。`,\r\n            yinlaiyaotang: `引徕药汤`,\r\n            yinlaiyaotang_info: `出牌阶段限一次，你可将任意数量手牌交给你攻击范围内的任意角色或将任意手牌置于武将牌上。\r\n\t\t\t武将牌上的牌的同名牌从与你距离为1的角色的手牌中离开时，其回复1点体力，武将牌上的那张牌返回你的手牌且你摸一张牌。`,\r\n            yinlaiyaotang_append: lib.figurer(`特性：难上手`),\r\n            SasakiSaku: `笹木咲`,\r\n            tiaolian: `咆咲`,\r\n            tiaolian_info: `每回合限一次。当你使用牌指定其他角色为目标时，可用一张手牌与其中任意名目标同时拼点，若你：没赢~取消此目标，赢~其不可响应此牌；<br>\r\n\t\t\t当你成为其他角色使用牌的目标时，你可以与其拼点，若你：赢~此牌对你无效，没赢~你不可响应此牌。`,\r\n            jiaku: `生笹`,\r\n            jiaku_info: `锁定技 你赢得拼点时，获得目标一张牌；你没赢得拼点时，摸一张牌。`,\r\n            jiaku_append: lib.figurer(`特性：无损拼点 易上手`),\r\n            LizeHelesta: `莉泽·赫露艾斯塔`,\r\n            LizeHelesta_ab: `莉泽`,\r\n            shencha: `权力审查`,\r\n            shencha_info: `准备阶段，你可以跳过本回合的摸牌阶段并观看牌堆顶3张牌，获得其中至多两张基本牌，并将其余牌置于牌堆底。若你的装备区没有牌，则你可装备其中的至多两张装备牌，若你的判定区有牌，则每有一张牌你便多观看一张。`,\r\n            helesta: `赫露圣剑`,\r\n            helesta_info: `你受到伤害时，可以弃置自己装备区的一张牌使此伤害-1。你失去装备区的牌时，你可以视为使用一张冰【杀】并摸一张牌。`,\r\n            helesta_append: lib.figurer(`特性：减伤`),\r\n            Naraka: `奈罗花`,\r\n            ming_echi: `阿斥`,\r\n            echi: `阿斥`,\r\n            echi_info: `其它角色于摸牌阶段外获得牌时，若该角色的体力值不小于你，你可亮出一张手牌并令其选择一项：<br>\r\n\t\t\t弃置一张同类型的牌；失去一点体力。`,\r\n            mudu: `哞督`,\r\n            mudu_info: `其它角色的阶段结束时，若你于此阶段内失去过牌，则可令其将两张牌移出游戏。\r\n\t\t\t当前回合结束时，该角色获得一张以此法被移出游戏的牌，你获得剩余的牌。`,\r\n            mudu_append: lib.figurer(`特性：控制`),\r\n            AibaUiha: `相羽初叶`,\r\n            KataribeTsumugu: `语部纺`,\r\n        }\r\n    };\r\n});\r\n\n\n//# sourceURL=webpack:///./character/nijisanji.ts?")},"./character/skilltype.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"toSkill\": () => (/* binding */ toSkill)\n/* harmony export */ });\nclass toSkill {\r\n    constructor(type, obj, ...arg) {\r\n        this.type = type;\r\n        if (type === 'active') {\r\n            this.enable = 'phaseUse';\r\n        }\r\n        for (let i in obj) {\r\n            this[i] = obj[i];\r\n        }\r\n        for (let i of arg) {\r\n            if (typeof i === 'string') {\r\n                if (i.split(':').length == 2) {\r\n                    let v = i.split(':');\r\n                    this[v[0]] = v[1];\r\n                }\r\n                else\r\n                    this[i] = true;\r\n            }\r\n        }\r\n    }\r\n    set(...arg) {\r\n        for (let i = 0; i < arg.length; i++) {\r\n            if (Array.isArray(arg[i]))\r\n                this.set(...arg[i]);\r\n            else if (typeof arg[i] === 'string' && arg[i + 1] !== undefined) {\r\n                this[arg[i]] = arg[i + 1];\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    setI(stor) {\r\n        this.init = (player, skill) => {\r\n            var _a;\r\n            var _b;\r\n            (_a = (_b = player.$)[skill]) !== null && _a !== void 0 ? _a : (_b[skill] = JSON.parse(JSON.stringify(stor)));\r\n        };\r\n        return this;\r\n    }\r\n    setT(tri, method) {\r\n        if (typeof tri === 'string')\r\n            tri = [tri];\r\n        if (tri instanceof Array)\r\n            tri = { player: tri };\r\n        for (let i in tri) {\r\n            if (!Array.isArray(tri[i])) {\r\n                tri[i] = [tri[i]];\r\n            }\r\n        }\r\n        for (let i in tri) {\r\n            let v = tri[i];\r\n            if (!Array.isArray(v)) {\r\n                tri[i] = [v];\r\n            }\r\n            let vb = tri[i];\r\n            if (vb instanceof Array) {\r\n                if (method instanceof Array) {\r\n                    tri[i] = vb.map(t => {\r\n                        return method.map(m => t + m);\r\n                    }).vkflat();\r\n                }\r\n                else if (typeof method === 'string') {\r\n                    tri[i] = vb.map(t => {\r\n                        return t + method;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return this.set('trigger', Object.assign(Object.assign({}, this.trigger), tri));\r\n    }\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./character/skilltype.ts?")},"./character/sololive.ts":()=>{eval("\r\nwindow.game.import('character', function (lib, game, ui, get, ai, _status) {\r\n    return {\r\n        name: \"sololive\",\r\n        connect: true,\r\n        character: {\r\n            His_HoshinoNiya: ['female', 'qun', 3, ['shushi', 'zengzhi'], ['guoV']],\r\n            Qiankesaier: ['male', 'qun', 4, ['shuangshoujiaoying', 'anyingxuemai'], ['guoV']],\r\n            heichuan: ['none', 'qun', 3, ['zhengtibuming', 'lunhuizuzhou'], ['guoV']],\r\n            YukiTuan: ['female', 'qun', 4, ['chentu', 'sishu'], ['guoV']],\r\n            Mikawa: ['male', 'qun', 4, ['zhezhuan', 'setu'], ['guoV']],\r\n            Sakurai: ['male', 'qun', 4, ['junxu', 'jingniang'], ['guoV']],\r\n            old_Eilene: ['female', 'eilene', '4/6', ['duanfu', 'daichang', 'hongtu'], ['zhu']],\r\n            old_InabaHaneru: ['female', 'nanashi', 1, ['huangtu', 'wudao', 'yinyuan'], ['zhu']],\r\n            old_HanazonoSerena: ['female', 'paryi', 3, ['old_jiumao', 'old_enfan', 'old_shiqi']],\r\n            old_UsadaPekora: ['female', 'holo', 3, ['pekoyu', 'hongshaoturou']],\r\n            gz_LizeHelesta: ['female', 'nijisanji', 3, ['tongchen', 'wangxuan']],\r\n            gz_AngeKatrina: ['female', 'nijisanji', 4, ['gz_lianjin']],\r\n            gz_Ava: ['female', 'vtuber', 4, ['baitai', 'gz_yiqu'], ['guoV']],\r\n            gz_InabaHaneru: ['female', 'upd8', 3, ['gz_jiance', 'yingqi']],\r\n            gz_xinke: ['female', 'qun', 3, ['zuigao', 'xinhuochuancheng']],\r\n            gz_YukihanaLamy: ['female', 'holo', 4, ['hanling']],\r\n            gz_KataribeTsumugu: ['female', 'nijisanji', 3, ['lingli', 'chengfo']],\r\n        },\r\n        characterSort: {\r\n            sololive: {\r\n                KurokawaPresents: ['Qiankesaier', 'heichuan'],\r\n                rewriteGuo: ['gz_LizeHelesta', 'gz_AngeKatrina', 'gz_Ava', 'gz_InabaHaneru', 'gz_xinke', 'gz_YukihanaLamy', 'gz_KataribeTsumugu'],\r\n            },\r\n        },\r\n        skill: {\r\n            duanfu: {\r\n                trigger: { player: 'useCardToPlayer', target: 'useCardToPlayer' },\r\n                priority: 100,\r\n                lastDo: true,\r\n                check(Evt, player) {\r\n                    if (player == Evt.player)\r\n                        return get.effect(Evt.target, Evt.card, player) < 0;\r\n                    return get.effect(player, Evt.card, Evt.target, player) < 0;\r\n                },\r\n                prompt(Evt, player) {\r\n                    if (player == Evt.player && Evt.target != player)\r\n                        return '指定' + get.translation(Evt.target) + '为' + get.translation(Evt.card) + '的目标，' + get.prompt('duanfu');\r\n                    else\r\n                        return '被' + get.translation(Evt.player) + '指定为' + get.translation(Evt.card) + '的目标，' + get.prompt('duanfu');\r\n                },\r\n                filter(Evt, player) {\r\n                    if (player == Evt.player && !Evt.target.isLinked())\r\n                        return true;\r\n                    if (player == Evt.target && Evt.player.isLinked())\r\n                        return true;\r\n                    return false;\r\n                },\r\n                content() {\r\n                    if (player == trigger.player) {\r\n                        trigger.target.link();\r\n                        trigger.excluded.add(trigger.target);\r\n                        game.log(trigger.getParent().card, '不会对', trigger.target, '生效');\r\n                    }\r\n                    else {\r\n                        trigger.player.link();\r\n                        trigger.excluded.add(trigger.target);\r\n                        game.log(trigger.getParent().card, '不会对', player, '生效');\r\n                    }\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        player(card, player, target, current) {\r\n                            if (get.name(card) == 'tiesuo')\r\n                                return [1, 1];\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            daichang: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return game.hasPlayer(cur => cur.isLinked());\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.loseMaxHp();\r\n                    'step 1';\r\n                    Evt.num = game.countPlayer(cur => cur.isLinked());\r\n                    player.draw(Evt.num);\r\n                    player.addTempSkill('daichang_bottom', 'phaseUseAfter');\r\n                },\r\n                subSkill: {\r\n                    bottom: {\r\n                        mark: true,\r\n                        intro: {\r\n                            name: '借贷',\r\n                            content: '造成伤害时，需将X张牌置于牌堆底。（X为场上被横置的角色数）',\r\n                        },\r\n                        trigger: { source: 'damageEnd' },\r\n                        priority: 100,\r\n                        lastDo: true,\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return player.countCards('he') && game.hasPlayer(cur => cur.isLinked());\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            Evt.num = game.countPlayer(cur => {\r\n                                return cur.isLinked();\r\n                            });\r\n                            player.choosePlayerCard('###『贷偿』###请选择要置于牌堆底的牌（先选择的在下）', player, 'he', Evt.num, true);\r\n                            'step 1';\r\n                            Evt.cards = result.cards.slice(0);\r\n                            player.lose(Evt.cards);\r\n                            'step 2';\r\n                            while (Evt.cards.length) {\r\n                                var card = Evt.cards.pop();\r\n                                card.fix();\r\n                                ui.cardPile.appendChild(card);\r\n                            }\r\n                            game.log(player, '将' + get.cnNumber(Evt.num) + '张牌置于牌堆底');\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            hongtu: {\r\n                trigger: { player: 'phaseUseEnd' },\r\n                unique: true,\r\n                limited: true,\r\n                priority: 100,\r\n                filter(Evt, player) {\r\n                    return player.isLinked() && player.hp == player.maxHp;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.storage.hongtu = true;\r\n                    player.awakenSkill('hongtu');\r\n                    Evt.going = 1;\r\n                    'step 1';\r\n                    Evt.card = get.bottomCards()[0];\r\n                    player.showCards(Evt.card);\r\n                    'step 2';\r\n                    if (player.hasUseTarget(Evt.card, false)) {\r\n                        player.chooseUseTarget(Evt.card, false, true);\r\n                    }\r\n                    else {\r\n                        Evt.going = 0;\r\n                    }\r\n                    'step 3';\r\n                    player.draw();\r\n                    'step 4';\r\n                    if (Evt.going == 1) {\r\n                        Evt.goto(1);\r\n                    }\r\n                },\r\n            },\r\n            huangtu: {\r\n                trigger: {\r\n                    global: 'gameDrawAfter',\r\n                    player: 'enterGame',\r\n                },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return game.countPlayer(cur => {\r\n                        return !cur.storage.nohp && cur.maxHp != Infinity && cur != player;\r\n                    });\r\n                },\r\n                audio: 6,\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseTarget('请选择『颂恩』的目标', lib.translate.huangtu_info, true, function (card, player, target) {\r\n                        if (target.storage.nohp || target.maxHp == Infinity)\r\n                            return false;\r\n                        return target != player && (!player.storage.huangtu2 || !player.storage.huangtu2.contains(target));\r\n                    }).set('ai', function (target) {\r\n                        var att = get.attitude(_status.event.player, target);\r\n                        if (att > 0)\r\n                            return att + 1;\r\n                        if (att == 0)\r\n                            return Math.random();\r\n                        return att;\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.target = result.targets[0];\r\n                        if (!player.storage.huangtu2)\r\n                            player.storage.huangtu2 = [];\r\n                        player.storage.huangtu2.add(Evt.target);\r\n                        player.addSkill('huangtu2');\r\n                        player.addSkill('huangtu3');\r\n                    }\r\n                    'step 2';\r\n                    var target = Evt.target;\r\n                    target.storage.huangtu_mark = player;\r\n                    target.addSkill('huangtu_mark');\r\n                    'step 3';\r\n                    var target = Evt.target;\r\n                    player.gainMaxHp(target.maxHp);\r\n                    player.recover(target.maxHp);\r\n                }\r\n            },\r\n            huangtu_mark: {\r\n                mark: 'character',\r\n                intro: {\r\n                    name: '颂恩',\r\n                    content: '当你在$的回合外体力变化时，$体力进行同样的变化，当$在自己的回合内合体力变化时，你体力进行同样的变化'\r\n                },\r\n                onremove: true,\r\n            },\r\n            huangtu2: {\r\n                trigger: { global: ['damageEnd', 'recoverEnd', 'loseHpEnd'] },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    if (player == _status.currentPhase && player == Evt.player)\r\n                        return true;\r\n                    if (Evt.player.isDead() || Evt.num == 0)\r\n                        return false;\r\n                    return player.storage.huangtu2 && player.storage.huangtu2.contains(Evt.player) && player != _status.currentPhase;\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    'step 0';\r\n                    if (trigger.player == player) {\r\n                        var target = player.storage.huangtu2[0];\r\n                        target[trigger.name](trigger.num, 'nosource');\r\n                        if (target.storage.huangtu_mark != player) {\r\n                            target.storage.huangtu_mark = player;\r\n                        }\r\n                        target.markSkill('huangtu_mark');\r\n                        Evt.finish();\r\n                    }\r\n                    'step 1';\r\n                    var target = trigger.player;\r\n                    if (target.storage.huangtu_mark != player) {\r\n                        target.storage.huangtu_mark = player;\r\n                    }\r\n                    target.markSkill('huangtu_mark');\r\n                    game.delayx();\r\n                    'step 2';\r\n                    player[trigger.name](trigger.num, 'nosource');\r\n                },\r\n                onremove(player) {\r\n                    if (!player.storage.huangtu2)\r\n                        return;\r\n                    var splayer = player.storage.huangtu2[0];\r\n                    splayer.removeSkill('huangtu_mark');\r\n                    delete player.storage.huangtu2;\r\n                },\r\n            },\r\n            huangtu3: {\r\n                trigger: { global: 'dieBegin' },\r\n                silent: true,\r\n                filter(Evt, player) {\r\n                    return Evt.player == player || player.storage.huangtu2 && player.storage.huangtu2.contains(player);\r\n                },\r\n                content() {\r\n                    if (player == Evt.player)\r\n                        player.removeSkill('huangtu2');\r\n                    else\r\n                        player.storage.huangtu2.remove(Evt.player);\r\n                }\r\n            },\r\n            wudao: {\r\n                init(player, skill) {\r\n                    var list = [];\r\n                    for (var i = 0; i < lib.inpile.length; i++) {\r\n                        var name = lib.inpile[i];\r\n                        if (get.type(name) == 'basic')\r\n                            list.push(name);\r\n                    }\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = list;\r\n                },\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    return player.countCards('h', function (card, player) {\r\n                        return Evt.player.storage.wudao.contains(get.name(card));\r\n                    }) > 0;\r\n                },\r\n                filterCard(card, player, Evt) {\r\n                    return player.storage.wudao.contains(get.name(card));\r\n                },\r\n                prepare(cards, player) {\r\n                    player.$throw(cards, 1000);\r\n                    game.log(player, '将', cards, '置入了弃牌堆');\r\n                },\r\n                position: 'h',\r\n                discard: false,\r\n                loseTo: 'discardPile',\r\n                visible: true,\r\n                delay: 0.5,\r\n                content() {\r\n                    player.draw();\r\n                    player.storage.wudao.remove(get.name(Evt.cards[0]));\r\n                },\r\n                ai: {\r\n                    basic: {\r\n                        order: 1\r\n                    },\r\n                    result: {\r\n                        player: 1,\r\n                    },\r\n                },\r\n                group: ['wudao_useEnd', 'wudao_clear'],\r\n                subSkill: {\r\n                    useEnd: {\r\n                        trigger: { player: 'phaseUseEnd' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            return player.storage.wudao.length == 0;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            if (player.storage.wudao.length) {\r\n                                Evt.finish();\r\n                            }\r\n                            else {\r\n                                player.logSkill('wudao');\r\n                            }\r\n                            'step 1';\r\n                            var list = ['摸两张牌', '回复体力'];\r\n                            game.broadcastAll(function (player, list) {\r\n                                var dialog = ui.create.dialog('选择一项', [list, 'vcard']);\r\n                                player.chooseButton(dialog, true);\r\n                            }, player, list);\r\n                            'step 2';\r\n                            if (result.buttons[0].link[2] == '摸两张牌') {\r\n                                player.draw(2);\r\n                            }\r\n                            if (result.buttons[0].link[2] == '回复体力') {\r\n                                player.recover();\r\n                            }\r\n                        }\r\n                    },\r\n                    clear: {\r\n                        trigger: { player: 'phaseAfter' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            var list = [];\r\n                            for (var i = 0; i < lib.inpile.length; i++) {\r\n                                var name = lib.inpile[i];\r\n                                if (get.type(name) == 'basic')\r\n                                    list.push(name);\r\n                            }\r\n                            player.storage.wudao = list;\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            yinyuan: {\r\n                zhuSkill: true,\r\n                trigger: { player: 'wudao_useEndAfter' },\r\n                filter(Evt, player) {\r\n                    if (!player.hasZhuSkill('yinyuan'))\r\n                        return false;\r\n                    return Evt._result;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a, _b, _c, _d;\r\n                    var next = player.chooseTarget();\r\n                    next.set('filterTarget', function (card, player, target) {\r\n                        return target.group == player.group;\r\n                    });\r\n                    if ((_a = trigger._result) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        next.set('prompt2', '失去一点体力上限，令其回复一点体力');\r\n                    }\r\n                    else if (((_b = trigger._result) === null || _b === void 0 ? void 0 : _b.links) && trigger._result.links[0][3] == '回复体力') {\r\n                        next.set('prompt2', '失去一点体力上限，令其摸两张牌');\r\n                    }\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.loseMaxHp();\r\n                        if ((_c = trigger._result) === null || _c === void 0 ? void 0 : _c.length) {\r\n                            result.targets[0].recover(player);\r\n                        }\r\n                        else if (((_d = trigger._result) === null || _d === void 0 ? void 0 : _d.links[0][3]) == '回复体力') {\r\n                            result.targets[0].draw(2, player);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            old_maoliang: {\r\n                mark: true,\r\n                locked: true,\r\n                marktext: '粮',\r\n                intro: {\r\n                    content: 'cards',\r\n                    onunmark: 'throw',\r\n                    cardAround: true\r\n                },\r\n            },\r\n            old_jiumao: {\r\n                audio: 'jiumao',\r\n                global: 'old_jiumao_put',\r\n                group: ['old_jiumao_gain'],\r\n                subSkill: {\r\n                    put: {\r\n                        trigger: {\r\n                            player: 'phaseDiscardBegin',\r\n                        },\r\n                        check(Evt, player) {\r\n                            var target = game.findPlayer(cur => {\r\n                                return cur.hasSkill('old_jiumao');\r\n                            });\r\n                            return target && get.attitude(player, target) > 0;\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return !player.hasSkill('old_jiumao') && player.countCards('he')\r\n                                && game.hasPlayer(cur => {\r\n                                    return cur.hasSkill('old_jiumao');\r\n                                });\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            player.chooseCard(get.prompt('old_jiumao'), 'he', [1, Infinity]).set('ai', card => {\r\n                                var player = _status.event.player;\r\n                                if (player.needsToDiscard() && ui.selected.cards.length < player.countCards('h'))\r\n                                    return 6 - get.useful(card);\r\n                                else\r\n                                    return 2 - get.useful(card);\r\n                            }).set('prompt', '###『啾猫』###你在弃牌阶段开始时，可将任意数量的牌放在自己武将牌旁，称为「猫粮」');\r\n                            'step 1';\r\n                            if (result.bool) {\r\n                                player.lose(result.cards, ui.special, 'visible', 'toStorage');\r\n                                player.$give(result.cards, player, false);\r\n                                if (player.storage.old_maoliang) {\r\n                                    player.storage.old_maoliang = player.storage.old_maoliang.concat(result.cards);\r\n                                }\r\n                                else {\r\n                                    player.storage.old_maoliang = result.cards;\r\n                                }\r\n                                player.addSkill('old_maoliang');\r\n                                player.markSkill('old_maoliang');\r\n                                player.showCards(player.storage.old_maoliang, \"猫粮\");\r\n                            }\r\n                            else\r\n                                Evt.finish();\r\n                            'step 2';\r\n                            game.delayx();\r\n                        }\r\n                    },\r\n                    gain: {\r\n                        popup: false,\r\n                        trigger: {\r\n                            player: 'phaseBegin',\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            Evt.targets = game.filterPlayer(cur => {\r\n                                return cur.hasSkill('old_maoliang');\r\n                            });\r\n                            Evt.videoId = lib.status.videoId++;\r\n                            game.broadcastAll(function (targets, id) {\r\n                                var dialog = ui.create.dialog('选择猫粮');\r\n                                targets.forEach(function (p) {\r\n                                    if (p.storage.old_maoliang.length) {\r\n                                        dialog.addText(get.translation(p));\r\n                                        dialog.add(p.storage.old_maoliang);\r\n                                    }\r\n                                });\r\n                                dialog.videoId = id;\r\n                            }, Evt.targets, Evt.videoId);\r\n                            var next = player.chooseButton([1, player.maxHp]);\r\n                            next.set('dialog', Evt.videoId);\r\n                            'step 1';\r\n                            game.broadcastAll('closeDialog', Evt.videoId);\r\n                            if (result.bool) {\r\n                                Evt.cards = result.links;\r\n                                player.logSkill('old_jiumao');\r\n                                Evt.targets.forEach(function (p) {\r\n                                    var all = p.storage.old_maoliang;\r\n                                    var cho = [];\r\n                                    p.storage.old_maoliang = [];\r\n                                    all.forEach(card => {\r\n                                        if (Evt.cards.indexOf(card) != -1) {\r\n                                            cho.push(card);\r\n                                            p.addTempSkill('old_jiumao_cancel');\r\n                                        }\r\n                                        else {\r\n                                            p.storage.old_maoliang.push(card);\r\n                                        }\r\n                                    });\r\n                                    p.$give(cho, player, false);\r\n                                    player.gain(cho, 'fromStorage');\r\n                                    p.syncStorage('old_maoliang');\r\n                                    p.markSkill('old_maoliang');\r\n                                    game.log(player, \"获得了\", p, \"的猫粮：\", cho);\r\n                                });\r\n                                player.line(game.filterPlayer(cur => {\r\n                                    return cur.hasSkill('old_jiumao_cancel');\r\n                                }), 'green');\r\n                            }\r\n                        }\r\n                    },\r\n                    cancel: {\r\n                        mod: {\r\n                            targetEnabled(card, player, target) {\r\n                                if (get.color(card) == 'black' && player.hasSkill('old_jiumao')) {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            old_enfan: {\r\n                popup: false,\r\n                trigger: {\r\n                    global: 'dying'\r\n                },\r\n                filter(Evt, player) {\r\n                    return Evt.player.hasSkill('old_jiumao') || Evt.player.hasSkill('old_maoliang');\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.targets = game.filterPlayer(cur => {\r\n                        return cur.hasSkill('old_maoliang');\r\n                    });\r\n                    Evt.videoId = lib.status.videoId++;\r\n                    game.broadcastAll(function (targets, id, current) {\r\n                        var dialog = ui.create.dialog('选择猫粮');\r\n                        targets.forEach(function (p) {\r\n                            if (p != current && p.storage.old_maoliang.length) {\r\n                                dialog.addText(get.translation(p));\r\n                                dialog.add(p.storage.old_maoliang);\r\n                            }\r\n                        });\r\n                        dialog.videoId = id;\r\n                    }, Evt.targets, Evt.videoId, trigger.player);\r\n                    var next = player.chooseButton([1, player.maxHp]);\r\n                    next.set('dialog', Evt.videoId);\r\n                    'step 1';\r\n                    game.broadcastAll('closeDialog', Evt.videoId);\r\n                    if (result.bool) {\r\n                        Evt.cards = result.links;\r\n                        var targets = [];\r\n                        var less = false;\r\n                        Evt.targets.forEach(function (p) {\r\n                            var temp = p.storage.old_maoliang;\r\n                            p.storage.old_maoliang = [];\r\n                            temp.forEach(card => {\r\n                                if (Evt.cards.indexOf(card) != -1) {\r\n                                    p.$give(card, trigger.player, false);\r\n                                    trigger.player.gain(card, 'fromStorage');\r\n                                    targets.push(p);\r\n                                }\r\n                                else {\r\n                                    p.storage.old_maoliang.push(card);\r\n                                    less = true;\r\n                                }\r\n                            });\r\n                            p.syncStorage('old_maoliang');\r\n                            p.markSkill('old_maoliang');\r\n                        });\r\n                        if (!less) {\r\n                            trigger.player.recover();\r\n                        }\r\n                        player.logSkill('old_enfan', trigger.player);\r\n                        trigger.player.line(targets, 'green');\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                }\r\n            },\r\n            old_shiqi: {\r\n                audio: 'shiqi',\r\n                forced: true,\r\n                trigger: {\r\n                    player: 'phaseZhunbeiBegin',\r\n                },\r\n                filter(Evt, player) {\r\n                    var cnt = game.filterPlayer(cur => {\r\n                        return player.countCards('h') < cur.countCards('h');\r\n                    });\r\n                    return cnt == 0;\r\n                },\r\n                content() {\r\n                    player.addTempSkill('old_shiqi_addDam');\r\n                    let buff = '.player_buff';\r\n                    game.broadcastAll(function (player, buff) {\r\n                        player.node.old_shiqi = ui.create.div(buff, player.node.avatar);\r\n                        player.node.old_shiqi2 = ui.create.div(buff, player.node.avatar2);\r\n                    }, player, buff);\r\n                },\r\n                subSkill: {\r\n                    addDam: {\r\n                        direct: true,\r\n                        silent: true,\r\n                        trigger: {\r\n                            source: 'damageBegin',\r\n                        },\r\n                        content() {\r\n                            player.removeSkill('old_shiqi_addDam');\r\n                            trigger.num++;\r\n                        },\r\n                        onremove(player, skill) {\r\n                            game.broadcastAll(function (player) {\r\n                                player.node.old_shiqi.delete();\r\n                                player.node.old_shiqi2.delete();\r\n                                delete player.node.old_shiqi;\r\n                                delete player.node.old_shiqi2;\r\n                            }, player);\r\n                        },\r\n                        ai: {\r\n                            damageBonus: true,\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            pekoyu: {\r\n                audio: 'tuquan',\r\n                init(player) {\r\n                    player.storage.pekoyu = [];\r\n                },\r\n                marktext: \"peko\",\r\n                intro: {\r\n                    name: '嚣张咚鼓',\r\n                    content(storage, player, skill) {\r\n                        if (storage.length) {\r\n                            return '本回合已通过花色为' + get.translation(storage) + '的牌发动了技能';\r\n                        }\r\n                        else {\r\n                            return '本回合尚未发动技能';\r\n                        }\r\n                    },\r\n                },\r\n                trigger: { player: 'useCardAfter' },\r\n                priority: 111,\r\n                filter(Evt, player) {\r\n                    if (!player.isPhaseUsing())\r\n                        return false;\r\n                    if (!(get.type(Evt.card) == 'basic' || get.type(Evt.card) == 'trick'))\r\n                        return false;\r\n                    if (Evt.result.bool == false || Evt.iswuxied)\r\n                        return false;\r\n                    for (let i of player.getStorage('pekoyu')) {\r\n                        if (get.suit(Evt.card) == i)\r\n                            return false;\r\n                    }\r\n                    return true;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a, _b;\r\n                    player.draw(),\r\n                        player.storage.pekoyu.add(get.suit(trigger.card));\r\n                    'step 1';\r\n                    player.chooseToDiscard('###『嚣张咚鼓』###然后，弃置一张牌', 'h', true).set('ai', card => {\r\n                        var name = card.name;\r\n                        if (name == 'jiu')\r\n                            return 12;\r\n                        if (get.type(card) == 'trick')\r\n                            return 4;\r\n                        return 10 - get.value(card);\r\n                    });\r\n                    'step 2';\r\n                    if (result.bool && ((_a = result.cards) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        if (get.name(result.cards[0], player) == 'jiu')\r\n                            player.chooseTarget('###『嚣张咚鼓』###选择一名角色，令其摸两张牌').set('ai', function (target) {\r\n                                var player = _status.event.player;\r\n                                if (player.countCards('h') < player.getHandcardLimit())\r\n                                    return target == player;\r\n                                return get.attitude(player, target) * (target.isDamaged() ? 2 : 1);\r\n                            });\r\n                    }\r\n                    'step 3';\r\n                    if (result.bool && ((_b = result.targets) === null || _b === void 0 ? void 0 : _b.length)) {\r\n                        var target = result.targets[0];\r\n                        player.line(target, 'thunder');\r\n                        target.draw(2, player);\r\n                    }\r\n                },\r\n                group: ['pekoyu_update', 'pekoyu_back'],\r\n                subSkill: {\r\n                    update: {\r\n                        trigger: { player: 'phaseBegin' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        content() {\r\n                            player.markSkill('pekoyu');\r\n                        }\r\n                    },\r\n                    back: {\r\n                        trigger: { player: 'phaseAfter' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        content() {\r\n                            player.unmarkSkill('pekoyu');\r\n                            player.storage.pekoyu = [];\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            hongshaoturou: {\r\n                audio: true,\r\n                filter(Evt, player) {\r\n                    return !player.isLinked();\r\n                },\r\n                enable: \"phaseUse\",\r\n                usable: 1,\r\n                content() {\r\n                    player.link(true);\r\n                    player.addMark('hongshaoturou', 1, false);\r\n                    player.addTempSkill('hongshaoturou_viewAs');\r\n                    player.addTempSkill('hongshaoturou_shao');\r\n                    let buff = '.player_buff';\r\n                    game.broadcastAll(function (player, buff) {\r\n                        player.node.hongshaoturou = ui.create.div(buff, player.node.avatar);\r\n                    }, player, buff);\r\n                },\r\n                onremove(player, skill) {\r\n                    player.removeSkill('hongshaoturou_shao');\r\n                },\r\n                subSkill: {\r\n                    viewAs: {\r\n                        mod: {\r\n                            cardname(card, player) {\r\n                                if (card.name == 'shan' || card.name == 'tao')\r\n                                    return 'jiu';\r\n                                if (get.subtype(card) == 'equip3' || get.subtype(card) == 'equip4' || get.subtype(card) == 'equip6')\r\n                                    return 'tiesuo';\r\n                            },\r\n                        },\r\n                        trigger: { player: ['useCard1', 'respond', 'loseBeign'] },\r\n                        firstDo: true,\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return Evt.card.name == 'jiu' && !Evt.skill &&\r\n                                Evt.cards.length == 1 && (Evt.cards[0].name == 'tao' || Evt.cards[0].name == 'shan');\r\n                        },\r\n                        content() {\r\n                        },\r\n                    },\r\n                    shao: {\r\n                        trigger: { player: 'phaseEnd' },\r\n                        marktext: '炎',\r\n                        mark: true,\r\n                        forced: true,\r\n                        intro: {\r\n                            content: '当前回合结束后受到一点火焰伤害',\r\n                            name: '自煲自足',\r\n                        },\r\n                        onremove(player, skill) {\r\n                            game.broadcastAll(function (player) {\r\n                                if (player.node.hongshaoturou) {\r\n                                    player.node.hongshaoturou.delete();\r\n                                    delete player.node.hongshaoturou;\r\n                                }\r\n                            }, player);\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            player.damage('fire');\r\n                            player.removeSkill('hongshaoturou_shao');\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            baitai: {\r\n                audio: 'liuxuan_keai',\r\n                trigger: { player: 'phaseBegin' },\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    if (player.storage.baitai_A !== 0)\r\n                        player.storage.baitai_A = 0;\r\n                    if (player.storage.baitai_B !== 0)\r\n                        player.storage.baitai_B = 0;\r\n                    if (player.storage.baitai_C !== 0)\r\n                        player.storage.baitai_C = 0;\r\n                    if (player.storage.baitai_D !== 0)\r\n                        player.storage.baitai_D = 0;\r\n                    if (player.storage.baitai_E !== 0)\r\n                        player.storage.baitai_E = 0;\r\n                    return player.countCards('h');\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.showHandcards();\r\n                    'step 1';\r\n                    player.storage.baitai_A += player.countCards('h', { suit: 'diamond' });\r\n                    player.markSkill('baitai_A');\r\n                    'step 2';\r\n                    player.storage.baitai_B += player.countCards('h', { suit: 'club' });\r\n                    player.markSkill('baitai_B');\r\n                    'step 3';\r\n                    player.storage.baitai_C += player.countCards('h', { suit: 'heart' });\r\n                    player.markSkill('baitai_C');\r\n                    'step 4';\r\n                    player.storage.baitai_D += player.countCards('h', { suit: 'spade' });\r\n                    player.markSkill('baitai_D');\r\n                    'step 5';\r\n                    player.storage.baitai_E += Math.min(player.storage.baitai_A, player.storage.baitai_B, player.storage.baitai_C, player.storage.baitai_D);\r\n                    if (player.storage.baitai_E > 0)\r\n                        player.markSkill('baitai_E');\r\n                },\r\n                group: ['baitai_clear', 'baitai_A', 'baitai_B', 'baitai_C', 'baitai_D', 'baitai_E'],\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { global: 'phaseAfter' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        filter(Evt, player) {\r\n                            return player.storage.baitai_A || player.storage.baitai_B || player.storage.baitai_C || player.storage.baitai_D || player.storage.baitai_E;\r\n                        },\r\n                        content() {\r\n                            if (player.storage.baitai_A !== 0)\r\n                                player.storage.baitai_A = 0;\r\n                            if (player.storage.baitai_B !== 0)\r\n                                player.storage.baitai_B = 0;\r\n                            if (player.storage.baitai_C !== 0)\r\n                                player.storage.baitai_C = 0;\r\n                            if (player.storage.baitai_D !== 0)\r\n                                player.storage.baitai_D = 0;\r\n                            if (player.storage.baitai_E !== 0)\r\n                                player.storage.baitai_E = 0;\r\n                            player.unmarkSkill('baitai_A');\r\n                            player.unmarkSkill('baitai_B');\r\n                            player.unmarkSkill('baitai_C');\r\n                            player.unmarkSkill('baitai_D');\r\n                            player.unmarkSkill('baitai_E');\r\n                        }\r\n                    },\r\n                    A: {\r\n                        mod: {\r\n                            attackFrom(from, to, distance) {\r\n                                return distance - from.storage.baitai_A;\r\n                            }\r\n                        },\r\n                        marktext: '歌',\r\n                        intro: { name: '百态', content: '本回合内攻击范围+#' },\r\n                    },\r\n                    B: {\r\n                        trigger: { player: 'phaseDrawBegin2' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return !Evt.numFixed && player.storage.baitai_B;\r\n                        },\r\n                        content() {\r\n                            var Buff = player.storage.baitai_B;\r\n                            trigger.num += Buff;\r\n                        },\r\n                        marktext: '之',\r\n                        intro: { name: '百态', content: '摸牌阶段摸牌数+#' },\r\n                    },\r\n                    C: {\r\n                        mod: {\r\n                            maxHandcard(player, num) {\r\n                                var Buff = player.storage.baitai_C;\r\n                                return num += Buff;\r\n                            },\r\n                        },\r\n                        marktext: '母',\r\n                        intro: { name: '百态', content: '本回合手牌上限+#' },\r\n                    },\r\n                    D: {\r\n                        mod: {\r\n                            cardUsable(card, player, num) {\r\n                                var Buff = player.storage.baitai_D;\r\n                                if (card.name == 'sha' && player.isPhaseUsing())\r\n                                    return num + Buff;\r\n                            },\r\n                        },\r\n                        marktext: '水',\r\n                        intro: { name: '百态', content: '出牌阶段可使用【杀】的次数+#' },\r\n                    },\r\n                    E: {\r\n                        mod: {\r\n                            selectTarget(card, player, range) {\r\n                                console.log(card, range);\r\n                                if (!Array.isArray(range) || range[1] == -1)\r\n                                    return;\r\n                                if (player.storage.baitai_E > 0)\r\n                                    range[1] += player.storage.baitai_E;\r\n                            },\r\n                        },\r\n                        marktext: '🐚',\r\n                        intro: { name: '百态', content: '使用牌可指定的目标+#' },\r\n                    },\r\n                }\r\n            },\r\n            gz_yiqu: {\r\n                trigger: { player: 'damageAfter' },\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return Evt.source && player.countCards('he');\r\n                },\r\n                prompt2(Evt, player) {\r\n                    return '你可以交给' + get.translation(Evt.source) + '一张牌，然后摸两张牌';\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseCard(true, 'he').set('ai', card => {\r\n                        var att = _status.event.att;\r\n                        return 3 + att > get.value(card);\r\n                    }).set('att', get.attitude(player, trigger.source));\r\n                    'step 1';\r\n                    if (result.bool && result.cards) {\r\n                        player.give(result.cards, trigger.source, 'giveAuto');\r\n                        player.draw(2);\r\n                    }\r\n                },\r\n            },\r\n            tongchen: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return game.hasPlayer(cur => {\r\n                        if (player.inRange(cur)) {\r\n                            if (player.countCards('h') != cur.countCards('h'))\r\n                                return true;\r\n                            var es = player.getCards('e');\r\n                            for (var i = 0; i < es.length; i++) {\r\n                                if (cur.isEmpty(get.subtype(es[i])) && (player.countCards('e') != cur.countCards('e')))\r\n                                    return true;\r\n                            }\r\n                            var js = player.getCards('j');\r\n                            for (var i = 0; i < js.length; i++) {\r\n                                if (cur.canAddJudge(js[i]) && (player.countCards('j') != cur.countCards('j')))\r\n                                    return true;\r\n                            }\r\n                        }\r\n                        return false;\r\n                    });\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var next = player.moveCard(function (card, player, target) {\r\n                        if (target == player)\r\n                            return true;\r\n                        if (ui.selected.targets.length && ui.selected.targets[0] != player)\r\n                            return false;\r\n                        if (player.inRange(target)) {\r\n                            if (player.countCards('h') != target.countCards('h'))\r\n                                return true;\r\n                            var es = player.getCards('e');\r\n                            for (var i = 0; i < es.length; i++) {\r\n                                if (target.isEmpty(get.subtype(es[i])) && (player.countCards('e') != target.countCards('e')))\r\n                                    return true;\r\n                            }\r\n                            var js = player.getCards('j');\r\n                            for (var i = 0; i < js.length; i++) {\r\n                                if (target.canAddJudge(js[i]) && (player.countCards('j') != target.countCards('j')))\r\n                                    return true;\r\n                            }\r\n                        }\r\n                        return false;\r\n                    });\r\n                    next.moveHandcard = true;\r\n                    'step 1';\r\n                    if (result.bool && result.card) {\r\n                        console.log(result);\r\n                        if (result.targets[0].countCards(result.position) == result.targets[1].countCards(result.position))\r\n                            player.draw();\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 10,\r\n                    player: 1,\r\n                }\r\n            },\r\n            wangxuan: {\r\n                mod: {\r\n                    maxHandcard(player, num) {\r\n                        if (player.isMaxHp() || player.isMaxEquip() && player.countCards('e'))\r\n                            return num * 2;\r\n                    },\r\n                    attackFrom(from, to, distance) {\r\n                        if (from._wangxuan_tmp)\r\n                            return;\r\n                        var num = distance;\r\n                        from._wangxuan_tmp = true;\r\n                        if (from.isMaxHp() || from.isMaxEquip() && from.countCards('e'))\r\n                            num -= from.getAttackRange();\r\n                        delete from._wangxuan_tmp;\r\n                        return num;\r\n                    }\r\n                },\r\n            },\r\n            gz_lianjin: {\r\n                trigger: { player: 'useCardAfter' },\r\n                filter(Evt, player) {\r\n                    if (!player.storage.gz_lianjin_mark)\r\n                        player.storage.gz_lianjin_mark = [];\r\n                    if (!player.storage.gz_lianjin_used)\r\n                        player.storage.gz_lianjin_used = [];\r\n                    return Evt.card && player.countCards('h');\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseCard(get.prompt2('gz_lianjin'), function (card, player, target) {\r\n                        return true;\r\n                    }).ai = card => {\r\n                        if (get.type(card) == 'equip')\r\n                            return 8 - get.value(card);\r\n                        return 5 - get.value(card);\r\n                    };\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.logSkill('gz_lianjin');\r\n                        player.$give(result.cards, player, false);\r\n                        player.lose(result.cards, ui.special, 'toStorage');\r\n                        player.markAuto('gz_lianjin_mark', result.cards);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    var list = {};\r\n                    player.storage.gz_lianjin_mark.filter(card => {\r\n                        if (!list[get.suit(card)])\r\n                            list[get.suit(card)] = 0;\r\n                        list[get.suit(card)]++;\r\n                    });\r\n                    Evt.list = list;\r\n                    if (Object.keys(Evt.list).length >= 3 && !player.getStorage('gz_lianjin_used').contains('A')) {\r\n                        Evt.chooseEquip = true;\r\n                        Evt.useSha = true;\r\n                    }\r\n                    else if (!player.getStorage('gz_lianjin_used').contains('B')) {\r\n                        for (var i in list) {\r\n                            if (list[i] >= 3)\r\n                                Evt.chooseEquip = i;\r\n                            Evt.useWuzhong = true;\r\n                        }\r\n                    }\r\n                    'step 3';\r\n                    if (Evt.chooseEquip) {\r\n                        player.chooseCardButton(player.storage.gz_lianjin_mark, 3, true, '选择发动『炼金』的牌').set('filterButton', function (button) {\r\n                            var link = button.link;\r\n                            if (_status.event.chosen !== true)\r\n                                return _status.event.chosen == get.suit(link);\r\n                            else {\r\n                                for (var i = 0; i < ui.selected.buttons.length; i++) {\r\n                                    if (get.suit(link) == get.suit(ui.selected.buttons[i].link))\r\n                                        return false;\r\n                                }\r\n                                return true;\r\n                            }\r\n                        }).set('chosen', Evt.chooseEquip);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 4';\r\n                    if (result.bool) {\r\n                        var cards = result.links.slice(0);\r\n                        player.unmarkAuto('gz_lianjin_mark', cards);\r\n                        Evt.equips = cards.filter(card => get.type(card) == 'equip');\r\n                        Evt.others = cards.removeArray(Evt.equips);\r\n                        Evt.num = 0;\r\n                        if (!Evt.equips[Evt.num])\r\n                            Evt.goto(10);\r\n                    }\r\n                    'step 5';\r\n                    Evt.card = Evt.equips[Evt.num];\r\n                    Evt.effect = ['equip'];\r\n                    if (get.color(Evt.card) == 'red') {\r\n                        Evt.effect.add('lebu');\r\n                    }\r\n                    if (get.color(Evt.card) == 'black') {\r\n                        Evt.effect.add('bingliang');\r\n                    }\r\n                    player.chooseTarget('###' + get.prompt('gz_lianjin') + '###将' + get.translation(Evt.card) + '置于一名角色的区域内').set('ai', function (target) {\r\n                        var player = _status.event.player;\r\n                        var effect = _status.event.effect;\r\n                        var card = _status.event.card;\r\n                        var gain = 0;\r\n                        if (effect.contains('lebu') && target.canAddJudge('lebu'))\r\n                            gain += get.effect(target, { name: 'lebu' }, player, player);\r\n                        if (effect.contains('bingliang') && target.canAddJudge('bingliang'))\r\n                            gain += get.effect(target, { name: 'bingliang' }, player, player);\r\n                        return gain * (-get.attitude(player, target) - 2) + get.value(card) * (get.attitude(player, target) + 2) / 4;\r\n                    }).set('effect', Evt.effect).set('card', Evt.card);\r\n                    'step 6';\r\n                    if (result.bool) {\r\n                        Evt.target = result.targets[0];\r\n                        Evt.target.classList.add('glow');\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 7';\r\n                    var controls = ['判定区', '装备区', '取消选择'];\r\n                    if (Evt.effect.contains('lebu') && !Evt.target.canAddJudge('lebu') || Evt.effect.contains('bingliang') && !Evt.target.canAddJudge('bingliang'))\r\n                        controls.shift();\r\n                    player.chooseControl(controls).set('ai', function () {\r\n                        return _status.event.index;\r\n                    }).set('att', get.attitude(player, Evt.target));\r\n                    'step 8';\r\n                    Evt.target.classList.remove('glow');\r\n                    switch (result.index) {\r\n                        case 0: {\r\n                            player.$give(Evt.card, Evt.target, false);\r\n                            if (Evt.effect.contains('lebu') && Evt.target.canAddJudge('lebu'))\r\n                                Evt.target.addJudge({ name: 'lebu' }, [Evt.card]);\r\n                            else if (Evt.effect.contains('bingliang') && Evt.target.canAddJudge('bingliang'))\r\n                                Evt.target.addJudge({ name: 'bingliang' }, [Evt.card]);\r\n                            break;\r\n                        }\r\n                        case 1: {\r\n                            player.$give(Evt.card, Evt.target, false);\r\n                            Evt.target.equip(Evt.card);\r\n                            break;\r\n                        }\r\n                        case 2: {\r\n                            Evt.goto(9);\r\n                            break;\r\n                        }\r\n                    }\r\n                    'step 9';\r\n                    Evt.num++;\r\n                    if (Evt.equips[Evt.num])\r\n                        Evt.goto(5);\r\n                    'step 10';\r\n                    if (Evt.others && Evt.others.length) {\r\n                        player.$throw(Evt.others, 1000);\r\n                        game.cardsDiscard(Evt.others);\r\n                        game.log(Evt.otherss, '被置入了弃牌堆');\r\n                    }\r\n                    'step 11';\r\n                    if (Evt.useSha) {\r\n                        player.storage.gz_lianjin_used.add('A');\r\n                        player.chooseUseTarget({ name: 'sha', nature: 'fire' }, '是否使用第一张火【杀】？', false);\r\n                    }\r\n                    else if (Evt.useWuzhong) {\r\n                        player.storage.gz_lianjin_used.add('B');\r\n                        player.chooseUseTarget({ name: 'wuzhong' }, '是否使用第一张【无中生有】？', false);\r\n                    }\r\n                    'step 12';\r\n                    if (Evt.useSha) {\r\n                        player.chooseUseTarget({ name: 'sha', nature: 'fire' }, '是否使用第二张火【杀】？', false);\r\n                    }\r\n                    else if (Evt.useWuzhong) {\r\n                        player.chooseUseTarget({ name: 'wuzhong' }, '是否使用第二张【无中生有】？', false);\r\n                    }\r\n                },\r\n                group: ['gz_lianjin_mark'],\r\n                subSkill: {\r\n                    used: {},\r\n                    mark: {\r\n                        intro: {\r\n                            content: 'cards',\r\n                            onunmark: 'throw',\r\n                        },\r\n                        marktext: '洁',\r\n                        trigger: { global: 'phaseAfter' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            player.storage.gz_lianjin_used = [];\r\n                        },\r\n                        cardAround: true\r\n                    }\r\n                }\r\n            },\r\n            gz_jiance: {\r\n                trigger: { player: 'zhibiAfter' },\r\n                filter(Evt, player) {\r\n                    console.log(Evt);\r\n                    if (!Evt.cards || !Evt.skill || Evt.skill.indexOf('gz_jiance_') != 0)\r\n                        return false;\r\n                    var type2 = get.type2(Evt.cards[0]);\r\n                    return Evt.control && Evt.control == '手牌' && Evt.target.countCards('h', card => get.type2(card) == type2) == 0;\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    player.choosePlayerCard(trigger.target, [1, Infinity], get.prompt('gz_jiance'), '重铸其中的任意张').set('ai', function (button) {\r\n                        var val = get.buttonValue(button);\r\n                        if (get.attitude(_status.event.player, get.owner(button.link)) > 0)\r\n                            return 0.5 - val;\r\n                        return val;\r\n                    }).set('visible', true);\r\n                    'step 1';\r\n                    if (result.bool && result.cards) {\r\n                        trigger.target.showHandcards('『监策』展示手牌');\r\n                        Evt.cards = result.cards;\r\n                        game.delayx();\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    var num = Evt.cards.length;\r\n                    player.logSkill('gz_jiance', target);\r\n                    trigger.target.lose(Evt.cards, ui.discardPile).set('visible', true);\r\n                    trigger.target.$throw(Evt.cards, 1000);\r\n                    game.log(trigger.target, '将', Evt.cards, '置入了弃牌堆');\r\n                    trigger.target.draw(num);\r\n                },\r\n                group: ['gz_jiance_spade', 'gz_jiance_club'],\r\n                subSkill: {\r\n                    spade: {\r\n                        enable: 'chooseToUse',\r\n                        viewAs: { name: 'zhibi' },\r\n                        usable: 1,\r\n                        filterCard: { suit: 'spade' },\r\n                    },\r\n                    club: {\r\n                        enable: 'chooseToUse',\r\n                        viewAs: { name: 'zhibi' },\r\n                        usable: 1,\r\n                        filterCard: { suit: 'club' },\r\n                    }\r\n                }\r\n            },\r\n            yingqi: {\r\n                trigger: { global: ['loseAfter', 'cardsDiscardAfter'] },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'cardsDiscard' && (Evt.getParent().name != 'orderingDiscard'\r\n                        || (!Evt.getParent().relatedEvent || !Evt.getParent().relatedEvent.player || Evt.getParent().relatedEvent.name == 'judge'\r\n                            || Evt.getParent().relatedEvent.player != player)))\r\n                        return false;\r\n                    if (Evt.name == 'lose' && (Evt.position != ui.discardPile\r\n                        || Evt.player != player))\r\n                        return false;\r\n                    if (_status.currentPhase && _status.currentPhase != player && _status.currentPhase.maxHp != Infinity && _status.currentPhase.countCards('h') < _status.currentPhase.maxHp) {\r\n                        for (var i = 0; i < Evt.cards.length; i++) {\r\n                            if (get.position(Evt.cards[i]) == 'd') {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                    return false;\r\n                },\r\n                check(Evt, player) {\r\n                    if (_status.currentPhase.maxHp < _status.currentPhase.countCards('h'))\r\n                        return get.attitude(player, _status.currentPhase) < 0;\r\n                    return get.attitude(player, _status.currentPhase) > 0;\r\n                },\r\n                logTarget(Evt) {\r\n                    return _status.currentPhase;\r\n                },\r\n                content() {\r\n                    Evt.target = _status.currentPhase;\r\n                    if (Evt.target.maxHp < Evt.target.countCards('h'))\r\n                        Evt.target.chooseToDiscard(true, Evt.target.countCards('h') - Evt.target.maxHp);\r\n                    else\r\n                        Evt.target.gain(get.cards(Evt.target.maxHp - Evt.target.countCards('h')), 'draw');\r\n                },\r\n                group: 'yingqi_drawBy',\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: { global: 'loseAfter' },\r\n                        filter(Evt, player) {\r\n                            if (Evt.name == 'cardsDiscard' && (Evt.getParent().name != 'orderingDiscard'\r\n                                || (!Evt.getParent().relatedEvent || !Evt.getParent().relatedEvent.player || Evt.getParent().relatedEvent.name == 'judge'\r\n                                    || Evt.getParent().relatedEvent.player == player)))\r\n                                return false;\r\n                            if (Evt.name == 'lose' && (Evt.position != ui.discardPile\r\n                                || Evt.player == player))\r\n                                return false;\r\n                            if (_status.currentPhase == player && player.maxHp != Infinity && player.countCards('h') < player.maxHp) {\r\n                                for (var i = 0; i < Evt.cards.length; i++) {\r\n                                    if (get.position(Evt.cards[i]) == 'd') {\r\n                                        return true;\r\n                                    }\r\n                                }\r\n                            }\r\n                            return false;\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            'step 0';\r\n                            var choice = (player.maxHp < player.countCards('h')) ? (get.attitude(trigger.player, player) < 0) : (get.attitude(trigger.player, player) > 0);\r\n                            trigger.player.chooseBool('是否发动『迎喫』，令' + get.translation(player) + '摸' + get.cnNumber(player.maxHp - player.countCards('h')) + '张牌？').set('choice', choice);\r\n                            'step 1';\r\n                            if (result.bool) {\r\n                                player.logSkill('yingqi');\r\n                                trigger.player.line(player, 'green');\r\n                                if (player.maxHp < player.countCards('h'))\r\n                                    player.chooseToDiscard(true, player.countCards('h') - player.maxHp);\r\n                                else\r\n                                    player.gain(get.cards(player.maxHp - player.countCards('h')), 'draw');\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            zuigao: {\r\n                intro: {\r\n                    content: 'cards',\r\n                    onunmark: 'throw',\r\n                },\r\n                cardAround: true,\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') > 0;\r\n                },\r\n                filterCard: true,\r\n                position: 'he',\r\n                filterTarget(card, player, target) {\r\n                    return target != player;\r\n                },\r\n                check(card) {\r\n                    var player = _status.event.player;\r\n                    var zuigao = player.getStorage('zuigao');\r\n                    for (var i of zuigao) {\r\n                        if (get.suit(i) == get.suit(card))\r\n                            return 7 - get.value(card);\r\n                    }\r\n                    return 1 - get.value(card);\r\n                },\r\n                discard: false,\r\n                toStorage: true,\r\n                delay: false,\r\n                content() {\r\n                    'step 0';\r\n                    player.$give(cards, player, false);\r\n                    player.markAuto('zuigao', cards);\r\n                    'step 1';\r\n                    if (get.mode() == 'guozhan' && target.isUnseen(2)) {\r\n                        player.chooseControl(true).set('prompt', '令目标执行一项').set('choiceList', ['展示所有手牌并弃置与此将牌上花色相同的牌', '明置一张武将牌']);\r\n                    }\r\n                    else {\r\n                        Evt.goto(4);\r\n                    }\r\n                    'step 2';\r\n                    if (result.control == '选项一') {\r\n                        player.chat('展示所有手牌并弃置与此将牌上花色相同的牌');\r\n                        game.delayx();\r\n                        Evt.goto(4);\r\n                    }\r\n                    else if (result.control == '选项二') {\r\n                        player.chat('明置一张武将牌');\r\n                        game.delayx();\r\n                        var list = [];\r\n                        if (target.isUnseen(0))\r\n                            list.push('主将');\r\n                        if (target.isUnseen(1))\r\n                            list.push('副将');\r\n                        if (list.length > 1)\r\n                            target.chooseControl(['主将', '副将']).set('ai', function () {\r\n                                return Math.random() > 0.5 ? 0 : 1;\r\n                            }).prompt = '选择并展示一张武将牌';\r\n                        else\r\n                            Evt._result = { index: list[0] == '主将' ? 0 : 1 };\r\n                    }\r\n                    'step 3';\r\n                    if (result.index == 0) {\r\n                        target.showCharacter(0);\r\n                    }\r\n                    else {\r\n                        target.showCharacter(1);\r\n                    }\r\n                    'step 4';\r\n                    target.showHandcards();\r\n                    game.delay(1.2);\r\n                    'step 5';\r\n                    var suits = get.suit3(player.getStorage('zuigao'));\r\n                    var discards = target.getCards('he', { suit: suits });\r\n                    target.discard(discards);\r\n                },\r\n                ai: {\r\n                    order: 8,\r\n                    result: {\r\n                        player: -0.2,\r\n                        target(player, target) {\r\n                            if (target.countCards('h'))\r\n                                return -(player.getStorage('zuigao').length + 1);\r\n                        },\r\n                    },\r\n                },\r\n                group: 'zuigao_draw',\r\n                subSkill: {\r\n                    draw: {\r\n                        trigger: { player: 'phaseDrawBegin' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return !Evt.numFixed;\r\n                        },\r\n                        content() {\r\n                            trigger.num = game.countGroup();\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            xinhuochuancheng: {\r\n                trigger: { player: ['damageEnd', 'dyingBegin'], source: ['damageEnd'] },\r\n                filter(Evt, player) {\r\n                    return player.getStorage('zuigao').length && game.hasPlayer(cur => {\r\n                        return cur != player;\r\n                    });\r\n                },\r\n                direct: true,\r\n                locked: true,\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseTarget(true, '选择『心火传承』的目标', function (card, player, target) {\r\n                        return target != player;\r\n                    });\r\n                    'step 1';\r\n                    Evt.target = result.targets[0];\r\n                    if (Evt.target) {\r\n                        player.logSkill('xinhuochuancheng', Evt.target);\r\n                        var cards = player.getStorage('zuigao');\r\n                        if (trigger.name == 'dying') {\r\n                            player.unmarkAuto('zuigao', cards);\r\n                            player.$give(cards, Evt.target);\r\n                            Evt.target.gain(cards);\r\n                            Evt.finish();\r\n                        }\r\n                        else {\r\n                            player.chooseCardButton(cards, '选择交给' + get.translation(Evt.target) + '的一张牌', true).set('ai', function (button) {\r\n                                return get.attitude2(_status.event.target) * get.value(button.link, _status.event.target, 'raw');\r\n                            }).set('target', Evt.target);\r\n                        }\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    if (result.bool && result.links) {\r\n                        var cards = result.links.slice(0);\r\n                        player.unmarkAuto('zuigao', cards);\r\n                        player.$give(cards, Evt.target);\r\n                        Evt.target.gain(cards);\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten(player, target) {\r\n                        if (target.getStorage('zuigao').length)\r\n                            return 1.5;\r\n                        return 1;\r\n                    },\r\n                },\r\n            },\r\n            hanling: {\r\n                trigger: { player: 'damageBegin3' },\r\n                filter(Evt, player) {\r\n                    return Evt.source && player.countCards('h') > Evt.source.countCards('h');\r\n                },\r\n                check(Evt, player) {\r\n                    return player.countCards('h') - Evt.source.countCards('h') <= Evt.num;\r\n                },\r\n                prompt(Evt, player) {\r\n                    return '你受到来源为' + get.translation(Evt.source) + '的伤害，可以将手牌弃至' + get.cnNumber(Evt.source) + '张以防止此伤害';\r\n                },\r\n                logTarget: 'source',\r\n                content() {\r\n                    'step 0';\r\n                    Evt.num = player.countCards('h') - trigger.source.countCards('h');\r\n                    player.chooseToDiscard('『寒灵』：需要弃置' + Evt.num + '张牌', Evt.num, true, 'h');\r\n                    'step 1';\r\n                    trigger.changeToZero();\r\n                },\r\n                group: 'hanling_drawBy',\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: { player: 'phaseEnd' },\r\n                        filter(Evt, player) {\r\n                            var num = 0;\r\n                            num += player.getHistory('useCard', evt => {\r\n                                return evt.targets && (evt.targets.length > 1 || evt.targets[0] != player);\r\n                            }).length;\r\n                            return !num && game.hasPlayer(cur => {\r\n                                return cur.countCards('h') < player.countCards('h');\r\n                            });\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            'step 0';\r\n                            player.chooseTarget(get.prompt2('hanling'), function (card, player, target) {\r\n                                return target.countCards('h') < player.countCards('h');\r\n                            }).set('ai', function (target) {\r\n                                var player = _status.event.player;\r\n                                var num = player.countCards('h') - target.countCards('h');\r\n                                return num * get.attitude(player, target);\r\n                            });\r\n                            'step 1';\r\n                            if (result.bool && result.targets) {\r\n                                Evt.num = player.countCards('h');\r\n                                Evt.target = result.targets[0];\r\n                            }\r\n                            else {\r\n                                Evt.finish();\r\n                            }\r\n                            'step 2';\r\n                            if (Evt.target) {\r\n                                Evt.target.drawTo(Evt.num);\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            lingli: {\r\n                trigger: { global: 'useCard' },\r\n                clickChange: '休眠',\r\n                clickable(player) {\r\n                    if (player.storage.lingli_clickChange === undefined)\r\n                        player.storage.lingli_clickChange = false;\r\n                    else\r\n                        player.storage.lingli_clickChange = !player.storage.lingli_clickChange;\r\n                },\r\n                clickableFilter(player) {\r\n                    return player.storage.lingli_clickChange !== false;\r\n                },\r\n                filter(Evt, player) {\r\n                    if (player.storage.lingli_clickChange === false)\r\n                        return false;\r\n                    return Evt.targets && Evt.targets.length == 1 && Evt.cards && Evt.cards.length;\r\n                },\r\n                check(Evt, player) {\r\n                    if (get.attitude(player, Evt.player) > 0) {\r\n                        return get.effect(Evt.targets[0], Evt.card, Evt.player, player) > 1 && !['equip', 'delay'].contains(get.type(Evt.card)) && get.name(Evt.card) == get.name(Evt.cards[0]) && get.name(Evt.card) != 'jiu';\r\n                    }\r\n                    if (get.attitude(player, Evt.player) < 0) {\r\n                        return get.effect(Evt.targets[0], Evt.card, Evt.player, Evt.player) > 1 && (['equip', 'delay'].contains(get.type(Evt.card)) || get.name(Evt.card) != 'jiu');\r\n                    }\r\n                    return 0;\r\n                },\r\n                prompt(Evt, player) {\r\n                    return get.translation(Evt.player) + '使用' + get.translation(Evt.card) + '指定' + get.translation(Evt.targets) + '为目标，' + get.prompt('lingli');\r\n                },\r\n                round: 1,\r\n                logTarget: 'player',\r\n                content() {\r\n                    'step 0';\r\n                    trigger.cancel();\r\n                    'step 1';\r\n                    trigger.player.gain(trigger.cards, 'gain2').gaintag.add('lingli');\r\n                    trigger.player.addTempSkill('lingli_ganshe');\r\n                },\r\n                subSkill: {\r\n                    ganshe: {\r\n                        mod: {\r\n                            aiOrder(player, card, num) {\r\n                                if (card.hasGaintag && card.hasGaintag('lingli'))\r\n                                    return num / 10;\r\n                            },\r\n                        },\r\n                        ai: {\r\n                            effect: {\r\n                                player(card, player, target, current) {\r\n                                    if (card.hasGaintag && card.hasGaintag('lingli'))\r\n                                        return [2, 0, 2, 0];\r\n                                }\r\n                            }\r\n                        },\r\n                        trigger: { player: 'useCardAfter', global: 'phaseEnd' },\r\n                        direct: true,\r\n                        filterx(Evt, player) {\r\n                            if (!player.isPhaseUsing())\r\n                                return false;\r\n                            return player.getHistory('lose', evt => {\r\n                                if (evt.getParent() != Evt)\r\n                                    return false;\r\n                                for (var i in evt.gaintag_map) {\r\n                                    if (evt.gaintag_map[i].contains('lingli'))\r\n                                        return true;\r\n                                }\r\n                                return false;\r\n                            }).length > 0;\r\n                        },\r\n                        filter(Evt, player) {\r\n                            if (Evt.name == 'phase')\r\n                                return true;\r\n                            if (!lib.skill.lingli_ganshe.filterx(Evt, player))\r\n                                return false;\r\n                            if (Evt.targets && Evt.targets.length > 0) {\r\n                                var info = get.info(Evt.card);\r\n                                if (info.allowMultiple == false)\r\n                                    return false;\r\n                                if (Evt.targets && !info.multitarget) {\r\n                                    if (game.hasPlayer(cur => {\r\n                                        return Evt.targets.contains(cur) && lib.filter.targetEnabled2(Evt.card, player, cur) && lib.filter.targetInRange(Evt.card, player, cur);\r\n                                    })) {\r\n                                        return true;\r\n                                    }\r\n                                }\r\n                            }\r\n                            return false;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            if (trigger.name == 'useCard') {\r\n                                var card = game.createCard(trigger.card.name, trigger.card.suit, trigger.card.number, trigger.card.nature);\r\n                                player.useCard(card, (trigger._targets || trigger.targets).slice(0), trigger.cards).skill = trigger.skill || 'lingli_ganshe';\r\n                            }\r\n                            else {\r\n                                player.removeGaintag('lingli');\r\n                                Evt.finish();\r\n                            }\r\n                            'step 1';\r\n                            var evt = trigger.getParent('phaseUse');\r\n                            if ((evt === null || evt === void 0 ? void 0 : evt.name) == 'phaseUse') {\r\n                                evt.skipped = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            chengfo: {\r\n                enable: ['chooseToUse'],\r\n                viewAs: { name: 'yiyi' },\r\n                check(card) {\r\n                    if (get.type(card) == 'equip' && get.position(card) == 'h')\r\n                        return 4 - get.value(card);\r\n                    return 6 - get.value(card);\r\n                },\r\n                filterCard(card, player) {\r\n                    if (player.getStorage('chengfo_mark').contains(get.suit(card)))\r\n                        return false;\r\n                    return true;\r\n                },\r\n                onuse(result, player) {\r\n                    if (!player.storage.chengfo_mark)\r\n                        player.storage.chengfo_mark = [];\r\n                    player.storage.chengfo_mark.add(get.suit(result.card, player));\r\n                    player.markSkill('chengfo_mark');\r\n                },\r\n                ai: {\r\n                    order: 10,\r\n                    player: 1,\r\n                },\r\n                group: ['chengfo_drawBy', 'chengfo_clear'],\r\n                subSkill: {\r\n                    mark: {\r\n                        onremove: true,\r\n                        intro: {\r\n                            content(storage, player, skill) {\r\n                                if (storage.length) {\r\n                                    return '本回合『闭目成佛』使用过的花色：' + get.translation(storage);\r\n                                }\r\n                            },\r\n                        }\r\n                    },\r\n                    drawBy: {\r\n                        trigger: { global: 'yiyiEnd' },\r\n                        filter(Evt, player) {\r\n                            return Evt.skill && Evt.skill == 'chengfo' && Evt.player != player && Evt.discards && (Evt.discards.filter(card => get.type(card) == 'equip').length || Evt.discards.length);\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            'step 0';\r\n                            player.chooseCardButton('『闭目成佛』：使用其中一张装备牌', trigger.discards).set('filterButton', function (button) {\r\n                                return get.type(button.link) == 'equip';\r\n                            });\r\n                            'step 1';\r\n                            if (result.bool && result.links) {\r\n                                player.useCard(result.links[0], player);\r\n                            }\r\n                            'step 2';\r\n                            var list = [];\r\n                            for (var i of trigger.discards) {\r\n                                list.push(get.color(i));\r\n                            }\r\n                            if (!function (array) {\r\n                                if (array.length > 0) {\r\n                                    return !array.some(function (value, index) {\r\n                                        return value !== array[0];\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    return false;\r\n                                }\r\n                            }(list))\r\n                                Evt.finish();\r\n                            'step 3';\r\n                            player.draw();\r\n                        },\r\n                    },\r\n                    clear: {\r\n                        firstDo: true,\r\n                        silent: true,\r\n                        direct: true,\r\n                        trigger: {\r\n                            player: ['phaseAfter']\r\n                        },\r\n                        content() {\r\n                            delete player.storage.chengfo_mark;\r\n                            player.unmarkSkill('chengfo_mark');\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            g_hidden_ai: {\r\n                charlotte: true,\r\n                ai: {\r\n                    threaten(player, target) {\r\n                        if (get.mode() != 'guozhan' && target.isUnseen(2))\r\n                            return 0.0001;\r\n                        return 1;\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        card: {},\r\n        dynamicTranslate: {},\r\n        translate: {\r\n            KurokawaPresents: `Kurokawa Presents`,\r\n            rewriteGuo: `国战共通`,\r\n            db_atk: `进攻对策`,\r\n            db_atk1: `全军出击`,\r\n            db_atk2: `分兵围城`,\r\n            db_def: `防御对策`,\r\n            db_def1: `奇袭粮道`,\r\n            db_def2: `开城诱敌`,\r\n            old_Eilene: `旧艾琳`,\r\n            duanfu: `断缚`,\r\n            duanfu_info: `你的牌指定目标时，你可以将其横置并使此牌对其无效；你成为牌指定的目标时，你可以将来源解除横置并使此牌对你无效。`,\r\n            daichang: `贷偿`,\r\n            daichang_info: `出牌阶段限一次，你可以扣减一点体力上限并摸X张牌，然后你于本阶段内造成伤害时，需将X张牌置于牌堆底。（X为场上被横置的角色数）`,\r\n            daichang_append: lib.figurer(`特性：难上手`),\r\n            hongtu: `宏图`,\r\n            hongtu_info: `<font color=#faa>限定技</font> 你的出牌阶段结束时，若你处于横置状态且体力为上限：你可以亮出牌堆底牌并使用之，然后摸一张牌，重复此操作直到你无法使用亮出牌。`,\r\n            hongtu_append: lib.figurer(`特性：爆发`),\r\n            old_InabaHaneru: `旧因幡`,\r\n            huangtu: `颂恩`,\r\n            huangtu_info: `锁定技 游戏开始时，你选择一名其他角色，增加与其相同的体力上限和体力。回合外，其体力变化时，你的体力进行同样的变化；回合内，你体力变化时，其体力进行同样的变化。`,\r\n            wudao: `五道`,\r\n            wudao_info: `出牌阶段，你可以重铸一张基本牌，你以此法重铸的牌须与本回合之前重铸的牌名不同。出牌阶段结束时，若本回合你重铸了所有牌名的基本牌，你可以摸两张牌或回复1点体力。`,\r\n            wudao_useEnd_info: `本回合你重铸了所有牌名的基本牌，你可以摸两张牌或回复1点体力。`,\r\n            yinyuan: `缘斩`,\r\n            yinyuan_info: `主公技 若你在出牌阶段结束时发动『五道』，你可以扣减一点体力上限，令一名同势力角色执行未被选择一项。`,\r\n            old_HanazonoSerena: `旧花園猫`,\r\n            old_maoliang: `猫粮(旧)`,\r\n            old_jiumao: `啾猫(旧)`,\r\n            old_jiumao_info: `其他角色在弃牌阶段开始时，可将任意数量的牌放在其武将牌旁，称为「猫粮」。你的回合开始时，可获得数量不大于你体力上限的「猫粮」，若如此做，你无法使用黑色牌指定你获得牌的来源为目标直到回合结束。`,\r\n            old_enfan: `恩返(旧)`,\r\n            old_enfan_info: `发动过『啾猫』的角色濒死时，你可把其以外角色的数量不大于你体力上限的「猫粮」交给该名角色，然后若场上没有「猫粮」，其回复1点体力。`,\r\n            old_shiqi: `势起(旧)`,\r\n            old_shiqi_info: `锁定技 准备阶段，若你的手牌数为全场最多，本回合你造成的第一次伤害+1。`,\r\n            old_shiqi_append: lib.figurer(`特性：爆发`),\r\n            old_UsadaPekora: `旧兔田`,\r\n            pekoyu: `嚣张咚鼓`,\r\n            pekoyu_info: `回合内，当你的非装备牌生效并结算后，若本回合未因此花色的牌发动此技能，你可以摸一张牌然后弃置一张牌。若你因此弃置了【酒】，你可以令一名角色摸两张牌。`,\r\n            hongshaoturou: `自煲自足`,\r\n            hongshaoturou_info: `出牌阶段限一次，你可以横置武将牌，令你在回合结束时受到1点火焰伤害。然后本回合内你的【闪】和【桃】视为【酒】，你的坐骑牌视为【铁索连环】。`,\r\n            gz_Ava: `国战向晚`,\r\n            gz_yiqu: `亦趋`,\r\n            gz_yiqu_info: `每回合限一次，当你受到伤害后，你可以交给来源一张牌。若与对你造成伤害的牌花色相同，你摸两张牌。`,\r\n            baitai: `百态`,\r\n            baitai_info: `回合开始时，你可以展示所有手牌，根据各花色的牌数于本回合增加对应值：♦️~攻击范围，♣️~摸牌阶段摸牌数，♥️~手牌上限，♠️~出牌阶段可使用【杀】的次数；一组四种花色~使用牌额外选择目标。`,\r\n            gz_LizeHelesta: `国战莉泽`,\r\n            tongchen: `同尘`,\r\n            tongchen_info: `出牌阶段限一次，若你攻击范围内有角色某一区域内的牌数与你在该区域的牌数不等，你可在你与其的该区域间移动一张牌。然后若你与其在该区域内的牌数相等，你摸一张牌。`,\r\n            wangxuan: `王选`,\r\n            wangxuan_info: `锁定技 当你的体力或装备区装备为全场最多时，你的手牌上限和攻击范围翻倍。`,\r\n            gz_InabaHaneru: `国战因幡はねる`,\r\n            gz_InabaHaneru_ab: `国战因幡`,\r\n            gz_jiance: `监策`,\r\n            gz_jiance_spade: `监策♠`,\r\n            gz_jiance_club: `监策♣`,\r\n            gz_jiance_info: `每回合每项限一次，你可以将一张♠️/♣️牌当【知己知彼】使用。若选择观看手牌且其中没有你转化牌的类型，你可以展示之并重铸其中任意张。`,\r\n            yingqi: `迎喫`,\r\n            yingqi_info: `其他角色的牌在你的回合进入弃牌堆后，其可以令你将手牌数调整至体力上限。你的牌在其他角色的回合进入弃牌堆后，你可以令其将手牌数调整至体力上限。`,\r\n            gz_xinke: `心萪`,\r\n            zuigao: `最高指令`,\r\n            zuigao_info: `摸牌阶段，你摸等同于场上势力数的牌。出牌阶段限一次，你可以将一张牌置于此将牌上，令一名角色：展示所有手牌并弃置与此将牌上花色相同的牌；或明置一张武将牌。`,\r\n            xinhuochuancheng: `心心之火`,\r\n            xinhuochuancheng_info: `锁定技 当你造成或受到伤害后，你需将此将牌上的一张牌交给其他角色。你进入濒死状态时，若此将牌上有牌，你需将此将牌上所有牌交给其他角色并回复1点体力。`,\r\n            gz_YukihanaLamy: `雪花菈米`,\r\n            hanling: `寒灵`,\r\n            hanling_info: `当你受到伤害时，若来源手牌数小于你，你可以将手牌弃至与其相等防止此伤害。你的回合结束时，若本回合你未对其他角色使用过牌，你可以令一名角色摸牌至与你手牌相同。`,\r\n            gz_KataribeTsumugu: `语部纺`,\r\n            lingli: `灵力干涉`,\r\n            lingli_info: `轮次技 当一张牌指定唯一角色为目标时，你可以令之无效并返回来源手牌。然后其本回合使用此牌时结束当前阶段并额外结算一次。`,\r\n            chengfo: `闭目成佛`,\r\n            chengfo_info: `你可以将一张本回合未使用过花色的牌当【以逸待劳】使用。其他角色因此弃置牌后，若包含装备牌，你可以使用其中一张；若为同色，你摸一张牌。`,\r\n            gz_AngeKatrina: `国战安洁`,\r\n            gz_lianjin: `炼金`,\r\n            gz_lianjin_info: `当你使用一张牌后，可以将一张手牌置于此将牌上。然后若此将牌上有三种不同/相同花色的牌，你将其中的装备牌置入场上，弃置其余的牌，视为使用了两张：火【杀】/【无中生有】，然后本回合不再触发此项。`,\r\n        }\r\n    };\r\n});\r\n\n\n//# sourceURL=webpack:///./character/sololive.ts?")},"./character/vtuber.ts":()=>{eval("\r\nwindow.game.import('character', function (lib, game, ui, get, ai, _status) {\r\n    return {\r\n        name: 'vtuber',\r\n        connect: true,\r\n        character: {\r\n            KizunaAI: ['female', 'upd8', 4, ['ailian', 'qixu'], ['zhu']],\r\n            Siro: ['female', 'dotlive', 4, ['zhongxinghezou', 'xiugong'], ['zhu']],\r\n            Bacharu: ['male', 'dotlive', 4, ['zuodun', 'baidao']],\r\n            MiraiAkari: ['female', 'qun', 4, ['shiyilijia', 'seqinghuashen']],\r\n            XiaoxiXiaotao: ['female', 'xuyan', 3, ['yipengyidou', 'renleiguancha'], ['guoV']],\r\n            Reine: ['female', 'xuyan', 4, ['yueyao', 'kongling'], ['guoV']],\r\n            KaguyaLuna: ['female', 'qun', 3, ['jiajiupaidui', 'kuangzuiluanwu']],\r\n            InabaHaneru: ['female', 'nanashi', '2/3', ['jiance', 'chanbing', 'buyu'], ['zhu']],\r\n            UmoriHinako: ['female', 'nanashi', 4, ['hongyi', 'jueshou']],\r\n            SuouPatra: ['female', 'nanashi', 4, ['mianmo', 'tiaolv']],\r\n            TenkaiTsukasa: ['male', 'upd8', 4, ['pojie', 'dazhen']],\r\n            Ava: ['female', 'asoul', 4, ['yiqu', 'wanxian'], ['guoV']],\r\n            Bella: ['female', 'asoul', '3/4', ['aswusheng', 'gunxun'], ['guoV']],\r\n            Carol: ['female', 'asoul', 4, ['shixi', 'xueta', 'yuezhi'], ['guoV']],\r\n            Diana: ['female', 'asoul', 4, ['quanyu', 'wulian'], ['guoV']],\r\n            EQueen: ['female', 'asoul', 4, ['yehua', 'fengqing'], ['guoV']],\r\n            Pudding: ['female', 'psp', 4, ['tianlve', 'luxian'], ['guoV', 'P_SP']],\r\n            AyanaNana: ['female', 'psp', '2/4', ['erni', 'shouru', 'chonghuang', 'yinzun'], ['zhu', 'guoV', 'P_SP']],\r\n            KurenaiAkane: ['female', 'psp', 4, ['quankai', 'heyuan'], ['guoV', 'P_SP']],\r\n            Lovely: ['female', 'psp', 4, ['yangyao', 'shili'], ['guoV', 'P_SP']],\r\n            AkiRinco: ['female', 'psp', 4, ['jiren', 'luqiu', 'canxin'], ['guoV', 'P_SP']],\r\n            Seki: ['female', 'psp', 4, ['zhuxing', 'shanzhu'], ['guoV', 'P_SP']],\r\n            Kaf: ['female', 'vwp', 3, ['liuhua', 'yishi', 'shiji'], ['zhu']],\r\n            Rim: ['female', 'vwp', 4, ['shenghua', 'zhanchong'],],\r\n            IsekaiJoucho: ['female', 'vwp', 4, ['baiqing', 'shuangxing'],],\r\n            Harusaruhi: ['female', 'vwp', 4, ['huoju', 'zouyang'],],\r\n            Koko: ['female', 'vwp', 4, ['xiezhen', 'wenzhou'],],\r\n            Kafu: ['female', 'vwp', 3, ['nisheng', 'jingyan']],\r\n            SephiraSu: ['female', 'qun', 3, ['mishu', 'xingchen']],\r\n            HIMEHINA: ['female', 'qun', 3, ['jichu', 'mingshizhige']],\r\n            Yousa: ['female', 'VirtuaReal', 3, ['niaoji', 'ysxiangxing'], ['guoV']],\r\n            Azusa: ['female', 'VirtuaReal', 4, ['zhiyue', 'zhengniu'], ['guoV']],\r\n            Shaun: ['female', 'VirtuaReal', 3, ['juxiao', 'shshenyan'], ['guoV']],\r\n            Aza: ['male', 'VirtuaReal', 3, ['qiding', 'chouxin'], ['guoV']],\r\n            Chiyuu: ['female', 'VirtuaReal', 4, ['anyou', 'mingyou'], ['guoV']],\r\n            Mari: ['female', 'VirtuaReal', 4, ['tingzhu', 'xuemo'], ['guoV']],\r\n            Miki: ['female', 'VirtuaReal', 4, ['xingxu', 'qingsui'], ['guoV']],\r\n            Mahiru: ['female', 'VirtuaReal', 4, ['jusheng', 'xingqu'], ['guoV']],\r\n            Menherachan: ['female', 'NetEase', 4, ['shangbei', 'qianqing'], ['guoV']],\r\n            InuyamaTamaki: ['male', 'nori', 3, ['rongyaochengyuan', 'hundunliandong']],\r\n            ShirayukiMishiro: ['female', 'nori', 3, ['tianyi', 'nveyu']],\r\n            xiaoxiayu: ['female', 'xuefeng', 4, ['tanghuang', 'xiejiang'], ['guoV']],\r\n            tianxixi: ['female', 'xuefeng', 3, ['lache', 'danfu'], ['guoV']],\r\n            jike: ['female', 'qun', 3, ['qianjiwanbian'], ['guoV']],\r\n        },\r\n        characterSort: {\r\n            vtuber: {\r\n                asoul2: ['Ava', 'Bella', 'Carol', 'Diana', 'EQueen'],\r\n                VirtuaReal2: ['Yousa', 'Aza', 'Shaun', 'Miqiutu', , 'Azusa'],\r\n                psp2: ['Pudding', 'AyanaNana', 'AkiRinco', 'KurenaiAkane', 'Lovely'],\r\n            }\r\n        },\r\n        characterTitle: {\r\n            KizunaAI: '#r绊虚之始',\r\n            KaguyaLuna: '#p不羁的夜空之月',\r\n            XiaoxiXiaotao: '#p研虚之实',\r\n            Ava: '#rA_SOUL',\r\n            Bella: '#rA_SOUL',\r\n            Diana: '#rA_SOUL',\r\n            Carol: '#rA_SOUL',\r\n            EQueen: '#rA_SOUL',\r\n        },\r\n        characterReplace: {\r\n            KizunaAI: ['re_KizunaAI', 'KizunaAI', 'sp_KizunaAI'],\r\n            MiraiAkari: ['re_MiraiAkari', 'MiraiAkari'],\r\n            TenkaiTsukasa: ['re_TenkaiTsukasa', 'TenkaiTsukasa'],\r\n            KaguyaLuna: ['re_KaguyaLuna', 'KaguyaLuna'],\r\n            XiaoxiXiaotao: ['re_XiaoxiXiaotao', 'XiaoxiXiaotao'],\r\n            InuyamaTamaki: ['re_InuyamaTamaki', 'InuyamaTamaki'],\r\n            InabaHaneru: ['InabaHaneru', 'gz_InabaHaneru', 'old_InabaHaneru'],\r\n            Azusa: ['Azusa', 'ap_Azusa'],\r\n            Nana7mi: ['Nana7mi', 'ap_Nana7mi'],\r\n            Ava: ['Ava', 'sp_Ava', 'sea_Ava', 'gz_Ava'],\r\n            Diana: ['Diana', 'sp_Diana'],\r\n        },\r\n        characterIntro: {\r\n            KizunaAI: '绊爱者，沛国焦郡人也，生于V始元年，以人工智障号之，有《FAQ赋》流传于世，爱有贤相，名曰望，左右心害其能，因谗之，望行仁义而怀anti，遂还相位，是以绊爱得王V界，威加四海，世人多之.',\r\n            MiraiAkari: \"未来明（V始二年），生于荆楚郡望，少时猎虎不慎坠马，遂记忆尽失，同族有长者初音未来，携明识山见水，阿满童年如此。V始十九年，绊爱既首义，天下豪杰并起，明亦王于西南，定国号为ENTUM，后为小人夺之，满知无经纬之才，遁入山中，不闻世事。\",\r\n            InuyamaTamaki: '犬山玉姬者，草莽微末之士也，原为东都一亭长，后绊爱首义，豪杰并起，犬山自叹曰，金鳞岂是池中物，遂聚族起义，然命运多舛，先败朝廷，又为四天王猜忌，幸而频频与杏社、虹社联动，渐得民心，立国时已四十有六。犬山帐下将军皆封之曰姬，世人戏称之曰娘子军，犬山亦不屑一顾。',\r\n            XiaoxiXiaotao: '小希者，魔都之望族也，魔都的破坏者，屡欲炸虚研村，后为小桃止之，魔都土妹，穿模之神，多有传说流传于世，小桃者，小希之后辈也，昔有伯乐识千里马，小桃制小希亦是之矣，有沙雕观察广为人知。',\r\n            KaguyaLuna: '辉夜月者，燕赵之侠客也，生于V始元年，性豪爽，声奇特，有可卡因酱之美名，luna少时绊爱交好，亲涉矢石披坚执锐，成绊爱之功业，然rap一战，恩断义绝，自领军建国，国号为辉夜月channel，追随者数以兆记。',\r\n            UmoriHinako: '宇森雏子，异界之蝙蝠者，随黄兔因幡氏战于列阳东，伐乌桓、鲜卑、高句丽诸部，取之以红旗，修律，重末，百姓安，震周之诸侯。雏子善战，屡自鼓乐助御敌，谓之《攻击战》，后友人常效之。然雏子初修律，列阳东遭百年不遇之饥，敌者饥之为“绝收将军”，雏子不意此事。V始十九年，为仇设计所刺，不幸卒。后二年，地尽数入于京畿神乐咩之手，咩与雏子为旧识，遂善置此地旧民。',\r\n            InabaHaneru: '因幡哈涅鲁，异界之黄兔者，精通东瀛书花五道，起势以后，割据幽州及扶余，后建社，号曰‘佚’。佚社初效始皇绊爱之治，怀柔四方，广纳封臣，固有宇森雏子、周防帕特拉之能臣，然因幡氏深知功不足自坐此位，终不称王，后竟服于绊爱势。所幸周无大患，因幡氏亦与神乐咩犬山玉姬之势远交联合，佚社渐广，绊爱势溃后，即背，改与魔族周防帕特拉共治。至于雏子卒，因幡甚悲，至常自怨，引怀柔之首共治，杏户氏与龙龙崎氏由此入朝。后之佚社，终黯淡于杏国虹社者。',\r\n            Qiankesaier: '',\r\n        },\r\n        skill: {\r\n            ailian: {\r\n                audio: 1,\r\n                enable: 'phaseUse',\r\n                position: 'h',\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('ailianUsable'))\r\n                        return false;\r\n                    return player.countCards('h') > 0;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    if (!player.storage.targets)\r\n                        player.storage.targets = [];\r\n                    if (player.countCards('h') > 0) {\r\n                        player.chooseTarget('指定一个给予牌的目标', function (card, player, target) {\r\n                            if (target == player)\r\n                                return false;\r\n                            if (player.storage.targets) {\r\n                                for (var i = 0; i < player.storage.targets.length; i++) {\r\n                                    if (player.storage.targets[i] == target) {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                                return true;\r\n                            }\r\n                            else {\r\n                                return true;\r\n                            }\r\n                        }, function (target) {\r\n                            var player = _status.event.player;\r\n                            if (get.attitude(player, target) <= 0)\r\n                                return 0;\r\n                            else\r\n                                return get.attitude(player, target);\r\n                        });\r\n                    }\r\n                    else {\r\n                        Evt.goto(3);\r\n                    }\r\n                    'step 1';\r\n                    if (result === null || result === void 0 ? void 0 : result.bool) {\r\n                        if (result.targets) {\r\n                            if (!player.storage.targets)\r\n                                player.storage.targets = [];\r\n                            if (!Evt.targets.contains(result.targets[0])) {\r\n                                Evt.targets.addArray(result.targets);\r\n                                player.storage.targets.addArray(result.targets);\r\n                            }\r\n                            Evt.target = result.targets[0];\r\n                        }\r\n                        player.chooseCard(true, 'h', '选择要交给' + get.translation(Evt.target) + '的牌', [1, Infinity]).set('ai', card => {\r\n                            if (player.isZhu)\r\n                                return 6 - get.useful(card);\r\n                            return 7 - get.useful(card);\r\n                        });\r\n                    }\r\n                    else {\r\n                        Evt.goto(3);\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool == true) {\r\n                        Evt.cards.addArray(result.cards);\r\n                        Evt.target.gain(result.cards, Evt.player, 'give');\r\n                        if (player.countCards('h')) {\r\n                            Evt.goto(0);\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.targets.pop();\r\n                        player.storage.targets.pop();\r\n                    }\r\n                    'step 3';\r\n                    var difType = true;\r\n                    var TypeList = [];\r\n                    if (Evt.targets && Evt.targets.length > 0) {\r\n                        for (var i = 0; i < Evt.cards.length; i++) {\r\n                            TypeList.add(get.type(Evt.cards[i]));\r\n                            if (TypeList.indexOf(get.type(Evt.cards[i])) != i) {\r\n                                difType = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.goto(10);\r\n                    }\r\n                    if (difType == false) {\r\n                        Evt.goto(6);\r\n                    }\r\n                    'step 4';\r\n                    player.chooseTarget('是否令' + Evt.cards.length.toString() + '名角色横置？', Evt.cards.length, function (card, player, target) {\r\n                        return true;\r\n                    }).set('ai', function (target) {\r\n                        var player = _status.event.player;\r\n                        return get.effect(target, { name: 'tiesuo' }, player, player);\r\n                    });\r\n                    'step 5';\r\n                    if (result.bool == true) {\r\n                        result.targets.forEach(element => element.link());\r\n                    }\r\n                    'step 6';\r\n                    var distanceGroup = false;\r\n                    for (var i = 0; i < Evt.targets.length; i++) {\r\n                        distanceGroup = false;\r\n                        for (var j = 0; j < Evt.targets.length; j++) {\r\n                            if (i == j) {\r\n                                continue;\r\n                            }\r\n                            else if (get.distance(player.storage.targets[i], player.storage.targets[j], 'pure') == 1) {\r\n                                distanceGroup = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (distanceGroup == false) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (distanceGroup == false) {\r\n                        Evt.goto(10);\r\n                    }\r\n                    'step 7';\r\n                    if (Evt.targets.length > 1) {\r\n                        Evt.num = Evt.targets.length;\r\n                        let list = [];\r\n                        for (let i of get.inpile('basic')) {\r\n                            if (lib.filter.cardUsable({ name: i }, player, Evt.getParent('chooseToUse')) && player.hasUseTarget(i)) {\r\n                                list.push(['基本', '', i]);\r\n                                if (i == 'sha') {\r\n                                    list.push(['基本', '', 'sha', 'fire']);\r\n                                    list.push(['基本', '', 'sha', 'thunder']);\r\n                                    list.push(['基本', '', 'sha', 'ice']);\r\n                                }\r\n                            }\r\n                        }\r\n                        if (list.length) {\r\n                            player.chooseButton(['是否视为使用一张基本牌？', [list, 'vcard']]).set('ai', function (button) {\r\n                                var player = _status.event.player;\r\n                                var card = { name: button.link[2], nature: button.link[3] };\r\n                                switch (card.name) {\r\n                                    case 'tao':\r\n                                        if (player.hp == 1 || (player.hp == 2 && !player.hasShan()) || player.needsToDiscard()) {\r\n                                            return 5;\r\n                                        }\r\n                                        return 1 + Math.random();\r\n                                    case 'sha':\r\n                                        if (game.hasPlayer(cur => {\r\n                                            return player.canUse(card, cur) && get.effect(cur, card, player, player) > 0;\r\n                                        })) {\r\n                                            if (card.nature == 'fire')\r\n                                                return 2.95;\r\n                                            if (card.nature == 'thunder' || card.nature == 'ice')\r\n                                                return 2.92;\r\n                                            return 2.9;\r\n                                        }\r\n                                        return 0;\r\n                                    case 'jiu':\r\n                                        if (player.getCardUsable('sha') == 0 || !player.hasSha() || !player.hasUseTarget('sha'))\r\n                                            return 0;\r\n                                        return 0.8 + Math.random();\r\n                                    case 'qi':\r\n                                        if (player.isDamaged())\r\n                                            return 1.1 + Math.random();\r\n                                        return 0.1;\r\n                                    default: return 0;\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.goto(10);\r\n                    }\r\n                    'step 8';\r\n                    if (result.control != 'cancel2') {\r\n                        let usecard = { name: result.links[0][2], nature: result.links[0][3] };\r\n                        Evt.usecard = usecard;\r\n                        player.chooseTarget('选择至多' + Evt.targets.length.toString() + '个目标', [1, Evt.num], function (card, player, target) {\r\n                            return lib.filter.targetEnabled(_status.event.card, player, target);\r\n                        }).set('ai', function (target) {\r\n                            var player = _status.event.player;\r\n                            var card = _status.event.card;\r\n                            return get.effect(target, card, player, player);\r\n                        }).set('card', Evt.usecard);\r\n                    }\r\n                    else {\r\n                        Evt.goto(10);\r\n                    }\r\n                    'step 9';\r\n                    if (result.targets)\r\n                        Evt.targets = result.targets;\r\n                    else\r\n                        Evt.targets = [];\r\n                    player.useCard(Evt.usecard, Evt.targets, true);\r\n                    'step 10';\r\n                    if (Evt.targets && Evt.targets.length == 0 && Evt.cards.length == 0) {\r\n                        if (player.hasSkill('ailianUsable'))\r\n                            player.removeSkill('ailianUsable');\r\n                    }\r\n                    else {\r\n                        player.addSkill('ailianUsable');\r\n                        delete player.storage.targets;\r\n                        Evt.finish();\r\n                    }\r\n                },\r\n                ai: {\r\n                    order(skill, player) {\r\n                        if (game.hasPlayer(cur => {\r\n                            return cur != player && get.attitude(player, cur) > 0;\r\n                        })) {\r\n                            if (player.needsToDiscard()) {\r\n                                return 1 + Math.random();\r\n                            }\r\n                            return 5 + Math.random();\r\n                        }\r\n                        else\r\n                            return 0;\r\n                    },\r\n                    result: {\r\n                        player(player, target) {\r\n                            if (player.needsToDiscard())\r\n                                return Math.random();\r\n                            return Math.random() - 0.6;\r\n                        }\r\n                    },\r\n                    threaten: 0.8\r\n                },\r\n            },\r\n            ailianUsable: {\r\n                trigger: { global: ['phaseUseAfter', 'phaseAfter'] },\r\n                silent: true,\r\n                filter(Evt) {\r\n                    return Evt.skill != 'ailian';\r\n                },\r\n                content() {\r\n                    player.removeSkill('ailianUsable');\r\n                }\r\n            },\r\n            qixu: {\r\n                unique: true,\r\n                group: ['qixu1', 'qixu2', 'qixu4'],\r\n                zhuSkill: true,\r\n            },\r\n            qixu1: {\r\n                trigger: { player: ['chooseToRespondBefore'] },\r\n                check(Evt) {\r\n                    if (Evt.qixu)\r\n                        return false;\r\n                    return true;\r\n                },\r\n                filter(Evt, player) {\r\n                    if (Evt.responded)\r\n                        return false;\r\n                    if (!player.hasZhuSkill('qixu'))\r\n                        return false;\r\n                    if (player.hasSkill('qixu3'))\r\n                        return false;\r\n                    if (!Evt.filterCard({ name: 'sha' }, player, Evt))\r\n                        return false;\r\n                    return game.hasPlayer(cur => {\r\n                        return cur != player;\r\n                    });\r\n                },\r\n                content() {\r\n                    \"step 0\";\r\n                    if (!player.hasSkill('qixu3'))\r\n                        player.addSkill('qixu3');\r\n                    if (Evt.current == undefined)\r\n                        Evt.current = player.next;\r\n                    if (Evt.current == player) {\r\n                        Evt.getParent(2).step = 0;\r\n                        Evt.finish();\r\n                    }\r\n                    else if (Evt.current) {\r\n                        var next = Evt.current.chooseCard(get.translation(player) + '声明使用一张杀，是否替弃置一张杀阻止', function (card, player, Evt) {\r\n                            Evt = Evt || _status.event;\r\n                            return card.name == 'sha';\r\n                        }, { name: 'sha' }, 1);\r\n                        next.set('ai', function () {\r\n                            var Evt = _status.event;\r\n                            return (get.attitude(Evt.player, Evt.source) + 1);\r\n                        });\r\n                        next.set('source', player);\r\n                        next.set('qixu', true);\r\n                        next.set('skillwarn', '阻止' + get.translation(player) + '打出一张杀');\r\n                        next.noOrdering = true;\r\n                        next.autochoose = lib.filter.autoRespondSha;\r\n                    }\r\n                    else {\r\n                        Evt.current = Evt.current.next;\r\n                        Evt.redo();\r\n                    }\r\n                    \"step 1\";\r\n                    if (!result.bool) {\r\n                        Evt.current = Evt.current.next;\r\n                        if (Evt.current == player) {\r\n                            Evt.goto(2);\r\n                        }\r\n                        else {\r\n                            Evt.goto(0);\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.current.discard(result.cards);\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    trigger.result = { bool: true, card: { name: 'sha', isCard: true } };\r\n                    trigger.responded = true;\r\n                    trigger.animate = false;\r\n                    if (typeof Evt.current.ai.shown == 'number' && Evt.current.ai.shown < 0.95) {\r\n                        Evt.current.ai.shown += 0.3;\r\n                        if (Evt.current.ai.shown > 0.95)\r\n                            Evt.current.ai.shown = 0.95;\r\n                    }\r\n                    Evt.finish();\r\n                }\r\n            },\r\n            qixu2: {\r\n                enable: 'chooseToUse',\r\n                prompt: '选择一名目标角色。若其他角色不弃置【杀】响应，则视为你对其使用【杀】。',\r\n                filter(Evt, player) {\r\n                    if (Evt.filterCard && !Evt.filterCard({ name: 'sha' }, player, Evt))\r\n                        return false;\r\n                    if (!player.hasZhuSkill('qixu'))\r\n                        return false;\r\n                    if (player.hasSkill('qixu3'))\r\n                        return false;\r\n                    if (!lib.filter.cardUsable({ name: 'sha' }, player))\r\n                        return false;\r\n                    return game.hasPlayer(cur => {\r\n                        return cur != player;\r\n                    });\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    if (_status.event._backup &&\r\n                        typeof _status.event._backup.filterTarget == 'function' &&\r\n                        !_status.event._backup.filterTarget({ name: 'sha' }, player, target)) {\r\n                        return false;\r\n                    }\r\n                    return player.canUse({ name: 'sha' }, target);\r\n                },\r\n                content() {\r\n                    \"step 0\";\r\n                    if (!player.hasSkill('qixu3'))\r\n                        player.addSkill('qixu3');\r\n                    if (Evt.current == undefined)\r\n                        Evt.current = player.next;\r\n                    if (Evt.current == player) {\r\n                        Evt.getParent(2).step = 0;\r\n                        Evt.finish();\r\n                    }\r\n                    else if (Evt.current) {\r\n                        var next = Evt.current.chooseCard(get.translation(player) + '对' + get.translation(target) + '使用一张杀，是否替弃置一张杀阻止', function (card, player, Evt) {\r\n                            Evt = Evt || _status.event;\r\n                            return card.name == 'sha';\r\n                        }, { name: 'sha' }, 1);\r\n                        next.set('ai', card => {\r\n                            var Evt = _status.event;\r\n                            return -get.effect(Evt.target, card, Evt.source, Evt.player);\r\n                        });\r\n                        next.set('source', player);\r\n                        next.set('target', target);\r\n                        next.set('qixu', true);\r\n                        next.set('skillwarn', '阻止' + get.translation(player) + '打出一张杀');\r\n                    }\r\n                    else {\r\n                        Evt.current = Evt.current.next;\r\n                        Evt.redo();\r\n                    }\r\n                    \"step 1\";\r\n                    if (result.bool) {\r\n                        Evt.current.discard(result.cards);\r\n                        Evt.finish();\r\n                    }\r\n                    else {\r\n                        Evt.current = Evt.current.next;\r\n                        if (Evt.current == player) {\r\n                            Evt.getParent(2).step = 0;\r\n                            Evt.goto(2);\r\n                        }\r\n                        else {\r\n                            Evt.goto(0);\r\n                        }\r\n                    }\r\n                    'step 2';\r\n                    if (result.cards && result.cards.length) {\r\n                        player.useCard({ name: 'sha', isCard: true }, result.cards, target).animate = false;\r\n                    }\r\n                    else {\r\n                        player.useCard({ name: 'sha', isCard: true }, target).animate = false;\r\n                    }\r\n                    if (typeof Evt.current.ai.shown == 'number' && Evt.current.ai.shown < 0.95) {\r\n                        Evt.current.ai.shown += 0.3;\r\n                        if (Evt.current.ai.shown > 0.95)\r\n                            Evt.current.ai.shown = 0.95;\r\n                    }\r\n                },\r\n                ai: {\r\n                    respondSha: true,\r\n                    skillTagFilter(player) {\r\n                        if (!player.hasZhuSkill('qixu'))\r\n                            return false;\r\n                        return true;\r\n                    },\r\n                    result: {\r\n                        target(player, target) {\r\n                            if (player.hasSkill('qixu3'))\r\n                                return 0;\r\n                            return get.effect(target, { name: 'sha' }, player, target);\r\n                        }\r\n                    },\r\n                    order() {\r\n                        return get.order({ name: 'sha' }) - 0.1;\r\n                    },\r\n                }\r\n            },\r\n            qixu3: {\r\n                trigger: {\r\n                    global: 'roundStart'\r\n                },\r\n                mark: true,\r\n                intro: { content: '一轮后重置(杀)' },\r\n                silent: true,\r\n                content() {\r\n                    player.removeSkill('qixu3');\r\n                }\r\n            },\r\n            qixu4: {\r\n                unique: true,\r\n                trigger: { player: ['chooseToRespondBefore', 'chooseToUseBefore'] },\r\n                filter(Evt, player) {\r\n                    if (Evt.responded)\r\n                        return false;\r\n                    if (!player.hasZhuSkill('qixu'))\r\n                        return false;\r\n                    if (player.hasSkill('qixu5'))\r\n                        return false;\r\n                    if (!Evt.filterCard({ name: 'shan' }, player, Evt))\r\n                        return false;\r\n                    return true;\r\n                },\r\n                check(Evt, player) {\r\n                    if (get.damageEffect(Evt.player, player, player) < 0)\r\n                        return true;\r\n                    return true;\r\n                },\r\n                content() {\r\n                    \"step 0\";\r\n                    player.addSkill('qixu5');\r\n                    if (Evt.current == undefined)\r\n                        Evt.current = player.next;\r\n                    if (Evt.current == player) {\r\n                        Evt.goto(2);\r\n                    }\r\n                    else if (Evt.current) {\r\n                        var next = Evt.current.chooseCard(get.translation(player) + '声明使用一张闪，是否替弃置一张闪阻止', { name: 'shan' }, 1, false);\r\n                        next.set('ai', function () {\r\n                            var Evt = _status.event;\r\n                            return (3 - get.attitude(Evt.player, Evt.source));\r\n                        });\r\n                        next.set('skillwarn', '阻止' + get.translation(player) + '技能生效');\r\n                        next.autochoose = lib.filter.autoRespondShan;\r\n                        next.set('source', player);\r\n                    }\r\n                    \"step 1\";\r\n                    if (result.bool) {\r\n                        Evt.current.discard(result.cards);\r\n                        Evt.finish();\r\n                    }\r\n                    else {\r\n                        Evt.current = Evt.current.next;\r\n                        if (Evt.current == player) {\r\n                            Evt.goto(2);\r\n                        }\r\n                        else {\r\n                            Evt.goto(0);\r\n                        }\r\n                    }\r\n                    'step 2';\r\n                    trigger.result = { bool: true, card: { name: 'shan', isCard: true } };\r\n                    trigger.responded = true;\r\n                    trigger.animate = false;\r\n                    if (typeof Evt.current.ai.shown == 'number' && Evt.current.ai.shown < 0.95) {\r\n                        Evt.current.ai.shown += 0.3;\r\n                        if (Evt.current.ai.shown > 0.95)\r\n                            Evt.current.ai.shown = 0.95;\r\n                    }\r\n                    Evt.finish();\r\n                },\r\n                ai: {\r\n                    respondShan: true,\r\n                    skillTagFilter(player) {\r\n                        if (player.storage.qixu)\r\n                            return false;\r\n                        if (!player.hasZhuSkill('qixu'))\r\n                            return false;\r\n                        return true;\r\n                    },\r\n                },\r\n            },\r\n            qixu5: {\r\n                trigger: {\r\n                    global: 'roundStart'\r\n                },\r\n                mark: true,\r\n                intro: { content: '一轮后重置(闪)' },\r\n                silent: true,\r\n                content() {\r\n                    player.removeSkill('qixu5');\r\n                }\r\n            },\r\n            rongyaochengyuan: {\r\n                trigger: {\r\n                    player: \"damageBegin3\",\r\n                },\r\n                filter(Evt, player) {\r\n                    if (Evt.source == undefined || Evt.source == player)\r\n                        return false;\r\n                    if (Evt.source.hasSkill('rongyaochengyuan_homolive'))\r\n                        return false;\r\n                    return true;\r\n                },\r\n                prompt2(Evt, player) {\r\n                    return '给' + get.translation(Evt.source) + '添加homolive标记,并抵挡此次伤害';\r\n                },\r\n                logTarget: 'source',\r\n                content() {\r\n                    'step 0';\r\n                    player.logSkill('rongyaochengyuan', trigger.source);\r\n                    trigger.source.addSkill('rongyaochengyuan_homolive');\r\n                    'step 1';\r\n                    trigger.changeToZero();\r\n                },\r\n                subSkill: {\r\n                    homolive: {\r\n                        mark: true,\r\n                        marktext: 'HO',\r\n                        intro: {\r\n                            name: 'Homolive',\r\n                            content: '我一直都是Homolive的一员啊！'\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            hundunliandong: {\r\n                audio: 3,\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filterTarget(card, player, target) {\r\n                    var targets = [player].concat(ui.selected.targets);\r\n                    if (targets.contains(target))\r\n                        return false;\r\n                    for (let i = 0; i < targets.length; i++) {\r\n                        if (targets[i].hasSkill('rongyaochengyuan_homolive') && target.hasSkill('rongyaochengyuan_homolive')) {\r\n                            return false;\r\n                        }\r\n                        if (targets[i].group == target.group) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return target.countCards('he');\r\n                },\r\n                complexTarget: true,\r\n                multitarget: true,\r\n                selectTarget: [1, Infinity],\r\n                content() {\r\n                    var targets = [player].concat(targets);\r\n                    'step 0';\r\n                    if (Evt.dropCardsType == null) {\r\n                        Evt.dropCardsType = [];\r\n                        Evt.dropCards = [];\r\n                        Evt.playerIndex = 0;\r\n                        Evt.dialogId = 0;\r\n                    }\r\n                    if (targets.length >= 1) {\r\n                        if (targets[Evt.playerIndex].countCards('he')) {\r\n                            Evt.handcardsCount = targets[Evt.playerIndex].countCards('h');\r\n                            targets[Evt.playerIndex].chooseToDiscard(true, 1, 'he', '『混沌联动』：弃置一张牌');\r\n                        }\r\n                        else {\r\n                            Evt.handcardsCount = -1;\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.goto(3);\r\n                    }\r\n                    'step 1';\r\n                    if (result.cards && result.cards.length) {\r\n                        Evt.dropCards.addArray(result.cards);\r\n                        Evt.dropCardsType = get.suit3(Evt.dropCards);\r\n                    }\r\n                    'step 2';\r\n                    if (Evt.handcardsCount != -1) {\r\n                        if (targets[Evt.playerIndex].countCards('h') == 0 && Evt.handcardsCount != 0) {\r\n                            Evt.goto(3);\r\n                        }\r\n                        else {\r\n                            ui.clear();\r\n                            if (Evt.dialog && Evt.dialogId) {\r\n                                Evt.dialog.close();\r\n                                _status.dieClose.remove(Evt.dialog);\r\n                                game.broadcast('closeDialog', Evt.dialogId);\r\n                                game.broadcast(function (id) {\r\n                                    var dialog = get.idDialog(id);\r\n                                    if (dialog) {\r\n                                        _status.dieClose.remove(dialog);\r\n                                    }\r\n                                }, Evt.dialogId);\r\n                            }\r\n                            Evt.dialog = ui.create.dialog('混沌联动', Evt.dropCards, true);\r\n                            _status.dieClose.push(Evt.dialog);\r\n                            Evt.dialog.videoId = lib.status.videoId++;\r\n                            game.broadcast(function (cards, id) {\r\n                                var dialog = ui.create.dialog('混沌联动', cards, true);\r\n                                _status.dieClose.push(dialog);\r\n                                dialog.videoId = id;\r\n                            }, Evt.dropCards, Evt.dialog.videoId);\r\n                            Evt.dialogId = Evt.dialog.videoId;\r\n                            if (Evt.dropCardsType.length >= 4) {\r\n                                Evt.goto(3);\r\n                            }\r\n                            else {\r\n                                Evt.playerIndex++;\r\n                                if (Evt.playerIndex >= targets.length) {\r\n                                    Evt.playerIndex = 0;\r\n                                }\r\n                                Evt.goto(0);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.playerIndex++;\r\n                        if (Evt.playerIndex < targets.length) {\r\n                            Evt.goto(0);\r\n                        }\r\n                        else {\r\n                            Evt.playerIndex = 0;\r\n                            Evt.goto(0);\r\n                        }\r\n                    }\r\n                    'step 3';\r\n                    ui.clear();\r\n                    game.broadcast('closeDialog', Evt.dialogId);\r\n                    if (Evt.dialog && Evt.dialogId) {\r\n                        Evt.dialog.close();\r\n                        _status.dieClose.remove(Evt.dialog);\r\n                        game.broadcast('closeDialog', Evt.dialogId);\r\n                        game.broadcast(function (id) {\r\n                            var dialog = get.idDialog(id);\r\n                            if (dialog) {\r\n                                _status.dieClose.remove(dialog);\r\n                            }\r\n                        }, Evt.dialogId);\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 7,\r\n                    result: {\r\n                        player(player, target) {\r\n                            if ((get.mode() != 'identity' || game.roundNumber > 1) && player.countCards('h') > 1)\r\n                                return 1;\r\n                            else\r\n                                return -0.2;\r\n                        },\r\n                        target(player, target) {\r\n                            if (!target.countCards('h'))\r\n                                return -2;\r\n                            return -target.countCards('h') / 2;\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            zhongxinghezou: {\r\n                init(player) {\r\n                    if (!player.storage.zhongxinghezou) {\r\n                        player.storage.zhongxinghezou = [];\r\n                    }\r\n                },\r\n                trigger: {\r\n                    player: 'useCard2'\r\n                },\r\n                filter(Evt, player) {\r\n                    if (!(get.itemtype(Evt.cards) == 'cards'))\r\n                        return false;\r\n                    return get.number(Evt.card) && !player.hasSkill('zhongxinghezou_used');\r\n                },\r\n                check(Evt, player) {\r\n                    var effect = 0;\r\n                    if (Evt.card.name == 'wuxie' || Evt.card.name == 'shan') {\r\n                        if (get.attitude(player, Evt.starget) < -1) {\r\n                            effect = -1;\r\n                        }\r\n                    }\r\n                    else if (Evt.targets && Evt.targets.length) {\r\n                        for (var i = 0; i < Evt.targets.length; i++) {\r\n                            effect += get.effect(Evt.targets[i], Evt.card, Evt.player, player);\r\n                        }\r\n                    }\r\n                    return get.number(Evt.card) < 6 || effect < 3;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.ctargets = trigger.targets;\r\n                    player.chooseTarget(get.prompt2('zhongxinghezou'), function (card, player, target) {\r\n                        return !_status.event.targets.contains(target) && target.countCards('h');\r\n                    }).set('ai', function (target) {\r\n                        return 2 - get.attitude(_status.event.player, target);\r\n                    }).set('targets', trigger.targets);\r\n                    'step 1';\r\n                    if (result.bool && result.targets[0]) {\r\n                        Evt.starget = result.targets[0];\r\n                        var att = get.attitude(Evt.starget, player);\r\n                        var num = get.number(trigger.card);\r\n                        var effect = 0;\r\n                        if (trigger.card.name == 'wuxie' || trigger.card.name == 'shan') {\r\n                            if (get.attitude(player, Evt.starget) < -1) {\r\n                                effect = -1;\r\n                            }\r\n                        }\r\n                        else if (trigger.targets && trigger.targets.length) {\r\n                            for (var i = 0; i < trigger.targets.length; i++) {\r\n                                effect += get.effect(trigger.targets[i], trigger.card, Evt.starget, player);\r\n                            }\r\n                        }\r\n                        Evt.starget.chooseCard(true, 'h', '众星合奏：亮出一张手牌').set('ai', card => {\r\n                            var source = _status.event.source;\r\n                            var att = _status.event.att;\r\n                            var num = _status.event.num;\r\n                            var player = _status.event.player;\r\n                            var effect = _status.event.effect;\r\n                            if (get.number(card) + num == 12) {\r\n                                if (att > 0 || get.recoverEffect(player, source, player))\r\n                                    return 8 - get.useful(card);\r\n                                else\r\n                                    return 0;\r\n                            }\r\n                            else if (get.number(card) + num < 12) {\r\n                                return -effect - get.useful(card);\r\n                            }\r\n                            else {\r\n                                return 4 - get.useful(card);\r\n                            }\r\n                        }).set('att', att).set('num', num).set('effect', effect).set('source', player);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool && result.cards.length) {\r\n                        player.addTempSkill('zhongxinghezou_used');\r\n                        Evt.starget.showCards(result.cards);\r\n                        Evt.card = result.cards[0];\r\n                        var num = get.number(Evt.card) + get.number(trigger.card);\r\n                        if (num < 12) {\r\n                            player.gain(result.cards, Evt.starget, 'give');\r\n                            trigger.cancel();\r\n                        }\r\n                        if (num >= 12) {\r\n                            player.storage.zhongxinghezou.push({\r\n                                source: trigger.card.cardid,\r\n                                user: Evt.starget,\r\n                                card: Evt.card,\r\n                                targets: Evt.ctargets,\r\n                            });\r\n                        }\r\n                        if (num == 12) {\r\n                            player.draw();\r\n                            Evt.starget.recover(player);\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                },\r\n                group: ['zhongxinghezou_use'],\r\n                subSkill: {\r\n                    use: {\r\n                        forced: true,\r\n                        trigger: {\r\n                            player: 'useCardAfter',\r\n                        },\r\n                        filter(Evt, player) {\r\n                            if (!Evt.card.isCard)\r\n                                return false;\r\n                            if (!player.storage.zhongxinghezou.length)\r\n                                return false;\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            player.storage.zhongxinghezou.forEach(function (item) {\r\n                                if (item.source == trigger.card.cardid) {\r\n                                    item.targets.forEach(function (tar) {\r\n                                        if (item.user.canUse(item.card, tar)) {\r\n                                            item.user.useCard(item.card, tar);\r\n                                        }\r\n                                    });\r\n                                    player.storage.zhongxinghezou.remove(item);\r\n                                }\r\n                            });\r\n                        }\r\n                    },\r\n                    used: {},\r\n                }\r\n            },\r\n            xiugong: {\r\n                trigger: { player: 'phaseUseBegin' },\r\n                priority: 199,\r\n                filter(Evt, player) {\r\n                    return game.hasPlayer(cur => {\r\n                        return cur != player;\r\n                    });\r\n                },\r\n                check(Evt, player) {\r\n                    return true;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseTarget('选择『天道宿宫』的目标', true, function (card, player, target) {\r\n                        return target != player;\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.target = result.targets[0];\r\n                        Evt.num = Evt.target.countCards('h');\r\n                        if (Evt.num > 0) {\r\n                            Evt.reality = Evt.target.countCards('h', { type: ['trick', 'delay'] });\r\n                            var rand = 1.5 * Math.pow(Math.random(), Evt.num);\r\n                            if (player.hasSkillTag('viewHandcard', null, Evt.target, true))\r\n                                rand = 1;\r\n                            var list = ['0张'];\r\n                            for (var i = 1; i <= Evt.num; i++) {\r\n                                list.push(i + '张');\r\n                            }\r\n                            player.chooseControl('dialogcontrol', list, true).set('ai', function () {\r\n                                var num = _status.event.num;\r\n                                if (_status.event.rand > Evt.getRand()) {\r\n                                    console.log(_status.event.reality);\r\n                                    return _status.event.reality + '张';\r\n                                }\r\n                                if (Evt.getRand() < 1 / num)\r\n                                    return _status.event.reality + '张';\r\n                                return list.randomGet();\r\n                            }).set('prompt', '猜测' + get.translation(Evt.target) + '手牌中锦囊牌的数量').set('num', Evt.num).set('rand', rand).set('reality', Evt.reality);\r\n                        }\r\n                        else {\r\n                            player.draw();\r\n                            Evt.finish();\r\n                        }\r\n                    }\r\n                    'step 2';\r\n                    if (result.control) {\r\n                        player.chat(result.control);\r\n                        game.log(player, '猜测', Evt.target, '手中有' + result.control + '锦囊牌');\r\n                        var num = result.control.substring(0, 1);\r\n                        Evt.target.showHandcards();\r\n                        if (num == Evt.reality) {\r\n                            player.draw();\r\n                            if (player.storage.xiugong_times == 0)\r\n                                player.storage.xiugong_times = num;\r\n                        }\r\n                    }\r\n                },\r\n                involve: 'zhongxinghezou',\r\n                group: ['xiugong_times', 'xiugong_clear'],\r\n                subSkill: {\r\n                    times: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = 0;\r\n                        },\r\n                        trigger: { player: 'useCard2' },\r\n                        firstDo: true,\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            console.log(player.storage.xiugong_times);\r\n                            return player.storage.xiugong_times > 0 && player.hasSkill('zhongxinghezou_used');\r\n                        },\r\n                        content() {\r\n                            player.storage.xiugong_times--;\r\n                            player.removeSkill('zhongxinghezou_used');\r\n                        },\r\n                    },\r\n                    clear: {\r\n                        trigger: { player: 'phaseAfter' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            return player.storage.xiugong_times != 0;\r\n                        },\r\n                        content() {\r\n                            player.storage.xiugong_times = 0;\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            zuodun: {\r\n                audio: 2,\r\n                trigger: { global: 'damageBegin3' },\r\n                usable: 1,\r\n                priority: 1,\r\n                popup: false,\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && Evt.num;\r\n                },\r\n                check(Evt, player) {\r\n                    return (player.hp - Evt.player.hp) > 0 && get.attitude(player, Evt.player) > (6 - player.hp);\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    trigger.player = player;\r\n                    var targets = [player];\r\n                    if (trigger.source)\r\n                        targets.add(trigger.source);\r\n                    game.asyncDraw(targets);\r\n                    if (!player.hasSkill('zhongxinghezou')) {\r\n                        player.addTempSkill('zhongxinghezou', { player: 'phaseAfter' });\r\n                    }\r\n                },\r\n                derivation: 'zhongxinghezou',\r\n            },\r\n            baidao: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h');\r\n                },\r\n                filterCard: true,\r\n                selectCard: -1,\r\n                position: 'h',\r\n                discard: false,\r\n                lose: false,\r\n                content() {\r\n                    player.showHandcards();\r\n                    var overJ = cards.filter(card => get.number(card) > 11);\r\n                    var under3 = cards.filter(card => get.number(card) < 3);\r\n                    player.recover(overJ.length);\r\n                    if (under3.length && player.hasSkill('zhongxinghezou')) {\r\n                        if (player.getStat().skill.zhongxinghezou) {\r\n                            player.getStat().skill.zhongxinghezou--;\r\n                            player.storage.baidao_times += (under3.length - 1);\r\n                        }\r\n                        else {\r\n                            player.storage.baidao_times += under3.length;\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 10,\r\n                    result: {\r\n                        player(player, target) {\r\n                            if (player.countCards('h', card => get.number(card) > 11))\r\n                                return get.recoverEffect(player, player, player);\r\n                            else\r\n                                return -0.2;\r\n                        },\r\n                    },\r\n                },\r\n                group: ['baidao_times', 'baidao_clear'],\r\n                subSkill: {\r\n                    times: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = 0;\r\n                        },\r\n                        trigger: { player: 'useCard2' },\r\n                        firstDo: true,\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return player.storage.baidao_times > 0 && player.hasSkill('zhongxinghezou_used');\r\n                        },\r\n                        content() {\r\n                            player.storage.baidao_times--;\r\n                            player.removeSkill('zhongxinghezou_used');\r\n                        },\r\n                    },\r\n                    clear: {\r\n                        trigger: { player: 'phaseAfter' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            return player.storage.baidao_times != 0;\r\n                        },\r\n                        content() {\r\n                            player.storage.baidao_times = 0;\r\n                        },\r\n                    }\r\n                },\r\n                derivation: 'zhongxinghezou',\r\n            },\r\n            yipengyidou: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filterTarget(card, player, target) {\r\n                    return player.canCompare(target);\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.countCards('h') > 0;\r\n                },\r\n                content() {\r\n                    \"step 0\";\r\n                    player.chooseToCompare(target).set('small', (get.recoverEffect(target, player, player) > get.recoverEffect(player, target, player) + 1));\r\n                    \"step 1\";\r\n                    Evt.resultWinner = result.winner;\r\n                    Evt.loop = 1;\r\n                    if (!Evt.resultWinner) {\r\n                        Evt.player1 = player;\r\n                        Evt.player2 = target;\r\n                    }\r\n                    else {\r\n                        Evt.player1 = Evt.resultWinner;\r\n                        if (Evt.resultWinner != player)\r\n                            Evt.player2 = player;\r\n                        else if (Evt.resultWinner != target)\r\n                            Evt.player2 = target;\r\n                    }\r\n                    Evt.cards = [];\r\n                    \"step 2\";\r\n                    game.getGlobalHistory('cardMove', evt => {\r\n                        if (evt == trigger || (evt.name != 'lose' && evt.name != 'cardsDiscard'))\r\n                            return false;\r\n                        if (evt.name == 'lose' && evt.position != ui.discardPile)\r\n                            return false;\r\n                        for (var i = 0; i < evt.cards.length; i++) {\r\n                            var card = evt.cards[i];\r\n                            if (get.type(card) != 'equip' && get.type(card) != 'delay') {\r\n                                if (Evt.loop) {\r\n                                    if (Evt.player1.hasUseTarget(card)) {\r\n                                        Evt.cards.add(card);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    if (Evt.player2.hasUseTarget(card)) {\r\n                                        Evt.cards.add(card);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }, trigger);\r\n                    if (Evt.cards.length <= 0) {\r\n                        Evt.finish();\r\n                    }\r\n                    else {\r\n                        game.cardsGotoOrdering(Evt.cards);\r\n                        var dialog = ui.create.dialog('一捧一逗', Evt.cards, true);\r\n                        _status.dieClose.push(dialog);\r\n                        dialog.videoId = lib.status.videoId++;\r\n                        game.addVideo('cardDialog', null, ['一捧一逗', get.cardsInfo(Evt.cards), dialog.videoId]);\r\n                        Evt.getParent().preResult = dialog.videoId;\r\n                        game.broadcast(function (cards, id) {\r\n                            var dialog = ui.create.dialog('一捧一逗', cards, true);\r\n                            _status.dieClose.push(dialog);\r\n                            dialog.videoId = id;\r\n                        }, Evt.cards, dialog.videoId);\r\n                        Evt.dialog = dialog;\r\n                    }\r\n                    \"step 3\";\r\n                    if (Evt.loop) {\r\n                        Evt.player1.chooseCard(1, 'he', '是否将一张牌当其中一张牌打出?');\r\n                    }\r\n                    else {\r\n                        Evt.player2.chooseCard(1, 'he', '是否将一张牌当其中一张牌打出?');\r\n                    }\r\n                    \"step 4\";\r\n                    if (result.bool) {\r\n                        Evt.viewAsCards = result.cards;\r\n                        if (Evt.loop) {\r\n                            game.log(player, '观看了', '#y弃牌堆的牌');\r\n                            var chooseButton = Evt.player1.chooseButton(true, function (button) {\r\n                                return get.value(button.link, _status.event.player);\r\n                            }).set('dialog', Evt.dialog.videoId);\r\n                            Evt.chooseButton = chooseButton;\r\n                        }\r\n                        else {\r\n                            game.log(Evt.target, '观看了', '#y弃牌堆的牌');\r\n                            var chooseButton = Evt.target.chooseButton(true, function (button) {\r\n                                return get.value(button.link, _status.event.player);\r\n                            }).set('dialog', Evt.dialog.videoId);\r\n                            Evt.chooseButton = chooseButton;\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.goto(6);\r\n                    }\r\n                    \"step 5\";\r\n                    if (!result.links[0]) {\r\n                        Evt.goto(6);\r\n                    }\r\n                    else {\r\n                        Evt.cardUse = result.links[0];\r\n                        if (Evt.loop) {\r\n                            if (Evt.player1.hasUseTarget(Evt.cardUse)) {\r\n                                Evt.player1.chooseUseTarget(result.links[0], Evt.viewAsCards, true, false).viewAs = true;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (Evt.player2.hasUseTarget(Evt.cardUse)) {\r\n                                Evt.player2.chooseUseTarget(result.links[0], Evt.viewAsCards, true, false).viewAs = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    \"step 6\";\r\n                    ui.clear();\r\n                    Evt.dialog.close();\r\n                    _status.dieClose.remove(Evt.dialog);\r\n                    game.broadcast(function (id) {\r\n                        var dialog = get.idDialog(id);\r\n                        if (dialog) {\r\n                            dialog.close();\r\n                            _status.dieClose.remove(dialog);\r\n                        }\r\n                    }, Evt.dialog.videoId);\r\n                    if (Evt.loop) {\r\n                        Evt.loop--;\r\n                        if (Evt.loop) {\r\n                            Evt.player1.chooseBool('将一张牌当本回合进入弃牌堆的一张基本牌或通常锦囊牌使用，或取消使对方回复一点体力').set('ai', function () {\r\n                                var player = _status.event.player;\r\n                                var target = _status.event.getParent().player2;\r\n                                if (get.recoverEffect(target, player, player) > 1)\r\n                                    return 0;\r\n                                else\r\n                                    return -0.2 + Math.random();\r\n                            });\r\n                        }\r\n                        else {\r\n                            Evt.player2.chooseBool('将一张牌当本回合进入弃牌堆的一张基本牌或通常锦囊牌使用，或取消使对方回复一点体力').set('ai', function () {\r\n                                var player = _status.event.player;\r\n                                var target = _status.event.getParent().player1;\r\n                                if (get.recoverEffect(target, player, player) > 1)\r\n                                    return 0;\r\n                                else\r\n                                    return -0.2 + Math.random();\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    \"step 7\";\r\n                    if (result.bool) {\r\n                        Evt.goto(2);\r\n                    }\r\n                    else {\r\n                        if (Evt.loop == 2 || (Evt.loop && Evt.resultWinner == player) || (!Evt.loop && Evt.resultWinner != player)) {\r\n                            Evt.target.recover();\r\n                        }\r\n                        else {\r\n                            player.recover();\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 8,\r\n                    result: {\r\n                        target: 0.5,\r\n                    },\r\n                },\r\n            },\r\n            renleiguancha: {\r\n                trigger: { player: 'phaseEnd' },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseTarget(1, '选择观察目标', function (card, player, target) {\r\n                        return player != target;\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        result.targets[0].addSkill('renleiguancha_mark');\r\n                    }\r\n                },\r\n                group: ['renleiguancha_phaseStart', 'renleiguancha_damage', 'renleiguancha_die'],\r\n                subSkill: {\r\n                    mark: {\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '造成伤害，杀死玩家与死亡都被列入了观察项目'\r\n                        },\r\n                    },\r\n                    phaseStart: {\r\n                        trigger: { player: 'phaseBegin' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return player.hasSkill('renleiguancha_damaged') || player.hasSkill('renleiguancha_dead')\r\n                                || game.filterPlayer(cur => cur.hasSkill('renleiguancha_mark')).length > 0;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            game.filterPlayer(cur => {\r\n                                if (cur.hasSkill('renleiguancha_mark')) {\r\n                                    cur.removeSkill('renleiguancha_mark');\r\n                                    return true;\r\n                                }\r\n                                else\r\n                                    return false;\r\n                            });\r\n                            if (!player.hasSkill('renleiguancha_damaged') && !player.hasSkill('renleiguancha_dead')) {\r\n                                player.draw(2);\r\n                                player.loseHp();\r\n                                Evt.finish();\r\n                            }\r\n                            'step 1';\r\n                            if (player.hasSkill('renleiguancha_damaged')) {\r\n                                player.draw(1);\r\n                                player.removeSkill('renleiguancha_damaged');\r\n                            }\r\n                            'step 2';\r\n                            if (player.hasSkill('renleiguancha_dead')) {\r\n                                player.removeSkill('renleiguancha_dead');\r\n                                player.chooseTarget(1, '对一名角色造成一点伤害');\r\n                            }\r\n                            else {\r\n                                Evt.finish();\r\n                            }\r\n                            'step 3';\r\n                            if (result.bool) {\r\n                                result.targets[0].damage(player);\r\n                            }\r\n                        }\r\n                    },\r\n                    damage: {\r\n                        trigger: { global: 'damageAfter' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            if (Evt.source) {\r\n                                return Evt.source.hasSkill('renleiguancha_mark');\r\n                            }\r\n                            else\r\n                                return false;\r\n                        },\r\n                        content() {\r\n                            player.addSkill('renleiguancha_damaged');\r\n                        }\r\n                    },\r\n                    die: {\r\n                        trigger: { global: 'dieBefore' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            if (Evt.source) {\r\n                                return Evt.source.hasSkill('renleiguancha_mark') || Evt.player.hasSkill('renleiguancha_mark');\r\n                            }\r\n                            else\r\n                                return Evt.player.hasSkill('renleiguancha_mark');\r\n                        },\r\n                        content() {\r\n                            player.addSkill('renleiguancha_dead');\r\n                        }\r\n                    },\r\n                    damaged: {\r\n                        mark: true,\r\n                        marktext: '伤',\r\n                        intro: {\r\n                            content: '观察目标造成了伤害'\r\n                        },\r\n                    },\r\n                    dead: {\r\n                        mark: true,\r\n                        marktext: '亡',\r\n                        intro: {\r\n                            content: '观察目标死亡或杀死过角色'\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            yueyao: {\r\n                init(player, skill) {\r\n                    player.storage[skill] = 0;\r\n                },\r\n                trigger: {\r\n                    global: 'gameDrawAfter',\r\n                    player: ['enterGame', 'phaseBegin'],\r\n                },\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                forced: true,\r\n                intro: { content: '月谣：#' },\r\n                content() {\r\n                    player.storage.yueyao = player.countCards('h');\r\n                    player.markSkill('yueyao');\r\n                },\r\n                mod: {\r\n                    targetEnabled(card, player, target) {\r\n                        if (target.hasSkill('yueyao') && target.storage.yueyao == player.countCards('h'))\r\n                            return false;\r\n                    },\r\n                },\r\n                group: 'yueyao_addDam',\r\n                subSkill: {\r\n                    addDam: {\r\n                        trigger: { source: 'damageBegin' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return player.storage.yueyao == player.countCards('h');\r\n                        },\r\n                        content() {\r\n                            trigger.num++;\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            kongling: {\r\n                trigger: { player: 'damageAfter' },\r\n                filter(Evt, player) {\r\n                    return Evt.num > 0;\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseTarget(get.prompt2('kongling'), function (card, player, target) {\r\n                        return player.storage.yueyao != target.countCards('h');\r\n                    }).set('ai', function (target) {\r\n                        var player = _status.event.player;\r\n                        if (player.storage.yueyao < target.countCards('h'))\r\n                            return 1 - get.attitude(player, target) * (target.countCards('h') - player.storage.yueyao);\r\n                        return get.attitude(player, target);\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool && result.targets) {\r\n                        player.logSkill('kongling', result.targets);\r\n                        var target = result.targets[0];\r\n                        if (player.storage.yueyao < target.countCards('h'))\r\n                            target.chooseToDiscard(true, target.countCards('h') - player.storage.yueyao);\r\n                        else\r\n                            target.gain(get.cards(player.storage.yueyao - target.countCards('h')), 'draw');\r\n                    }\r\n                },\r\n                ai: {\r\n                    maixie: true,\r\n                    combo: 'yueyao'\r\n                }\r\n            },\r\n            jiajiupaidui: {\r\n                audio: 3,\r\n                enable: 'chooseToUse',\r\n                filter(Evt, player) {\r\n                    return Evt.filterCard({ name: 'jiu', isCard: true }, player, Evt);\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    return target.countCards('he');\r\n                },\r\n                selectTarget: 2,\r\n                multitarget: true,\r\n                round: 1,\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseCardOL(true, targets, 'he', '弃置一张牌(若其中有♠或9，则视为' + get.translation(player) + '使用了一张酒)').set('ai', card => {\r\n                        var source = _status.event.source;\r\n                        var player = _status.event.player;\r\n                        if (get.attitude(player, source) > 0 && (get.suit(card) == 'spade' || get.number(card) == 9))\r\n                            return 12 - get.value(card);\r\n                        return 6 - get.value(card);\r\n                    }).set('source', player).aiCard = function (target) {\r\n                        var hs = target.getCards('h');\r\n                        var Evt = _status.event;\r\n                        Evt.player = target;\r\n                        hs.sort(function (a, b) {\r\n                            return Evt.ai(a) - Evt.ai(b);\r\n                        });\r\n                        delete Evt.player;\r\n                        return { bool: true, cards: [hs[0]] };\r\n                    };\r\n                    'step 1';\r\n                    var cards = [];\r\n                    result.forEach(cur => cards.addArray(cur.cards));\r\n                    targets[0].discard(cards[0]);\r\n                    targets[1].discard(cards[1]);\r\n                    Evt.cards = cards;\r\n                    'step 2';\r\n                    game.delay();\r\n                    Evt.allJiu = true;\r\n                    Evt.cards.forEach(card => {\r\n                        if (get.suit(card) === 'spade' || get.number(card) == 9)\r\n                            Evt.isJiu = true;\r\n                        else {\r\n                            Evt.allJiu = false;\r\n                        }\r\n                    });\r\n                    if (Evt.isJiu) {\r\n                        if (_status.event.getParent(2).type == 'dying') {\r\n                            Evt.dying = player;\r\n                            Evt.type = 'dying';\r\n                        }\r\n                        player.useCard({ name: 'jiu', isCard: true }, player, false);\r\n                    }\r\n                    'step 3';\r\n                    if (Evt.allJiu) {\r\n                        var roundname = 'jiajiupaidui_roundcount';\r\n                        if (player.hasMark(roundname)) {\r\n                            player.popup('重置');\r\n                            var next = game.createEvent('resetSkill');\r\n                            [next.player, next.resetSkill] = [player, 'jiajiupaidui'];\r\n                            next.setContent('resetRound');\r\n                        }\r\n                        player.draw();\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 9,\r\n                    result: {\r\n                        player: 0.8,\r\n                        target: -1,\r\n                        expose: 0.4,\r\n                    },\r\n                    threaten: 1.2\r\n                },\r\n            },\r\n            kuangzuiluanwu: {\r\n                audio: 1,\r\n                unique: true,\r\n                enable: 'phaseUse',\r\n                limited: true,\r\n                skillAnimation: 'epic',\r\n                animationColor: 'thunder',\r\n                filter(card, player) {\r\n                    return player.storage.jiu > 0;\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    return player.canUse({ name: 'sha' }, target, false);\r\n                },\r\n                selectTarget() {\r\n                    return _status.event.player.storage.jiu;\r\n                },\r\n                multitarget: true,\r\n                content() {\r\n                    'step 0';\r\n                    player.storage.kuangzuiluanwu = true;\r\n                    player.awakenSkill('kuangzuiluanwu');\r\n                    player.loseMaxHp();\r\n                    'step 1';\r\n                    Evt.shaEvent = player.useCard({ name: 'sha' }, targets);\r\n                    'step 2';\r\n                    player.addSkill('kuangzuiluanwu_count');\r\n                },\r\n                intro: {\r\n                    content(storage, player, skill) {\r\n                        if (player.storage.jiu)\r\n                            return '未发动。当前使用酒计数:' + (player.storage.jiu).toString();\r\n                        else\r\n                            return '未发动。当前使用酒计数:0';\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    count: {\r\n                        mark: true,\r\n                        marktext: \"酒\",\r\n                        direct: true,\r\n                        intro: {\r\n                            content(storage, player, skill) {\r\n                                if (player.storage.jiu)\r\n                                    return '已发动。当前使用酒计数:' + (player.storage.jiu).toString();\r\n                                else\r\n                                    return '已发动。当前使用酒计数:0';\r\n                            }\r\n                        },\r\n                    },\r\n                },\r\n                ai: {\r\n                    target(player, target) {\r\n                        return lib.card.sha.ai.result.target(player, target);\r\n                    },\r\n                    player(player, target) {\r\n                        if (player.isHealthy())\r\n                            return -3;\r\n                        return -1;\r\n                    }\r\n                }\r\n            },\r\n            jiance: {\r\n                frequent: true,\r\n                trigger: { player: ['loseHpEnd', 'damageEnd'] },\r\n                content: [() => {\r\n                        player.chooseTarget(get.prompt2('jiance'), function (card, player, target) {\r\n                            return target.countCards('h');\r\n                        }).set('ai', function (target) {\r\n                            let player = _status.event.player;\r\n                            if (target.countCards('h') <= 4)\r\n                                return 2 - get.attitude(player, target);\r\n                            return 0;\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool && result.targets) {\r\n                            Evt.target = result.targets[0];\r\n                            Evt.target.showHandcards('监策');\r\n                            let types = ['basic', 'trick', 'equip'];\r\n                            let cards = Evt.target.getCards('h').slice(0);\r\n                            for (let i of cards) {\r\n                                let type = get.type(i, 'trick');\r\n                                if (types.contains(type))\r\n                                    types.remove(type);\r\n                            }\r\n                            Evt.num = types.length;\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (Evt.num) {\r\n                            player.chooseTarget('『监策』：选择令一名角色摸' + get.cnNumber(Evt.num) + '张牌', (card, player, target) => target != _status.event.source)\r\n                                .set('ai', (target) => {\r\n                                let player = _status.event.player;\r\n                                return target.needsToDiscard() ? get.attitude(target, player) / 2 : get.attitude(target, player);\r\n                            }).set('source', Evt.target);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (result.bool && result.targets) {\r\n                            result.targets[0].draw(Evt.num);\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    maixie: true,\r\n                }\r\n            },\r\n            chanbing: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                trigger: { global: 'roundStart' },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var numbers = [];\r\n                    for (var i = 0; i < player.storage.chanbing.length; i++) {\r\n                        numbers.add(get.number(player.storage.chanbing[i]));\r\n                    }\r\n                    var next = player.judge(card => {\r\n                        var numbers = _status.event.numbers;\r\n                        if (numbers && numbers.contains(get.number(card)))\r\n                            return -1;\r\n                        return 1;\r\n                    });\r\n                    next.set('numbers', numbers);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        var cards = [result.card];\r\n                        game.cardsGotoSpecial(cards, ui.special);\r\n                        player.$gain(cards, false);\r\n                        player.markAuto('chanbing', cards);\r\n                        player.recover();\r\n                    }\r\n                    else {\r\n                        player.loseHp();\r\n                    }\r\n                },\r\n                marktext: '缠',\r\n                intro: {\r\n                    onunmark(storage, player) {\r\n                        if (storage && storage.length) {\r\n                            player.$throw(storage, 1000);\r\n                            game.cardsDiscard(storage);\r\n                            game.log(storage, '被置入了弃牌堆');\r\n                            storage.length = 0;\r\n                        }\r\n                    },\r\n                    mark(dialog, content, player) {\r\n                        if (content && content.length) {\r\n                            dialog.addAuto(content);\r\n                        }\r\n                    },\r\n                    content(content, player) {\r\n                        if (content && content.length) {\r\n                            return get.translation(content);\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            buyu: {\r\n                trigger: { global: 'die' },\r\n                filter(Evt, player) {\r\n                    return Evt.player.getStockSkills('黄兔颂恩', '因缘斩断').filter(function (skill) {\r\n                        var info = get.info(skill);\r\n                        return info && !info.juexingji && !info.hiddenSkill && !info.zhuSkill && !info.charlotte && !info.limited;\r\n                    }).length > 0 && player.countCards('h');\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    'step 0';\r\n                    Evt.togain = trigger.player.getCards('he');\r\n                    trigger.player.lose(Evt.togain, ui.special, 'toStorage');\r\n                    trigger.player.$give(Evt.togain, player, false);\r\n                    player.markAuto('chanbing', Evt.togain);\r\n                    'step 1';\r\n                    var list = trigger.player.getStockSkills('黄兔颂恩', '因缘斩断').filter(function (skill) {\r\n                        var info = get.info(skill);\r\n                        return info && !info.juexingji && !info.hiddenSkill && !info.zhuSkill && !info.charlotte && !info.limited;\r\n                    });\r\n                    if (list.length == 1)\r\n                        Evt._result = { control: list[0] };\r\n                    else\r\n                        player.chooseControl(list).set('prompt', '『不渝』：选择获得一个技能').set('forceDie', true).set('ai', function () {\r\n                            return list.randomGet();\r\n                        });\r\n                    'step 2';\r\n                    if (player.storage.buyu)\r\n                        player.removeSkill(player.storage.buyu);\r\n                    player.storage.buyu = result.control;\r\n                    player.markSkill('buyu');\r\n                    player.addSkillLog(result.control);\r\n                    game.broadcastAll(function (skill) {\r\n                        var list = [skill];\r\n                        game.expandSkills(list);\r\n                        for (var i of list) {\r\n                            var info = lib.skill[i];\r\n                            if (!info)\r\n                                continue;\r\n                            if (!info.audioname2)\r\n                                info.audioname2 = {};\r\n                            info.audioname2.InabaHaneru = 'buyu';\r\n                        }\r\n                    }, result.control);\r\n                },\r\n                mark: true,\r\n                intro: { content: '当前『不渝』技能：$' },\r\n            },\r\n            hongyi: {\r\n                trigger: { global: 'judgeAfter' },\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return Evt.result.color == 'red' && player != _status.currentPhase && _status.currentPhase && _status.currentPhase.countCards('he');\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    _status.currentPhase.chooseCard('he', true, '『红移』：你需要交给' + get.translation(player) + '一张牌');\r\n                    'step 1';\r\n                    if (result.bool)\r\n                        player.gain(result.cards[0], _status.currentPhase, 'giveAuto');\r\n                }\r\n            },\r\n            jueshou: {\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('jueshou_used'))\r\n                        return false;\r\n                    var cards = player.getCards('he', { color: 'black' });\r\n                    for (var i = 0; i < cards.length; i++) {\r\n                        if (get.type(cards[i], 'trick') != 'trick')\r\n                            return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                position: 'he',\r\n                filterCard(card, player) {\r\n                    if (get.type(card, 'trick') == 'trick')\r\n                        return false;\r\n                    return get.color(card) == 'black' && get.owner(card) == player;\r\n                },\r\n                check(card) {\r\n                    return 7 - get.value(card);\r\n                },\r\n                discard: false,\r\n                prepare: 'throw',\r\n                filterTarget(card, player, target) {\r\n                    if (get.suit(card) == 'club')\r\n                        return lib.filter.targetEnabled2({ name: 'bingliang' }, player, target);\r\n                    return lib.filter.filterTarget({ name: 'bingliang' }, player, target);\r\n                },\r\n                content() {\r\n                    player.addTempSkill('jueshou_used', 'phaseUseEnd');\r\n                    player.useCard({ name: 'bingliang' }, target, cards).animate = false;\r\n                    if (get.type(cards[0]) == 'equip') {\r\n                        player.addTempSkill('jueshou_dist', { player: 'phaseZhunbeiBegin' });\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    dist: {\r\n                        mark: true,\r\n                        intro: { content: '距离+1' },\r\n                        mod: {\r\n                            globalTo(from, to, distance) {\r\n                                return distance + 1;\r\n                            },\r\n                        },\r\n                    },\r\n                    used: {},\r\n                },\r\n                ai: {\r\n                    effect(card) {\r\n                        if (get.name(card) == 'shandian')\r\n                            return [1, 1];\r\n                    },\r\n                    result: {\r\n                        target(player, target) {\r\n                            return get.effect(target, { name: 'bingliang' }, player, target);\r\n                        }\r\n                    },\r\n                    order: 9,\r\n                }\r\n            },\r\n            liuhua: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                mark: true,\r\n                intro: {\r\n                    name: '化羽',\r\n                    content: 'cards',\r\n                    onunmark(storage, player) {\r\n                        if (storage && storage.length) {\r\n                            player.$throw(storage, 1000);\r\n                            game.cardsDiscard(storage);\r\n                            game.log(storage, '被置入了弃牌堆');\r\n                            storage.length = 0;\r\n                        }\r\n                    },\r\n                },\r\n                cardAround: true,\r\n                trigger: { global: 'phaseAfter' },\r\n                lastDo: true,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h') && game.countPlayer2(cur => cur.getHistory('damage').length);\r\n                },\r\n                check(Evt, player) {\r\n                    return player.countCards('h') <= 2 || player.getStorage('liuhua').length <= 1;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.showHandcards();\r\n                    Evt.cards = player.getCards('h');\r\n                    'step 1';\r\n                    player.lose(Evt.cards, ui.special, 'toStorage');\r\n                    player.$give(Evt.cards, player, false);\r\n                    player.markAuto('liuhua', Evt.cards);\r\n                    game.log(player, '将', Evt.cards, '置于武将牌上');\r\n                    game.delay(1);\r\n                    'step 2';\r\n                    player.insertPhase();\r\n                },\r\n                group: 'liuhua_regain',\r\n                subSkill: {\r\n                    regain: {\r\n                        trigger: { player: ['phaseBefore', 'turnOverBefore'], target: ['shiji2After'] },\r\n                        firstDo: true,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            if ((Evt.name == 'phase' && Evt.skill != 'liuhua') || (Evt.name == 'turnOver' && (!Evt.getParent()._trigger || Evt.getParent()._trigger.skill != 'liuhua')))\r\n                                return false;\r\n                            if (player.storage.liuhua.length < 4)\r\n                                return false;\r\n                            var list = get.suit3(player.storage.liuhua);\r\n                            return list.length >= 4;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            var next = player.chooseCardButton('###' + get.translation('liuhua') + '###获得一种颜色的『化羽』牌', player.storage.liuhua, true);\r\n                            next.set('ai', function (button) {\r\n                                return get.value(button.link);\r\n                            });\r\n                            next.set('cards', player.storage.liuhua);\r\n                            'step 1';\r\n                            if (result.bool) {\r\n                                game.delay(0.5);\r\n                                player.logSkill('liuhua');\r\n                                Evt.cards = player.storage.liuhua.filter(card => get.color(card) == get.color(result.links[0]));\r\n                                player.unmarkAuto('liuhua', Evt.cards);\r\n                                player.$give(Evt.cards, player, false);\r\n                                player.gain(Evt.cards);\r\n                            }\r\n                            else\r\n                                Evt.finish();\r\n                            'step 2';\r\n                            if (trigger.name == 'turnOver')\r\n                                trigger.cancel(true);\r\n                            player.turnOver();\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            yishi: {\r\n                trigger: { player: 'phaseBefore' },\r\n                firstDo: true,\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return Evt.skill;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.storage.yishi_use = _status.currentPhase;\r\n                    'step 1';\r\n                    player.addTempSkill('yishi_use');\r\n                    'step 2';\r\n                    game.filterPlayer(cur => {\r\n                        if (cur != player && cur != player.storage.yishi_use) {\r\n                            cur.addTempSkill('yishi_cardDisable');\r\n                        }\r\n                    });\r\n                },\r\n                subSkill: {\r\n                    use: {\r\n                        mark: 'character',\r\n                        intro: {\r\n                            content(storage, player) {\r\n                                if (storage == player)\r\n                                    return '使用牌只能指定自己为目标';\r\n                                return '使用牌只能指定自己或' + get.translation(storage) + '为目标';\r\n                            }\r\n                        },\r\n                        onremove: true,\r\n                        mod: {\r\n                            playerEnabled(card, player, target) {\r\n                                if (player != target && player.storage.yishi_use != target)\r\n                                    return false;\r\n                            }\r\n                        }\r\n                    },\r\n                    cardDisable: {\r\n                        mark: true,\r\n                        intro: {\r\n                            name: '遗世',\r\n                            content: '本回合内不能使用或打出牌'\r\n                        },\r\n                        mod: {\r\n                            cardEnabled2(card) {\r\n                                return false;\r\n                            },\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            shiji: {\r\n                unique: true,\r\n                global: 'shiji2',\r\n                zhuSkill: true,\r\n            },\r\n            shiji2: {\r\n                enable: 'phaseUse',\r\n                prompt() {\r\n                    var player = _status.event.player;\r\n                    var list = game.filterPlayer(function (target) {\r\n                        return target.hasZhuSkill('shiji', player) && player.group == target.group && target.getStorage('liuhua').length;\r\n                    });\r\n                    var str = '选择' + get.translation(list);\r\n                    if (list.length > 1)\r\n                        str += '中的一人';\r\n                    str += '将其『化羽』牌不包含花色的任意张牌置于之上';\r\n                    return str;\r\n                },\r\n                filter(Evt, player) {\r\n                    if (player.countCards('h') == 0)\r\n                        return false;\r\n                    return game.hasPlayer(function (target) {\r\n                        return target.hasZhuSkill('shiji', player) && player.group == target.group && target.getStorage('liuhua').length;\r\n                    });\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    return target.hasZhuSkill('shiji', player) && player.group == target.group;\r\n                },\r\n                clearTime: true,\r\n                prepare(cards, player, targets) {\r\n                    targets[0].logSkill('shiji');\r\n                },\r\n                usable: 1,\r\n                content() {\r\n                    \"step 0\";\r\n                    var suits = get.suit3(target.getStorage('liuhua'));\r\n                    player.chooseCard(true, 'he', '选择置于' + get.translation(target) + '『化羽』牌上的牌', [1, Infinity], function (card, player) {\r\n                        return !_status.event.suits.contains(get.suit(card));\r\n                    }).set('suits', suits).set('ai', card => {\r\n                        var evt = _status.event.getParent();\r\n                        if (evt.target.isTurnedOver() && (_status.event.suits + ui.selected.cards.length) < 5)\r\n                            return get.value(card, evt.target, 'raw') - 1;\r\n                        if ((evt.player.countCards('he') - ui.selected.cards.length) < 3)\r\n                            return get.value(card, evt.target, 'raw') - 9;\r\n                        return get.value(card, evt.target, 'raw') - 5;\r\n                    }).set('complexCard', true);\r\n                    \"step 1\";\r\n                    if (result.bool && result.cards && result.cards.length) {\r\n                        Evt.cards = result.cards;\r\n                        player.lose(Evt.cards, ui.special, 'toStorage');\r\n                        player.$give(Evt.cards, target, false);\r\n                        target.markAuto('liuhua', Evt.cards);\r\n                        game.log(player, '将', Evt.cards, '置于', target, '武将牌上');\r\n                    }\r\n                },\r\n                ai: {\r\n                    basic: {\r\n                        order: 1\r\n                    },\r\n                    expose: 0.2,\r\n                    result: {\r\n                        target(player, target) {\r\n                            if (player.countCards('h', 'du') && get.attitude(player, target) < 0)\r\n                                return -1;\r\n                            if (player.countCards('h') >= player.hp)\r\n                                return 1;\r\n                            if (target.isTurnedOver())\r\n                                return 2;\r\n                            return 0;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        card: {},\r\n        translate: {\r\n            vtuber_upd8: `UPD8`,\r\n            KizunaAI: `绊爱`,\r\n            KizunaAI_info: `绊爱`,\r\n            ailian: `爱链`,\r\n            ailian_info: `出牌阶段限一次，你可以将任意手牌展示并交给其他角色，若给出的牌类型均不同，你可以令等量角色横置；若获得牌的角色互相相邻，你可以视为使用了一张指定目标数等于获得牌角色数的基本牌。`,\r\n            ailian_append: lib.figurer(`特性：传递关键牌`),\r\n            qixu: `启虚`,\r\n            qixu1: `启虚`,\r\n            qixu2: `启虚`,\r\n            qixu3: `杀启虚`,\r\n            qixu4: `启虚`,\r\n            qixu5: `闪启虚`,\r\n            qixu_info: `主公技 当你需要使用或打出【杀】或【闪】时，你可以声明之，若没有角色弃置一张声明牌，则视为你使用或打出了此牌。每轮每项限一次。`,\r\n            qixu_append: lib.figurer(`特性：白嫖[基本牌]`),\r\n            MiraiAkari: `未来明`,\r\n            shiyilijia: `失忆离家`,\r\n            shiyilijia_info: `出牌阶段限一次，你可弃置所有手牌，若如此做，你于回合结束时摸等量的牌。`,\r\n            shiyilijia_append: lib.figurer(`特性：制衡 克己`),\r\n            seqinghuashen: `色情化身`,\r\n            seqinghuashen_info: `其他角色的【桃】因使用进入弃牌堆时，你可以令其摸一张牌，然后你获得其一张牌。`,\r\n            InuyamaTamaki: `犬山玉姬`,\r\n            InuyamaTamaki_info: `犬山玉姬`,\r\n            rongyaochengyuan: `荣誉成员`,\r\n            rongyaochengyuan_info: `其他角色对你造成伤害时，若其没有「homolive」标记，你可令其获得一个，然后防止此伤害。`,\r\n            hundunliandong: `混沌联动`,\r\n            hundunliandong_info: `出牌阶段限一次，你可以指定包括你在内势力各不同的任意名角色，从你开始依次弃一张牌直到：共有四种花色；或有角色因此失去最后一张手牌。此技能计算势力时，拥有「homolive」标记的角色视为同一势力`,\r\n            hundunliandong_append: lib.figurer(`特性：强制弃牌`),\r\n            ShirayukiMishiro: `白雪深白`,\r\n            tianyi: `梦幻天衣`,\r\n            tianyi_info: `出牌阶段限一次，若你没有装备防具，你可以将一张牌置于武将牌上，称为「衣」。每回合每种花色限一次，当你使用或成为锦囊牌的目标时，若该牌花色与「衣」不同，你摸一张牌；若花色相同，你可以取消之，然后弃置「衣」并获得此牌。准备阶段，弃置「衣」，然后你可以移动场上一张牌。`,\r\n            nveyu: `甜言虐语`,\r\n            nveyu_info: `锁定技 当你于一回合内首次造成伤害时，你令目标回复一点体力，与其各摸一张牌，然后本回合你对其使用牌无距离与次数限制。`,\r\n            nveyu_append: lib.figurer(`特性：难上手 辅助`),\r\n            Siro: `电脑少女小白`,\r\n            Siro_ab: `小白`,\r\n            zhongxinghezou: `众星合奏`,\r\n            zhongxinghezou_info: `每回合限一次，你使用实体牌指定目标后，可令目标外的一名角色亮出一张牌。若两牌点数之和：小于12~你获得亮出牌令你使用的牌无效；不小于12~你使用的牌结算后，亮出牌的角色对同目标使用亮出牌；等于12~你摸一张牌并令亮出牌的角色回复1点体力。`,\r\n            zhongxinghezou_append: lib.figurer(`通过指定队友或自己，实现一回合出多次【杀】和摸牌`),\r\n            xiugong: `天道宿宫`,\r\n            xiugong_info: `出牌阶段开始时，你可以猜测一名其他角色手牌中锦囊牌的数量并令其展示手牌，若猜测正确，你摸一张牌并令你本回合的『众星合奏』增加等量次数上限。`,\r\n            xiugong_append: lib.figurer(`特性：观看手牌 额外摸牌 难上手`),\r\n            Bacharu: `巴恰鲁`,\r\n            zuodun: `我身作盾`,\r\n            zuodun_info: `每回合限一次，其他角色受到伤害时，你可将此伤害转移给你，然后你与伤害来源各摸一张牌并获得『众星合奏』直到你的回合结束。`,\r\n            zuodun_append: lib.figurer(`特性：辅助`),\r\n            baidao: `白道游星`,\r\n            baidao_info: `出牌阶段限一次，你可以展示所有手牌，每有一张点数大于J便回复1点体力；每有一张点数小于3便令你本回合的『众星合奏』增加1次数上限。`,\r\n            XiaoxiXiaotao: `小希小桃`,\r\n            XiaoxiXiaotao_info: `小希小桃`,\r\n            yipengyidou: `一捧一逗`,\r\n            yipengyidou_info: `出牌阶段限一次，你可与一名其他角色拼点，赢的角色可以立即将一张牌当本回合进入弃牌堆的一张基本牌或通常锦囊牌使用。然后没赢的角色也可如此做；或令赢的角色回复1点体力。`,\r\n            yipengyidou_append: lib.figurer(`通过与队友拼点，多次使用关键牌`),\r\n            renleiguancha: `人类观察`,\r\n            renleiguancha_info: `结束阶段，你可以选择一名其他角色。你的下回合开始时，若该角色在期间：造成过伤害~你摸一张牌；死亡或杀死过角色~你造成1点伤害；以上皆无~你摸两张牌并失去1点体力。`,\r\n            renleiguancha_append: lib.figurer(`特性：额外摸牌`),\r\n            Reine: `兰音`,\r\n            yueyao: `月谣`,\r\n            yueyao_info: `锁定技 游戏或回合开始时，你记录当前的手牌数为X。<br>\r\n\t\t\t一名角色的手牌数为X时，其不能对你使用牌。<br>\r\n\t\t\t你手牌数等于X时，造成的伤害+1。`,\r\n            yueyao_append: lib.figurer(`特性：爆发`),\r\n            kongling: `空灵`,\r\n            kongling_info: `你受到伤害后，可以令一名角色将手牌调整至X。`,\r\n            kongling_append: lib.figurer(`特性：卖血 辅助`),\r\n            KaguyaLuna: `辉夜月`,\r\n            KaguyaLuna_info: `辉夜月`,\r\n            jiajiupaidui: `假酒派对`,\r\n            jiajiupaidui_info: `轮次技 当你需要使用【酒】时，你可以令两名角色各弃置一张牌，若其中包含♠或点数9，视为你使用之（不计入次数）。若均为♠或点数9，你摸一张牌并重置此技能。`,\r\n            jiajiupaidui_append: lib.figurer(`特性：白嫖【酒】 强制弃牌`),\r\n            kuangzuiluanwu: `狂醉乱舞`,\r\n            kuangzuiluanwu_info: `<font color=#daa>限定技</font> 出牌阶段，你可以扣减一点体力上限，视为使用了一张无距离限制的目标数为X的【杀】。（X为你当前的【酒】层数）`,\r\n            InabaHaneru: `因幡はねる`,\r\n            jiance: `监策`,\r\n            jiance_info: `你体力减少后，可以令一名角色展示所有手牌，若不包含所有类型的牌，你可以令另一名角色摸X张牌（X为其中不包含的类型数）。`,\r\n            jiance_append: lib.figurer(`特性：卖血`),\r\n            chanbing: `缠病`,\r\n            chanbing_info: `锁定技 一轮开始时，你进行判定，若点数与你武将牌上的牌均不相同，将之置于你武将牌上并回复1点体力；否则，你失去1点体力。`,\r\n            buyu: `不渝`,\r\n            buyu_info: `一名角色死亡时，你可以将其所有牌置于武将牌上并获得其的一个技能直到你下次以此法获得技能。`,\r\n            buyu_append: lib.figurer(`特性：难上手`),\r\n            UmoriHinako: `宇森ひなこ`,\r\n            hongyi: `红移`,\r\n            hongyi_info: `每回合限一次，当出现红色判定结果后，你可以令当前回合角色交给你一张牌。`,\r\n            jueshou: `绝收`,\r\n            jueshou_info: `出牌阶段限一次，你可以将一张黑色基本牌或装备牌当作【兵粮寸断】使用，若为♣，则此【兵粮寸断】无距离限制；若为装备牌，其他角色计算与你的距离+1直到你下个回合开始。`,\r\n            jueshou_append: lib.figurer(`特性：易上手`),\r\n            Kaf: `花谱`,\r\n            liuhua: `化羽`,\r\n            liuhua_info: `一个回合结束时，若有角色受到了伤害，你可以将所有手牌置于武将牌上并获得一个额外回合。你的『化羽』牌增加后，若之包含四种花色，你获得一种颜色的『化羽』牌并翻面。`,\r\n            yishi: `遗世`,\r\n            yishi_info: `锁定技 在你的额外回合内，你使用牌只能指定你或上一回合角色为目标，且其他角色不能使用或打出牌。`,\r\n            yishi_append: lib.figurer(`特性：难上手`),\r\n            shiji: `市迹`,\r\n            shiji2: `市迹`,\r\n            shiji_info: `主公技 同势力角色的出牌阶段限一次，其可以将『化羽』牌不包含花色的任意张牌置于之上。`,\r\n            shiji_append: lib.figurer(`只能在已有『化羽』牌时发动`),\r\n            Rim: `理芽`,\r\n            shenghua: `生花`,\r\n            shenghua_info: `出牌阶段，你可以弃置所有手牌，然后摸X张牌。（X为弃牌数减去本阶段此技能发动的次数）`,\r\n            zhanchong: `绽虫`,\r\n            zhanchong_info: `当一张装备牌不因使用正面朝上离开你的手牌区时，你可以翻面并弃置其他角色的一张牌，若不为装备牌，其受到一点伤害。`,\r\n            zhanchong_append: lib.figurer(`特性：爆发 易上手`),\r\n            Kafu: `可不`,\r\n            nisheng: `拟声`,\r\n            nisheng_info: `一个额定回合结束后，你可以展示两张点数相同的手牌并获得一个额外的回合。每个点数限一次。`,\r\n            jingyan: `精赝`,\r\n            jingyan_info: `你受到伤害后，可以翻面并获得来源一半的牌（向上取整）。`,\r\n            jingyan_append: lib.figurer(`特性：卖血`),\r\n            IsekaiJoucho: `ヰ世界情绪`,\r\n            baiqing: `白情`,\r\n            baiqing_info: `一回合内第X张【杀】被使用时，你可以亮出牌堆顶X张牌，获得其中与此【杀】颜色不同的牌。（X为你已损失的体力值+1）`,\r\n            shuangxing: `星徊`,\r\n            shuangxing_info: `你使用仅指定其他角色为目标的锦囊牌后，可以选择一项：<br>令你本回合使用牌无次数限制；令其中一名目标对你使用一张【杀】，否则你获得其一张牌。`,\r\n            shuangxing_append: lib.figurer(`特性：挑衅`),\r\n            DoumyoujiHaruto: `道明寺晴翔`,\r\n            YuNi: `YuNi`,\r\n            Fairys: `Fairys`,\r\n            Fairys_ab: `鹦鹉`,\r\n        },\r\n    };\r\n});\r\n\n\n//# sourceURL=webpack:///./character/vtuber.ts?")},"./character/xingtian.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _skilltype__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./skilltype */ \"./character/skilltype.ts\");\n\r\nwindow.game.import('character', function (lib, game, ui, get, ai, _status) {\r\n    let cardSkill = {\r\n        g_ci: {\r\n            ruleSkill: true,\r\n            mod: {\r\n                cardname: function (card, player) {\r\n                    if (card.name == 'ci')\r\n                        return 'sha';\r\n                },\r\n            },\r\n            trigger: { player: 'useCard1' },\r\n            forced: true,\r\n            filter: function (Evt, player) {\r\n                return Evt.card && Evt.card.name == 'sha' && Evt.addCount !== false && Evt.cards &&\r\n                    Evt.cards.length == 1 && get.name(Evt.cards[0], null) == 'ci';\r\n            },\r\n            content: function () {\r\n                if (trigger.addCount !== false) {\r\n                    trigger.addCount = false;\r\n                    if (player.stat[player.stat.length - 1].card.sha > 0) {\r\n                        player.stat[player.stat.length - 1].card.sha--;\r\n                    }\r\n                }\r\n                player.addTempSkill('g_ci2', { player: 'useCardAfter' });\r\n            },\r\n        },\r\n        g_ci2: {\r\n            cardSkill: true,\r\n            trigger: { source: 'damageBegin4' },\r\n            forced: true,\r\n            logTarget: 'player',\r\n            filter: function (Evt, player) {\r\n                return Evt.player.hujia > 0 && player.hasSkillTag('overHujia', true, {\r\n                    name: Evt.card.name,\r\n                    target: Evt.player,\r\n                    card: Evt.card\r\n                });\r\n            },\r\n            content: function () { },\r\n            ai: {\r\n                unequip: true,\r\n                overHujia: true,\r\n                skillTagFilter: function (player, tag, arg) {\r\n                    if (!arg || !arg.card || arg.card.name != 'sha') {\r\n                        return false;\r\n                    }\r\n                    var cards = arg.card.cards;\r\n                    if (!cards || cards.length != 1 || get.name(cards[0], null) != 'ci') {\r\n                        return false;\r\n                    }\r\n                },\r\n            }\r\n        },\r\n        g_wudaoqu: {\r\n            cardSkill: true,\r\n            trigger: { global: 'useCard' },\r\n            forced: true,\r\n            popup: false,\r\n            filter: function (Evt, player) {\r\n                if (!Evt.targets.contains(player) || !Evt.cards || !Evt.cards.length)\r\n                    return false;\r\n                if (Evt.getParent().directHit && Evt.getParent().directHit.contains(player))\r\n                    return false;\r\n                return player.hasUsableCard('wudaoqu');\r\n            },\r\n            content: function () {\r\n                'step 0';\r\n                trigger.wudaoqu = true;\r\n                player.chooseToUse('是否对' + get.translation(trigger.card) + '使用【无刀取】？').set('ai1', function (card) {\r\n                    return _status.event.bool;\r\n                }).set('bool', -get.effect(player, trigger.card, trigger.player, player)).set('respondTo', [trigger.player, trigger.card]).set('filterCard', function (card, player) {\r\n                    if (get.name(card) != 'wudaoqu')\r\n                        return false;\r\n                    return lib.filter.cardEnabled(card, player, 'forceEnable');\r\n                });\r\n                'step 1';\r\n                delete trigger.wudaoqu;\r\n            }\r\n        },\r\n    };\r\n    return {\r\n        name: 'xingtian',\r\n        connect: true,\r\n        card: {\r\n            ci: {\r\n                fullskin: true,\r\n                enable: true,\r\n                type: 'basic',\r\n                vanish: true,\r\n                global: ['g_ci'],\r\n                materials: ['sha', 'sha'],\r\n                materials_prompt: '【杀】+【杀】',\r\n                derivation: true,\r\n                derivationpack: 'xingtian',\r\n                addinfo: '杀'\r\n            },\r\n            peng: {\r\n                fullskin: true,\r\n                enable: true,\r\n                type: 'basic',\r\n                vanish: true,\r\n                filterTarget: function (card, player, target) {\r\n                    return true;\r\n                },\r\n                selectTarget: 1,\r\n                modTarget: true,\r\n                materials: ['sha', 'shan'],\r\n                materials_prompt: '【杀】+【闪】',\r\n                derivation: true,\r\n                derivationpack: 'xingtian',\r\n                content: function () {\r\n                    'step 0';\r\n                    target.loseHp();\r\n                    'step 1';\r\n                    target.draw(2);\r\n                },\r\n                ai: {\r\n                    order: 7,\r\n                    value: [2, 4, 6, 2],\r\n                    useful: [3, 2, 2, 1],\r\n                    result: {\r\n                        target: function (player, target) {\r\n                            if (target.hasSkill('zhangdeng') || target.hp == Infinity)\r\n                                return 3;\r\n                            if (target.hp == 1)\r\n                                return -2;\r\n                            return target.hp - 2;\r\n                        },\r\n                    },\r\n                    tag: {\r\n                        loseHp: 1,\r\n                        draw: 2,\r\n                    }\r\n                }\r\n            },\r\n            gao: {\r\n                fullskin: true,\r\n                type: 'basic',\r\n                vanish: true,\r\n                enable: function (card, player) {\r\n                    return false;\r\n                },\r\n                savable: function (card, player, dying) {\r\n                    return dying != player;\r\n                },\r\n                selectTarget: -1,\r\n                modTarget: function (card, player, target) {\r\n                    return target.hp < target.maxHp;\r\n                },\r\n                materials: ['tao', 'jiu'],\r\n                materials_prompt: '【桃】+【酒】',\r\n                derivation: true,\r\n                derivationpack: 'xingtian',\r\n                content: function () {\r\n                    target.recover(3);\r\n                },\r\n                ai: {\r\n                    basic: {\r\n                        useful: function (card, i) {\r\n                            if (game.hasPlayer(function (cur) {\r\n                                return cur.hp <= 1;\r\n                            })) {\r\n                                if (i == 0)\r\n                                    return 8;\r\n                                return 6;\r\n                            }\r\n                            return 0.5;\r\n                        },\r\n                        value: function (card, player, i) {\r\n                            if (game.hasPlayer(function (cur) {\r\n                                return get.recoverEffect(cur, player, player) > 1;\r\n                            })) {\r\n                                if (player.hp <= 2) {\r\n                                    if (i == 0)\r\n                                        return 7.3;\r\n                                    return 3;\r\n                                }\r\n                                else {\r\n                                    if (i == 0)\r\n                                        return 10;\r\n                                    return 6;\r\n                                }\r\n                            }\r\n                            return 1;\r\n                        },\r\n                    },\r\n                    result: {\r\n                        target: 6,\r\n                    },\r\n                    tag: {\r\n                        recover: 3,\r\n                        save: 1,\r\n                    }\r\n                }\r\n            },\r\n            wudaoqu: {\r\n                fullskin: true,\r\n                type: 'trick',\r\n                vanish: true,\r\n                global: ['g_wudaoqu'],\r\n                notarget: true,\r\n                materials: ['shan', 'wuxie'],\r\n                materials_prompt: '【闪】+【无懈可击】',\r\n                derivation: true,\r\n                derivationpack: 'xingtian',\r\n                content: function () {\r\n                    var evt = Evt.getParent(3)._trigger;\r\n                    if (evt.wudaoqu) {\r\n                        evt.cancel();\r\n                        Evt.cards = evt.cards;\r\n                        var next = game.createEvent('wudaoqu_gain');\r\n                        next.player = player;\r\n                        next.setContent(function () {\r\n                            var cards = Evt.getParent().cards.filterInD();\r\n                            if (cards.length)\r\n                                player.gain(cards, 'gain2', 'log');\r\n                        });\r\n                    }\r\n                },\r\n                ai: {\r\n                    basic: {\r\n                        useful: [6, 4],\r\n                        value: [7, 4],\r\n                    },\r\n                    result: { player: 1 },\r\n                },\r\n            },\r\n            daluandou: {\r\n                fullskin: true,\r\n                enable: true,\r\n                type: 'trick',\r\n                vanish: true,\r\n                materials: [{ color: 'red' }, { color: 'black' }],\r\n                materials_prompt: '红色牌+黑色牌',\r\n                derivation: true,\r\n                derivationpack: 'xingtian',\r\n                filterTarget: function (card, player, target) {\r\n                    return player.canCompare(target);\r\n                },\r\n                content: function () {\r\n                    'step 0';\r\n                    player.chooseToCompare(target);\r\n                    'step 1';\r\n                    if (result.winner == player) {\r\n                        player.gainPlayerCard(target, [1, 3], 'hej', true).set('filterButton', function (button) {\r\n                            for (var i = 0; i < ui.selected.buttons.length; i++) {\r\n                                if (get.position(button.link) == get.position(ui.selected.buttons[i].link))\r\n                                    return false;\r\n                            }\r\n                            return true;\r\n                        });\r\n                    }\r\n                    else if (result.winner == target) {\r\n                        target.gainPlayerCard(player, [1, 3], 'hej', true).set('filterButton', function (button) {\r\n                            for (var i = 0; i < ui.selected.buttons.length; i++) {\r\n                                if (get.position(button.link) == get.position(ui.selected.buttons[i].link))\r\n                                    return false;\r\n                            }\r\n                            return true;\r\n                        });\r\n                    }\r\n                },\r\n                ai: {\r\n                    basic: {\r\n                        useful: [5, 4, 2],\r\n                        value: [7, 3, 1],\r\n                    },\r\n                    result: { player: 1, target: -1 },\r\n                },\r\n            },\r\n        },\r\n        character: {\r\n            star_HosimiyaSio: ['female', 'qun', 3, ['xuanyu', 'xingheng'],],\r\n        },\r\n        characterSort: {\r\n            xingtian: {},\r\n        },\r\n        characterIntro: {},\r\n        skill: Object.assign(Object.assign({}, cardSkill), { xuanyu: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                init(player, skill) {\r\n                    return player.$[skill] = [];\r\n                },\r\n                filter(Evt, player) {\r\n                    var _a;\r\n                    if (Evt.getParent().target && Evt.getParent().player === player) {\r\n                        let map = Evt.getl(Evt.getParent().target);\r\n                        if (((_a = map === null || map === void 0 ? void 0 : map.hs) === null || _a === void 0 ? void 0 : _a.length) === 0 && (map.js.length || map.es.length))\r\n                            return Evt.cards.length === 1;\r\n                    }\r\n                    return (Evt.animate == 'gain2' || Evt.animate == 'give' || Evt.visible == true) && Evt.cards.length === 1;\r\n                },\r\n                content: [() => {\r\n                        Evt.card = trigger.cards[0];\r\n                        player.showCards(Evt.card, '『宣裕』记录牌');\r\n                        if (player.$.xuanyu.length) {\r\n                            Evt.num = get.number(Evt.card) + get.number(player.$.xuanyu[0]);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                        player.$.xuanyu.unshift(Evt.card);\r\n                        if (!player.marks.xuanyu.number)\r\n                            player.unmarkSkill('xuanyu');\r\n                        player.markSkill('xuanyu', null, player.$.xuanyu[0]);\r\n                    }, () => {\r\n                        if (Evt.num % 4 === 0) {\r\n                            player.recover();\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.num % 7 === 0) {\r\n                            player.draw(2);\r\n                        }\r\n                    }],\r\n                intro: {\r\n                    name: '宣裕',\r\n                    content: 'cards',\r\n                },\r\n            }, 'mark:card').setT('gainEnd'), xingheng: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    console.log(Evt);\r\n                    if (['phaseJudge', 'phaseDiscard'].includes(Evt.name))\r\n                        return player.$.xuanyu.length % 2 === 1;\r\n                    else\r\n                        return player.$.xuanyu.length % 2 === 0 && Evt.targets.length === 1;\r\n                },\r\n                content: [() => {\r\n                        console.log('A');\r\n                        if (['phaseJudge', 'phaseDiscard'].includes(trigger.name)) {\r\n                            trigger.cancel();\r\n                        }\r\n                        else {\r\n                            Evt.target = trigger.player;\r\n                            player.gainPlayerCard(Evt.target, 'hej', true);\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        player.phaseUse();\r\n                    }, () => {\r\n                        let stat = player.getStat();\r\n                        stat.card = {};\r\n                        for (let i in stat.skill) {\r\n                            let bool = false;\r\n                            let info = lib.skill[i];\r\n                            if (info.enable != undefined) {\r\n                                if (typeof info.enable == 'string' && info.enable == 'phaseUse')\r\n                                    bool = true;\r\n                                else if (typeof info.enable == 'object' && info.enable.contains('phaseUse'))\r\n                                    bool = true;\r\n                            }\r\n                            if (bool)\r\n                                stat.skill[i] = 0;\r\n                        }\r\n                    }],\r\n                combo: 'xuanyu'\r\n            }, 'logTarget:player').setT({ player: ['phaseJudge', 'phaseDiscard'], target: 'useCardTo' }, 'Before') }),\r\n        characterReplace: {},\r\n        translate: {\r\n            ci: '刺',\r\n            g_ci: '刺',\r\n            g_ci2: '刺',\r\n            ci_info: '在规则上视为【杀】。此牌无视目标的防具与护甲，且不计入次数。',\r\n            peng: '烹',\r\n            peng_info: '出牌阶段，对一名角色使用，目标失去一点体力并摸两张牌。',\r\n            gao: '膏',\r\n            gao_info: '其他角色的濒死阶段，对其使用，目标回复3点体力。',\r\n            wudaoqu: '无刀取',\r\n            wudaoqu_info: '成为实体牌的目标时使用，取消此牌，并立即获得之。',\r\n            ruiping: '锐评',\r\n            ruiping_info: '出牌阶段，你可以与一名角色拼点，赢的角色获得双方拼点牌并受到一点火焰伤害。',\r\n            daluandou: '大乱斗',\r\n            daluandou_info: '出牌阶段，你可以与一名角色拼点，赢的角色获得对方每个区域各一张牌。',\r\n            star_HosimiyaSio: `☆星宫汐`,\r\n            xuanyu: `宣裕`,\r\n            xuanyu_info: `有且仅有一张牌正面朝上加入你的手牌时，你可以记录之，若其与此技能上一张记录牌的点数和为：<br>\r\n\t\t\t4倍数～你回复一点体力；7倍数～你摸两张牌。`,\r\n            xingheng: `星恒`,\r\n            xingheng_info: `每回合限一次，若你『宣裕』记录过的牌数为：<br>\r\n\t\t\t奇数～你可以将判定或弃牌阶段改为出牌阶段；偶数～一名角色使用牌指定你为唯一目标时，你可以获得其区域内一张牌。`,\r\n        },\r\n    };\r\n});\r\n\n\n//# sourceURL=webpack:///./character/xingtian.ts?")},"./character/yuzu.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _skilltype__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./skilltype */ \"./character/skilltype.ts\");\n\r\nwindow.game.import('character', function (lib, game, ui, get, ai, _status) {\r\n    return {\r\n        name: \"yuzu\",\r\n        connect: true,\r\n        character: {\r\n            xinyuelan: ['female', 'qun', 4, ['chisha', 'wujian'], ['guoV']],\r\n            Shiranekoyuki: ['female', 'qun', 4, ['jvliu', 'wuxia'], ['riV']],\r\n            TsukushiAria: ['female', 'qun', 3, ['tatongling', 'yumeng'], ['riV']],\r\n            AoiYui: ['female', 'qun', 3, ['suyuan', 'mujian'], ['riV']],\r\n            NachoNeko: ['female', 'qun', 4, ['cirong', 'maoyu'], ['riV']],\r\n            HinokumaRan: ['female', 'nanashi', 4, ['yixiang', 'xianyu'], ['riV']],\r\n            Melody: ['female', 'vshojo', 4, ['kuangbiao', 'leizhu', 'tonggan'], ['zhu', 'yingV']],\r\n            ShishiroBotan: ['female', 'holo', 4, ['sbliedan', 'buqiang']],\r\n            PinkyPopHepburn: ['female', 'qun', 4, ['pphpanfeng', 'lanyue']],\r\n            Shiratama: ['female', 'qun', 4, ['meihua', 'shentian'],],\r\n            KotobukiYume: ['female', 'qun', 4, ['xuanquan', 'rusu'],],\r\n            UmitsukiShell: ['female', 'qun', 4, ['beike', 'wenda'],],\r\n            PastelUyu: ['female', 'qun', 3, ['chenming', 'xiantong'],],\r\n            HoureiTenten: ['female', 'qun', 3, ['shengquan', 'yizhu'], ['guoV']],\r\n            shanbao: ['female', 'qun', 4, ['fengxu'], ['guoV']],\r\n            qiudi: ['female', 'qun', 3, ['xiangnuo'], ['guoV']],\r\n            luyao: ['female', 'qun', 4, ['manyou', 'changjie'], ['guoV']],\r\n            Xiaorou: ['female', 'xuyan', 3, ['rouqing', 'guangying'], ['guoV']],\r\n            Ailurus: ['female', 'xuyan', 4, ['aldanyan', 'lunao'], ['guoV']],\r\n            lanruo: ['female', 'hunmiao', 3, ['dieyuan', 'shengyang'], ['guoV']],\r\n            lanre: ['female', 'hunmiao', 3, ['daoyi', 'shengyin'], ['guoV']],\r\n            hunmiaomiao: ['female', 'hunmiao', 3, ['xiuyou', 'jiyuan'], ['guoV']],\r\n            caicai: ['female', 'qun', 5, ['tibing', 'guangtui'], ['guoV']],\r\n            ByakuyaMayoi: ['female', 'chaos', 4, ['bykuangxin'], ['guoV']],\r\n            Mamoru: ['male', 'chaos', '-3/3', ['shoumi', 'yanwang'], ['guoV']],\r\n            AchikitaChinami: ['female', 'nijisanji', 3, ['yingkuo', 'shengni'],],\r\n            HayamiSaki: ['female', 'paryi', 4, ['tuncai', 'zhidu'], ['zhu', 'guoV']],\r\n            KiyoInga: ['female', 'paryi', 4, ['huanxi', 'celv'], ['yingV']],\r\n            shanguangpika: ['female', 'qun', 4, ['yikai', 'pkyuanjun'], ['guoV']],\r\n            Taffy: ['female', 'qun', 3, ['qianqi', 'chutan'], ['guoV']],\r\n            CierraRunis: ['female', 'qun', 3, ['minghuahongxiao']],\r\n            RinaHayashi: ['female', 'qun', 3, ['xilv', 'bana'], ['guoV']],\r\n            Kira: ['female', 'qun', 4, ['weiguang', 'liangqin'], ['guoV']],\r\n            Kino: ['female', 'HappyEl', 4, ['xiandu', 'yexi'], ['guoV']],\r\n            tangjiuxia: ['female', 'HappyEl', 4, ['jiuxian', 'yujian'], ['guoV']],\r\n            liqingge: ['female', 'HappyEl', 4, ['tage'], ['guoV']],\r\n            JingujiTamamo: ['female', 'HappyEl', 3, ['aowei', 'meizhan'], ['zhu', 'guoV']],\r\n            iiivan: ['female', 'xuefeng', 4, ['shuipo', 'pianchao'], ['guoV']],\r\n            shenxiaoya: ['female', 'xuefeng', 4, ['xyshixi', 'wenxin'], ['guoV']],\r\n            yizhiYY: ['male', 'psp', 4, ['bianshi'], ['guoV', 'P_SP']],\r\n            AkumaYuu: ['male', 'psp', 4, ['akjianwu', 'tongzhao'], ['guoV', 'P_SP']],\r\n            AiTeN: ['male', 'psp', 4, ['langfei', 'xieyun'], ['guoV', 'P_SP']],\r\n            shengge: ['female', 'psp', 4, ['dixian', 'gumei'], ['guoV', 'P_SP', 'doublegroup:psp:qun']],\r\n            airuisi: ['female', 'Tencent', 4, ['maozhi', 'baifei'], ['zhu', 'guoV']],\r\n            aibai: ['female', 'Tencent', 3, ['bianyin', 'shabai'], ['guoV']],\r\n            wenjing: ['female', 'Tencent', 4, ['zaiying', 'zhengen'], ['guoV']],\r\n            xingtong: ['female', 'Tencent', 4, ['jiezou', 'xtguyong'], ['guoV']],\r\n            wula: ['female', 'lucca', 4, ['dizuo', 'hongtie'], ['guoV']],\r\n            yunyuluan: ['female', 'lucca', 4, ['jiujiu', 'qitong'], ['guoV']],\r\n            dusongziGin: ['female', 'qun', 3, ['danqing', 'gaiqu'], ['guoV']],\r\n            Muri: ['female', 'VirtuaReal', 3, ['lique', 'zhangdeng'], ['guoV']],\r\n            xiaoke: ['female', 'VirtuaReal', '3/4', ['dianying', 'ganfen'], ['guoV']],\r\n            Hanser: ['female', 'VirtuaReal', 3, ['naiwei', 'cishan'], ['guoV']],\r\n            Mayumi: ['female', 'VirtuaReal', 4, ['jinzhou', 'gouhun'], ['guoV']],\r\n            Ruruna: ['female', 'VirtuaReal', 4, ['miluan', 'shenjiao'], ['guoV']],\r\n            Karon: ['female', 'VirtuaReal', 4, ['huomo', 'tuying'], ['guoV']],\r\n            ap_Nana7mi: ['female', 'VirtuaReal', 4, ['niyou', 'shalu'], ['guoV']],\r\n            ap_Azusa: ['female', 'VirtuaReal', 3, ['puyu', 'appojian'], ['guoV']],\r\n            qingzezi: ['female', 'qun', 4, ['menghuan', 'gengu'], ['guoV']],\r\n            zhugeaixi: ['female', 'qun', 4, ['kaituan', 'gehuang', 'susi'], ['guoV']],\r\n            KurumiUsa: ['female', 'Providence', 4, ['jidou', 'duotian'], ['guoV']],\r\n            NanaseUnia: ['female', 'Providence', 4, ['qisui'], ['guoV']],\r\n            Myanna: ['female', 'Providence', 4, ['yemo', 'jiaopin'], ['guoV']],\r\n            Haya: ['female', 'Providence', 4, ['shengping', 'jiushuang'], ['guoV']],\r\n            Shirako: ['female', 'Providence', 4, ['jufu', 'qihun'], ['guoV', 'doublegroup:Providence:qun']],\r\n            linxi: ['female', 'qun', 5, ['lilian', 'zihuai'], ['guoV']],\r\n            AmemachiF: ['female', 'RedC', 3, ['ciling', 'xiyu'], ['guoV']],\r\n            zhongguobanai: ['female', 'NetEase', 4, ['liying', 'fuyu'], ['guoV']],\r\n            RIKO: ['female', 'NetEase', 4, ['tieyu'], ['guoV']],\r\n            YamaUsagi: ['female', 'NetEase', 3, ['zhengmeng', 'wadao'], ['guoV']],\r\n            xinkeniang: ['female', 'qun', 4, ['daimao', 'hongtou'], ['zhu', 'guoV']],\r\n            azhun: ['female', 'qun', 3, ['tianqi', 'yubao', 'butaizhun'], ['guoV']],\r\n            Ruki: ['female', 'VirtuaReal', 4, ['beixie', 'hunzhan'], ['guoV']],\r\n        },\r\n        characterSort: {\r\n            yuzu: {\r\n                TEST: ['Ruki'],\r\n            }\r\n        },\r\n        characterIntro: {},\r\n        characterTitle: {\r\n            Shiratama: '#y幼术师',\r\n            liqingge: '#y战斗吧歌姬！',\r\n            JingujiTamamo: '#y战斗吧歌姬！',\r\n            Kino: '#yNebula-Beat',\r\n            tangjiuxia: '#yNebula-Beat',\r\n        },\r\n        skill: {\r\n            chisha: {\r\n                audio: true,\r\n                trigger: { player: 'phaseZhunbeiBegin' },\r\n                filter(Evt, player) {\r\n                    return !player.isMaxHandcard(true);\r\n                },\r\n                check(Evt, player) {\r\n                    let list = game.filterPlayer(cur => cur.isMaxHandcard()).sortBySeat();\r\n                    return (list[0].countCards('h') - player.countCards('h')) >= 1;\r\n                },\r\n                content: [() => {\r\n                        let num = 1, list = game.filterPlayer(cur => cur.isMaxHandcard());\r\n                        num += (list[0].countCards('h') - player.countCards('h'));\r\n                        Evt.cards = get.cards(num);\r\n                    }, () => {\r\n                        player.gain(Evt.cards, 'draw');\r\n                    }, () => {\r\n                        player.addTempSkill('chisha_cardDisable');\r\n                    }],\r\n                subSkill: {\r\n                    cardDisable: {\r\n                        mark: true,\r\n                        intro: { content: '不能使用本回合摸到的牌' },\r\n                        mod: {\r\n                            cardEnabled(card, player) {\r\n                                return lib.skill.chisha_cardDisable.mod.cardSavable.apply(this, arguments);\r\n                            },\r\n                            cardSavable(card, player) {\r\n                                if (!card.cards)\r\n                                    return;\r\n                                let cards = [], hs = player.getCards('h');\r\n                                player.getHistory('gain', evt => {\r\n                                    if (evt.getParent().name != 'draw')\r\n                                        return false;\r\n                                    for (let i of evt.cards) {\r\n                                        if (hs.includes(i))\r\n                                            cards.add(i);\r\n                                    }\r\n                                });\r\n                                let num = cards.length;\r\n                                cards.removeArray(card.cards);\r\n                                if (cards.length < num)\r\n                                    return false;\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            wujian: {\r\n                trigger: {\r\n                    player: 'damageAfter', source: 'damageAfter'\r\n                },\r\n                logTarget(Evt, player) {\r\n                    if (player == Evt.source)\r\n                        return [player, Evt.player];\r\n                    return [player, Evt.source];\r\n                },\r\n                check(Evt, player) {\r\n                    return (player.countCards('h') - (player == Evt.source ? Evt.player : Evt.source).countCards('h')) <= 1;\r\n                },\r\n                filter(Evt, player) {\r\n                    return Evt.source && player.countCards('h') > (player == Evt.source ? Evt.player : Evt.source).countCards('h');\r\n                },\r\n                content() {\r\n                    if (player == trigger.source)\r\n                        Evt.target = trigger.player;\r\n                    else\r\n                        Evt.target = trigger.source;\r\n                    player.swapHandcards(Evt.target);\r\n                },\r\n            },\r\n            jvliu: {\r\n                trigger: {\r\n                    global: 'useCard'\r\n                },\r\n                filter(Evt, player) {\r\n                    return get.type(Evt.card) != 'basic' && Evt.player != player;\r\n                },\r\n                check(Evt, player) {\r\n                    if (get.$a(player, Evt.player) > 0) {\r\n                        return false;\r\n                    }\r\n                    if (get.tag(Evt.card, 'respondSha') && Evt.targets.includes(player)) {\r\n                        if (player.countCards('h', { name: 'sha' }) == 0) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    else if (get.tag(Evt.card, 'respondShan') && Evt.targets.includes(player)) {\r\n                        if (player.countCards('h', { name: 'shan' }) == 0) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    else if (get.tag(Evt.card, 'damage') && Evt.targets.includes(player)) {\r\n                        if (Evt.card.name == 'shuiyanqijunx')\r\n                            return player.countCards('e') == 0;\r\n                        return true;\r\n                    }\r\n                    else if ((Evt.card.name == 'shunshou' || (get.subtype(Evt.card) === 'equip2' && Evt.player.isEmpty(2))) && player.hp > 2) {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                logTarget: 'player',\r\n                content: [() => {\r\n                        player.loseHp(1);\r\n                    }, () => {\r\n                        trigger.cancel();\r\n                        game.delayx();\r\n                    }],\r\n            },\r\n            wuxia: {\r\n                unique: true,\r\n                juexingji: true,\r\n                forced: true,\r\n                trigger: {\r\n                    player: 'phaseZhunbei'\r\n                },\r\n                firstDo: true,\r\n                filter(Evt, player) {\r\n                    return player.hp == 1;\r\n                },\r\n                content: [() => {\r\n                        player.awakenSkill('wuxia');\r\n                        player.gainMaxHp();\r\n                    }, () => {\r\n                        player.recover();\r\n                    }, () => {\r\n                        if (player.countCards('h') >= 3)\r\n                            player.chooseToDiscard(3, true);\r\n                        else\r\n                            player.removeSkill('jvliu');\r\n                    }, () => {\r\n                        player.setAvatar('Shiranekoyuki', 'Shiranekoyuki1');\r\n                        player.addSkill('wuxia_yuanyao');\r\n                    }],\r\n                derivation: 'wuxia_yuanyao',\r\n                involve: 'jvliu',\r\n            },\r\n            wuxia_yuanyao: {\r\n                filter(Evt, player) {\r\n                    if (player.countCards('h') > player.maxHp || player.countCards('h') == player.hp)\r\n                        return false;\r\n                    return (player.getStat('skill').wuxia_yuanyao || 0) < game.countPlayer(cur => cur.sex == 'female');\r\n                },\r\n                inherit: 'yuanyao',\r\n            },\r\n            beixie: {\r\n                trigger: { global: 'gameDrawBegin', player: 'enterGame' },\r\n                direct: true,\r\n                content: [() => {\r\n                        Evt.togain = [];\r\n                        for (let i = 0; i < ui.cardPile.childElementCount; i++) {\r\n                            Evt.togain.push(ui.cardPile.childNodes[i]);\r\n                        }\r\n                    }, () => {\r\n                        player.chooseButton(['是否获得其中的一张牌？', Evt.togain]);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.logSkill(Evt.name);\r\n                            player.gain(result.links, 'draw', 'log');\r\n                            if (get.subtype(result.links[0]) == 'equip1') {\r\n                                player.equip(result.links[0]);\r\n                            }\r\n                        }\r\n                    }]\r\n            },\r\n            hunzhan: {\r\n                trigger: { global: 'damageAfter' },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                logTarget: 'player',\r\n                content: [() => {\r\n                        trigger.player.chooseToUse({\r\n                            filterCard(card, player) {\r\n                                return lib.filter.filterCard.apply(this, arguments);\r\n                            },\r\n                            prompt: get.$pro2('hunzhan')\r\n                        });\r\n                    }, () => {\r\n                        if (result.cards && result.cards.length) {\r\n                            player.draw();\r\n                        }\r\n                    }]\r\n            },\r\n            danqing: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                trigger: {\r\n                    player: 'damageAfter', source: 'damageAfter'\r\n                },\r\n                init(player, skill) {\r\n                    var _a;\r\n                    var _b;\r\n                    (_a = (_b = player.$)[skill]) !== null && _a !== void 0 ? _a : (_b[skill] = [['first']]);\r\n                },\r\n                filter(Evt, player) {\r\n                    return game.countPlayer(cur => !player.getStorage('danqing')[0].includes(cur));\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        player.chooseTarget(get.$pro2('danqing'), function (card, player, target) {\r\n                            return !player.getStorage('danqing')[0].includes(target);\r\n                        }, function (target) {\r\n                            return get.$a2(target);\r\n                        });\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            Evt.target = result.targets[0];\r\n                            let card2 = get.cardPile(function (card) { return card.name == 'jiu'; }, ['cardPile', 'discardPile']);\r\n                            if (card2) {\r\n                                player.logSkill('danqing', Evt.target);\r\n                                Evt.target.gain(card2, 'draw', 'log');\r\n                            }\r\n                            else\r\n                                Evt.finish();\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (!Evt.target.hasSkill('danqing_Used'))\r\n                            Evt.target.addSkill('danqing_Used');\r\n                        if (player.$.danqing[0]) {\r\n                            if (player.$.danqing[0].includes('first')) {\r\n                                player.$.danqing[0].remove('first');\r\n                                let card2 = get.cardPile(function (card) { return card.name == 'jiu'; }, ['cardPile', 'discardPile']);\r\n                                if (card2) {\r\n                                    Evt.target.gain(card2, 'draw', 'log');\r\n                                }\r\n                            }\r\n                            player.$.danqing[0].push(Evt.target);\r\n                        }\r\n                    }],\r\n                group: 'danqing_count',\r\n                subSkill: {\r\n                    count: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                        content() {\r\n                            var _a;\r\n                            var _b;\r\n                            (_a = (_b = player.$).danqing) !== null && _a !== void 0 ? _a : (_b.danqing = []);\r\n                            player.$.danqing.unshift(['first']);\r\n                        }\r\n                    }, 'direct', 'silent').setT({ global: 'phaseBefore' }),\r\n                    Used: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('mark', {\r\n                        intro: {\r\n                            content: '已成为过『蛋擎』的目标'\r\n                        }\r\n                    }, 'locked', 'mark')\r\n                },\r\n            }).setT({ player: 'damageAfter', source: 'damageAfter' }),\r\n            gaiqu: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return player.countCards('h') < player.$.gaiqu_count;\r\n                },\r\n                content: [() => {\r\n                        delete player.$.gaiqu_count;\r\n                        player.awakenSkill('gaiqu');\r\n                        player.unmarkSkill('gaiqu_count');\r\n                        player.gainMaxHp();\r\n                    }, () => {\r\n                        player.recover();\r\n                    }, () => {\r\n                        if (player.countCards('h') > 2)\r\n                            player.chooseToDiscard(3, true);\r\n                        else\r\n                            player.removeSkill('danqing');\r\n                    }, () => {\r\n                        game.filterPlayer(cur => { if (cur.hasSkill('danqing_Used') && !cur.hasSkill('songxing'))\r\n                            cur.addSkill('songxing'); });\r\n                    }],\r\n                group: 'gaiqu_count',\r\n                subSkill: {\r\n                    count: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                        intro: {\r\n                            content: '已使用#张【酒】'\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return get.name(Evt.card) === 'jiu';\r\n                        },\r\n                        content() {\r\n                            var _a;\r\n                            var _b;\r\n                            (_a = (_b = player.$).gaiqu_count) !== null && _a !== void 0 ? _a : (_b.gaiqu_count = 0);\r\n                            player.$.gaiqu_count++;\r\n                            player.markSkill('gaiqu_count');\r\n                        }\r\n                    }, 'forced').setT('useCardAfter')\r\n                },\r\n                derivation: 'songxing',\r\n                involve: 'danqing',\r\n            }, 'unique', 'juexingji', 'forced', 'firstDo').setT('phaseZhunbei'),\r\n            songxing: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('regard', {\r\n                init(player, skill) {\r\n                    player.$[skill] = [];\r\n                },\r\n                hiddenCard(player, name) {\r\n                    if (!player.countCards('hs', { name: 'jiu' }))\r\n                        return false;\r\n                    let list = get.inpile('trick2', card => {\r\n                        if (player.$.songxing.contains(card))\r\n                            return false;\r\n                        return true;\r\n                    });\r\n                    for (let i of list) {\r\n                        if (i == name)\r\n                            return true;\r\n                    }\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.countCards('hs', { name: 'jiu' });\r\n                },\r\n                chooseButton: {\r\n                    dialog(Evt, player) {\r\n                        let list = get.inpile('trick2', card => {\r\n                            if (player.$.songxing.contains(card))\r\n                                return false;\r\n                            return true;\r\n                        });\r\n                        if (list.length == 0) {\r\n                            return ui.create.dialog('『松星』已无可用牌');\r\n                        }\r\n                        return ui.create.dialog('『松星』', [list, 'vcard']);\r\n                    },\r\n                    filter(button, player) {\r\n                        return _status.event.getParent().filterCard({ name: button.link[2] }, player, _status.event.getParent());\r\n                    },\r\n                    check(button) {\r\n                        let player = _status.event.player;\r\n                        if (button.link[2] == 'wugu')\r\n                            return 0;\r\n                        let effect = player.getUseValue(button.link[2]);\r\n                        if (effect > 0)\r\n                            return effect;\r\n                        return 0;\r\n                    },\r\n                    backup(links, player) {\r\n                        return {\r\n                            filterCard(card) {\r\n                                return get.name(card) === 'jiu';\r\n                            },\r\n                            selectCard: 1,\r\n                            popname: true,\r\n                            check(card) {\r\n                                return 6 - get.value(card);\r\n                            },\r\n                            position: 'hs',\r\n                            viewAs: { name: links[0][2] },\r\n                            onuse(result, player) {\r\n                                player.$.songxing.add(result.card.name);\r\n                            },\r\n                        };\r\n                    },\r\n                    prompt(links, player) {\r\n                        return `###『松星』###将一张【酒】当做【${get.$t(links[0][3]) || ''}${get.$t(links[0][2])}】使用`;\r\n                    }\r\n                },\r\n                group: 'songxing_clear',\r\n                subSkill: {\r\n                    clear: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                        content() {\r\n                            player.$.songxing = [];\r\n                        }\r\n                    }, 'direct', 'silent').setT({ global: 'phaseAfter' }),\r\n                },\r\n            }, 'enable:chooseToUse'),\r\n            tatongling: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                intro: {\r\n                    content: 'cards',\r\n                    onunmark: 'throw',\r\n                },\r\n                init(player, skill) {\r\n                    var _a;\r\n                    var _b;\r\n                    (_a = (_b = player.$)[skill]) !== null && _a !== void 0 ? _a : (_b[skill] = []);\r\n                },\r\n                check(Evt, player) {\r\n                    if (player.hasSkill('tatongling_used'))\r\n                        return false;\r\n                    if (Evt.player.isTurnedOver())\r\n                        return get.$a(player, Evt.player) > 0;\r\n                    return get.$a(player, Evt.player) < 0;\r\n                },\r\n                content: [() => {\r\n                        Evt.target = trigger.player;\r\n                        let check = !Evt.target.isTurnedOver() && (get.$a(Evt.target, player) >= 0 || Evt.target.needsToDiscard());\r\n                        Evt.target.chooseCard(2).set('ai', function (card) {\r\n                            if (!_status.event.check)\r\n                                return 0;\r\n                            return get.unuseful3(card);\r\n                        }).set('check', check).set('prompt', `『彤灵』：将两张手牌置于${get.$t(player)}武将牌上，否则翻面并回复一点体力`);\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result.cards) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            Evt.target.$give(result.cards, player);\r\n                            Evt.target.lose(result.cards, ui.special, 'toStorage');\r\n                            player.markAuto('tatongling', result.cards);\r\n                        }\r\n                        else {\r\n                            Evt.target.turnOver();\r\n                            Evt.target.recover();\r\n                            player.addTempSkill('tatongling_used', 'phaseNext');\r\n                        }\r\n                    }],\r\n            }, 'logTarget:player', 'cardAround').setT({ global: 'loseHpAfter', source: 'damageAfter' }).set(['group', 'tatongling_gainBy'], ['subSkill', {\r\n                    gainBy: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                        content() {\r\n                            let cards = player.getStorage('tatongling');\r\n                            if (cards.length) {\r\n                                player.gain(cards);\r\n                                player.$give(cards, player, false);\r\n                                player.unmarkAuto('tatongling', cards);\r\n                            }\r\n                        },\r\n                    }, 'direct').setT(lib.phaseName, 'Skipped'),\r\n                    used: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('mark'),\r\n                }]),\r\n            yumeng: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                content() {\r\n                    \"step 0\";\r\n                    var check = player.countCards('h') > 2;\r\n                    player.chooseTarget(get.$pro2(`yumeng`), function (card, player, target) {\r\n                        if (player == target)\r\n                            return false;\r\n                        return true;\r\n                    }).set('check', check).set('ai', function (target) {\r\n                        if (!_status.event.check)\r\n                            return 0;\r\n                        return get.$a(_status.event.player, target);\r\n                    });\r\n                    \"step 1\";\r\n                    if (result.bool) {\r\n                        player.logSkill('yumeng', result.targets);\r\n                        Evt.target = result.targets[0];\r\n                        Evt.target.$.yumeng2 = player;\r\n                        Evt.target.addTempSkill('yumeng2', 'none');\r\n                        trigger.cancel();\r\n                        player.skip('phaseDraw');\r\n                    }\r\n                },\r\n            }, 'direct').setT('phaseJudgeBefore').set(['group', 'yumeng_clear'], ['subSkill', {\r\n                    clear: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                        content() {\r\n                            game.filterPlayer(cur => {\r\n                                if (cur.$.yumeng2 === player)\r\n                                    cur.removeSkill('yumeng2');\r\n                            });\r\n                        },\r\n                    }, 'direct').setT('phaseBegin')\r\n                }]),\r\n            yumeng2: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                content() {\r\n                    trigger.cancel();\r\n                    trigger.player.loseHp(trigger.num);\r\n                }\r\n            }, 'forced', 'mark:character', 'onremove').setT('damageBefore').set(['intro', { content: '受到的伤害改为体力流失' }]),\r\n            suyuan: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'lose') {\r\n                        if (Evt.position != ui.discardPile)\r\n                            return false;\r\n                    }\r\n                    else {\r\n                        let evt = Evt.getParent();\r\n                        if (evt.name != 'orderingDiscard' || !evt.relatedEvent || evt.relatedEvent.player != player || !['useCard', 'respond'].includes(evt.relatedEvent.name))\r\n                            return false;\r\n                    }\r\n                    return get.suit3((Evt.cards2 || Evt.cards).filterInD('d')).length >= 3;\r\n                },\r\n                content: [() => {\r\n                        let cards = (trigger.cards2 || trigger.cards).filterInD('d');\r\n                        Evt.cards = cards;\r\n                        player.chooseTarget((card, player, target) => {\r\n                            if (player == target)\r\n                                return false;\r\n                            return true;\r\n                        }).set('ai', tar => {\r\n                            let att = get.$a2(player, tar);\r\n                            if (tar.hp == 1)\r\n                                return att + get.damageEffect(tar, player, player);\r\n                            return (get.value(_status.event.cards, 'raw', tar) + tar.hp - 5) * att;\r\n                        }).set('cards', cards).set('createDialog', [get.$pro('suyuan'),\r\n                            'small', get.skillInfoTranslation('suyuan', player), '令一名其他角色获得这些牌',\r\n                            [cards, 'card']]);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('suyuan', Evt.target);\r\n                            let evt = trigger.getParent().relatedEvent;\r\n                            if ((trigger.name == 'discard' && !trigger.delay) || (evt === null || evt === void 0 ? void 0 : evt.name) == 'respond')\r\n                                game.delayx();\r\n                            Evt.target.damage('nosource');\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        Evt.target.$.suyuan = Evt.cards.length;\r\n                        Evt.target.$.suyuan2 = player;\r\n                        Evt.target.addTempSkill('suyuan2', 'none');\r\n                        Evt.target.gain(Evt.cards, 'gain2', 'log');\r\n                    }],\r\n            }, 'direct').setT({ player: 'loseAfter', global: 'cardsDiscardAfter' }),\r\n            suyuan2: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('mark', {\r\n                onremove: ['suyuan', 'suyuan2'],\r\n                filter(Evt, player) {\r\n                    return player.$.suyuan2 === Evt.player && player.$.suyuan;\r\n                },\r\n                content() {\r\n                    trigger.player.logSkill('suyuan', player);\r\n                    trigger.player.gainPlayerCard(player, true, player.$.suyuan);\r\n                }\r\n            }, 'forced', 'mark:character').setT({ global: 'phaseZhunbeiBegin' }).set(['intro', { content: '在$的下个准备阶段由对方获得牌' }]),\r\n            mujian: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                content() {\r\n                    game.filterPlayer(cur => {\r\n                        cur.addSkill('mujian2');\r\n                    });\r\n                }\r\n            }, 'forced').setT('dieBegin'),\r\n            mujian2: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                content() {\r\n                    for (let v of game.dead) {\r\n                        if (v.isDead() && v.hasSkill('mujian')) {\r\n                            v.revive(1);\r\n                            v.logSkill('mujian');\r\n                            let next = game.createEvent('resetSkill');\r\n                            next.player = v;\r\n                            next.setContent([function () {\r\n                                    let list = get.gainableSkills((info, skill) => {\r\n                                        return info.enable === 'phaseUse' && !info.forceunique && !info.notemp && !player.hasSkill(skill);\r\n                                    });\r\n                                    player.discoverSkill(list);\r\n                                },\r\n                                function () {\r\n                                    let link = result.skill;\r\n                                    if (link) {\r\n                                        player.addTempSkill(link, 'dieBegin');\r\n                                    }\r\n                                }]);\r\n                        }\r\n                    }\r\n                }\r\n            }, 'locked', 'direct', 'silent').setT({ global: 'roundStart' }),\r\n            cirong: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('active', {\r\n                usable: 1,\r\n                filterTarget(card, player, target) {\r\n                    return get.$dis(player, target, 'pure') <= 1;\r\n                },\r\n                discard: false,\r\n                prepare: 'give2',\r\n                content() {\r\n                    target.gain(cards, player);\r\n                },\r\n            }, 'filterCard'),\r\n            maoyu: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    if (player !== _status.currentPhase || Evt.player == player)\r\n                        return false;\r\n                    {\r\n                        let name = lib.skill.yiqu.process(Evt), info = lib.skill[name];\r\n                        if (info && !info.equipSkill && !info.ruleSkill)\r\n                            return lib.translate[`${name}_info`];\r\n                    }\r\n                    {\r\n                        let name = lib.skill.yiqu.process(Evt.getParent()), info = lib.skill[name];\r\n                        if (info && !info.equipSkill && !info.ruleSkill)\r\n                            return lib.translate[`${name}_info`];\r\n                    }\r\n                },\r\n                logTarget: 'player',\r\n                content: [function () {\r\n                        Evt.tar0 = trigger.player;\r\n                        Evt.tar1 = Evt.tar0.getNext();\r\n                        Evt.list = [`交给${get.$t(player)}两张牌`, `弃置一张牌，令${get.$t(Evt.tar1)}摸一张牌`];\r\n                        if (Evt.tar0.countCards('he') >= 2) {\r\n                            Evt.tar0.chooseControl('dialogcontrol', Evt.list, function () {\r\n                                return _status.event.att;\r\n                            }).set('att', get.$a(Evt.tar0, player) > get.$a(Evt.tar0, Evt.tar1) ? 0 : 1).set('prompt', '『猫羽』请选择一项');\r\n                        }\r\n                        else {\r\n                            Evt._result = { control: Evt.list[1] };\r\n                        }\r\n                    }, function () {\r\n                        switch (result.control) {\r\n                            case Evt.list[0]: {\r\n                                Evt.tar0.chooseCard(2, true, 'he', `交给${get.$t(player)}两张牌`);\r\n                                break;\r\n                            }\r\n                            case Evt.list[1]: {\r\n                                Evt.tar0.chooseToDiscard(true);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }, function () {\r\n                        if (result.cards.length === 2)\r\n                            player.gain(result.cards, Evt.tar0, 'giveAuto');\r\n                        else\r\n                            Evt.tar1.draw();\r\n                    }]\r\n            }).setT({ global: 'gainAfter' }),\r\n            yixiang: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return game.countPlayer(cur => cur.getDamagedHp() > 0);\r\n                },\r\n                content: [() => {\r\n                        player.chooseTarget(get.$pro2('yixiang'), (card, player, tar) => {\r\n                            return tar.getDamagedHp() > 0;\r\n                        }, tar => {\r\n                            var _a;\r\n                            let player = _status.event.player;\r\n                            if (get.type3(tar.getCards()) <= 1)\r\n                                return get.recoverEffect(tar, player, player) * tar.getDamagedHp() - 3 * get.$a(player, tar) - 3;\r\n                            if (get.type3(tar.getCards()) >= 3)\r\n                                return get.recoverEffect(tar, player, player) * tar.getDamagedHp() - 3;\r\n                            if (tar === player && ((_a = player.$.xianyu2) === null || _a === void 0 ? void 0 : _a.isIn))\r\n                                return get.recoverEffect(tar, player, player) * tar.getDamagedHp() + (player.$.xianyu2.getHandcardLimit() - player.$.xianyu2.countCards('h')) - 3;\r\n                            return 0;\r\n                        });\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('yixiang', Evt.target);\r\n                            player.turnOver();\r\n                            game.delay(0.8);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        Evt.target.recover(Evt.target.getDamagedHp());\r\n                        Evt.target.$.yixiang_houxu = player;\r\n                        Evt.target.addTempSkill('yixiang_houxu');\r\n                    }],\r\n                subSkill: {\r\n                    houxu: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('mark', {\r\n                        mark: 'character',\r\n                        marktext: \"🐻\",\r\n                        intro: {\r\n                            name: '异想',\r\n                            content(storage, player, skill) {\r\n                                return '在本回合结束时展示手牌';\r\n                            },\r\n                        },\r\n                        priority: 43,\r\n                        filter(Evt, player) {\r\n                            return player.$.yixiang_houxu.isIn();\r\n                        },\r\n                        content: [() => {\r\n                                player.showCards(player.getCards('h'), '异想后续');\r\n                                game.delay(0.5);\r\n                            }, () => {\r\n                                let types = ['basic', 'trick', 'equip'];\r\n                                let cards = player.getCards('h').slice(0);\r\n                                for (let i = 0; i < cards.length; i++) {\r\n                                    let type = get.type(cards[i], 'trick');\r\n                                    if (types.contains(type))\r\n                                        types.remove(type);\r\n                                }\r\n                                Evt.num = types.length;\r\n                                player.loseHp(Evt.num);\r\n                            }, () => {\r\n                                player.$.yixiang_houxu.draw(Evt.num);\r\n                            }]\r\n                    }, 'onremove', 'locked', 'forced', 'mark').setT({ global: 'phaseEnd' }),\r\n                }\r\n            }, 'direct').setT('phaseZhunbei'),\r\n            xianyu: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return game.countPlayer() >= 2;\r\n                },\r\n                content: [function () {\r\n                        player.chooseTarget(get.$pro2('xianyu'), (card, player, tar) => {\r\n                            return tar.isIn();\r\n                        }, tar => {\r\n                            return get.$a2(tar);\r\n                        });\r\n                    }, function () {\r\n                        var _a;\r\n                        if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('xianyu', Evt.target);\r\n                            game.delay(0.5);\r\n                        }\r\n                        else {\r\n                            player.awakenSkill('xianyu');\r\n                            Evt.finish();\r\n                        }\r\n                    }, function () {\r\n                        player.$.xianyu2 = Evt.target;\r\n                        player.addTempSkill('xianyu2');\r\n                    }],\r\n            }, 'direct', 'onremove').setT({ global: 'gameStart', player: 'enterGame' }),\r\n            xianyu2: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('mark', {\r\n                mark: 'character',\r\n                intro: {\r\n                    name: '衔鱼',\r\n                    content: `你失去体力时，$摸牌至上限；\r\n\t\t\t\t\t你或$死亡时，对方重置且翻至正面。`\r\n                },\r\n                filter(Evt, player) {\r\n                    var _a, _b;\r\n                    if (Evt.num <= 0)\r\n                        return false;\r\n                    return ((_b = (_a = player.$) === null || _a === void 0 ? void 0 : _a.xianyu2) === null || _b === void 0 ? void 0 : _b.isIn()) && !player.$.xianyu2.needsToDiscard();\r\n                },\r\n                logTarget(Evt, player) {\r\n                    var _a;\r\n                    return (_a = player.$) === null || _a === void 0 ? void 0 : _a.xianyu2;\r\n                },\r\n                content() {\r\n                    player.$.xianyu2.drawTo(player.getHandcardLimit());\r\n                },\r\n                group: 'xianyu2_going',\r\n                subSkill: {\r\n                    going: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                        filter(Evt, player) {\r\n                            var _a, _b;\r\n                            console.log(Evt.player);\r\n                            return (((_b = (_a = player.$) === null || _a === void 0 ? void 0 : _a.xianyu2) === null || _b === void 0 ? void 0 : _b.isIn()) || player.isIn())\r\n                                && [player.$.xianyu2, player].includes(Evt.player);\r\n                        },\r\n                        logTarget(Evt, player) {\r\n                            var _a;\r\n                            return (_a = player.$) === null || _a === void 0 ? void 0 : _a.xianyu2;\r\n                        },\r\n                        content: [() => {\r\n                                if (player.$.xianyu2.isDead() && player.isIn()) {\r\n                                    player.turnOver(false);\r\n                                    player.link(false);\r\n                                }\r\n                            }, () => {\r\n                                if (trigger.player === player && player.$.xianyu2.isIn()) {\r\n                                    player.$.xianyu2.turnOver(false);\r\n                                    player.$.xianyu2.link(false);\r\n                                }\r\n                            }]\r\n                    }, 'forced').setT({ global: 'dieEnd', player: 'dieBegin' })\r\n                }\r\n            }, 'forced').setT('loseHpEnd'),\r\n            chentu: {\r\n                enable: 'phaseUse',\r\n                position: 'h',\r\n                usable: 1,\r\n                filterCard: true,\r\n                selectCard: [1, Infinity],\r\n                complexCard: true,\r\n                check(card) {\r\n                    let player = _status.event.player;\r\n                    let nh = player.countCards('h') - ui.selected.cards.length;\r\n                    for (let i = 0; i < game.players.length; i++) {\r\n                        if (game.players[i].isOut() || game.players[i] == player)\r\n                            continue;\r\n                        if (game.players[i].countCards('h') < nh)\r\n                            return 12 - get.value(card);\r\n                    }\r\n                    return 5 - get.value(card);\r\n                },\r\n                content() {\r\n                    if (player.isMinHandcard()) {\r\n                        if (!player.$.chentu)\r\n                            player.$.chentu = 0;\r\n                        player.$.chentu += cards.length;\r\n                        player.markSkill('chentu');\r\n                    }\r\n                },\r\n                marktext: 'yuki',\r\n                intro: {\r\n                    content(storage, player) {\r\n                        let str = '下个回合开始时，摸';\r\n                        str += get.cnNumber(player.$.chentu * 2);\r\n                        str += '张牌';\r\n                        return str;\r\n                    },\r\n                },\r\n                group: ['chentu_drawBy'],\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: { player: 'phaseBegin' },\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            return player.$.chentu;\r\n                        },\r\n                        content() {\r\n                            player.draw(player.$.chentu * 2);\r\n                            player.unmarkSkill('chentu');\r\n                            delete player.$.chentu;\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten: 1.3,\r\n                    order: 6,\r\n                    result: { player: 4 },\r\n                }\r\n            },\r\n            sishu: {\r\n                enable: 'chooseToUse',\r\n                filter(Evt, player) {\r\n                    if (player != _status.currentPhase)\r\n                        return false;\r\n                    if (!player.countCards('h', { suit: 'heart' }) ||\r\n                        !player.countCards('h', { suit: 'spade' }) ||\r\n                        !player.countCards('h', { suit: 'diamond' }) ||\r\n                        !player.countCards('h', { suit: 'club' }))\r\n                        return false;\r\n                    if (!game.hasPlayer(cur => cur != player)) {\r\n                        return false;\r\n                    }\r\n                    return Evt.filterCard({ name: 'sha' }, player, Evt) ||\r\n                        Evt.filterCard({ name: 'jiu' }, player, Evt) ||\r\n                        Evt.filterCard({ name: 'tao' }, player, Evt) ||\r\n                        Evt.filterCard({ name: 'shan' }, player, Evt);\r\n                },\r\n                chooseButton: {\r\n                    dialog(Evt, player) {\r\n                        let list = [];\r\n                        _status.event.skillBy = 'sishu';\r\n                        if (Evt.filterCard({ name: 'sha' }, player, Evt)) {\r\n                            list.push(['基本', '', 'sha']);\r\n                            list.push(['基本', '', 'sha', 'fire']);\r\n                            list.push(['基本', '', 'sha', 'thunder']);\r\n                        }\r\n                        if (Evt.filterCard({ name: 'tao' }, player, Evt)) {\r\n                            list.push(['基本', '', 'tao']);\r\n                        }\r\n                        if (Evt.filterCard({ name: 'jiu' }, player, Evt)) {\r\n                            list.push(['基本', '', 'jiu']);\r\n                        }\r\n                        if (Evt.filterCard({ name: 'shan' }, player, Evt)) {\r\n                            list.push(['基本', '', 'shan']);\r\n                        }\r\n                        delete _status.event.skillBy;\r\n                        return ui.create.dialog('饲鼠', [list, 'vcard'], 'hidden');\r\n                    },\r\n                    check(button) {\r\n                        let player = _status.event.player;\r\n                        let card = { name: button.link[2], nature: button.link[3] };\r\n                        if (card.name == 'jiu')\r\n                            return get.order({ name: 'jiu' });\r\n                        if (game.hasPlayer(cur => player.canUse(card, cur) && get.effect(cur, card, player, player) > 0)) {\r\n                            if (card.name == 'sha') {\r\n                                if (card.nature == 'fire')\r\n                                    return 2.95;\r\n                                else if (card.nature == 'fire')\r\n                                    return 2.92;\r\n                                else\r\n                                    return 2.9;\r\n                            }\r\n                            else if (card.name == 'tao' || card.name == 'shan') {\r\n                                return 4;\r\n                            }\r\n                        }\r\n                        return 0;\r\n                    },\r\n                    backup(links, player) {\r\n                        return {\r\n                            filterCard(card) {\r\n                                if (ui.selected.cards.length) {\r\n                                    for (let i of ui.selected.cards) {\r\n                                        if (get.suit(card) == get.suit(i))\r\n                                            return false;\r\n                                    }\r\n                                }\r\n                                return get.suit(card);\r\n                            },\r\n                            complexCard: true,\r\n                            viewAs: { name: links[0][2], nature: links[0][3], isCard: true },\r\n                            selectCard: 4,\r\n                            popname: true,\r\n                            log: false,\r\n                            precontent: [() => {\r\n                                    Evt.cards = Evt.result.cards.slice(0);\r\n                                    Evt.result.card.cards = [];\r\n                                    Evt.result.cards = [];\r\n                                    delete Evt.result.card.suit;\r\n                                    delete Evt.result.card.number;\r\n                                }, () => {\r\n                                    player.chooseTarget('选择收到这些牌的角色', true, lib.filter.notMe).ai = function (target) {\r\n                                        return get.$a(player, target);\r\n                                    };\r\n                                }, () => {\r\n                                    var _a;\r\n                                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                                        player.logSkill('sishu', result.targets);\r\n                                        player.give(Evt.cards, result.targets[0], true);\r\n                                    }\r\n                                }],\r\n                        };\r\n                    },\r\n                    prompt(links, player) {\r\n                        return `###选择交给其他角色的牌，以及${get.$t(links[0][3] || '')}${get.$t(links[0][2])}的目标###（注意是牌的目标。而不是收到牌的角色）`;\r\n                    }\r\n                },\r\n                mod: {\r\n                    cardEnabled(card, player) {\r\n                        if (player == _status.currentPhase && get.type(card) == 'basic' && (_status.event.skillBy != 'sishu' && _status.event.skill != 'sishu_backup'))\r\n                            return false;\r\n                    },\r\n                    cardSavable(card, player) {\r\n                        if (player == _status.currentPhase && get.type(card) == 'basic' && (_status.event.skillBy != 'sishu' && _status.event.skill != 'sishu_backup'))\r\n                            return false;\r\n                    },\r\n                },\r\n                ai: {\r\n                    order() {\r\n                        let player = _status.event.player;\r\n                        let Evt = _status.event;\r\n                        let nh = player.countCards('h');\r\n                        if (game.hasPlayer(cur => get.$a(player, cur) > 0 && cur.countCards('h') < nh)) {\r\n                            if (Evt.type == 'dying') {\r\n                                if (Evt.filterCard({ name: 'tao' }, player, Evt)) {\r\n                                    return 0.5;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (Evt.filterCard({ name: 'tao' }, player, Evt) || Evt.filterCard({ name: 'shan' }, player, Evt)) {\r\n                                    return 4;\r\n                                }\r\n                                if (Evt.filterCard({ name: 'sha' }, player, Evt)) {\r\n                                    return 2.9;\r\n                                }\r\n                            }\r\n                        }\r\n                        return 0;\r\n                    },\r\n                    save: true,\r\n                    respondSha: true,\r\n                    respondShan: true,\r\n                    skillTagFilter(player, tag, arg) {\r\n                        return player.countCards('h') >= 4;\r\n                    },\r\n                    result: {\r\n                        player(player) {\r\n                            if (_status.event.type == 'dying') {\r\n                                return get.$a(player, _status.event.dying);\r\n                            }\r\n                            else {\r\n                                return 1;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            fengxu: {\r\n                trigger: {\r\n                    player: 'useCardToPlayered',\r\n                },\r\n                filter(Evt, player) {\r\n                    return Evt.targets.length == 1\r\n                        && Evt.target == Evt.targets[0]\r\n                        && Evt.target.countCards('hej');\r\n                },\r\n                check(Evt, player) {\r\n                    return get.$a(player, Evt.target) <= 0\r\n                        || (get.$a(player, Evt.target) > 0 && Evt.target.countCards('j'));\r\n                },\r\n                content: [() => {\r\n                        Evt.A = trigger.target;\r\n                        Evt.num = 0;\r\n                    }, () => {\r\n                        Evt.B = Evt.A.next;\r\n                        if (!Evt.A.countCards('hej'))\r\n                            Evt.finish();\r\n                        player.choosePlayerCard('hej', Evt.A, true).set('ai', function (button) {\r\n                            let player = _status.event.player, source = _status.event.target, target = source.next, link = button.link;\r\n                            if (get.position(link) == 'j') {\r\n                                if (target.canAddJudge(link))\r\n                                    return get.effect(target, link, player, player) * get.$a(player, target);\r\n                            }\r\n                            else if (get.position(link) == 'e') {\r\n                                let subtype = get.subtype(link);\r\n                                if (!target.getEquip(subtype))\r\n                                    return get.effect(target, link, player, player) * get.$a(player, target);\r\n                            }\r\n                            else {\r\n                                return get.value(link, target, 'raw') * get.$a(player, target);\r\n                            }\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            let card = result.links[0];\r\n                            if (get.position(card) == 'e') {\r\n                                let c = Evt.B.getEquip(get.subtype(card));\r\n                                if (c) {\r\n                                    Evt.change = true;\r\n                                    game.log(c, '掉落了');\r\n                                }\r\n                                Evt.B.equip(card);\r\n                            }\r\n                            else if (get.position(card) == 'j') {\r\n                                let cname = card.viewAs ? card.viewAs : get.name(card);\r\n                                Evt.B.getCards('j').forEach(function (c) {\r\n                                    if (get.name(c) == cname) {\r\n                                        Evt.change = true;\r\n                                        game.log(c, '掉落了');\r\n                                        game.cardsDiscard(c);\r\n                                    }\r\n                                });\r\n                                Evt.B.addJudge({ name: cname }, [card]);\r\n                            }\r\n                            else {\r\n                                Evt.B.gain(card, Evt.A);\r\n                            }\r\n                            Evt.A.$give(card, Evt.B);\r\n                            game.delay();\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.change) {\r\n                            if (Evt.B == player && Evt.num)\r\n                                player.draw(Evt.num);\r\n                        }\r\n                        else if (Evt.num < 5) {\r\n                            Evt.A = Evt.B;\r\n                            Evt.num++;\r\n                            Evt.goto(1);\r\n                        }\r\n                    }]\r\n            },\r\n            xiangnuo: {\r\n                trigger: {\r\n                    player: ['loseAfter', 'equipEnd'],\r\n                    global: ['gainAfter', 'equipAfter', 'addJudgeAfter', 'loseAsyncAfter'],\r\n                },\r\n                direct: true,\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = 1;\r\n                },\r\n                filter(Evt, player) {\r\n                    var _a;\r\n                    if (player.$.xiangnuo == 1) {\r\n                        return Evt.name == 'equip' && Evt.player == player;\r\n                    }\r\n                    else {\r\n                        let evt = Evt.getl(player);\r\n                        return (_a = evt === null || evt === void 0 ? void 0 : evt.es) === null || _a === void 0 ? void 0 : _a.length;\r\n                    }\r\n                },\r\n                content: [() => {\r\n                        player.chooseTarget(get.$pro2('xiangnuo')).ai = function (target) {\r\n                            return get.$a2(target) * (target.isMinHp(true) && target.isDamaged() ? 4.5 : 2);\r\n                        };\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.$.xiangnuo = player.$.xiangnuo == 1 ? 2 : 1;\r\n                            let target = result.targets[0];\r\n                            target.draw(2);\r\n                            if (target.isMinHp(true))\r\n                                target.recover();\r\n                        }\r\n                    }],\r\n                group: 'xiangnuo2',\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (get.type(card) == 'equip' && !get.cardtag(card, 'gifts'))\r\n                                return [1, 3];\r\n                        }\r\n                    },\r\n                    expose: 0.5,\r\n                    threaten: 1.3\r\n                }\r\n            },\r\n            xiangnuo2: {\r\n                enable: 'phaseUse',\r\n                getResult(cards, player) {\r\n                    let l = cards.length, all = Math.pow(l, 2), list = [];\r\n                    for (let i = 1; i < all; i++) {\r\n                        let array = [];\r\n                        for (let j = 0; j < l; j++) {\r\n                            if (Math.floor((i % Math.pow(2, j + 1)) / Math.pow(2, j)) > 0)\r\n                                array.push(cards[j]);\r\n                        }\r\n                        let num = 0;\r\n                        for (let k of array) {\r\n                            num += get.number(k);\r\n                        }\r\n                        if (num == 12)\r\n                            list.push(array);\r\n                    }\r\n                    if (list.length) {\r\n                        list.sort(function (a, b) {\r\n                            if (a.length != b.length)\r\n                                return b.length - a.length;\r\n                            return get.value(a, player) - get.value(b, player);\r\n                        });\r\n                        return list[0];\r\n                    }\r\n                    return list;\r\n                },\r\n                usable: 1,\r\n                filterCard(card) {\r\n                    let num = 0;\r\n                    for (let i of ui.selected.cards) {\r\n                        num += get.number(i);\r\n                    }\r\n                    return get.number(card) + num <= 12;\r\n                },\r\n                complexCard: true,\r\n                selectCard() {\r\n                    let num = 0;\r\n                    for (let i of ui.selected.cards) {\r\n                        num += get.number(i);\r\n                    }\r\n                    if (num == 12)\r\n                        return ui.selected.cards.length;\r\n                    return ui.selected.cards.length + 2;\r\n                },\r\n                check(card) {\r\n                    let evt = _status.event;\r\n                    if (!evt.xiangnuo_choice)\r\n                        evt.xiangnuo_choice = lib.skill.xiangnuo2.getResult(evt.player.getCards('he'), evt.player);\r\n                    if (!evt.xiangnuo_choice.includes(card))\r\n                        return 0;\r\n                    return 1;\r\n                },\r\n                content: [() => {\r\n                        player.draw(cards.length).gaintag = ['xiangnuo'];\r\n                    }, () => {\r\n                        player.$.xiangnuo = player.$.xiangnuo == 1 ? 2 : 1;\r\n                    }],\r\n                ai: {\r\n                    order: 5,\r\n                    result: { player: 1 },\r\n                },\r\n            },\r\n            manyou: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'lose' && Evt.position != ui.discardPile)\r\n                        return false;\r\n                    for (let i of (Evt.cards2 || Evt.cards).filterInD('d')) {\r\n                        console.log(i);\r\n                        if (get.name(i) === 'sha' && ['thunder', 'ocean'].includes(get.nature(i)))\r\n                            return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                content: [() => {\r\n                        Evt.cards = (trigger.cards2 || trigger.cards).filterInD('d').filter(i => get.name(i) === 'sha' && ['thunder', 'ocean'].includes(get.nature(i)));\r\n                        player.gain(Evt.cards, 'gain2', 'log').gaintag.add('manyou');\r\n                    }],\r\n                group: 'manyou_reCount',\r\n                subSkill: {\r\n                    reCount: {\r\n                        trigger: { player: 'useCard1' },\r\n                        firstDo: true,\r\n                        silent: true,\r\n                        filter(Evt, player) {\r\n                            return get.type(Evt.card) == 'basic' && Evt.cards.length == 1 && player.getHistory('lose', evt => {\r\n                                if (evt.getParent() != Evt)\r\n                                    return false;\r\n                                for (let i in evt.gaintag_map) {\r\n                                    if (evt.gaintag_map[i].includes('manyou'))\r\n                                        return true;\r\n                                }\r\n                                return false;\r\n                            }).length > 0;\r\n                        },\r\n                        content() {\r\n                            if (trigger.addCount !== false) {\r\n                                trigger.addCount = false;\r\n                                let stat = player.getStat().card;\r\n                                if (stat[trigger.card.name])\r\n                                    stat[trigger.card.name]--;\r\n                            }\r\n                        },\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten: 1.1\r\n                }\r\n            }).setT({ global: ['loseAfter', 'cardsDiscardAfter'] }),\r\n            changjie: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = 0;\r\n                },\r\n                intro: {\r\n                    content: '本局游戏内累计使用了#张属性【杀】'\r\n                },\r\n                content() {\r\n                    if (player.hasHistory('sourceDamage', evt => {\r\n                        return evt.getParent('phaseUse') === trigger;\r\n                    }) && player.$.changjie > 0) {\r\n                        player.draw(player.$.changjie);\r\n                    }\r\n                    else {\r\n                        player.chooseToDiscard(true, player.$.changjie, 'he');\r\n                    }\r\n                },\r\n                group: 'changjie_mark',\r\n                subSkill: {\r\n                    mark: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                        filter(Evt, player) {\r\n                            return Evt.card.name === 'sha' && Evt.card.nature;\r\n                        },\r\n                        content() {\r\n                            player.$.changjie++;\r\n                            player.markSkill('changjie');\r\n                        },\r\n                    }, 'direct', 'locked').setT('useCard')\r\n                },\r\n                ai: {\r\n                    threaten: 1.3\r\n                }\r\n            }, 'forced').setT('phaseUseEnd'),\r\n            tanghuang: {\r\n                trigger: { target: 'useCardToTargeted' },\r\n                logTarget: 'player',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    let source = Evt.player;\r\n                    if (source == player)\r\n                        return false;\r\n                    return true;\r\n                },\r\n                check(Evt, player) {\r\n                    let target = Evt.player;\r\n                    if (get.$a(player, target) >= 0) {\r\n                        if ((player.hujia || player.getDamagedHp() >= 2) && player.hasSkillTag('xuefeng'))\r\n                            return true;\r\n                        if (get.$a(player, target) > 0 && target.hujia && target.hasSkillTag('xuefeng'))\r\n                            return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                content: [() => {\r\n                        Evt.num = (player.getDamagedHp()) || 1;\r\n                        Evt.target = trigger.player;\r\n                        player.draw(Evt.num);\r\n                        game.delayx();\r\n                    }, () => {\r\n                        let list = [];\r\n                        if (Evt.target.countCards('he')) {\r\n                            list.push('你的牌', Evt.target.getCards('he'));\r\n                        }\r\n                        if (player.countCards('h')) {\r\n                            list.add(`${get.$t(player.name)}的牌`);\r\n                            list.push([player.getCards('h'), 'blank']);\r\n                        }\r\n                        if (player.countCards('e')) {\r\n                            list.add(`${get.$t(player.name)}的牌`);\r\n                            list.push(player.getCards('e'));\r\n                        }\r\n                        let chooseButton = Evt.target.chooseButton(Evt.num + 3, true, list);\r\n                        chooseButton.set('target', player);\r\n                        chooseButton.set('num', Evt.num);\r\n                        chooseButton.set('ai', function (button) {\r\n                            let player = _status.event.player, target = _status.event.target;\r\n                            let num = _status.event.num;\r\n                            let ps = [], ts = [];\r\n                            for (let i of ui.selected.buttons) {\r\n                                let card = i.link;\r\n                                if (target.getCards('he').includes(card))\r\n                                    ts.push(card);\r\n                                else\r\n                                    ps.push(card);\r\n                            }\r\n                            let card = button.link;\r\n                            let owner = get.owner(card), val = get.value(card) || 1;\r\n                            if (get.$a(player, target) > 0) {\r\n                                if (target.hujia || player.hujia) { }\r\n                                else if (num % 2 == 0) {\r\n                                    if (owner == ((ps.length > ts.length) ? target : player))\r\n                                        return 10 - val;\r\n                                }\r\n                            }\r\n                            if (owner == player) {\r\n                                if (target.hujia && target.hasSkillTag('xuefeng')) {\r\n                                    if (ps.length > 1)\r\n                                        return 15 - val;\r\n                                    return 12 - val;\r\n                                }\r\n                                return 7 - val;\r\n                            }\r\n                            else {\r\n                                if (player.hujia && player.hasSkillTag('xuefeng')) {\r\n                                    if (ts.length > 1)\r\n                                        return 16 - val;\r\n                                    return 11 - val;\r\n                                }\r\n                                return 5.5 - val;\r\n                            }\r\n                        });\r\n                        chooseButton.set('filterButton', function (button) {\r\n                            let player = _status.event.player;\r\n                            return lib.filter.canBeDiscarded(button.link, player, get.owner(button.link));\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            let list = result.links, target = Evt.target;\r\n                            Evt.list1 = [];\r\n                            Evt.list2 = [];\r\n                            for (let i of list) {\r\n                                if (get.owner(i) == player) {\r\n                                    Evt.list1.push(i);\r\n                                }\r\n                                else {\r\n                                    Evt.list2.push(i);\r\n                                }\r\n                                ;\r\n                            }\r\n                            ;\r\n                            if (Evt.list1.length && Evt.list2.length) {\r\n                                target.discard(Evt.list2).delay = false;\r\n                                player.discard(Evt.list1);\r\n                            }\r\n                            else if (Evt.list2.length) {\r\n                                target.discard(Evt.list2);\r\n                            }\r\n                            else\r\n                                player.discard(Evt.list1);\r\n                            let dis = Evt.list1.length - Evt.list2.length;\r\n                            if (dis > 0) {\r\n                                Evt.dis = dis;\r\n                                Evt.more = player;\r\n                                Evt.less = target;\r\n                            }\r\n                            else if (dis < 0) {\r\n                                Evt.dis = -dis;\r\n                                Evt.more = target;\r\n                                Evt.less = player;\r\n                            }\r\n                        }\r\n                        ;\r\n                    }, () => {\r\n                        if (Evt.more) {\r\n                            Evt.less.damage();\r\n                            Evt.more.draw(Evt.dis);\r\n                        }\r\n                    }],\r\n            },\r\n            xiejiang: {\r\n                trigger: { player: ['drawEnd', 'changeHujiaEnd'] },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'draw')\r\n                        return Evt.num >= 2;\r\n                    else\r\n                        return Evt.num < 0 && _status.currentPhase;\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    if (trigger.name == 'draw') {\r\n                        player.changeHujia();\r\n                    }\r\n                    else {\r\n                        _status.currentPhase.draw(2);\r\n                    }\r\n                },\r\n                ai: {\r\n                    tag: {\r\n                        xuefeng: 1,\r\n                    }\r\n                }\r\n            },\r\n            lache: {\r\n                trigger: { player: ['recoverAfter', 'discardAfter', 'changeHujiaEnd'] },\r\n                logTarget(Evt, player) {\r\n                    if (Evt.name == 'recover')\r\n                        return _status.currentPhase;\r\n                    return player;\r\n                },\r\n                filter(Evt, player) {\r\n                    var _a;\r\n                    if (Evt.name == 'recover')\r\n                        return (_a = _status.currentPhase) === null || _a === void 0 ? void 0 : _a.isIn();\r\n                    else if (player.hp < player.maxHp) {\r\n                        if (Evt.name == 'discard')\r\n                            return Evt.cards.length >= 2;\r\n                        else\r\n                            return Evt.num < 0;\r\n                    }\r\n                },\r\n                prompt2(Evt, player) {\r\n                    if (Evt.name == 'recover')\r\n                        return '令其摸两张牌';\r\n                    return '回复一点体力';\r\n                },\r\n                check(Evt, player) {\r\n                    if (Evt.name == 'recover')\r\n                        return get.$a(player, _status.currentPhase) > 0;\r\n                    else\r\n                        return true;\r\n                },\r\n                content() {\r\n                    if (trigger.name == 'recover') {\r\n                        _status.currentPhase.draw(2);\r\n                    }\r\n                    else {\r\n                        if (_status.currentPhase != player)\r\n                            player.draw(Math.abs(trigger.num || trigger.cards.length));\r\n                        player.recover();\r\n                    }\r\n                },\r\n            },\r\n            danfu: {\r\n                trigger: { player: ['phaseJieshuBegin', 'changeHujiaAfter'] },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'phaseJieshu')\r\n                        return !player.getStat('damage');\r\n                    else\r\n                        return Evt.num < 0 && _status.currentPhase;\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    if (trigger.name == 'phaseJieshu') {\r\n                        player.loseHp();\r\n                        player.changeHujia();\r\n                    }\r\n                    else {\r\n                        for (let i = 0; i > trigger.num; i--) {\r\n                            _status.currentPhase.draw();\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    tag: {\r\n                        xuefeng: 1,\r\n                    }\r\n                }\r\n            },\r\n            shuipo: {\r\n                trigger: { player: ['discardAfter', 'changeHujiaEnd', 'useCardAfter'] },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'useCard')\r\n                        return get.type2(Evt.card) == 'trick' && !player.hasSkill('shuipo_used');\r\n                    else if (Evt.name == 'discard')\r\n                        return Evt.cards.length >= 3;\r\n                    else\r\n                        return !player.hujia;\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    if (trigger.name == 'useCard') {\r\n                        player.loseHp();\r\n                        player.chooseToDiscard([1, Infinity], 'he', true, '『水魄』：请弃置任意张牌');\r\n                        player.addTempSkill('shuipo_used', 'phaseNext');\r\n                    }\r\n                    else {\r\n                        player.recover();\r\n                        player.draw();\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    used: {},\r\n                },\r\n                ai: {\r\n                    tag: {\r\n                        xuefeng: 1,\r\n                    }\r\n                }\r\n            },\r\n            ming_pianchao: {},\r\n            pianchao: {\r\n                mod: {\r\n                    aiValue(player, card, num) {\r\n                        if (card.hasGaintag && card.hasGaintag('ming_') && player.hasUseTarget(card))\r\n                            return num / (10 * player.getUseValue(card));\r\n                    },\r\n                },\r\n                trigger: { player: ['loseHpAfter', 'discardEnd'] },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'loseHp')\r\n                        return player.countCards('h', card => !card.hasGaintag('ming_')) >= 2;\r\n                    else {\r\n                        return player.getHistory('lose', evt => {\r\n                            if (evt.getParent() != Evt)\r\n                                return false;\r\n                            for (let i in evt.gaintag_map) {\r\n                                if (evt.gaintag_map[i].includes('ming_'))\r\n                                    return true;\r\n                            }\r\n                            return false;\r\n                        }).length > 0;\r\n                    }\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        if (trigger.name == 'loseHp') {\r\n                            player.chooseCard('h', `###${get.$pro('pianchao')}###亮出两张手牌并获得1点护甲`, 2, card => !card.hasGaintag('ming_'));\r\n                        }\r\n                        else {\r\n                            Evt.cards = trigger.cards.filter(card => player.getHistory('lose', evt => {\r\n                                if (evt.getParent() != trigger)\r\n                                    return false;\r\n                                if (evt.gaintag_map[card.cardid] && evt.gaintag_map[card.cardid].includes('ming_'))\r\n                                    return true;\r\n                                return false;\r\n                            }).length > 0);\r\n                            let next = player.chooseCardButton(1, `###${get.$pro('pianchao')}###使用其中一张牌`, Evt.cards);\r\n                            next.set('filterButton', function (button) {\r\n                                let player = _status.event.player;\r\n                                return player.hasUseTarget(button.link);\r\n                            });\r\n                            next.set('ai', function (button) {\r\n                                let player = _status.event.player;\r\n                                return player.getUseValue(button.link);\r\n                            });\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            if (trigger.name == 'loseHp') {\r\n                                player.logSkill('pianchao');\r\n                                player.addGaintag(result.cards, 'ming_pianchao');\r\n                                player.changeHujia();\r\n                            }\r\n                            else {\r\n                                player.logSkill('pianchao');\r\n                                player.chooseUseTarget(result.links[0], true, 'nopopup');\r\n                                player.addTempSkill('pianchao_phaseUseBy', 'none');\r\n                            }\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    phaseUseBy: {\r\n                        mark: true,\r\n                        marktext: '片',\r\n                        intro: { content: '于下个额定阶段结束后进行一个额外的出牌阶段' },\r\n                        trigger: { global: 'phaseNext' },\r\n                        forced: true,\r\n                        content() {\r\n                            player.removeSkill('pianchao_phaseUseBy');\r\n                            player.phaseUse();\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            xyshixi: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filterTarget: true,\r\n                content: [() => {\r\n                        target.damage();\r\n                    }, () => {\r\n                        target.recover();\r\n                    }],\r\n                ai: {\r\n                    tag: {\r\n                        xuefeng: 1,\r\n                    }\r\n                }\r\n            },\r\n            wenxin: {\r\n                mod: {\r\n                    aiValue(player, card, num) {\r\n                        if (card.hasGaintag && card.hasGaintag('ming_') && player.hasUseTarget(card))\r\n                            return num / (10 * player.getUseValue(card));\r\n                    },\r\n                },\r\n                trigger: { player: 'phaseJieshuEnd' },\r\n                filter(Evt, player) {\r\n                    return game.hasPlayer(cur => cur.hasHistory('recover', evt => evt.player == cur && evt.result));\r\n                },\r\n                content: [() => {\r\n                        Evt.targets = game.filterPlayer(cur => cur.hasHistory('recover', evt => evt.player == cur && evt.result));\r\n                        game.asyncDraw(Evt.targets, player.getDamagedHp() || 1);\r\n                    }],\r\n            },\r\n            yankui: {\r\n                trigger: { global: 'phaseZhunbei' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return player != Evt.player && player.countCards('he', card => !player.$.yankui_mark\r\n                        || !player.$.yankui_mark.includes(get.type2(card))) > 1 && Evt.player.countGainableCards(player, 'h');\r\n                },\r\n                check(Evt, player) {\r\n                    if (player.hasUnknown(4))\r\n                        return false;\r\n                    return true;\r\n                },\r\n                content: [() => {\r\n                        Evt.target = trigger.player;\r\n                        game.broadcastAll(function (player) {\r\n                            player.chooseToDiscard(get.$pro2('yankui'), 'he', card => !player.$.yankui_mark\r\n                                || !player.$.yankui_mark.includes(get.type2(card))).ai = card => {\r\n                                let player = _status.event.player, target = _status.event.getTrigger().player, use = 0;\r\n                                if (player.hasUseTarget(card))\r\n                                    use += player.getUseValue(card) * 2;\r\n                                if (get.$a(player, target) < 1)\r\n                                    return 6 - get.useful(card) + use;\r\n                                return 0;\r\n                            };\r\n                        }, player);\r\n                    }, () => {\r\n                        if (result.cards && result.cards.length) {\r\n                            player.logSkill(Evt.target);\r\n                            if (!player.$.yankui_mark)\r\n                                player.$.yankui_mark = [];\r\n                            for (let i = 0; i < result.cards.length; i++) {\r\n                                player.$.yankui_mark.add(get.type2(result.cards[0]));\r\n                            }\r\n                            let next = player.gainPlayerCard(Evt.target, 'h', true, 'visibleMove');\r\n                            next.set('visible', true);\r\n                            next.set('ai', function (button) {\r\n                                let player = _status.event.player, target = _status.event.getTrigger().player;\r\n                                if (get.$a(player, target) > 0) {\r\n                                    if (target.countCards('h', { name: 'sha' }) > 1 && get.type(button.link) != 'basic' && get.name(button.link) != 'sha')\r\n                                        return 6 + get.value(button.link);\r\n                                    if (target.countCards('j') && target.needsToDiscard() && get.type(button.link) != 'basic')\r\n                                        return 5 + get.value(button.link);\r\n                                }\r\n                                return get.value(button.link);\r\n                            });\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool && result.links) {\r\n                            player.addTempSkill('yankui_mark', 'roundStart');\r\n                            Evt.card = result.links[0];\r\n                            if (get.type(Evt.card) != 'basic') {\r\n                                Evt.target.skip('phaseJudge');\r\n                                Evt.target.skip('phaseDiscard');\r\n                                Evt.target.addTempSkill('yankui1');\r\n                            }\r\n                            else {\r\n                                Evt.target.addTempSkill('yankui2');\r\n                            }\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    mark: {\r\n                        mark: true,\r\n                        marktext: '魇',\r\n                        intro: {\r\n                            name: '魇窥',\r\n                            content(storage, player) {\r\n                                let str = '<ul style=\"padding-top:0;margin-top:0\"><p>本轮次已弃置的牌类型</p>';\r\n                                for (let i = 0; i < storage.length; i++) {\r\n                                    str += '<li>' + get.$t(storage[i]);\r\n                                }\r\n                                str += '</ul>';\r\n                                return str;\r\n                            },\r\n                        },\r\n                        onremove(player, skill) {\r\n                            player.unmarkSkill(skill);\r\n                            delete player.$[skill];\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            yankui1: {\r\n                mark: true,\r\n                marktext: '魇',\r\n                intro: { name: '魇窥 - 非基本牌', content: '跳过本回合下一个判定阶段和弃牌阶段' },\r\n            },\r\n            yankui2: {\r\n                mod: {\r\n                    cardUsable(card, player, num) {\r\n                        if (card.name == 'sha')\r\n                            return num + 1;\r\n                    },\r\n                },\r\n                mark: true,\r\n                marktext: '魇',\r\n                intro: { name: '魇窥 - 基本牌', content: '本回合内可以多使用一张【杀】' },\r\n            },\r\n            huiyuan: {\r\n                audio: 4,\r\n                trigger: { global: 'useCard1' },\r\n                filter(Evt, player) {\r\n                    return player.countCards('h') < Evt.player.countCards('h') && get.type(Evt.card) == 'basic';\r\n                },\r\n                usable: 1,\r\n                check(Evt, player) {\r\n                    return get.$a(player, Evt.player) > 0;\r\n                },\r\n                content() {\r\n                    game.asyncDraw([player, trigger.player]);\r\n                },\r\n            },\r\n            suoshi: {\r\n                audio: 2,\r\n                trigger: { player: 'damageBegin3' },\r\n                filter(Evt, player) {\r\n                    return player.countCards('h');\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        let list = game.filterPlayer(cur => {\r\n                            return cur.isMaxHandcard();\r\n                        });\r\n                        player.chooseCardTarget({\r\n                            prompt: get.$pro2('suoshi'),\r\n                            position: 'h',\r\n                            filterTarget(card, player, target) {\r\n                                return player != target && target.isMaxHandcard();\r\n                            },\r\n                            filterCard: lib.filter.cardDiscardable,\r\n                            ai1(card) {\r\n                                if (_status.event.goon)\r\n                                    return 6 - get.value(card);\r\n                                return 0;\r\n                            },\r\n                            ai2(target) {\r\n                                let player = _status.event.player;\r\n                                return get.$a(player, target);\r\n                            },\r\n                            goon: !player.isMinHandcard() && (player.countCards('h') < 3 && get.$a(player, list[0]) > 0),\r\n                        });\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            Evt.cards = result.cards.slice(0);\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('suoshi', Evt.target);\r\n                            player.give(Evt.cards, Evt.target);\r\n                        }\r\n                    }],\r\n                group: ['suoshi_addDam'],\r\n                subSkill: {\r\n                    addDam: {\r\n                        trigger: { player: 'damageBegin' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return !player.isMinHandcard();\r\n                        },\r\n                        content() {\r\n                            trigger.num++;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            paryi: {\r\n                marktext: \"P\",\r\n                locked: true,\r\n                intro: {\r\n                    name: '帕里家常',\r\n                    content(storage, player, skill) {\r\n                        return `已经历了${storage}次『天扉』`;\r\n                    },\r\n                },\r\n            },\r\n            tiantang: {\r\n                audio: 2,\r\n                priority: 987,\r\n                global: 'paryi',\r\n                trigger: {\r\n                    global: 'phaseBegin'\r\n                },\r\n                filter(Evt, player) {\r\n                    if (player.countCards('he') < (Evt.player.$.paryi || 1))\r\n                        return false;\r\n                    return true;\r\n                },\r\n                check(Evt, player) {\r\n                    if (player.$.haoren !== true)\r\n                        return (Evt.player.$.paryi || 1) <= 2 && get.$a(player, Evt.player) < 1 && !Evt.player.hasJudge('lebu');\r\n                    return Evt.player.needsToDiscard() && get.$a(player, Evt.player) < 0 || Evt.player.countCards('h') == 0 && Evt.player.getHandcardLimit() >= 3 && get.$a(player, Evt.player) >= 0;\r\n                },\r\n                content: [() => {\r\n                        let num = trigger.player.$.paryi || 1;\r\n                        if (player.$.haoren === true)\r\n                            player.chooseCard(num, 'he', `『天扉』：重铸${get.cnNumber(num)}张牌`).ai = get.unuseful3;\r\n                        else\r\n                            player.chooseToDiscard(num, 'he', `『天扉』：弃置${get.cnNumber(num)}张牌`).ai = get.unuseful2;\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.target = trigger.player;\r\n                            if (player.$.haoren !== true) {\r\n                                player.addMark('haoren');\r\n                            }\r\n                            else {\r\n                                player.lose(result.cards, ui.discardPile).set('visible', true);\r\n                                player.$throw(result.cards, 1000);\r\n                                game.log(player, '将', result.cards, '置入了弃牌堆');\r\n                                player.draw(result.cards.length);\r\n                            }\r\n                            let target = Evt.target;\r\n                            if (target.$.paryi) {\r\n                                target.$.paryi++;\r\n                            }\r\n                            else {\r\n                                target.$.paryi = 1;\r\n                            }\r\n                            target.markSkill('paryi');\r\n                            Evt.videoId = lib.status.videoId++;\r\n                            let suitlist = [\r\n                                ['heart', '', 'heart', 'heart'],\r\n                                ['diamond', '', 'diamond', 'diamond'],\r\n                                ['club', '', 'club', 'club'],\r\n                                ['spade', '', 'spade', 'spade']\r\n                            ];\r\n                            game.broadcastAll(function (id, suitlist) {\r\n                                let dialog = ui.create.dialog('『天扉』声明');\r\n                                dialog.addText('花色');\r\n                                dialog.add([suitlist, 'vcard']);\r\n                                dialog.videoId = id;\r\n                            }, Evt.videoId, suitlist);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        player.chooseButton().set('dialog', Evt.videoId);\r\n                    }, () => {\r\n                        game.broadcastAll('closeDialog', Evt.videoId);\r\n                        if (result.bool) {\r\n                            Evt.tiantang = result.links[0][2];\r\n                            player.chat(get.$t(Evt.tiantang));\r\n                            game.log(player, '声明了', Evt.tiantang);\r\n                            let list = [`观看${get.$t(Evt.target)}的手牌${player.awakenedSkills.includes('haoren') ? '并重铸' : '并弃置'}其一张${get.$t(Evt.tiantang)}牌，令其执行一个额外的出牌阶段`,\r\n                                `令${get.$t(Evt.target)}摸两张牌，然后其只能使用${get.$t(Evt.tiantang)}的牌直到回合结束`];\r\n                            player.chooseControl('dialogcontrol', list).set('ai', function () {\r\n                                return 1;\r\n                            }).set('prompt', '『天扉』：选择一项');\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        switch (result.index) {\r\n                            case 0: {\r\n                                let next = player[player.$.haoren === true ? 'choosePlayerCard' : 'discardPlayerCard'](`『天扉』：${player.$.haoren === true ? '重铸' : '弃置'}一张声明花色的牌`, Evt.target, 'he').set('visible', true).set('complexSelect', true);\r\n                                next.set('filterButton', function (button) {\r\n                                    return get.suit(button.link) == _status.event.suit;\r\n                                });\r\n                                next.set('suit', Evt.tiantang);\r\n                                if (Evt.target.countCards('he', card => get.suit(card) == Evt.tiantang)) {\r\n                                    next.set('forced', true);\r\n                                }\r\n                                break;\r\n                            }\r\n                            case 1: {\r\n                                Evt.target.draw(2, player);\r\n                                Evt.target.addTempSkill('tiantangzhifei_xianzhi', 'phaseEnd');\r\n                                Evt.target.$.tiantangzhifei_xianzhi = Evt.tiantang;\r\n                                Evt.target.syncStorage('tiantangzhifei_xianzhi');\r\n                                Evt.finish();\r\n                                break;\r\n                            }\r\n                        }\r\n                    }, () => {\r\n                        if (player.$.haoren === true && result.bool && result.cards) {\r\n                            Evt.target.lose(result.cards, ui.discardPile).set('visible', true);\r\n                            Evt.target.$throw(result.cards, 1000);\r\n                            game.log(Evt.target, '将', result.cards, '置入了弃牌堆');\r\n                            Evt.target.draw(result.cards.length);\r\n                        }\r\n                        if (player.$.haoren === true) {\r\n                            Evt.target.addTempSkill('tiantangzhifei_yisheng', 'phaseUseEnd');\r\n                        }\r\n                        Evt.target.phaseUse();\r\n                    }],\r\n            },\r\n            tiantangzhifei: {\r\n                subSkill: {\r\n                    yisheng: {\r\n                        mark: true,\r\n                        marktext: \"流\",\r\n                        intro: {\r\n                            name: '回流',\r\n                            content(storage, player, skill) {\r\n                                return '暂时获得技能『引流』';\r\n                            },\r\n                        },\r\n                        inherit: 'yinliu',\r\n                    },\r\n                    xianzhi: {\r\n                        mark: true,\r\n                        marktext: \"断\",\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '断臂',\r\n                            content(storage, player, skill) {\r\n                                return `只能使用花色为${get.$t(storage)}的牌`;\r\n                            },\r\n                        },\r\n                        onremove: true,\r\n                        mod: {\r\n                            cardEnabled(card, player, now) {\r\n                                if (get.suit(card) != player.$.tiantangzhifei_xianzhi)\r\n                                    return false;\r\n                            },\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            haoren: {\r\n                audio: true,\r\n                skillAnimation: true,\r\n                animationStr: '好人一生',\r\n                unique: true,\r\n                juexingji: true,\r\n                forced: true,\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = 0;\r\n                },\r\n                marktext: \"井\",\r\n                intro: {\r\n                    name: '挖井人',\r\n                    content(storage, player, skill) {\r\n                        return `已发动了${storage}次『天扉』`;\r\n                    },\r\n                },\r\n                trigger: { player: 'tiantangAfter' },\r\n                filter(Evt, player) {\r\n                    return player.$.haoren > game.countPlayer();\r\n                },\r\n                content() {\r\n                    player.loseMaxHp();\r\n                    player.$.haoren = true;\r\n                    player.awakenSkill('haoren');\r\n                    player.unmarkSkill('haoren');\r\n                },\r\n                ai: {\r\n                    combo: 'tiantang',\r\n                },\r\n            },\r\n            shengya: {\r\n                audio: 4,\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = true;\r\n                },\r\n                marktext: \"卒\",\r\n                intro: {\r\n                    name: '职业生涯结束',\r\n                    content(storage, player, skill) {\r\n                        return '失去『职业生涯』直到下个回合开始';\r\n                    },\r\n                },\r\n                trigger: { player: 'useCardAfter' },\r\n                priority: 996,\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return player.$.shengya && player.isPhaseUsing() && get.color(Evt.card) == 'red';\r\n                },\r\n                content() {\r\n                    Evt.cards = get.cards(1);\r\n                    game.cardsGotoOrdering(Evt.cards);\r\n                    player.showCards(Evt.cards);\r\n                    game.delay(1);\r\n                    player.gain(Evt.cards);\r\n                    if (get.suit(Evt.cards[0]) == 'club') {\r\n                        player.loseHp();\r\n                        player.$.shengya = false;\r\n                        player.markSkill('shengya');\r\n                    }\r\n                },\r\n                group: 'shengya_init',\r\n                subSkill: {\r\n                    init: {\r\n                        trigger: { player: 'phaseBefore' },\r\n                        silent: true,\r\n                        forced: true,\r\n                        priority: 996,\r\n                        content() {\r\n                            if (!player.$.shengya) {\r\n                                player.$.shengya = true;\r\n                                player.unmarkSkill('shengya');\r\n                            }\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            liangshan: {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = [];\r\n                },\r\n                marktext: \"汉\",\r\n                intro: {\r\n                    name: '好汉歌',\r\n                    content: 'cards',\r\n                    onunmark: 'throw',\r\n                },\r\n                cardAround: true,\r\n                trigger: { global: 'drawEnd' },\r\n                priority: 996,\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && player == _status.currentPhase && Evt.player.getHistory('gain').length == 1;\r\n                },\r\n                content() {\r\n                    let card = game.cardsGotoSpecial(get.cards()).cards[0];\r\n                    game.log(player, '将', card, '置于武将牌上');\r\n                    player.$.liangshan.push(card);\r\n                    player.$draw(card);\r\n                    game.delay();\r\n                    player.markSkill('liangshan');\r\n                },\r\n                group: ['liangshan_use', 'liangshan_save'],\r\n                subSkill: {\r\n                    use: {\r\n                        trigger: { global: 'phaseBegin' },\r\n                        priority: 996,\r\n                        check(Evt, player) {\r\n                            if (player.hasUnknown(1))\r\n                                return false;\r\n                            return get.$a(player, Evt.player) > 0;\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return player.$.liangshan.length;\r\n                        },\r\n                        prompt2: '一名角色回合开始时，你可以交给其一张你武将牌上的牌，视为其使用了一张【酒】。',\r\n                        content: [() => {\r\n                                player.chooseCardButton('交给其一张你武将牌上的牌', 1, player.$.liangshan);\r\n                            }, () => {\r\n                                if (result.bool) {\r\n                                    let card = result.links;\r\n                                    player.$give(card, trigger.player, false);\r\n                                    game.log(player, '将', card, '交给了', trigger.player);\r\n                                    trigger.player.gain(card);\r\n                                    trigger.player.chooseUseTarget({ name: 'jiu' }, true, 'noTargetDelay', 'nodelayx');\r\n                                    player.$.liangshan.remove(card);\r\n                                    player.markSkill('liangshan');\r\n                                }\r\n                            }]\r\n                    },\r\n                    save: {\r\n                        trigger: { global: 'dying' },\r\n                        priority: 996,\r\n                        check(Evt, player) {\r\n                            return get.$a(player, Evt.player) > 0;\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return Evt.player.hp <= 0 && player.$.liangshan.length;\r\n                        },\r\n                        prompt2: '一名角色濒死时，你可以交给其一张你武将牌上的牌，视为其使用了一张【酒】。',\r\n                        content: [() => {\r\n                                player.chooseCardButton('交给其一张你武将牌上的一张牌', 1, player.$.liangshan);\r\n                            }, () => {\r\n                                if (result.bool) {\r\n                                    let card = result.links;\r\n                                    player.$give(card, trigger.player, false);\r\n                                    game.log(player, '将', card, '交给了', trigger.player);\r\n                                    trigger.player.gain(card);\r\n                                    trigger.player.chooseUseTarget({ name: 'jiu' }, true, 'noTargetDelay', 'nodelayx');\r\n                                    player.$.liangshan.remove(card);\r\n                                    player.markSkill('liangshan');\r\n                                }\r\n                            }]\r\n                    }\r\n                },\r\n            },\r\n            chongshi: {\r\n                trigger: { player: 'shaBegin' },\r\n                priority: 996,\r\n                frequent: true,\r\n                content() {\r\n                    game.asyncDraw([player, trigger.target]);\r\n                }\r\n            },\r\n            guanzhai: {\r\n                audio: 5,\r\n                trigger: { global: 'phaseEnd' },\r\n                priority: 997,\r\n                prompt2(Evt, player) {\r\n                    let target = Evt.player;\r\n                    return `可以观看其手牌，并获得其中至多${target.hasSkill('zhai') ? target.countMark('zhai') + 1 : 1}张牌`;\r\n                },\r\n                logTarget: 'player',\r\n                filter(Evt, player) {\r\n                    let num = Evt.player.countUsed(null, true);\r\n                    return Evt.player != player && Evt.player.countCards('h') && num < (Evt.player.hasSkill('zhai') ? Evt.player.countMark('zhai') + 2 : 2);\r\n                },\r\n                content: [() => {\r\n                        let str = `###『观宅』###获得其中至多${trigger.player.hasSkill('zhai') ? trigger.player.countMark('zhai') + 1 : 1}张牌`;\r\n                        player.choosePlayerCard(trigger.player, [1, (trigger.player.hasSkill('zhai') ? trigger.player.countMark('zhai') + 1 : 1)], 'h').set('visible', true).set('prompt', str);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.logSkill('guanzhai', trigger.player, true, true, false);\r\n                            player.gain(result.cards, trigger.player, 'giveAuto');\r\n                        }\r\n                    }],\r\n            },\r\n            zhai: {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = 0;\r\n                },\r\n                marktext: '宅',\r\n                intro: {\r\n                    name: '直往欲女',\r\n                    name2: '观宅',\r\n                    content(storage, player, skill) {\r\n                        return `下个回合中，『观宅』（）内的数值+${storage}。`;\r\n                    },\r\n                },\r\n                mark: true,\r\n                onremove: true,\r\n            },\r\n            zhishu: {\r\n                audio: 3,\r\n                trigger: { player: ['phaseUseBegin', 'changeHp'] },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h');\r\n                },\r\n                content: [() => {\r\n                        let next = player.chooseCardTarget().set('prompt', get.$pro2('zhishu'));\r\n                        next.set('filterTarget', function (card, player, target) {\r\n                            return target != player;\r\n                        });\r\n                        next.set('ai2', function (target) {\r\n                            let player = _status.event.player;\r\n                            return 7 - get.$a(player, target);\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('zhishu', Evt.target);\r\n                            player.showCards(result.cards, '『直抒』展示手牌');\r\n                            game.delayx();\r\n                            Evt.target.chooseCard('he', `是否交给${get.$t(player)}一张花色为${get.$t(get.suit(result.cards[0]))}的牌？`, function (card, player) {\r\n                                return get.suit(card) == _status.event.suit;\r\n                            }).set('suit', get.suit(result.cards[0]));\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.gain(result.cards[0], Evt.target, 'giveAuto');\r\n                        }\r\n                        else {\r\n                            Evt.target.addTempSkill('zhai', { player: 'phaseAfter' });\r\n                            Evt.target.addMark('zhai', 1);\r\n                            game.log(Evt.target, '拒绝交给', player, '相同花色的牌');\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    combo: 'guanzhai',\r\n                },\r\n            },\r\n            yuxia: {\r\n                audio: 4,\r\n                hiddenCard(player, name) {\r\n                    if (!lib.skill.yuxia.filter(false, player))\r\n                        return false;\r\n                    let list = get.inpile('trick');\r\n                    for (let i = 0; i < list.length; i++) {\r\n                        if (list[i] == name)\r\n                            return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                enable: 'chooseToUse',\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') >= 3;\r\n                },\r\n                chooseButton: {\r\n                    dialog(Evt, player) {\r\n                        let list = get.inpile('trick');\r\n                        for (let i = 0; i < list.length; i++) {\r\n                            list[i] = ['锦囊', '', list[i]];\r\n                        }\r\n                        return ui.create.dialog('『玉匣』', [list, 'vcard']);\r\n                    },\r\n                    filter(button, player) {\r\n                        return _status.event.getParent().filterCard({ name: button.link[2], nature: button.link[3] }, player, _status.event.getParent());\r\n                    },\r\n                    check(button) {\r\n                        let player = _status.event.player;\r\n                        if (player.countCards('h', button.link[2]) > 0)\r\n                            return 0;\r\n                        if (['wugu', 'jingluo'].includes(button.link[2]))\r\n                            return 0;\r\n                        let effect = player.getUseValue(button.link[2]);\r\n                        if (effect > 0)\r\n                            return effect;\r\n                        return 0;\r\n                    },\r\n                    backup(links, player) {\r\n                        return {\r\n                            audio: 'yuxia',\r\n                            filterCard(card) {\r\n                                return true;\r\n                            },\r\n                            selectCard: 3,\r\n                            forceAuto() {\r\n                                return ui.selected.cards.length == 3;\r\n                            },\r\n                            popname: true,\r\n                            check(card) {\r\n                                return 7 - get.value(card);\r\n                            },\r\n                            position: 'hes',\r\n                            viewAs: { name: links[0][2], nature: links[0][3] },\r\n                        };\r\n                    },\r\n                    prompt(links, player) {\r\n                        return `###『玉匣』###将三张牌当做【${get.$t(links[0][3]) || ''}${get.$t(links[0][2])}】使用`;\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 6,\r\n                    result: {\r\n                        player(player) {\r\n                            let players = game.filterPlayer();\r\n                            for (let i = 0; i < players.length; i++) {\r\n                                if (players[i] != player && get.$a(player, players[i]) > 0) {\r\n                                    return 0.5;\r\n                                }\r\n                            }\r\n                            return 0;\r\n                        }\r\n                    },\r\n                },\r\n                group: 'yuxia_after',\r\n                subSkill: {\r\n                    after: {\r\n                        trigger: { player: 'useCardEnd' },\r\n                        priority: 66,\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            return Evt.cards.length == 3 && Evt.skill == 'yuxia_backup' && Evt.cards.filterInD().length;\r\n                        },\r\n                        content: [() => {\r\n                                Evt.cards = trigger.cards.filterInD();\r\n                                player.chooseCardButton([0, 3], true, Evt.cards, '『玉匣』：可以按顺序将卡牌置于牌堆顶（先选择的在上）').set('ai', function (button) {\r\n                                    let player = _status.event.player;\r\n                                    let now = _status.currentPhase;\r\n                                    let next = now.getNext();\r\n                                    let att = get.$a(player, next);\r\n                                    let card = button.link;\r\n                                    let judge = next.getCards('j')[ui.selected.buttons.length];\r\n                                    if (judge) {\r\n                                        return get.judge(judge)(card) * att;\r\n                                    }\r\n                                    return next.getUseValue(card) * att;\r\n                                });\r\n                            }, () => {\r\n                                if (result.bool && result.links) {\r\n                                    let list = result.links.slice(0);\r\n                                    if (list.length) {\r\n                                        Evt.cards.removeArray(list);\r\n                                    }\r\n                                    while (list.length) {\r\n                                        ui.cardPile.insertBefore(list.pop(), ui.cardPile.firstChild);\r\n                                    }\r\n                                    game.log(player, '将牌放在牌堆顶');\r\n                                    if (Evt.cards.length) {\r\n                                        game.cardsDiscard(Evt.cards);\r\n                                        game.log(Evt.cards, '进入了弃牌堆');\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    game.cardsDiscard(Evt.cards);\r\n                                    game.log(Evt.cards, '进入了弃牌堆');\r\n                                }\r\n                            }]\r\n                    }\r\n                },\r\n            },\r\n            lianjue: {\r\n                init(player, skill) {\r\n                    player.$[skill] = [];\r\n                },\r\n                marktext: '崛',\r\n                intro: {\r\n                    content: 'cards',\r\n                    name: '以『连崛』使用过的锦囊牌',\r\n                },\r\n                trigger: { player: 'phaseEnd' },\r\n                priority: 66,\r\n                frequent: true,\r\n                prompt2: '你可以选择一项：令至多三名角色各摸一张牌；或视为使用一张未以此法使用过的通常锦囊牌。',\r\n                filter(Evt, player) {\r\n                    return (Math.abs(player.$.lianjue_start - player.countCards('h')) % 3 == 0);\r\n                },\r\n                content: [() => {\r\n                        player.chooseControlList(['令至多三名角色各摸一张牌', '视为使用一张未以此使用过的通常锦囊牌'], function () {\r\n                            return 1;\r\n                        });\r\n                    }, () => {\r\n                        switch (result.index) {\r\n                            case 0: {\r\n                                player.chooseTarget([1, 3], '令至多三名角色各摸一张牌').set('ai', function (target) {\r\n                                    let att = get.$a(_status.event.player, target);\r\n                                    if (att > 1) {\r\n                                        return att;\r\n                                    }\r\n                                    return 0;\r\n                                });\r\n                                Evt.goto(2);\r\n                                break;\r\n                            }\r\n                            case 1: {\r\n                                Evt.videoId = lib.status.videoId++;\r\n                                let list = [];\r\n                                for (let i = 0; i < lib.inpile.length; i++) {\r\n                                    let name = lib.inpile[i];\r\n                                    let reapeat = 0;\r\n                                    if (player.$.lianjue.length) {\r\n                                        player.$.lianjue.forEach(function (his) {\r\n                                            if (get.name(his) == name)\r\n                                                reapeat++;\r\n                                        });\r\n                                    }\r\n                                    if (reapeat || name == 'wuxie' || name == 'jinchan')\r\n                                        continue;\r\n                                    else if (get.type(name) == 'trick')\r\n                                        list.push(['锦囊', '', name]);\r\n                                }\r\n                                game.broadcastAll(function (id, list) {\r\n                                    let dialog = ui.create.dialog('使用一张未以此使用过的通常锦囊牌', [list, 'vcard']);\r\n                                    dialog.videoId = id;\r\n                                }, Evt.videoId, list);\r\n                                Evt.goto(3);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            game.asyncDraw(result.targets);\r\n                        }\r\n                        Evt.finish();\r\n                    }, () => {\r\n                        let next = player.chooseButton(1);\r\n                        next.set('dialog', Evt.videoId);\r\n                        next.set('ai', function (button) {\r\n                            return player.getUseValue({ name: button.link[2], isCard: true });\r\n                        });\r\n                    }, () => {\r\n                        game.broadcastAll('closeDialog', Evt.videoId);\r\n                        if (result.bool) {\r\n                            let card = result.links[0];\r\n                            player.chooseUseTarget({ name: card[2] }, true);\r\n                            player.$.lianjue.add(game.createCard(card[2]));\r\n                            player.syncStorage('lianjue');\r\n                            player.markSkill('lianjue');\r\n                        }\r\n                    }],\r\n                group: ['lianjue_start'],\r\n                subSkill: {\r\n                    start: {\r\n                        init(player, skill) {\r\n                            if (!player.$[skill])\r\n                                player.$[skill] = 0;\r\n                        },\r\n                        trigger: { player: 'phaseBefore' },\r\n                        firstDo: true,\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        priority: 66,\r\n                        content() {\r\n                            player.$.lianjue_start = player.countCards('h');\r\n                        },\r\n                    },\r\n                },\r\n                mod: {\r\n                    aiOrder(player, card, num) {\r\n                        if (typeof card == 'object' && player == _status.currentPhase && !player.needsToDiscard() && Math.abs(player.$.lianjue_start - player.countCards('h')) % 3 == 0) {\r\n                            return num - 10;\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            changxiang: {\r\n                zhuSkill: true,\r\n                trigger: { global: 'dying' },\r\n                priority: 66,\r\n                filter(Evt, player) {\r\n                    if (!player.hasZhuSkill('changxiang'))\r\n                        return false;\r\n                    return Evt.player.hp <= 0 && Evt.player != player && Evt.player.group == player.group && player.countCards('he') >= player.hp;\r\n                },\r\n                content: [() => {\r\n                        player.chooseToDiscard(player.hp);\r\n                    }, () => {\r\n                        if (result.bool)\r\n                            player.useCard({ name: 'tao' }, trigger.player);\r\n                    }]\r\n            },\r\n            xhhuanshi: {\r\n                mark: true,\r\n                locked: true,\r\n                intro: {\r\n                    name: '幻士',\r\n                    content: 'cards',\r\n                    onunmark: 'throw',\r\n                },\r\n                cardAround: true,\r\n            },\r\n            huange: {\r\n                trigger: { global: 'phaseBegin' },\r\n                round: 1,\r\n                priority: 996,\r\n                filter(Evt, player) {\r\n                    return game.countPlayer(cur => cur.hp > 0 && cur.hp !== Infinity);\r\n                },\r\n                check(Evt, player) {\r\n                    if (Evt.player != player && get.$a(player, Evt.player) < 0 && Evt.player.inRange(player))\r\n                        return true;\r\n                    return Evt.player == player && game.roundNumber > 1 && player.hasUseTarget('sha') && !player.needsToDiscard();\r\n                },\r\n                popup: false,\r\n                content: [() => {\r\n                        let next = player.chooseTarget('###『幻歌』###选择一名角色，摸取其体力值的牌', true, function (card, player, target) {\r\n                            return target.hp > 0 && target.hp !== Infinity;\r\n                        });\r\n                        next.set('ai', function (target) {\r\n                            let num = target.hp;\r\n                            if (player.$.qishi === true)\r\n                                num += target.hp;\r\n                            if (player.inRange(target))\r\n                                return num - get.$a(player, target);\r\n                            else\r\n                                return num - (get.$a(player, target) / 2);\r\n                        });\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            player.logSkill('huange', result.targets);\r\n                            player.draw(result.targets[0].hp);\r\n                            player.$.huange_disc = result.targets[0];\r\n                            player.markSkill('huange_disc');\r\n                            player.addTempSkill('huange_disc');\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    disc: {\r\n                        mark: 'character',\r\n                        intro: {\r\n                            name: '幻歌',\r\n                            content: '回合结束时弃置$体力值的牌',\r\n                        },\r\n                        trigger: { global: 'phaseEnd' },\r\n                        priority: 996,\r\n                        onremove: true,\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return player.countDiscardableCards(player, 'he');\r\n                        },\r\n                        content: [() => {\r\n                                if (player.$.huange_disc.isIn() && player.countCards('he')) {\r\n                                    let prompt2 = player.$.qishi === true ? `将${get.cnNumber(player.$.huange_disc.hp)}张牌置于武将牌上` : `弃置${get.cnNumber(player.$.huange_disc.hp)}张牌`;\r\n                                    player.chooseCard('he', `###『幻歌』###${prompt2}`, player.$.huange_disc.hp, true, lib.filter.cardDiscardable);\r\n                                }\r\n                                else {\r\n                                    Evt.goto(2);\r\n                                }\r\n                            }, () => {\r\n                                if (result.bool) {\r\n                                    if (player.$.qishi === true) {\r\n                                        Evt.cards = result.cards;\r\n                                        player.lose(result.cards, ui.special, 'toStorage');\r\n                                        player.$give(Evt.cards, player, false);\r\n                                        player.markAuto('xhhuanshi', Evt.cards);\r\n                                    }\r\n                                    else {\r\n                                        player.discard(result.cards);\r\n                                    }\r\n                                }\r\n                            }, () => {\r\n                                player.unmarkSkill('huange_disc');\r\n                                delete player.$.huange_disc;\r\n                            }],\r\n                    }\r\n                },\r\n            },\r\n            qishi: {\r\n                audio: true,\r\n                skillAnimation: true,\r\n                animationStr: '希望之花',\r\n                unique: true,\r\n                juexingji: true,\r\n                forced: true,\r\n                trigger: { global: 'roundEnd' },\r\n                firstDo: true,\r\n                priority: 996,\r\n                filter(Evt, player) {\r\n                    return player.$.qishi_date && player.$.qishi_date.includes(player) && player.$.qishi_date.length > 1;\r\n                },\r\n                content: [() => {\r\n                        player.unmarkSkill('qishi_date');\r\n                        player.loseMaxHp();\r\n                        Evt.cards = [];\r\n                    }, () => {\r\n                        let next = player.judge(card => {\r\n                            if (get.color(card) == 'black')\r\n                                return -1.5;\r\n                            return 1.5;\r\n                        });\r\n                        next.set('callback', function () {\r\n                            Evt.getParent().orderingCards.remove(card);\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.cards.push(result.card);\r\n                            Evt.goto(1);\r\n                        }\r\n                        else {\r\n                            Evt.cards.push(result.card);\r\n                        }\r\n                    }, () => {\r\n                        for (let i = 0; i < Evt.cards.length; i++) {\r\n                            if (get.position(Evt.cards[i], true) != 'o') {\r\n                                Evt.cards.splice(i, 1);\r\n                                i--;\r\n                            }\r\n                        }\r\n                        if (Evt.cards.length) {\r\n                            player.$gain2(Evt.cards, false);\r\n                            player.markAuto('xhhuanshi', Evt.cards);\r\n                        }\r\n                    }, () => {\r\n                        player.$.qishi = true;\r\n                        player.awakenSkill('qishi');\r\n                        player.addSkill('xiban');\r\n                    }],\r\n                derivation: 'xiban',\r\n                group: ['qishi_date', 'qishi_update'],\r\n                subSkill: {\r\n                    date: {\r\n                        mark: true,\r\n                        intro: {\r\n                            name: '奇誓',\r\n                            content(storage, player, skill) {\r\n                                let str = '本轮内';\r\n                                if (storage.includes(player))\r\n                                    str += ' 已受到伤害';\r\n                                if (storage != [player])\r\n                                    str += ' 已造成伤害';\r\n                                return str;\r\n                            },\r\n                            onunmark(storage, player) {\r\n                                if (storage && storage.length) {\r\n                                    storage.length = 0;\r\n                                }\r\n                            },\r\n                        },\r\n                        trigger: { player: 'damageEnd', source: 'damageEnd' },\r\n                        firstDo: true,\r\n                        priority: 996,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            if (player.$.qishi === true)\r\n                                return false;\r\n                            if (player.$.qishi_date && player.$.qishi_date.includes(Evt.player))\r\n                                return false;\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            if (!player.$.qishi_date)\r\n                                player.$.qishi_date = [];\r\n                            player.$.qishi_date.add(trigger.player);\r\n                            player.markSkill('qishi_date');\r\n                        },\r\n                    },\r\n                    update: {\r\n                        trigger: { global: 'roundStart' },\r\n                        lastDo: true,\r\n                        priority: 996,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            if (player.$.qishi === true)\r\n                                return false;\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            player.unmarkSkill('qishi_date');\r\n                        }\r\n                    },\r\n                },\r\n                ai: {\r\n                    combo: 'huange',\r\n                },\r\n            },\r\n            xiban: {\r\n                trigger: { global: 'phaseEnd' },\r\n                priority: 99,\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && Evt.player.getHistory('sourceDamage').length && player.hp <= player.$.xhhuanshi.length;\r\n                },\r\n                check(Evt, player) {\r\n                    return player.isDamaged() || get.$a(player, Evt.player) < 0;\r\n                },\r\n                logTarget(Evt, player) {\r\n                    return Evt.player;\r\n                },\r\n                content: [() => {\r\n                        Evt.target = trigger.player;\r\n                        player.chooseCardButton(`###『系绊』###可以弃置${get.cnNumber(player.hp)}张「士」 对${get.$t(Evt.target)}发动技能`, player.hp, player.$.xhhuanshi);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.cards = result.links.slice(0);\r\n                            player.unmarkAuto('xhhuanshi', Evt.cards);\r\n                            player.$throw(Evt.cards, 1000);\r\n                            game.cardsGotoOrdering(Evt.cards);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        let next = Evt.target.chooseToDiscard('he', Evt.cards.length);\r\n                        if (player.isHealthy()) {\r\n                            next.set('forced', true);\r\n                        }\r\n                        else {\r\n                            next.set('prompt2', `取消则令${get.$t(player)}回复一点体力`);\r\n                        }\r\n                        next.set('source', player);\r\n                        next.set('ai', card => {\r\n                            let source = _status.event.source;\r\n                            let player = _status.event.player;\r\n                            if (source.isDamaged() && get.recoverEffect(source, player, player) >= 0)\r\n                                return -1;\r\n                            return 7 - get.value(card);\r\n                        });\r\n                    }, () => {\r\n                        if (!result.bool) {\r\n                            player.recover(Evt.target);\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    combo: 'huange',\r\n                },\r\n            },\r\n            yongtuan: {\r\n                audio: true,\r\n                skillAnimation: true,\r\n                animationStr: '一袋米要扛几楼',\r\n                unique: true,\r\n                limited: true,\r\n                zhuSkill: true,\r\n                trigger: { player: 'xibanAfter' },\r\n                priority: 66,\r\n                filter(Evt, player) {\r\n                    if (!player.hasZhuSkill('yongtuan'))\r\n                        return false;\r\n                    return Evt.cards.length;\r\n                },\r\n                content: [() => {\r\n                        let next = player.chooseTarget(true, function (card, player, tar) {\r\n                            return tar.group == _status.event.player.group;\r\n                        });\r\n                        next.set('ai', function (target) {\r\n                            return get.$a(_status.event.player, target);\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            result.targets[0].gain(trigger.cards);\r\n                            player.$.yongtuan = true;\r\n                            player.awakenSkill('yongtuan');\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    combo: 'huange',\r\n                },\r\n            },\r\n            niaoji: {\r\n                audio: true,\r\n                audioname: ['jike'],\r\n                trigger: { source: 'damageEnd', player: 'damageEnd' },\r\n                priority: 99,\r\n                lastDo: true,\r\n                check(Evt, player) {\r\n                    if (Evt.source && Evt.source == player)\r\n                        return get.$a(player, Evt.player) < 1;\r\n                    return true;\r\n                },\r\n                frequent: true,\r\n                prompt(Evt, player) {\r\n                    if (Evt.source && Evt.source == player)\r\n                        return `对${get.$t(Evt.player)}造成伤害，${get.$pro('niaoji')}`;\r\n                    return `受到来自${get.$t(Evt.source)}的伤害，${get.$pro('niaoji')}`;\r\n                },\r\n                filter(Evt, player) {\r\n                    return Evt.source;\r\n                },\r\n                content: [() => {\r\n                        let func;\r\n                        Evt.target = (player == trigger.source) ? trigger.player : trigger.source;\r\n                        if (!Evt.target || !Evt.target.isIn() || Evt.target.countCards('he') <= 0) {\r\n                            func = function (result) {\r\n                                if (get.suit(result) == 'spade')\r\n                                    return 0;\r\n                                if (get.suit(result) == 'heart')\r\n                                    return 2;\r\n                                return -1;\r\n                            };\r\n                        }\r\n                        else {\r\n                            func = function (result) {\r\n                                if (get.suit(result) == 'spade')\r\n                                    return 2;\r\n                                if (get.suit(result) == 'heart')\r\n                                    return 2;\r\n                                return -1;\r\n                            };\r\n                        }\r\n                        player.judge(func);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.num = player.getDamagedHp() + 1;\r\n                            if (result.suit == 'spade') {\r\n                                if ([player.name, player.name1].includes('Yousa')) {\r\n                                    let audio = 'niaoji_spade' + Math.ceil(3 * Math.random());\r\n                                    game.playAudio('skill', audio);\r\n                                    game.broadcast(function (audio) {\r\n                                        game.playAudio('skill', audio);\r\n                                    }, audio);\r\n                                }\r\n                                player.discardPlayerCard(`###『鸟肌』###弃置${get.$t(Evt.target)}${get.cnNumber(Evt.num)}张牌`, Evt.target, Evt.num, true, 'he');\r\n                            }\r\n                            else if (result.suit == 'heart') {\r\n                                if ([player.name, player.name1].includes('Yousa')) {\r\n                                    let audio = 'niaoji_heart' + Math.ceil(3 * Math.random());\r\n                                    game.playAudio('skill', audio);\r\n                                    game.broadcast(function (audio) {\r\n                                        game.playAudio('skill', audio);\r\n                                    }, audio);\r\n                                }\r\n                                player.draw(Evt.num);\r\n                            }\r\n                        }\r\n                    }],\r\n            },\r\n            ysxiangxing: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h') > 0;\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    if (player.inRange(target))\r\n                        return true;\r\n                },\r\n                content: [() => {\r\n                        let next = player.chooseCardButton('###『翔星』###按顺序将卡牌置于牌堆顶（先选择的在上）', player.getCards('h'), player.countCards('h'), true);\r\n                        next.set('forceAuto', function () {\r\n                            return ui.selected.buttons.length == _status.event.player.countCards('h');\r\n                        });\r\n                        next.set('ai', function (button) {\r\n                            if (get.suit(button.link) == 'heart')\r\n                                return 8 + Math.random();\r\n                            if (get.suit(button.link) == 'spade')\r\n                                return 6 + Math.random();\r\n                            return 4 + Math.random();\r\n                        });\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length))\r\n                            Evt.cards = result.links.slice(0);\r\n                        else\r\n                            Evt.finish();\r\n                        game.delay();\r\n                    }, () => {\r\n                        player.lose(Evt.cards, ui.special);\r\n                    }, () => {\r\n                        let cards = Evt.cards;\r\n                        game.log(player, `将${get.cnNumber(cards.length)}张牌放在牌堆顶`);\r\n                        while (cards.length > 0) {\r\n                            ui.cardPile.insertBefore(cards.pop().fix(), ui.cardPile.firstChild);\r\n                        }\r\n                        game.updateRoundNumber();\r\n                    }, () => {\r\n                        target.damage(player);\r\n                    }],\r\n                ai: {\r\n                    order(item, player) {\r\n                        if (player.countCards('h', { suit: 'heart' }))\r\n                            return 4;\r\n                        else\r\n                            return 1;\r\n                    },\r\n                    result: {\r\n                        player(player, target) {\r\n                            let num = -player.countCards('h');\r\n                            if (player.countCards('h', { suit: 'heart' }))\r\n                                num += (player.getDamagedHp() + 1);\r\n                            return num;\r\n                        },\r\n                        target(player, target) {\r\n                            if (target.hasSkill('shenyou'))\r\n                                return 0;\r\n                            return get.damageEffect(target, player, target);\r\n                        }\r\n                    },\r\n                    expose: 0.2,\r\n                },\r\n            },\r\n            naiwei: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    if (target.isMinHp() || target.isMaxHp())\r\n                        return true;\r\n                },\r\n                content: [() => {\r\n                        Evt.map = ['recover', 'loseHp'];\r\n                        if (target.isMinHp() && target.isMaxHp()) {\r\n                            player.chooseControl('recover_hp', 'lose_hp', function () {\r\n                                if (_status.event.check)\r\n                                    return 0;\r\n                                return 1;\r\n                            }).set('prompt', '令目标执行：').set('check', get.recoverEffect(target, player, player) > 0);\r\n                        }\r\n                        else {\r\n                            Evt.type = target.isMinHp() ? 0 : 1;\r\n                            Evt.goto(2);\r\n                        }\r\n                    }, () => {\r\n                        Evt.type = result.control == 'recover_hp' ? 0 : 1;\r\n                    }, () => {\r\n                        target[Evt.map[Evt.type]]();\r\n                    }, () => {\r\n                        if (Evt.type) {\r\n                            if (game.countPlayer(cur => {\r\n                                return cur.isMinHp;\r\n                            }) < 2)\r\n                                return;\r\n                        }\r\n                        else {\r\n                            if (game.countPlayer(cur => {\r\n                                return cur.isMaxHp;\r\n                            }) < 2)\r\n                                return;\r\n                        }\r\n                        player.chooseTarget(function (card, player, target) {\r\n                            let change = _status.event.change;\r\n                            if (change == 'recover')\r\n                                return target.isMaxHp();\r\n                            return target.isMinHp();\r\n                        }, function (target) {\r\n                            let player = _status.event.player;\r\n                            let change = _status.event.change;\r\n                            if (change == 'recover')\r\n                                return 1 - get.$a(player, target);\r\n                            return get.recoverEffect(target, player, player);\r\n                        }).set('prompt', '###『奶味天使』###可以执行另一项').set('change', Evt.map[Evt.type]);\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            player.line(result.targets);\r\n                            result.targets[0][[...Evt.map].reverse()[Evt.type]]();\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    order: 6,\r\n                    result: {\r\n                        target(player, target) {\r\n                            let eff0 = get.recoverEffect(target, player, target);\r\n                            let eff1 = -2;\r\n                            if (target.isMinHp() && target.isMaxHp()) {\r\n                                if (get.$a(player, target) > 0)\r\n                                    return Math.max(eff0, eff1);\r\n                                return Math.min(eff0, eff1);\r\n                            }\r\n                            if (target.isMinHp())\r\n                                return eff0;\r\n                            return eff1;\r\n                        }\r\n                    },\r\n                    expose: 0.2,\r\n                },\r\n            },\r\n            cishan: {\r\n                trigger: { player: 'phaseDrawBegin1' },\r\n                filter(Evt, player) {\r\n                    return !Evt.numFixed && player.countCards('h') > 0;\r\n                },\r\n                check(Evt, player) {\r\n                    return player.countCards('h') >= 4;\r\n                },\r\n                content: [() => {\r\n                        trigger.changeToZero();\r\n                    }, () => {\r\n                        player.draw(player.countCards('h'));\r\n                        Evt.targets = game.filterPlayer().sortBySeat(player);\r\n                    }, () => {\r\n                        Evt.target = Evt.targets.shift();\r\n                        if (Evt.target.canCompare(player)) {\r\n                            Evt.target.chooseBool(`###是否与${get.$t(player)}拼点？###若赢可以获得${get.$t(player)}的一张牌`).set('ai', function () {\r\n                                if (!_status.event.check)\r\n                                    return 0;\r\n                                return 1;\r\n                            }).set('check', get.$a(Evt.target, player) < 0);\r\n                        }\r\n                        else\r\n                            Evt.goto(5);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.target.line(player);\r\n                            Evt.target.chooseToCompare(player);\r\n                        }\r\n                        else\r\n                            Evt.goto(5);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            if (player.countGainableCards(Evt.target, 'he')) {\r\n                                Evt.target.gainPlayerCard(player, true);\r\n                            }\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.targets.length)\r\n                            Evt.goto(2);\r\n                    }],\r\n            },\r\n            tianyi: {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = [];\r\n                },\r\n                mark: true,\r\n                intro: {\r\n                    name: '衣',\r\n                    content: 'cards',\r\n                    onunmark: 'throw',\r\n                },\r\n                cardAround: true,\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return !player.getEquip(2);\r\n                },\r\n                filterCard(card, player) {\r\n                    return true;\r\n                },\r\n                check(card) {\r\n                    return 7 - get.value(card);\r\n                },\r\n                discard: false,\r\n                visible: true,\r\n                toStorage: true,\r\n                content: [() => {\r\n                        player.$give(cards, player, false);\r\n                        player.markAuto('tianyi', cards);\r\n                        game.log(player, '将', cards, '置于武将牌上');\r\n                    }],\r\n                group: ['tianyi_drawBy', 'tianyi_cancelBy', 'tianyi_clear'],\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: { player: 'useCard', target: 'useCardToTarget' },\r\n                        priority: 77,\r\n                        lastDo: true,\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            var _a, _b;\r\n                            if (get.type2(Evt.card) != 'trick')\r\n                                return false;\r\n                            if ((_b = (_a = player.storage) === null || _a === void 0 ? void 0 : _a.tianyi_drawBy) === null || _b === void 0 ? void 0 : _b.includes(get.suit(Evt.card)))\r\n                                return false;\r\n                            return player.$.tianyi.length && get.suit(player.$.tianyi[0]) != get.suit(Evt.card);\r\n                        },\r\n                        content() {\r\n                            player.draw();\r\n                            if (!player.$.tianyi_drawBy)\r\n                                player.$.tianyi_drawBy = [];\r\n                            player.$.tianyi_drawBy.add(get.suit(trigger.card));\r\n                        }\r\n                    },\r\n                    cancelBy: {\r\n                        trigger: { target: 'useCardToTarget' },\r\n                        priority: 77,\r\n                        lastDo: true,\r\n                        check(Evt, player) {\r\n                            return get.effect(player, Evt.card, Evt.player, player) < -1;\r\n                        },\r\n                        prompt(Evt) {\r\n                            return `被${get.$t(Evt.card)}指定为目标，${get.$pro('tianyi')}`;\r\n                        },\r\n                        filter(Evt, player) {\r\n                            if (get.type2(Evt.card) != 'trick')\r\n                                return false;\r\n                            return player.$.tianyi.length && get.suit(player.$.tianyi[0]) == get.suit(Evt.card);\r\n                        },\r\n                        content: [() => {\r\n                                player.unmarkSkill('tianyi');\r\n                            }, () => {\r\n                                trigger.getParent().cancel();\r\n                            }, () => {\r\n                                player.gain(trigger.getParent().cards, 'giveAuto');\r\n                            }]\r\n                    },\r\n                    clear: {\r\n                        trigger: { global: ['gameDrawAfter', 'phaseAfter'], player: ['enterGame', 'phaseZhunbeiBegin'] },\r\n                        direct: true,\r\n                        firstDo: true,\r\n                        content: [() => {\r\n                                if (trigger.name == 'phase') {\r\n                                    delete player.$.tianyi_drawBy;\r\n                                    Evt.finish();\r\n                                }\r\n                                else if (trigger.name == 'phaseZhunbei' && player.$.tianyi.length) {\r\n                                    Evt.moveCard = true;\r\n                                }\r\n                            }, () => {\r\n                                player.unmarkSkill('tianyi');\r\n                            }, () => {\r\n                                if (Evt.moveCard == true) {\r\n                                    player.moveCard(`###${get.$pro('tianyi')}###可以移动场上的一张牌`);\r\n                                }\r\n                            }]\r\n                    },\r\n                },\r\n                ai: { order: 4, result: { player: 1 } },\r\n            },\r\n            nveyu: {\r\n                trigger: { source: 'damageEnd' },\r\n                priority: 77,\r\n                usable: 1,\r\n                lastDo: true,\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                content: [() => {\r\n                        trigger.player.recover();\r\n                    }, () => {\r\n                        game.asyncDraw([player, trigger.player]);\r\n                    }, () => {\r\n                        player.$.nveyu_eff = trigger.player;\r\n                        player.addTempSkill('nveyu_eff');\r\n                    }],\r\n                subSkill: {\r\n                    eff: {\r\n                        mark: 'character',\r\n                        intro: {\r\n                            name: '虐语',\r\n                            content: '对$使用牌无距离与次数限制',\r\n                        },\r\n                        mod: {\r\n                            targetInRange(card, player, target) {\r\n                                if (target == player.$.nveyu_eff)\r\n                                    return true;\r\n                            },\r\n                            cardUsableTarget(card, player, target) {\r\n                                if (player.$.nveyu_eff == target)\r\n                                    return true;\r\n                            },\r\n                        },\r\n                        onremove: true,\r\n                    }\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        player(card, player, target, current) {\r\n                            if (get.tag(card, 'damage') == 1 && !target)\r\n                                console.warn(card, target);\r\n                            if (target) {\r\n                                if (get.tag(card, 'damage') == 1 && !player.hasSkill('nveyu_eff') && !target.hujia && target.hp > 1) {\r\n                                    if (target.hasSkillTag('maixie'))\r\n                                        return [1, 1, 0, 3];\r\n                                    return [1, 1, 0, 1];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            gonggan: {\r\n                trigger: { global: 'phaseBegin' },\r\n                priority: 23,\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && player.countCards('h') > 0;\r\n                },\r\n                content: [() => {\r\n                        player.chooseCard('h', get.$pro2('gonggan')).set('ai', card => {\r\n                            if (get.number(card) > 10)\r\n                                return 8 - get.value(card) + Math.random();\r\n                            if (player.countCards('h') >= 3)\r\n                                return 5 - get.value(card) + Math.random();\r\n                            if (player.countCards('h') == 1)\r\n                                return -get.value(card) + Math.random();\r\n                            return 2 - get.value(card) + Math.random();\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.logSkill('gonggan', trigger.player);\r\n                            Evt.card = result.cards[0];\r\n                            player.showHandcards('『奇癖共感』展示手牌');\r\n                            game.delay(1);\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        let suitlist = [\r\n                            ['heart', '', 'heart', 'heart', 'div2'],\r\n                            ['diamond', '', 'diamond', 'diamond', 'div2'],\r\n                            ['club', '', 'club', 'club', 'div2'],\r\n                            ['spade', '', 'spade', 'spade', 'div2']\r\n                        ];\r\n                        game.broadcastAll(function (id, suitlist) {\r\n                            let dialog = ui.create.dialog('奇癖共感 声明');\r\n                            dialog.addText('花色');\r\n                            dialog.add([suitlist, 'vcard']);\r\n                            dialog.videoId = id;\r\n                        }, Evt.videoId, suitlist);\r\n                    }, () => {\r\n                        let next = trigger.player.chooseButton(1, true);\r\n                        next.set('dialog', Evt.videoId);\r\n                        next.set('ai', function (button) {\r\n                            let num = 0;\r\n                            _status.event.cards.forEach(card => {\r\n                                if (get.suit(card) == button.link[2])\r\n                                    num++;\r\n                            });\r\n                            return num + Math.random();\r\n                        });\r\n                        next.set('cards', player.getCards('h'));\r\n                    }, () => {\r\n                        game.broadcastAll('closeDialog', Evt.videoId);\r\n                        if (result.bool) {\r\n                            player.$.gonggan = result.links[0][2];\r\n                            trigger.player.chat(get.$t(player.$.gonggan));\r\n                            game.log(trigger.player, '猜测为', player.$.gonggan);\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (player.$.gonggan == get.suit(Evt.card)) {\r\n                            trigger.player.gain(Evt.card, player, 'giveAuto');\r\n                            let suit = 'gonggan_' + get.suit(Evt.card);\r\n                            player.$.gonggan_num = get.number(Evt.card);\r\n                            player.addTempSkill(suit);\r\n                        }\r\n                        else {\r\n                            player.$.gonggan_num = 12;\r\n                        }\r\n                        lib.translate['gonggan_num_bg'] = player.$.gonggan_num;\r\n                        player.addTempSkill('gonggan_num');\r\n                    }],\r\n                subSkill: {\r\n                    heart: {\r\n                        marktext: '♥',\r\n                        mark: true,\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '奇癖共感',\r\n                            content: '手牌视为♥',\r\n                        },\r\n                        mod: {\r\n                            suit(card, suit) {\r\n                                if (suit != 'heart')\r\n                                    return 'heart';\r\n                            },\r\n                        }\r\n                    },\r\n                    spade: {\r\n                        marktext: '♠',\r\n                        mark: true,\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '奇癖共感',\r\n                            content: '手牌视为♠',\r\n                        },\r\n                        mod: {\r\n                            suit(card, suit) {\r\n                                if (suit != 'spade')\r\n                                    return 'spade';\r\n                            },\r\n                        }\r\n                    },\r\n                    diamond: {\r\n                        marktext: '♦',\r\n                        mark: true,\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '奇癖共感',\r\n                            content: '手牌视为♦',\r\n                        },\r\n                        mod: {\r\n                            suit(card, suit) {\r\n                                if (suit != 'diamond')\r\n                                    return 'diamond';\r\n                            },\r\n                        }\r\n                    },\r\n                    club: {\r\n                        marktext: '♣',\r\n                        mark: true,\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '奇癖共感',\r\n                            content: '手牌视为♣',\r\n                        },\r\n                        mod: {\r\n                            suit(card, suit) {\r\n                                if (suit != 'club')\r\n                                    return 'club';\r\n                            },\r\n                        }\r\n                    },\r\n                    num: {\r\n                        mark: true,\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '奇癖共感',\r\n                            content: '手牌视为#',\r\n                        },\r\n                        onremove: true,\r\n                        mod: {\r\n                            number(card, player, number) {\r\n                                return number = player.$.gonggan_num;\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            yeyu: {\r\n                group: ['yeyu_sha', 'yeyu_trick'],\r\n                subSkill: {\r\n                    sha: {\r\n                        trigger: { global: 'useCard2' },\r\n                        priority: 23,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            if (Evt.player == player || get.name(Evt.card) != 'sha')\r\n                                return false;\r\n                            return (get.name(Evt.card) == 'sha') && player.countDiscardableCards(player, 'he');\r\n                        },\r\n                        prompt2: '你可以弃置一张点数大于此【杀】的牌取消之',\r\n                        content: [() => {\r\n                                let next = player.chooseToDiscard('he', '弃置一张点数大于此【杀】的牌取消之');\r\n                                next.set('filterCard', function (card, player) {\r\n                                    return get.number(card, player) > _status.event.num;\r\n                                });\r\n                                next.set('num', get.number(trigger.card));\r\n                            }, () => {\r\n                                if (result.bool) {\r\n                                    player.logSkill('yeyu', trigger.player);\r\n                                    trigger.cancel();\r\n                                }\r\n                            }],\r\n                    },\r\n                    trick: {\r\n                        trigger: { global: 'useCard2' },\r\n                        priority: 23,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            var _a;\r\n                            let card = Evt.card;\r\n                            let info = get.info(card);\r\n                            if (info.allowMultiple == false)\r\n                                return false;\r\n                            if (Evt.player == player || get.type(Evt.card) != 'trick')\r\n                                return false;\r\n                            return ((_a = Evt === null || Evt === void 0 ? void 0 : Evt.targets) === null || _a === void 0 ? void 0 : _a.length) && player.countCards('h', { suit: 'club' });\r\n                        },\r\n                        prompt2: '你可以重铸一张梅花牌为之增加或减少一名目标',\r\n                        content: [() => {\r\n                                let next = player.chooseCard('he', '重铸一张梅花牌');\r\n                                next.set('filterCard', function (card, player) {\r\n                                    return get.suit(card, player) == 'club';\r\n                                });\r\n                            }, () => {\r\n                                if (result.bool) {\r\n                                    player.logSkill('yeyu');\r\n                                    player.lose(result.cards, ui.discardPile).set('visible', true);\r\n                                    player.$throw(result.cards);\r\n                                    game.log(player, '将', result.cards, '置入了弃牌堆');\r\n                                    player.draw();\r\n                                    let prompt2 = `为${get.$t(trigger.card)}增加或减少一个目标`;\r\n                                    player.chooseTarget(get.$pro('yeyu'), true, function (card, player, target) {\r\n                                        let source = _status.event.source;\r\n                                        if (_status.event.targets.includes(target))\r\n                                            return true;\r\n                                        return lib.filter.targetEnabled2(_status.event.card, source, target) && lib.filter.targetInRange(_status.event.card, source, target);\r\n                                    }).set('prompt2', prompt2).set('ai', function (target) {\r\n                                        let player = _status.event.player, source = _status.event.source;\r\n                                        return get.effect(target, _status.event.card, source, player) * (_status.event.targets.includes(target) ? -1 : 1);\r\n                                    }).set('targets', trigger.targets).set('card', trigger.card).set('source', trigger.player);\r\n                                }\r\n                                else {\r\n                                    Evt.finish();\r\n                                }\r\n                            }, () => {\r\n                                if (!Evt.isMine())\r\n                                    game.delayx();\r\n                                Evt.targets = result.targets;\r\n                            }, () => {\r\n                                if (Evt.targets) {\r\n                                    player.logSkill('yeyu', Evt.targets);\r\n                                    if (trigger.targets.includes(Evt.targets[0]))\r\n                                        trigger.targets.removeArray(Evt.targets);\r\n                                    else\r\n                                        trigger.targets.addArray(Evt.targets);\r\n                                }\r\n                            }],\r\n                    },\r\n                },\r\n            },\r\n            huawen: {\r\n                audio: 2,\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = [];\r\n                },\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h') > 0;\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    return target != player && target.countCards('h') > 0 && target.sex == 'female';\r\n                },\r\n                content: [() => {\r\n                        player.$.huawen.add(target);\r\n                        Evt.list1 = player.getCards('h');\r\n                        Evt.list2 = target.getCards('h');\r\n                        game.broadcastAll(function (id, list1, list2, player, target) {\r\n                            let dialog = ui.create.dialog('『花吻交染』交换花色、点数、种类相同的牌各一张');\r\n                            dialog.addText(`${get.$t(player)}的手牌`);\r\n                            dialog.add([list1, 'card']);\r\n                            dialog.addText(`${get.$t(target)}的手牌`);\r\n                            dialog.add([list2, 'card']);\r\n                            dialog.videoId = id;\r\n                        }, Evt.videoId, Evt.list1, Evt.list2, player, target);\r\n                        game.delay(1);\r\n                    }, () => {\r\n                        let next = player.chooseButton(true).set('target', target).set('list1', Evt.list1).set('list2', Evt.list2);\r\n                        next.set('dialog', Evt.videoId);\r\n                        next.set('selectButton', function () {\r\n                            if (ui.selected.buttons.length % 2 == 1) {\r\n                                return [ui.selected.buttons.length + 1, ui.selected.buttons.length + 1];\r\n                            }\r\n                            return [0, 6];\r\n                        });\r\n                        next.set('filterButton', function (button) {\r\n                            let now = button.link;\r\n                            let links = ui.selected.buttons.map(function (button) {\r\n                                return button.link;\r\n                            });\r\n                            return _status.event.process(links, now);\r\n                        });\r\n                        next.set('switchToAuto', function () {\r\n                            _status.event.result = 'ai';\r\n                        }).set('processAI', function () {\r\n                            let player = _status.event.player;\r\n                            let target = _status.event.target;\r\n                            let list1 = _status.event.list1.slice(0);\r\n                            let list2 = _status.event.list2.slice(0);\r\n                            let cards = list1.concat(list2);\r\n                            let links = [];\r\n                            if (get.$a(player, target) < 0) {\r\n                                let saves = list2.filter(card => ['tao', 'jiu', 'zong'].includes(get.name(card)));\r\n                                if (target.hp == 1 || player.hp == 1 || saves.length) {\r\n                                    let dones = [];\r\n                                    saves.forEach(function (save) {\r\n                                        list1.forEach(card => {\r\n                                            if (_status.event.process([save], card)) {\r\n                                                dones.add(save);\r\n                                                dones.add(card);\r\n                                            }\r\n                                        });\r\n                                    });\r\n                                    links.addArray(dones.splice(0, 2));\r\n                                }\r\n                            }\r\n                            else {\r\n                                let dones = [];\r\n                                for (let i = 0; i < list1.length; i++) {\r\n                                    let done = [list1[i]];\r\n                                    let choices = cards.slice(0).remove(list1[i]);\r\n                                    for (let j = 0; j < choices.length; j++) {\r\n                                        if (done.length == 6)\r\n                                            break;\r\n                                        if (_status.event.process(done, choices[j])) {\r\n                                            done.push(choices[j]);\r\n                                            choices.remove(choices[j]);\r\n                                            j = 0;\r\n                                        }\r\n                                    }\r\n                                    if (done.length % 2 == 1)\r\n                                        done.pop();\r\n                                    dones.push(done);\r\n                                }\r\n                                if (dones.length > 0) {\r\n                                    dones.sort(function (a, b) {\r\n                                        return b.length - a.length;\r\n                                    });\r\n                                    links.addArray(dones[0]);\r\n                                }\r\n                            }\r\n                            return {\r\n                                bool: true,\r\n                                links: links,\r\n                            };\r\n                        });\r\n                        next.set('process', function (selected, now) {\r\n                            let last = selected.slice(0);\r\n                            let over = {\r\n                                type2: 0,\r\n                                suit: 0,\r\n                                number: 0\r\n                            };\r\n                            let going = [];\r\n                            let overOne = 0;\r\n                            let pack = 0;\r\n                            if (last.length % 2 == 1) {\r\n                                pack = selected[selected.length - 1];\r\n                            }\r\n                            for (let i = 0; i < last.length; i += 2) {\r\n                                if (!last[i + 1])\r\n                                    continue;\r\n                                let go = [];\r\n                                for (let j in over) {\r\n                                    if (get[j](last[i]) == get[j](last[i + 1])) {\r\n                                        go.add(j);\r\n                                    }\r\n                                }\r\n                                if (!go.length)\r\n                                    continue;\r\n                                for (let j = 0; j < go.length; j++) {\r\n                                    going.add(go[j]);\r\n                                    over[go[j]] += (1 / go.length);\r\n                                }\r\n                            }\r\n                            let list1 = _status.event.list1;\r\n                            let list2 = _status.event.list2;\r\n                            for (let j in over) {\r\n                                overOne = Math.max(over[j] - 1, overOne);\r\n                            }\r\n                            if (!pack) {\r\n                                if (list1.includes(now)) {\r\n                                    for (let i = 0; i < list2.length; i++) {\r\n                                        for (let j in over) {\r\n                                            if (over[j] + overOne >= 1 || (going.includes(j) && going.length * 2 <= last.length))\r\n                                                continue;\r\n                                            if (get[j](list2[i]) == get[j](now)) {\r\n                                                return true;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (list2.includes(now)) {\r\n                                    for (let i = 0; i < list1.length; i++) {\r\n                                        for (let j in over) {\r\n                                            if (over[j] + overOne >= 1 || (going.includes(j) && going.length * 2 <= last.length))\r\n                                                continue;\r\n                                            if (get[j](list1[i]) == get[j](now)) {\r\n                                                return true;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (list1.includes(pack)) {\r\n                                    if (!list2.includes(now))\r\n                                        return false;\r\n                                    for (let j in over) {\r\n                                        if (over[j] + overOne >= 1 || (going.includes(j) && going.length * 2 <= last.length))\r\n                                            continue;\r\n                                        if (get[j](pack) == get[j](now)) {\r\n                                            return true;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (list2.includes(pack)) {\r\n                                    if (!list1.includes(now))\r\n                                        return false;\r\n                                    for (let j in over) {\r\n                                        if (over[j] + overOne >= 1 || (going.includes(j) && going.length * 2 <= last.length))\r\n                                            continue;\r\n                                        if (get[j](pack) == get[j](now)) {\r\n                                            return true;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            return false;\r\n                        });\r\n                    }, () => {\r\n                        game.broadcastAll('closeDialog', Evt.videoId);\r\n                        if (result.bool && result.links) {\r\n                            let cards1 = result.links.slice(0), cards2 = result.links.slice(0);\r\n                            cards1 = cards1.filter(card => Evt.list1.includes(card));\r\n                            cards2 = cards2.filter(card => Evt.list2.includes(card));\r\n                            if (cards1.length && cards2.length && cards1.length == cards2.length) {\r\n                                Evt.num = cards1.length;\r\n                                player.gain(cards2, target, 'giveAuto').set('visible', true);\r\n                                target.gain(cards1, player, 'giveAuto').set('visible', true);\r\n                                game.asyncDraw([player, target], Evt.num);\r\n                            }\r\n                            if (!Evt.num || Evt.num < 3) {\r\n                                player.loseHp();\r\n                                target.loseHp();\r\n                            }\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }],\r\n                group: 'huawen_clear',\r\n                ai: {\r\n                    order: 8.5,\r\n                    result: {\r\n                        target(player, target) {\r\n                            if (target.countCards('h') >= 3) {\r\n                                return 2;\r\n                            }\r\n                            else if (target.countCards('h') >= 1) {\r\n                                return 0;\r\n                            }\r\n                            else if (target.hp == 1) {\r\n                                return -2;\r\n                            }\r\n                            else {\r\n                                return -1;\r\n                            }\r\n                        },\r\n                        player(player, target) {\r\n                            if (player.countCards('h') >= 3) {\r\n                                return 2;\r\n                            }\r\n                            else if (player.countCards('h') >= 1) {\r\n                                return 0;\r\n                            }\r\n                            else if (player.hp == 1) {\r\n                                return -1;\r\n                            }\r\n                            else {\r\n                                return -0.5;\r\n                            }\r\n                        },\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { global: 'phaseAfter' },\r\n                        priority: 23,\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            var _a, _b;\r\n                            if ((_b = (_a = player.storage) === null || _a === void 0 ? void 0 : _a.huawen) === null || _b === void 0 ? void 0 : _b.length) {\r\n                                player.$.huawen.length = 0;\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            liaohu: {\r\n                audio: 2,\r\n                trigger: { global: 'phaseEnd' },\r\n                priority: 23,\r\n                filter(Evt, player) {\r\n                    return player.getStat('damage');\r\n                },\r\n                check(Evt, player) {\r\n                    var _a, _b;\r\n                    return get.recoverEffect((((_b = (_a = player.storage) === null || _a === void 0 ? void 0 : _a.huawen) === null || _b === void 0 ? void 0 : _b.length) ? player.$.huawen[0] : player), player, player) > 0;\r\n                },\r\n                content() {\r\n                    var _a, _b;\r\n                    if (player.getStat().skill.huawen != undefined) {\r\n                        if ((_b = (_a = player.storage) === null || _a === void 0 ? void 0 : _a.huawen) === null || _b === void 0 ? void 0 : _b.length) {\r\n                            player.$.huawen[0].recover();\r\n                        }\r\n                    }\r\n                    else {\r\n                        player.recover();\r\n                    }\r\n                },\r\n            },\r\n            huangran: {\r\n                trigger: { player: 'damageBegin4' },\r\n                priority: 99,\r\n                filter(Evt, player) {\r\n                    return Evt.num >= 2 && Evt.nature == 'fire' && game.hasPlayer(cur => {\r\n                        return cur != player && get.$dis(player, cur) <= 1;\r\n                    });\r\n                },\r\n                content: [() => {\r\n                        player.chooseTarget('###『煌燃』###选择一名角色与自己平摊伤害', function (card, player, target) {\r\n                            return target != player && get.$dis(player, target) <= 1;\r\n                        }).set('ai', function (target) {\r\n                            return 1 - get.$a(player, target) + Math.random();\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            if (trigger.num % 2 == 0) {\r\n                                trigger.num /= 2;\r\n                                result.targets[0].damage(trigger.num, trigger.source, 'fire');\r\n                                Evt.finish();\r\n                            }\r\n                            else {\r\n                                trigger.num--;\r\n                                trigger.num /= 2;\r\n                                result.targets[0].damage(trigger.num, trigger.source, 'fire');\r\n                                player.chooseTarget(true, '###『煌燃』###分配多余的一点伤害').set('ai', function (target) {\r\n                                    return 1 - get.$a(player, target) < 0 + Math.random();\r\n                                });\r\n                            }\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            result.targets[0].damage(1, trigger.source, 'fire');\r\n                        }\r\n                    }],\r\n                group: 'huangran_drawBy',\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: { global: 'damageEnd' },\r\n                        priority: 99,\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            if (Evt.player.hasSkill('huangran_shao'))\r\n                                return false;\r\n                            return Evt.nature == 'fire' && Evt.getParent().name == 'huangran';\r\n                        },\r\n                        content() {\r\n                            player.draw();\r\n                            trigger.player.addTempSkill('huangran_shao', 'huangranAfter');\r\n                        },\r\n                    },\r\n                    shao: {},\r\n                }\r\n            },\r\n            yinzhen: {\r\n                group: ['yinzhen_fire', 'yinzhen_includes', 'yinzhen_getC'],\r\n                subSkill: {\r\n                    fire: {\r\n                        trigger: { global: 'damageBegin1' },\r\n                        priority: 999,\r\n                        usable: 1,\r\n                        forced: true,\r\n                        content() {\r\n                            trigger.nature = 'fire';\r\n                        },\r\n                    },\r\n                    includes: {\r\n                        init(player, skill) {\r\n                            if (!player.$[skill])\r\n                                player.$[skill] = [];\r\n                        },\r\n                        trigger: { global: 'phaseBefore' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            player.$.yinzhen_includes.length = 0;\r\n                            game.hasPlayer(cur => {\r\n                                if (cur != player) {\r\n                                    player.$.yinzhen_includes.push(cur);\r\n                                    player.$.yinzhen_includes.push(get.$dis(cur, player));\r\n                                }\r\n                            });\r\n                        },\r\n                    },\r\n                    getC: {\r\n                        trigger: { global: 'phaseAfter' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            for (let i = 0; i < (player.$.yinzhen_includes.length); i += 2) {\r\n                                if (get.$dis(player.$.yinzhen_includes[i], player) < player.$.yinzhen_includes[i + 1]) {\r\n                                    player.logSkill('yinzhen', player.$.yinzhen_includes[i]);\r\n                                    player.gainPlayerCard('h', player.$.yinzhen_includes[i], true).set('visible', true);\r\n                                }\r\n                            }\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            senhu: {\r\n                group: 'senhu_tengjia2',\r\n                locked: true,\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target) {\r\n                            if (player == target && get.subtype(card) == 'equip2') {\r\n                                if (get.equipValue(card) <= 7.5)\r\n                                    return 0;\r\n                            }\r\n                            if (!target.isEmpty(2))\r\n                                return;\r\n                            return lib.skill.bagua_skill.ai.effect.target.apply(this, arguments);\r\n                        }\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    tengjia1: {\r\n                        equipSkill: true,\r\n                        noHidden: true,\r\n                        inherit: 'tengjia1',\r\n                        filter(Evt, player) {\r\n                            if (!player.isEmpty(2))\r\n                                return false;\r\n                            return true;\r\n                        },\r\n                    },\r\n                    tengjia2: {\r\n                        equipSkill: true,\r\n                        noHidden: true,\r\n                        inherit: 'tengjia2',\r\n                        filter(Evt, player) {\r\n                            if (!player.isEmpty(2))\r\n                                return false;\r\n                            return Evt.nature == 'fire';\r\n                        },\r\n                    },\r\n                    tengjia3: {\r\n                        equipSkill: true,\r\n                        noHidden: true,\r\n                        inherit: 'tengjia3',\r\n                        filter(Evt, player) {\r\n                            if (!player.isEmpty(2))\r\n                                return false;\r\n                            return true;\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            tiaolian: {\r\n                trigger: { player: 'useCardToPlayer', target: 'useCardToTarget' },\r\n                usable: 1,\r\n                clickChange: '休眠',\r\n                clickable(player) {\r\n                    if (player.$.tiaolian_clickChange === undefined)\r\n                        player.$.tiaolian_clickChange = false;\r\n                    else\r\n                        player.$.tiaolian_clickChange = !player.$.tiaolian_clickChange;\r\n                },\r\n                clickableFilter(player) {\r\n                    return player.$.tiaolian_clickChange !== false;\r\n                },\r\n                filter(Evt, player) {\r\n                    if (player.$.tiaolian_clickChange === false)\r\n                        return false;\r\n                    if (Evt.player == player && !Evt.targets.filter(cur => {\r\n                        return player.canCompare(cur);\r\n                    }).length)\r\n                        return false;\r\n                    if (Evt.player != player && !player.canCompare(Evt.player))\r\n                        return false;\r\n                    return player.countCards('h') > 0;\r\n                },\r\n                check(Evt, player) {\r\n                    if (Evt.player == player && Evt.targets.filter(cur => {\r\n                        return player.canCompare(cur) && get.$a(player, cur) < 1;\r\n                    }))\r\n                        return 1;\r\n                    if (Evt.player != player)\r\n                        return get.$a(player, Evt.player) < 1;\r\n                },\r\n                content: [() => {\r\n                        if (trigger.targets.includes(player) && trigger.player != player) {\r\n                            player.chooseToCompare(trigger.player);\r\n                        }\r\n                    }, () => {\r\n                        if (trigger.targets.includes(player) && trigger.player != player) {\r\n                            if (result.bool) {\r\n                                trigger.getParent().targets.remove(player);\r\n                                game.log(trigger.card, '不会对', player, '生效');\r\n                                if (trigger.getParent().targets.length == 0)\r\n                                    trigger.getParent().cancel();\r\n                            }\r\n                            else {\r\n                                trigger.getParent().directHit.add(player);\r\n                                game.log(player, '不能响应', trigger.getParent().card);\r\n                            }\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        Evt.targets = trigger.targets;\r\n                        let next = player.chooseTarget('###『咆咲』###选择拼点的对象', true);\r\n                        next.set('filterTarget', function (card, player, target) {\r\n                            return player.canCompare(target) && _status.event.targets.includes(target);\r\n                        });\r\n                        next.set('ai', function (target) {\r\n                            return 7 - get.$a2(target);\r\n                        });\r\n                        next.set('selectTarget', [1, Infinity]);\r\n                        next.set('multitarget', true);\r\n                        next.set('multiline', true);\r\n                        next.set('targets', Evt.targets);\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            player.chooseToCompare(result.targets).callback = lib.skill.tiaolian.callback;\r\n                        }\r\n                    }],\r\n                callback() {\r\n                    if (Evt.num1 <= Evt.num2) {\r\n                        Evt.getParent().getTrigger().excluded.add(target);\r\n                        game.log(Evt.getParent().getTrigger().card, '不会对', target, '生效');\r\n                        game.delay();\r\n                    }\r\n                    else {\r\n                        Evt.getParent().getTrigger().directHit.add(target);\r\n                        game.log(target, '不能响应', Evt.getParent().getTrigger().card);\r\n                        game.delay();\r\n                    }\r\n                },\r\n            },\r\n            jiaku: {\r\n                trigger: { player: ['chooseToCompareAfter', 'compareMultipleAfter'], target: ['chooseToCompareAfter', 'compareMultipleAfter'] },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return !Evt.iwhile;\r\n                },\r\n                content() {\r\n                    if (player == trigger.player) {\r\n                        if (trigger.num1 > trigger.num2) {\r\n                            player.gainPlayerCard('###『生笹』###获得对方的一张牌', trigger.target, true);\r\n                        }\r\n                        else {\r\n                            player.draw();\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (trigger.num2 > trigger.num1) {\r\n                            player.gainPlayerCard('###『生笹』###获得对方的一张牌', trigger.player, true);\r\n                        }\r\n                        else {\r\n                            player.draw();\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            shencha: {\r\n                trigger: { player: 'phaseZhunbeiBegin' },\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                check(Evt, player) {\r\n                    return player.countCards('j') > 0;\r\n                },\r\n                content: [() => {\r\n                        Evt.num = 3 + player.countCards('j');\r\n                        Evt.getE = (player.countCards('e') == 0);\r\n                    }, () => {\r\n                        Evt.cards = get.cards(Evt.num);\r\n                    }, () => {\r\n                        let prompt2 = '获得其中至多两张基础牌';\r\n                        let selectButton = [0, 2];\r\n                        if (Evt.getE) {\r\n                            prompt2 += ',装备其中至多两张装备牌';\r\n                            selectButton[1] += 2;\r\n                        }\r\n                        let next = player.chooseCardButton(Evt.cards, '###『审查』###' + prompt2);\r\n                        next.set('selectButton', selectButton);\r\n                        next.set('filterButton', function (button) {\r\n                            let type = get.type2(button.link);\r\n                            let geting = [0, 0];\r\n                            for (let i = 0; i < ui.selected.buttons.length; i++) {\r\n                                if (get.type2(ui.selected.buttons[i].link) == 'basic')\r\n                                    geting[0]++;\r\n                                if (get.type2(ui.selected.buttons[i].link) == 'equip')\r\n                                    geting[1]++;\r\n                            }\r\n                            return (type == 'basic' && geting[0] < 2) || (_status.event.getE && type == 'equip' && geting[1] < 2);\r\n                        });\r\n                        next.set('getE', Evt.getE);\r\n                        next.set('ai', function (button) {\r\n                            return get.value(button.link, _status.event.player) + Math.random();\r\n                        });\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            let cards = result.links.slice(0);\r\n                            Evt.cards.removeArray(cards);\r\n                            let basics = cards.filter(card => get.type(card) == 'basic');\r\n                            let equips = cards.filter(card => get.type(card) == 'equip');\r\n                            player.gain(basics, 'gain2');\r\n                            equips.forEach(function (equip) {\r\n                                player.equip(equip);\r\n                            });\r\n                        }\r\n                    }, () => {\r\n                        player.skip('phaseDraw');\r\n                        if (Evt.cards.length == 0)\r\n                            Evt.finish();\r\n                        if (Evt.cards.length == 1)\r\n                            Evt.goto(7);\r\n                    }, () => {\r\n                        player.chooseCardButton('###『权力审查』###请选择置于牌堆底的顺序（先选择的在下）', Evt.cards, Evt.cards.length, true);\r\n                    }, () => {\r\n                        Evt.cards = result.links.slice(0);\r\n                    }, () => {\r\n                        let cards = Evt.cards;\r\n                        game.log(player, `将${get.cnNumber(cards.length)}张牌置于牌堆底`);\r\n                        while (cards.length) {\r\n                            ui.cardPile.appendChild(cards.pop().fix());\r\n                        }\r\n                        game.updateRoundNumber();\r\n                    }],\r\n            },\r\n            helesta: {\r\n                audio: 'yubing',\r\n                trigger: { player: 'damageBegin3' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return Evt.num && player.countDiscardableCards(player, 'e');\r\n                },\r\n                content: [() => {\r\n                        player.discardPlayerCard(`###${get.$pro('helesta')}###可以弃置装备区的一张牌使伤害-1`, player, 'e').set('ai', function () {\r\n                            if (player.isDamaged() || player.countCards('e') == 1)\r\n                                return 5 + Math.random();\r\n                            return Math.random() - 0.2;\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            trigger.num--;\r\n                        }\r\n                        ;\r\n                    }],\r\n                ai: {\r\n                    noe: true,\r\n                    reverseEquip: true,\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (get.type(card) == 'equip' && !get.cardtag(card, 'gifts'))\r\n                                return [1, 3];\r\n                        }\r\n                    }\r\n                },\r\n                group: 'helesta_iceshaBy',\r\n                subSkill: {\r\n                    iceshaBy: {\r\n                        trigger: {\r\n                            player: 'loseAfter',\r\n                            global: ['equipAfter', 'addJudgeAfter', 'gainAfter'],\r\n                        },\r\n                        filter(Evt, player) {\r\n                            var _a;\r\n                            let evt = Evt.getl(player);\r\n                            return ((_a = evt === null || evt === void 0 ? void 0 : evt.es) === null || _a === void 0 ? void 0 : _a.length) > 0 && player.hasUseTarget({ name: 'sha', nature: 'ice', isCard: true });\r\n                        },\r\n                        direct: true,\r\n                        content: [() => {\r\n                                player.chooseUseTarget(`###${get.$pro('helesta')}###视为使用一张冰【杀】并摸一张牌`, { name: 'sha', nature: 'ice', isCard: true }, false);\r\n                            }, () => {\r\n                                var _a;\r\n                                if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                                    player.logSkill('helesta');\r\n                                    player.draw();\r\n                                }\r\n                            }],\r\n                    }\r\n                },\r\n            },\r\n            chuangzuo: {},\r\n            zhongli: {\r\n                audio: 3,\r\n                audioname: ['jike'],\r\n                mark: true,\r\n                intro: {\r\n                    name: '本回合因『重力牵引』获得的牌',\r\n                    content: 'cards',\r\n                    onunmark(storage, player) {\r\n                        if (storage && storage.length) {\r\n                            storage.length = 0;\r\n                        }\r\n                    },\r\n                },\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = [];\r\n                },\r\n                trigger: { player: 'phaseUseAfter' },\r\n                priority: 99,\r\n                lastDo: true,\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                content: [() => {\r\n                        let func = function (result) {\r\n                            if (get.type(result) == 'equip')\r\n                                return 2;\r\n                            return 0;\r\n                        };\r\n                        player.judge(func).callback = lib.skill.zhongli.callback;\r\n                    }, () => {\r\n                        if (result.judge > 0) {\r\n                            if (!Evt.cards)\r\n                                Evt.cards = [];\r\n                            Evt.cards.add(result.card);\r\n                            Evt.goto(0);\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.cards && Evt.cards.length) {\r\n                            for (let i = 0; i < Evt.cards.length; i++) {\r\n                                if (!player.$.zhongli.includes(Evt.cards[i])) {\r\n                                    Evt.newPhaseUse = true;\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.newPhaseUse) {\r\n                            player.markAuto('zhongli', Evt.cards);\r\n                            if (player.maxHp > 1)\r\n                                player.loseMaxHp();\r\n                            player.phaseUse();\r\n                        }\r\n                    }, () => {\r\n                        let stat = player.getStat();\r\n                        for (let i in stat.skill) {\r\n                            let bool = false;\r\n                            let info = lib.skill[i];\r\n                            if (info.enable != undefined) {\r\n                                if (typeof info.enable == 'string' && info.enable == 'phaseUse')\r\n                                    bool = true;\r\n                                else if (typeof info.enable == 'object' && info.enable.includes('phaseUse'))\r\n                                    bool = true;\r\n                            }\r\n                            if (bool)\r\n                                stat.skill[i] = 0;\r\n                        }\r\n                    }],\r\n                callback() {\r\n                    if (get.type(Evt.judgeResult.name) == 'equip') {\r\n                        player.gain(card, 'gain2');\r\n                    }\r\n                },\r\n                group: 'zhongli_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { global: 'gameDrawAfter', player: ['enterGame', 'phaseAfter'] },\r\n                        direct: true,\r\n                        lastDo: true,\r\n                        priority: 666,\r\n                        content() {\r\n                            player.unmarkSkill('zhongli');\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            xinhuo: {\r\n                audio: 2,\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') >= 2;\r\n                },\r\n                filterCard: true,\r\n                position: 'he',\r\n                selectCard: 2,\r\n                check(card) {\r\n                    let player = _status.event.player;\r\n                    if (get.type(card) == 'equip') {\r\n                        if (typeof get.info(card).onLose == 'function')\r\n                            return 9 + Math.random();\r\n                        else\r\n                            return 7 + Math.random();\r\n                    }\r\n                    if (get.name(card) == 'sha' && player.countCards('h', { name: 'sha' }) == 1)\r\n                        return 0;\r\n                    return 7 - get.value(card) / 2;\r\n                },\r\n                discard: false,\r\n                toStorage: true,\r\n                content: [() => {\r\n                        let next = player.chooseCardButton('###『薪火相传』###按顺序将卡牌置于牌堆顶（先选择的在上）', cards, 2, true);\r\n                        next.set('forceAuto', function () {\r\n                            return ui.selected.buttons.length == 2;\r\n                        });\r\n                        next.set('ai', function (button) {\r\n                            if (get.type(button.link) == 'equip') {\r\n                                if (typeof get.info(button.link).onLose == 'function')\r\n                                    return 10 + Math.random();\r\n                                else\r\n                                    return 7 + Math.random();\r\n                            }\r\n                            if (get.name(button.link) == 'sha' && player.countCards('h', { name: 'sha' }) == 1)\r\n                                return 0;\r\n                            return 7 - get.value(button.link) / 2 + Math.random();\r\n                        });\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length))\r\n                            cards = result.links.slice(0);\r\n                    }, () => {\r\n                        game.log(Evt.target, `将${get.cnNumber(cards.length)}张牌放在牌堆顶`);\r\n                        while (cards.length > 0) {\r\n                            ui.cardPile.insertBefore(cards.pop().fix(), ui.cardPile.firstChild);\r\n                        }\r\n                        game.updateRoundNumber();\r\n                    }, () => {\r\n                        if (player.hasSkill('xinhuo_chuanhuo')) {\r\n                            player.$.xinhuo_chuanhuo++;\r\n                            player.updateMarks();\r\n                        }\r\n                        else {\r\n                            player.addTempSkill('xinhuo_chuanhuo');\r\n                            player.$.xinhuo_chuanhuo = 1;\r\n                            let buff = '.player_buff';\r\n                            game.broadcastAll(function (player, buff) {\r\n                                player.node.xinhuo = ui.create.div(buff, player.node.avatar);\r\n                            }, player, buff);\r\n                        }\r\n                    }],\r\n                mod: {\r\n                    aiOrder(player, card, num) {\r\n                        if (typeof card == 'object' && player == _status.currentPhase && get.type2(card) == 'trick' && get.info(card).notarget !== true && !player.needsToDiscard()) {\r\n                            let evt = player.getStat().card;\r\n                            for (let i in evt) {\r\n                                if (evt[i] && get.type2(evt[i]) == 'trick') {\r\n                                    return num - 7;\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                ai: {\r\n                    order(item, player) {\r\n                        let cards = Object.entries(player.getStat().card);\r\n                        for (let i = 0; i < cards.length; i++) {\r\n                            if (get.type(cards[i][0]) == 'basic') {\r\n                                if (player.hasSha() && player.countCards('he') >= 3 && (!player.$.xinhuo_chuanhuo || player.$.xinhuo_chuanhuo < 2)) {\r\n                                    return 7.1;\r\n                                }\r\n                            }\r\n                        }\r\n                        return 0;\r\n                    },\r\n                    result: { player: 1 },\r\n                },\r\n                subSkill: {\r\n                    chuanhuo: {\r\n                        audio: 3,\r\n                        trigger: { player: 'useCard' },\r\n                        forced: true,\r\n                        onremove(player) {\r\n                            if (player.node.xinhuo) {\r\n                                player.node.xinhuo.delete();\r\n                                delete player.node.xinhuo;\r\n                            }\r\n                            player.unmarkSkill('xinhuo_chuanhuo');\r\n                            delete player.$.xinhuo_chuanhuo;\r\n                        },\r\n                        mod: {\r\n                            selectTarget(card, player, range) {\r\n                                if (range[1] == -1)\r\n                                    return;\r\n                                range[1] += player.$.xinhuo_chuanhuo;\r\n                            },\r\n                            cardUsable(card, player, num) {\r\n                                return true;\r\n                            },\r\n                            targetInRange(card, player, target, now) {\r\n                                return true;\r\n                            },\r\n                        },\r\n                        content() {\r\n                            player.removeSkill('xinhuo_chuanhuo');\r\n                        },\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '下一张使用的牌无距离和次数限制且可额外指定$名目标',\r\n                            markcount(storage, player) {\r\n                                return player.$.xinhuo_chuanhuo;\r\n                            }\r\n                        },\r\n                        ai: {\r\n                            useSha: 1,\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            weizhuang: {\r\n                audio: 2,\r\n                trigger: { player: 'useCardAfter' },\r\n                locked: true,\r\n                direct: true,\r\n                lastDo: true,\r\n                filter(Evt, player) {\r\n                    return (get.type2(Evt.card) == 'trick' || get.type2(Evt.card) == 'basic') && Evt.targets.length > 0;\r\n                },\r\n                content: [() => {\r\n                        if (!player.hasMark('weizhuang')) {\r\n                            player.markSkill('weizhuang');\r\n                        }\r\n                    }, () => {\r\n                        if (get.type2(trigger.card) == 'basic' && player.getHistory('useCard', evt => {\r\n                            return get.type2(evt.card) == 'basic';\r\n                        }).length > 1) {\r\n                            player.logSkill('weizhuang');\r\n                            player.draw(trigger.targets.length);\r\n                        }\r\n                        else if (get.type2(trigger.card) == 'trick' && player.getHistory('useCard', evt => {\r\n                            return get.type2(evt.card) == 'trick';\r\n                        }).length > 1) {\r\n                            player.logSkill('weizhuang_discard');\r\n                            player.chooseToDiscard(trigger.targets.length, 'he', true);\r\n                        }\r\n                    }],\r\n                mark: true,\r\n                intro: {\r\n                    content: '使用基本牌/锦囊牌指定目标时，摸/弃X张牌（X为此牌指定的目标数）',\r\n                },\r\n                group: ['weizhuang_clear'],\r\n                subSkill: {\r\n                    discard: {},\r\n                    clear: {\r\n                        trigger: { global: 'gameDrawAfter', player: ['enterGame', 'phaseAfter'] },\r\n                        direct: true,\r\n                        firstDo: true,\r\n                        priority: 666,\r\n                        content() {\r\n                            player.unmarkSkill('weizhuang');\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            liebo: {\r\n                trigger: { player: 'useCardBefore' },\r\n                filter(Evt, player) {\r\n                    return get.color(Evt.card, player) == 'black';\r\n                },\r\n                priority: 12,\r\n                forced: true,\r\n                content() {\r\n                    if (!trigger.directHit)\r\n                        trigger.directHit = [];\r\n                    trigger.directHit.addArray(game.players);\r\n                },\r\n                ai: {\r\n                    threaten: 1.5,\r\n                    effect: {\r\n                        player(card, player, target, current) {\r\n                            if (get.color(card) == 'black' && get.tag(card, 'damage')) {\r\n                                if (player.countDiscardableCards(target, 'e'))\r\n                                    return [1, -0.5, 1, -1];\r\n                                return [1, 1, 1, -1];\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                group: 'liebo_drawBy',\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: { source: 'damage' },\r\n                        filter(Evt, player) {\r\n                            let evt = Evt.getParent();\r\n                            if (evt.name == '_lianhuan')\r\n                                evt = Evt.getTrigger().getParent(2);\r\n                            else\r\n                                evt = evt.getParent();\r\n                            if (evt.addedSkill && evt.addedSkill.includes('liebo'))\r\n                                return false;\r\n                            return get.color(Evt.card, player) == 'black';\r\n                        },\r\n                        priority: 12,\r\n                        forced: true,\r\n                        logTarget: 'player',\r\n                        content: [() => {\r\n                                let evt = trigger.getParent();\r\n                                if (evt.name == '_lianhuan')\r\n                                    evt = trigger.getTrigger().getParent(2);\r\n                                else\r\n                                    evt = evt.getParent();\r\n                                evt.addedSkill || (evt.addedSkill = []);\r\n                                evt.addedSkill.add('liebo');\r\n                                player.draw();\r\n                            }, () => {\r\n                                if (player.countCards('e')) {\r\n                                    Evt.target = trigger.player;\r\n                                    Evt.target.discardPlayerCard('e', player, true);\r\n                                }\r\n                            }],\r\n                    },\r\n                },\r\n            },\r\n            zhongjizhimeng: {\r\n                audio: true,\r\n                audioname: ['jike'],\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filterCard: true,\r\n                position: 'he',\r\n                check(card) {\r\n                    return 8 - get.value(card);\r\n                },\r\n                content: [() => {\r\n                        let next = player.chooseCard('h', true, '『重机织梦』：展示一张手牌');\r\n                        next.set('ai', card => {\r\n                            let player = _status.event.player;\r\n                            if (get.suit(card) == 'red' && player.hasUseTarget(card))\r\n                                return 5 + get.order(card);\r\n                            if (player.hasUseTarget(card))\r\n                                return 2 + get.order(card);\r\n                            return 6 - get.value(card);\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.cards = result.cards;\r\n                            player.showCards(Evt.cards, '『重机织梦』展示手牌');\r\n                            player.addGaintag(Evt.cards, 'zhongjizhimeng');\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }],\r\n                mod: {\r\n                    color(card, player, color) {\r\n                        if (!card.cards || card.cards.length != 1)\r\n                            return;\r\n                        for (let i of card.cards) {\r\n                            if (i.hasGaintag('zhongjizhimeng')) {\r\n                                if (color == 'red')\r\n                                    return 'black';\r\n                                else if (color == 'black')\r\n                                    return 'red';\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                ai: {\r\n                    order: 10,\r\n                    player(player, target) {\r\n                        if (player.countCards('h') >= 2) {\r\n                            return 2;\r\n                        }\r\n                        else\r\n                            return 0;\r\n                    },\r\n                },\r\n                group: ['zhongjizhimeng_lose'],\r\n                subSkill: {\r\n                    lose: {\r\n                        trigger: { player: 'loseAfter' },\r\n                        filter(Evt, player) {\r\n                            for (let i in Evt.gaintag_map) {\r\n                                if (Evt.gaintag_map[i].includes('zhongjizhimeng'))\r\n                                    return true;\r\n                            }\r\n                        },\r\n                        direct: true,\r\n                        content: [() => {\r\n                                player.chooseTarget(`###${get.$pro('zhongjizhimeng')}###令一名角色回复1点体力或摸两张牌`).set('ai', function (target) {\r\n                                    return get.$a(_status.event.player, target);\r\n                                });\r\n                            }, () => {\r\n                                if (result.bool) {\r\n                                    Evt.target = result.targets[0];\r\n                                    Evt.target.classList.add('glow');\r\n                                }\r\n                                else {\r\n                                    Evt.finish();\r\n                                }\r\n                            }, () => {\r\n                                let controls = ['摸两张牌', '回复一点体力', '取消选择'];\r\n                                player.chooseControl(controls).set('ai', function () {\r\n                                    return _status.event.index;\r\n                                }).set('index', 0);\r\n                            }, () => {\r\n                                Evt.target.classList.remove('glow');\r\n                                switch (result.index) {\r\n                                    case 0: {\r\n                                        player.logSkill('zhongjizhimeng', Evt.target);\r\n                                        Evt.target.draw(2);\r\n                                        break;\r\n                                    }\r\n                                    case 1: {\r\n                                        player.logSkill('zhongjizhimeng', Evt.target);\r\n                                        Evt.target.recover(player);\r\n                                        break;\r\n                                    }\r\n                                    case 2: {\r\n                                        Evt.goto(0);\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }]\r\n                    }\r\n                },\r\n            },\r\n            miaomiao: {\r\n                trigger: { source: 'damageBegin3' },\r\n                priority: 3,\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return Evt.num == 1;\r\n                },\r\n                content: [() => {\r\n                        let check = 1;\r\n                        check -= get.recoverEffect(trigger.player, player, player);\r\n                        player.chooseTarget('『流泪喵喵』：令目标摸两张牌（取消则改本次伤害为回复）', function (card, player, target) {\r\n                            return target == _status.event.target0;\r\n                        }).set('ai', function (target) {\r\n                            if (_status.event.check > 0)\r\n                                return 0;\r\n                            return 1;\r\n                        }).set('check', check).set('target0', trigger.player);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            result.targets[0].draw(2);\r\n                            Evt.goto(3);\r\n                        }\r\n                        else {\r\n                            trigger.cancel(true);\r\n                        }\r\n                    }, () => {\r\n                        trigger.player.recover(player);\r\n                    }, () => {\r\n                        if (player.hasSkill('chengneng_used')) {\r\n                            player.draw();\r\n                        }\r\n                    }],\r\n                mod: {\r\n                    aiOrder(player, card, num) {\r\n                        if (typeof card == 'object' && player == _status.currentPhase && !player.needsToDiscard()) {\r\n                            return num - 10;\r\n                        }\r\n                    },\r\n                },\r\n                ai: {\r\n                    notricksource: true,\r\n                    effect: {\r\n                        player(card, player, target, current) {\r\n                            if (get.tag(card, 'damage') == 1) {\r\n                                let num = get.recoverEffect(target, player, player);\r\n                                return [0, num, 0, num];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            chengneng: {\r\n                trigger: { global: 'damageBegin3' },\r\n                priority: 3,\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return Evt.num && Evt.player != player && player.countDiscardableCards(player, 'he');\r\n                },\r\n                check(Evt, player) {\r\n                    if (Evt.num == 1)\r\n                        return get.recoverEffect(Evt.player, player, player);\r\n                    return 0;\r\n                },\r\n                content: [() => {\r\n                        player.chooseToDiscard(get.$pro2('chengneng'), 'he');\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.addTempSkill('chengneng_used');\r\n                            if (trigger.source == player)\r\n                                Evt.goto(3);\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        trigger.source = player;\r\n                        Evt.finish();\r\n                    }, () => {\r\n                        trigger.cancel();\r\n                    }, () => {\r\n                        trigger.player.loseHp(trigger.num);\r\n                    }],\r\n                subSkill: {\r\n                    used: {\r\n                        mark: true,\r\n                        marktext: \"龙\",\r\n                        intro: {\r\n                            name: '逞能龙息',\r\n                            content: '本回合已发动『逞能龙息』',\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            shenglang: {\r\n                enable: 'phaseUse',\r\n                viewAs: { name: 'juedou' },\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.hasCard(card => get.name(card) == 'sha');\r\n                },\r\n                filterCard(card, player) {\r\n                    return get.name(card) == 'sha';\r\n                },\r\n                check(card) {\r\n                    return 8 - get.value(card);\r\n                },\r\n                ai: {\r\n                    basic: {\r\n                        order: 10\r\n                    },\r\n                    directHit_ai: true,\r\n                    skillTagFilter(player, tag, arg) {\r\n                        if (tag == 'directHit_ai') {\r\n                            if (arg && get.name(arg.card) == 'juedou')\r\n                                return true;\r\n                            return false;\r\n                        }\r\n                    },\r\n                    result: { player: 1 },\r\n                },\r\n                group: 'shenglang_drawBy',\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: { global: 'phaseEnd' },\r\n                        priority: 7,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            let num = 0, going = 0;\r\n                            game.getGlobalHistory('cardMove', evt => {\r\n                                if (evt == Evt || (evt.name != 'lose' && evt.name != 'cardsDiscard'))\r\n                                    return false;\r\n                                if (evt.player == player)\r\n                                    going++;\r\n                                if (evt.name == 'lose' && evt.position != ui.discardPile)\r\n                                    return false;\r\n                                for (let i = 0; i < evt.cards.length; i++) {\r\n                                    let card = evt.cards[i];\r\n                                    if (get.name(card) == 'sha' && get.suit(card) == 'spade')\r\n                                        num++;\r\n                                }\r\n                            }, Evt);\r\n                            return going && num;\r\n                        },\r\n                        content() {\r\n                            let num = 0;\r\n                            game.getGlobalHistory('cardMove', evt => {\r\n                                if (evt == Evt || (evt.name != 'lose' && evt.name != 'cardsDiscard'))\r\n                                    return false;\r\n                                if (evt.name == 'lose' && evt.position != ui.discardPile)\r\n                                    return false;\r\n                                for (let i = 0; i < evt.cards.length; i++) {\r\n                                    let card = evt.cards[i];\r\n                                    if (get.name(card) == 'sha' && get.suit(card) == 'spade')\r\n                                        num++;\r\n                                }\r\n                            }, Evt);\r\n                            Evt.num = num;\r\n                            player.logSkill('shenglang');\r\n                            player.draw(Evt.num);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            nodao: {\r\n                audio: 2,\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    return !player.getEquip(1) && player.countCards('h', 'sha') > 0;\r\n                },\r\n                filterCard: { name: 'sha' },\r\n                prepare(cards, player) {\r\n                    player.$throw(cards, 1000);\r\n                    game.log(player, '将', cards, '置入了弃牌堆');\r\n                },\r\n                discard: false,\r\n                loseTo: 'discardPile',\r\n                visible: true,\r\n                delay: 0.5,\r\n                content: [() => {\r\n                        player.draw();\r\n                    }, () => {\r\n                        if (result && get.itemtype(result) == 'cards') {\r\n                            for (let i of result) {\r\n                                if (get.subtype(i) == 'equip1') {\r\n                                    Evt.card = i;\r\n                                    player.chooseBool(`『无刀之咎』：是否装备${get.$t(Evt.card)}并回复一点体力？`);\r\n                                }\r\n                            }\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.equip(Evt.card);\r\n                            player.recover();\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    basic: {\r\n                        order: 2\r\n                    },\r\n                    result: {\r\n                        player(player, target) {\r\n                            if (player.getStat().card.juedou)\r\n                                return 1;\r\n                            else\r\n                                return 0.5;\r\n                        },\r\n                    },\r\n                },\r\n                mod: {\r\n                    aiOrder(player, card, num) {\r\n                        if (get.itemtype(card) == 'card' && get.subtype(card) == 'equip1')\r\n                            return (num > 1 ? 1 : num);\r\n                    },\r\n                    aiValue(player, card, num) {\r\n                        if (get.itemtype(card) == 'card' && get.subtype(card) == 'equip1')\r\n                            return num / 10;\r\n                        if (get.itemtype(card) == 'card' && player.getStat().card.juedou && get.name(card) == 'sha')\r\n                            return num / 10;\r\n                    },\r\n                },\r\n            },\r\n            ming_echi: {},\r\n            echi: {\r\n                trigger: {\r\n                    global: \"gainAfter\",\r\n                },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    if (Evt.player == player)\r\n                        return false;\r\n                    let evt = Evt.getParent('phaseDraw');\r\n                    if (!evt || evt.name != 'phaseDraw') {\r\n                        return Evt.cards && Evt.cards.length > 0 && Evt.player.hp >= player.hp;\r\n                    }\r\n                },\r\n                content: [() => {\r\n                        Evt.tar = trigger.player;\r\n                        let check = get.$a(player, Evt.player) < 0;\r\n                        player.chooseCard(get.$pro2('echi', Evt.tar), function (card, player, target) {\r\n                            return !card.hasGaintag('ming_');\r\n                        }).set('logSkill', ['echi', Evt.tar]).set('ai', card => {\r\n                            if (!_status.event.check)\r\n                                return 0;\r\n                            if (get.type(card) == 'equip')\r\n                                return 12 - get.value(card);\r\n                            return 8 - get.value(card);\r\n                        }).set('check', check);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.cardtype = get.type2(result.cards[0]);\r\n                            player.showCards(result.cards, '『阿斥』：亮出手牌');\r\n                            player.addGaintag(result.cards, 'ming_echi');\r\n                            player.$give(result.cards, player, false);\r\n                            game.delayx();\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        let type = Evt.cardtype;\r\n                        Evt.tar.chooseToDiscard(`弃置一张为${get.$t(type)}牌的牌或失去一点体力`, function (card, player, target) {\r\n                            return get.type2(card) == _status.event.type;\r\n                        }).set('ai', card => {\r\n                            if (player.hp == 1)\r\n                                return 11 - get.value(card);\r\n                            return 6 - get.value(card);\r\n                        }).set('type', type);\r\n                    }, () => {\r\n                        if (!result.bool) {\r\n                            Evt.tar.loseHp();\r\n                        }\r\n                    }]\r\n            },\r\n            mudu: {\r\n                trigger: {\r\n                    global: ['phaseZhunbeiEnd', 'phaseJudgeEnd', 'phaseDrawEnd', 'phaseUseEnd', 'phaseDiscardEnd', 'phaseJieshuEnd']\r\n                },\r\n                filter(Evt, player) {\r\n                    if (Evt.player == player || Evt.player.countCards('he') < 2)\r\n                        return false;\r\n                    if (player.getHistory('lose', evt => {\r\n                        return evt.getParent(Evt.name) == Evt;\r\n                    }).length >= 1)\r\n                        return true;\r\n                    return false;\r\n                },\r\n                check(Evt, player) {\r\n                    return get.$a(player, Evt.player) <= 0;\r\n                },\r\n                popup: false,\r\n                content: [() => {\r\n                        Evt.tar = trigger.player;\r\n                        player.choosePlayerCard(Evt.tar, 'he', 2, `移除${get.$t(Evt.tar)}两张牌`, true).set('ai', function (button) {\r\n                            let info = get.info(button.link);\r\n                            if (info.onLose && get.position(button.link) == 'e')\r\n                                return 0;\r\n                            return get.value(button.link, player, 'raw');\r\n                        }).set('logSkill', ['mudu', Evt.tar]);\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result === null || result === void 0 ? void 0 : result.links) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            let str = 'mudu_card' + player.playerid;\r\n                            if (Evt.tar.storage[str]) {\r\n                                Evt.tar.storage[str] = Evt.tar.storage[str].concat(result.links);\r\n                            }\r\n                            else {\r\n                                Evt.tar.storage[str] = result.links.slice(0);\r\n                            }\r\n                            Evt.tar.addSkill('mudu_card');\r\n                            Evt.tar.lose(result.links, ui.special, 'toStorage');\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    card: {\r\n                        mark: true,\r\n                        trigger: {\r\n                            global: 'phaseEnd'\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return true;\r\n                        },\r\n                        forced: true,\r\n                        intro: {\r\n                            content: 'cardCount',\r\n                            onunmark(storage, player) {\r\n                                if (storage && storage.length) {\r\n                                    player.$throw(storage, 1000);\r\n                                    game.cardsDiscard(storage);\r\n                                    game.log(storage, '被置入了弃牌堆');\r\n                                    storage.length = 0;\r\n                                }\r\n                            },\r\n                        },\r\n                        content: [() => {\r\n                                let keys = Object.keys(player.storage);\r\n                                for (let i = 0; i < keys.length; i++) {\r\n                                    if (keys[i].indexOf('mudu_card') == 0)\r\n                                        keys[i] = keys[i].slice(9);\r\n                                    else\r\n                                        keys.splice(i--, 1);\r\n                                }\r\n                                Evt.keys = keys;\r\n                            }, () => {\r\n                                let key = Evt.keys.pop(), source = game.filterPlayer(cur => { return cur.playerid == key; });\r\n                                let str = 'mudu_card' + key;\r\n                                if (!source.length) {\r\n                                    player.gain(player.storage[str], 'fromStorage');\r\n                                    delete player.storage[str];\r\n                                }\r\n                                else {\r\n                                    source = source[0];\r\n                                    player.chooseButton(['选择收回的牌', player.storage[str], 'hidden'], true).set('callback', function (player, result) {\r\n                                        let cards = player.storage[str].slice(0).removeArray(result.links);\r\n                                        let source = _status.event.source;\r\n                                        player.gain(result.links);\r\n                                        if (source.isIn()) {\r\n                                            player.$give(cards, source);\r\n                                            source.gain(cards);\r\n                                        }\r\n                                        delete player.storage[str];\r\n                                    }).set('source', source);\r\n                                }\r\n                                if (Evt.keys.length > 0)\r\n                                    Evt.redo();\r\n                                else\r\n                                    player.removeSkill('mudu_card');\r\n                            }],\r\n                    },\r\n                },\r\n                ai: {\r\n                    threaten: 1.3\r\n                }\r\n            },\r\n            yingkuo: {\r\n                trigger: {\r\n                    player: ['gainAfter', 'equipAfter'],\r\n                },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'equip' && Evt.swapped)\r\n                        return false;\r\n                    return game.hasPlayer(cur => {\r\n                        if (cur == player)\r\n                            return false;\r\n                        if (Evt.name == 'equip')\r\n                            return cur.countCards('e') == player.countCards('e');\r\n                        else\r\n                            return cur.countCards('h') == player.countCards('h');\r\n                    });\r\n                },\r\n                content: [() => {\r\n                        player.chooseTarget(get.$pro2('yingkuo'), function (card, player, target) {\r\n                            if (player == target)\r\n                                return false;\r\n                            if (_status.event.type == 'equip')\r\n                                return target.countCards('e') == player.countCards('e');\r\n                            else\r\n                                return target.countCards('h') == player.countCards('h');\r\n                        }).set('ai', function (target) {\r\n                            return -get.$a2(target);\r\n                        }).set('type', trigger.name);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.tar = result.targets[0];\r\n                            player.logSkill('yingkuo', Evt.tar);\r\n                            Evt.tar.chooseToDiscard((trigger.name == 'equip' ? 'e' : 'h'), true);\r\n                        }\r\n                    }]\r\n            },\r\n            shengni: {\r\n                enable: 'chooseToUse',\r\n                viewAs(cards, player) {\r\n                    if (player.$.shengni_cardsDis) {\r\n                        let cur = player.$.shengni_cardsDis[0];\r\n                        return {\r\n                            name: get.name(cur),\r\n                            suit: get.suit(cur),\r\n                            number: get.number(cur),\r\n                            nature: get.nature(cur),\r\n                        };\r\n                    }\r\n                    return null;\r\n                },\r\n                filter(Evt, player) {\r\n                    let filter = Evt.filterCard;\r\n                    if (!player.$.shengni_cardsDis || !player.$.shengni_cardsDis.length)\r\n                        return false;\r\n                    return filter(player.$.shengni_cardsDis[0], player, Evt);\r\n                },\r\n                check(card) {\r\n                    let player = _status.event.player;\r\n                    return player.getUseValue(player.$.shengni_cardsDis[0]) > player.getUseValue(card);\r\n                },\r\n                filterCard(card, player, Evt) {\r\n                    if (player.hasSkill('shengni_used'))\r\n                        return true;\r\n                    return false;\r\n                },\r\n                selectCard() {\r\n                    let player = _status.event.player;\r\n                    if (player.hasSkill('shengni_used'))\r\n                        return 1;\r\n                    return -1;\r\n                },\r\n                precontent() {\r\n                    player.addTempSkill('shengni_used');\r\n                },\r\n                ignoreMod: true,\r\n                position: 'h',\r\n                group: ['shengni_cardsDis', 'shengni_cardsDis2'],\r\n                subSkill: {\r\n                    used: {},\r\n                    cardsDis: {\r\n                        init(player, skill) {\r\n                            if (!player.$[skill])\r\n                                player.$[skill] = [];\r\n                        },\r\n                        marktext: '拟',\r\n                        intro: {\r\n                            name: '声拟',\r\n                            content(storage, player) {\r\n                                if (!storage)\r\n                                    return '上一次进入弃牌堆的牌不满足条件';\r\n                                return '上一次进入弃牌堆的基本牌/通常锦囊牌为' + get.$t(storage);\r\n                            }\r\n                        },\r\n                        trigger: { global: ['loseAfter', 'cardsDiscardAfter'] },\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            if (Evt.name == 'cardsDiscard' && (Evt.getParent().name != 'orderingDiscard'\r\n                                || (!Evt.getParent().relatedEvent || !Evt.getParent().relatedEvent.player || Evt.getParent().relatedEvent.name == 'judge'\r\n                                    || Evt.getParent().relatedEvent.player == player)))\r\n                                return false;\r\n                            if (Evt.name == 'lose' && (Evt.position != ui.discardPile\r\n                                || Evt.player == player))\r\n                                return false;\r\n                            return Evt.cards.filter(card => get.position(card, true) == 'd'\r\n                                && ['basic', 'trick'].includes(get.type(card))).length > 0;\r\n                        },\r\n                        content() {\r\n                            let cards = trigger.cards.filter(card => get.position(card, true) == 'd' && ['basic', 'trick'].includes(get.type(card)));\r\n                            player.$.shengni_cardsDis = [cards.pop()];\r\n                            player.markSkill('shengni_cardsDis');\r\n                        },\r\n                    },\r\n                    cardsDis2: {\r\n                        init(player, skill) {\r\n                            if (!player.$[skill])\r\n                                player.$[skill] = [];\r\n                        },\r\n                        trigger: { global: ['loseAfter', 'cardsDiscardAfter'] },\r\n                        direct: true,\r\n                        firstDo: true,\r\n                        filter(Evt, player) {\r\n                            return Evt.cards.filter(card => get.position(card, true) == 'd').length > 0;\r\n                        },\r\n                        content() {\r\n                            delete player.$.shengni_cardsDis;\r\n                            player.markSkill('shengni_cardsDis');\r\n                        },\r\n                    },\r\n                },\r\n                ai: {\r\n                    threaten: 1.3\r\n                }\r\n            },\r\n            zhuqiao: {\r\n                audio: 5,\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = 0;\r\n                },\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    return player.$.zhuqiao < 24;\r\n                },\r\n                check(card, cards) {\r\n                    let player = _status.event.player;\r\n                    if (player.$.zhuqiao_addCard && player.$.zhuqiao_addCard.includes(get.suit(card)))\r\n                        return 6 - get.value(card);\r\n                    return 9 - get.value(card);\r\n                },\r\n                filterCard: true,\r\n                prepare(cards, player) {\r\n                    player.$throw(cards, 1000);\r\n                    game.log(player, '将', cards, '置入了弃牌堆');\r\n                },\r\n                position: 'he',\r\n                discard: false,\r\n                loseTo: 'discardPile',\r\n                visible: true,\r\n                delay: 0.5,\r\n                content() {\r\n                    player.draw();\r\n                    player.$.zhuqiao += get.number(cards[0]);\r\n                    if (!player.hasSkill('zhuqiao_addCard'))\r\n                        player.addTempSkill('zhuqiao_addCard');\r\n                    if (!player.$.zhuqiao_addCard)\r\n                        player.$.zhuqiao_addCard = [];\r\n                    player.$.zhuqiao_addCard.add(get.suit(cards[0]));\r\n                    player.markSkill('zhuqiao_addCard');\r\n                },\r\n                ai: {\r\n                    basic: {\r\n                        order: 1,\r\n                    },\r\n                    result: {\r\n                        player: 0.5,\r\n                    },\r\n                    threaten: 1.5\r\n                },\r\n                group: ['zhuqiao_clear'],\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { player: 'phaseAfter' },\r\n                        priority: 24,\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            player.$.zhuqiao = 0;\r\n                        },\r\n                    },\r\n                    addCard: {\r\n                        init(player, skill) {\r\n                            if (!player.$[skill])\r\n                                player.$[skill] = [];\r\n                        },\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '本回合重铸牌的花色：$',\r\n                        },\r\n                        trigger: { player: 'phaseEnd' },\r\n                        priority: 24,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            return game.countPlayer(cur => {\r\n                                return player.$.zhuqiao_addCard.length > cur.countCards('h');\r\n                            });\r\n                        },\r\n                        onremove(player) {\r\n                            delete player.$.zhuqiao_addCard;\r\n                        },\r\n                        content: [() => {\r\n                                Evt.num = player.$.zhuqiao_addCard.length;\r\n                                player.chooseTarget(`###${get.$pro('zhuqiao')}###令一名角色将手牌数补至${get.cnNumber(Evt.num)}张`, function (card, player, target) {\r\n                                    return _status.event.num > target.countCards('h');\r\n                                }).set('ai', function (target) {\r\n                                    let player = _status.event.player;\r\n                                    return (_status.event.num - target.countCards('h')) * get.$a(player, target);\r\n                                }).set('num', Evt.num);\r\n                            }, () => {\r\n                                var _a;\r\n                                if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                                    Evt.target = result.targets[0];\r\n                                    player.logSkill('zhuqiao', Evt.target);\r\n                                    Evt.target.gain(get.cards(Evt.num - Evt.target.countCards('h')), 'draw');\r\n                                }\r\n                            }],\r\n                    },\r\n                }\r\n            },\r\n            pojie: {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = 0;\r\n                },\r\n                trigger: {\r\n                    global: ['loseAfter', 'equipAfter'],\r\n                },\r\n                marktext: \"戒\",\r\n                mark: true,\r\n                intro: {\r\n                    content: '弃牌阶段改为弃置#张牌',\r\n                },\r\n                filter(Evt, player) {\r\n                    var _a;\r\n                    if (player != _status.currentPhase)\r\n                        return false;\r\n                    if (Evt.name == 'equip') {\r\n                        return true;\r\n                    }\r\n                    return (_a = Evt === null || Evt === void 0 ? void 0 : Evt.es) === null || _a === void 0 ? void 0 : _a.length;\r\n                },\r\n                content() {\r\n                    player.draw();\r\n                    player.addMark('pojie', 1, false);\r\n                },\r\n                group: 'pojie_phaseDiscard',\r\n                subSkill: {\r\n                    phaseDiscard: {\r\n                        trigger: { player: ['phaseDiscardBegin', 'phaseEnd'] },\r\n                        direct: true,\r\n                        lastDo: true,\r\n                        priority: 2,\r\n                        filter(Evt, player) {\r\n                            return player.$.pojie > 0;\r\n                        },\r\n                        content: [() => {\r\n                                if (trigger.name == 'phaseDiscard') {\r\n                                    player.logSkill('pojie');\r\n                                    if (!trigger.num)\r\n                                        trigger.num = player.$.pojie;\r\n                                }\r\n                            }, () => {\r\n                                player.$.pojie = 0;\r\n                                player.unmarkSkill('pojie');\r\n                            }],\r\n                    },\r\n                },\r\n            },\r\n            dazhen: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.getEquip(1);\r\n                },\r\n                filterCard(card, player) {\r\n                    return get.subtype(card) == 'equip1';\r\n                },\r\n                discard: false,\r\n                lose: false,\r\n                position: 'e',\r\n                filterTarget(card, player, target) {\r\n                    return target != player;\r\n                },\r\n                content: [() => {\r\n                        player.$give(cards, target, false);\r\n                        target.equip(cards[0]);\r\n                    }, () => {\r\n                        Evt.num = Math.abs(player.getHandcardLimit() - player.countCards('h'));\r\n                        target.chooseToDiscard(`『大振』：需要弃置${get.cnNumber(Evt.num)}张牌`, Evt.num, 'he', true);\r\n                    }],\r\n                ai: {\r\n                    order: 6,\r\n                    result: {\r\n                        target(player, target) {\r\n                            if (player.countCards('h') > player.getHandcardLimit()) {\r\n                                return -1;\r\n                            }\r\n                            else {\r\n                                return 0;\r\n                            }\r\n                        },\r\n                        player(player, target) {\r\n                            if (target.getEquip(1))\r\n                                return 1;\r\n                            else\r\n                                return -0.5;\r\n                        },\r\n                    },\r\n                    threaten: 1.2,\r\n                },\r\n            },\r\n            tuncai: {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = true;\r\n                },\r\n                trigger: {\r\n                    player: 'discardAfter',\r\n                    global: 'drawAfter',\r\n                },\r\n                round: 1,\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'draw')\r\n                        return Evt.player != player && player.$.tuncai;\r\n                    else\r\n                        return Evt.cards.length && !player.$.tuncai;\r\n                },\r\n                check(Evt, player) {\r\n                    if (player.$.tuncai == true)\r\n                        return Evt.num >= 2;\r\n                    return true;\r\n                },\r\n                popup: false,\r\n                content: [() => {\r\n                        if (trigger.name == 'draw') {\r\n                            player.logSkill('tuncai', player);\r\n                            player.draw(trigger.num);\r\n                            player.$.tuncai = !player.$.tuncai;\r\n                            Evt.finish();\r\n                        }\r\n                        else\r\n                            player.chooseTarget(get.$pro2('tuncai'), function (card, player, target) {\r\n                                if (player == target)\r\n                                    return false;\r\n                                return target.countCards('he');\r\n                            }).set('ai', function (target) {\r\n                                return -get.$a2(target);\r\n                            });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.tar = result.targets[0];\r\n                            player.logSkill('tuncai', Evt.tar);\r\n                            player.$.tuncai = !player.$.tuncai;\r\n                            Evt.tar.chooseToDiscard(trigger.cards.length, true, 'he');\r\n                        }\r\n                    }]\r\n            },\r\n            zhidu: {\r\n                trigger: { global: ['damageAfter', 'dying'] },\r\n                zhuSkill: true,\r\n                filter(Evt, player) {\r\n                    if (!player.hasZhuSkill('zhidu') || Evt.player.group != player.group)\r\n                        return false;\r\n                    if (Evt.name == 'damage')\r\n                        return Evt.num >= 2;\r\n                    return true;\r\n                },\r\n                content() {\r\n                    player.$.tuncai = !player.$.tuncai;\r\n                    game.delay();\r\n                    let roundname = 'tuncai_roundcount';\r\n                    if (player.hasMark(roundname)) {\r\n                        player.popup('重置');\r\n                        let next = game.createEvent('resetSkill');\r\n                        [next.player, next.resetSkill] = [player, 'tuncai'];\r\n                        next.setContent('resetRound');\r\n                    }\r\n                },\r\n                ai: {\r\n                    combo: 'tuncai',\r\n                    threaten: 1.3\r\n                }\r\n            },\r\n            huanxi: {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = true;\r\n                },\r\n                trigger: {\r\n                    player: ['phaseUseBegin', 'phaseUseEnd'],\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.countCards('h') > 0;\r\n                },\r\n                check(Evt, player) {\r\n                    let cards = player.getCards('h');\r\n                    let value = 0;\r\n                    for (let i of cards) {\r\n                        value += get.value(i);\r\n                    }\r\n                    value /= player.countCards('h');\r\n                    return (value < 6 && player.countCards('h') == player.hp) || value < 4;\r\n                },\r\n                content: [() => {\r\n                        Evt.cards = player.getCards('h');\r\n                        player.discard(Evt.cards);\r\n                    }, () => {\r\n                        player.draw(Evt.cards.length);\r\n                    }, () => {\r\n                        let names = Evt.cards.map(function (i) {\r\n                            return get.name(i);\r\n                        });\r\n                        if (!trigger.huanxi) {\r\n                            trigger.huanxi = names;\r\n                        }\r\n                        else {\r\n                            if (trigger.huanxi.length + names.length == trigger.huanxi.addArray(names).length) {\r\n                                if (player.hasSkill('celv_cardDisable')) {\r\n                                    let next = game.createEvent('resetSkill');\r\n                                    [next.player, next.resetSkill] = [player, 'celv'];\r\n                                    next.setContent(function () {\r\n                                        player.popup('重置');\r\n                                        player.removeSkill('celv_cardDisable');\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n                    }]\r\n            },\r\n            celv: {\r\n                trigger: { player: ['changeHp', 'discardAfter'] },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'changeHp')\r\n                        return Evt.num < 0;\r\n                    return Evt.cards.length == player.hp;\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        player.chooseTarget(get.$pro2('celv'), function (card, player, target) {\r\n                            if (player == target)\r\n                                return false;\r\n                            return target.countGainableCards(player, 'h');\r\n                        }).set('ai', function (target) {\r\n                            let player = _status.event.player;\r\n                            return get.effect(target, { name: 'shunshou_copy2' }, player, player);\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.tar = result.targets[0];\r\n                            player.logSkill('celv', Evt.tar);\r\n                            player.gainPlayerCard(Evt.tar, 'h', true, 'visibleMove');\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            let card = result.cards[0];\r\n                            player.showCards(card, '『册吕』获得手牌');\r\n                            if (!player.$.celv_cardDisable)\r\n                                player.$.celv_cardDisable = [];\r\n                            player.$.celv_cardDisable.add(get.name(card));\r\n                            if (!player.hasSkill('celv_cardDisable'))\r\n                                player.addSkill('celv_cardDisable');\r\n                            player.markSkill('celv_cardDisable');\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    cardDisable: {\r\n                        marktext: '吕',\r\n                        intro: {\r\n                            name: '春绿',\r\n                            content: '不能使用或打出：$'\r\n                        },\r\n                        onremove: true,\r\n                        mod: {\r\n                            cardEnabled2(card, player) {\r\n                                if (player.$.celv_cardDisable.includes(get.name(card, player)))\r\n                                    return false;\r\n                            },\r\n                        },\r\n                    }\r\n                },\r\n                ai: {\r\n                    combo: 'huanxi',\r\n                    threaten: 1.3\r\n                }\r\n            },\r\n            mianmo: {\r\n                audio: 3,\r\n                trigger: { player: 'useCard1' },\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('mianmo_used'))\r\n                        return false;\r\n                    return Evt.targets && Evt.targets.length && Evt.cards && Evt.cards.length;\r\n                },\r\n                direct: true,\r\n                firstDo: true,\r\n                priority: 4,\r\n                content: [() => {\r\n                        Evt.num = 0;\r\n                        for (let i = 0; i < trigger.cards.length; i++) {\r\n                            Evt.num += get.number(trigger.cards[i], player);\r\n                        }\r\n                        Evt.card = trigger.cards[0];\r\n                        let next = player.chooseTarget();\r\n                        next.set('prompt', get.$pro2('mianmo').replace('之点数或合计点数', Evt.num));\r\n                        next.set('filterTarget', function () {\r\n                            return true;\r\n                        });\r\n                        next.set('complexTarget', true);\r\n                        next.set('selectTarget', function () {\r\n                            let num = _status.event.num, sum = 0;\r\n                            for (let j = 0; j < ui.selected.targets.length; j++) {\r\n                                sum += ui.selected.targets[j].hp;\r\n                            }\r\n                            if (num == sum)\r\n                                return [0, ui.selected.targets.length];\r\n                            else\r\n                                return [ui.selected.targets.length + 1, ui.selected.targets.length + 1];\r\n                        });\r\n                        next.set('num', Evt.num);\r\n                        next.set('ai', function (target) {\r\n                            let trigger = _status.event.getTrigger();\r\n                            let player = _status.event.player;\r\n                            return get.effect(target, trigger.card, player, player);\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.targets = result.targets.slice(0);\r\n                            player.logSkill('mianmo', Evt.targets);\r\n                            if (player.$.tiaolv_up && player.$.tiaolv_up.includes(Evt.card))\r\n                                Evt.goto(4);\r\n                            if (player.$.tiaolv_down && player.$.tiaolv_down.includes(Evt.card))\r\n                                Evt.goto(6);\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.targets.includes(player)) {\r\n                            if (!player.canUse(Evt.card, player))\r\n                                Evt.targets.remove(player);\r\n                        }\r\n                        else {\r\n                            player.addTempSkill('mianmo_used');\r\n                        }\r\n                    }, () => {\r\n                        trigger.targets = Evt.targets;\r\n                        Evt.finish();\r\n                    }, () => {\r\n                        player.chooseBool('眠魔：是否令目标各摸一张牌？').set('ai', function () {\r\n                            let player = _status.event.player;\r\n                            if (_status.event.targets.includes(player))\r\n                                return true;\r\n                            return false;\r\n                        }).set('targets', Evt.targets);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            game.asyncDraw(Evt.targets);\r\n                        }\r\n                        Evt.goto(2);\r\n                    }, () => {\r\n                        player.chooseBool('眠魔：是否令目标横置？').set('ai', function () {\r\n                            return true;\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.targets.forEach(function (tar) {\r\n                                tar.link(true);\r\n                            });\r\n                        }\r\n                        Evt.goto(2);\r\n                    }],\r\n                subSkill: {\r\n                    used: {},\r\n                },\r\n            },\r\n            tiaolv: {\r\n                audio: 4,\r\n                trigger: { player: 'useCard1' },\r\n                filter(Evt, player) {\r\n                    return Evt.cards && Evt.cards.length == 1;\r\n                },\r\n                firstDo: true,\r\n                direct: true,\r\n                priority: 5,\r\n                content: [() => {\r\n                        player.chooseControl(['增加', '减少', 'cancel2']).set('prompt', get.$pro2('tiaolv'));\r\n                    }, () => {\r\n                        if (result.control != 'cancel2') {\r\n                            player.logSkill('tiaolv');\r\n                            switch (result.control) {\r\n                                case '增加':\r\n                                    player.$.tiaolv_up.addArray(trigger.cards);\r\n                                    break;\r\n                                case '减少':\r\n                                    player.$.tiaolv_down.addArray(trigger.cards);\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }],\r\n                group: ['tiaolv_up', 'tiaolv_down'],\r\n                subSkill: {\r\n                    up: {\r\n                        init(player, skill) {\r\n                            if (!player.$[skill])\r\n                                player.$[skill] = [];\r\n                        },\r\n                        trigger: { player: 'useCardAfter' },\r\n                        firstDo: true,\r\n                        silent: true,\r\n                        direct: true,\r\n                        priority: 5,\r\n                        content() {\r\n                            if (player.$[Evt.name].length)\r\n                                player.$[Evt.name].length = 0;\r\n                        },\r\n                        mod: {\r\n                            number(card, player, number) {\r\n                                let num = player.getDamagedHp() || 1;\r\n                                if (player.$.tiaolv_up.includes(card))\r\n                                    return number + num;\r\n                            },\r\n                        },\r\n                    },\r\n                    down: {\r\n                        init(player, skill) {\r\n                            if (!player.$[skill])\r\n                                player.$[skill] = [];\r\n                        },\r\n                        trigger: { player: 'useCardAfter' },\r\n                        firstDo: true,\r\n                        silent: true,\r\n                        direct: true,\r\n                        priority: 5,\r\n                        content() {\r\n                            if (player.$[Evt.name].length)\r\n                                player.$[Evt.name].length = 0;\r\n                        },\r\n                        mod: {\r\n                            number(card, player, number) {\r\n                                let num = player.getDamagedHp() || 1;\r\n                                if (player.$.tiaolv_down.includes(card))\r\n                                    return number - num;\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            niwei: {\r\n                marktext: '弼',\r\n                intro: {\r\n                    name: '味增弼佐',\r\n                    content(storage, player) {\r\n                        let str = '<ul style=\"padding-top:0;margin-top:0\"><p>本回合变为逆位的牌名</p>';\r\n                        for (let i = 0; i < storage.length; i++) {\r\n                            str += '<li>' + get.$t(storage[i]);\r\n                        }\r\n                        str += '</ul>';\r\n                        return str;\r\n                    },\r\n                },\r\n                onremove(player, skill) {\r\n                    player.unmarkSkill(skill);\r\n                    delete player.$[skill];\r\n                },\r\n            },\r\n            ming_niwei: {\r\n                trigger: { global: ['shaBegin', 'shanBegin', 'taoBegin', 'jiuBegin'] },\r\n                direct: true,\r\n                lastDo: true,\r\n                priority: 3,\r\n                filter(Evt, player) {\r\n                    if (Evt.player.hasSkill('niwei') && Evt.player.$.niwei && Evt.player.$.niwei.includes(Evt.name))\r\n                        return true;\r\n                    if (Evt.player != player)\r\n                        return false;\r\n                    let loser = player.getHistory('lose', evt => {\r\n                        return (evt.type == 'use' && evt.getParent().card && evt.getParent().card == Evt.card);\r\n                    });\r\n                    loser = loser[loser.length - 1];\r\n                    if (loser.getParent()) {\r\n                        if (Evt.getParent() == loser.getParent()) {\r\n                            for (let i in loser.gaintag_map) {\r\n                                if (loser.gaintag_map[i].includes('ming_niwei'))\r\n                                    return true;\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                content() {\r\n                    let fun = lib.card['niwei_' + trigger.name].content;\r\n                    if (fun)\r\n                        trigger.setContent(fun);\r\n                },\r\n                ai: {\r\n                    threaten: 0.8,\r\n                }\r\n            },\r\n            xuanxu: {\r\n                audio: 4,\r\n                global: 'xuanxu_put',\r\n                group: 'ming_niwei',\r\n                trigger: { player: 'phaseUseBegin' },\r\n                direct: true,\r\n                lastDo: true,\r\n                priority: 3,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h', card => get.type(card) == 'basic'\r\n                        && !card.hasGaintag('ming_'));\r\n                },\r\n                content: [() => {\r\n                        player.chooseCard(get.$pro2('xuanxu'), [1, Infinity], card => {\r\n                            return get.type(card) == 'basic' && !card.hasGaintag('ming_');\r\n                        }).set('ai', card => {\r\n                            return 7 - get.useful(card);\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool && result.cards && result.cards.length) {\r\n                            Evt.cards = result.cards.slice(0);\r\n                            player.showCards(Evt.cards, '『玄虚映实』亮出手牌');\r\n                            player.addGaintag(Evt.cards, 'ming_niwei');\r\n                            game.delayx();\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    put: {\r\n                        mod: {\r\n                            targetEnabled(card, player, target, now) {\r\n                                if (!card.cards)\r\n                                    return;\r\n                                for (let i of card.cards) {\r\n                                    if (!i.hasGaintag('ming_niwei'))\r\n                                        return;\r\n                                }\r\n                                if (now === false)\r\n                                    return true;\r\n                                let info = get.info(card), filter = info.filterTarget, range = info.range, outrange = info.outrange;\r\n                                if (typeof filter == 'boolean')\r\n                                    return !filter;\r\n                                if (range == undefined && outrange == undefined) {\r\n                                    if (typeof filter == 'function') {\r\n                                        return !filter(card, player, target);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    return lib.filter.targetInRange(card, player, target) || !filter(card, player, target);\r\n                                }\r\n                            },\r\n                        }\r\n                    }\r\n                },\r\n                mod: {\r\n                    playerEnabled(card, player, target, now) {\r\n                        if (!card.cards)\r\n                            return;\r\n                        for (let i of card.cards) {\r\n                            if (!i.hasGaintag('ming_niwei'))\r\n                                return;\r\n                        }\r\n                        let info = get.info(card), filter = info.filterTarget, range = info.range, outrange = info.outrange;\r\n                        if (typeof filter == 'boolean')\r\n                            return !filter;\r\n                        if (range == undefined && outrange == undefined) {\r\n                            if (typeof filter == 'function') {\r\n                                return !filter(card, player, target);\r\n                            }\r\n                        }\r\n                        else {\r\n                            return lib.filter.targetInRange(card, player, target) || !filter(card, player, target);\r\n                        }\r\n                    },\r\n                    selectTarget(card, player, range) {\r\n                        if (!card.cards)\r\n                            return;\r\n                        for (let i of card.cards) {\r\n                            if (!i.hasGaintag('ming_niwei'))\r\n                                return;\r\n                        }\r\n                        if (range[1] == -1)\r\n                            range[1] = 1;\r\n                    },\r\n                    targetInRange(card, player, target, now) {\r\n                        if (!card.cards)\r\n                            return;\r\n                        for (let i of card.cards) {\r\n                            if (!i.hasGaintag('ming_niwei'))\r\n                                return;\r\n                        }\r\n                        if (_status.niweing)\r\n                            return;\r\n                        _status.niwei = true;\r\n                        if (typeof now == 'boolean')\r\n                            return !now;\r\n                        return lib.filter.targetInRange(card, player, target);\r\n                        delete _status.niwei;\r\n                    },\r\n                    ignoredHandcard(card, player) {\r\n                        if (card.hasGaintag('ming_niwei')) {\r\n                            return true;\r\n                        }\r\n                    },\r\n                    cardDiscardable(card, player, name) {\r\n                        if (name == 'phaseDiscard' && card.hasGaintag('ming_niwei')) {\r\n                            return false;\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            weizeng: {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = [];\r\n                },\r\n                trigger: { global: 'phaseBegin' },\r\n                direct: true,\r\n                lastDo: true,\r\n                priority: 3,\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && player.countCards('h', card => get.type(card) == 'basic' && card.hasGaintag('ming_'));\r\n                },\r\n                content: [() => {\r\n                        Evt.target = trigger.player;\r\n                        player.chooseCard(get.$pro2('weizeng'), [1, Infinity], card => {\r\n                            return get.type(card) == 'basic' && card.hasGaintag('ming_');\r\n                        }).set('ai', card => {\r\n                            if (card.hasGaintag('ming_niwei') || ['shan', 'tao'].includes(get.name(card)))\r\n                                return 0;\r\n                            return Math.random() - 0.2;\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool && result.cards && result.cards.length) {\r\n                            Evt.cards = result.cards.slice(0);\r\n                            player.chooseButton(true, Evt.cards.length, ['按顺序将卡牌置于牌堆顶（先选择的在上）', Evt.cards]).set('ai', function (button) {\r\n                                let value = get.value(button.link);\r\n                                if (_status.event.reverse)\r\n                                    return value;\r\n                                return -value;\r\n                            }).set('reverse', ((_status.currentPhase) ? get.$a(player, _status.currentPhase) > 0 : false));\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            Evt.linkcards = result.links.slice(0);\r\n                            player.lose(Evt.cards, ui.special);\r\n                            Evt.target.addTempSkill('weizeng_put');\r\n                            Evt.target.addTempSkill('niwei');\r\n                            Evt.target.$.weizeng_put = [];\r\n                            Evt.target.$.weizeng_put.addArray(Evt.cards);\r\n                            game.log(player, '将', Evt.cards, '置于牌堆顶');\r\n                        }\r\n                    }, () => {\r\n                        let cards = Evt.linkcards;\r\n                        while (cards.length) {\r\n                            ui.cardPile.insertBefore(cards.pop().fix(), ui.cardPile.firstChild);\r\n                        }\r\n                        game.updateRoundNumber();\r\n                    }],\r\n                subSkill: {\r\n                    put: {\r\n                        trigger: { player: 'gainAfter' },\r\n                        direct: true,\r\n                        lastDo: true,\r\n                        priority: 3,\r\n                        filter(Evt, player) {\r\n                            if (player.$.weizeng_put && player.$.weizeng_put.length) {\r\n                                for (let i = 0; i < Evt.cards.length; i++) {\r\n                                    if (player.$.weizeng_put.includes(Evt.cards[i])) {\r\n                                        return true;\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                        content: [() => {\r\n                                Evt.cards = [];\r\n                                if (!player.$.niwei)\r\n                                    player.$.niwei = [];\r\n                                for (let i = 0; i < trigger.cards.length; i++) {\r\n                                    if (player.$.weizeng_put.includes(trigger.cards[i])) {\r\n                                        player.$.niwei.add(trigger.cards[i].name);\r\n                                        Evt.cards.includes(trigger.cards.splice(i--, 1));\r\n                                    }\r\n                                }\r\n                            }, () => {\r\n                                player.markSkill('niwei');\r\n                                player.$.weizeng_put.removeArray(Evt.cards);\r\n                            }],\r\n                        onremove: true,\r\n                    }\r\n                },\r\n            },\r\n            aswusheng: {\r\n                init(player, skill) {\r\n                    player.$[skill] = 0;\r\n                },\r\n                trigger: { player: ['useCard', 'respond'] },\r\n                direct: true,\r\n                frequent: true,\r\n                priority: 5,\r\n                filter(Evt, player) {\r\n                    return get.type(Evt.card) == 'basic' || player.$.aswusheng > 0;\r\n                },\r\n                logTarget(Evt, player) {\r\n                    if (Evt.name == 'respond')\r\n                        return Evt.source;\r\n                    if (['sha', 'qi', 'jiu', 'tao'].includes(Evt.card.name))\r\n                        return Evt.targets[0];\r\n                    if (Evt.respondTo)\r\n                        return Evt.respondTo[0];\r\n                },\r\n                mark: true,\r\n                intro: {\r\n                    content: '连续使用或打出了&张基本牌',\r\n                },\r\n                content: [() => {\r\n                        if (get.type(trigger.card) != 'basic' && player.$.aswusheng > 0) {\r\n                            player.$.aswusheng = 0;\r\n                            player.markSkill('aswusheng');\r\n                            Evt.finish();\r\n                        }\r\n                        Evt.num = player.$.aswusheng;\r\n                    }, () => {\r\n                        let goto = false;\r\n                        let logTarget = get.copy(lib.skill.aswusheng.logTarget);\r\n                        let target = logTarget(trigger, player);\r\n                        player.$.aswusheng++;\r\n                        player.markSkill('aswusheng');\r\n                        switch (Evt.num) {\r\n                            case 0:\r\n                                goto = (trigger.name == 'useCard');\r\n                                break;\r\n                            case 1:\r\n                                goto = true;\r\n                                break;\r\n                            case 2:\r\n                                goto = (target.countGainableCards(player, 'he') > 0);\r\n                                break;\r\n                            case 3:\r\n                                goto = (player.hp < player.maxHp);\r\n                                break;\r\n                            default: break;\r\n                        }\r\n                        if (goto) {\r\n                            Evt.target = target;\r\n                            let next = player.chooseBool(get.$pro2('aswusheng').replace(Evt.num, `<span class=\"yellowtext\">${Evt.num}</span>`));\r\n                            next.set('ai', function () { return 1; });\r\n                            next.set('frequentSkill', Evt.name);\r\n                        }\r\n                        else {\r\n                            Evt.finish(0);\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool || Evt.frequent) {\r\n                            player.logSkill(Evt.name, Evt.target);\r\n                            switch (Evt.num) {\r\n                                case 0:\r\n                                    {\r\n                                        if (trigger.addCount !== false) {\r\n                                            trigger.addCount = false;\r\n                                            let stat = player.getStat();\r\n                                            if (stat && stat.card && stat.card[trigger.card.name])\r\n                                                stat.card[trigger.card.name]--;\r\n                                        }\r\n                                    }\r\n                                    ;\r\n                                    break;\r\n                                case 1:\r\n                                    {\r\n                                        player.draw();\r\n                                    }\r\n                                    ;\r\n                                    break;\r\n                                case 2:\r\n                                    player.gainPlayerCard(Evt.target, 'he');\r\n                                    break;\r\n                                case 3:\r\n                                    player.recover();\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }],\r\n                mod: {\r\n                    aiOrder(player, card, num) {\r\n                        if (typeof card == 'object' && player == _status.currentPhase) {\r\n                            if (get.type(card) != 'basic') {\r\n                                if (player.$.aswusheng == 0)\r\n                                    return num - 2;\r\n                                if (player.countCards('hs', { name: 'sha' }) >= 2 && player.$.aswusheng == 1)\r\n                                    return num + 10;\r\n                            }\r\n                            else if (get.name(card) != 'sha') {\r\n                                if (player.countCards('hs', { name: 'sha' }) == 1 && player.$.aswusheng == 1)\r\n                                    return num + 6;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                ai: {\r\n                    presha: true,\r\n                    threaten(player, target) {\r\n                        if (player.countCards('hs'))\r\n                            return 0.8;\r\n                    },\r\n                    skillTagFilter(player) {\r\n                        return player.countCards('hs', { name: 'sha' }) > 1 && [0, 2].includes(player.$.aswusheng);\r\n                    }\r\n                }\r\n            },\r\n            gunxun: {\r\n                enable: 'phaseUse',\r\n                init(player, skill) {\r\n                    var _a;\r\n                    (_a = player.$)[skill] || (_a[skill] = 1);\r\n                },\r\n                filter(Evt, player) {\r\n                    if (player.$.gunxun === 1)\r\n                        return player.countCards('h', card => !card.hasGaintag('ming_') && get.color(card) == 'red');\r\n                    return player.countCards('h', card => !card.hasGaintag('ming_') && get.color(card) == 'black');\r\n                },\r\n                selectCard: [1, Infinity],\r\n                filterCard(card, player) {\r\n                    if (player.$.gunxun === 1)\r\n                        return !card.hasGaintag('ming_') && get.color(card) == 'red';\r\n                    return !card.hasGaintag('ming_') && get.color(card) == 'black';\r\n                },\r\n                check(card) {\r\n                    let player = _status.event.player;\r\n                    if (player.$.gunxun === 1 && player.countCards('hs', 'sha') < 2)\r\n                        return 6 - get.value(card);\r\n                    if (player.$.gunxun === 2 && player.countCards('hs', 'shan') > 1)\r\n                        return 2 - get.value(card);\r\n                    return 5 - get.value(card);\r\n                },\r\n                discard: false,\r\n                lose: false,\r\n                content: [() => {\r\n                        player.showCards(cards, '『棍训』亮出手牌');\r\n                        if (player.$.gunxun === 1)\r\n                            player.addGaintag(cards, 'ming_gunxunsha');\r\n                        else\r\n                            player.addGaintag(cards, 'ming_gunxunshan');\r\n                        game.delayx();\r\n                    }, () => {\r\n                        player.$.gunxun = [2, 1][player.$.gunxun - 1];\r\n                        let num = cards.length;\r\n                        if (game.hasPlayer(cur => cur.countCards('e') < num)) {\r\n                            player.chooseTarget(`『棍训』：令装备区牌数少于 ${get.cnNumber(num)} 的一名角色失去所有非锁定技直到回合结束`, function (card, player, target) {\r\n                                return target.countCards('e') < _status.event.num;\r\n                            }).set('num', num).set('ai', function (target) {\r\n                                let player = _status.event.player;\r\n                                return -get.$a(player, target) + Math.random();\r\n                            });\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            let target = result.targets[0];\r\n                            Evt.target = target;\r\n                            if (!target.hasSkill('fengyin')) {\r\n                                target.addTempSkill('fengyin');\r\n                            }\r\n                        }\r\n                    }],\r\n                mod: {\r\n                    cardname(card, player) {\r\n                        if (card.hasGaintag && card.hasGaintag('ming_gunxunshan'))\r\n                            return 'shan';\r\n                        if (card.hasGaintag && card.hasGaintag('ming_gunxunsha'))\r\n                            return 'sha';\r\n                    },\r\n                },\r\n                ai: {\r\n                    order: 7.5,\r\n                    result: { player: 0.5 },\r\n                }\r\n            },\r\n            quanyu: {\r\n                audio: 6,\r\n                trigger: { global: 'useCard1' },\r\n                clickChange: '休眠',\r\n                clickable(player) {\r\n                    if (player.$.quanyu_clickChange === undefined)\r\n                        player.$.quanyu_clickChange = false;\r\n                    else\r\n                        player.$.quanyu_clickChange = !player.$.quanyu_clickChange;\r\n                },\r\n                clickableFilter(player) {\r\n                    return player.$.quanyu_clickChange !== false;\r\n                },\r\n                filter(Evt, player) {\r\n                    if (player.$.quanyu_clickChange === false)\r\n                        return false;\r\n                    let suit = get.suit(Evt.card);\r\n                    return Evt.cards && Evt.cards.length && suit != 'none' && Evt.player != player && !player.countCards('h', card => suit == get.suit(card));\r\n                },\r\n                check(Evt, player) {\r\n                    let handcards = player.getCards('h');\r\n                    let num = 4 - get.suit3(handcards).length;\r\n                    if (player.hp < num)\r\n                        return false;\r\n                    if (['shandian', 'du'].includes(Evt.card.name))\r\n                        return false;\r\n                    if (Evt.targets && Evt.targets.length && get.$a(player, Evt.player) < 0) {\r\n                        for (let i = 0; i < Evt.targets.length; i++) {\r\n                            if (get.effect(Evt.targets[i], Evt.card, Evt.player, player) < 0)\r\n                                return true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        return get.$a(player, Evt.player) < 0;\r\n                    }\r\n                },\r\n                prompt2(Evt, player) {\r\n                    return `你可以获得${get.$t(Evt.player)}使用的${get.$t(Evt.card)}，然后你展示所有手牌，每缺少一种花色便受到1点无来源的伤害。`;\r\n                },\r\n                addDialog(Evt, player) {\r\n                    return Evt.cards;\r\n                },\r\n                content: [() => {\r\n                        trigger.cancel();\r\n                        Evt.cards = trigger.cards;\r\n                        Evt.target = trigger.player;\r\n                        player.gain(Evt.cards, Evt.target, 'gain2');\r\n                    }, () => {\r\n                        player.showHandcards('『全域』展示手牌');\r\n                        let handcards = player.getCards('h');\r\n                        Evt.num = 4 - get.suit3(handcards).length;\r\n                    }, () => {\r\n                        if (Evt.num > 0) {\r\n                            player.damage(Evt.num, 'nosource');\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    expose: 0.2,\r\n                },\r\n            },\r\n            wulian: {\r\n                audio: true,\r\n                enable: 'phaseUse',\r\n                unique: true,\r\n                limited: true,\r\n                filter(Evt, player) {\r\n                    return player.isDamaged();\r\n                },\r\n                content: [() => {\r\n                        player.$.wulian = true;\r\n                        player.awakenSkill('wulian');\r\n                        player.draw(player.getDamagedHp());\r\n                    }, () => {\r\n                        player.addTempSkill('lianpo', 'roundStart');\r\n                    }],\r\n                derivation: 'lianpo',\r\n                ai: {\r\n                    order(item, player) {\r\n                        if (player.getDamagedHp() >= 3)\r\n                            return 10;\r\n                        return 0;\r\n                    },\r\n                    result: { player: 2 },\r\n                }\r\n            },\r\n            lianpo: {\r\n                audio: 4,\r\n                trigger: { global: 'phaseAfter' },\r\n                frequent: true,\r\n                onremove: true,\r\n                filter(Evt, player) {\r\n                    return player.getStat('kill') > 0;\r\n                },\r\n                content() {\r\n                    player.insertPhase();\r\n                },\r\n            },\r\n            yehua: {\r\n                audio: 3,\r\n                trigger: { player: 'phaseBegin' },\r\n                filter(Evt, player) {\r\n                    return !player.isMaxHandcard(true);\r\n                },\r\n                check(Evt, player) {\r\n                    let list = game.filterPlayer(cur => {\r\n                        return cur.isMaxHandcard();\r\n                    }).sortBySeat();\r\n                    return (list[0].countCards('h') - player.countCards('h')) >= 1;\r\n                },\r\n                content: [() => {\r\n                        let num = 1, list = game.filterPlayer(cur => cur.isMaxHandcard());\r\n                        num += (list[0].countCards('h') - player.countCards('h'));\r\n                        Evt.cards = get.cards(num);\r\n                    }, () => {\r\n                        player.gain(Evt.cards, 'draw');\r\n                    }, () => {\r\n                        player.turnOver();\r\n                    }],\r\n            },\r\n            fengqing: {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = 1;\r\n                },\r\n                trigger: { player: ['linkBegin', 'turnOverBegin'] },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                process(change) {\r\n                    switch (change) {\r\n                        case 1:\r\n                            return '其下个准备阶段视为使用了【酒】';\r\n                            break;\r\n                        case 2:\r\n                            return '其下个准备阶段视为使用了【桃】';\r\n                            break;\r\n                        case 3:\r\n                            return '其跳过本回合的判定和弃牌阶段';\r\n                            break;\r\n                    }\r\n                },\r\n                content: [() => {\r\n                        Evt.change = player.$.fengqing;\r\n                        player.chooseTarget(get.$pro('fengqing')).set('ai', function (target) {\r\n                            let player = _status.event.player;\r\n                            let change = _status.event.change;\r\n                            switch (change) {\r\n                                case 1:\r\n                                    return get.effect(target, { name: 'jiu' }, target, player) || target == player;\r\n                                    break;\r\n                                case 2:\r\n                                    return get.effect(target, { name: 'tao' }, target, player);\r\n                                    break;\r\n                                case 3: {\r\n                                    if (target != _status.currentPhase)\r\n                                        return 0;\r\n                                    if (target.countCards('j') > 0)\r\n                                        return 2 * get.$a(player, target) + Math.random();\r\n                                    return get.$a(player, target) + Math.random();\r\n                                    break;\r\n                                }\r\n                            }\r\n                            return get.$a(player, target) + Math.random();\r\n                        }).set('prompt2', lib.skill.fengqing.process(Evt.change)).set('change', Evt.change);\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('fengqing', Evt.target);\r\n                            switch (Evt.change) {\r\n                                case 1:\r\n                                    Evt.target.addSkill('fengqing_jiu');\r\n                                    break;\r\n                                case 2:\r\n                                    Evt.target.addSkill('fengqing_tao');\r\n                                    break;\r\n                                case 3: {\r\n                                    Evt.target.skip('phaseJudge');\r\n                                    Evt.target.skip('phaseDiscard');\r\n                                    break;\r\n                                }\r\n                            }\r\n                            player.$.fengqing = (player.$.fengqing == 3) ? 1 : player.$.fengqing + 1;\r\n                        }\r\n                    }],\r\n                effect: {\r\n                    target(card, player, target, current) {\r\n                        if (['tiesuo', 'lulitongxin'].includes(card.name)) {\r\n                            return [1, 2];\r\n                        }\r\n                    },\r\n                },\r\n                subSkill: {\r\n                    jiu: {\r\n                        audio: 2,\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '下个准备阶段视为使用了【酒】'\r\n                        },\r\n                        trigger: { player: 'phaseZhunbeiEnd' },\r\n                        forced: true,\r\n                        onremove: true,\r\n                        popup: '风情-酒',\r\n                        audioname: ['EQueen'],\r\n                        filter(Evt, player) {\r\n                            return lib.filter.filterCard({ name: 'jiu', isCard: false }, player, Evt);\r\n                        },\r\n                        content() {\r\n                            player.chooseUseTarget({ name: 'jiu' }, true, 'noTargetDelay');\r\n                            player.removeSkill(Evt.name);\r\n                        },\r\n                    },\r\n                    tao: {\r\n                        audio: 2,\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '下个准备阶段视为使用了【桃】'\r\n                        },\r\n                        trigger: { player: 'phaseZhunbeiEnd' },\r\n                        forced: true,\r\n                        onremove: true,\r\n                        popup: '风情-桃',\r\n                        audioname: ['EQueen'],\r\n                        filter(Evt, player) {\r\n                            return true;\r\n                            return lib.filter.filterCard({ name: 'tao', isCard: false }, player, Evt);\r\n                        },\r\n                        content() {\r\n                            player.chooseUseTarget({ name: 'tao' }, true, 'noTargetDelay');\r\n                            player.removeSkill(Evt.name);\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            huangjia: {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = true;\r\n                },\r\n                locked: true,\r\n                notemp: true,\r\n                mark: true,\r\n                marktext: '👠',\r\n                intro: {\r\n                    mark(dialog, content, player) {\r\n                        dialog.addText('已成为皇珈骑士');\r\n                    },\r\n                    onunmark(storage, player) {\r\n                        if (storage) {\r\n                            storage = undefined;\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            shixi: {\r\n                marktext: '时',\r\n                intro: {\r\n                    mark(dialog, content, player) {\r\n                        dialog.addText('时隙:初始手牌');\r\n                        let list = player.$.shixi.slice(0);\r\n                        dialog.addSmall(list);\r\n                    },\r\n                    content: 'cards',\r\n                    onunmark(storage, player) {\r\n                        if (storage && storage.length) {\r\n                            storage.length = 0;\r\n                        }\r\n                    },\r\n                },\r\n                trigger: { global: 'phaseLoopBefore', player: 'enterGame' },\r\n                forced: true,\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    return !player.$.shixi;\r\n                },\r\n                content() {\r\n                    let cards = player.getCards('h');\r\n                    if (cards.length) {\r\n                        if (!player.$.shixi)\r\n                            player.$.shixi = [];\r\n                        player.showCards(cards, '时隙:记录初始手牌');\r\n                        player.$.shixi.addArray(cards);\r\n                        player.markSkill('shixi');\r\n                    }\r\n                },\r\n                group: ['shixi_mark', 'shixi_draw'],\r\n                subSkill: {\r\n                    mark: {\r\n                        marktext: '隙',\r\n                        intro: {\r\n                            mark(dialog, content, player) {\r\n                                dialog.addText('时隙:已指定');\r\n                                let list = player.$.shixi_mark.slice(0);\r\n                                dialog.addSmall(list);\r\n                            },\r\n                            content: 'cards',\r\n                            onunmark(storage, player) {\r\n                                if (storage && storage.length) {\r\n                                    storage.length = 0;\r\n                                }\r\n                            },\r\n                        },\r\n                        trigger: { global: ['loseAfter', 'cardsDiscardAfter'] },\r\n                        filter(Evt, player) {\r\n                            var _a;\r\n                            let record = player.getStorage('shixi').slice(0);\r\n                            if (!record)\r\n                                return false;\r\n                            let check = cur => (player.$.yuezhi === true && cur.$.huangjia) || cur == player;\r\n                            if (Evt.name == 'cardsDiscard' && (Evt.getParent().name != 'orderingDiscard'\r\n                                || (!((_a = Evt.getParent().relatedEvent) === null || _a === void 0 ? void 0 : _a.player) || Evt.getParent().relatedEvent.name == 'judge'\r\n                                    || !check(Evt.getParent().relatedEvent.player))))\r\n                                return false;\r\n                            if (Evt.name == 'lose' && (Evt.position != ui.discardPile\r\n                                || !check(Evt.player)))\r\n                                return false;\r\n                            let list = Evt.cards.filter(card => {\r\n                                if (Evt.js && Evt.js.includes(card))\r\n                                    return false;\r\n                                for (let i = 0; i < record.length; i++) {\r\n                                    if (player.$.shixi_mark && player.$.shixi_mark.includes(record[i]))\r\n                                        continue;\r\n                                    if (get.suit(record[i]) == get.suit(card))\r\n                                        return true;\r\n                                }\r\n                            });\r\n                            return list.length > 0;\r\n                        },\r\n                        direct: true,\r\n                        content: [() => {\r\n                                let record = player.getStorage('shixi').slice(0);\r\n                                let list = trigger.cards.filter(card => {\r\n                                    for (let i of record) {\r\n                                        if (player.$.shixi_mark && player.$.shixi_mark.includes(i))\r\n                                            continue;\r\n                                        if (get.suit(i) == get.suit(card))\r\n                                            return true;\r\n                                    }\r\n                                });\r\n                                Evt.record = record;\r\n                                Evt.list = list;\r\n                                Evt.num = 0;\r\n                            }, () => {\r\n                                if (Evt.list[Evt.num]) {\r\n                                    if (player.$.shixi_mark)\r\n                                        Evt.record.removeArray(player.$.shixi_mark);\r\n                                    let filterButtons = Evt.record.filter(card => get.suit(Evt.list[Evt.num]) == get.suit(card));\r\n                                    if (Evt.record.length) {\r\n                                        if (lib.config.autoskilllist.includes('shixi')) {\r\n                                            player.chooseButton([`###${get.$pro('shixi')}###选择要指定的牌（与${get.$t(Evt.list[Evt.num])}花色相同）`, Evt.record]).set('filterButton', function (button) {\r\n                                                let card = _status.event.card;\r\n                                                return get.suit(button.link) == get.suit(card);\r\n                                            }).set('ai', function (button) {\r\n                                                return get.value(button.link) + 2 * Math.random();\r\n                                            }).set('card', Evt.list[Evt.num]);\r\n                                        }\r\n                                        else if (filterButtons.length) {\r\n                                            Evt._result = { bool: true, links: [filterButtons.shift()] };\r\n                                        }\r\n                                    }\r\n                                    ;\r\n                                }\r\n                            }, () => {\r\n                                if (result.bool && result.links) {\r\n                                    if (!player.$.shixi_mark)\r\n                                        player.$.shixi_mark = [];\r\n                                    player.$.shixi_mark.addArray(result.links);\r\n                                    player.markSkill('shixi_mark');\r\n                                }\r\n                                Evt.num++;\r\n                                if (Evt.list[Evt.num])\r\n                                    Evt.goto(1);\r\n                            }],\r\n                    },\r\n                    draw: {\r\n                        trigger: {\r\n                            global: ['phaseZhunbeiEnd', 'phaseJudgeEnd', 'phaseDrawEnd', 'phaseUseEnd', 'phaseDiscardEnd', 'phaseJieshuEnd']\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return player.$.shixi_mark && player.$.shixi_mark.length;\r\n                        },\r\n                        direct: true,\r\n                        content: [() => {\r\n                                Evt.num = Math.floor(player.$.shixi_mark.length / 2);\r\n                            }, () => {\r\n                                if (Evt.num > 0) {\r\n                                    player.logSkill('shixi');\r\n                                    player.draw(Evt.num);\r\n                                    player.unmarkSkill('shixi_mark');\r\n                                }\r\n                            }],\r\n                    },\r\n                }\r\n            },\r\n            xueta: {\r\n                audio: 6,\r\n                trigger: { player: ['useCard', 'respond'] },\r\n                filter(Evt, player) {\r\n                    if (player.countCards('he') == 0)\r\n                        return false;\r\n                    return Array.isArray(Evt.respondTo) && Evt.respondTo[0] && Evt.respondTo[0] != player;\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        Evt.target = trigger.respondTo[0];\r\n                        player.chooseToDiscard('he', get.$pro2('xueta')).set('ai', card => {\r\n                            if (!_status.event.check)\r\n                                return 1 - get.value(card);\r\n                            return 8 - get.value(card);\r\n                        }).set('logSkill', ['xueta', Evt.target, 'fire']).set('check', (get.$a(player, Evt.target) > 0 || !Evt.target.$.yuezhi));\r\n                    }, () => {\r\n                        if (result.bool && result.cards && result.cards.length) {\r\n                            Evt.target.draw(2);\r\n                            Evt.target.addSkill('huangjia');\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target) {\r\n                            if (!player.$.huangjia) {\r\n                                if (get.$a(player, target) > 0 && get.$a(target, player) > 0) {\r\n                                    if (get.tag(card, 'respondShan') && target.countCards('hs', 'shan') && target.countCards('he') > target.countCards('h', 'shan')) {\r\n                                        return [1, 2, 1, 1];\r\n                                    }\r\n                                    if (get.tag(card, 'respondSha') && target.countCards('hs', 'sha') && target.countCards('he') > target.countCards('h', 'sha')) {\r\n                                        if (card.name == 'juedou')\r\n                                            return;\r\n                                        return [1, 2, 1, 1];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            yuezhi: {\r\n                audio: true,\r\n                skillAnimation: true,\r\n                animationStr: '音乐珈',\r\n                unique: true,\r\n                juexingji: true,\r\n                forced: true,\r\n                trigger: { player: 'phaseBegin' },\r\n                filter(Evt, player) {\r\n                    let num = game.countPlayer(cur => cur.$.huangjia === true);\r\n                    return num >= player.hp || num >= player.countCards('h');\r\n                },\r\n                content: [() => {\r\n                        player.gainMaxHp();\r\n                        player.awakenSkill('yuezhi');\r\n                        player.$.yuezhi = true;\r\n                    }, () => {\r\n                        let record = player.$.shixi.slice(0);\r\n                        record.forEach(card => {\r\n                            if (get.position(card, true) == 'd')\r\n                                player.gain(card, 'draw');\r\n                            else {\r\n                                player.recover();\r\n                                player.draw(2);\r\n                            }\r\n                            game.delay(0.4);\r\n                        });\r\n                    }],\r\n                ai: {\r\n                    combo: 'shixi'\r\n                }\r\n            },\r\n            yiqu: {\r\n                trigger: { global: ['chooseTargetAfter', 'chooseCardTargetAfter', 'chooseUseTargetAfter', 'useSkillAfter'] },\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    if (Evt.player == player)\r\n                        return false;\r\n                    let name = lib.skill.yiqu.process(Evt), info = lib.skill[name];\r\n                    if (!info || info.equipSkill || info.ruleSkill)\r\n                        return false;\r\n                    let result = Evt.result, targets = [];\r\n                    if (Evt.name == 'useSkill')\r\n                        targets = Evt.targets || [Evt.target];\r\n                    else if (!result || result.bool != true)\r\n                        return false;\r\n                    else {\r\n                        targets = result.targets.slice(0);\r\n                    }\r\n                    return lib.translate[`${name}_info`] && !player.hasSkill(name) && targets.includes(player);\r\n                },\r\n                prompt2(Evt, player) {\r\n                    let name = lib.skill.yiqu.process(Evt);\r\n                    return `你可以获得『${get.$t(name)}』，直到下次进入濒死状态`;\r\n                },\r\n                process(Evt) {\r\n                    let name = Evt.skill || Evt.getParent().name;\r\n                    if (name.length > 3) {\r\n                        let index = name.indexOf('_', 4);\r\n                        if (index > 3)\r\n                            name = name.substring(0, index);\r\n                    }\r\n                    return name;\r\n                },\r\n                content() {\r\n                    let name = lib.skill.yiqu.process(trigger);\r\n                    player.flashAvatar('yiqu', get.name(trigger.player));\r\n                    player.addSkillLog(name);\r\n                    player.addAdditionalSkill('yiqu', name, true);\r\n                },\r\n                group: 'yiqu_beDying',\r\n                subSkill: {\r\n                    beDying: {\r\n                        trigger: { player: 'dyingBefore' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return player.additionalSkills['yiqu'];\r\n                        },\r\n                        content() {\r\n                            player.removeAdditionalSkill('yiqu');\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            wanxian: {\r\n                audio: 2,\r\n                trigger: { global: 'dying' },\r\n                forced: true,\r\n                check() {\r\n                    return false;\r\n                },\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && Evt.reason && Evt.reason.source && player == Evt.parent.source\r\n                        && player.additionalSkills['yiqu'] && player.additionalSkills['yiqu'].length;\r\n                },\r\n                content: [() => {\r\n                        Evt.num = player.additionalSkills['yiqu'].length;\r\n                        player.removeAdditionalSkill('yiqu');\r\n                    }, () => {\r\n                        player.draw(Evt.num);\r\n                    }],\r\n                ai: {\r\n                    combo: 'yiqu',\r\n                },\r\n            },\r\n            juehuo: {\r\n                init(player, skill) {\r\n                    if (!player.$[skill]) {\r\n                        player.$[skill] = {\r\n                            ms: [],\r\n                            ans: []\r\n                        };\r\n                    }\r\n                },\r\n                locked: true,\r\n                notemp: true,\r\n                marktext: '绝',\r\n                intro: {\r\n                    mark(dialog, content, player) {\r\n                        if (player.$.juehuo.ms && player.$.juehuo.ms.length) {\r\n                            let list = player.$.juehuo.ms.slice(0);\r\n                            dialog.addText('明置绝活');\r\n                            dialog.addSmall(list);\r\n                        }\r\n                        if (player.$.juehuo.ans && player.$.juehuo.ans.length) {\r\n                            if (player.isUnderControl(true)) {\r\n                                let list = player.$.juehuo.ans.slice(0);\r\n                                dialog.addText('暗置绝活');\r\n                                dialog.addSmall(list);\r\n                            }\r\n                            else {\r\n                                dialog.addText(`暗置绝活（${get.cnNumber(player.$.juehuo.ans.length)}张）`);\r\n                            }\r\n                        }\r\n                    },\r\n                    content: 'cards',\r\n                    onunmark(storage, player) {\r\n                        if ((storage && storage.ms && storage.ms.length) || (storage && storage.ans && storage.ans.length)) {\r\n                            let cards = storage.ms.concat(storage.ans);\r\n                            player.$throw(cards, 1000);\r\n                            game.cardsDiscard(cards);\r\n                            game.log(cards, '被置入了弃牌堆');\r\n                            storage.ms.length = 0;\r\n                            storage.ans.length = 0;\r\n                        }\r\n                    },\r\n                },\r\n                cardAround: ['ms', 'ans']\r\n            },\r\n            zhiyue: {\r\n                audio: 8,\r\n                trigger: { player: 'useCardEnd' },\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    if (player.$.juehuo.ans && player.$.juehuo.ms) {\r\n                        let card = Evt.card, list1 = player.$.juehuo.ans.slice(0), list2 = player.$.juehuo.ms.slice(0);\r\n                        for (let i = 0; i < list1.length; i++) {\r\n                            if (get.type2(list1[i]) == get.type2(card))\r\n                                return true;\r\n                        }\r\n                        for (let i = 0; i < list2.length; i++) {\r\n                            if (get.suit(list2[i]) == get.suit(card))\r\n                                return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                },\r\n                content: [() => {\r\n                        Evt.card = trigger.card;\r\n                        let list1 = player.$.juehuo.ans.slice(0), list2 = player.$.juehuo.ms.slice(0);\r\n                        let list = ['『指月』：选择绝活翻面'];\r\n                        if (list1.length) {\r\n                            list.push('暗置绝活');\r\n                            list.push([list1, 'card']);\r\n                        }\r\n                        if (list2.length) {\r\n                            list.push('明置绝活');\r\n                            list.push([list2, 'card']);\r\n                        }\r\n                        list.push('hidden');\r\n                        Evt.list1 = list1;\r\n                        Evt.list2 = list2;\r\n                        let next = player.chooseButton(list);\r\n                        next.set('selectButton', [1, Evt.list2.length + 1]);\r\n                        next.set('filterButton', function (button) {\r\n                            let card = _status.event.card, evt = _status.event.getParent(), now = button.link;\r\n                            if (evt.list1 && evt.list1.length && evt.list1.includes(now)) {\r\n                                let selected = ui.selected.buttons;\r\n                                if (selected.length) {\r\n                                    for (let i = 0; i < selected.length; i++) {\r\n                                        if (evt.list1.includes(selected[i].link))\r\n                                            return false;\r\n                                    }\r\n                                }\r\n                                return get.type2(now) == get.type2(card);\r\n                            }\r\n                            if (evt.list2 && evt.list2.length && evt.list2.includes(now)) {\r\n                                return get.suit(now) == get.suit(card);\r\n                            }\r\n                        });\r\n                        next.set('card', Evt.card);\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            let cards1 = result.links.slice(0), cards2 = result.links.slice(0);\r\n                            cards1 = cards1.filter(card => Evt.list1.includes(card));\r\n                            cards2 = cards2.filter(card => Evt.list2.includes(card));\r\n                            Evt.cards = cards1.concat(cards2);\r\n                            if (cards1.length == Evt.list1.length) {\r\n                                Evt.cards.push(get.cards()[0]);\r\n                            }\r\n                            if (cards2.length) {\r\n                                player.draw(cards2.length);\r\n                            }\r\n                            lib.skill.zhiyue.process(player, Evt.cards);\r\n                            game.delay(0.5);\r\n                        }\r\n                    }],\r\n                process(player, cards) {\r\n                    let storage = player.getStorage('juehuo');\r\n                    if (storage.ans && storage.ms) {\r\n                        let drawAutos = [];\r\n                        for (let i = 0; i < cards.length; i++) {\r\n                            if (storage.ms.includes(cards[i])) {\r\n                                player.$give(cards[i], player, false);\r\n                                storage.ms.remove(cards[i]);\r\n                                storage.ans.push(cards[i]);\r\n                            }\r\n                            else if (storage.ans.includes(cards[i])) {\r\n                                player.$give(cards[i], player, false);\r\n                                storage.ans.remove(cards[i]);\r\n                                storage.ms.push(cards[i]);\r\n                            }\r\n                            else {\r\n                                drawAutos.add(cards[i]);\r\n                                game.cardsGotoSpecial(cards[i]);\r\n                                storage.ans.push(cards[i]);\r\n                            }\r\n                        }\r\n                        if (drawAutos.length)\r\n                            player.$drawAuto(drawAutos);\r\n                        player.markSkill('juehuo');\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten: 1.5\r\n                },\r\n                mod: {\r\n                    aiOrder(player, card, num) {\r\n                        if (typeof card == 'object' && player.$.juehuo) {\r\n                            let suit = get.suit(card), type = get.type2(card), ans = player.$.juehuo.ans.slice(0), ms = player.$.juehuo.ms.slice(0);\r\n                            for (let i = 0; i < ans.length; i++) {\r\n                                if (get.type2(ans[i]) == type)\r\n                                    return num + 7;\r\n                            }\r\n                            for (let i = 0; i < ms.length; i++) {\r\n                                if (get.suit(ms[i]) == suit)\r\n                                    return num + 5;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                group: ['juehuo', 'zhiyue_start'],\r\n                subSkill: {\r\n                    start: {\r\n                        forced: true,\r\n                        priority: 10,\r\n                        trigger: {\r\n                            global: 'gameStart',\r\n                            player: 'enterGame',\r\n                        },\r\n                        content() {\r\n                            Evt.cards = get.cards();\r\n                            game.playAudio('skill', 'zhiyue0');\r\n                            lib.skill.zhiyue.process(player, Evt.cards);\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            zhengniu: {\r\n                audio: 4,\r\n                trigger: { player: ['linkBefore', 'recoverBefore', 'drawBefore'] },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    if (!player.$.juehuo\r\n                        || !(player.$.juehuo.ans && player.$.juehuo.ans.length\r\n                            || player.$.juehuo.ms && player.$.juehuo.ms.length))\r\n                        return false;\r\n                    if (!Evt.source || get.itemtype(Evt.source) != 'player' || Evt.source == player)\r\n                        return false;\r\n                    if (Evt.name == 'link')\r\n                        return !player.isLinked();\r\n                    return true;\r\n                },\r\n                content: [() => {\r\n                        Evt.target = trigger.source;\r\n                        let check = get.$a(player, Evt.target) > 0, list1 = player.$.juehuo.ans.slice(0), list2 = player.$.juehuo.ms.slice(0);\r\n                        let list = [`###${get.$pro('zhengniu')}###选择交给${get.$t(Evt.target)}的绝活`];\r\n                        if (list1.length) {\r\n                            list.push('暗置绝活');\r\n                            list.push([list1, 'card']);\r\n                        }\r\n                        if (list2.length) {\r\n                            list.push('明置绝活');\r\n                            list.push([list2, 'card']);\r\n                        }\r\n                        list.push('hidden');\r\n                        player.chooseButton(list).set('filterButton', function (button) {\r\n                            return true;\r\n                        }).set('selectButton', [1, Infinity]).set('ai', function (button) {\r\n                            if (!_status.event.check)\r\n                                return -1;\r\n                            if ((ui.dialog.buttons.length - ui.selected.buttons.length) <= 3)\r\n                                return -1;\r\n                            return get.value(button.link);\r\n                        }).set('check', check);\r\n                    }, () => {\r\n                        if (result.bool && result.links) {\r\n                            player.logSkill('zhengniu');\r\n                            player.$.juehuo.ans.removeArray(result.links);\r\n                            player.$.juehuo.ms.removeArray(result.links);\r\n                            player.$give(result.links, Evt.target);\r\n                            Evt.target.gain(result.links);\r\n                            player.updateMarks();\r\n                        }\r\n                    }],\r\n            },\r\n            juxiao: {\r\n                trigger: { player: 'damageEnd' },\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                frequent: true,\r\n                content: [() => {\r\n                        player.chooseTarget([1, 2], true, '###『句销』：令至多两名角色各摸一张牌###摸牌的角色不能使用【杀】直到回合结束').set('ai', function (target) {\r\n                            let att = get.$a(_status.event.player);\r\n                            if (target == _status.currentPhase && (target.hasSha() || target.hasSkillTag('useSha'))) {\r\n                                if (target.hasS)\r\n                                    return 2 - att;\r\n                            }\r\n                        });\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            player.logSkill('juxiao', result.targets);\r\n                            game.asyncDraw(result.targets);\r\n                            result.targets.forEach(function (tar) {\r\n                                tar.addTempSkill('juxiao_xiao');\r\n                            });\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    xiao: {\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '无法使用杀直到回合结束'\r\n                        },\r\n                        mod: {\r\n                            cardEnabled(card) {\r\n                                if (card.name == 'sha')\r\n                                    return false;\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    expose: 0.1,\r\n                    threaten: 0.8,\r\n                    maixie: true,\r\n                }\r\n            },\r\n            shshenyan: {\r\n                audio: 6,\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = [];\r\n                },\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h');\r\n                },\r\n                content: [() => {\r\n                        player.showHandcards();\r\n                        game.delayx();\r\n                        if (!player.$.shshenyan)\r\n                            player.$.shshenyan = [];\r\n                    }, () => {\r\n                        player.chooseCard('h', '『神言』:弃置一种牌名的牌', true).set('ai', card => {\r\n                            if (['sha'].includes(card.name))\r\n                                return 5;\r\n                            if (!['sha', 'tao'].includes(card.name) && get.type(card) == 'basic')\r\n                                return 6 - get.value(card);\r\n                            return 1;\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool && result.cards) {\r\n                            Evt.cname = get.name(result.cards[0]);\r\n                            Evt.discard = player.discard(player.getCards('h', Evt.cname));\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.discard.cards) {\r\n                            let cards = Evt.discard.cards;\r\n                            cards.forEach(card => {\r\n                                player.$.shshenyan.add(get.suit(card));\r\n                            });\r\n                            player.draw(cards.length);\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (player.$.shshenyan) {\r\n                            if (!player.hasSkill('shshenyan_mark'))\r\n                                player.addTempSkill('shshenyan_mark', 'phaseUseAfter');\r\n                            player.markSkill('shshenyan_mark');\r\n                            let num = player.$.shshenyan.length, list = get.inpile('trick');\r\n                            for (let i = 0; i < list.length; i++) {\r\n                                if (get.$t(list[i]).length != num) {\r\n                                    list.splice(i--, 1);\r\n                                }\r\n                                else\r\n                                    list[i] = ['锦囊', '', list[i]];\r\n                            }\r\n                            if (list.length) {\r\n                                player.chooseButton([`是否选择一张长度${num}的锦囊牌视为使用之？`, [list, 'vcard'], 'hidden']).set('ai', function (button) {\r\n                                    let card = { name: button.link[2] }, value = get.value(card);\r\n                                    return value;\r\n                                });\r\n                            }\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            player.chooseUseTarget({ name: result.links[0][2] }, true);\r\n                        }\r\n                        else {\r\n                            if (Evt.cname == 'sha') {\r\n                                let next = game.createEvent('resetSkill');\r\n                                [next.player] = [player];\r\n                                next.setContent(function () {\r\n                                    player.popup('重置');\r\n                                    game.log(player, '重置了『神言』');\r\n                                    player.getStat('skill').shshenyan--;\r\n                                });\r\n                            }\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    mark: {\r\n                        marktext: \"言\",\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '神言',\r\n                            content(storage, player, skill) {\r\n                                if (player.$.shshenyan.length) {\r\n                                    return '本阶段『神言』的弃置花色：' + get.$t(player.$.shshenyan);\r\n                                }\r\n                            },\r\n                        },\r\n                        onremove(player) {\r\n                            player.$.shshenyan.length = 0;\r\n                        },\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 6,\r\n                    result: {\r\n                        player: 1,\r\n                    },\r\n                },\r\n            },\r\n            zhezhuan: {\r\n                enable: 'chooseToUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('he', { type: ['trick', 'delay'] }) >= 1;\r\n                },\r\n                hiddenCard(player, name) {\r\n                    if (typeof lib.card[name].yingbian_prompt != 'string')\r\n                        return false;\r\n                    return name != 'du' && get.type(name) == 'basic' && player.countCards('he', { type: ['trick', 'delay'] });\r\n                },\r\n                chooseButton: {\r\n                    dialog(Evt, player) {\r\n                        let dialog = ui.create.dialog('辙转', 'hidden');\r\n                        dialog.add('应变标签');\r\n                        let table = document.createElement('div');\r\n                        let list0 = ['yingbian_kongchao', 'yingbian_canqu', 'yingbian_fujia', 'yingbian_zhuzhan'];\r\n                        table.classList.add('add-setting');\r\n                        table.style.margin = '0';\r\n                        table.style.width = '100%';\r\n                        table.style.position = 'relative';\r\n                        for (let i of list0) {\r\n                            let td = ui.create.div('.shadowed.reduce_radius.pointerdiv.tdnode');\r\n                            td.innerHTML = `<span>${get.$t(`${i}_tag`)}</span>`;\r\n                            td.link = i;\r\n                            td.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.button);\r\n                            for (let j in lib.element.button) {\r\n                                td[j] = lib.element.button[i];\r\n                            }\r\n                            table.appendChild(td);\r\n                            dialog.buttons.add(td);\r\n                        }\r\n                        dialog.content.appendChild(table);\r\n                        dialog.add('卡牌转换');\r\n                        let list1 = [];\r\n                        for (let i = 0; i < lib.inpile.length; i++) {\r\n                            let name = lib.inpile[i];\r\n                            if (name == 'du')\r\n                                continue;\r\n                            if (!lib.card[name].yingbian_prompt)\r\n                                continue;\r\n                            if (name == 'sha') {\r\n                                list1.push(['基本', '', 'sha']);\r\n                                list1.push(['基本', '', 'sha', 'fire']);\r\n                            }\r\n                            else if (get.type(name) == 'trick') {\r\n                                if (!player.countCards('h', { name: name }))\r\n                                    continue;\r\n                                list1.push(['锦囊', '', name]);\r\n                            }\r\n                            else if (get.type(name) == 'basic') {\r\n                                list1.push(['基本', '', name]);\r\n                            }\r\n                            ;\r\n                        }\r\n                        dialog.add([list1, 'vcard']);\r\n                        return dialog;\r\n                    },\r\n                    filter(button, player) {\r\n                        if (ui.selected.buttons.length && typeof button.link == typeof ui.selected.buttons[0].link)\r\n                            return false;\r\n                        if (typeof button.link == 'object') {\r\n                            let evt = _status.event.getParent(), name = button.link[2];\r\n                            if (evt.filterCard && typeof evt.filterCard == 'function') {\r\n                                return evt.filterCard({ name: name, isCard: true }, player);\r\n                            }\r\n                            return lib.filter.filterCard({ name: name, isCard: true }, player, evt);\r\n                        }\r\n                        return true;\r\n                    },\r\n                    select: 2,\r\n                    check(button) {\r\n                        let player = _status.event.player;\r\n                        if (typeof button.link == 'string') {\r\n                            switch (button.link) {\r\n                                case 'yingbian_kongchao':\r\n                                    return 4.5;\r\n                                    break;\r\n                                case 'yingbian_canqu':\r\n                                    return player.hp == 1;\r\n                                    break;\r\n                                case 'yingbian_fujia':\r\n                                    return 4.3;\r\n                                    break;\r\n                                case 'yingbian_zhuzhan':\r\n                                    return (3 - player.hp) * 1.5;\r\n                                    break;\r\n                            }\r\n                        }\r\n                        let name = button.link[2], evt = _status.event.getParent();\r\n                        if (get.type(name) == 'basic') {\r\n                            if (name == 'shan')\r\n                                return 2;\r\n                            if (evt.type == 'dying') {\r\n                                if (get.$a(player, evt.dying) < 2)\r\n                                    return false;\r\n                                return 1.9;\r\n                            }\r\n                            if (evt.type == 'phase')\r\n                                return player.getUseValue({ name: name, nature: button.link[3], isCard: true });\r\n                            return 1;\r\n                        }\r\n                        let effect = player.getUseValue(button.link[2]);\r\n                        if (effect > 0)\r\n                            return effect;\r\n                        return 0;\r\n                    },\r\n                    backup(links, player) {\r\n                        if (typeof links[1] == 'string')\r\n                            links.reverse();\r\n                        let yingbian = [links[0], ['yingbian_damage', 'yingbian_gain'].randomGet()];\r\n                        let name = links[1][2], nature = links[1][3];\r\n                        return {\r\n                            filterCard(card, player) {\r\n                                if (get.type2(card) != 'trick')\r\n                                    return false;\r\n                                if (get.type2(name) == 'trick')\r\n                                    return get.name(card) == name;\r\n                                return true;\r\n                            },\r\n                            selectCard: 1,\r\n                            yingbian: yingbian,\r\n                            viewAs: {\r\n                                cardid: get.id(),\r\n                                name: name,\r\n                                nature: nature,\r\n                                isCard: true,\r\n                            },\r\n                            popname: true,\r\n                            precontent() {\r\n                                player.logSkill('zhezhuan');\r\n                                let yingbian = lib.skill.zhezhuan_backup.yingbian;\r\n                                console.log(_status, _status.cardtag);\r\n                                _status.cardtag[yingbian[0]].add(Evt.result.card.cardid);\r\n                                _status.cardtag[yingbian[1]].add(Evt.result.card.cardid);\r\n                            },\r\n                        };\r\n                    },\r\n                    prompt(links, player) {\r\n                        if (typeof links[1] == 'string')\r\n                            links.reverse();\r\n                        let yingbian = links[0], name = links[1][2], nature = links[1][3];\r\n                        return `视为使用一张带有${get.$t(`${yingbian}_tag`)}标签的${get.$t(nature) || ''}【${get.$t(name)}】`;\r\n                    },\r\n                },\r\n                ai: {\r\n                    order: 12,\r\n                    result: {\r\n                        player: 1\r\n                    },\r\n                    threaten: 1.5\r\n                },\r\n                group: 'zhezhuan_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { player: 'useCard1' },\r\n                        forced: true,\r\n                        popup: false,\r\n                        firstDo: true,\r\n                        priority: 333,\r\n                        content() {\r\n                            if (_status.cardtag.yuzu && _status.cardtag.yuzu.length)\r\n                                delete _status.cardtag.yuzu;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            setu: {\r\n                mark: true,\r\n                intro: {\r\n                    name: '涩涂',\r\n                    content: 'cards',\r\n                    onunmark: 'throw',\r\n                },\r\n                cardAround: true,\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') >= 2;\r\n                },\r\n                filterCard(card) {\r\n                    let num = 0;\r\n                    for (let i of ui.selected.cards) {\r\n                        num += get.number(i);\r\n                    }\r\n                    return get.number(card) + num < 18;\r\n                },\r\n                discard: false,\r\n                toStorage: true,\r\n                delay: false,\r\n                visible: true,\r\n                complexCard: true,\r\n                selectCard: [1, Infinity],\r\n                check(card) {\r\n                    if (get.number(card) <= 2)\r\n                        return 2 + get.number(card) - get.value(card);\r\n                    return 7 - get.value(card);\r\n                },\r\n                content: [() => {\r\n                        player.markAuto('setu', cards);\r\n                    }, () => {\r\n                        let setus = player.$.setu;\r\n                        Evt.num = setus.length;\r\n                        let num = 1;\r\n                        for (let i of setus) {\r\n                            num *= get.number(i);\r\n                        }\r\n                        if (num > 100)\r\n                            Evt.going = true;\r\n                    }, () => {\r\n                        if (Evt.going === true) {\r\n                            player.unmarkSkill('setu');\r\n                            player.draw(Evt.num);\r\n                            player.chooseTarget('『涩涂』：对一名角色造成一点伤害', true).set('ai', function (target) {\r\n                                let player = _status.event.player;\r\n                                return get.damageEffect(target, player, player);\r\n                            });\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            Evt.target = result.targets[0];\r\n                            Evt.target.damage('nocard');\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    order: 7.5,\r\n                    result: {\r\n                        player: 1,\r\n                    },\r\n                    threaten: 1.5\r\n                }\r\n            },\r\n            junxu: {\r\n                trigger: { player: 'useCard' },\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    return player.getHistory('useCard').length == player.hp;\r\n                },\r\n                content() {\r\n                    player.chooseDrawRecover(2, 1, true, function () {\r\n                        if (player.hp == 1 && player.isDamaged())\r\n                            return 'recover_hp';\r\n                        if (_status.event.check)\r\n                            return 'draw_card';\r\n                        if (player.isDamaged() && player.isPhaseUsing() && player.countCards('hs', card => {\r\n                            return player.getUseValue({ name: 'sha', isCard: true }) > 0;\r\n                        }) >= 2)\r\n                            return 'recover_hp';\r\n                        return 'draw_card';\r\n                    }).set('check', get.tag(trigger.card, 'recover') >= 1 && trigger.targets.includes(player));\r\n                },\r\n                ai: {\r\n                    threaten: 1.5,\r\n                    noShan: true,\r\n                    skillTagFilter(player, tag, arg) {\r\n                        if (tag == 'noShan') {\r\n                            if (player.isHealthy())\r\n                                return true;\r\n                            return false;\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            jingniang: {\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    return player.countCards('he');\r\n                },\r\n                filterCard: true,\r\n                check(card) {\r\n                    if (get.name(card) == 'sha')\r\n                        return 1 - get.value(card);\r\n                    return 7 - get.value(card);\r\n                },\r\n                content() {\r\n                    player.addTempSkill('jingniang_addDamBy');\r\n                    player.addMark('jingniang');\r\n                },\r\n                intro: {\r\n                    name: '醉酒',\r\n                    content: 'mark'\r\n                },\r\n                position: 'he',\r\n                marktext: '酿',\r\n                subSkill: {\r\n                    addDamBy: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                        filter(Evt, player) {\r\n                            return Evt.card && Evt.card.name == 'sha' && player.countMark('jingniang');\r\n                        },\r\n                        content() {\r\n                            trigger.baseDamage += player.countMark('jingniang');\r\n                            if (trigger.addCount !== false) {\r\n                                trigger.addCount = false;\r\n                                if (player.stat[player.stat.length - 1].card.sha > 0) {\r\n                                    player.stat[player.stat.length - 1].card.sha--;\r\n                                }\r\n                            }\r\n                        },\r\n                        onremove(player, skill) {\r\n                            player.removeMark('jingniang', player.countMark('jingniang'), false);\r\n                        },\r\n                    }, 'forced').setT('useCard1'),\r\n                },\r\n                ai: {\r\n                    order: 4,\r\n                    result: {\r\n                        player(player, target) {\r\n                            if (player.getUseValue({ name: 'sha', isCard: true }) > 0 && player.countCards('hs', 'sha') >= 2) {\r\n                                return 1;\r\n                            }\r\n                        },\r\n                    },\r\n                    threaten: 1.2\r\n                }\r\n            },\r\n            tuhui: {\r\n                group: ['tuhuiA', 'tuhuiB'],\r\n            },\r\n            tuhuiA: {\r\n                trigger: { source: 'damageEnd' },\r\n                round: 1,\r\n                filter(Evt, player) {\r\n                    return Evt.player.isIn() && Evt.player != player;\r\n                },\r\n                check(Evt, player) {\r\n                    return get.$a(player, Evt.player) > 0;\r\n                },\r\n                logTarget: 'player',\r\n                content: [() => {\r\n                        ;\r\n                        Evt.targets = [player];\r\n                        Evt.targets.add(trigger.player);\r\n                        Evt.num = player.$.fuyou ? 2 : 1;\r\n                    }, () => {\r\n                        ;\r\n                        Evt.target = Evt.targets.shift();\r\n                        Evt.recover = Evt.target.recover(Evt.num);\r\n                    }, () => {\r\n                        ;\r\n                        if (!Evt.recover.result)\r\n                            Evt.target.draw(Evt.num);\r\n                        if (Evt.targets.length)\r\n                            Evt.goto(1);\r\n                    }],\r\n                ai: {\r\n                    threaten: 1.6,\r\n                    effect: {\r\n                        player(card, player, target, current) {\r\n                            if (get.tag(card, 'damage') == 1 && !player.hasMark('tuhui_roundname') && !target.hujia && target.hp > 1 && get.$a(player, target) > 0) {\r\n                                if (target != player) {\r\n                                    if (target.hasSkillTag('maixie'))\r\n                                        return [1, 1, 0, 3];\r\n                                    return [1, 1, 0, 0.5];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            tuhuiB: {\r\n                trigger: { player: 'damageEnd' },\r\n                round: 1,\r\n                filter(Evt, player) {\r\n                    return Evt.source && Evt.source.isIn() && Evt.source != player;\r\n                },\r\n                check(Evt, player) {\r\n                    return get.$a(player, Evt.source) > 0;\r\n                },\r\n                logTarget: 'source',\r\n                content: [() => {\r\n                        Evt.targets = [player];\r\n                        Evt.targets.add(trigger.source);\r\n                        Evt.num = player.$.fuyou ? 2 : 1;\r\n                    }, () => {\r\n                        Evt.target = Evt.targets.shift();\r\n                        Evt.recover = Evt.target.recover(Evt.num);\r\n                    }, () => {\r\n                        if (!Evt.recover.result)\r\n                            Evt.target.draw(Evt.num);\r\n                        if (Evt.targets.length)\r\n                            Evt.goto(1);\r\n                    }],\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (get.tag(card, 'damage') == 1 && !target.hasMark('tuhuiB_roundcount') && !target.hujia && target.hp > 1 && get.$a(target, player) > 0) {\r\n                                if (target != player)\r\n                                    return [0, 0, 1, 1];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            fuyou: {\r\n                audio: true,\r\n                enable: 'phaseUse',\r\n                unique: true,\r\n                limited: true,\r\n                content: [() => {\r\n                        player.$.fuyou = true;\r\n                        player.awakenSkill('fuyou');\r\n                    }, () => {\r\n                        {\r\n                            let roundname = 'tuhui_roundcount';\r\n                            if (player.hasMark(roundname)) {\r\n                                player.popup('重置');\r\n                                let next = game.createEvent('resetSkill');\r\n                                [next.player, next.resetSkill] = [player, 'tuhui'];\r\n                                next.setContent('resetRound');\r\n                                game.delayx();\r\n                            }\r\n                        }\r\n                    }, () => {\r\n                        {\r\n                            let roundname = 'tuhuiB_roundcount';\r\n                            if (player.hasMark(roundname)) {\r\n                                player.popup('重置');\r\n                                let next = game.createEvent('resetSkill');\r\n                                [next.player, next.resetSkill] = [player, 'tuhuiB'];\r\n                                next.setContent('resetRound');\r\n                                game.delayx();\r\n                            }\r\n                        }\r\n                    }, () => {\r\n                        game.filterPlayer(cur => {\r\n                            cur.addTempSkill('fuyou2');\r\n                        });\r\n                    }],\r\n                ai: {\r\n                    order(item, player) {\r\n                        if (player.hp >= 3 && game.countPlayer(cur => {\r\n                            return get.$a(player, cur) < 0 && cur.hp <= 1;\r\n                        }))\r\n                            return 10;\r\n                        return 0;\r\n                    },\r\n                    result: { player: 1 },\r\n                }\r\n            },\r\n            fuyou2: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('mark', {\r\n                marktext: '幼',\r\n                intro: {\r\n                    name: '复幼',\r\n                    content: '无法回复体力',\r\n                },\r\n                trigger: {\r\n                    player: 'recoverBegin'\r\n                },\r\n                content() {\r\n                    trigger.cancel();\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (get.tag(card, 'recover'))\r\n                                return 'zeroplayertarget';\r\n                        }\r\n                    }\r\n                }\r\n            }, 'mark', 'forced'),\r\n            yinxu: {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = true;\r\n                },\r\n                hiddenCard(player, name) {\r\n                    if (name == 'sha' && lib.inpile.includes(name)) {\r\n                        if (player.$.yinxu == true)\r\n                            return player.countCards('h', { type: ['trick', 'delay'] });\r\n                        if (player.$.yinxu == false)\r\n                            return player.countCards('h', { type: 'equip' });\r\n                    }\r\n                },\r\n                enable: ['chooseToUse'],\r\n                filter(Evt, player) {\r\n                    return lib.inpile.includes('sha');\r\n                },\r\n                filterCard(card, player) {\r\n                    if (!player.$.yinxu)\r\n                        return get.type(card) == 'equip';\r\n                    return get.type2(card) == 'trick';\r\n                },\r\n                selectCard: 1,\r\n                check(card) {\r\n                    return 6 - get.value(card);\r\n                },\r\n                position: 'hes',\r\n                viewAs: { name: 'sha' },\r\n                onuse(result, player) {\r\n                    player.$.yinxu = !player.$.yinxu;\r\n                },\r\n                mod: {\r\n                    targetInRange(card, player, target) {\r\n                        if (_status.event.skill == 'yinxu')\r\n                            return true;\r\n                    },\r\n                    cardUsable(card, player, num) {\r\n                        if (_status.event.skillBy == 'yinxu' || _status.event.skill == 'yinxu')\r\n                            return Infinity;\r\n                    },\r\n                },\r\n                ai: {\r\n                    useSha: 1,\r\n                    result: { player: 1 },\r\n                },\r\n                group: 'yinxu_shaMiss',\r\n                subSkill: {\r\n                    shaMiss: {\r\n                        trigger: { player: 'shaMiss' },\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            return Evt.skill == 'yinxu';\r\n                        },\r\n                        content: [() => {\r\n                                player.chooseTarget(`『吟虚』：令你或${get.$t(trigger.target)}调整手牌至上限`, function (card, player, target) {\r\n                                    if (![player, _status.event.target0].includes(target))\r\n                                        return false;\r\n                                    return target.getHandcardLimit() != target.countCards('h');\r\n                                }, function (target) {\r\n                                    let player = _status.event.player;\r\n                                    return (target.getHandcardLimit() - target.countCards('h')) * get.$a(player, target);\r\n                                }).set('target0', trigger.target);\r\n                            }, () => {\r\n                                if (result.bool) {\r\n                                    Evt.target = result.targets[0];\r\n                                    player.logSkill('yinxu', Evt.target);\r\n                                    let num = Evt.target.getHandcardLimit() - Evt.target.countCards('h');\r\n                                    if (num > 0) {\r\n                                        Evt.target.draw(num);\r\n                                    }\r\n                                    else if (num < -0) {\r\n                                        Evt.target.chooseToDiscard(-num, true);\r\n                                    }\r\n                                }\r\n                            }],\r\n                    }\r\n                }\r\n            },\r\n            maozhi: {\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('maozhi_used'))\r\n                        return false;\r\n                    return player.countCards('he') > 0;\r\n                },\r\n                filterCard(card) {\r\n                    for (let i = 0; i < ui.selected.cards.length; i++) {\r\n                        if (get.type2(card) == get.type2(ui.selected.cards[i]))\r\n                            return false;\r\n                    }\r\n                    return true;\r\n                },\r\n                check(card) {\r\n                    if (ui.selected.cards.length)\r\n                        return 7 - get.value(card);\r\n                    return 5 - get.value(card);\r\n                },\r\n                complexCard: true,\r\n                selectCard: 2,\r\n                position: 'he',\r\n                filterTarget(card, player, target) {\r\n                    return target != player;\r\n                },\r\n                discard: true,\r\n                content: [() => {\r\n                        Evt.suits = get.suit3(cards);\r\n                        if (get.color3(cards).length <= 1)\r\n                            player.addTempSkill('maozhi_used');\r\n                    }, () => {\r\n                        if (Evt.suits.includes('heart')) {\r\n                            target.loseHp();\r\n                            target.draw(3);\r\n                            game.delay(0.5);\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.suits.includes('diamond')) {\r\n                            if (target.hasUseTarget('sha')) {\r\n                                target.chooseUseTarget('sha', true, false, '『茆织』：视为使用一张【杀】');\r\n                                game.delay(0.5);\r\n                            }\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.suits.includes('spade')) {\r\n                            target.showHandcards('『茆织』展示手牌');\r\n                            target.link(true);\r\n                            game.delay(0.5);\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.suits.includes('club')) {\r\n                            target.chooseCard('he', [3, Infinity], true, '『茆织』：重铸至少三张牌').ai = get.unuseful3;\r\n                            game.delay(0.5);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (result.bool && result.cards) {\r\n                            target.lose(result.cards, ui.discardPile).set('visible', true);\r\n                            target.$throw(result.cards);\r\n                            game.log(target, '将', result.cards, '置入了弃牌堆');\r\n                            target.draw(result.cards.length);\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    order: 2,\r\n                    result: {\r\n                        target(player, target) {\r\n                            let cards = ui.selected.cards;\r\n                            let suits = get.suit3(cards);\r\n                            if (target.hp == 1 && suits.includes('heart'))\r\n                                return -1;\r\n                            let result = 0;\r\n                            if (suits.includes('heart')) {\r\n                                if (target.countCards('h') < 3)\r\n                                    result += 1;\r\n                                else\r\n                                    result -= 0.2;\r\n                            }\r\n                            if (suits.includes('diamond')) {\r\n                                result += target.getUseValue({ name: 'sha' }) / 2;\r\n                            }\r\n                            if (suits.includes('spade')) {\r\n                                if (!target.isLinked())\r\n                                    result -= 0.5;\r\n                            }\r\n                            if (suits.includes('club')) {\r\n                                if (target.countCards('h') < 3)\r\n                                    result -= 0.2;\r\n                                else\r\n                                    result += 1;\r\n                            }\r\n                            return result;\r\n                        }\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    used: {}\r\n                }\r\n            },\r\n            baifei: {\r\n                marktext: '妃',\r\n                intro: {\r\n                    name: '已发动『拜妃』的目标角色',\r\n                    mark(dialog, storage, player) {\r\n                        if (storage && storage.length) {\r\n                            let name = storage.map(cur => get.name(cur));\r\n                            dialog.addSmall([name, 'character']);\r\n                        }\r\n                    },\r\n                    content(storage, player) {\r\n                        return `已『拜妃』${get.cnNumber(storage.length)}名角色`;\r\n                    },\r\n                },\r\n                trigger: { source: 'damageAfter', player: 'damageAfter' },\r\n                zhuSkill: true,\r\n                logTarget(Evt, player) {\r\n                    if (player == Evt.source)\r\n                        return [player, Evt.player];\r\n                    return [player, Evt.source];\r\n                },\r\n                filter(Evt, player) {\r\n                    if (!player.hasZhuSkill('baifei'))\r\n                        return false;\r\n                    let characters = player.getStorage('baifei');\r\n                    if (player == Evt.source)\r\n                        return !characters.includes(Evt.player);\r\n                    else if (Evt.source)\r\n                        return !characters.includes(Evt.source);\r\n                },\r\n                content: [() => {\r\n                        if (!player.$.baifei)\r\n                            player.$.baifei = [];\r\n                        if (player == trigger.source)\r\n                            Evt.target = trigger.player;\r\n                        else\r\n                            Evt.target = trigger.source;\r\n                        player.chooseDrawRecover(2, 1, true);\r\n                    }, () => {\r\n                        if (result) {\r\n                            player.$.baifei.add(Evt.target);\r\n                            player.markSkill('baifei');\r\n                        }\r\n                    }],\r\n            },\r\n            bianyin: {\r\n                trigger: { player: 'useCardBegin' },\r\n                filter(Evt, player) {\r\n                    return Evt.cards && Evt.cards.length == 1;\r\n                },\r\n                usable: 1,\r\n                content: [() => {\r\n                        player.chooseCard('he', get.$pro2('bianyin'), true);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.suit = get.suit(result.cards[0]);\r\n                            player.lose(result.cards, ui.discardPile).set('visible', true);\r\n                            player.$throw(result.cards, 1000);\r\n                            game.log(player, '将', result.cards, '置入了弃牌堆');\r\n                            player.draw();\r\n                            trigger.card.suit = Evt.suit;\r\n                            trigger.cards[0].suit = Evt.suit;\r\n                        }\r\n                    }],\r\n            },\r\n            shabai: {\r\n                trigger: {\r\n                    player: ['loseAfter'],\r\n                    global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter'],\r\n                },\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    var _a;\r\n                    let evt = Evt.getl(player);\r\n                    return (_a = evt === null || evt === void 0 ? void 0 : evt.cards) === null || _a === void 0 ? void 0 : _a.filter(card => {\r\n                        if (_status.currentPhase == player)\r\n                            return get.color(card) == 'red';\r\n                        return get.color(card) == 'black';\r\n                    }).length;\r\n                },\r\n                content: [() => {\r\n                        let evt = trigger.getl(player);\r\n                        Evt.num = evt.cards.filter(card => {\r\n                            if (_status.currentPhase == player)\r\n                                return get.color(card) == 'red';\r\n                            return get.color(card) == 'black';\r\n                        }).length;\r\n                    }, () => {\r\n                        if (_status.currentPhase == player) {\r\n                            player.draw();\r\n                        }\r\n                        else {\r\n                            player.moveCard();\r\n                        }\r\n                    }, () => {\r\n                        if (_status.currentPhase != player && !result.bool) {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (--Evt.num > 0)\r\n                            Evt.goto(1);\r\n                    }],\r\n            },\r\n            zaiying: {\r\n                trigger: {\r\n                    global: \"gainAfter\",\r\n                },\r\n                logTarget: 'player',\r\n                filter(Evt, player) {\r\n                    if (Evt.player == player)\r\n                        return false;\r\n                    return _status.currentPhase == player && player.canCompare(Evt.player);\r\n                },\r\n                content: [() => {\r\n                        Evt.tar = trigger.player;\r\n                        player.chooseToCompare([Evt.tar]).callback = lib.skill.zaiying.callback;\r\n                    }],\r\n                callback() {\r\n                    if (Evt.winner == player) {\r\n                        player.drawTo(player.getHandcardLimit());\r\n                    }\r\n                    else {\r\n                        player.recover();\r\n                    }\r\n                    if (Evt.winner == target) {\r\n                        target.drawTo(target.getHandcardLimit());\r\n                    }\r\n                    else {\r\n                        target.recover();\r\n                    }\r\n                },\r\n                group: 'zaiying_phaseUse',\r\n                subSkill: {\r\n                    phaseUse: {\r\n                        enable: 'phaseUse',\r\n                        usable: 1,\r\n                        filterTarget(card, player, target) {\r\n                            return player.canCompare(target);\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return player.countCards('h') > 0;\r\n                        },\r\n                        content() {\r\n                            player.chooseToCompare([target]).callback = lib.skill.zaiying.callback;\r\n                        },\r\n                        ai: {\r\n                            order: 6,\r\n                            result: {\r\n                                player(player, target) {\r\n                                    if (!player.needsToDiscard() || player.isDamaged())\r\n                                        return 1;\r\n                                },\r\n                                target(player, target) {\r\n                                    if (!target.needsToDiscard())\r\n                                        return 1;\r\n                                }\r\n                            },\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            zhengen: {\r\n                intro: {\r\n                    name: '已发动『政恩』的目标角色',\r\n                    mark(dialog, storage, player) {\r\n                        if (storage && storage.length) {\r\n                            let name = storage.map(cur => get.name(cur));\r\n                            dialog.addSmall([name, 'character']);\r\n                        }\r\n                    },\r\n                    content(storage, player) {\r\n                        return `已『政恩』${get.cnNumber(storage.length)}名角色`;\r\n                    },\r\n                },\r\n                forced: true,\r\n                dutySkill: true,\r\n                trigger: { source: 'damageAfter', player: 'damageAfter' },\r\n                logTarget(Evt, player) {\r\n                    if (player == Evt.source)\r\n                        return [player, Evt.player];\r\n                    return [player, Evt.source];\r\n                },\r\n                filter(Evt, player) {\r\n                    let characters = player.getStorage('zhengen');\r\n                    if (player == Evt.source)\r\n                        return player.countCards('h') && Evt.player.countDiscardableCards(player, 'ej') && !characters.includes(Evt.player);\r\n                    else if (Evt.source)\r\n                        return player.countCards('h') && Evt.source.countDiscardableCards(player, 'ej') && !characters.includes(Evt.source);\r\n                },\r\n                content: [() => {\r\n                        if (!player.$.zhengen)\r\n                            player.$.zhengen = [];\r\n                        if (!player.$.zhengen_achieve)\r\n                            player.$.zhengen_achieve = [];\r\n                        if (player == trigger.source)\r\n                            Evt.target = trigger.player;\r\n                        else\r\n                            Evt.target = trigger.source;\r\n                        player.chooseToDiscard(true, '『政恩』：弃置一张手牌');\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.$.zhengen_achieve.addArray(result.cards);\r\n                            player.discardPlayerCard(Evt.target, 'ej', true);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (result.bool && result.links) {\r\n                            player.$.zhengen.add(Evt.target);\r\n                            player.markSkill('zhengen');\r\n                            player.$.zhengen_achieve.addArray(result.links);\r\n                            player.markSkill('zhengen_achieve');\r\n                        }\r\n                    }],\r\n                group: ['zhengen_achieve', 'zhengen_fail'],\r\n                subSkill: {\r\n                    achieve: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                        intro: {\r\n                            name: '已发动『政恩』的弃置卡牌',\r\n                            content: 'cards',\r\n                        },\r\n                        trigger: { global: 'gainAfter' },\r\n                        filter(Evt, player) {\r\n                            let cards = player.getStorage('zhengen_achieve');\r\n                            let check = false;\r\n                            cards.forEach(card => {\r\n                                let num = get.number(card);\r\n                                if (cards.filter(cur => get.number(cur) == num).length >= 4)\r\n                                    check = true;\r\n                            });\r\n                            return check;\r\n                        },\r\n                        skillAnimation: true,\r\n                        animationColor: 'wood',\r\n                        content: [() => {\r\n                                game.log(player, '成功完成使命');\r\n                                let num = player.countCards('h') - player.getHandcardLimit();\r\n                                if (num > 0) {\r\n                                    player.draw(num);\r\n                                }\r\n                                else if (num < 0) {\r\n                                    player.chooseToDiscard(num);\r\n                                }\r\n                            }, () => {\r\n                                player.$.zhengen = [];\r\n                                player.markSkill('zhengen');\r\n                                player.$.zhengen_achieve = [];\r\n                                player.markSkill('zhengen_achieve');\r\n                            }],\r\n                    }, 'forced').setI([]),\r\n                    fail: {\r\n                        trigger: { player: 'recoverAfter' },\r\n                        direct: true,\r\n                        forceDie: true,\r\n                        filter(Evt, player) {\r\n                            return Evt.result && player.isHealthy() && player.countCards('h') > 0;\r\n                        },\r\n                        content: [() => {\r\n                                game.log(player, '使命失败');\r\n                                player.$.zhengen = [];\r\n                                player.unmarkSkill('zhengen');\r\n                                player.$.zhengen_achieve = [];\r\n                                player.unmarkSkill('zhengen_achieve');\r\n                                player.awakenSkill('zhengen');\r\n                                Evt.num = player.countCards('h');\r\n                                player.chooseTarget(Evt.num, `『政恩』：令${get.cnNumber(Evt.num)}名角色横置`, true, function (card, player, target) {\r\n                                    return !target.isLinked();\r\n                                }, function (target) {\r\n                                    let player = _status.event.player, num = _status.event.num;\r\n                                    return get.$a(player, target) / 2 + num * get.damageEffect(target, player, player);\r\n                                }).set('num', Evt.num);\r\n                            }, () => {\r\n                                if (result.bool) {\r\n                                    let targets = result.targets;\r\n                                    player.logSkill('zhengen_fail', targets);\r\n                                    while (targets.length) {\r\n                                        let target = targets.shift();\r\n                                        target.link();\r\n                                        target.draw();\r\n                                    }\r\n                                }\r\n                            }, () => {\r\n                                player.damage(player.countCards('h'), 'fire');\r\n                            }],\r\n                    },\r\n                },\r\n            },\r\n            jiezou: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('regard', {\r\n                mod: {\r\n                    maxHandcardFinal(player, num) {\r\n                        return num + game.countPlayer(cur => cur.inRangeOf(player));\r\n                    }\r\n                },\r\n                intro: {\r\n                    markcount(storage, player) {\r\n                        return game.countPlayer(cur => cur.inRangeOf(player));\r\n                    }\r\n                }\r\n            }),\r\n            xtguyong: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return game.hasPlayer(cur => cur.countCards('h') < player.countCards('h')\r\n                        || cur.countCards('e') < player.countCards('e')\r\n                        || cur.countCards('j') < player.countCards('j'));\r\n                },\r\n                content: [() => {\r\n                        player.chooseTarget(get.$pro2('xtguyong'), (card, player, tar) => tar.countCards('h') < player.countCards('h')\r\n                            || tar.countCards('e') < player.countCards('e')\r\n                            || tar.countCards('j') < player.countCards('j'), tar => tar.countCards('j') < player.countCards('j'));\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result === null || result === void 0 ? void 0 : result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('xtguyong', Evt.target);\r\n                            Evt.position = '';\r\n                            for (let i of ['h', 'e', 'j']) {\r\n                                if (Evt.target.countCards(i) < player.countCards(i))\r\n                                    Evt.position += i;\r\n                            }\r\n                            Evt.num = Evt.position.length;\r\n                            player.turnOver();\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (Evt.num === 0)\r\n                            Evt.finish();\r\n                        else {\r\n                            Evt.target.discardPlayerCard(player, Evt.num, Evt.position, true).set('filterButton', button => {\r\n                                for (var i = 0; i < ui.selected.buttons.length; i++) {\r\n                                    if (get.position(button.link) == get.position(ui.selected.buttons[i].link))\r\n                                        return false;\r\n                                }\r\n                                return true;\r\n                            });\r\n                        }\r\n                    }, () => {\r\n                        Evt.num = result.links.length;\r\n                        if (Evt.num === 0)\r\n                            Evt.finish();\r\n                        else {\r\n                            player.chooseTarget(`令攻击范围内至多${get.cnNumber(Evt.num)}名角色受到${Evt.num}点伤害`, [1, Evt.num], (card, player, tar) => tar.inRangeOf(player), tar => -get.$a2(tar));\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result === null || result === void 0 ? void 0 : result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            Evt.targets = result.targets.slice(0);\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.targets.length) {\r\n                            let target = Evt.targets.shift();\r\n                            player.line(target, 'fire');\r\n                            target.damage(Evt.num);\r\n                            Evt.redo();\r\n                        }\r\n                    }],\r\n            }, 'direct').setT('phaseZhunbeiBegin'),\r\n            dizuo: {\r\n                trigger: { player: 'useCard' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return get.type(Evt.card) == 'equip' && game.hasPlayer(cur => {\r\n                        return cur != player && get.$dis(cur, player) <= 1;\r\n                    });\r\n                },\r\n                content: [() => {\r\n                        player.chooseTarget(get.$pro2('dizuo'), function (card, player, target) {\r\n                            return target != player && get.$dis(target, player) <= 1;\r\n                        }, function (target) {\r\n                            let player = _status.event.player, att = get.$a(player, target);\r\n                            if (att > 0 && target.countCards('he', { type: 'equip' }))\r\n                                return att * 2;\r\n                            if (!target.countCards('he', { type: 'equip' }) && player.hasCard(card => {\r\n                                if (get.info(card).selectTarget == '-1')\r\n                                    return 0;\r\n                                return get.effect(target, card, player, player) > 0;\r\n                            }))\r\n                                return 1 - att / 2;\r\n                            return 0;\r\n                        });\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('dizuo', Evt.target);\r\n                            game.delayx();\r\n                            Evt.target.chooseCard('he', { type: 'equip' }).set('ai', card => {\r\n                                return 6 - get.value(card);\r\n                            }).set('prompt', `『帝座』：将一张装备牌交给${get.$t(player.name)}并摸两张牌，或成为其下一张牌的额外目标`);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (result.bool && result.cards && result.cards.length) {\r\n                            Evt.target.give(result.cards, player, true);\r\n                            Evt.target.draw(2);\r\n                        }\r\n                        else {\r\n                            if (!Evt.target.hasSkill('dizuo_mark')) {\r\n                                Evt.target.addSkill('dizuo_mark');\r\n                                game.swapSeat(player, Evt.target);\r\n                            }\r\n                            player.$.dizuo_addTarget = Evt.target;\r\n                            player.markSkill('dizuo_addTarget');\r\n                        }\r\n                    }],\r\n                group: 'dizuo_addTarget',\r\n                subSkill: {\r\n                    mark: {},\r\n                    addTarget: {\r\n                        mark: 'character',\r\n                        intro: {\r\n                            content: '下一张牌的额外目标：$'\r\n                        },\r\n                        trigger: { player: 'useCard1' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return player.$.dizuo_addTarget;\r\n                        },\r\n                        logTarget(Evt, player) {\r\n                            return player.$.dizuo_addTarget;\r\n                        },\r\n                        content: [() => {\r\n                                if (trigger.targets && trigger.targets.length) {\r\n                                    trigger.targets.add(player.$.dizuo_addTarget);\r\n                                }\r\n                            }, () => {\r\n                                delete player.$.dizuo_addTarget;\r\n                                player.unmarkSkill('dizuo_addTarget');\r\n                            }],\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten: 1.1,\r\n                    effect: {\r\n                        player(card, player, target, current) {\r\n                            if (player.$.dizuo_addTarget && target != player.$.dizuo_addTarget) {\r\n                                _status.dizuo = true;\r\n                                let eff = get.effect(player.$.dizuo_addTarget, card, player, player);\r\n                                delete _status.dizuo;\r\n                                if (current > 0 || eff > 0)\r\n                                    return [1, eff];\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            hongtie: {\r\n                trigger: { player: 'useCardToPlayered' },\r\n                filter(Evt, player) {\r\n                    if (!Evt.isFirstTarget)\r\n                        return false;\r\n                    if (Evt.targets.length % 2 != 0)\r\n                        return false;\r\n                    return true;\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        player.chooseTarget(get.$pro2('hongtie'), function (card, player, target) {\r\n                            return _status.event.targets.includes(target);\r\n                        }).set('ai', function (target) {\r\n                            let player = _status.event.player;\r\n                            return get.damageEffect(target, player, player);\r\n                        }).set('targets', trigger.targets);\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('hongtie', Evt.target);\r\n                            Evt.target.damage();\r\n                            game.delayx();\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    threaten: 1.1,\r\n                },\r\n            },\r\n            jiujiu: {\r\n                trigger: { player: 'phaseUseBegin' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return player.countCards('he', { type: 'equip' });\r\n                },\r\n                content: [() => {\r\n                        player.chooseCardTarget({\r\n                            position: 'he',\r\n                            filterCard: { type: 'equip' },\r\n                            filterTarget(card, player, target) {\r\n                                return true;\r\n                            },\r\n                            ai2(target) {\r\n                                let player = _status.event.player, att = get.$a(player, target);\r\n                                if (att > 0 && target.countCards('he', { type: 'equip' }) && !player.needsToDiscard())\r\n                                    return att * 1.5;\r\n                                if (!target.countCards('he', { type: 'equip' }))\r\n                                    return get.damageEffect(target, player, player) - 1;\r\n                                return 0;\r\n                            }\r\n                        }).set('prompt', get.$pro2('jiujiu'));\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && result.cards && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            Evt.target = result.targets[0];\r\n                            Evt.card = result.cards[0];\r\n                            player.logSkill('jiujiu', Evt.target);\r\n                            player.lose(Evt.card, ui.special);\r\n                            game.delayx();\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        let card = Evt.card;\r\n                        ui.cardPile.insertBefore(card.fix(), ui.cardPile.firstChild);\r\n                        game.updateRoundNumber();\r\n                        trigger.cancel();\r\n                    }, () => {\r\n                        Evt.target.chooseCard('he', { type: 'equip' }).set('ai', card => {\r\n                            return 8 - get.value(card);\r\n                        }).set('prompt', `『臼啾』：将一张装备牌交给${get.$t(player.name)}并摸两张牌，或受到一点伤害`);\r\n                    }, () => {\r\n                        if (result.bool && result.cards && result.cards.length) {\r\n                            Evt.target.give(result.cards, player, true);\r\n                            Evt.target.draw(2);\r\n                        }\r\n                        else {\r\n                            player.line(Evt.target);\r\n                            Evt.target.damage('nocard');\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    effect: {\r\n                        player(card, player, target, current) {\r\n                            if (player.$.dizuo_addTarget && target != player.$.dizuo_addTarget) {\r\n                                let eff = get.effect(player.$.dizuo_addTarget, card, player, player);\r\n                                if (current > 0 || eff > 0)\r\n                                    return [1, eff];\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            qitong: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return player.getHistory('sourceDamage').length == 0;\r\n                },\r\n                logTarget(Evt, player) {\r\n                    return player.getNext();\r\n                },\r\n                content: [() => {\r\n                        Evt.target = player.getNext();\r\n                        if (player.$.qitong) {\r\n                            player.swapEquip(Evt.target);\r\n                            Evt.finish();\r\n                        }\r\n                        else {\r\n                            game.swapSeat(player, Evt.target);\r\n                        }\r\n                        player.$.qitong = !player.$.qitong;\r\n                    }, () => {\r\n                        if ((player.next || player.getNext()) == _status.roundStart) {\r\n                            player.drawTo(player.getHandcardLimit());\r\n                            player.phaseUse();\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    threaten: 1.1,\r\n                },\r\n            }).setI(true).setT('phaseJieshuBegin'),\r\n            tianlve: {\r\n                audio: true,\r\n                trigger: { player: 'phaseUseBegin' },\r\n                priority: 199,\r\n                direct: true,\r\n                content: [() => {\r\n                        player.chooseTarget(get.$pro2('tianlve'), function (card, player, target) {\r\n                            return target != player;\r\n                        }, function (target) {\r\n                            let player = _status.event.player;\r\n                            return get.recoverEffect(target, player, player);\r\n                        });\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            player.logSkill('tianlve', result.targets);\r\n                            Evt.target = result.targets[0];\r\n                            Evt.target.recover();\r\n                            player.$.tianlve_pcr = Evt.target;\r\n                            player.addTempSkill('tianlve_pcr');\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    pcr: {\r\n                        mark: 'character',\r\n                        intro: {\r\n                            name: '甜略',\r\n                            content: '本阶段内你对$使用牌无距离限制，且指定其为唯一目标时，可以摸一张牌或增加一个额外目标',\r\n                        },\r\n                        onremove(player, skill) {\r\n                            player.unmarkSkill('tianlve_pcr');\r\n                            delete player.$.tianlve_pcr;\r\n                        },\r\n                        trigger: { player: 'useCard' },\r\n                        priority: 199,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            let card = Evt.card, info = get.info(card);\r\n                            if (info.allowMultiple == false)\r\n                                return false;\r\n                            return Evt.targets && Evt.targets.length == 1 && Evt.targets[0] == player.$.tianlve_pcr;\r\n                        },\r\n                        content: [() => {\r\n                                let prompt2 = `为${get.$t(trigger.card)}增加一个目标`;\r\n                                player.chooseTarget(get.$pro('tianlve'), function (card, player, target) {\r\n                                    if (_status.event.targets.includes(target))\r\n                                        return false;\r\n                                    return lib.filter.targetEnabled2(_status.event.card, player, target);\r\n                                }).set('prompt2', prompt2).set('ai', function (target) {\r\n                                    let player = _status.event.player;\r\n                                    return get.effect(target, _status.event.card, player, player);\r\n                                }).set('targets', trigger.targets).set('card', trigger.card);\r\n                            }, () => {\r\n                                var _a;\r\n                                if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                                    if (!Evt.isMine())\r\n                                        game.delayx();\r\n                                    Evt.targets = result.targets;\r\n                                }\r\n                            }, () => {\r\n                                if (Evt.targets) {\r\n                                    player.logSkill('tianlve', Evt.targets);\r\n                                    trigger.targets.addArray(Evt.targets);\r\n                                }\r\n                                else {\r\n                                    player.draw();\r\n                                }\r\n                            }],\r\n                        mod: {\r\n                            targetInRange(card, player, target) {\r\n                                if (target == player.$.tianlve_pcr)\r\n                                    return true;\r\n                            },\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            luxian: {\r\n                audio: true,\r\n                group: 'P_SP',\r\n                trigger: { player: 'phaseZhunbeiBegin' },\r\n                unique: true,\r\n                limited: true,\r\n                skillAnimation: true,\r\n                animationColor: 'orange',\r\n                forceunique: true,\r\n                filter(Evt, player) {\r\n                    return player.isDamaged();\r\n                },\r\n                check(Evt, player) {\r\n                    return player.countCards('hes') >= 5 || player.hp <= 1;\r\n                },\r\n                content: [() => {\r\n                        let list;\r\n                        if (_status.characterlist) {\r\n                            list = [];\r\n                            for (let i of _status.characterlist) {\r\n                                let info = lib.character[i];\r\n                                if (info[1] == 'psp' || info[4].includes('P_SP'))\r\n                                    list.push(i);\r\n                            }\r\n                        }\r\n                        else if (_status.connectMode) {\r\n                            list = get.charactersOL(function (i) {\r\n                                let info = lib.character[i];\r\n                                return !(info[1] == 'psp' || info[4].includes('P_SP'));\r\n                            });\r\n                        }\r\n                        else {\r\n                            list = get.gainableCharacters(function (info) {\r\n                                return info[1] == 'psp' || info[4].includes('P_SP');\r\n                            });\r\n                        }\r\n                        let players = game.players.concat(game.dead);\r\n                        for (let i = 0; i < players.length; i++) {\r\n                            if (players[i] != player && players[i].group && players[i].group == 'psp') {\r\n                                list.add(players[i].name);\r\n                                list.add(players[i].name1);\r\n                                list.add(players[i].name2);\r\n                            }\r\n                        }\r\n                        list.remove(player.name);\r\n                        list.remove(player.name1);\r\n                        list.remove(player.name2);\r\n                        list.remove('Pudding');\r\n                        if (list.length) {\r\n                            player.chooseButton(true).set('ai', function (button) {\r\n                                return 5 || 0;\r\n                            }).set('createDialog', ['『颅祭』：获得其中一名角色所有技能', [list.randomGets(3), 'character']]);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        var _a, _b;\r\n                        var _c;\r\n                        if ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            player.$.luxian = true;\r\n                            player.awakenSkill('luxian');\r\n                            player.loseMaxHp();\r\n                            for (let i of result.links) {\r\n                                if (_status.characterlist) {\r\n                                    _status.characterlist.remove(i);\r\n                                }\r\n                                let skills = lib.character[i][3];\r\n                                for (let j of skills) {\r\n                                    player.addTempSkill(j, { player: 'phaseDiscardAfter' });\r\n                                }\r\n                                player.flashAvatar('luxian', i);\r\n                            }\r\n                            (_b = (_c = player.$).luxian_pcr) !== null && _b !== void 0 ? _b : (_c.luxian_pcr = []);\r\n                            player.$.luxian_pcr.addArray(result.links);\r\n                            player.$.P_SP.addArray(result.links);\r\n                            player.addTempSkill('luxian_pcr', { player: 'phaseDiscardAfter' });\r\n                            player.markSkill('P_SP');\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    pcr: {\r\n                        onremove(player, skill) {\r\n                            let storage = player.getStorage(skill);\r\n                            if (player.hasSkill('P_SP', null, null, false) && storage.length) {\r\n                                if (_status.characterlist)\r\n                                    _status.characterlist.addArray(storage);\r\n                                player.$.P_SP.removeArray(storage);\r\n                                if (player.$.P_SP.length == 0) {\r\n                                    player.unmarkSkill('P_SP');\r\n                                }\r\n                                else {\r\n                                    player.markSkill('P_SP');\r\n                                }\r\n                                delete player.$[skill];\r\n                            }\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            erni: {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = 1;\r\n                },\r\n                group: ['erni_going', 'erni_change'],\r\n                hiddenCard(player, name) {\r\n                    switch (player.$.erni) {\r\n                        case 1:\r\n                            if (name == 'sha')\r\n                                return player.countCards('h');\r\n                            break;\r\n                        case 2:\r\n                            if (name == 'shan')\r\n                                return player.countCards('h');\r\n                            break;\r\n                        case 3:\r\n                            if (name == 'tao')\r\n                                return player.countCards('h');\r\n                            break;\r\n                    }\r\n                },\r\n                ai: {\r\n                    useSha: 1,\r\n                    skillTagFilter(player, tag) {\r\n                        switch (tag) {\r\n                            case 'respondSha': {\r\n                                if (player.$.erni != 1 || !player.countCards('h'))\r\n                                    return false;\r\n                                break;\r\n                            }\r\n                            case 'respondShan': {\r\n                                if (player.$.erni != 2 || !player.countCards('h'))\r\n                                    return false;\r\n                                break;\r\n                            }\r\n                            case 'save': {\r\n                                if (player.$.erni != 3 || !player.countCards('h'))\r\n                                    return false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    },\r\n                    result: { player: 1 },\r\n                    respondSha: true,\r\n                    respondShan: true,\r\n                    save: true,\r\n                },\r\n                subSkill: {\r\n                    going: {\r\n                        enable: ['chooseToUse', 'chooseToRespond'],\r\n                        prompt(Evt, player) {\r\n                            player || (player = Evt.player);\r\n                            let str = get.skillInfoTranslation('erni', player);\r\n                            return str;\r\n                        },\r\n                        viewAs(cards, player) {\r\n                            let name = null;\r\n                            let suit = get.suit(cards[0], player);\r\n                            switch (player.$.erni) {\r\n                                case 1:\r\n                                    name = 'sha';\r\n                                    break;\r\n                                case 2:\r\n                                    name = 'shan';\r\n                                    break;\r\n                                case 3:\r\n                                    name = 'tao';\r\n                                    break;\r\n                            }\r\n                            if (name)\r\n                                return { name: name, suit: suit };\r\n                            return null;\r\n                        },\r\n                        viewAsFilter(player) {\r\n                            let cards = player.getCards('h');\r\n                            if (!cards.length)\r\n                                return false;\r\n                            let filter = Evt.filterCard;\r\n                            let name = null;\r\n                            switch (player.$.erni) {\r\n                                case 1:\r\n                                    name = 'sha';\r\n                                    break;\r\n                                case 2:\r\n                                    name = 'shan';\r\n                                    break;\r\n                                case 3:\r\n                                    name = 'tao';\r\n                                    break;\r\n                            }\r\n                            for (let i of cards) {\r\n                                let suit = get.suit(i, player);\r\n                                if (filter({ name: name, suit: suit }, player, _status.event))\r\n                                    return true;\r\n                            }\r\n                            return false;\r\n                        },\r\n                        check(card) {\r\n                            return 7 - get.value(card);\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return player.countCards('h');\r\n                        },\r\n                        filterCard(card, player, Evt) {\r\n                            Evt = Evt || _status.event;\r\n                            let filter = Evt._backup.filterCard;\r\n                            let name = null;\r\n                            let suit = get.suit(card, player);\r\n                            switch (player.$.erni) {\r\n                                case 1:\r\n                                    name = 'sha';\r\n                                    break;\r\n                                case 2:\r\n                                    name = 'shan';\r\n                                    break;\r\n                                case 3:\r\n                                    name = 'tao';\r\n                                    break;\r\n                            }\r\n                            if (filter({ name: name, suit: suit }, player, Evt))\r\n                                return true;\r\n                            return false;\r\n                        },\r\n                        precontent: [() => {\r\n                                Evt.cards = Evt.result.cards.slice(0);\r\n                                player.$throw(Evt.cards);\r\n                                player.lose(Evt.cards, ui.ordering);\r\n                                Evt.result.card.cards = [];\r\n                                Evt.result.cards = [];\r\n                                delete Evt.result.card.number;\r\n                            }, () => {\r\n                                game.broadcast(function () {\r\n                                    ui.arena.classList.add('thrownhighlight');\r\n                                });\r\n                                let cards = Evt.cards;\r\n                                ui.arena.classList.add('thrownhighlight');\r\n                                game.addVideo('thrownhighlight1');\r\n                                player.showCards(cards, '『耳匿』展示手牌');\r\n                                while (cards.length) {\r\n                                    ui.cardPile.insertBefore(cards.pop().fix(), ui.cardPile.firstChild);\r\n                                }\r\n                                game.updateRoundNumber();\r\n                            }, () => {\r\n                                game.broadcastAll(function () {\r\n                                    ui.arena.classList.remove('thrownhighlight');\r\n                                });\r\n                                game.addVideo('thrownhighlight2');\r\n                                if (Evt.clear !== false) {\r\n                                    game.broadcastAll(ui.clear);\r\n                                }\r\n                                if (player.$.erni != 3)\r\n                                    player.$.erni++;\r\n                                else\r\n                                    player.$.erni = 1;\r\n                            }],\r\n                    },\r\n                    change: {\r\n                        trigger: { player: ['shouruAfter', 'chonghuangAfter', 'baoxiaoAfter', 'tianlveAfter', 'luxianAfter', 'quankaiAfter', 'canxinAfter', 'useSkillAfter'] },\r\n                        priority: 199,\r\n                        prompt2: '转换一次『耳匿』',\r\n                        filter(Evt, player) {\r\n                            let name = Evt.name;\r\n                            if (name == 'useSkill')\r\n                                name = Evt.skill;\r\n                            if (['erni_change', 'erni_going'].includes(name))\r\n                                return false;\r\n                            let info = lib.skill[name];\r\n                            if (info.equipSkill || info.ruleSkill || info.silent)\r\n                                return false;\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            if (player.$.erni != 3)\r\n                                player.$.erni++;\r\n                            else\r\n                                player.$.erni = 1;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            shouru: {\r\n                audio: 4,\r\n                trigger: { player: ['damageAfter', 'useCardAfter', 'respondAfter'] },\r\n                priority: 199,\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('shouru_used'))\r\n                        return false;\r\n                    return (Evt.name == 'damage' || ['useCard', 'respond'].includes(Evt.name) && Evt.skill == 'erni_going') && game.hasPlayer(cur => {\r\n                        return cur != player && get.$dis(_status.currentPhase, cur, 'pure') == 1 && cur.countGainableCards(player, 'he');\r\n                    });\r\n                },\r\n                content: [() => {\r\n                        Evt.source = trigger.player;\r\n                        player.chooseTarget(get.$pro2('shouru'), true, function (card, player, target) {\r\n                            return target != player && get.$dis(_status.currentPhase, target, 'pure') == 1 && target.countGainableCards(player, 'he');\r\n                        }, function (target) {\r\n                            let player = _status.event.player;\r\n                            return 8 - get.$a(player, target);\r\n                        });\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            player.addTempSkill('shouru_used');\r\n                            player.gainPlayerCard('he', result.targets[0], '『受乳』：获得其一张牌');\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    expose: 0.1,\r\n                    threaten: 0.8,\r\n                },\r\n                involve: 'erni',\r\n                subSkill: {\r\n                    used: {}\r\n                },\r\n            },\r\n            chonghuang: {\r\n                audio: true,\r\n                group: 'P_SP',\r\n                trigger: { global: 'changeHp' },\r\n                unique: true,\r\n                limited: true,\r\n                skillAnimation: true,\r\n                animationColor: 'fire',\r\n                forceunique: true,\r\n                filter(Evt, player) {\r\n                    if (player.hasZhuSkill('yinzun') && Evt.player.group == player.group) {\r\n                        return Evt.player.hp == 1;\r\n                    }\r\n                    return Evt.player == player && player.hp == 1;\r\n                },\r\n                content: [() => {\r\n                        let list;\r\n                        if (_status.characterlist) {\r\n                            list = [];\r\n                            for (let i of _status.characterlist) {\r\n                                let info = lib.character[i];\r\n                                if (info[1] == 'psp' || info[4].includes('P_SP'))\r\n                                    list.push(i);\r\n                            }\r\n                        }\r\n                        else if (_status.connectMode) {\r\n                            list = get.charactersOL(function (i) {\r\n                                let info = lib.character[i];\r\n                                return !(info[1] == 'psp' || info[4].includes('P_SP'));\r\n                            });\r\n                        }\r\n                        else {\r\n                            list = get.gainableCharacters(function (info) {\r\n                                return info[1] == 'psp' || info[4].includes('P_SP');\r\n                            });\r\n                        }\r\n                        let players = game.players.concat(game.dead);\r\n                        for (let i = 0; i < players.length; i++) {\r\n                            if (players[i] != player && players[i].group && players[i].group == 'psp') {\r\n                                list.add(players[i].name);\r\n                                list.add(players[i].name1);\r\n                                list.add(players[i].name2);\r\n                            }\r\n                        }\r\n                        list.remove(player.name);\r\n                        list.remove(player.name1);\r\n                        list.remove(player.name2);\r\n                        list.remove('AyanaNana');\r\n                        if (list.length) {\r\n                            player.chooseButton(true).set('ai', function (button) {\r\n                                return 5 || 0;\r\n                            }).set('createDialog', ['『崇皇』：获得其中一名角色所有技能', [list.randomGets(3), 'character']]);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        var _a, _b;\r\n                        var _c;\r\n                        if ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            player.$.chonghuang = true;\r\n                            player.awakenSkill('chonghuang');\r\n                            player.loseMaxHp();\r\n                            for (let i of result.links) {\r\n                                if (_status.characterlist) {\r\n                                    _status.characterlist.remove(result.links[i]);\r\n                                }\r\n                                let skills = lib.character[i][3];\r\n                                for (let j of skills) {\r\n                                    player.addTempSkill(j, 'roundStart');\r\n                                }\r\n                                player.flashAvatar('chonghuang', i);\r\n                            }\r\n                            (_b = (_c = player.$).chonghuang_kamen) !== null && _b !== void 0 ? _b : (_c.chonghuang_kamen = []);\r\n                            player.$.chonghuang_kamen.addArray(result.links);\r\n                            player.$.P_SP.addArray(result.links);\r\n                            player.addTempSkill('chonghuang_kamen', 'roundStart');\r\n                            player.markSkill('P_SP');\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    kamen: {\r\n                        onremove(player, skill) {\r\n                            let storage = player.getStorage(skill);\r\n                            if (player.hasSkill('P_SP', null, null, false) && storage.length) {\r\n                                if (_status.characterlist)\r\n                                    _status.characterlist.addArray(storage);\r\n                                player.$.P_SP.removeArray(storage);\r\n                                if (player.$.P_SP.length == 0) {\r\n                                    player.unmarkSkill('P_SP');\r\n                                }\r\n                                else {\r\n                                    player.markSkill('P_SP');\r\n                                }\r\n                                delete player.$[skill];\r\n                            }\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            yinzun: {\r\n                unique: true,\r\n                zhuSkill: true,\r\n                involve: 'chonghuang',\r\n            },\r\n            jiren: {\r\n                audio: 6,\r\n                audioname: ['jike'],\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                content() {\r\n                    let func = function (result) {\r\n                        let num = 0;\r\n                        if (get.subtype(result) == 'equip1') {\r\n                            num += get.value(result, player, 'raw') / 2;\r\n                        }\r\n                        if (get.color(result) == 'red') {\r\n                            num += 1.5;\r\n                        }\r\n                        return num;\r\n                    };\r\n                    player.judge(func).callback = lib.skill.jiren.callback;\r\n                },\r\n                callback: [() => {\r\n                        if (Evt.judgeResult.color == 'red') {\r\n                            player.draw();\r\n                        }\r\n                        if (get.subtype(Evt.judgeResult.name) == 'equip1') {\r\n                            player.gain(card, 'gain2');\r\n                        }\r\n                        if (Evt.judgeResult.suit) {\r\n                            player.$.jiren_going = [];\r\n                            player.$.jiren_going.add(Evt.judgeResult.suit);\r\n                            if (!player.hasSkill('jiren_going'))\r\n                                player.addTempSkill('jiren_going');\r\n                            player.markSkill('jiren_going');\r\n                        }\r\n                    }],\r\n                group: 'jiren2',\r\n                ai: {\r\n                    threaten: 1.2,\r\n                    order: 16,\r\n                    result: { player: 1 },\r\n                },\r\n                subSkill: {\r\n                    going: {\r\n                        audio: false,\r\n                        marktext: \"祭\",\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '戮秋',\r\n                            content(storage, player, skill) {\r\n                                if (storage.length) {\r\n                                    return '本回合上一次『祭刃』判定结果：' + get.$t(storage);\r\n                                }\r\n                            },\r\n                        },\r\n                        onremove: true,\r\n                    },\r\n                }\r\n            },\r\n            jiren2: {\r\n                audio: false,\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    return player.getStat('skill').jiren;\r\n                },\r\n                content: [() => {\r\n                        player.loseHp();\r\n                    }, () => {\r\n                        let next = game.createEvent('resetSkill');\r\n                        [next.player] = [player];\r\n                        next.setContent(function () {\r\n                            player.popup('重置');\r\n                            game.log(player, '重置了『祭刃』');\r\n                            player.getStat('skill').jiren--;\r\n                        });\r\n                    }],\r\n                ai: {\r\n                    order(item, player) {\r\n                        if (player.awakenedSkills.includes('canxin')) {\r\n                            if (player.isHealthy() || player.hp > 3)\r\n                                return 10;\r\n                        }\r\n                        else {\r\n                            if (player.$.jiren_going && player.hp > 1) {\r\n                                let num = player.countCards('hs', card => {\r\n                                    let info = get.info(card);\r\n                                    if (info.allowMultiple == false)\r\n                                        return false;\r\n                                    return player.hasUseTarget(card);\r\n                                });\r\n                                if (num >= 3)\r\n                                    return -1;\r\n                                return num / player.countCards('hs') < (player.hp / 4);\r\n                            }\r\n                        }\r\n                    },\r\n                    result: {\r\n                        player(player, target) {\r\n                            if (player.hasUnknown(3) || player.hp === 1)\r\n                                return -0.1;\r\n                            if (!player.$.jiren_going)\r\n                                return player.countCards('hs');\r\n                            else if (player.countCards('hs') >= 4)\r\n                                return 0.1;\r\n                            else\r\n                                return -1;\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            luqiu: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                trigger: { global: ['loseEnd', 'cardsDiscardEnd'] },\r\n                filter(Evt, player) {\r\n                    let record = player.$.jiren_going;\r\n                    if (!record)\r\n                        return false;\r\n                    return Evt.cards && Evt.cards.filter(card => get.position(card, true) == 'd' && record.includes(get.suit(card))).length;\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        if (player.$.luqiu == 1) {\r\n                            player.chooseTarget(`${get.$pro('luqiu')}视为使用一张杀？`, function (card, player, target) {\r\n                                return player.canUse('sha', target);\r\n                            }).set('ai', function (target) {\r\n                                let player = _status.event.player;\r\n                                return get.effect(target, { name: 'sha' }, player, player);\r\n                            }).set('prompt2', get.skillInfoTranslation('luqiu', player));\r\n                        }\r\n                        else if (player.$.luqiu == 2) {\r\n                            player.chooseBool(function () {\r\n                                return 1;\r\n                            }).set('prompt', `###${get.$pro('luqiu')}摸一张牌###${get.skillInfoTranslation('luqiu', player)}`);\r\n                        }\r\n                        else {\r\n                            player.chooseCard('he').set('ai', card => {\r\n                                let player = _status.event.player;\r\n                                if (player.$.jiren_going.includes(get.suit(card)))\r\n                                    return 12 - get.value(card);\r\n                                return 10 - get.value(card);\r\n                            }).set('prompt', `###${get.$pro('luqiu')}弃一张牌###${get.skillInfoTranslation('luqiu', player)}`);\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool) {\r\n                            if (player.$.luqiu < 3)\r\n                                player.$.luqiu++;\r\n                            else\r\n                                player.$.luqiu = 1;\r\n                            if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)\r\n                                player.useCard({ name: 'sha' }, result.targets, false);\r\n                            else if (result.cards && result.cards.length)\r\n                                player.discard(result.cards);\r\n                            else\r\n                                player.draw();\r\n                        }\r\n                    }],\r\n                mod: {\r\n                    aiValue(player, card, num) {\r\n                        if (get.suit(card) && player.$.jiren_going && player.$.jiren_going.includes(get.suit(card)))\r\n                            return num / 10;\r\n                    },\r\n                    aiOrder(player, card, num) {\r\n                        if (get.suit(card) && player.$.jiren_going && player.$.jiren_going.includes(get.suit(card)))\r\n                            return num + 8;\r\n                    },\r\n                },\r\n                ai: {\r\n                    combo: 'jiren',\r\n                    useSha: 2,\r\n                    effect: {\r\n                        player(card, player) {\r\n                            if (get.suit(card) && player.$.jiren_going && player.$.jiren_going.includes(get.suit(card))) {\r\n                                if (get.name(card) == 'sha')\r\n                                    return [1, 3];\r\n                                return [1, 2];\r\n                            }\r\n                            if (get.name(card) == 'sha')\r\n                                return [1, 2];\r\n                        }\r\n                    },\r\n                    result: { player: 1 },\r\n                },\r\n            }).setI([]),\r\n            canxin: {\r\n                audio: 2,\r\n                trigger: { player: 'phaseUseEnd' },\r\n                unique: true,\r\n                limited: true,\r\n                skillAnimation: true,\r\n                animationColor: 'fire',\r\n                forceunique: true,\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') > 0 && player.isDamaged();\r\n                },\r\n                check(Evt, player) {\r\n                    return player.$.jiren_going\r\n                        && player.countCards('he', card => get.tag(card, 'damage')) > 0 && player.isDamaged();\r\n                },\r\n                content: [() => {\r\n                        player.$.canxin = true;\r\n                        player.awakenSkill('canxin');\r\n                    }, () => {\r\n                        let next = player.chooseCard('he', '###重铸一张牌###若你以此法重铸了【杀】或伤害类锦囊牌，重复此操作');\r\n                        next.set('ai', card => {\r\n                            if (get.tag(card, 'damage'))\r\n                                return 15 - get.value(card);\r\n                            return 6 - get.value(card);\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool && result.cards) {\r\n                            player.lose(result.cards, ui.discardPile).set('visible', true);\r\n                            player.$throw(result.cards);\r\n                            game.log(player, '将', result.cards, '置入了弃牌堆');\r\n                            player.draw();\r\n                            let card = result.cards[0];\r\n                            if (get.tag(card, 'damage'))\r\n                                Evt.goto(1);\r\n                            else {\r\n                                player.recover();\r\n                                let evt = _status.event.getParent('phase');\r\n                                if (evt) {\r\n                                    evt.finish();\r\n                                }\r\n                            }\r\n                        }\r\n                    }]\r\n            },\r\n            quankai: {\r\n                audio: 7,\r\n                trigger: { source: 'damageEnd' },\r\n                direct: true,\r\n                round: 1,\r\n                filter(Evt, player) {\r\n                    return Evt.player.isIn() && Evt.player.countDiscardableCards(player, 'hej');\r\n                },\r\n                content: [() => {\r\n                        player.discardPlayerCard(trigger.player, 'hej', get.$pro2('quankai'));\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            player.logSkill('quankai', trigger.player);\r\n                            player.$.quankai = result.links.slice(0);\r\n                            player.markSkill('quankai');\r\n                        }\r\n                    }],\r\n                mark: true,\r\n                intro: { content: 'cards' },\r\n                group: 'quankai_gainBy',\r\n                subSkill: {\r\n                    gainBy: {\r\n                        trigger: { player: 'useCardAfter' },\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            let type = get.type2(Evt.card);\r\n                            return type == 'trick' && player.$.quankai;\r\n                        },\r\n                        content: [() => {\r\n                                player.chooseCardButton('从弃牌堆获得上次『拳开』的弃牌，否则重置『拳开』', 1, player.$.quankai).set('filterButton', function (button) {\r\n                                    return _status.event.list.includes(button.link);\r\n                                }).set('list', player.$.quankai.filterInD('d')).set('ai', function (button) {\r\n                                    return get.value(button.link) > 0;\r\n                                });\r\n                            }, () => {\r\n                                if (result.bool && result.links) {\r\n                                    player.logSkill('quankai');\r\n                                    player.gain(result.links, 'gain2');\r\n                                }\r\n                                else {\r\n                                    let roundname = 'quankai_roundcount';\r\n                                    if (player.hasMark(roundname)) {\r\n                                        player.popup('重置');\r\n                                        let next = game.createEvent('resetSkill');\r\n                                        [next.player, next.resetSkill] = [player, 'quankai'];\r\n                                        next.setContent('resetRound');\r\n                                    }\r\n                                }\r\n                            }],\r\n                    }\r\n                }\r\n            },\r\n            heyuan: {\r\n                audio: 2,\r\n                group: 'P_SP',\r\n                trigger: { player: 'phaseDrawBegin1' },\r\n                unique: true,\r\n                limited: true,\r\n                skillAnimation: true,\r\n                animationColor: 'fire',\r\n                forceunique: true,\r\n                filter(Evt, player) {\r\n                    return !Evt.numFixed && player.isDamaged();\r\n                },\r\n                check(Evt, player) {\r\n                    return player.countCards('hs', card => get.tag(card, 'damage')) >= 2;\r\n                },\r\n                content: [() => {\r\n                        trigger.changeToZero();\r\n                        player.$.heyuan = true;\r\n                        player.awakenSkill('heyuan');\r\n                        Evt.num = 1;\r\n                    }, () => {\r\n                        let list;\r\n                        if (_status.characterlist) {\r\n                            list = [];\r\n                            for (let i of _status.characterlist) {\r\n                                let info = lib.character[i];\r\n                                if (info[1] == 'psp' || info[4].includes('P_SP'))\r\n                                    list.push(i);\r\n                            }\r\n                        }\r\n                        else if (_status.connectMode) {\r\n                            list = get.charactersOL(function (i) {\r\n                                let info = lib.character[i];\r\n                                return !(info[1] == 'psp' || info[4].includes('P_SP'));\r\n                            });\r\n                        }\r\n                        else {\r\n                            list = get.gainableCharacters(function (info) {\r\n                                return info[1] == 'psp' || info[4].includes('P_SP');\r\n                            });\r\n                        }\r\n                        let players = game.players.concat(game.dead);\r\n                        for (let i = 0; i < players.length; i++) {\r\n                            if (players[i] != player && players[i].group && players[i].group == 'psp') {\r\n                                list.add(players[i].name);\r\n                                list.add(players[i].name1);\r\n                                list.add(players[i].name2);\r\n                            }\r\n                        }\r\n                        list.remove(player.name);\r\n                        list.remove(player.name1);\r\n                        list.remove(player.name2);\r\n                        list.remove('KurenaiAkane');\r\n                        if (list.length) {\r\n                            player.chooseButton(true).set('ai', function (button) {\r\n                                return 5 || 0;\r\n                            }).set('createDialog', [`『合缘』：获得其中一名角色的所有${Evt.num > 0 ? '' : '非'}限定技`, [list.randomGets(3), 'character']]);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            for (let i of result.links) {\r\n                                if (_status.characterlist) {\r\n                                    _status.characterlist.remove(result.links[i]);\r\n                                }\r\n                                let skills = lib.character[i][3];\r\n                                for (let j of skills) {\r\n                                    if (Evt.num ? (lib.skill[j].limited) : (!lib.skill[j].limited)) {\r\n                                        player.addTempSkill(j, { player: 'phaseBegin' });\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (!player.$.heyuan_qiyuan)\r\n                                player.$.heyuan_qiyuan = [];\r\n                            player.$.heyuan_qiyuan.addArray(result.links);\r\n                            player.$.P_SP.addArray(result.links);\r\n                            player.flashAvatar('heyuan', result.links[0]);\r\n                            player.addTempSkill('heyuan_qiyuan', { player: 'phaseBegin' });\r\n                            player.markSkill('P_SP');\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.num > 0) {\r\n                            Evt.num--;\r\n                            Evt.goto(1);\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    qiyuan: {\r\n                        onremove(player, skill) {\r\n                            let storage = player.getStorage(skill);\r\n                            if (player.hasSkill('P_SP', null, null, false) && storage.length) {\r\n                                if (_status.characterlist)\r\n                                    _status.characterlist.addArray(storage);\r\n                                player.$.P_SP.removeArray(storage);\r\n                                if (player.$.P_SP.length == 0) {\r\n                                    player.unmarkSkill('P_SP');\r\n                                }\r\n                                else {\r\n                                    player.markSkill('P_SP');\r\n                                }\r\n                                delete player.$[skill];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            yangyao: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('active', {\r\n                audio: false,\r\n                filter(Evt, player) {\r\n                    let list = [];\r\n                    if (!player.isAuto)\r\n                        return true;\r\n                    for (let i = 0; i < ui.discardPile.childElementCount; i++) {\r\n                        let card = ui.discardPile.childNodes[i];\r\n                        if (player.getStorage('yangyao').includes(get.name(card)))\r\n                            continue;\r\n                        if (get.type2(card) == 'trick') {\r\n                            list.push(card);\r\n                        }\r\n                    }\r\n                    return list.length;\r\n                },\r\n                filterCard(card, player) {\r\n                    if (ui.selected.cards.length)\r\n                        return get.color(card) == get.color(ui.selected.cards[0]);\r\n                    return player.countCards('hes', { color: get.color(card) }) >= 2;\r\n                },\r\n                complexCard: true,\r\n                selectCard() {\r\n                    if (ui.selected.cards.length)\r\n                        return 2;\r\n                    return [0, 2];\r\n                },\r\n                position: 'he',\r\n                content: [() => {\r\n                        if (!cards.length)\r\n                            player.loseHp();\r\n                    }, () => {\r\n                        let list = [];\r\n                        for (let i = 0; i < ui.discardPile.childElementCount; i++) {\r\n                            let card = ui.discardPile.childNodes[i];\r\n                            if (player.getStorage('yangyao').includes(get.name(card)))\r\n                                continue;\r\n                            if (get.type2(card) == 'trick') {\r\n                                list.push(card);\r\n                            }\r\n                        }\r\n                        if (list.length) {\r\n                            target.chooseCardButton('『秧耀』：选择获得一张锦囊牌', list, true).ai = function (button) {\r\n                                return get.value(button.link);\r\n                            };\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (result.bool && result.links) {\r\n                            if (!player.$.yangyao)\r\n                                player.$.yangyao = [];\r\n                            player.$.yangyao.push(get.name(result.links[0]));\r\n                            target.gain(result.links, 'gain2', 'log');\r\n                        }\r\n                    }],\r\n                group: 'yangyao_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { global: 'phaseAfter' },\r\n                        priority: 23,\r\n                        filter(Evt, player) {\r\n                            return player.getStorage('yangyao').length;\r\n                        },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            player.getStorage('yangyao').length = 0;\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    order(item, player) {\r\n                        if (player.hp <= 1 && player.countCards('hes') <= 3)\r\n                            return 0;\r\n                        if (player.isHealthy() || player.hp > 3)\r\n                            return 9;\r\n                        return 2;\r\n                    },\r\n                    result: {\r\n                        player(player, target) {\r\n                            if (player.hp == 1)\r\n                                return -10;\r\n                            if (ui.selected.cards.length < 2) {\r\n                                return player.hp - 6;\r\n                            }\r\n                            return -2.5;\r\n                        },\r\n                        target(player, target) {\r\n                            let result = 0;\r\n                            for (let i = 0; i < ui.discardPile.childElementCount; i++) {\r\n                                let card = ui.discardPile.childNodes[i];\r\n                                if (player.getStorage('yangyao').includes(get.name(card)))\r\n                                    continue;\r\n                                if (get.type2(card) == 'trick') {\r\n                                    result = Math.max(result, get.value(card, target, 'raw'));\r\n                                }\r\n                            }\r\n                            return result;\r\n                        }\r\n                    },\r\n                },\r\n            }, 'filterTarget').setI([]),\r\n            shili: {\r\n                audio: true,\r\n                trigger: { global: 'phaseEnd' },\r\n                unique: true,\r\n                limited: true,\r\n                skillAnimation: true,\r\n                animationColor: 'wood',\r\n                forceunique: true,\r\n                filter(Evt, player) {\r\n                    if (!player.isDamaged())\r\n                        return false;\r\n                    let history = player.getHistory('useCard');\r\n                    for (let i = 0; i < history.length; i++) {\r\n                        if (get.type2(history[i].card) != 'basic')\r\n                            return true;\r\n                    }\r\n                },\r\n                check(Evt, player) {\r\n                    let history = player.getHistory('useCard');\r\n                    let num = 0;\r\n                    for (let i = 0; i < history.length; i++) {\r\n                        if (get.type2(history[i].card) != 'basic')\r\n                            num++;\r\n                    }\r\n                    if (player.hasUnknown(1))\r\n                        return false;\r\n                    return num >= 3;\r\n                },\r\n                content: [() => {\r\n                        let history = player.getHistory('useCard'), num = 0;\r\n                        for (let i = 0; i < history.length; i++) {\r\n                            if (get.type2(history[i].card) != 'basic')\r\n                                num++;\r\n                        }\r\n                        Evt.num = num;\r\n                        player.$.shili = true;\r\n                        player.awakenSkill('shili');\r\n                        player.chooseTarget(`『拾璃』：令一名角色摸${get.cnNumber(Evt.num)}张牌并执行一个额外的出牌阶段`, true, function (card, player, target) {\r\n                            return target.isIn();\r\n                        }).set('num', Evt.num).ai = function (target) {\r\n                            let att = get.$a(_status.event.player, target);\r\n                            return att * _status.event.num;\r\n                        };\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            Evt.target = result.targets[0];\r\n                            Evt.target.draw(Evt.num);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        Evt.target.phaseUse();\r\n                    }],\r\n            },\r\n            akjianwu: {\r\n                trigger: { player: ['useCard', 'respond'] },\r\n                priority: 5,\r\n                filter(Evt, player) {\r\n                    let logTarget = get.copy(lib.skill.akjianwu.logTarget);\r\n                    let target = logTarget(Evt, player);\r\n                    return get.type(Evt.card) == 'basic' && player.canCompare(target);\r\n                },\r\n                check(Evt, player) {\r\n                    let logTarget = get.copy(lib.skill.akjianwu.logTarget);\r\n                    let target = logTarget(Evt, player);\r\n                    return get.$a(player, target) < 0 || Evt.card.name == 'tao';\r\n                },\r\n                logTarget(Evt, player) {\r\n                    if (Evt.name == 'respond')\r\n                        return Evt.source;\r\n                    if (['sha', 'qi', 'jiu', 'tao'].includes(Evt.card.name))\r\n                        return Evt.targets[0];\r\n                    if (Evt.respondTo)\r\n                        return Evt.respondTo[0];\r\n                },\r\n                content: [() => {\r\n                        let logTarget = get.copy(lib.skill.akjianwu.logTarget);\r\n                        let target = logTarget(trigger, player);\r\n                        Evt.target = target;\r\n                        player.chooseToCompare(Evt.target);\r\n                    }, () => {\r\n                        if (result.winner && result.loser) {\r\n                            [Evt.winner, Evt.loser, Evt.card] = [result.winner, result.loser, trigger.card];\r\n                            let list = [`于${get.$t(Evt.card)}结算后获得之`, '展示并获得对方的一张牌'], check = 1;\r\n                            if (Evt.card.cards && get.value(Evt.card.cards, Evt.winner, 'raw') > Evt.loser.countGainableCards(Evt.winner, 'he'))\r\n                                check = 0;\r\n                            Evt.winner.chooseControlList(list, true, function (Evt, player) {\r\n                                return _status.event.check;\r\n                            }).set('check', check);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        switch (result.index) {\r\n                            case 0: {\r\n                                if (Evt.card.cards && Evt.card.cards.length) {\r\n                                    let next = game.createEvent('akjianwu_gain2');\r\n                                    Evt.next.remove(next);\r\n                                    trigger.after.push(next);\r\n                                    [next.player, next.cards] = [Evt.winner, Evt.card.cards];\r\n                                    next.setContent(lib.skill.akjianwu.akjianwu_gain2);\r\n                                }\r\n                                Evt.finish();\r\n                                break;\r\n                            }\r\n                            case 1: {\r\n                                if (Evt.loser.countGainableCards(Evt.winner, 'he') > 0)\r\n                                    Evt.winner.gainPlayerCard(Evt.loser, 'he', true, 'visibleMove');\r\n                                break;\r\n                            }\r\n                        }\r\n                    }, () => {\r\n                        if (result.links) {\r\n                            Evt.winner.chooseToUse({\r\n                                cards: result.links,\r\n                                filterCard(card) {\r\n                                    if (get.itemtype(card) != 'card' || !_status.event.cards || !_status.event.cards.includes(card))\r\n                                        return false;\r\n                                    if (lib.filter.filterCard.apply(this, arguments)) {\r\n                                        if (card.name == 'sha')\r\n                                            return true;\r\n                                        let range = get.select(get.info(card).selectTarget);\r\n                                        if (range[0] == 1 && range[1] == 1)\r\n                                            return true;\r\n                                    }\r\n                                },\r\n                                prompt: '是否使用获得牌中的一张？',\r\n                            });\r\n                        }\r\n                    }],\r\n                akjianwu_gain2: [() => {\r\n                        Evt.gains = cards.filter(card => card.isInPile());\r\n                        if (Evt.gains.length)\r\n                            player.gain(cards, 'gain2');\r\n                    }, () => {\r\n                        player.chooseToUse({\r\n                            cards: Evt.gains,\r\n                            filterCard(card) {\r\n                                if (get.itemtype(card) != 'card' || !_status.event.cards || !_status.event.cards.includes(card))\r\n                                    return false;\r\n                                if (lib.filter.filterCard.apply(this, arguments)) {\r\n                                    if (card.name == 'sha')\r\n                                        return true;\r\n                                    let range = get.select(get.info(card).selectTarget);\r\n                                    if (range[0] == 1 && range[1] == 1)\r\n                                        return true;\r\n                                }\r\n                            },\r\n                            prompt: '是否使用获得牌中的一张？',\r\n                        });\r\n                    }],\r\n                ai: {\r\n                    threaten(player, target) {\r\n                        if (target.countCards('hs') >= 2)\r\n                            return 0.7;\r\n                    },\r\n                }\r\n            },\r\n            tongzhao: {\r\n                audio: true,\r\n                group: 'P_SP',\r\n                unique: true,\r\n                limited: true,\r\n                skillAnimation: true,\r\n                animationColor: 'yami',\r\n                forceunique: true,\r\n                trigger: { player: ['chooseToCompareAfter', 'compareMultipleAfter'], target: ['chooseToCompareAfter', 'compareMultipleAfter'] },\r\n                filter(Evt, player) {\r\n                    if (!player.isDamaged())\r\n                        return false;\r\n                    if (Evt.preserve)\r\n                        return false;\r\n                    if (Evt.result.tie)\r\n                        return true;\r\n                    if (player == Evt.player) {\r\n                        return Evt.num1 <= Evt.num2;\r\n                    }\r\n                    else {\r\n                        return Evt.num1 >= Evt.num2;\r\n                    }\r\n                },\r\n                check(Evt, player) {\r\n                    if (player.hasUnknown(1))\r\n                        return Evt.result.tie;\r\n                    return player.countCards('hes') >= 4;\r\n                },\r\n                content: [() => {\r\n                        player.$.tongzhao = true;\r\n                        player.awakenSkill('tongzhao');\r\n                        if (trigger.result.tie) {\r\n                            Evt.num = 1;\r\n                        }\r\n                    }, () => {\r\n                        let list;\r\n                        if (_status.characterlist) {\r\n                            list = [];\r\n                            for (let i of _status.characterlist) {\r\n                                let info = lib.character[i];\r\n                                if (info[1] == 'psp' || info[4].includes('P_SP'))\r\n                                    list.push(i);\r\n                            }\r\n                        }\r\n                        else if (_status.connectMode) {\r\n                            list = get.charactersOL(function (i) {\r\n                                let info = lib.character[i];\r\n                                return !(info[1] == 'psp' || info[4].includes('P_SP'));\r\n                            });\r\n                        }\r\n                        else {\r\n                            list = get.gainableCharacters(function (info) {\r\n                                return info[1] == 'psp' || info[4].includes('P_SP');\r\n                            });\r\n                        }\r\n                        let players = game.players.concat(game.dead);\r\n                        for (let i = 0; i < players.length; i++) {\r\n                            if (players[i] != player && players[i].group && players[i].group == 'psp') {\r\n                                list.add(players[i].name);\r\n                                list.add(players[i].name1);\r\n                                list.add(players[i].name2);\r\n                            }\r\n                        }\r\n                        list.remove(player.name);\r\n                        list.remove(player.name1);\r\n                        list.remove(player.name2);\r\n                        list.remove('AkumaYuu');\r\n                        if (list.length) {\r\n                            player.chooseButton(true).set('ai', function (button) {\r\n                                return 5 || 0;\r\n                            }).set('createDialog', ['『同召』：获得其中一名角色的所有技能', [list.randomGets(3), 'character']]);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            for (let i of result.links) {\r\n                                if (_status.characterlist) {\r\n                                    _status.characterlist.remove(result.links[i]);\r\n                                }\r\n                                let skills = lib.character[i][3];\r\n                                for (let j of skills) {\r\n                                    player.addTempSkill(j, { player: ['loseHpAfter', 'damageAfter'] });\r\n                                }\r\n                            }\r\n                            if (!player.$.tongzhao_wangzuo)\r\n                                player.$.tongzhao_wangzuo = [];\r\n                            player.$.tongzhao_wangzuo.addArray(result.links);\r\n                            player.$.P_SP.addArray(result.links);\r\n                            player.flashAvatar('tongzhao', result.links[0]);\r\n                            player.addTempSkill('tongzhao_wangzuo', { player: ['loseHpAfter', 'damageAfter'] });\r\n                            player.markSkill('P_SP');\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.num > 0) {\r\n                            Evt.num--;\r\n                            Evt.goto(1);\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    wangzuo: {\r\n                        onremove(player, skill) {\r\n                            let storage = player.getStorage(skill);\r\n                            if (player.hasSkill('P_SP', null, null, false) && storage.length) {\r\n                                if (_status.characterlist)\r\n                                    _status.characterlist.addArray(storage);\r\n                                player.$.P_SP.removeArray(storage);\r\n                                if (player.$.P_SP.length == 0) {\r\n                                    player.unmarkSkill('P_SP');\r\n                                }\r\n                                else {\r\n                                    player.markSkill('P_SP');\r\n                                }\r\n                                delete player.$[skill];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            langfei: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return get.type(Evt.card) === 'trick' && get.tag(Evt.card, 'damage');\r\n                },\r\n                content() {\r\n                    trigger.baseDamage++;\r\n                },\r\n                usable: 1\r\n            }).setT('useCard'),\r\n            xieyun: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                animationColor: 'yami',\r\n                filter(Evt, player) {\r\n                    return game.countPlayer(cur => {\r\n                        let skills = cur.getSkills(null, false, false);\r\n                        for (let i of skills) {\r\n                            if (i != 'xieyun' && lib.skill[i].limited && cur.awakenedSkills.contains(i)) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    });\r\n                },\r\n                check(Evt, player) {\r\n                    return game.countPlayer(cur => {\r\n                        let skills = cur.getSkills(null, false, false);\r\n                        for (let i of skills) {\r\n                            if (i != 'xieyun' && lib.skill[i].limited && cur.awakenedSkills.contains(i)) {\r\n                                return get.$a(player, cur) >= 0;\r\n                            }\r\n                        }\r\n                    });\r\n                },\r\n                content: [() => {\r\n                        player.awakenSkill('xieyun');\r\n                        player.chooseTarget('选择『协韵』的目标', true, (card, player, tar) => {\r\n                            let skills = tar.getSkills(null, false, false);\r\n                            for (let i of skills) {\r\n                                if (i != 'xieyun' && lib.skill[i].limited && tar.awakenedSkills.contains(i)) {\r\n                                    return true;\r\n                                }\r\n                            }\r\n                        }, (tar) => {\r\n                            return get.$a(player, tar) + 1;\r\n                        });\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result === null || result === void 0 ? void 0 : result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            Evt.target = result.targets[0];\r\n                            let list = [];\r\n                            let skills = Evt.target.getSkills(null, false, false);\r\n                            for (let i of skills) {\r\n                                if (i != 'xieyun' && lib.skill[i].limited && Evt.target.awakenedSkills.contains(i)) {\r\n                                    list.push(i);\r\n                                }\r\n                            }\r\n                            if (list.length == 1) {\r\n                                Evt.target.restoreSkill(list[0]);\r\n                                player.addSkill(list[0]);\r\n                            }\r\n                            else if (list.length > 1) {\r\n                                player.chooseControl(list).set('prompt', '选择一个限定技重置之');\r\n                            }\r\n                            else {\r\n                                Evt.finish();\r\n                            }\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        Evt.target.restoreSkill(result.control);\r\n                        player.addSkill(result.control);\r\n                    }]\r\n            }, 'unique', 'limited', 'skillAnimation', 'forceunique').setT('phaseUseBegin'),\r\n            bianshi: {\r\n                trigger: { global: 'phaseBegin' },\r\n                priority: 23,\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return Evt.player.hp >= player.hp && player.countCards('h', card => !card.hasGaintag('ming_'));\r\n                },\r\n                content: [() => {\r\n                        let check = get.$a(player, trigger.player) <= 0 && trigger.player.countCards('h') >= 2;\r\n                        player.chooseCard('h', get.$pro2('bianshi'), card => !card.hasGaintag('ming_')).set('ai', card => {\r\n                            if (_status.event.check && get.type2(card) != 'equip')\r\n                                return 8 - get.value(card) + Math.random();\r\n                            else\r\n                                return 0;\r\n                        }).set('check', check);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.target = trigger.player;\r\n                            player.showCards(result.cards, '『辨识』亮出手牌');\r\n                            player.addGaintag(result.cards, 'ming_bianshi');\r\n                            game.delayx();\r\n                            player.logSkill('bianshi', Evt.target);\r\n                            Evt.target.$.bianshi2 = get.type2(result.cards[0]);\r\n                            Evt.target.addTempSkill('bianshi2');\r\n                        }\r\n                    }]\r\n            },\r\n            bianshi2: {\r\n                trigger: { global: ['loseEnd', 'cardsDiscardEnd'] },\r\n                filter(Evt, player) {\r\n                    let record = player.$.bianshi2;\r\n                    return Evt.cards && Evt.cards.filter(card => get.position(card, true) == 'd' && get.type2(card) == record).length > 0;\r\n                },\r\n                forced: true,\r\n                mark: true,\r\n                intro: { content: '指定的类型：$' },\r\n                onremove: ['bianshi', 'bianshi2'],\r\n                content: [() => {\r\n                        if (player.$.bianshi && player.$.bianshi >= 2) {\r\n                            player.chooseToDiscard('『辨识』弃牌', 'he', true);\r\n                            Evt.finish();\r\n                        }\r\n                        else {\r\n                            player.draw();\r\n                        }\r\n                    }, () => {\r\n                        if (!player.$.bianshi)\r\n                            player.$.bianshi = 1;\r\n                        else\r\n                            player.$.bianshi++;\r\n                    }, () => {\r\n                        if (player.$.bianshi === 2)\r\n                            player.loseHp();\r\n                    }]\r\n            },\r\n            ming_bianshi: {},\r\n            zhuxing: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                content: [() => {\r\n                        Evt.cards = get.cards(7);\r\n                        let list1 = Evt.cards.slice(0), list2 = player.getCards('h').slice(0);\r\n                        let list = ['『铸星』：选择进行替换的牌'];\r\n                        if (list1.length) {\r\n                            list.push('牌堆顶牌');\r\n                            list.push([list1, 'card']);\r\n                        }\r\n                        if (list2.length) {\r\n                            list.push('你的手牌');\r\n                            list.push([list2, 'card']);\r\n                        }\r\n                        list.push('hidden');\r\n                        Evt.list1 = list1;\r\n                        Evt.list2 = list2;\r\n                        let next = player.chooseButton(list, true).set('complexSelect', true);\r\n                        next.set('selectButton', function (button) {\r\n                            let ul = ui.selected.buttons.length;\r\n                            if (ul % 2 == 0)\r\n                                return [ul, ul + 1];\r\n                            return [ul + 2, ul + 2];\r\n                        });\r\n                        next.set('filterButton', function (button) {\r\n                            let evt = _status.event.getParent(), ul = ui.selected.buttons.length;\r\n                            if (ul > 0) {\r\n                                let pre = ui.selected.buttons[ul - 1].link;\r\n                                let now = button.link;\r\n                                if (evt.list2.includes(pre) && evt.list1.includes(now)) {\r\n                                    return true;\r\n                                }\r\n                                if (evt.list1.includes(pre) && evt.list2.includes(now)) {\r\n                                    return true;\r\n                                }\r\n                                return false;\r\n                            }\r\n                            return true;\r\n                        });\r\n                        next.set('switchToAuto', function () {\r\n                            _status.event.result = 'ai';\r\n                        }).set('processAI', function () {\r\n                            let evt = _status.event.getParent(), links = [], player = evt.player;\r\n                            evt.list1.sort(function (a, b) {\r\n                                return get.useful(b, player) - get.useful(a, player);\r\n                            });\r\n                            evt.list2.sort(function (a, b) {\r\n                                return get.useful(a, player) - get.useful(b, player);\r\n                            });\r\n                            for (let i = 0; i < Math.min(evt.list2.length, evt.list1.length); i++) {\r\n                                if (get.useful(evt.list1[i], player) - get.useful(evt.list2[i], player) >= 0)\r\n                                    links.push(evt.list1[i], evt.list2[i]);\r\n                            }\r\n                            return {\r\n                                bool: true,\r\n                                links: links,\r\n                            };\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.cards1 = Evt.list1.filter(card => result.links.includes(card));\r\n                            Evt.cards2 = Evt.list2.filter(card => result.links.includes(card));\r\n                            Evt.num = Evt.cards1.length;\r\n                            player.lose(Evt.cards2, ui.special);\r\n                            player.gain(Evt.cards1, 'draw');\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        let cards = Evt.cards.map(card => Evt.cards1.includes(card) ? Evt.cards2[Evt.cards1.indexOf(card)] : card);\r\n                        while (cards.length) {\r\n                            ui.cardPile.insertBefore(cards.pop(), ui.cardPile.firstChild);\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    order(item, player) {\r\n                        if (player.isDamaged() && player.countCards('he') >= 3)\r\n                            return 9;\r\n                        return 4;\r\n                    },\r\n                    result: {\r\n                        player(player, target) {\r\n                            return 1;\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            shanzhu: {\r\n                unique: true,\r\n                limited: true,\r\n                skillAnimation: true,\r\n                animationColor: 'yami',\r\n                forceunique: true,\r\n                trigger: { player: ['phaseJieshuBegin'] },\r\n                filter(Evt, player) {\r\n                    if (!player.isDamaged())\r\n                        return false;\r\n                    let cards = [];\r\n                    return player.getHistory('useCard', evt => {\r\n                        cards.addArray(evt.cards);\r\n                    });\r\n                    return cards.length;\r\n                },\r\n                check(Evt, player) {\r\n                    let cards = [];\r\n                    return player.getHistory('useCard', evt => {\r\n                        cards.addArray(evt.cards);\r\n                    });\r\n                    return cards.length > 4;\r\n                },\r\n                content() {\r\n                    player.$.shanzhu = true;\r\n                    player.awakenSkill('shanzhu');\r\n                    let cards = [];\r\n                    player.getHistory('useCard', evt => {\r\n                        cards.addArray(evt.cards);\r\n                    });\r\n                    player.gain(cards, 'gain2', 'log');\r\n                },\r\n            },\r\n            P_SP: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('mark', {\r\n                marktext: 'P',\r\n                intro: {\r\n                    onunmark(storage, player) {\r\n                        if (_status.characterlist)\r\n                            _status.characterlist.addArray(storage);\r\n                        storage = [];\r\n                    },\r\n                    mark(dialog, storage, player) {\r\n                        if (storage && storage.length) {\r\n                            dialog.addText(`已叠加：${get.cnNumber(storage.length)}位P-SP角色`);\r\n                            dialog.addSmall([storage, 'character']);\r\n                        }\r\n                    },\r\n                    content(storage, player) {\r\n                        return `已叠加：${get.cnNumber(storage.length)}位P-SP角色`;\r\n                    },\r\n                    markcount(storage, player) {\r\n                        if (storage && storage.length)\r\n                            return storage.length;\r\n                        return 0;\r\n                    }\r\n                },\r\n            }).setI([]),\r\n            qianjiwanbian: {\r\n                audio: 4,\r\n                trigger: { source: 'damageAfter', player: 'phaseBegin' },\r\n                priority: 199,\r\n                frequent: true,\r\n                group: ['qianjiwanbian_change', 'qianjiwanbian_clear'],\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'damage' && Evt.getParent() && Evt.getParent().name != \"trigger\" && Evt.getParent(2) && Evt.getParent(2).qianjiwanbian)\r\n                        return false;\r\n                    return true;\r\n                },\r\n                gainable: ['前', '千', '钱', '签', '欠', '浅', '迁', '倩', '谦', '倩', '牵', '乾', '铅', '遣', '仟', '纤', '黔', '嵌', '钳', '歉', '虔', '谴', '堑',\r\n                    '技', '级', '及', '机', '祭', '集', '籍', '基', '即', '记', '急', '吉', '寄', '季', '极', '继', '计', '纪', '姬', '己',\r\n                    '挤', '剂', '济', '积', '击', '肌', '忌', '棘', '疾', '激', '际', '系', '寂', '迹', '脊', '辑', '藉', '稷', '戟', '骑', '悸', '觊', '嫉',\r\n                    '完', '玩', '晚', '碗', '万', '湾', '丸', '弯', '婉', '挽', '腕', '顽', '绾', '蜿', '宛',\r\n                    '边', '变', '便', '编', '遍', '扁', '辩', '鞭', '辨', '贬', '匾', '辫',\r\n                ],\r\n                content: [() => {\r\n                        if (!player.$.qianjiwanbian_change)\r\n                            player.$.qianjiwanbian_change = 'thunder';\r\n                        let list = lib.linked.slice(0);\r\n                        list.remove('kami');\r\n                        list.remove(player.$.qianjiwanbian_change);\r\n                        Evt.map = {};\r\n                        for (let i = 0; i < list.length; i++) {\r\n                            Evt.map[get.rawName(list[i])] = list[i];\r\n                            list[i] = get.rawName(list[i]);\r\n                        }\r\n                        list.push('取消');\r\n                        player.chooseControl('dialogcontrol', list).set('ai', function () {\r\n                            return list.randomGets();\r\n                        }).set('prompt', `『千机万变』：将（${get.rawName(player.$.qianjiwanbian_change)}）改写为：`);\r\n                    }, () => {\r\n                        if (result.control != '取消') {\r\n                            player.$.qianjiwanbian_change = Evt.map[result.control];\r\n                            let list = get.gainableSkills((info, skill) => {\r\n                                let name = get.$t(skill);\r\n                                for (let i = 0; i < name.length; i++) {\r\n                                    if (lib.skill.qianjiwanbian.gainable.includes(name.substring(i, i + 1)))\r\n                                        return !info.notemp && !player.hasSkill(skill);\r\n                                }\r\n                            });\r\n                            list.add('qianjiwanbian');\r\n                            player.discoverSkill(list);\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        let link = result.skill;\r\n                        if (link) {\r\n                            if (trigger.getParent().name != \"trigger\" && !trigger.getParent(2).qianjiwanbian)\r\n                                trigger.getParent(2).qianjiwanbian = true;\r\n                            if (link != 'qianjiwanbian') {\r\n                                player.addAdditionalSkill('qianjiwanbian', link, true);\r\n                                player.addSkillLog(link);\r\n                            }\r\n                            if (player.$.qianjiwanbian_clear === true && Evt.reapeat != true) {\r\n                                Evt.reapeat = true;\r\n                                Evt.goto(2);\r\n                            }\r\n                            if (link == 'qianjiwanbian' && player.$.qianjiwanbian_clear != true) {\r\n                                game.playAudio('skill', 'qianjiwanbian_mua');\r\n                                player.$.qianjiwanbian_clear = true;\r\n                                game.log(player, '改写了', '#y『千机万变』');\r\n                            }\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    effect: {\r\n                        player(card, player, target) {\r\n                            if (get.tag(card, 'damage'))\r\n                                return [1, 0.5];\r\n                        },\r\n                    },\r\n                    threaten: 3,\r\n                },\r\n                subSkill: {\r\n                    change: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                        trigger: { source: 'damageBegin2' },\r\n                        priority: 199,\r\n                        prompt(Evt) {\r\n                            let str = `可以将本次对${get.$t(Evt.player)}造成的伤害改为（${get.rawName(_status.event.player.$.qianjiwanbian_change)}）属性`;\r\n                            return str;\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return player.$.qianjiwanbian_change && Evt.nature != player.$.qianjiwanbian_change;\r\n                        },\r\n                        content() {\r\n                            trigger.nature = player.$.qianjiwanbian_change;\r\n                        }\r\n                    }).setI([]),\r\n                    clear: {\r\n                        audio: 4,\r\n                        trigger: { player: 'phaseBegin' },\r\n                        priority: 200,\r\n                        forced: true,\r\n                        silent: true,\r\n                        filter(Evt, player) {\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            player.$.qianjiwanbian_clear = false;\r\n                            player.removeAdditionalSkill('qianjiwanbian');\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            ze: {\r\n                intro: {\r\n                    name: '『梦桓』：则',\r\n                    content: 'cards',\r\n                    onunmark: 'throw',\r\n                },\r\n                locked: true,\r\n                cardAround: true,\r\n            },\r\n            menghuan: {\r\n                forced: true,\r\n                priority: 10,\r\n                trigger: {\r\n                    global: ['gameStart', 'judgeEnd'],\r\n                    player: 'enterGame',\r\n                },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'judge')\r\n                        return get.position(Evt.result.card, true) == 'o';\r\n                    return true;\r\n                },\r\n                content: [() => {\r\n                        Evt.cards = trigger.name == 'judge' ? [trigger.result.card] : get.cards();\r\n                        game.cardsGotoSpecial(Evt.cards);\r\n                        player.markAuto('ze', Evt.cards);\r\n                        player.$gain2(Evt.cards);\r\n                    }, () => {\r\n                        if (player.getStorage('ze').length > 6) {\r\n                            let discard = player.getStorage('ze').splice(0, 1);\r\n                            game.cardsDiscard(discard);\r\n                            player.markSkill('ze');\r\n                        }\r\n                    }],\r\n                mod: {\r\n                    aiOrder(player, card, num) {\r\n                        let card0 = player.getStorage('ze')[player.getHistory('useCard').length];\r\n                        if (card0 && (get.suit(card0) == get.suit(card) || get.type2(card0) == get.type2(card)))\r\n                            return num + 4;\r\n                    },\r\n                },\r\n                group: ['ze', 'menghuan_drawBy'],\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: { player: ['useCard'] },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            if (player.getStorage('ze')) {\r\n                                let card = player.getStorage('ze')[player.getHistory('useCard').length - 1];\r\n                                return card && (get.suit(card) == get.suit(Evt.card) || get.type2(card) == get.type2(Evt.card));\r\n                            }\r\n                        },\r\n                        content() {\r\n                            player.draw();\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            gengu: {\r\n                trigger: { player: 'changeHp' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h');\r\n                },\r\n                content: [() => {\r\n                        player.chooseTarget(get.$pro2('gengu')).set('ai', function (target) {\r\n                            let player = _status.event.player;\r\n                            let att = get.$a(player, target);\r\n                            if (!target.countCards('he'))\r\n                                return 0;\r\n                            if (target.hasCardAround())\r\n                                return att - 1;\r\n                            return -att;\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('gengu', Evt.target);\r\n                            Evt.target.judge(card => {\r\n                                if (get.color(card) == 'black' && !_status.event.player.hasCardAround())\r\n                                    return -2;\r\n                                return 0;\r\n                            }).callback = lib.skill.gengu.callback;\r\n                        }\r\n                    }],\r\n                callback: [() => {\r\n                        if (Evt.judgeResult.color == 'black') {\r\n                            if (player.hasCardAround()) {\r\n                                player.chooseCard('he', true, '『亘古』：重铸一张牌').ai = get.unuseful3;\r\n                            }\r\n                            else {\r\n                                player.chooseToDiscard('he', true);\r\n                            }\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool && result.cards) {\r\n                            player.lose(result.cards, ui.discardPile).set('visible', true);\r\n                            player.$throw(result.cards);\r\n                            game.log(player, '将', result.cards, '置入了弃牌堆');\r\n                            player.draw(result.cards.length);\r\n                        }\r\n                    }],\r\n            },\r\n            di: {\r\n                init(player, skill) {\r\n                    if (!player.$[skill]) {\r\n                        player.$[skill] = {\r\n                            left: [],\r\n                            right: []\r\n                        };\r\n                    }\r\n                },\r\n                locked: true,\r\n                intro: {\r\n                    mark(dialog, content, player) {\r\n                        if (player.$.di.left && player.$.di.left.length) {\r\n                            let list = player.$.di.left.slice(0);\r\n                            dialog.addText('左侧「笛」');\r\n                            dialog.addSmall(list);\r\n                        }\r\n                        if (player.$.di.right && player.$.di.right.length) {\r\n                            let list = player.$.di.right.slice(0);\r\n                            dialog.addText('右侧「笛」');\r\n                            dialog.addSmall(list);\r\n                        }\r\n                    },\r\n                    content: 'cards',\r\n                    onunmark(storage, player) {\r\n                        if ((storage && storage.left && storage.left.length) || (storage && storage.right && storage.right.length)) {\r\n                            let cards = storage.left.concat(storage.right);\r\n                            player.$throw(cards, 1000);\r\n                            game.cardsDiscard(cards);\r\n                            game.log(cards, '被置入了弃牌堆');\r\n                            storage.left.length = 0;\r\n                            storage.right.length = 0;\r\n                        }\r\n                    },\r\n                },\r\n                cardAround: ['left', 'right'],\r\n            },\r\n            dixian: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                content: [() => {\r\n                        player.chooseControl('左侧', '右侧').set('prompt', '『笛鲜』：选择将牌堆顶牌置于').set('ai', function () {\r\n                            let player = _status.event.player;\r\n                            if (player.getStorage('di').left > 3)\r\n                                return 1;\r\n                            return 0;\r\n                        });\r\n                    }, () => {\r\n                        Evt.cards = get.cards();\r\n                        if (result.control == '左侧') {\r\n                            lib.skill.dixian.process(player, Evt.cards[0], 'left');\r\n                        }\r\n                        else {\r\n                            lib.skill.dixian.process(player, Evt.cards[0], 'right');\r\n                        }\r\n                    }],\r\n                process(player, card, method) {\r\n                    let storage = player.getStorage('di');\r\n                    if (storage.left && storage.right) {\r\n                        let num = 0, left = [], right = [];\r\n                        switch (method) {\r\n                            case 'use':\r\n                                for (let i of storage.left) {\r\n                                    if (get.type(card) == get.type(i)) {\r\n                                        left.push(i);\r\n                                        player.$give(i, player, false);\r\n                                        player.gain(i, 'log');\r\n                                        num++;\r\n                                    }\r\n                                }\r\n                                for (let i of storage.right) {\r\n                                    if (get.type(card) == get.type(i)) {\r\n                                        right.push(i);\r\n                                        player.$give(i, player, false);\r\n                                        player.gain(i, 'log');\r\n                                        num++;\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case 'left':\r\n                                player.$drawAuto(card);\r\n                                storage[method].add(card);\r\n                                for (let i of storage.right) {\r\n                                    if (get.color(card) == get.color(i)) {\r\n                                        right.push(i);\r\n                                        player.$give(i, player, false);\r\n                                        player.gain(i, 'log');\r\n                                        num++;\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case 'right':\r\n                                player.$drawAuto(card);\r\n                                storage[method].add(card);\r\n                                for (let i of storage.left) {\r\n                                    if (get.color(card) == get.color(i)) {\r\n                                        left.push(i);\r\n                                        player.$give(i, player, false);\r\n                                        player.gain(i, 'log');\r\n                                        num++;\r\n                                    }\r\n                                }\r\n                                break;\r\n                        }\r\n                        storage.left.removeArray(left);\r\n                        storage.right.removeArray(right);\r\n                        player.markSkill('di');\r\n                        if (num >= 3)\r\n                            player.useSkill('dixian');\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 4,\r\n                    result: {\r\n                        player: 1,\r\n                    },\r\n                },\r\n                group: ['di', 'dixian_useCard'],\r\n                subSkill: {\r\n                    useCard: {\r\n                        trigger: { player: 'useCardAfter' },\r\n                        direct: true,\r\n                        priority: 545,\r\n                        content() {\r\n                            lib.skill.dixian.process(player, trigger.cards[0], 'use');\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            gumei: {\r\n                trigger: { player: 'useCard' },\r\n                frequent: true,\r\n                filter(Evt) {\r\n                    return get.type2(Evt.card) == 'trick' && Evt.card.isCard;\r\n                },\r\n                content: [() => {\r\n                        player.chooseTarget(get.$pro2('gumei')).set('ai', function (target) {\r\n                            let player = _status.event.player;\r\n                            let att = get.$a(player, target);\r\n                            if (target.hasCardAround())\r\n                                return att - 1;\r\n                            return -att;\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('gumei', Evt.target);\r\n                            if (Evt.target.hasCardAround()) {\r\n                                Evt.target.draw();\r\n                            }\r\n                            else {\r\n                                Evt.target.link();\r\n                            }\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    threaten: 1.4,\r\n                    noautowuxie: true,\r\n                }\r\n            },\r\n            kaituan: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('regard', {\r\n                viewAs: { name: 'guohe' },\r\n                filter(Evt, player) {\r\n                    return player.countCards('hs');\r\n                },\r\n                filterCard(card, player) {\r\n                    return get.number(card) < 5;\r\n                },\r\n            }, 'enable:chooseToUse'),\r\n            gehuang: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    console.log(Evt);\r\n                    return get.type2(Evt.card) === 'trick';\r\n                },\r\n                intro: { content: '鸽簧：#' },\r\n                content() {\r\n                    let num = game.countPlayer(cur => player.inRange(cur));\r\n                    if (player.storage.gehuang && player.storage.gehuang != num) {\r\n                        player.draw(Math.abs(player.storage.gehuang - num));\r\n                    }\r\n                    player.storage.gehuang = num;\r\n                    player.markSkill('gehuang');\r\n                },\r\n                group: 'gehuang_addDam',\r\n                subSkill: {\r\n                    addDam: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                        filter(Evt, player) {\r\n                            return player.storage.gehuang === player.hp;\r\n                        },\r\n                        content() {\r\n                            trigger.num++;\r\n                        }\r\n                    }, 'forced').setT({ source: 'damageBegin' }),\r\n                }\r\n            }, 'forced').setT('useCard1'),\r\n            susi: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('active', {\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                content: [() => {\r\n                        player.awakenSkill('susi');\r\n                        game.filterPlayer(cur => {\r\n                            if (cur.group === target.group) {\r\n                                cur.addTempSkill('susi_enable', 'none');\r\n                                game.broadcastAll((splayer) => {\r\n                                    splayer.out('susi_enable');\r\n                                }, cur);\r\n                            }\r\n                        });\r\n                    }, () => {\r\n                        game.delay(2);\r\n                    }],\r\n                ai: {\r\n                    order: 11,\r\n                    result: {\r\n                        player: -3,\r\n                        target: 1\r\n                    }\r\n                }\r\n            }, 'unique', 'limited', 'skillAnimation', 'filterTarget'),\r\n            susi_enable: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('rule', {\r\n                filter(Evt, player) {\r\n                    game.broadcastAll(function (splayer) {\r\n                        splayer.in('susi_enable');\r\n                    }, player);\r\n                    return true;\r\n                },\r\n                intro: {\r\n                    content: '移除游戏外'\r\n                },\r\n                content() {\r\n                    game.broadcastAll(function (splayer) {\r\n                        _status.dying.remove(splayer);\r\n                    }, player);\r\n                    player.removeSkill('dunzou_enable');\r\n                }\r\n            }, 'mark', 'direct').setT({ global: 'phaseEnd' }),\r\n            jidou: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    if (!(Evt.card.name == 'juedou'))\r\n                        return false;\r\n                    return player == Evt.target || Evt.getParent().targets.length == 1;\r\n                },\r\n                content() {\r\n                    player.draw((player.hp === 1 || player.countCards('h') === 0) ? 3 : 1);\r\n                },\r\n            }, 'forced').setT({ player: 'useCardToPlayered', target: 'useCardToTargeted' }),\r\n            duotian: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('active', {\r\n                filter(Evt, player) {\r\n                    return lib.skill.duotian.computedCard().length && player.countCards('hs', { type: 'basic' });\r\n                },\r\n                computedCard() {\r\n                    let list = get.inpile('trick2', card => {\r\n                        let info = lib.card[card];\r\n                        if (!info)\r\n                            return false;\r\n                        if (info.toself === true)\r\n                            return true;\r\n                        if ((info.selectTarget && info.selectTarget !== 1)\r\n                            || info.notarget || info.multitarget)\r\n                            return false;\r\n                        return true;\r\n                    });\r\n                    return list;\r\n                },\r\n                chooseButton: {\r\n                    dialog(Evt, player) {\r\n                        let list = lib.skill.duotian.computedCard();\r\n                        return ui.create.dialog('『堕天』选择转化的锦囊', [list, 'vcard']);\r\n                    },\r\n                    filter(button, player) {\r\n                        return lib.filter.filterCard({ name: button.link[2] }, player, _status.event.getParent());\r\n                    },\r\n                    check(button) {\r\n                        return _status.event.player.getUseValue({ name: button.link[2] });\r\n                    },\r\n                    backup(links, player) {\r\n                        return {\r\n                            popname: true,\r\n                            position: 'hs',\r\n                            viewAs: { name: links[0][2] },\r\n                            check(card) {\r\n                                return 6 - get.value(card);\r\n                            },\r\n                            filterCard(card) {\r\n                                return get.type(card) == 'basic';\r\n                            },\r\n                            onuse(result, player) {\r\n                                let num = result.card.number;\r\n                                let targets = result.targets;\r\n                                if (num) {\r\n                                    if (num >= 6 && get.type(result.card) !== 'delay') {\r\n                                        let next = game.createEvent('duotianChangeTarget');\r\n                                        next.player = player;\r\n                                        next._trigger = result;\r\n                                        next.setContent([() => {\r\n                                                player.chooseTarget(get.$pro('duotian'), `为${get.$t(trigger.card)}增加一个目标`, (card, player, target) => !_status.event.targets.contains(target) && lib.filter.targetEnabled2(_status.event.card, player, target))\r\n                                                    .set('ai', target => {\r\n                                                    let player = _status.event.player, source = _status.event.source;\r\n                                                    return get.effect(target, _status.event.card, source, player) * (_status.event.targets.includes(target) ? -1 : 1);\r\n                                                }).set('targets', trigger.targets).set('card', trigger.card).set('source', player);\r\n                                            }, () => {\r\n                                                if (result.bool) {\r\n                                                    if (!Evt.isMine() && !_status.connectMode)\r\n                                                        game.delayx();\r\n                                                    Evt.target = result.targets[0];\r\n                                                }\r\n                                                else {\r\n                                                    Evt.finish();\r\n                                                }\r\n                                            }, () => {\r\n                                                player.logSkill('duotian', Evt.target);\r\n                                                trigger.targets.push(Evt.target);\r\n                                            }]);\r\n                                    }\r\n                                    if (num >= 12) {\r\n                                        let evt = _status.event.getParent('phaseUse');\r\n                                        if (evt && evt.name === 'phaseUse') {\r\n                                            let next = game.createEvent('duotianExtraStage');\r\n                                            next.player = player;\r\n                                            next.setContent(function () {\r\n                                            }, () => {\r\n                                                game.delay(1);\r\n                                                player.setAvatar('KurumiUsa', 'KurumiUsa1');\r\n                                            }, () => {\r\n                                                player.popup('额外出牌');\r\n                                                game.delay(0.5);\r\n                                            }, () => {\r\n                                                player.phaseUse();\r\n                                            }, () => {\r\n                                                player.setAvatar('KurumiUsa', 'KurumiUsa');\r\n                                            });\r\n                                            _status.event.next.remove(next);\r\n                                            evt.after.push(next);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                    },\r\n                    prompt(links, player) {\r\n                        return `将一张基本牌当做【${get.$t(links[0][2])}】使用`;\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 5,\r\n                    result: {\r\n                        player: 1\r\n                    }\r\n                }\r\n            }).set('usable', 1),\r\n            qisui: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    let targets = lib.skill.qisui.logTarget(Evt, player);\r\n                    return targets.length;\r\n                },\r\n                check(Evt, player) {\r\n                    let targets = lib.skill.qisui.logTarget(Evt, player);\r\n                    let num = 0;\r\n                    targets.forEach(target => {\r\n                        num += get.$a(player, target);\r\n                    });\r\n                    return num >= 0;\r\n                },\r\n                logTarget(Evt, player) {\r\n                    var _a;\r\n                    let targets = [];\r\n                    if (_status.currentPhase === player)\r\n                        targets.push(Evt.player);\r\n                    if (Evt.player === player && ((_a = Evt.source) === null || _a === void 0 ? void 0 : _a.isIn()))\r\n                        targets.push(Evt.source);\r\n                    targets.removeArray(player.$.qisui);\r\n                    return targets;\r\n                },\r\n                content() {\r\n                    let targets = lib.skill.qisui.logTarget(trigger, player);\r\n                    targets.forEach(tar => {\r\n                        player.$.qisui.add(tar);\r\n                        if (!tar.hasSkill('lingjun'))\r\n                            tar.addTempSkill('lingjun', { player: 'juedouBegin' });\r\n                        else\r\n                            trigger.num++;\r\n                    });\r\n                },\r\n                group: 'qisui_clear',\r\n                subSkill: {\r\n                    clear: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                        content() {\r\n                            player.$.qisui.length = [];\r\n                            if (player.hasSkill('lingjun'))\r\n                                player.setAvatar('NanaseUnia', 'NanaseUnia1');\r\n                            else\r\n                                player.setAvatar('NanaseUnia', 'NanaseUnia');\r\n                        }\r\n                    }, 'direct', 'silent').setT({ global: 'phaseAfter' }),\r\n                },\r\n                derivation: 'lingjun'\r\n            }).setT({ global: 'drawBegin' }).setI([]),\r\n            lingjun: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('mark', {\r\n                marktext: '军',\r\n                intro: {\r\n                    content: '手牌中的【杀】视为【决斗】'\r\n                },\r\n                mod: {\r\n                    cardname(card, player, name) {\r\n                        if (get.position(card) === 'h' && name === 'sha')\r\n                            return 'juedou';\r\n                    }\r\n                }\r\n            }, 'mark'),\r\n            yemo: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('active', {\r\n                filter(event, player) {\r\n                    return player.countDisabled() < 5;\r\n                },\r\n                chooseButton: {\r\n                    dialog(event, player) {\r\n                        return ui.create.dialog('###夜魔###' + lib.translate.yemo_info);\r\n                    },\r\n                    chooseControl(event, player) {\r\n                        var list = [];\r\n                        for (var i = 1; i < 6; i++) {\r\n                            if (!player.isDisabled(i))\r\n                                list.push('equip' + i);\r\n                        }\r\n                        list.push('cancel2');\r\n                        return list;\r\n                    },\r\n                    check(event, player) {\r\n                        for (var i = 5; i > 0; i--) {\r\n                            if (player.isEmpty(i))\r\n                                return ('equip' + i);\r\n                        }\r\n                        return 'cancel2';\r\n                    },\r\n                    backup(result) {\r\n                        var next = get.copy(lib.skill.yemox);\r\n                        next.position = result.control;\r\n                        return next;\r\n                    },\r\n                },\r\n                ai: {\r\n                    order: 1,\r\n                    result: {\r\n                        player(player) {\r\n                            if (game.hasPlayer(function (target) {\r\n                                if (player == target)\r\n                                    return false;\r\n                                var hs = target.countCards('h');\r\n                                return hs > 2 && get.$a(player, target) <= 0 && !target.hasSkill('linghun');\r\n                            }))\r\n                                return 1;\r\n                            return 0;\r\n                        },\r\n                    },\r\n                },\r\n                derivation: 'linghun'\r\n            }),\r\n            yemox: {\r\n                audio: 'yemo',\r\n                content: [() => {\r\n                        player.draw();\r\n                    }, () => {\r\n                        player.disableEquip(lib.skill.yemo_backup.position);\r\n                    }, () => {\r\n                        if (player.isAlive()) {\r\n                            player.chooseTarget(true, '选择一名角色获得『灵昏』直到其下一次使用【决斗】，若其已有『灵昏』，改为弃置其区域内的一张牌').set('ai', (target) => {\r\n                                let player = _status.event.player;\r\n                                if (!target.hasSkill('linghun'))\r\n                                    return get.$a(player, target) <= 0;\r\n                                return get.effect(target, { name: 'guohe_copy' }, player, player);\r\n                            });\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            let target = Evt.target = result.targets[0];\r\n                            if (!target.hasSkill('linghun'))\r\n                                target.addTempSkill('linghun', { player: 'juedouBegin' });\r\n                            else\r\n                                player.discardPlayerCard('hej', true, target);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }],\r\n            },\r\n            linghun: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('mark', {\r\n                marktext: '昏',\r\n                intro: {\r\n                    content: '手牌中的【闪】视为【决斗】'\r\n                },\r\n                mod: {\r\n                    cardname(card, player, name) {\r\n                        if (get.position(card) === 'h' && name === 'shan')\r\n                            return 'juedou';\r\n                    }\r\n                }\r\n            }, 'mark'),\r\n            jiaopin: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return player.isDamaged() && player.$.disableEquip != undefined && player.$.disableEquip.length > 0;\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    player.chooseToEnable();\r\n                },\r\n            }).setT('phaseJieshuBegin'),\r\n            shengping: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    var _a, _b;\r\n                    return Evt.player != player && ((_b = (_a = Evt.result) === null || _a === void 0 ? void 0 : _a.cards) === null || _b === void 0 ? void 0 : _b.length);\r\n                },\r\n                logTarget: 'player',\r\n                check(Evt, player) {\r\n                    return get.$a(player, Evt.player) > 0;\r\n                },\r\n                content() {\r\n                    Evt.target = trigger.player;\r\n                    game.asyncDraw([player, Evt.target]);\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, cur) {\r\n                            if (target.hp < 0) {\r\n                                if (get.tag(card, 'discard') >= 1 && get.$a(target, player) > 0)\r\n                                    return [1, 1, 1, 1];\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n            }).setT({ target: 'discardPlayerCardEnd' }),\r\n            jiushuang: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return player.countDiscardableCards(Evt.player, 'hej') > 0;\r\n                },\r\n                logTarget: 'player',\r\n                content: [() => {\r\n                        Evt.target = trigger.player;\r\n                        Evt.target.discardPlayerCard('hej', true, player);\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            let target = Evt.target;\r\n                            if (!target.hasSkill('lingxun'))\r\n                                target.addTempSkill('lingxun', { player: 'juedouBegin' });\r\n                            else\r\n                                target.link();\r\n                        }\r\n                    }],\r\n                derivation: 'lingxun'\r\n            }).setT({ global: 'phaseBegin' }),\r\n            lingxun: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('mark', {\r\n                marktext: '醺',\r\n                intro: {\r\n                    content: '手牌中的【酒】视为【决斗】'\r\n                },\r\n                mod: {\r\n                    cardname(card, player, name) {\r\n                        if (get.position(card) === 'h' && name === 'jiu')\r\n                            return 'juedou';\r\n                    }\r\n                }\r\n            }, 'mark'),\r\n            jufu: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('regard', {\r\n                chooseButton: {\r\n                    dialog() {\r\n                        let list = [['锦囊', '', 'wuzhong'], ['锦囊', '', 'wugu']];\r\n                        return ui.create.dialog('咀福', [list, 'vcard']);\r\n                    },\r\n                    filter(button, player) {\r\n                        let evt = _status.event.getParent();\r\n                        if (evt === null || evt === void 0 ? void 0 : evt.filterCard) {\r\n                            return evt.filterCard({ name: button.link[2] }, player, evt);\r\n                        }\r\n                        return true;\r\n                    },\r\n                    backup(links, player) {\r\n                        return {\r\n                            filterCard: { name: 'tao' },\r\n                            position: 'hs',\r\n                            selectCard: 1,\r\n                            viewAs: { name: links[0][2], nature: links[0][3] },\r\n                        };\r\n                    },\r\n                    prompt(links, player) {\r\n                        return `将一张【桃】做当【${get.$t(links[0][2])}】使用`;\r\n                    },\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.countCards('hs', 'tao');\r\n                },\r\n            }, 'enable:chooseToUse'),\r\n            qihun: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return game.countPlayer(cur => cur != player && cur.countCards('h'));\r\n                },\r\n                content: [function () {\r\n                        player.chooseTarget(get.$pro2('qihun'), function (card, player, target) {\r\n                            return target !== player && target.countCards('h');\r\n                        }).set('ai', target => {\r\n                            let player = _status.event.player, att = get.$a2(target), reds = target.countCards('h', { color: 'red' });\r\n                            if (target.countCards('h', 'tao'))\r\n                                return -1.6 * reds * att;\r\n                            else if (target.group === player.group)\r\n                                return reds * att;\r\n                            return -0.4 * reds * att;\r\n                        });\r\n                    }, function () {\r\n                        var _a;\r\n                        if ((_a = result === null || result === void 0 ? void 0 : result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('qihun', Evt.target);\r\n                            Evt.target.showHandcards('『祈婚』展示手牌');\r\n                            Evt.cards = Evt.target.getCards('h', { color: 'red' });\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, function () {\r\n                        if (Evt.cards.length) {\r\n                            Evt.target.give(Evt.cards, player, true);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, function () {\r\n                        if (Evt.cards.filter(card => card.name === 'tao').length === 0) {\r\n                            if (player.group === Evt.target.group) {\r\n                                Evt.target.draw(Evt.cards.length);\r\n                                Evt.finish();\r\n                            }\r\n                            else {\r\n                                player.chooseCard(`交给${get.$t(Evt.target)}${get.cnNumber(Evt.cards.length)}张牌`, 'he', true, Evt.cards.length).set('ai', card => get.unuseful3(card));\r\n                            }\r\n                        }\r\n                    }, function () {\r\n                        var _a;\r\n                        if ((_a = result.cards) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            player.give(result.cards, Evt.target, true);\r\n                        }\r\n                    }]\r\n            }, 'direct').setT('phaseUseEnd'),\r\n            lilian: {\r\n                trigger: { player: 'phaseBegin' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return player.maxHp;\r\n                },\r\n                content: [() => {\r\n                        player.chooseTarget(get.$pro2('lilian')).set('ai', target => {\r\n                            let player = _status.event.player;\r\n                            return get.$a(player, target) - player.maxHp;\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.logSkill('lilian', Evt.target);\r\n                            Evt.target = result.targets[0];\r\n                            Evt.target.draw(player.maxHp);\r\n                            game.delayx();\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        let check = function () {\r\n                            for (let i = 0; i < game.players.length; i++) {\r\n                                if (game.players[i].isOut() || game.players[i] == player)\r\n                                    continue;\r\n                                if (game.players[i].maxHp <= player.maxHp)\r\n                                    return false;\r\n                            }\r\n                            return true;\r\n                        }();\r\n                        if (check) {\r\n                            player.setAvatar('linxi', 'linxi1');\r\n                        }\r\n                        else\r\n                            player.loseMaxHp();\r\n                        game.delayx();\r\n                    }],\r\n            },\r\n            zihuai: {\r\n                trigger: { player: 'discardAfter' },\r\n                priority: 199,\r\n                frequent: true,\r\n                round: 1,\r\n                filter(Evt, player) {\r\n                    return player.$.zihuai_mark && Evt.cards.length >= player.$.zihuai_mark;\r\n                },\r\n                content() {\r\n                    player.draw(player.$.zihuai_mark);\r\n                },\r\n                group: ['zihuai_mark'],\r\n                subSkill: {\r\n                    mark: {\r\n                        direct: true,\r\n                        locked: true,\r\n                        marktext: '🎶',\r\n                        intro: {\r\n                            content: '上一次于弃牌阶段弃置的牌数：#'\r\n                        },\r\n                        trigger: { player: 'phaseDiscardEnd' },\r\n                        filter(Evt, player) {\r\n                            let cards = [];\r\n                            player.getHistory('lose', evt => {\r\n                                if ((evt === null || evt === void 0 ? void 0 : evt.type) == 'discard' && evt.getParent('phaseDiscard') == Evt && evt.hs)\r\n                                    cards.addArray(evt.cards);\r\n                            });\r\n                            return cards.length >= 1;\r\n                        },\r\n                        content() {\r\n                            let cards = [];\r\n                            player.getHistory('lose', evt => {\r\n                                if ((evt === null || evt === void 0 ? void 0 : evt.type) == 'discard' && evt.getParent('phaseDiscard') == trigger && evt.hs)\r\n                                    cards.addArray(evt.cards);\r\n                            });\r\n                            player.$.zihuai_mark = cards.length;\r\n                            player.markSkill('zihuai_mark');\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            liying: {\r\n                trigger: { player: ['damageEnd', 'respondEnd'] },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    let source;\r\n                    if (Evt.name == 'damage')\r\n                        source = Evt.source;\r\n                    else if (Array.isArray(Evt.respondTo))\r\n                        source = Evt.respondTo[0];\r\n                    if (source) {\r\n                        return source != player && source.countCards('he') && source.hp > 0;\r\n                    }\r\n                },\r\n                content: [() => {\r\n                        if (trigger.name == 'damage')\r\n                            Evt.target = trigger.source;\r\n                        else\r\n                            Evt.target = trigger.respondTo[0];\r\n                        Evt.num = Evt.target.hp;\r\n                        player.gainPlayerCard(get.$pro2('liying'), 'he', Evt.target, Evt.target.hp).set('logSkill', ['liying', Evt.target]);\r\n                    }, () => {\r\n                        if (result.bool && Evt.num > 1) {\r\n                            player.chooseCard('he', `将${get.cnNumber(Evt.num - 1)}张牌交给${get.$t(Evt.target)}`, Evt.num - 1, true);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (result.bool && result.cards.length) {\r\n                            Evt.target.gain(result.cards, player, 'give');\r\n                            if (typeof player.$.fuyu == 'number') {\r\n                                player.$.fuyu += result.cards.length;\r\n                                player.markSkill('fuyu');\r\n                            }\r\n                            if (typeof player.$.liying != 'number') {\r\n                                player.$.liying = 0;\r\n                            }\r\n                            if (player.$.liying >= 0) {\r\n                                player.$.liying += result.cards.length;\r\n                                if (player.$.liying >= 2) {\r\n                                    let list = [];\r\n                                    let type = player.$.fuyu === true ? 'trick' : 'basic';\r\n                                    for (let i of get.inpile(type)) {\r\n                                        if (lib.filter.cardUsable({ name: i }, player, Evt.getParent()) && player.hasUseTarget(i)) {\r\n                                            list.push([get.$t(type), '', i]);\r\n                                            if (i == 'sha') {\r\n                                                list.push(['基本', '', 'sha', 'fire']);\r\n                                                list.push(['基本', '', 'sha', 'thunder']);\r\n                                                list.push(['基本', '', 'sha', 'ice']);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (list.length) {\r\n                                        player.chooseButton(['是否视为使用其中一张牌？', [list, 'vcard']]).set('ai', function (button) {\r\n                                            let player = _status.event.player;\r\n                                            let card = { name: button.link[2], nature: button.link[3] };\r\n                                            return player.getUseValue(card);\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        Evt.finish();\r\n                                    }\r\n                                    player.$.liying = -1;\r\n                                }\r\n                                else {\r\n                                    Evt.finish();\r\n                                }\r\n                            }\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            let card = { name: result.links[0][2], nature: result.links[0][3] };\r\n                            player.chooseUseTarget(card, true);\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    maixie: true,\r\n                },\r\n                group: ['liying_clear'],\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { global: 'phaseNext' },\r\n                        direct: true,\r\n                        locked: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        filter(Evt, player) {\r\n                            return player.$.liying;\r\n                        },\r\n                        content() {\r\n                            player.$.liying = 0;\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            fuyu: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                marktext: \"谕\",\r\n                intro: {\r\n                    content: '已通过『立影』给出了&张牌',\r\n                },\r\n                trigger: { player: 'phaseZhunbeiBegin' },\r\n                animationColor: 'thunder',\r\n                filter(Evt, player) {\r\n                    return player.$.fuyu > 0 && player.$.fuyu % 4 == 0;\r\n                },\r\n                content() {\r\n                    player.loseMaxHp();\r\n                    player.$.fuyu = true;\r\n                    player.awakenSkill('fuyu');\r\n                },\r\n                ai: {\r\n                    combo: 'liying'\r\n                }\r\n            }, 'juexingji', 'skillAnimation', 'forced').setI(0),\r\n            zhengmeng: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return !Evt.numFixed;\r\n                },\r\n                check(Evt, player) {\r\n                    return player.countCards('h') >= 2;\r\n                },\r\n                content: [() => {\r\n                        trigger.changeToZero();\r\n                        player.turnOver();\r\n                    }, () => {\r\n                        player.throwDice();\r\n                    }, () => {\r\n                        player.draw(Evt.num);\r\n                        if (Evt.num === 6) {\r\n                            player.addMark('zhengmeng_addDamBy');\r\n                        }\r\n                    }],\r\n                group: 'zhengmeng_addDamBy',\r\n                subSkill: {\r\n                    addDamBy: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                        intro: {\r\n                            content: '【杀】伤害+#'\r\n                        },\r\n                        forced: true,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            return ['sha'].contains(Evt.card.name) && player.countMark('zhengmeng_addDamBy');\r\n                        },\r\n                        content() {\r\n                            trigger.baseDamage += player.countMark('zhengmeng_addDamBy');\r\n                        }\r\n                    }).setT('useCard1'),\r\n                }\r\n            }).setT('phaseDrawBegin1'),\r\n            wadao: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return !player.isTurnedOver();\r\n                },\r\n                content: [() => {\r\n                        player.chooseTarget(get.$pro('wadao2'), function (card, player, target) {\r\n                            return target !== player;\r\n                        }).ai = target => {\r\n                            return get.$a2(target);\r\n                        };\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('wadao', Evt.target);\r\n                            Evt.target.insertPhase();\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    expose: 0.3,\r\n                }\r\n            }, 'direct').setT('turnOverAfter'),\r\n            tieyu: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                intro: {\r\n                    content: '『铁驭』（）值偏差#',\r\n                },\r\n                frequent(Evt, player) {\r\n                    return get.type(Evt.card) == 'equip';\r\n                },\r\n                filter(Evt, player) {\r\n                    return (get.type(Evt.card) == 'equip' && (2 + player.$.tieyu > 0))\r\n                        || player.countCards('he') > (3 + player.$.tieyu);\r\n                },\r\n                check(Evt, player) {\r\n                    return get.type(Evt.card) == 'equip';\r\n                },\r\n                content: [() => {\r\n                        if (get.type(trigger.card) == 'equip') {\r\n                            player.draw(2 + player.$.tieyu);\r\n                            Evt.finish();\r\n                        }\r\n                        else {\r\n                            player.chooseToDiscard(3 + player.$.tieyu, true, '『铁驭』：请弃牌');\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result.cards) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            let color = get.color(result.cards);\r\n                            switch (color) {\r\n                                case 'red':\r\n                                    let card = trigger.card;\r\n                                    let info = get.info(card);\r\n                                    if (['basic', 'trick'].includes(info.type) && info.allowMultiple !== false\r\n                                        && trigger.targets && !info.multitarget) {\r\n                                        if (game.hasPlayer(cur => !trigger.targets.includes(cur) && lib.filter.targetEnabled2(card, player, cur))) {\r\n                                            let prompt2 = `为${get.$t(trigger.card)}增加至多两个目标`;\r\n                                            player.chooseTarget([1, 2], get.$pro('tieyu'), function (card, player, target) {\r\n                                                return !_status.event.targets.includes(target) && lib.filter.targetEnabled2(_status.event.card, player, target);\r\n                                            }).set('prompt2', prompt2).set('ai', function (target) {\r\n                                                let player = _status.event.player;\r\n                                                return get.effect(target, _status.event.card, player, player);\r\n                                            }).set('card', card).set('targets', trigger.targets);\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                case 'black':\r\n                                    game.log(trigger.card, '的数值+1');\r\n                                    trigger.baseDamage++;\r\n                                    break;\r\n                                case 'none':\r\n                                    player.$.tieyu--;\r\n                                    player.markSkill('tieyu');\r\n                                    if (2 - player.$.tieyu <= 0)\r\n                                        player.setAvatar('RIKO', 'RIKO1');\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            if (!Evt.isMine())\r\n                                game.delayx();\r\n                            Evt.targets = result.targets;\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.targets) {\r\n                            player.logSkill('tieyu', Evt.targets);\r\n                            trigger.targets.addArray(Evt.targets);\r\n                        }\r\n                    }],\r\n            }).setT('useCard2').setI(0),\r\n            daimao: {\r\n                mod: {\r\n                    cardUsable(card, player, num) {\r\n                        if (!get.suit(card))\r\n                            return;\r\n                        let suits = get.suit3(player.getStorage('daimao_mark'));\r\n                        if (suits.includes(suits))\r\n                            return true;\r\n                    },\r\n                    targetInRange(card, player, target) {\r\n                        if (!get.suit(card))\r\n                            return;\r\n                        let suits = get.suit3(player.getStorage('daimao_mark'));\r\n                        if (suits.includes(suits))\r\n                            return true;\r\n                    }\r\n                },\r\n                enable: 'chooseToUse',\r\n                skillAnimation: 'epic',\r\n                locked: true,\r\n                filter(Evt, player) {\r\n                    if (Evt.type != 'dying')\r\n                        return false;\r\n                    if (player != Evt.dying)\r\n                        return false;\r\n                    return player.countCards('hes', card => {\r\n                        if (player.getStorage('daimao_mark').filter(function (daimao) {\r\n                            return get.suit(daimao) == get.suit(card);\r\n                        }).length == 0)\r\n                            return true;\r\n                    });\r\n                },\r\n                filterCard(card, player) {\r\n                    if (player.getStorage('daimao_mark').filter(function (daimao) {\r\n                        return get.suit(daimao) == get.suit(card);\r\n                    }).length == 0)\r\n                        return true;\r\n                },\r\n                position: 'he',\r\n                content: [() => {\r\n                        let audio = 'daimao_' + player.getStorage('daimao_mark').length;\r\n                        game.playAudio('skill', audio);\r\n                        game.broadcast(function (audio) {\r\n                            game.playAudio('skill', audio);\r\n                        }, audio);\r\n                        player.$give(cards, player);\r\n                        player.lose(cards, ui.special, 'toStorage');\r\n                        player.markAuto('daimao_mark', cards);\r\n                    }, () => {\r\n                        player.loseMaxHp();\r\n                    }, () => {\r\n                        player.recover(player.maxHp - player.hp);\r\n                    }, () => {\r\n                        player.draw(3);\r\n                    }],\r\n                ai: {\r\n                    skillTagFilter(player) {\r\n                        if (player.hp > 0)\r\n                            return false;\r\n                    },\r\n                    save: true,\r\n                    result: {\r\n                        player: 3,\r\n                    },\r\n                    threaten(player, target) {\r\n                        if (player.getStorage('daimao_mark') <= 2)\r\n                            return 0.8;\r\n                    }\r\n                },\r\n                group: ['daimao_mark', 'daimao_start'],\r\n                subSkill: {\r\n                    mark: {\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '呆毛',\r\n                            content: 'cards',\r\n                            onunmark: 'throw',\r\n                        },\r\n                        cardAround: true\r\n                    },\r\n                    start: {\r\n                        forced: true,\r\n                        priority: 10,\r\n                        trigger: {\r\n                            global: 'gameStart',\r\n                            player: 'enterGame',\r\n                        },\r\n                        content() {\r\n                            if (!player.$.daimao_mark)\r\n                                player.$.daimao_mark = [];\r\n                            let cards = get.cards();\r\n                            game.cardsGotoSpecial(cards);\r\n                            player.$gain2(cards);\r\n                            player.markAuto('daimao_mark', cards);\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            hongtou: {\r\n                group: ['hongtou2', 'hongtou_shan'],\r\n                unique: true,\r\n                zhuSkill: true,\r\n                filter(Evt, player) {\r\n                    if (!player.hasZhuSkill('hongtou') || !game.hasPlayer(cur => cur != player && cur.isGuoV()))\r\n                        return false;\r\n                    return !Evt.hongtou && (Evt.type != 'phase' || !player.hasSkill('hongtou3'));\r\n                },\r\n                enable: ['chooseToUse', 'chooseToRespond'],\r\n                viewAs: { name: 'sha' },\r\n                filterCard: () => false,\r\n                selectCard: -1,\r\n                ai: {\r\n                    order() {\r\n                        return get.order({ name: 'sha' }) + 0.3;\r\n                    },\r\n                    respondSha: true,\r\n                    skillTagFilter(player) {\r\n                        if (!player.hasZhuSkill('hongtou') || !game.hasPlayer(cur => cur != player && cur.isGuoV()))\r\n                            return false;\r\n                    },\r\n                },\r\n                subSkill: {\r\n                    shan: {\r\n                        unique: true,\r\n                        zhuSkill: true,\r\n                        trigger: { player: ['chooseToRespondBefore', 'chooseToUseBefore'] },\r\n                        filter(Evt, player) {\r\n                            if (Evt.responded)\r\n                                return false;\r\n                            if (player.$.hongtou_shaning)\r\n                                return false;\r\n                            if (!player.hasZhuSkill('hongtou_shan'))\r\n                                return false;\r\n                            if (!Evt.filterCard({ name: 'shan' }, player, Evt))\r\n                                return false;\r\n                            return game.hasPlayer(cur => cur != player && cur.isGuoV());\r\n                        },\r\n                        check(Evt, player) {\r\n                            if (get.damageEffect(player, Evt.player, player) >= 0)\r\n                                return false;\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            \"step 0\";\r\n                            if (Evt.current == undefined)\r\n                                Evt.current = player.next;\r\n                            if (Evt.current == player) {\r\n                                Evt.finish();\r\n                            }\r\n                            else if (Evt.current.isGuoV()) {\r\n                                if ((Evt.current == game.me && !_status.auto) || (get.$a(Evt.current, player) > 2) ||\r\n                                    Evt.current.isOnline()) {\r\n                                    player.$.hongtou_shaning = true;\r\n                                    let next = Evt.current.chooseToRespond(`是否替${get.$t(player)}打出一张闪？`, { name: 'shan' });\r\n                                    next.set('ai', function () {\r\n                                        let Evt = _status.event;\r\n                                        return (get.$a(Evt.player, Evt.source) - 2);\r\n                                    });\r\n                                    next.set('skillwarn', `替${get.$t(player)}打出一张闪`);\r\n                                    next.autochoose = lib.filter.autoRespondShan;\r\n                                    next.set('source', player);\r\n                                }\r\n                            }\r\n                            \"step 1\";\r\n                            player.$.hongtou_shaning = false;\r\n                            if (result.bool) {\r\n                                Evt.finish();\r\n                                trigger.result = { bool: true, card: { name: 'shan', isCard: true } };\r\n                                trigger.responded = true;\r\n                                trigger.animate = false;\r\n                                if (typeof Evt.current.ai.shown == 'number' && Evt.current.ai.shown < 0.95) {\r\n                                    Evt.current.ai.shown += 0.3;\r\n                                    if (Evt.current.ai.shown > 0.95)\r\n                                        Evt.current.ai.shown = 0.95;\r\n                                }\r\n                            }\r\n                            else {\r\n                                Evt.current = Evt.current.next;\r\n                                Evt.goto(0);\r\n                            }\r\n                        },\r\n                        ai: {\r\n                            respondShan: true,\r\n                            skillTagFilter(player) {\r\n                                if (player.$.hongtou_shaning)\r\n                                    return false;\r\n                                if (!player.hasZhuSkill('hongtou_shan'))\r\n                                    return false;\r\n                                return game.hasPlayer(cur => cur != player && cur.isGuoV());\r\n                            },\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            hongtou2: {\r\n                trigger: { player: ['useCardBegin', 'respondBegin'] },\r\n                logTarget: 'targets',\r\n                filter(Evt, player) {\r\n                    return Evt.skill == 'hongtou';\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    \"step 0\";\r\n                    delete trigger.skill;\r\n                    trigger.getParent().set('hongtou', true);\r\n                    \"step 1\";\r\n                    if (Evt.current == undefined)\r\n                        Evt.current = player.next;\r\n                    if (Evt.current == player) {\r\n                        player.addTempSkill('hongtou3');\r\n                        Evt.finish();\r\n                        trigger.cancel();\r\n                        trigger.getParent().goto(0);\r\n                    }\r\n                    else if (Evt.current.isGuoV()) {\r\n                        let next = Evt.current.chooseToRespond(`是否替${get.$t(player)}打出一张杀？`, { name: 'sha' });\r\n                        next.set('ai', function () {\r\n                            let { player, source } = _status.event;\r\n                            return (get.$a(player, source) - 2);\r\n                        });\r\n                        next.set('source', player);\r\n                        next.set('hongtou', true);\r\n                        next.set('skillwarn', `替${get.$t(player)}打出一张杀`);\r\n                        next.noOrdering = true;\r\n                        next.autochoose = lib.filter.autoRespondSha;\r\n                    }\r\n                    else {\r\n                        Evt.current = Evt.current.next;\r\n                        Evt.redo();\r\n                    }\r\n                    \"step 2\";\r\n                    if (result.bool) {\r\n                        Evt.finish();\r\n                        trigger.card = result.card;\r\n                        trigger.cards = result.cards;\r\n                        trigger.throw = false;\r\n                        if (typeof Evt.current.ai.shown == 'number' && Evt.current.ai.shown < 0.95) {\r\n                            Evt.current.ai.shown += 0.3;\r\n                            if (Evt.current.ai.shown > 0.95)\r\n                                Evt.current.ai.shown = 0.95;\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.current = Evt.current.next;\r\n                        Evt.goto(1);\r\n                    }\r\n                }\r\n            },\r\n            hongtou3: {\r\n                trigger: { global: ['useCardAfter', 'useSkillAfter', 'phaseAfter'] },\r\n                silent: true,\r\n                charlotte: true,\r\n                filter(Evt) {\r\n                    return Evt.skill != 'hongtou';\r\n                },\r\n                content() {\r\n                    player.removeSkill('hongtou3');\r\n                }\r\n            },\r\n            tianqi: {\r\n                forced: true,\r\n                priority: 10,\r\n                trigger: {\r\n                    global: 'gameStart',\r\n                    player: 'enterGame',\r\n                },\r\n                content() {\r\n                    let cards = get.cards();\r\n                    game.cardsGotoSpecial(cards);\r\n                    player.$gain2(cards);\r\n                    player.markAuto('tianqi_mark', cards);\r\n                    player.addSkill('tianqi_mark');\r\n                },\r\n            },\r\n            tianqi_mark: {\r\n                locked: true,\r\n                intro: {\r\n                    name: '天气',\r\n                    content: 'cards',\r\n                    onunmark: 'throw',\r\n                },\r\n                cardAround: true\r\n            },\r\n            yubao: {\r\n                trigger: { global: 'phaseZhunbeiBegin' },\r\n                check(Evt, player) {\r\n                    return true;\r\n                },\r\n                filter(Evt, player) {\r\n                    return Evt.player.hasSkill('tianqi_mark');\r\n                },\r\n                frequent: true,\r\n                content: [() => {\r\n                        Evt.num = game.countPlayer(cur => cur.hasSkill('tianqi_mark'));\r\n                        Evt.cards = get.cards(Evt.num);\r\n                        player.chooseCardButton(Evt.num, Evt.cards, '『预报』：按顺序将卡牌置于牌堆顶（先选择的在上）').set('ai', function (button) {\r\n                            let player = _status.event.player, next = _status.currentPhase, att = get.$a(player, next), card = button.link, judge = next.getCards('j')[ui.selected.buttons.length];\r\n                            if (judge) {\r\n                                return get.judge(judge)(card) * att;\r\n                            }\r\n                            return next.getUseValue(card) * att;\r\n                        }).set('phase', trigger.name);\r\n                    }, () => {\r\n                        let list;\r\n                        if (result.bool) {\r\n                            list = result.links.slice(0);\r\n                        }\r\n                        else {\r\n                            list = Evt.cards;\r\n                        }\r\n                        while (list.length) {\r\n                            ui.cardPile.insertBefore(list.pop(), ui.cardPile.firstChild);\r\n                        }\r\n                    }],\r\n            },\r\n            butaizhun: {\r\n                subSkill: { used: {} },\r\n                group: [\"butaizhun_guess\", \"butaizhun_respond\", \"butaizhun_wuxie\"],\r\n                enable: \"chooseToUse\",\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('butaizhun_used'))\r\n                        return false;\r\n                    if (!player.countCards('h'))\r\n                        return false;\r\n                    let list = ['sha', 'shan', 'tao', 'jiu', 'taoyuan', 'wugu', 'juedou', 'huogong', 'jiedao', 'tiesuo', 'guohe', 'shunshou', 'wuzhong', 'wanjian', 'nanman', 'haixiao', 'langyong', 'qinshi'];\r\n                    if (get.mode() == 'guozhan') {\r\n                        list = list.concat(['xietianzi', 'shuiyanqijunx', 'lulitongxin', 'lianjunshengyan', 'chiling', 'diaohulishan', 'yuanjiao', 'huoshaolianying']);\r\n                    }\r\n                    for (let i = 0; i < list.length; i++) {\r\n                        if (Evt.filterCard({ name: list[i] }, player))\r\n                            return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                chooseButton: {\r\n                    dialog() {\r\n                        let list = [];\r\n                        for (let i = 0; i < lib.inpile.length; i++) {\r\n                            let name = lib.inpile[i];\r\n                            if (name == 'wuxie')\r\n                                continue;\r\n                            if (name == 'sha') {\r\n                                list.push(['基本', '', 'sha']);\r\n                                list.push(['基本', '', 'sha', 'fire']);\r\n                                list.push(['基本', '', 'sha', 'thunder']);\r\n                                list.push(['基本', '', 'sha', 'ice']);\r\n                            }\r\n                            else if (get.type(name) == 'trick')\r\n                                list.push(['锦囊', '', name]);\r\n                            else if (get.type(name) == 'basic')\r\n                                list.push(['基本', '', name]);\r\n                        }\r\n                        return ui.create.dialog('不太准', [list, 'vcard']);\r\n                    },\r\n                    filter(button, player) {\r\n                        let evt = _status.event.getParent();\r\n                        if (evt === null || evt === void 0 ? void 0 : evt.filterCard) {\r\n                            return evt.filterCard({ name: button.link[2] }, player, evt);\r\n                        }\r\n                        return true;\r\n                    },\r\n                    backup(links, player) {\r\n                        return {\r\n                            filterCard: true,\r\n                            selectCard: 1,\r\n                            viewAs: { name: links[0][2], nature: links[0][3] },\r\n                        };\r\n                    },\r\n                    prompt(links, player) {\r\n                        return `将一张手牌做当${get.$t(links[0][2])}使用`;\r\n                    },\r\n                },\r\n                ai: {\r\n                    save: true,\r\n                    respondShan: true,\r\n                    fireAttack: true,\r\n                    skillTagFilter(player) {\r\n                        if (player.hasSkill('butaizhun_used'))\r\n                            return false;\r\n                    },\r\n                    threaten: 1.2,\r\n                },\r\n            },\r\n            butaizhun_guess: {\r\n                audio: 2,\r\n                trigger: {\r\n                    player: \"useCardBefore\",\r\n                },\r\n                filter(Evt, player) {\r\n                    return Evt.skill == \"butaizhun_backup\" || Evt.skill == \"butaizhun_wuxie\";\r\n                },\r\n                forced: true,\r\n                direct: true,\r\n                priority: 15,\r\n                content: [() => {\r\n                        player.logSkill('butaizhun_guess');\r\n                        player.addTempSkill('butaizhun_used');\r\n                        player.popup(trigger.card.name, 'metal');\r\n                        player.lose(trigger.cards, ui.special);\r\n                        player.line(trigger.targets, trigger.card.nature);\r\n                        trigger.line = false;\r\n                        trigger.animate = false;\r\n                        Evt.prompt = `${get.$t(player)}声明了${get.$t(trigger.card.name)}，是否质疑？`;\r\n                        Evt.guessers = game.filterPlayer(cur => cur != player && !cur.hasSkill('tianqi_mark'));\r\n                        Evt.guessers.sort(lib.sort.seat);\r\n                        game.broadcastAll(card => {\r\n                            _status.guhuoNode = card.copy('thrown');\r\n                            if (lib.config.cardback_style != 'default') {\r\n                                _status.guhuoNode.style.transitionProperty = 'none';\r\n                                ui.refresh(_status.guhuoNode);\r\n                                _status.guhuoNode.classList.add('infohidden');\r\n                                ui.refresh(_status.guhuoNode);\r\n                                _status.guhuoNode.style.transitionProperty = '';\r\n                            }\r\n                            else {\r\n                                _status.guhuoNode.classList.add('infohidden');\r\n                            }\r\n                            _status.guhuoNode.style.transform = 'perspective(600px) rotateY(180deg) translateX(0)';\r\n                            player.$throwordered2(_status.guhuoNode);\r\n                        }, trigger.cards[0]);\r\n                        Evt.onEnd01 = function () {\r\n                            _status.guhuoNode.removeEventListener('webkitTransitionEnd', Evt.onEnd01);\r\n                            _status.guhuoNode.style.transition = 'all ease-in 0.3s';\r\n                            _status.guhuoNode.style.transform = 'perspective(600px) rotateY(270deg) translateX(52px)';\r\n                            let onEnd = function () {\r\n                                _status.guhuoNode.classList.remove('infohidden');\r\n                                _status.guhuoNode.style.transition = 'all 0s';\r\n                                ui.refresh(_status.guhuoNode);\r\n                                _status.guhuoNode.style.transform = 'perspective(600px) rotateY(-90deg) translateX(52px)';\r\n                                ui.refresh(_status.guhuoNode);\r\n                                _status.guhuoNode.style.transition = '';\r\n                                ui.refresh(_status.guhuoNode);\r\n                                _status.guhuoNode.style.transform = '';\r\n                                _status.guhuoNode.removeEventListener('webkitTransitionEnd', onEnd);\r\n                            };\r\n                            _status.guhuoNode.listenTransition(onEnd);\r\n                        };\r\n                    }, () => {\r\n                        if (Evt.guessers.length == 0)\r\n                            Evt.goto(3);\r\n                        else {\r\n                            Evt.guessers[0].chooseControl('质疑', '不质疑').set('prompt', Evt.prompt).set('ai', function () {\r\n                                if (get.$a(Evt.guessers[0], player) > 0)\r\n                                    return '不质疑';\r\n                                return Math.random() < 0.5 ? '不质疑' : '质疑';\r\n                            });\r\n                        }\r\n                    }, () => {\r\n                        if (!result.control)\r\n                            result.control = '不质疑';\r\n                        Evt.guessers[0].chat(result.control);\r\n                        game.delay(1);\r\n                        if (result.control == '不质疑') {\r\n                            game.log(Evt.guessers[0], '#g不质疑');\r\n                            Evt.guessers.remove(Evt.guessers[0]);\r\n                            Evt.goto(1);\r\n                        }\r\n                        else {\r\n                            game.log(Evt.guessers[0], '#y质疑');\r\n                        }\r\n                    }, () => {\r\n                        game.broadcastAll(function (onEnd) {\r\n                            _status.guhuoNode.listenTransition(onEnd);\r\n                        }, Evt.onEnd01);\r\n                    }, () => {\r\n                        game.delay(3.2);\r\n                    }, () => {\r\n                        if (!Evt.guessers.length)\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (trigger.card.name == trigger.cards[0].name) {\r\n                            Evt.guessers[0].popup('质疑错误', 'fire');\r\n                            let cards = get.cards();\r\n                            game.cardsGotoSpecial(cards);\r\n                            Evt.guessers[0].$gain2(cards);\r\n                            Evt.guessers[0].markAuto('tianqi_mark', cards);\r\n                            Evt.guessers[0].addSkill('tianqi_mark');\r\n                            game.log(Evt.guessers[0], '获得了', '#g「天气」');\r\n                        }\r\n                        else {\r\n                            Evt.guessers[0].popup('质疑正确', 'wood');\r\n                            game.log(player, '使用的', trigger.card, '作废了');\r\n                            game.cardsDiscard(trigger.cards);\r\n                            game.broadcastAll(ui.clear);\r\n                            trigger.cancel();\r\n                            if (trigger.name == 'useCard' && trigger.parent)\r\n                                trigger.parent.goto(0);\r\n                        }\r\n                        game.delay();\r\n                    }],\r\n            },\r\n            butaizhun_respond: {\r\n                trigger: {\r\n                    player: \"chooseToRespondBegin\",\r\n                },\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('butaizhun_used'))\r\n                        return false;\r\n                    if (Evt.responded)\r\n                        return false;\r\n                    if (!Evt.filterCard({ name: 'shan' }) && !Evt.filterCard({ name: 'sha' }))\r\n                        return false;\r\n                    if (!lib.filter.cardRespondable({ name: 'shan' }, player, Evt) && !lib.filter.cardRespondable({ name: 'sha' }, player, Evt))\r\n                        return false;\r\n                    if (!player.countCards('h'))\r\n                        return false;\r\n                    return true;\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    \"step 0\";\r\n                    if (trigger.filterCard({ name: 'shan' }) && lib.filter.cardRespondable({ name: 'shan' }, player, trigger))\r\n                        Evt.name = 'shan';\r\n                    else\r\n                        Evt.name = 'sha';\r\n                    player.chooseCard(`是否发动【不太准】，将一张手牌当做${get.$t(Evt.name)}打出？`);\r\n                    \"step 1\";\r\n                    if (result.bool) {\r\n                        player.logSkill('butaizhun_guess');\r\n                        player.addTempSkill('butaizhun_used');\r\n                        player.popup(Evt.name, 'metal');\r\n                        Evt.card = result.cards[0];\r\n                        player.lose(Evt.card, ui.special);\r\n                        Evt.prompt = `${get.$t(player)}声明了${get.$t(Evt.name)}，是否质疑？`;\r\n                        Evt.guessers = game.filterPlayer(cur => cur != player && !cur.hasSkill('tianqi_mark'));\r\n                        Evt.guessers.sort(lib.sort.seat);\r\n                        game.broadcastAll(card => {\r\n                            _status.guhuoNode = card.copy('thrown');\r\n                            if (lib.config.cardback_style != 'default') {\r\n                                _status.guhuoNode.style.transitionProperty = 'none';\r\n                                ui.refresh(_status.guhuoNode);\r\n                                _status.guhuoNode.classList.add('infohidden');\r\n                                ui.refresh(_status.guhuoNode);\r\n                                _status.guhuoNode.style.transitionProperty = '';\r\n                            }\r\n                            else {\r\n                                _status.guhuoNode.classList.add('infohidden');\r\n                            }\r\n                            _status.guhuoNode.style.transform = 'perspective(600px) rotateY(180deg) translateX(0)';\r\n                            player.$throwordered2(_status.guhuoNode);\r\n                        }, result.cards[0]);\r\n                        Evt.onEnd01 = function () {\r\n                            _status.guhuoNode.removeEventListener('webkitTransitionEnd', Evt.onEnd01);\r\n                            _status.guhuoNode.style.transition = 'all ease-in 0.3s';\r\n                            _status.guhuoNode.style.transform = 'perspective(600px) rotateY(270deg) translateX(52px)';\r\n                            let onEnd = function () {\r\n                                _status.guhuoNode.classList.remove('infohidden');\r\n                                _status.guhuoNode.style.transition = 'all 0s';\r\n                                ui.refresh(_status.guhuoNode);\r\n                                _status.guhuoNode.style.transform = 'perspective(600px) rotateY(-90deg) translateX(52px)';\r\n                                ui.refresh(_status.guhuoNode);\r\n                                _status.guhuoNode.style.transition = '';\r\n                                ui.refresh(_status.guhuoNode);\r\n                                _status.guhuoNode.style.transform = '';\r\n                                _status.guhuoNode.removeEventListener('webkitTransitionEnd', onEnd);\r\n                            };\r\n                            _status.guhuoNode.listenTransition(onEnd);\r\n                        };\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    \"step 2\";\r\n                    if (Evt.guessers.length == 0)\r\n                        Evt.goto(4);\r\n                    else {\r\n                        Evt.guessers[0].chooseControl('质疑', '不质疑').set('prompt', Evt.prompt).set('ai', function () {\r\n                            if (get.$a(Evt.guessers[0], player) > 0)\r\n                                return '不质疑';\r\n                            return Math.random() < 0.5 ? '不质疑' : '质疑';\r\n                        });\r\n                    }\r\n                    \"step 3\";\r\n                    if (!result.control)\r\n                        result.control = '不质疑';\r\n                    Evt.guessers[0].chat(result.control);\r\n                    game.delay();\r\n                    if (result.control == '不质疑') {\r\n                        game.log(Evt.guessers[0], '#g不质疑');\r\n                        Evt.guessers.remove(Evt.guessers[0]);\r\n                        Evt.goto(2);\r\n                    }\r\n                    else {\r\n                        game.log(Evt.guessers[0], '#y质疑');\r\n                    }\r\n                    \"step 4\";\r\n                    game.broadcastAll(function (onEnd) {\r\n                        _status.guhuoNode.listenTransition(onEnd);\r\n                    }, Evt.onEnd01);\r\n                    \"step 5\";\r\n                    game.delay(3.2);\r\n                    if (!Evt.guessers.length)\r\n                        Evt.goto(7);\r\n                    \"step 6\";\r\n                    if (Evt.name == Evt.card.name) {\r\n                        Evt.guessers[0].popup('质疑错误', 'fire');\r\n                        let cards = get.cards();\r\n                        game.cardsGotoSpecial(cards);\r\n                        Evt.guessers[0].$gain2(cards);\r\n                        Evt.guessers[0].markAuto('tianqi_mark', cards);\r\n                        Evt.guessers[0].addSkill('tianqi_mark');\r\n                        game.log(Evt.guessers[0], '获得了', '#g「天气」牌');\r\n                    }\r\n                    else {\r\n                        Evt.guessers[0].popup('质疑正确', 'wood');\r\n                        game.log(player, '打出的', '#y' + get.$t(Evt.name), '作废了');\r\n                        game.cardsDiscard(Evt.card);\r\n                        Evt.finish();\r\n                    }\r\n                    \"step 7\";\r\n                    trigger.untrigger();\r\n                    trigger.responded = true;\r\n                    trigger.result = { bool: true, card: { name: Evt.name }, cards: [Evt.card], noanimate: true };\r\n                },\r\n                ai: {\r\n                    order: 4,\r\n                    useful: -1,\r\n                    value: -1,\r\n                },\r\n            },\r\n            butaizhun_wuxie: {\r\n                log: false,\r\n                silent: true,\r\n                popup: false,\r\n                enable: \"chooseToUse\",\r\n                filterCard: true,\r\n                viewAsFilter(player) {\r\n                    if (player.hasSkill('butaizhun_used'))\r\n                        return false;\r\n                    return player.countCards('h') > 0;\r\n                },\r\n                viewAs: {\r\n                    name: \"wuxie\",\r\n                },\r\n                check(card) {\r\n                    if (card.name == 'wuxie')\r\n                        return 1000;\r\n                    return 0;\r\n                },\r\n                prompt: \"将一张手牌当无懈可击使用\",\r\n                threaten: 1.2,\r\n            },\r\n            guangan: {\r\n                trigger: { global: 'useCard2' },\r\n                filter(Evt, player) {\r\n                    if (player.$.guangan >= game.countPlayer() - 1)\r\n                        return false;\r\n                    return Evt.player == player && (Evt.targets.includes(player.getNext()) || player.getStorage('zonghe').filter(function (zonghe) {\r\n                        return Evt.targets.includes(zonghe);\r\n                    }).length) || (Evt.player == player.getPrevious() || player.getStorage('zonghe').includes(Evt.player)) && Evt.targets.includes(player);\r\n                },\r\n                frequent: true,\r\n                content: [() => {\r\n                        player.draw();\r\n                        if (!player.$.guangan)\r\n                            player.$.guangan = 0;\r\n                        player.$.guangan++;\r\n                    }, () => {\r\n                        player.markSkill('guangan');\r\n                    }],\r\n                marktext: '叽',\r\n                intro: {\r\n                    content: '本轮次已摸了&张牌',\r\n                    markcount(storage, player) {\r\n                        return player.$.guangan;\r\n                    }\r\n                },\r\n                group: 'guangan_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { global: 'roundStart' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        content() {\r\n                            delete player.$.guangan;\r\n                            player.unmarkSkill('guangan');\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            lanxuan: {\r\n                mod: {\r\n                    targetInRange(card, player, target) {\r\n                        if (_status.event.logSkill == 'lanxuan')\r\n                            return true;\r\n                    },\r\n                    cardUsable(card, player, num) {\r\n                        if (_status.event.logSkill == 'lanxuan')\r\n                            return Infinity;\r\n                    },\r\n                },\r\n                trigger: { source: 'damageAfter' },\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('lanxuan_used1'))\r\n                        return false;\r\n                    return player.countCards('hs', card => player.hasUseTarget(card));\r\n                },\r\n                direct: true,\r\n                usable: 1,\r\n                content: [() => {\r\n                        player.chooseToUse({\r\n                            filterCard(card, player) {\r\n                                return lib.filter.filterCard.apply(this, arguments);\r\n                            },\r\n                            prompt: get.$pro2('lanxuan')\r\n                        }).set('logSkill', ['lanxuan']).set('targetRequired', true);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.addTempSkill('lanxuan_used1');\r\n                        }\r\n                    }],\r\n                group: 'lanxuan_damageUse',\r\n                subSkill: {\r\n                    damageUse: {\r\n                        trigger: { player: 'damageAfter' },\r\n                        filter(Evt, player) {\r\n                            if (player.hasSkill('lanxuan_used2'))\r\n                                return false;\r\n                            return player.countCards('hs', card => player.hasUseTarget(card));\r\n                        },\r\n                        direct: true,\r\n                        usable: 1,\r\n                        content: [() => {\r\n                                player.chooseToUse({\r\n                                    filterCard(card, player) {\r\n                                        return lib.filter.filterCard.apply(this, arguments);\r\n                                    },\r\n                                    prompt: get.$pro2('lanxuan')\r\n                                }).set('logSkill', ['lanxuan']).set('targetRequired', true);\r\n                            }, () => {\r\n                                if (result.bool) {\r\n                                    player.addTempSkill('lanxuan_used2');\r\n                                }\r\n                            }],\r\n                    },\r\n                    used1: {},\r\n                    used2: {},\r\n                },\r\n                ai: {\r\n                    threaten: 1.2,\r\n                }\r\n            },\r\n            zonghe: {\r\n                audio: true,\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = [];\r\n                },\r\n                unique: true,\r\n                zhuSkill: true,\r\n                trigger: { global: 'gameDrawAfter', player: 'enterGame' },\r\n                filter(Evt, player) {\r\n                    if (!player.hasZhuSkill('zonghe'))\r\n                        return false;\r\n                    return game.hasPlayer(function (target) {\r\n                        return target != player && !player.getStorage('zonghe').includes(target)\r\n                            && (get.name(target) in lib.characterPack.clubs || target.group == 'qun');\r\n                    });\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        player.chooseTarget(get.$pro2('zonghe'), function (card, player, target) {\r\n                            return target != player && !player.getStorage('zonghe').includes(target)\r\n                                && (get.name(target) in lib.characterPack.clubs || target.group == 'qun');\r\n                        }).set('ai', function (target) {\r\n                            let player = _status.event.player;\r\n                            if (target != player.getNext())\r\n                                return 5 - get.$a(player, target);\r\n                            return 3 - get.$a(player, target);\r\n                        });\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('zonghe', Evt.target);\r\n                            player.$.zonghe.add(Evt.target);\r\n                            player.$.zonghe_mark = Evt.target;\r\n                            player.addSkill('zonghe_mark');\r\n                        }\r\n                    }],\r\n                involve: 'guangan',\r\n                subSkill: {\r\n                    mark: {\r\n                        mark: 'character',\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '纵合',\r\n                            content: '对$发动『珖黯』时无视座次限制',\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            qiying: {\r\n                trigger: { player: 'damageAfter' },\r\n                filter(Evt, player) {\r\n                    if (player == _status.currentPhase)\r\n                        return false;\r\n                    return lib.filter.cardEnabled({ name: 'nanman' }, player);\r\n                },\r\n                check(Evt, player) {\r\n                    let effect = 0;\r\n                    let players = game.players.slice(0);\r\n                    if (player.isTurnedOver() || player.isPhaseUsing())\r\n                        effect += 3;\r\n                    for (let i = 0; i < players.length; i++) {\r\n                        if (players[i] != player && player.canUse('nanman', players[i]))\r\n                            effect += get.effect(players[i], { name: 'nanman' }, player, player);\r\n                    }\r\n                    return effect > 0;\r\n                },\r\n                content: [() => {\r\n                        player.turnOver();\r\n                    }, () => {\r\n                        player.chooseUseTarget({ name: 'nanman' }, true);\r\n                    }]\r\n            },\r\n            hengxuan: {\r\n                trigger: { player: 'phaseJieshuBegin' },\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                check(Evt, player) {\r\n                    return true;\r\n                },\r\n                frequent: true,\r\n                content() {\r\n                    player.draw(2).gaintag = ['hengxuan'];\r\n                },\r\n                group: 'hengxuan_discardBy',\r\n                subSkill: {\r\n                    discardBy: {\r\n                        mod: {\r\n                            aiValue(player, card, num) {\r\n                                if (card.hasGaintag && card.hasGaintag('hengxuan'))\r\n                                    return num / 10;\r\n                            },\r\n                        },\r\n                        trigger: { target: \"useCardToTarget\" },\r\n                        filter(Evt, player) {\r\n                            return Evt.player != player && Evt.targets.length == 1 && player.countCards('h', (card) => card.hasGaintag('hengxuan'));\r\n                        },\r\n                        forced: true,\r\n                        content() {\r\n                            let hs = player.getCards('h', card => card.hasGaintag('hengxuan'));\r\n                            if (hs.length)\r\n                                player.discard(hs);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            shoumi: {\r\n                audio: 2,\r\n                trigger: { global: 'gameDrawAfter', player: ['enterGame', 'changeHp'] },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'changeHp')\r\n                        return Evt.num != 0;\r\n                    return true;\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    if (player.hp == 0) {\r\n                        let reason = trigger.getParent();\r\n                        delete player.nodying;\r\n                        if (trigger.num > 0)\r\n                            player.dying(reason);\r\n                    }\r\n                    else {\r\n                        player.nodying = true;\r\n                        if (player.hp < 0 && !player.hasSkill('shoumi_yingzi')) {\r\n                            player.addAdditionalSkill('shoumi', 'shoumi_yingzi');\r\n                        }\r\n                        else if (player.hp > 0 && !player.hasSkill('shoumi_guicai')) {\r\n                            player.addAdditionalSkill('shoumi', 'shoumi_guicai');\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, cur) {\r\n                            if (target.hp < 0) {\r\n                                if (get.tag(card, 'recover') > 0)\r\n                                    return [-1, 0];\r\n                                if (target.hp == -1)\r\n                                    return [1, -1];\r\n                                if (get.tag(card, 'damage') >= 1 || get.tag(card, 'loseHp'))\r\n                                    return [-1.5, 0];\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                involve: ['shoumi_yingzi', 'shoumi_guicai']\r\n            },\r\n            shoumi_yingzi: {\r\n                trigger: { player: 'phaseDrawBegin2' },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return !Evt.numFixed;\r\n                },\r\n                content() {\r\n                    trigger.num++;\r\n                },\r\n                ai: {\r\n                    threaten: 1.5\r\n                },\r\n                mod: {\r\n                    maxHandcardBase(player, num) {\r\n                        return player.maxHp;\r\n                    }\r\n                }\r\n            },\r\n            shoumi_guicai: {\r\n                trigger: { global: 'judge' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') > 0;\r\n                },\r\n                content() {\r\n                    \"step 0\";\r\n                    player.chooseCard(`${get.$t(trigger.player)}的${trigger.judgestr || ''}判定为${get.$t(trigger.player.judging[0])}，${get.$pro('shoumi_guicai')}`, 'he', card => {\r\n                        let player = _status.event.player;\r\n                        let mod2 = game.checkMod(card, player, 'unchanged', 'cardEnabled2', player);\r\n                        if (mod2 != 'unchanged')\r\n                            return mod2;\r\n                        let mod = game.checkMod(card, player, 'unchanged', 'cardRespondable', player);\r\n                        if (mod != 'unchanged')\r\n                            return mod;\r\n                        return true;\r\n                    }).set('ai', card => {\r\n                        let trigger = _status.event.getTrigger();\r\n                        let player = _status.event.player;\r\n                        let judging = _status.event.judging;\r\n                        let result = trigger.judge(card) - trigger.judge(judging);\r\n                        let att = get.$a(player, trigger.player);\r\n                        if (att == 0 || result == 0)\r\n                            return 0;\r\n                        if (att > 0) {\r\n                            return result - get.value(card) / 2;\r\n                        }\r\n                        else {\r\n                            return -result - get.value(card) / 2;\r\n                        }\r\n                    }).set('judging', trigger.player.judging[0]);\r\n                    \"step 1\";\r\n                    if (result.bool) {\r\n                        player.respond(result.cards, 'shoumi_guicai', 'highlight', 'noOrdering');\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    \"step 2\";\r\n                    if (result.bool) {\r\n                        if (trigger.player.judging[0].clone) {\r\n                            trigger.player.judging[0].clone.classList.remove('thrownhighlight');\r\n                            game.broadcast(card => {\r\n                                if (card.clone) {\r\n                                    card.clone.classList.remove('thrownhighlight');\r\n                                }\r\n                            }, trigger.player.judging[0]);\r\n                            game.addVideo('deletenode', player, get.cardsInfo([trigger.player.judging[0].clone]));\r\n                        }\r\n                        game.cardsDiscard(trigger.player.judging[0]);\r\n                        trigger.player.judging[0] = result.cards[0];\r\n                        trigger.orderingCards.addArray(result.cards);\r\n                        game.log(trigger.player, '的判定牌改为', result.cards[0]);\r\n                        game.delay(2);\r\n                    }\r\n                },\r\n                ai: {\r\n                    rejudge: true,\r\n                    tag: {\r\n                        rejudge: 1,\r\n                    }\r\n                }\r\n            },\r\n            yanwang: {\r\n                trigger: { target: 'useCardToTarget' },\r\n                filter(Evt, player) {\r\n                    return Evt.player != player;\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        player.line(trigger.player, 'green');\r\n                        let check = get.recoverEffect(player, trigger.player, trigger.player);\r\n                        if (player.countCards('h') > 0)\r\n                            check += 0.5;\r\n                        check = check > 0;\r\n                        trigger.player.chooseBool(get.$pro2('yanwang', player)).set('choice', check > 0);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            trigger.player.logSkill('yanwang', player);\r\n                            player.recover(trigger.player);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        trigger.player.gainPlayerCard(player, 'h', true, 'visibleMove');\r\n                    }, () => {\r\n                        if (result.bool && result.links) {\r\n                            if (get.color(result.links[0]) == 'black') {\r\n                                if (!game.hasPlayer(cur => cur != player && cur != trigger.player && trigger.player.canUse('juedou', cur))) {\r\n                                    Evt.finish();\r\n                                    return;\r\n                                }\r\n                                Evt.source = trigger.player;\r\n                                player.chooseTarget(true, function (card, player, target) {\r\n                                    let evt = _status.event.getParent();\r\n                                    return evt.source.canUse({ name: 'juedou' }, target);\r\n                                }, `请选择一名角色，视为${get.$t(trigger.player)}对其使用【决斗】`).set('ai', function (target) {\r\n                                    let evt = _status.event.getParent();\r\n                                    return get.effect(target, { name: 'juedou' }, evt.source, _status.event.player) - 2;\r\n                                });\r\n                            }\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            trigger.player.useCard({ name: 'juedou', isCard: true }, result.targets[0], 'noai');\r\n                        }\r\n                    }],\r\n            },\r\n            bykuangxin: {\r\n                audio: 2,\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                content: [() => {\r\n                        if (Evt.cards == undefined)\r\n                            Evt.cards = [];\r\n                        if (Evt.d10 == undefined)\r\n                            Evt.d10 = [];\r\n                        let next = player.judge(card => {\r\n                            if (get.number(card) > 10)\r\n                                return 1.5;\r\n                            return 0;\r\n                        });\r\n                        next.set('callback', function () {\r\n                            let evt = Evt.getParent('bykuangxin');\r\n                            if (get.number(card) > 10) {\r\n                                Evt.getParent().orderingCards.remove(card);\r\n                            }\r\n                            else {\r\n                                evt.d10.unshift(card);\r\n                                if (!evt.num) {\r\n                                    evt.num = 0;\r\n                                }\r\n                                evt.num++;\r\n                                if (evt.d100 == undefined) {\r\n                                    evt.d100 = 0;\r\n                                    if (get.number(card) != 10)\r\n                                        evt.d100 += get.number(card);\r\n                                }\r\n                                else {\r\n                                    if (get.number(card) != 10 || evt.d100 == 0)\r\n                                        evt.d100 += (get.number(card) * 10);\r\n                                }\r\n                                if (evt.num == 2) {\r\n                                    player.chat('1d100=' + evt.d100);\r\n                                    if (evt.d100 >= 96)\r\n                                        player.popup('大失败', 'yami');\r\n                                    else if (evt.d100 <= 5)\r\n                                        player.popup('大成功', 'wood');\r\n                                    else if (evt.d100 <= 40)\r\n                                        player.popup('成功', 'wood');\r\n                                    else if (evt.d100 >= 61)\r\n                                        player.popup('失败', 'yami');\r\n                                    game.delayx(1.5);\r\n                                }\r\n                            }\r\n                            game.delayx(0.2);\r\n                        });\r\n                    }, () => {\r\n                        if (Evt.num != 2) {\r\n                            Evt.card = get.cards()[0];\r\n                            if (Evt.videoId == undefined)\r\n                                Evt.videoId = lib.status.videoId++;\r\n                            if (result.number > 10)\r\n                                Evt.cards.push(result.card);\r\n                            for (let i of Evt.cards) {\r\n                                Evt.card = i;\r\n                                game.addVideo('judge1', player, [get.cardInfo(Evt.card), false, Evt.videoId]);\r\n                                game.broadcastAll(function (player, card, str, id, cardid) {\r\n                                    let Evt;\r\n                                    if (game.online) {\r\n                                        Evt = {};\r\n                                    }\r\n                                    else {\r\n                                        Evt = _status.event;\r\n                                    }\r\n                                    if (game.chess) {\r\n                                        Evt.node = card.copy('thrown', 'center', ui.arena).animate('start');\r\n                                    }\r\n                                    else {\r\n                                        Evt.node = player.$throwordered(card.copy(), true);\r\n                                    }\r\n                                    if (lib.cardOL)\r\n                                        lib.cardOL[cardid] = Evt.node;\r\n                                    Evt.node.cardid = cardid;\r\n                                    Evt.node.classList.add('thrownhighlight');\r\n                                    ui.arena.classList.add('thrownhighlight');\r\n                                    Evt.dialog = ui.create.dialog(str);\r\n                                    Evt.dialog.classList.add('center');\r\n                                    Evt.dialog.videoId = id;\r\n                                }, player, Evt.card, false, Evt.videoId, get.id());\r\n                            }\r\n                            game.addVideo('centernode', null, get.cardsInfo(Evt.cards));\r\n                            Evt.goto(0);\r\n                        }\r\n                        else {\r\n                            if (Evt.videoId) {\r\n                                game.addVideo('judge2', null, Evt.videoId);\r\n                                game.broadcast(function (id) {\r\n                                    let dialog = get.idDialog(id);\r\n                                    if (dialog) {\r\n                                        dialog.close();\r\n                                    }\r\n                                    ui.arena.classList.remove('thrownhighlight');\r\n                                }, Evt.videoId);\r\n                            }\r\n                            for (let i = 0; i < Evt.cards.length; i++) {\r\n                                if (get.position(Evt.cards[i], true) != 'o') {\r\n                                    Evt.cards.splice(i, 1);\r\n                                    i--;\r\n                                }\r\n                            }\r\n                            player.gain(Evt.cards, 'gain2').gaintag.add('bykuangxin');\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.d100) {\r\n                            player.showCards(Evt.d10, '『狂信』判定结果：' + Evt.d100);\r\n                            if (Evt.d100 >= 96) {\r\n                                game.filterPlayer(cur => {\r\n                                    if (cur != player)\r\n                                        player.randomGain('h', cur);\r\n                                });\r\n                            }\r\n                            else if (Evt.d100 <= 5) {\r\n                                player.draw(2);\r\n                                player.gainMaxHp(true);\r\n                            }\r\n                            else if (Evt.d100 <= 40) {\r\n                                player.recover();\r\n                            }\r\n                            else if (Evt.d100 <= 60) {\r\n                            }\r\n                            else if (Evt.d100 <= 95) {\r\n                                player.loseHp();\r\n                                if (player.needsToDiscard()) {\r\n                                    player.chooseToDiscard(player.needsToDiscard(), true);\r\n                                }\r\n                            }\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.d100) {\r\n                            if (Evt.d100 >= 96) {\r\n                                player.loseMaxHp(true);\r\n                                if (lib.config.background_audio) {\r\n                                    game.playAudio('effect', 'damage2');\r\n                                }\r\n                                game.broadcast(function () {\r\n                                    if (lib.config.background_audio) {\r\n                                        game.playAudio('effect', 'damage2');\r\n                                    }\r\n                                });\r\n                                player.$damage(player);\r\n                            }\r\n                            else if (Evt.d100 >= 41 && Evt.d100 <= 60) {\r\n                                if (player.hasUseTarget('juedou')) {\r\n                                    player.chooseUseTarget({ name: 'juedou', isCard: true }, true);\r\n                                }\r\n                            }\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    order: 6,\r\n                    result: {\r\n                        player: 1\r\n                    }\r\n                },\r\n            },\r\n            rouqing: {\r\n                init(player, skill) {\r\n                    player.$[skill] = 1;\r\n                    player.markSkill('rouqing');\r\n                },\r\n                marktext: '柔',\r\n                intro: {\r\n                    content(storage, player) {\r\n                        let str = '下一次发动『柔情』时，（）值为：';\r\n                        if (player.$.rouqing > 4)\r\n                            str += get.cnNumber(0);\r\n                        else\r\n                            str += get.cnNumber(4 - player.$.rouqing);\r\n                        return str;\r\n                    },\r\n                },\r\n                trigger: { global: 'changeHp' },\r\n                filter(Evt, player) {\r\n                    return Evt.num < 0;\r\n                },\r\n                usable: 1,\r\n                frequent(Evt, player) {\r\n                    return player == Evt.player;\r\n                },\r\n                check(Evt, player) {\r\n                    return get.$a(player, Evt.player) > 0;\r\n                },\r\n                logTarget: 'player',\r\n                content: [() => {\r\n                        Evt.num = -trigger.num;\r\n                        Evt.target = trigger.player;\r\n                        if (!player.$.rouqing)\r\n                            player.$.rouqing = 1;\r\n                        Evt.min = 4 - player.$.rouqing;\r\n                        if (Evt.min < 0) {\r\n                            Evt.min = 0;\r\n                        }\r\n                    }, () => {\r\n                        Evt.num--;\r\n                        Evt.cards = get.cards(4);\r\n                        Evt.target.chooseCardButton([Evt.min, 4], true, Evt.cards, `『柔情』：选择至少(${get.cnNumber(Evt.min)})张牌置于牌堆底（先选择的在下）<br>\r\n\t\t\t\t\t然后获得未被选择的牌`).set('ai', function (button) {\r\n                            let min = 0;\r\n                            if (ui.selected.buttons.length >= Evt.min)\r\n                                min = -5;\r\n                            let player = _status.event.player, now = _status.currentPhase, next = now.getNext();\r\n                            let att = get.$a(player, next), card = button.link;\r\n                            let judge = next.getCards('j')[ui.selected.buttons.length];\r\n                            if (judge) {\r\n                                return get.judge(judge)(card) * att + min;\r\n                            }\r\n                            return next.getUseValue(card) * att + min;\r\n                        }).set('min', Evt.min);\r\n                    }, () => {\r\n                        if (result.bool && result.links) {\r\n                            player.$.rouqing = 1;\r\n                            player.markSkill('rouqing');\r\n                            let cards = result.links.slice(0);\r\n                            Evt.cards.removeArray(cards);\r\n                            game.log(Evt.target, `将${get.cnNumber(cards.length)}张牌置于牌堆底`);\r\n                            while (cards.length) {\r\n                                ui.cardPile.appendChild(cards.pop().fix());\r\n                            }\r\n                            game.updateRoundNumber();\r\n                            if (Evt.cards.length) {\r\n                                Evt.target.gain(Evt.cards, 'gain2');\r\n                            }\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.num > 0)\r\n                            Evt.goto(1);\r\n                    }],\r\n                ai: {\r\n                    threaten: 1.9,\r\n                    maixie: true,\r\n                    maixie_hp: true,\r\n                }\r\n            },\r\n            guangying: {\r\n                trigger: {\r\n                    player: 'loseAfter',\r\n                    global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter'],\r\n                },\r\n                filter(Evt, player) {\r\n                    var _a;\r\n                    if (Evt.getParent().name == 'useCard')\r\n                        return false;\r\n                    let evt = Evt.getl(player);\r\n                    return (_a = evt === null || evt === void 0 ? void 0 : evt.hs) === null || _a === void 0 ? void 0 : _a.length;\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    if (!player.$.rouqing)\r\n                        player.$.rouqing = 1;\r\n                    player.$.rouqing++;\r\n                    player.markSkill('rouqing');\r\n                },\r\n                ai: {\r\n                    combo: 'rouqing'\r\n                },\r\n                group: 'guangying_recoverBy',\r\n                subSkill: {\r\n                    recoverBy: {\r\n                        trigger: {\r\n                            player: 'gainAfter',\r\n                        },\r\n                        filter(Evt, player) {\r\n                            var _a;\r\n                            return ((_a = Evt.cards) === null || _a === void 0 ? void 0 : _a.length) >= 4;\r\n                        },\r\n                        forced: true,\r\n                        content() {\r\n                            player.recover();\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            aldanyan: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('active', {\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') > 0;\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    if (target.hp >= player.hp)\r\n                        return true;\r\n                },\r\n                selectCard: 2,\r\n                discard: false,\r\n                prepare: 'give2',\r\n                content: [() => {\r\n                        target.gain(cards, player);\r\n                    }, () => {\r\n                        Evt.list = [`令${get.$t(player)}获得你的三张牌`, '受到一点伤害'];\r\n                        target.chooseControl('dialogcontrol', Evt.list).set('ai', function () {\r\n                            let { player, source, controls } = _status.event;\r\n                            if (get.$a(player, source) > 0 || player.countCards('he') == 0)\r\n                                return 0;\r\n                            if (get.damageEffect(player, source, player) < 0 && player.hp == 1)\r\n                                return 0;\r\n                            if (get.damageEffect(player, source, player) > 0)\r\n                                return 1;\r\n                            return controls.randomGet();\r\n                        }).set('source', player);\r\n                    }, () => {\r\n                        switch (result.control) {\r\n                            case Evt.list[0]: {\r\n                                player.gainPlayerCard(target, [1, 3], true, 'he', 'visible');\r\n                                break;\r\n                            }\r\n                            case Evt.list[1]: {\r\n                                target.damage(player);\r\n                                game.delayx();\r\n                                break;\r\n                            }\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    order(item, player) {\r\n                        return 6;\r\n                    },\r\n                    result: {\r\n                        player(player, target) {\r\n                            return -1;\r\n                        },\r\n                        target(player, target) {\r\n                            if (target.countCards('he'))\r\n                                return -2;\r\n                            return get.damageEffect(target, player, target);\r\n                        }\r\n                    },\r\n                    threaten: 0.4,\r\n                    expose: 0.2,\r\n                },\r\n            }, 'filterCard'),\r\n            lunao: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                trigger: { source: 'damageBegin2' },\r\n                priority: 199,\r\n                content: [() => {\r\n                        let list = lib.linked.slice(0);\r\n                        list.remove('kami');\r\n                        list.remove(trigger.nature);\r\n                        Evt.map = {};\r\n                        for (let i = 0; i < list.length; i++) {\r\n                            Evt.map[get.rawName(list[i])] = list[i];\r\n                            list[i] = get.rawName(list[i]);\r\n                        }\r\n                        list.push('取消');\r\n                        player.chooseControl('dialogcontrol', list).set('ai', () => list.randomGets()).set('prompt', get.$pro2('lunao'));\r\n                    }, () => {\r\n                        if (result.control != '取消') {\r\n                            Evt.target = trigger.player;\r\n                            player.logSkill('lunao', Evt.target);\r\n                            trigger.nature = Evt.map[result.control];\r\n                            trigger.num++;\r\n                            let halt = game.createEvent('halt');\r\n                            Evt.next.remove(halt);\r\n                            trigger.after.push(halt);\r\n                            halt.setContent(function () {\r\n                                var evt = _status.event.getParent('phaseUse');\r\n                                if (evt && evt.name == 'phaseUse') {\r\n                                    evt.skipped = true;\r\n                                }\r\n                                var evt = _status.event.getParent('phase');\r\n                                if (evt && evt.name == 'phase') {\r\n                                    evt.finish();\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }]\r\n            }, 'direct'),\r\n            zhazong: {\r\n                trigger: { player: 'phaseUseEnd' },\r\n                direct: true,\r\n                audio: 3,\r\n                filter(Evt, player) {\r\n                    return !player.hasHistory('useCard', evt => get.type2(evt.card) == 'basic' && evt.getParent('phaseUse') == Evt)\r\n                        || !player.hasHistory('useCard', evt => get.type2(evt.card) == 'equip' && evt.getParent('phaseUse') == Evt)\r\n                        || !player.hasHistory('useCard', evt => get.type2(evt.card) == 'trick' && evt.getParent('phaseUse') == Evt);\r\n                },\r\n                content: [() => {\r\n                        let position = '';\r\n                        let str = '弃置一名角色';\r\n                        if (!player.hasHistory('useCard', evt => get.type2(evt.card) == 'basic' && evt.getParent('phaseUse') == trigger)) {\r\n                            position += 'h';\r\n                            str += ' 手牌区 ';\r\n                        }\r\n                        if (!player.hasHistory('useCard', evt => get.type2(evt.card) == 'equip' && evt.getParent('phaseUse') == trigger)) {\r\n                            position += 'e';\r\n                            str += ' 装备区 ';\r\n                        }\r\n                        if (!player.hasHistory('useCard', evt => get.type2(evt.card) == 'trick' && evt.getParent('phaseUse') == trigger)) {\r\n                            position += 'j';\r\n                            str += ' 判定区 ';\r\n                        }\r\n                        Evt.position = position;\r\n                        if (position.length) {\r\n                            str += '各至多一张牌';\r\n                            player.chooseTarget(get.$pro('zhazong'), function (card, player, target) {\r\n                                return target.countCards(_status.event.position);\r\n                            }).set('position', position).set('prompt2', str).set('ai', function (target) {\r\n                                let player = _status.event.player;\r\n                                let att = get.$a(player, target);\r\n                                if (att < 0) {\r\n                                    att = -Math.sqrt(-att);\r\n                                }\r\n                                else {\r\n                                    att = Math.sqrt(att);\r\n                                }\r\n                                if (_status.event.position == 'h')\r\n                                    return -att;\r\n                                return att * lib.card.guohe.ai.result.target(player, target);\r\n                            });\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            player.logSkill('zhazong', result.targets);\r\n                            Evt.target = result.targets[0];\r\n                            player.discardPlayerCard(Evt.target, Evt.position, [1, Evt.position.length], true).set('filterButton', function (button) {\r\n                                for (let i = 0; i < ui.selected.buttons.length; i++) {\r\n                                    if (get.position(button.link) == get.position(ui.selected.buttons[i].link))\r\n                                        return false;\r\n                                }\r\n                                return true;\r\n                            });\r\n                        }\r\n                    }]\r\n            },\r\n            mengnan: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    var _a;\r\n                    if (Evt.name == 'addJudge' && Evt.player == player)\r\n                        return true;\r\n                    let evt = Evt.getl(player);\r\n                    return ((_a = evt === null || evt === void 0 ? void 0 : evt.js) === null || _a === void 0 ? void 0 : _a.length) > 0 && !player.hasSkill('misuzu_zhongxing_haruko');\r\n                },\r\n                content() {\r\n                    let draw = false, num = 2;\r\n                    if (trigger.name == 'addJudge' && trigger.player == player)\r\n                        draw = true;\r\n                    let evt = trigger.getParent('phaseJudge');\r\n                    if ((evt === null || evt === void 0 ? void 0 : evt.name) == 'phaseJudge') {\r\n                        num = 1;\r\n                    }\r\n                    if (draw)\r\n                        player.draw(num);\r\n                    else\r\n                        player.chooseToDiscard(num, true);\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (get.name(card) == 'shandian') {\r\n                                return [1, 1];\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    yuenanBy: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                        filter(Evt, player) {\r\n                            return player.isAlive();\r\n                        },\r\n                        content() {\r\n                            player.removeSkill('mengnan');\r\n                            player.addSkill('yuenan');\r\n                        },\r\n                    }, 'forced').setT('dyingAfter')\r\n                },\r\n                group: 'mengnan_yuenanBy',\r\n                derivation: 'yuenan'\r\n            }, 'forced').setT({\r\n                player: ['loseAfter', 'addJudgeAfter'],\r\n                global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter'],\r\n            }),\r\n            lique: {\r\n                trigger: { target: 'useCardToTargeted' },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return get.type(Evt.card) != 'equip';\r\n                },\r\n                content: [() => {\r\n                        player.loseHp();\r\n                    }, () => {\r\n                        player.draw();\r\n                    }],\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (target.hp < 0)\r\n                                return [0, 1];\r\n                            if (get.type(card) != 'equip')\r\n                                return [1, 2];\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            zhangdeng: {\r\n                trigger: { player: 'dying' },\r\n                forced: true,\r\n                filter: (Evt, player) => true,\r\n                content() {\r\n                    player.recover();\r\n                    game.delayx();\r\n                },\r\n                ai: {\r\n                    maixie_defend: true,\r\n                    threaten(player, target) {\r\n                        if (target.hp == 1)\r\n                            return 0.6;\r\n                        return 1;\r\n                    },\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (target.hujia)\r\n                                return;\r\n                            if (player._zhangdeng_tmp)\r\n                                return;\r\n                            if (_status.event.getParent('useCard', true) || _status.event.getParent('_wuxie', true))\r\n                                return;\r\n                            if (get.tag(card, 'damage')) {\r\n                                let basic = player.$.shangdong || 0;\r\n                                if (get.$a(player, target) > 0 && target.hp > 1) {\r\n                                    return basic;\r\n                                }\r\n                                if (get.$a(player, target) < 0 && !player.hasSkillTag('damageBonus', false, {\r\n                                    name: card ? card.name : null,\r\n                                    target: target,\r\n                                    card: card\r\n                                })) {\r\n                                    if (card.name == 'sha')\r\n                                        return;\r\n                                    let sha = false;\r\n                                    player._zhangdeng_tmp = true;\r\n                                    let num = player.countCards('h', card => {\r\n                                        if (card.name == 'sha') {\r\n                                            if (sha) {\r\n                                                return false;\r\n                                            }\r\n                                            else {\r\n                                                sha = true;\r\n                                            }\r\n                                        }\r\n                                        return get.effect(target, card, player, player) + basic > 0;\r\n                                    });\r\n                                    delete player._zhangdeng_tmp;\r\n                                    if (player.hasSkillTag('damage')) {\r\n                                        num++;\r\n                                    }\r\n                                    if (num < 2) {\r\n                                        let enemies = player.getEnemies();\r\n                                        if (enemies.length == 1 && enemies[0] == target && player.needsToDiscard()) {\r\n                                            return;\r\n                                        }\r\n                                        return basic;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            qiding: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter: (Evt, player) => player.countCards('h'),\r\n                filterTarget(card, player, target) {\r\n                    return player.inRange(target);\r\n                },\r\n                content: [() => {\r\n                        target.viewHandcards(player);\r\n                    }, () => {\r\n                        Evt.list = ['受到一点伤害', `令${get.$t(player)}观看并获得你的一张牌，且防止其对你的伤害直到本回合结束`];\r\n                        target.chooseControl('dialogcontrol', Evt.list).set('ai', function () {\r\n                            let player = _status.event.player, source = _status.event.source, controls = _status.event.controls.slice(0);\r\n                            if (get.$a(player, source) > 0 || player.countCards('he') == 0)\r\n                                return 1;\r\n                            if (get.damageEffect(player, source, player) < 0 && player.hp == 1)\r\n                                return 1;\r\n                            if (get.damageEffect(player, source, player) > 0)\r\n                                return 0;\r\n                            return controls.randomGet();\r\n                        }).set('source', player);\r\n                    }, () => {\r\n                        switch (result.control) {\r\n                            case Evt.list[0]: {\r\n                                target.damage(player);\r\n                                game.delayx();\r\n                                break;\r\n                            }\r\n                            case Evt.list[1]: {\r\n                                player.gainPlayerCard(target, 'he', 'visible');\r\n                                player.$.qiding_respondDam = target;\r\n                                player.addTempSkill('qiding_respondDam');\r\n                                break;\r\n                            }\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    respondDam: {\r\n                        mark: 'character',\r\n                        intro: {\r\n                            name: '契定',\r\n                            content: '防止对$造成的伤害',\r\n                        },\r\n                        onremove: true,\r\n                        forced: true,\r\n                        trigger: { source: 'damageBegin' },\r\n                        filter(Evt, player) {\r\n                            return player.$.qiding_respondDam == Evt.player;\r\n                        },\r\n                        content() {\r\n                            trigger.changeToZero();\r\n                        },\r\n                        ai: {\r\n                            effect: {\r\n                                player(card, player, target, current) {\r\n                                    if (target && target == player.$.qiding_respondDam && get.tag(card, 'damage'))\r\n                                        return 'zeroplayertarget';\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 6,\r\n                    result: {\r\n                        target: -1,\r\n                    },\r\n                    threaten: 1.1,\r\n                }\r\n            },\r\n            chouxin: {\r\n                trigger: { player: 'loseEnd' },\r\n                filter(Evt, player) {\r\n                    if (!Evt.visible)\r\n                        return false;\r\n                    for (let i = 0; i < Evt.hs.length; i++) {\r\n                        if (get.suit(Evt.hs[i]) == 'heart')\r\n                            return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    if (player.isHealthy())\r\n                        player.loseHp();\r\n                    else\r\n                        player.recover();\r\n                    player.addTempSkill('chouxin_skipDiscard');\r\n                },\r\n                subSkill: {\r\n                    skipDiscard: {\r\n                        mark: true,\r\n                        intro: {\r\n                            name: '酬心',\r\n                            content: '跳过弃牌阶段',\r\n                        },\r\n                        trigger: { player: 'phaseDiscardBefore' },\r\n                        forced: true,\r\n                        content() {\r\n                            trigger.cancel();\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            jusheng: {\r\n                trigger: { global: 'phaseZhunbeiBegin' },\r\n                check(Evt, player) {\r\n                    return Evt.player.countCards('e') > player.countCards('e');\r\n                },\r\n                logTarget: 'player',\r\n                filter(Evt, player) {\r\n                    return (Evt.player.countCards('e') || player.countCards('e')) && player != Evt.player;\r\n                },\r\n                round: 1,\r\n                content: [() => {\r\n                        Evt.target = trigger.player;\r\n                        Evt.prenum = Evt.target.countCards('e');\r\n                        player.swapEquip(Evt.target);\r\n                    }, () => {\r\n                        if (Evt.target.countCards('e') > Evt.prenum) {\r\n                            Evt.target.$.jusheng_shiyue = player;\r\n                            Evt.target.addTempSkill('jusheng_shiyue');\r\n                            Evt.finish();\r\n                        }\r\n                        else if (Evt.target.countCards('e') < Evt.prenum) {\r\n                            player.chooseTarget('『剧生』：令你或其调整手牌至与对方相同', true, function (card, player, target) {\r\n                                return _status.event.targets.includes(target);\r\n                            }, function (target) {\r\n                                let num = _status.event.targets.slice(0).remove(target)[0].countCards('h') - target.countCards('h');\r\n                                return get.$a2(target) * num;\r\n                            }).set('targets', [player, Evt.target]);\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            let target = Evt.target;\r\n                            let num = player.countCards('h') - target.countCards('h');\r\n                            switch (result.targets[0]) {\r\n                                case player:\r\n                                    if (num > 0)\r\n                                        player.chooseToDiscard(num, true);\r\n                                    else if (num < -0)\r\n                                        player.draw(-num);\r\n                                    break;\r\n                                case target:\r\n                                    if (num > 0)\r\n                                        target.draw(num);\r\n                                    else if (num < -0)\r\n                                        target.chooseToDiscard(-num, true);\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    shiyue: {\r\n                        mark: 'character',\r\n                        intro: {\r\n                            name: '剧生',\r\n                            mark(dialog, content, player) {\r\n                                if (content) {\r\n                                    dialog.addAuto([content]);\r\n                                }\r\n                            },\r\n                            content: '被$发动了『剧生』',\r\n                        },\r\n                        onremove: true,\r\n                        trigger: { player: 'useCard2' },\r\n                        filter(Evt, player) {\r\n                            if (!player.$.jusheng_shiyue.isIn())\r\n                                return false;\r\n                            return Evt.targets.includes(player) || Evt.targets.includes(player.$.jusheng_shiyue);\r\n                        },\r\n                        direct: true,\r\n                        lastDo: true,\r\n                        content() {\r\n                            Evt.source = player.$.jusheng_shiyue;\r\n                            player.line(Evt.source);\r\n                            Evt.source.chooseUseTarget({ name: 'sha', isCard: false }, false).set('logSkill', 'jusheng');\r\n                            game.delayx();\r\n                        },\r\n                        ai: {\r\n                            effect: {\r\n                                player(card, player, target, current) {\r\n                                    if (player.$.jusheng_shiyue.isIn() && target) {\r\n                                        if ([player.$.xingxu_shiyue, player].includes(target) && get.$a(player, player.$.jusheng_shiyue))\r\n                                            return [1, 0.5];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                ai: {\r\n                    expose: 0.2\r\n                },\r\n            },\r\n            xingqu: {\r\n                trigger: { global: 'dying' },\r\n                limited: true,\r\n                skillAnimation: true,\r\n                animationColor: 'yami',\r\n                check(Evt, player) {\r\n                    return get.$a(player, Evt.player) > 0 || (get.$a(player, Evt.player) > -1 && player.isDamaged());\r\n                },\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && Evt.reason && Evt.reason.source == player;\r\n                },\r\n                logTarget: 'player',\r\n                content: [() => {\r\n                        Evt.target = trigger.player;\r\n                        player.loseMaxHp();\r\n                        player.awakenSkill('xingqu');\r\n                    }, () => {\r\n                        Evt.target.recover();\r\n                        Evt.choice = get.gainableSkills().randomGets(3);\r\n                        Evt.prompt = '『星取』：选择一个技能';\r\n                        if (_status.connectMode)\r\n                            Evt.goto(5);\r\n                    }, () => {\r\n                        Evt.target.chooseButton([Evt.prompt, [Evt.choice, 'vcard']], true).set('ai', function (button) {\r\n                            return 1 + Math.random();\r\n                        });\r\n                    }, () => {\r\n                        Evt.tarSkill = result.links[0][2];\r\n                        player.chooseButton([Evt.prompt, [Evt.choice, 'vcard']], true).set('ai', function (button) {\r\n                            return 1 + Math.random();\r\n                        });\r\n                    }, () => {\r\n                        Evt.mySkill = result.links[0][2];\r\n                        Evt.goto(7);\r\n                    }, () => {\r\n                        let list = [[player, [Evt.prompt, [Evt.choice, 'vcard']], true],\r\n                            [Evt.target, [Evt.prompt, [Evt.choice, 'vcard']], true]];\r\n                        player.chooseButtonOL(list).set('switchToAuto', function () {\r\n                            _status.event.result = 'ai';\r\n                        }, function () { }, function () { return 1 + Math.random(); }).set('processAI', function () {\r\n                            let buttons = _status.event.dialog.buttons;\r\n                            return {\r\n                                bool: true,\r\n                                links: [buttons.randomGet().link],\r\n                            };\r\n                        });\r\n                    }, () => {\r\n                        Evt.mySkill = result[player.playerid].links[0][2];\r\n                        Evt.tarSkill = result[Evt.target.playerid].links[0][2];\r\n                    }, () => {\r\n                        player.popup(get.$t(Evt.mySkill));\r\n                        Evt.target.popup(get.$t(Evt.tarSkill));\r\n                        if (Evt.mySkill == Evt.tarSkill) {\r\n                            player.line2([Evt.target, player]);\r\n                            player.addAdditionalSkill('xingqu', 'xingqu2', true);\r\n                        }\r\n                        else {\r\n                            player.addSkillLog(Evt.tarSkill);\r\n                            player.addAdditionalSkill('xingqu', Evt.tarSkill, true);\r\n                        }\r\n                    }],\r\n            },\r\n            xingqu2: {\r\n                trigger: { source: 'damageBegin1' },\r\n                forced: true,\r\n                charlotte: true,\r\n                content() {\r\n                    trigger.num++;\r\n                },\r\n                mark: true,\r\n                intro: {\r\n                    content: '造成伤害时，此伤害+1',\r\n                },\r\n            },\r\n            xingxu: {\r\n                trigger: { global: 'phaseZhunbeiBegin' },\r\n                check(Evt, player) {\r\n                    if (get.$a(player, Evt.player) >= 1) {\r\n                        return player.countCards('he') >= player.hp;\r\n                    }\r\n                    else {\r\n                        return player.countCards('he', card => get.value(card) <= 0) >= 2;\r\n                    }\r\n                    return false;\r\n                },\r\n                logTarget: 'player',\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') >= 2 && player != Evt.player;\r\n                },\r\n                round: 1,\r\n                content: [() => {\r\n                        Evt.target = trigger.player;\r\n                        player.chooseCard(2, true, 'he', `『星许』交给${get.$t(Evt.target)}两张牌`).set('ai', card => {\r\n                            return _status.event.att >= 1 ? get.value(card) : -get.value(card);\r\n                        }).set('att', get.$a(player, Evt.target));\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.cards = result.cards;\r\n                            player.give(Evt.cards, Evt.target, true);\r\n                            Evt.target.$.xingxu_shiyue = player;\r\n                            Evt.target.$.xingxu_shiyue2 = Evt.cards;\r\n                            Evt.target.addTempSkill('xingxu_shiyue');\r\n                            Evt.target.addTempSkill('xingxu_shiyue2');\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    shiyue: {\r\n                        mark: 'character',\r\n                        intro: {\r\n                            name: '星许',\r\n                            mark(dialog, content, player) {\r\n                                if (content) {\r\n                                    dialog.addAuto([content]);\r\n                                    dialog.addAuto(player.$.xingxu_shiyue2);\r\n                                }\r\n                            },\r\n                            content: '被$发动了『星许』',\r\n                        },\r\n                        onremove: true,\r\n                        trigger: { player: 'phaseEnd' },\r\n                        filter(Evt, player) {\r\n                            if (!player.$.xingxu_shiyue.isIn())\r\n                                return false;\r\n                            return player.hasHistory('sourceDamage', evt => {\r\n                                return evt.player == player.$.xingxu_shiyue;\r\n                            });\r\n                        },\r\n                        forced: true,\r\n                        lastDo: true,\r\n                        content() {\r\n                            Evt.source = player.$.xingxu_shiyue;\r\n                            player.line(Evt.source);\r\n                            Evt.source.recover(Evt.source);\r\n                            game.delayx();\r\n                        },\r\n                        ai: {\r\n                            effect: {\r\n                                player(card, player, target, current) {\r\n                                    if (target && target == player.$.xingxu_shiyue && get.tag(card, 'damage') && !player.getHistory('sourceDamage', evt => {\r\n                                        return evt.player == player.$.xingxu_shiyue;\r\n                                    }).length)\r\n                                        return [1, 0, 1, 1];\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    shiyue2: {\r\n                        onremove: true,\r\n                        trigger: { player: 'phaseEnd' },\r\n                        filter(Evt, player) {\r\n                            if (!player.$.xingxu_shiyue.isIn())\r\n                                return false;\r\n                            let cards = player.$.xingxu_shiyue2.slice(0);\r\n                            player.getHistory('useCard', evt => {\r\n                                cards.removeArray(evt.cards);\r\n                            });\r\n                            return cards.length == 1;\r\n                        },\r\n                        direct: true,\r\n                        content: [() => {\r\n                                player.line(Evt.source);\r\n                                game.delayx();\r\n                                Evt.source = player.$.xingxu_shiyue;\r\n                                Evt.cards = player.$.xingxu_shiyue2.slice(0);\r\n                                player.getHistory('useCard', evt => {\r\n                                    Evt.cards.removeArray(evt.cards);\r\n                                });\r\n                            }, () => {\r\n                                if (Evt.cards.length == 1 && player.hasUseTarget(Evt.cards[0])) {\r\n                                    Evt.source.chooseUseTarget(Evt.cards[0], '视为使用一张' + get.$t(Evt.cards[0]), true);\r\n                                }\r\n                            }],\r\n                        mod: {\r\n                            aiOrder(player, card, num) {\r\n                                if (get.$a(player, player.$.xingxu_shiyue) > 1 && player.$.xingxu_shiyue2) {\r\n                                    if (player.$.xingxu_shiyue2.includes(card)\r\n                                        && player.getHistory('useCard', evt => player.$.xingxu_shiyue2.includes(evt.card)).length == 1) {\r\n                                        if (player.needsToDiscard())\r\n                                            return num - 2;\r\n                                        else\r\n                                            return num - 8;\r\n                                    }\r\n                                }\r\n                            },\r\n                        },\r\n                    }\r\n                },\r\n                ai: {\r\n                    expose: 0.2\r\n                },\r\n            },\r\n            qingsui: {\r\n                init(player, skill) {\r\n                    if (!player.$[skill]) {\r\n                        player.$[skill] = 0;\r\n                    }\r\n                    player.addAdditionalSkill('qingsui', 'qingsui_jiai');\r\n                },\r\n                trigger: { player: ['useCardAfter', 'qingsui_shengyinAfter', 'qingsui_quanyuAfter'] },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'useCard')\r\n                        return Evt.skill == 'qingsui_jiai_backup';\r\n                    return true;\r\n                },\r\n                locked: true,\r\n                direct: true,\r\n                content: [() => {\r\n                        if (player.$.qingsui == 2)\r\n                            player.$.qingsui = 0;\r\n                        else\r\n                            player.$.qingsui++;\r\n                        player.addAdditionalSkill('qingsui', ['qingsui_jiai', 'qingsui_shengyin', 'qingsui_quanyu'][player.$.qingsui]);\r\n                    }, () => {\r\n                        if (player.$.qingsui == 0) {\r\n                            Evt.target = _status.currentPhase;\r\n                            if (Evt.target.countGainableCards(player, 'he') && Evt.target != player) {\r\n                                player.line(Evt.target);\r\n                                player.gainPlayerCard(Evt.target, 'he');\r\n                            }\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    jiai: {\r\n                        inherit: \"jiai\",\r\n                        filter(Evt, player) {\r\n                            if (player.$.qingsui != 0)\r\n                                return false;\r\n                            if (player.countCards('h') < 2)\r\n                                return false;\r\n                            let filterCard = Evt.filterCard || function (card, player, Evt) {\r\n                                return true;\r\n                            };\r\n                            let jiaiCards = [];\r\n                            for (let i = 0; i < lib.inpile.length; ++i) {\r\n                                if (get.type(lib.inpile[i]) != 'basic')\r\n                                    continue;\r\n                                let card = { name: lib.inpile[i] };\r\n                                if (filterCard(card, player, Evt)) {\r\n                                    jiaiCards.push(card);\r\n                                }\r\n                            }\r\n                            return jiaiCards.length > 0;\r\n                        },\r\n                    },\r\n                    shengyin: {\r\n                        inherit: \"shengyin\",\r\n                        filter(Evt, player) {\r\n                            if (player.$.qingsui != 1)\r\n                                return false;\r\n                            return true;\r\n                        },\r\n                    },\r\n                    quanyu: {\r\n                        inherit: \"quanyu\",\r\n                        filter(Evt, player) {\r\n                            if (player.$.qingsui != 2)\r\n                                return false;\r\n                            let suit = get.suit(Evt.card);\r\n                            return Evt.cards && Evt.cards.length && suit != 'none' && Evt.player != player && !player.countCards('h', card => suit == get.suit(card));\r\n                        },\r\n                    },\r\n                },\r\n                involve: ['jiai', 'shengyin', 'quanyu']\r\n            },\r\n            level: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('mark', {\r\n                marktext: '级',\r\n                intro: {\r\n                    content: '等级：#'\r\n                }\r\n            }).setI(1),\r\n            jinzhou: {\r\n                group: ['level'],\r\n                trigger: { player: 'loseEnd' },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return Evt.es.filter(card => get.subtype(card) == 'equip2').length;\r\n                },\r\n                content: [() => {\r\n                        if (!player.$.level) {\r\n                            player.$.level = 1;\r\n                        }\r\n                        player.draw(player.$.level);\r\n                    }, () => {\r\n                        game.playAudio('effect', 'hujia');\r\n                        game.broadcast(function () {\r\n                            game.playAudio('effect', 'hujia');\r\n                        });\r\n                        player.$.level++;\r\n                        player.markSkill('level');\r\n                    }],\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (get.type(card) == 'equip' && get.subtype(card) == 'equip2')\r\n                                return [1, 2];\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            gouhun: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                content: [() => {\r\n                        if (!player.$.level) {\r\n                            player.$.level = 1;\r\n                        }\r\n                        let list = get.cards(player.$.level + 2);\r\n                        Evt.list = list;\r\n                        player.showCards(list, '『勾魂』亮出牌');\r\n                    }, () => {\r\n                        Evt.cards = Evt.list.slice(0);\r\n                        player.chooseCardButton(Evt.list, '获得其中一种类型的牌<br>（取消则+1等级）');\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            let type = get.type2(result.links[0]), cards = Evt.cards.filter(card => get.type2(card) == type);\r\n                            player.showCards(cards, '『勾魂』获得牌');\r\n                            game.delayx();\r\n                            player.gain(cards, 'gain2', 'log').gaintag.add('gouhun');\r\n                            Evt.cards.removeArray(cards);\r\n                        }\r\n                        else {\r\n                            game.playAudio('effect', 'hujia');\r\n                            game.broadcast(function () {\r\n                                game.playAudio('effect', 'hujia');\r\n                            });\r\n                            player.$.level++;\r\n                            player.markSkill('level');\r\n                        }\r\n                    }, () => {\r\n                        game.cardsDiscard(Evt.cards);\r\n                    }],\r\n                mod: {\r\n                    ignoredHandcard(card, player) {\r\n                        if (card.hasGaintag('gouhun') && get.type2(card) == 'trick') {\r\n                            return true;\r\n                        }\r\n                    },\r\n                    cardDiscardable(card, player, name) {\r\n                        if (name == 'phaseDiscard' && card.hasGaintag('gouhun') && get.type2(card) == 'trick') {\r\n                            return false;\r\n                        }\r\n                    },\r\n                    aiOrder(player, card, num) {\r\n                        if (get.itemtype(card) == 'card' && card.hasGaintag('gouhun') && get.type(card) == 'basic')\r\n                            return num + 0.1;\r\n                    },\r\n                },\r\n                group: ['level', 'gouhun_reCount'],\r\n                subSkill: {\r\n                    reCount: {\r\n                        trigger: { player: 'useCard1' },\r\n                        firstDo: true,\r\n                        silent: true,\r\n                        filter(Evt, player) {\r\n                            return get.type(Evt.card) == 'basic' && Evt.cards.length == 1 && player.getHistory('lose', evt => {\r\n                                if (evt.getParent() != Evt)\r\n                                    return false;\r\n                                for (let i in evt.gaintag_map) {\r\n                                    if (evt.gaintag_map[i].includes('gouhun'))\r\n                                        return true;\r\n                                }\r\n                                return false;\r\n                            }).length > 0;\r\n                        },\r\n                        content() {\r\n                            if (trigger.addCount !== false) {\r\n                                trigger.addCount = false;\r\n                                let stat = player.getStat().card;\r\n                                if (stat[trigger.card.name])\r\n                                    stat[trigger.card.name]--;\r\n                            }\r\n                        },\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 5,\r\n                    result: {\r\n                        player: 1\r\n                    },\r\n                    threaten: 1.5\r\n                },\r\n            },\r\n            anyou: {\r\n                trigger: { player: ['phaseUseBegin', 'damageAfter'] },\r\n                priority: 199,\r\n                filter(Evt, player) {\r\n                    return game.countPlayer(cur => cur != player && get.$dis(cur, player) <= 1);\r\n                },\r\n                check(Evt, player) {\r\n                    return player.hp > 1;\r\n                },\r\n                logTarget(Evt, player) {\r\n                    return game.filterPlayer(cur => cur != player && get.$dis(cur, player) <= 1);\r\n                },\r\n                content: [() => {\r\n                        Evt.targets = game.filterPlayer(cur => cur != player && get.$dis(cur, player) <= 1);\r\n                        Evt.targets.sortBySeat(player);\r\n                    }, () => {\r\n                        Evt.target = Evt.targets.shift();\r\n                        Evt.target.chooseToUse();\r\n                    }, () => {\r\n                        if (result.bool || Evt.target.countCards('he') == 0) {\r\n                            Evt.goto(4);\r\n                        }\r\n                        else {\r\n                            Evt.target.chooseCard('he', true, `『暗友』：交给${get.$t(player)}一张牌`);\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool && result.cards) {\r\n                            Evt.target.give(result.cards, player, true);\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.targets.length)\r\n                            Evt.goto(1);\r\n                    }],\r\n                group: ['anyou_drawBy'],\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: { target: 'useCardToTarget' },\r\n                        priority: 199,\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            let evt0 = Evt.getParent('anyou');\r\n                            let evt1 = Evt.getParent('chooseToUse');\r\n                            return (evt0 && evt0.name == 'anyou') && (evt1 && evt1.name == 'chooseToUse');\r\n                        },\r\n                        content() {\r\n                            player.draw();\r\n                        },\r\n                    },\r\n                },\r\n                ai: {\r\n                    maixie: true,\r\n                }\r\n            },\r\n            mingyou: {\r\n                trigger: { target: 'useCardToTarget' },\r\n                filter(Evt, player) {\r\n                    return Evt.player.getHistory('damage').length;\r\n                },\r\n                frequent(Evt, player) {\r\n                    return player.isDamaged() || Evt.player == player;\r\n                },\r\n                content: [() => {\r\n                        Evt.targets = [player];\r\n                        Evt.targets.add(trigger.player);\r\n                    }, () => {\r\n                        Evt.targets.shift().recover();\r\n                    }, () => {\r\n                        if (Evt.targets.length)\r\n                            Evt.goto(1);\r\n                    }],\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (player.getHistory('damage').length)\r\n                                return [1, 2];\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            tingzhu: {\r\n                trigger: { source: 'damageAfter' },\r\n                priority: 199,\r\n                filter(Evt, player) {\r\n                    return Evt.getParent().type == 'card' && game.hasPlayer(cur => !Evt.getParent().targets.includes(cur));\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        let types = get.type3(_status.discarded);\r\n                        let check = game.hasPlayer(cur => !trigger.getParent().targets.includes(cur) && get.damageEffect(cur, player, player) > 0);\r\n                        player.chooseToDiscard(get.$pro2('tingzhu'), 'he', card => {\r\n                            return !_status.event.types.includes(get.type(card));\r\n                        }).set('ai', card => {\r\n                            if (!_status.event.check)\r\n                                return -1;\r\n                            return 7 - get.value(card);\r\n                        }).set('types', types || []).set('check', check);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.chooseTarget('『庭柱』：选择一名角色对其造成伤害', true, function (card, player, target) {\r\n                                return !_status.event.targets.includes(target);\r\n                            }).set('targets', trigger.getParent().targets).set('ai', function (target) {\r\n                                let player = _status.event.player;\r\n                                return get.damageEffect(target, player, player) > 0;\r\n                            });\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('tingzhu', Evt.target);\r\n                            Evt.target.damage();\r\n                            game.delayx();\r\n                        }\r\n                    }],\r\n            },\r\n            xuemo: {\r\n                trigger: { source: 'damageBegin1' },\r\n                filter(Evt, player) {\r\n                    return Evt.player.hp > 0 && Evt.player.hp != player.hp;\r\n                },\r\n                check(Evt, player) {\r\n                    return (Math.min(Evt.player.hp, player.maxHp)) - player.hp > (get.$a(player, Evt.player) / 4);\r\n                },\r\n                content: [() => {\r\n                        Evt.num = trigger.player.hp - player.hp;\r\n                        player.changeHp(Evt.num);\r\n                    }, () => {\r\n                        trigger.num++;\r\n                    }],\r\n                ai: {\r\n                    effect: {\r\n                        player(card, player, target, current) {\r\n                            if (get.tag(card, 'damage') && target.hp > player.hp)\r\n                                return [1, 2];\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            miluan: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('active', {\r\n                usable: 1,\r\n                filterTarget(card, player, target) {\r\n                    return player.canCompare(target);\r\n                },\r\n                selectTarget: [1, 2],\r\n                content() {\r\n                    player.chooseToCompare(targets).callback = lib.skill.miluan.callback;\r\n                },\r\n                callback() {\r\n                    if (Evt.winner != player) {\r\n                        player.damage(target);\r\n                        player.draw(2);\r\n                    }\r\n                    if (Evt.winner != target) {\r\n                        target.damage(player);\r\n                        target.draw(2);\r\n                    }\r\n                },\r\n                ai: {\r\n                    order(item, player) {\r\n                        return 6;\r\n                    },\r\n                    result: {\r\n                        player(player, target) {\r\n                            if (player.hp === 1)\r\n                                return -2;\r\n                            return 1;\r\n                        },\r\n                        target(player, target) {\r\n                            if (target.hp === 1 || target.countCards('h') === 1)\r\n                                return get.damageEffect(target, player, target);\r\n                            return 2;\r\n                        }\r\n                    },\r\n                    threaten: 0.2\r\n                },\r\n            }, 'multitarget'),\r\n            shenjiao: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return Evt.num > 0;\r\n                },\r\n                content: [() => {\r\n                        player.chooseTarget(get.$pro2('shenjiao')).set('ai', function (target) {\r\n                            let player = _status.event.player;\r\n                            return get.$a(player, target) / ((target.$.shenjiao_dam || 0) + 1);\r\n                        });\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('shenjiao', Evt.target);\r\n                            Evt.target.hasSkill('shenjiao_dam') ? Evt.target.$.shenjiao_dam++ : Evt.target.addTempSkill('shenjiao_dam');\r\n                        }\r\n                    }],\r\n            }, 'direct').set('subSkill', {\r\n                dam: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('mark', {\r\n                    init(player, skill) {\r\n                        if (!player.$[skill]) {\r\n                            player.$[skill] = 1;\r\n                        }\r\n                    },\r\n                    trigger: { player: 'damageBegin3' },\r\n                    content() {\r\n                        trigger.num -= player.$.shenjiao_dam;\r\n                    },\r\n                    ai: {\r\n                        effect: {\r\n                            target(card, player, target, current) {\r\n                                if (get.tag(card, 'damage') && target.$.shenjiao_dam)\r\n                                    return [1, -target.$.shenjiao_dam];\r\n                            }\r\n                        },\r\n                    },\r\n                    intro: {\r\n                        content: '受到的伤害-#'\r\n                    }\r\n                }, 'forced', 'onremove', 'mark')\r\n            }).setT('damageAfter'),\r\n            huomo: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                round: 1,\r\n                filter(Evt, player) {\r\n                    return get.type(Evt.card) !== 'equip' && game.countPlayer(cur => cur !== player && get.$dis(cur, player) <= 1) && player.countCards('he');\r\n                },\r\n                content: [() => {\r\n                        player.chooseToDiscard('he', get.$pro2('huomo')).set('ai', card => {\r\n                            let player = _status.event.player, source = _status.event.source, list = game.filterPlayer(cur => cur !== player && get.$dis(cur, player) <= 1);\r\n                            let eff = 0;\r\n                            for (let v of list) {\r\n                                get.effect(v, _status.event.card, source, player) * (_status.event.targets.includes(v) ? -1 : 1);\r\n                            }\r\n                            if (eff > 0)\r\n                                return get.unuseful2(card);\r\n                            if (eff = 0)\r\n                                return get.unuseful(card);\r\n                            return -1;\r\n                        }).set('targets', trigger.targets).set('card', trigger.card).set('source', trigger.player);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            if (!Evt.isMine() && !Evt.isOnline())\r\n                                game.delayx();\r\n                            Evt.targets = game.filterPlayer(cur => cur !== player && get.$dis(cur, player) <= 1);\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.targets) {\r\n                            if (!Evt.isOnline())\r\n                                game.delay(2);\r\n                            player.logSkill('huomo', Evt.targets);\r\n                            if (trigger.targets.includes(Evt.targets[0]))\r\n                                trigger.targets.removeArray(Evt.targets);\r\n                            else\r\n                                trigger.targets.addArray(Evt.targets);\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    threaten: 0.9\r\n                },\r\n            }, 'direct').setT({ target: 'useCardToTarget' }),\r\n            tuying: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return player.hasHistory('useCard', (evt) => evt.getParent('phaseUse') === Evt);\r\n                },\r\n                content: [() => {\r\n                        Evt.history = player.getHistory('useCard', (evt) => evt.getParent('phaseUse') === trigger);\r\n                    }, () => {\r\n                        Evt._result = {};\r\n                        if (Evt.history.length && player.countCards('hs')) {\r\n                            let first = Evt.history[0].targets, last = Evt.history.pop().card, card = { name: last.name, nature: last.nature };\r\n                            if (lib.filter.cardEnabled(card)) {\r\n                                if (player.hasUseTarget(card)) {\r\n                                    lib.skill.tuyingx.viewAs = card;\r\n                                    lib.skill.tuyingx.first = first;\r\n                                    var next = player.chooseToUse();\r\n                                    if (next.isOnline()) {\r\n                                        player.send(function (card) {\r\n                                            lib.skill.tuyingx.viewAs = card;\r\n                                            lib.skill.tuyingx.first = first;\r\n                                        }, card);\r\n                                    }\r\n                                    next.logSkill = 'tuying';\r\n                                    next.set('openskilldialog', `涂映：将一张手牌当${get.translation(card)}使用`);\r\n                                    next.set('norestore', true);\r\n                                    next.set('_backupevent', 'tuyingx');\r\n                                    next.set('custom', {\r\n                                        add: {},\r\n                                        replace: { window: function () { } }\r\n                                    });\r\n                                    next.backup('tuyingx');\r\n                                }\r\n                            }\r\n                        }\r\n                    }],\r\n            }, 'direct').setT('phaseUseAfter'),\r\n            tuyingx: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('regard', {\r\n                filterCard: function (card) {\r\n                    return get.itemtype(card) == 'card';\r\n                },\r\n                selectCard: 1,\r\n                position: 'hs',\r\n                popname: true,\r\n                onuse(result, player) {\r\n                    let first = lib.skill.tuyingx.first;\r\n                    if (first && first.length !== result.targets.length) {\r\n                        let next = game.createEvent('tuyinghouxu');\r\n                        next.player = player;\r\n                        next._trigger = result;\r\n                        next.num = first.length - result.targets.length;\r\n                        next.setContent([() => {\r\n                                let prompt2 = `为${get.$t(Evt.card)}${num > 0 ? `增加` : `减少`}${get.cnNumber(Math.abs(num))}个目标`;\r\n                                player.chooseTarget(Math.abs(num), get.$pro2('tuying'), (card, player, target) => {\r\n                                    let source = _status.event.source;\r\n                                    if (_status.event.targets.includes(target))\r\n                                        return _status.event.num < 0;\r\n                                    else\r\n                                        return _status.event.num > 0 && lib.filter.targetEnabled2(_status.event.card, source, target) && lib.filter.targetInRange(_status.event.card, source, target);\r\n                                }).set('prompt2', prompt2).set('ai', target => {\r\n                                    let player = _status.event.player, source = _status.event.source;\r\n                                    return get.effect(target, _status.event.card, source, player) * (_status.event.targets.includes(target) ? -1 : 1);\r\n                                }).set('targets', trigger.targets).set('card', trigger.card).set('source', player).set('num', num);\r\n                            }, () => {\r\n                                if (result.bool) {\r\n                                    if (!Evt.isMine() && !Evt.isOnline())\r\n                                        game.delayx();\r\n                                    Evt.targets = result.targets;\r\n                                }\r\n                            }, () => {\r\n                                if (Evt.targets) {\r\n                                    player.logSkill('tuying', Evt.targets);\r\n                                    if (trigger.targets.includes(Evt.targets[0]))\r\n                                        trigger.targets.removeArray(Evt.targets);\r\n                                    else\r\n                                        trigger.targets.addArray(Evt.targets);\r\n                                }\r\n                            }]);\r\n                    }\r\n                }\r\n            }),\r\n            mian: {\r\n                init(player, skill) {\r\n                    if (!player.$[skill]) {\r\n                        player.$[skill] = {\r\n                            ms: [],\r\n                            ans: []\r\n                        };\r\n                    }\r\n                },\r\n                locked: true,\r\n                notemp: true,\r\n                marktext: '面',\r\n                intro: {\r\n                    mark(dialog, content, player) {\r\n                        if (player.$.mian.ms && player.$.mian.ms.length) {\r\n                            let list = player.$.mian.ms.slice(0);\r\n                            dialog.addText('明置面条');\r\n                            dialog.addSmall(list);\r\n                        }\r\n                        if (player.$.mian.ans && player.$.mian.ans.length) {\r\n                            if (player.isUnderControl(true)) {\r\n                                let list = player.$.mian.ans.slice(0);\r\n                                dialog.addText('暗置面条');\r\n                                dialog.addSmall(list);\r\n                            }\r\n                            else {\r\n                                dialog.addText(`暗置面条（${get.cnNumber(player.$.mian.ans.length)}张）`);\r\n                            }\r\n                        }\r\n                    },\r\n                    content: 'cards',\r\n                    onunmark(storage, player) {\r\n                        if ((storage && storage.ms && storage.ms.length) || (storage && storage.ans && storage.ans.length)) {\r\n                            let cards = storage.ms.concat(storage.ans);\r\n                            player.$throw(cards, 1000);\r\n                            game.cardsDiscard(cards);\r\n                            game.log(cards, '被置入了弃牌堆');\r\n                            storage.ms.length = 0;\r\n                            storage.ans.length = 0;\r\n                        }\r\n                    },\r\n                },\r\n                cardAround: ['ms', 'ans']\r\n            },\r\n            dianying: {\r\n                trigger: { player: 'damageBegin' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    if (!Evt.source || !Evt.source.isIn())\r\n                        return false;\r\n                    return player.$.mian.ms && player.$.mian.ms.length >= 3;\r\n                },\r\n                content: [() => {\r\n                        let list2 = player.$.mian.ms.slice(0), list = ['『店营』：可以暗置3碗或以上的面条'];\r\n                        if (list2 && list2.length) {\r\n                            list.push('明置面条');\r\n                            list.push([list2, 'card']);\r\n                        }\r\n                        list.push('hidden');\r\n                        Evt.source = trigger.source;\r\n                        let check = trigger.num == 1 && Evt.source.isFriendsOf(player);\r\n                        let next = player.chooseButton(list);\r\n                        next.set('selectButton', [3, Infinity]);\r\n                        next.set('source', Evt.source);\r\n                        next.set('ai', function (button) {\r\n                            if (!_status.event.check)\r\n                                return -1;\r\n                            let player = _status.event.player, source = _status.event.source;\r\n                            return get.value(button.link, source, 'raw');\r\n                        });\r\n                        next.set('check', check);\r\n                    }, () => {\r\n                        if (result.bool && result.links) {\r\n                            player.logSkill('dianying', Evt.source);\r\n                            lib.skill.dianying.process(player, result.links);\r\n                            trigger.num--;\r\n                            trigger.dianyingCards = result.links;\r\n                            player.addTempSkill('dianying_ifDamageZero');\r\n                            game.delay(0.5);\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    ifDamageZero: {\r\n                        trigger: { player: 'damageZero' },\r\n                        filter(Evt) {\r\n                            return Evt.dianyingCards;\r\n                        },\r\n                        forced: true,\r\n                        content() {\r\n                            Evt.source = trigger.source;\r\n                            Evt.cards = trigger.dianyingCards;\r\n                            player.$.mian.ans.removeArray(Evt.cards);\r\n                            player.updateMarks();\r\n                            player.$give(Evt.cards, Evt.source);\r\n                            Evt.source.gain(Evt.cards, 'log');\r\n                        }\r\n                    }\r\n                },\r\n                process(player, cards) {\r\n                    let storage = player.getStorage('mian');\r\n                    if (storage.ans && storage.ms) {\r\n                        let giveAutos = [], drawAutos = [], source;\r\n                        for (let i = 0; i < cards.length; i++) {\r\n                            if (storage.ms.includes(cards[i])) {\r\n                                player.$give(cards[i], player, false);\r\n                                storage.ms.remove(cards[i]);\r\n                                storage.ans.push(cards[i]);\r\n                            }\r\n                            else if (storage.ans.includes(cards[i])) {\r\n                                player.$give(cards[i], player, false);\r\n                                storage.ans.remove(cards[i]);\r\n                                storage.ms.push(cards[i]);\r\n                            }\r\n                            else if (get.owner(cards[i])) {\r\n                                source = get.owner(cards[i]);\r\n                                giveAutos.add(cards[i]);\r\n                                storage.ans.push(cards[i]);\r\n                            }\r\n                            else {\r\n                                drawAutos.add(cards[i]);\r\n                                game.cardsGotoSpecial(cards[i]);\r\n                                storage.ans.push(cards[i]);\r\n                            }\r\n                        }\r\n                        if (drawAutos.length)\r\n                            player.$drawAuto(drawAutos);\r\n                        if (source && giveAutos.length) {\r\n                            source.$giveAuto(giveAutos, player);\r\n                        }\r\n                        player.markSkill('mian');\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten: 1.5\r\n                },\r\n                global: 'dianying2',\r\n                group: 'mian',\r\n            },\r\n            dianying2: {\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') && game.hasPlayer(cur => cur.hasSkill('dianying') && cur != player);\r\n                },\r\n                filterCard: true,\r\n                selectCard: [1, Infinity],\r\n                filterTarget(card, player, target) {\r\n                    return target.hasSkill('dianying') && target != player;\r\n                },\r\n                discard: false,\r\n                toStorage: true,\r\n                position: 'he',\r\n                usable: 1,\r\n                prompt() {\r\n                    let player = _status.event.player;\r\n                    let list = game.filterPlayer(cur => cur.hasSkill('dianying'));\r\n                    let str = '将至少一张牌交给' + get.$t(list);\r\n                    if (list.length > 1)\r\n                        str += '中的一人';\r\n                    return str;\r\n                },\r\n                complexCard: true,\r\n                check(card) {\r\n                    if (!ui.selected.cards.length)\r\n                        return 8 - get.value(card);\r\n                    return 6 - ui.selected.cards.length - get.value(card);\r\n                },\r\n                content: [() => {\r\n                        lib.skill.dianying.process(target, cards);\r\n                    }, () => {\r\n                        let list1 = target.$.mian.ans.slice(0);\r\n                        let list = ['『店营』：是否选择两碗面条明置'];\r\n                        if (list1.length) {\r\n                            list.push('暗置面条');\r\n                            if (target.isUnderControl(true))\r\n                                list.push([list1, 'card']);\r\n                            else {\r\n                                list1.randomSort();\r\n                                list.push([list1, 'blank']);\r\n                            }\r\n                        }\r\n                        list.push('hidden');\r\n                        let next = player.chooseButton(list);\r\n                        next.set('selectButton', 2);\r\n                        next.set('target', target);\r\n                        next.set('ai', function (button) {\r\n                            let player = _status.event.player;\r\n                            let target = _status.event.target;\r\n                            return get.$a(player, target) <= 0 || get.recoverEffect(player, target, player) > 0;\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool && result.links) {\r\n                            player.line(target);\r\n                            lib.skill.dianying.process(target, result.links);\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        player.recover(target);\r\n                    }],\r\n                ai: {\r\n                    order: 6,\r\n                    result: {\r\n                        player(player, target) {\r\n                            let num = get.recoverEffect(player, target, player);\r\n                            if (target.getStorage('mian').ans.length <= 3)\r\n                                num += get.$a(player, target) / 2;\r\n                            if (!player.needsToDiscard())\r\n                                num - 1;\r\n                            return num;\r\n                        },\r\n                        target(player, target) {\r\n                            if (target.getStorage('mian').ans.length > 6)\r\n                                return 0;\r\n                            if (target.getStorage('mian').ans.length > 3)\r\n                                return 0.5;\r\n                            return 2;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            ganfen: {\r\n                audio: 2,\r\n                trigger: { player: ['phaseJudgeBefore', 'phaseDrawBefore', 'phaseUseBefore', 'phaseDiscardBefore'] },\r\n                clickChange: '停业',\r\n                clickable(player) {\r\n                    if (player.$.ganfen_clickChange === undefined)\r\n                        player.$.ganfen_clickChange = false;\r\n                    else\r\n                        player.$.ganfen_clickChange = !player.$.ganfen_clickChange;\r\n                },\r\n                clickableFilter(player) {\r\n                    return player.$.ganfen_clickChange !== false;\r\n                },\r\n                filter(Evt, player) {\r\n                    if (player.$.ganfen_clickChange === false)\r\n                        return false;\r\n                    return player.hasSkill('mian');\r\n                },\r\n                prompt(Evt) {\r\n                    let str = get.$pro('ganfen');\r\n                    str += '跳过';\r\n                    str += get.$t(Evt.name);\r\n                    return str;\r\n                },\r\n                check(Evt, player) {\r\n                    if (['phaseDraw', 'phaseUse'].includes(Evt.name) || player.hp <= 1)\r\n                        return false;\r\n                    if (Evt.name == 'phaseJudge' && player.countCards('j') > 1)\r\n                        return true;\r\n                    return player.hp > 2 && player.countCards;\r\n                },\r\n                content: [() => {\r\n                        trigger.cancel();\r\n                    }, () => {\r\n                        player.damage();\r\n                    }, () => {\r\n                        Evt.cards = get.cards(3);\r\n                        lib.skill.dianying.process(player, Evt.cards);\r\n                    }],\r\n                group: 'ganfen_fanmian',\r\n                subSkill: {\r\n                    fanmian: {\r\n                        trigger: { player: ['useCardAfter', 'respondAfter'] },\r\n                        filter(Evt, player) {\r\n                            if (player.$.ganfen_clickChange === false)\r\n                                return false;\r\n                            if (player.$.mian && player.$.mian.ans.length) {\r\n                                return get.type(Evt.card) == 'basic';\r\n                            }\r\n                        },\r\n                        direct: true,\r\n                        content: [() => {\r\n                                Evt.card = trigger.card;\r\n                                let list1 = player.$.mian.ans.slice(0);\r\n                                let list = ['『擀奋』：选择面条翻面'];\r\n                                if (list1.length) {\r\n                                    list.push('暗置面条');\r\n                                    list.push([list1, 'card']);\r\n                                }\r\n                                list.push('hidden');\r\n                                Evt.list1 = list1;\r\n                                player.chooseButton(list);\r\n                            }, () => {\r\n                                var _a;\r\n                                if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                                    player.logSkill('ganfen');\r\n                                    lib.skill.dianying.process(player, result.links);\r\n                                    game.delay(0.5);\r\n                                }\r\n                            }],\r\n                    }\r\n                }\r\n            },\r\n            niyou: {\r\n                trigger: { global: 'phaseEnd' },\r\n                priority: 49,\r\n                filter(Evt, player) {\r\n                    return player.getHistory('damage').length;\r\n                },\r\n                forced: true,\r\n                content: [() => {\r\n                        game.delay(1);\r\n                        Evt.phaseUse = player.phaseUse();\r\n                    }, () => {\r\n                        if (!player.hasHistory('useCard', evt => {\r\n                            return evt.getParent('phaseUse') == Evt.phaseUse;\r\n                        })) {\r\n                            player.turnOver();\r\n                            player.draw(2);\r\n                        }\r\n                        else {\r\n                            player.markSkill('niyou');\r\n                            player.$.niyou = player.$.niyou ? (player.$.niyou + 1) : 1;\r\n                        }\r\n                    }],\r\n                intro: {\r\n                    content: '心之壁厚度：#'\r\n                },\r\n                mod: {\r\n                    globalFrom(from, to, distance) {\r\n                        if (from.$.niyou)\r\n                            return distance + from.$.niyou;\r\n                    }\r\n                }\r\n            },\r\n            shalu: {\r\n                audio: 3,\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h') > 0;\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    if (!player.inRange(target))\r\n                        return true;\r\n                },\r\n                filterCard: true,\r\n                selectCard: -1,\r\n                content: [() => {\r\n                        target.damage('nocard');\r\n                    }, () => {\r\n                        if (target.hp > 0)\r\n                            player.draw(target.hp);\r\n                    }],\r\n                ai: {\r\n                    order(item, player) {\r\n                        if (player.countCards('h', { suit: 'heart' }))\r\n                            return 4;\r\n                        else\r\n                            return 1;\r\n                    },\r\n                    result: {\r\n                        player(player, target) {\r\n                            return target.hp - player.countCards('h');\r\n                        },\r\n                        target(player, target) {\r\n                            if (target.hasSkill('shenyou'))\r\n                                return 0;\r\n                            return get.damageEffect(target, player, target);\r\n                        }\r\n                    },\r\n                    expose: 0.2,\r\n                },\r\n            },\r\n            puyu: {\r\n                audio: true,\r\n                trigger: { player: 'phaseUseBegin' },\r\n                priority: 510,\r\n                filter(Evt, player) {\r\n                    return game.hasPlayer(cur => cur.countCards('he'));\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        player.chooseTarget(get.$pro2('puyu'), (card, player, target) => target.countCards('he')).set('ai', function (target) {\r\n                            let player = _status.event.player;\r\n                            return get.effect(target, { name: 'guohe_copy2' }, player, player);\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('puyu', Evt.target);\r\n                            Evt.target.chooseToDiscard('『璞玉』：请弃置一张牌', true, 'he').set('ai', card => {\r\n                                let player = _status.event.player, source = _status.event.source, num = 2;\r\n                                if (get.$a(player, source) > 0 && source.getUseValue(card)) {\r\n                                    if (source.countCards('h') > 3) {\r\n                                        num += 3 * get.value(card, source);\r\n                                    }\r\n                                    else if (source.countCards('h') > 0) {\r\n                                        num += get.value(card, source);\r\n                                    }\r\n                                }\r\n                                num -= get.value(card, player);\r\n                                return num;\r\n                            }).set('source', player);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (result.bool && result.cards) {\r\n                            Evt.card = result.cards[0];\r\n                            player.$.puyu_phaseEndBy = Evt.card;\r\n                            player.$.puyu_phaseEndBy2 = [0, 0];\r\n                            player.addTempSkill('puyu_phaseEndBy', { player: 'phaseUseEnd' });\r\n                            game.delayx();\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    phaseEndBy: {\r\n                        mark: true,\r\n                        intro: {\r\n                            mark(dialog, storage, player) {\r\n                                if (storage) {\r\n                                    dialog.addSmall('所有手牌视为：');\r\n                                    dialog.addSmall([storage]);\r\n                                    dialog.addSmall(`本阶段已使用${player.$.puyu_phaseEndBy2[0]}张牌<br>所有角色已获得${player.$.puyu_phaseEndBy2[1]}张牌`);\r\n                                }\r\n                            },\r\n                        },\r\n                        mod: {\r\n                            cardname(card, player, name) {\r\n                                if (player.$.puyu_phaseEndBy && get.position(card) == 'h')\r\n                                    return get.name(player.$.puyu_phaseEndBy);\r\n                            },\r\n                        },\r\n                        onremove: ['puyu_phaseEndBy', 'puyu_phaseEndBy2'],\r\n                        trigger: { player: 'useCardAfter', global: 'gainAfter' },\r\n                        priority: 510,\r\n                        filter(Evt, player) {\r\n                            return game.hasPlayer(cur => cur.countCards('he'));\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            if (trigger.name == 'useCard')\r\n                                player.$.puyu_phaseEndBy2[0]++;\r\n                            else\r\n                                player.$.puyu_phaseEndBy2[1] += trigger.cards.length;\r\n                            if (player.$.puyu_phaseEndBy2[0] >= 5, player.$.puyu_phaseEndBy2[1] >= 10) {\r\n                                let evt = _status.event.getParent('phaseUse');\r\n                                if ((evt === null || evt === void 0 ? void 0 : evt.name) == 'phaseUse' && evt.player == player) {\r\n                                    evt.skipped = true;\r\n                                }\r\n                            }\r\n                            else\r\n                                player.markSkill('puyu_phaseEndBy');\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            appojian: {\r\n                audio: 3,\r\n                trigger: { source: 'damageAfter' },\r\n                priority: 199,\r\n                filter(Evt, player) {\r\n                    return Evt.getParent().type == 'card' && game.hasPlayer(cur => !Evt.getParent().targets.includes(cur));\r\n                },\r\n                forced: true,\r\n                content: [() => {\r\n                        player.chooseTarget('『破茧』：令体力最多的一名角色失去体力', true, function (card, player, target) {\r\n                            return target.isMaxHp();\r\n                        }).set('ai', function (target) {\r\n                            return 1 - get.$a2(target);\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            result.targets[0].loseHp();\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        player.chooseTarget('『破茧』：令体力最少的一名角色回复体力', true, function (card, player, target) {\r\n                            return target.isMinHp();\r\n                        }).set('ai', function (target) {\r\n                            let player = _status.event.player;\r\n                            return get.recoverEffect(target, player, player);\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            result.targets[0].recover();\r\n                        }\r\n                    }, () => {\r\n                        if (player.isMaxHp() || player.isMinHp()) {\r\n                            let evt = _status.event.getParent('phaseUse');\r\n                            if ((evt === null || evt === void 0 ? void 0 : evt.name) == 'phaseUse') {\r\n                                evt.skipped = true;\r\n                            }\r\n                            let phase = _status.event.getParent('phase');\r\n                            if ((phase === null || phase === void 0 ? void 0 : phase.name) == 'phase') {\r\n                                phase.finish();\r\n                            }\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    effect: {\r\n                        player(card, player, target, current) {\r\n                            if (get.tag(card, 'damage'))\r\n                                return [1, 2];\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            dieyuan: {\r\n                trigger: { global: 'recoverAfter' },\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && Evt.player.isIn();\r\n                },\r\n                check(Evt, player) {\r\n                    return get.$a(player, Evt.player) > 0;\r\n                },\r\n                logTarget: 'player',\r\n                content: [() => {\r\n                        Evt.target = trigger.player;\r\n                        Evt.gainnum = Math.abs(Evt.target.hp - player.hp) || 1;\r\n                        Evt.target.draw(Evt.gainnum);\r\n                    }, () => {\r\n                        if (Evt.target.isIn()) {\r\n                            Evt.gainnum = Math.abs(Evt.target.hp - player.hp) || 1;\r\n                            Evt.target.chooseCard(Evt.gainnum, 'he', `将${get.cnNumber(Evt.gainnum)}张牌交给${get.$t(player)}`).set('ai', card => {\r\n                                if (_status.event.goon > 0)\r\n                                    return 0;\r\n                                if (_status.event.goon < 0)\r\n                                    return 1 - get.value(card);\r\n                                return 5 - get.value(card);\r\n                            }).set('goon', function () {\r\n                                if (get.recoverEffect(player, Evt.target, Evt.target) > 0)\r\n                                    return 1;\r\n                                if (player.isHealthy() || get.$a(player, Evt.target) <= 0)\r\n                                    return -1;\r\n                                return 0;\r\n                            }());\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (!result.bool || !result.cards) {\r\n                            player.recover(Evt.target);\r\n                        }\r\n                        else {\r\n                            Evt.target.give(result.cards, player, true);\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    expose: 0.1\r\n                }\r\n            },\r\n            shengyang: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filterCard: true,\r\n                position: 'he',\r\n                filterTarget(card, player, target) {\r\n                    return target != player;\r\n                },\r\n                check(card) {\r\n                    let num = get.value(card);\r\n                    if (get.color(card) == 'black') {\r\n                        if (num >= 6)\r\n                            return 0;\r\n                        return 20 - num;\r\n                    }\r\n                    else {\r\n                        if (_status.event.player.needsToDiscard()) {\r\n                            return 7 - num;\r\n                        }\r\n                    }\r\n                    return 0;\r\n                },\r\n                discard: false,\r\n                lose: false,\r\n                delay: false,\r\n                content: [() => {\r\n                        target.gain(cards, player, 'giveAuto');\r\n                    }, () => {\r\n                        Evt.gainnum = (Math.abs(target.hp - player.hp) || 1) * 2;\r\n                        player.judge(card => {\r\n                            var _a;\r\n                            let evt = _status.event.getParent('shengyang');\r\n                            if ((evt === null || evt === void 0 ? void 0 : evt.gainnum) >= get.number(card))\r\n                                return 3;\r\n                            if ((_a = evt === null || evt === void 0 ? void 0 : evt.target) === null || _a === void 0 ? void 0 : _a.isDamaged())\r\n                                return 1;\r\n                            return -1;\r\n                        }).set('callback', function () {\r\n                            let evt = _status.event.getParent('shengyang');\r\n                            if (!evt || evt.name != 'shengyang')\r\n                                return;\r\n                            if (Evt.judgeResult.number <= evt.gainnum)\r\n                                player.gainPlayerCard([1, evt.gainnum], evt.target, true);\r\n                            else\r\n                                evt.target.recover();\r\n                        });\r\n                    }],\r\n                ai: {\r\n                    order: 8,\r\n                    expose: 0.2,\r\n                    result: {\r\n                        target(player, target) {\r\n                            return get.recoverEffect(target, player, target);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            daoyi: {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = 0;\r\n                },\r\n                map: ['color', 'number', 'suit', 'name'],\r\n                trigger: { global: 'judge' },\r\n                filter: () => true,\r\n                direct: true,\r\n                content: [() => {\r\n                        Evt.target = trigger.player;\r\n                        let list = [];\r\n                        if (lib.skill.daoyi.map[player.$.daoyi] == 'name') {\r\n                            for (let i = 0; i < lib.inpile.length; i++) {\r\n                                let name = lib.inpile[i];\r\n                                list.push([get.type2(name), '', name]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            for (let i = 0; i < lib[lib.skill.daoyi.map[player.$.daoyi]].length; i++) {\r\n                                let name = lib[lib.skill.daoyi.map[player.$.daoyi]][i];\r\n                                list.push([lib.skill.daoyi.map[player.$.daoyi], '', name]);\r\n                            }\r\n                        }\r\n                        let str = `${get.$t(Evt.target)}的${trigger.judgestr || ''}判定为${get.$t(Evt.target.judging[0])}，是否发动『道易』，修改判定结果？`;\r\n                        let dialog = ui.create.dialog(str, [list, 'vcard'], 'hidden');\r\n                        player.chooseButton(dialog).set('ai', function (button) {\r\n                            let judging = _status.event.judging, player = _status.event.player, change = _status.event.change;\r\n                            let trigger = _status.event.getTrigger(), res1 = trigger.judge(judging);\r\n                            let card = {\r\n                                name: get.name(judging),\r\n                                nature: get.nature(judging),\r\n                                suit: get.suit(judging),\r\n                                color: get.color(judging),\r\n                                number: get.number(judging),\r\n                            }, att = get.$a(player, trigger.player);\r\n                            if (att == 0)\r\n                                return 0;\r\n                            card[change] = button.link[2];\r\n                            let now = trigger.judge(card);\r\n                            let effect = (now - res1) * att;\r\n                            if (player.$.daoyi == 3 && _status.currentPhase && _status.currentPhase.isIn())\r\n                                effect += (get.damageEffect(_status.currentPhase, player, player)) * 1.5;\r\n                            return effect;\r\n                        }).set('change', lib.skill.daoyi.map[player.$.daoyi]).set('judging', Evt.target.judging[0]);\r\n                    }, () => {\r\n                        if (result.bool == true) {\r\n                            let link = result.links[0][2];\r\n                            player.addExpose(0.25);\r\n                            player.logSkill('daoyi', Evt.target);\r\n                            player.popup(link);\r\n                            game.log(player, '将判定结果改为了', '#y' + get.$t(link));\r\n                            if (!trigger.fixedResult)\r\n                                trigger.fixedResult = {};\r\n                            if (lib.skill.daoyi.map[player.$.daoyi] == 'number')\r\n                                trigger.fixedResult[lib.skill.daoyi.map[player.$.daoyi]] = lib.number.indexOf(link) + 1;\r\n                            else\r\n                                trigger.fixedResult[lib.skill.daoyi.map[player.$.daoyi]] = link;\r\n                            console.log(trigger.fixedResult);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (player.$.daoyi < 3)\r\n                            player.$.daoyi++;\r\n                        else {\r\n                            player.$.daoyi = 0;\r\n                            if (_status.currentPhase && _status.currentPhase.isIn()) {\r\n                                player.line(_status.currentPhase);\r\n                                _status.currentPhase.damage(1, 'thunder');\r\n                            }\r\n                        }\r\n                    }],\r\n            },\r\n            shengyin: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filterTarget(card, player, target) {\r\n                    return target != player && target.countCards('h');\r\n                },\r\n                content: [() => {\r\n                        target.chooseCard('h', '『盛阴』：请展示一张牌', true);\r\n                    }, () => {\r\n                        if (result.cards) {\r\n                            let card = result.cards[0];\r\n                            target.showCards(card, '『盛阴』展示手牌');\r\n                            Evt.card = card;\r\n                            Evt.color = get.color(card);\r\n                            Evt.type2 = get.type2(card);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        let next = target.judge(card => {\r\n                            let evt = _status.event.getParent('shengyin');\r\n                            if (get.color(card) == (evt === null || evt === void 0 ? void 0 : evt.color))\r\n                                return 2;\r\n                            if (get.type2(card) == (evt === null || evt === void 0 ? void 0 : evt.type2))\r\n                                return -1;\r\n                            return 0;\r\n                        });\r\n                        next.set('callback', function () {\r\n                            let evt = _status.event.getParent('shengyin');\r\n                            if (!evt || evt.name != 'shengyin')\r\n                                return;\r\n                            let color = evt.color, type2 = evt.type2, card0 = evt.card, source = evt.player;\r\n                            if (get.type2(Evt.judgeResult.name) == type2)\r\n                                source.gain(card0, player, 'give');\r\n                            if (Evt.judgeResult.color == color)\r\n                                game.asyncDraw([player, source]);\r\n                        });\r\n                    }],\r\n                ai: {\r\n                    order: 8,\r\n                    expose: 0.2,\r\n                    result: {\r\n                        target(player, target) {\r\n                            return 2;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            hun: {\r\n                locked: true,\r\n                intro: {\r\n                    name: '『修又』：魂',\r\n                    content: 'cards',\r\n                    onunmark: 'throw',\r\n                },\r\n                cardAround: true\r\n            },\r\n            xiuyou: {\r\n                intro: {\r\n                    name: '已发动『修又』的目标角色',\r\n                    mark(dialog, storage, player) {\r\n                        if (storage && storage.length) {\r\n                            let name = storage.map(cur => get.name(cur));\r\n                            dialog.addSmall([name, 'character']);\r\n                        }\r\n                    },\r\n                    content(storage, player) {\r\n                        return `已『修又』${get.cnNumber(storage.length)}名角色`;\r\n                    },\r\n                },\r\n                trigger: { player: 'dying' },\r\n                filter(Evt, player) {\r\n                    return player.getStorage('hun').length > 2 && _status.currentPhase && _status.currentPhase.isIn();\r\n                },\r\n                logTarget(Evt, player) {\r\n                    return _status.currentPhase;\r\n                },\r\n                forced: true,\r\n                content: [() => {\r\n                        if (!player.$.xiuyou)\r\n                            player.$.xiuyou = [];\r\n                        Evt.target = _status.currentPhase;\r\n                        Evt.cards = player.getStorage('hun').slice(0);\r\n                        player.chooseCardButton(Evt.cards, `###『修又』选择交给${get.$t(Evt.target)}的牌###${get.skillInfoTranslation('xiuyou', player)}`, true).set('ai', function (button) {\r\n                            let player = _status.event.player;\r\n                            return get.$a(player, _status.currentPhase) && get.buttonValue(button);\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.num = player.$.xiuyou.includes(Evt.target) ? 2 : 1;\r\n                            Evt.cards.removeArray(result.links);\r\n                            Evt.target.gain(result.links, 'gain2');\r\n                            player.unmarkAuto('hun', result.links);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        let str = `选项A：将全部手牌与${get.$t(player)}的「魂」交换<br>选项B：令${get.$t(player)}摸「魂」数量张牌<br>选项C：令${get.$t(player)}回复一点体力`;\r\n                        let list = [[['A', '', '选项A']], [['B', '', '选项B']], [['C', '', '选项C']]];\r\n                        Evt.videoId = lib.status.videoId++;\r\n                        game.broadcastAll(function (id, choicelist, str, num) {\r\n                            let dialog = ui.create.dialog(`『修又』：请选择${get.cnNumber(num)}项`);\r\n                            dialog.addSmall(str);\r\n                            choicelist.forEach(element => {\r\n                                dialog.add([element, 'vcard']);\r\n                            });\r\n                            dialog.videoId = id;\r\n                        }, Evt.videoId, list, str, Evt.num);\r\n                    }, () => {\r\n                        Evt.target.chooseButton(true, Evt.num).set('dialog', Evt.videoId).set('prompt', get.$pro('tiantang'));\r\n                    }, () => {\r\n                        game.broadcastAll('closeDialog', Evt.videoId);\r\n                        if (result.bool) {\r\n                            result.links.forEach(element => {\r\n                                switch (element[0]) {\r\n                                    case 'A':\r\n                                        let cards = Evt.target.getCards('h');\r\n                                        player.unmarkAuto('hun', Evt.cards);\r\n                                        Evt.target.lose(cards, ui.special);\r\n                                        Evt.target.gain(Evt.cards);\r\n                                        Evt.target.$give(cards, player);\r\n                                        player.markAuto('hun', cards);\r\n                                        break;\r\n                                    case 'B':\r\n                                        player.draw(player.getStorage('hun').length);\r\n                                        break;\r\n                                    case 'C':\r\n                                        player.recover(Evt.target);\r\n                                        break;\r\n                                }\r\n                            });\r\n                        }\r\n                    }, () => {\r\n                        player.$.xiuyou.add(Evt.target);\r\n                    }],\r\n                group: ['hun', 'xiuyou_gainMark'],\r\n                subSkill: {\r\n                    gainMark: {\r\n                        trigger: { player: ['judgeEnd', 'damageEnd'] },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            if (Evt.name == 'judge')\r\n                                return get.position(Evt.result.card, true) == 'o';\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            Evt.cards = trigger.name == 'judge' ? [trigger.result.card] : get.cards();\r\n                            game.cardsGotoSpecial(Evt.cards);\r\n                            player.markAuto('hun', Evt.cards);\r\n                            player.$gain2(Evt.cards);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            jiyuan: {\r\n                trigger: { global: 'phaseZhunbeiBegin' },\r\n                filter(Evt, player) {\r\n                    return Evt.player.isIn();\r\n                },\r\n                check(Evt, player) {\r\n                    return player == Evt.player;\r\n                },\r\n                logTarget: 'player',\r\n                round: 1,\r\n                content() {\r\n                    Evt.target = trigger.player;\r\n                    let next = Evt.target.judge(card => {\r\n                        if (get.color(card) == 'red')\r\n                            return 2;\r\n                        if (get.color(card) == 'black')\r\n                            return -2;\r\n                        return 0;\r\n                    });\r\n                    next.set('callback', function () {\r\n                        if (Evt.judgeResult.color == 'red')\r\n                            player.draw(2);\r\n                        if (Evt.judgeResult.color == 'black')\r\n                            player.damage('nosource', 'nocard');\r\n                    });\r\n                },\r\n            },\r\n            tibing: {\r\n                trigger: { player: ['phaseZhunbeiBegin', 'phaseJudgeBefore', 'phaseDrawBefore', 'phaseDiscardBefore', 'phaseJieshuBegin'] },\r\n                forced: true,\r\n                direct: true,\r\n                filter: () => true,\r\n                content() {\r\n                    trigger.cancel();\r\n                },\r\n                group: ['tibing_drawBy', 'tibing_discardBy'],\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: { player: ['phaseUseBegin'] },\r\n                        forced: true,\r\n                        filter: () => true,\r\n                        content: [() => {\r\n                                player.draw(2);\r\n                            }, () => {\r\n                                player.gain(player.getCards('ej'), player, 'giveAuto', 'log');\r\n                            }],\r\n                    },\r\n                    discardBy: {\r\n                        trigger: { player: ['phaseUseEnd'] },\r\n                        forced: true,\r\n                        filter: () => true,\r\n                        content: [() => {\r\n                                player.showHandcards();\r\n                            }, () => {\r\n                                player.discard(player.getCards('h', { type: ['equip', 'trick', 'delay'] }));\r\n                            }],\r\n                    }\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (get.type(card) == 'delay')\r\n                                return [0.1, 1];\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            guangtui: {\r\n                trigger: { global: 'phaseDiscardBegin' },\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && player.isDamaged();\r\n                },\r\n                check(Evt, player) {\r\n                    return player.hp <= 2 || get.$a(player, Evt.player);\r\n                },\r\n                content: [() => {\r\n                        player.loseMaxHp(true);\r\n                    }, () => {\r\n                        trigger.cancel(true);\r\n                        game.delayx();\r\n                    }, () => {\r\n                        player.phaseUse();\r\n                    }],\r\n                ai: {\r\n                    threaten(player, target) {\r\n                        if (!target.isDamaged())\r\n                            return 0.6;\r\n                    }\r\n                }\r\n            },\r\n            zhepie: {\r\n                trigger: { player: ['phaseZhunbeiBegin'] },\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                usable: 1,\r\n                content: [() => {\r\n                        Evt.card = get.cards()[0];\r\n                        player.showCards(Evt.card);\r\n                        game.delayx();\r\n                    }, () => {\r\n                        player.chooseTarget(true).set('ai', function (target) {\r\n                            let type2 = get.type2(_status.event.card);\r\n                            let att = get.$a2(target);\r\n                            if (target.countCards('h', { type2: type2 }) <= 1 || type2 == 'equip') {\r\n                                if (target == player)\r\n                                    return 1 + att;\r\n                                return att;\r\n                            }\r\n                            if (type2 == 'basic' && target.countCards('h', { type2: type2 }) >= 1 && att < 0) {\r\n                                return -att;\r\n                            }\r\n                            return get.value(card) * att / 4;\r\n                        }).set('card', Evt.card).set('createDialog', ['『折撇』：令一名角色获得此牌',\r\n                            [[Evt.card], 'card']]);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.target = result.targets[0];\r\n                            player.line(Evt.target, 'ocean');\r\n                            Evt.target.gain(Evt.card, 'gain2', 'log');\r\n                            if (!Evt.target.$.zhepie_cardDisable)\r\n                                Evt.target.$.zhepie_cardDisable = [];\r\n                            Evt.target.$.zhepie_cardDisable.add(Evt.card);\r\n                            Evt.target.addTempSkill('zhepie_cardDisable', { player: 'phaseAfter' });\r\n                            game.delayx();\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    cardDisable: {\r\n                        mark: true,\r\n                        intro: {\r\n                            name: '折撇',\r\n                            content: 'cards',\r\n                        },\r\n                        onremove: true,\r\n                        mod: {\r\n                            cardEnabled(card, player) {\r\n                                if (player.getStorage('zhepie_cardDisable').filter(zhepie => get.type2(zhepie) == get.type2(card)).length)\r\n                                    return false;\r\n                            },\r\n                            cardSavable(card, player) {\r\n                                if (player.getStorage('zhepie_cardDisable').filter(zhepie => get.type2(zhepie) == get.type2(card)).length)\r\n                                    return false;\r\n                            },\r\n                        },\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten: 1.2,\r\n                }\r\n            },\r\n            chumo: {\r\n                trigger: {\r\n                    player: 'loseAfter',\r\n                    global: 'cardsDiscardAfter',\r\n                },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'lose') {\r\n                        if (Evt.position != ui.discardPile)\r\n                            return false;\r\n                    }\r\n                    else {\r\n                        let evt = Evt.getParent();\r\n                        if (evt.name != 'orderingDiscard' || !evt.relatedEvent || evt.relatedEvent.player != player || !['useCard', 'respond'].includes(evt.relatedEvent.name))\r\n                            return false;\r\n                    }\r\n                    return (Evt.cards2 || Evt.cards).filterInD('d').length > 0;\r\n                },\r\n                round: 1,\r\n                direct: true,\r\n                content: [() => {\r\n                        let cards = (trigger.cards2 || trigger.cards).filterInD('d');\r\n                        Evt.cards = cards;\r\n                        player.chooseTarget().set('ai', function (target) {\r\n                            let att = get.$a2(player, target);\r\n                            let num = 0;\r\n                            for (let i of _status.event.cards) {\r\n                                if (get.value(i) < 0 && att < 0 && !num)\r\n                                    num += 1;\r\n                                if (get.value(i) > 0 && att > 0 && !num)\r\n                                    num += att;\r\n                                if (!target.hasUseTarget(i))\r\n                                    num += 2;\r\n                            }\r\n                            return num;\r\n                        }).set('cards', cards).set('createDialog', [get.$pro2('chumo'),\r\n                            [cards, 'card']]);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('chumo', Evt.target);\r\n                            let evt = trigger.getParent().relatedEvent;\r\n                            if ((trigger.name == 'discard' && !trigger.delay) || (evt === null || evt === void 0 ? void 0 : evt.name) == 'respond')\r\n                                game.delayx();\r\n                            if (Evt.cards.length == 1) {\r\n                                Evt._result = { links: [Evt.cards[0]] };\r\n                                Evt.goto(3);\r\n                            }\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        player.chooseCardButton(Evt.cards, true, `选择令${get.$t(Evt.target)}获得的牌`, function (button) {\r\n                            let evt = _status.event.getParent();\r\n                            let att = get.$a(evt.player, evt.target), i = button.link, value = get.value(i, target, 'raw');\r\n                            if (!evt.target.hasUseTarget(i))\r\n                                return att * value + 4;\r\n                            return att * value;\r\n                        });\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            Evt.card = result.links[0];\r\n                            Evt.target.gain(Evt.card, 'gain2', 'log');\r\n                            if (!Evt.target.hasUseTarget(Evt.card)) {\r\n                                player.draw(2);\r\n                            }\r\n                            ;\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    threaten(player, target) {\r\n                        if (target.isDamaged())\r\n                            return 1.2;\r\n                    }\r\n                }\r\n            },\r\n            ahbingyi: {\r\n                trigger: { global: ['drawBegin'] },\r\n                filter(Evt, player) {\r\n                    return Evt.num && Evt.player != player && Evt.player.isMaxHandcard();\r\n                },\r\n                check(Evt, player) {\r\n                    if (Evt.num < 2)\r\n                        return false;\r\n                    return get.$a(player, Evt.player) < -1 && player.hp >= 3;\r\n                },\r\n                logTarget: 'player',\r\n                content: [() => {\r\n                        Evt.target = trigger.player;\r\n                        player.loseHp();\r\n                    }, () => {\r\n                        trigger.cancel();\r\n                        game.delayx();\r\n                    }, () => {\r\n                        if (Evt.target.countDiscardableCards(player, 'he')) {\r\n                            player.discardPlayerCard(Evt.target, 'he', true);\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    threaten: 1.1,\r\n                }\r\n            },\r\n            sujian: {\r\n                trigger: { player: 'damageEnd' },\r\n                filter(Evt, player) {\r\n                    return get.itemtype(Evt.cards) == 'cards' && get.position(Evt.cards[0], true) == 'o';\r\n                },\r\n                content() {\r\n                    game.cardsGotoSpecial(trigger.cards);\r\n                    player.$gain2(trigger.cards);\r\n                    player.markAuto('sujian_su', trigger.cards);\r\n                },\r\n                group: ['sujian_su', 'sujian_chooseBy', 'sujian_changeBy'],\r\n                subSkill: {\r\n                    su: {\r\n                        init(player, skill) {\r\n                            if (!player.$[skill])\r\n                                player.$[skill] = [];\r\n                        },\r\n                        intro: {\r\n                            content: 'cards',\r\n                            locked: true,\r\n                            notemp: true,\r\n                            marktext: '🚨',\r\n                            onunmark(storage, player) {\r\n                                if (storage && storage.length) {\r\n                                    player.$throw(storage, 1000);\r\n                                    game.cardsDiscard(storage);\r\n                                    game.log(storage, '被置入了弃牌堆');\r\n                                    storage.length = 0;\r\n                                }\r\n                            },\r\n                            cardAround: true\r\n                        }\r\n                    },\r\n                    chooseBy: {\r\n                        trigger: { player: 'ahbingyiAfter' },\r\n                        filter(Evt, player) {\r\n                            return player.countCards('h');\r\n                        },\r\n                        direct: true,\r\n                        content: [() => {\r\n                                player.chooseCard('h', '发动『秉义』时，可以将一张手牌置于武将牌上').set('ai', card => {\r\n                                    return 7 - get.value(card, player);\r\n                                }).set('logSkill', 'sujian');\r\n                            }, () => {\r\n                                if (result.bool && result.cards) {\r\n                                    player.lose(result.cards, 'toStorage');\r\n                                    player.$gain2(result.cards);\r\n                                    player.markAuto('sujian_su', result.cards);\r\n                                }\r\n                            }],\r\n                    },\r\n                    changeBy: {\r\n                        trigger: { global: ['useCard'] },\r\n                        filter(Evt, player) {\r\n                            if (!Evt.targets.length)\r\n                                return false;\r\n                            if (!player.getStorage('sujian_su').length)\r\n                                return false;\r\n                            return player.getStorage('sujian_su').filter(card => {\r\n                                return get.name(Evt.card) == get.name(card) || get.suit(Evt.card) == get.suit(card);\r\n                            }).length;\r\n                        },\r\n                        direct: true,\r\n                        content: [() => {\r\n                                Evt.sujian = player.getStorage('sujian_su').slice(0);\r\n                                Evt.card = trigger.card;\r\n                                Evt.target = trigger.player;\r\n                                let check = 0;\r\n                                for (let i of trigger.targets) {\r\n                                    if (get.effect(i, Evt.card, Evt.target, player) < 0)\r\n                                        check++;\r\n                                }\r\n                                if (check < Evt.sujian.length)\r\n                                    check = 0;\r\n                                player.chooseCardButton(Evt.sujian, `###${get.$pro('sujian')}###将一张对应${get.$t(Evt.card)}的「肃」置于牌堆顶`).set('filterButton', function (button) {\r\n                                    let card = button.link;\r\n                                    return get.name(_status.event.card0) == get.name(card) || get.suit(_status.event.card0) == get.suit(card);\r\n                                }).set('ai', function (button) {\r\n                                    if (!_status.event.check)\r\n                                        return -1;\r\n                                    return 1;\r\n                                }).set('check', check).set('card0', Evt.card);\r\n                            }, () => {\r\n                                if (result.bool && result.links) {\r\n                                    let card = result.links[0];\r\n                                    player.logSkill('sujian', Evt.target);\r\n                                    player.$.sujian_su.remove(card);\r\n                                    ui.cardPile.insertBefore(card, ui.cardPile.firstChild);\r\n                                    player.$throw(card, 1000);\r\n                                    game.log(player, `将${get.$t(card)}置于牌堆顶`);\r\n                                    player.updateMarks();\r\n                                }\r\n                                else\r\n                                    Evt.finish();\r\n                            }, () => {\r\n                                let prompt2 = `为${get.$t(Evt.card)}减少任意个目标`;\r\n                                player.chooseTarget('『肃监』：选择目标角色', [1, Infinity], function (card, player, target) {\r\n                                    if (_status.event.targets.includes(target))\r\n                                        return true;\r\n                                }).set('prompt2', prompt2).set('ai', function (target) {\r\n                                    let card = _status.event.card, player = _status.event.player, source = _status.event.source;\r\n                                    return get.effect(target, card, source, player) * (_status.event.targets.includes(target) ? -1 : 1);\r\n                                }).set('targets', trigger.targets).set('card', Evt.card).set('source', Evt.target);\r\n                            }, () => {\r\n                                if (!Evt.isMine())\r\n                                    game.delayx();\r\n                                Evt.targets = result.targets;\r\n                            }, () => {\r\n                                if (Evt.targets) {\r\n                                    player.logSkill('sujian', Evt.targets);\r\n                                    if (trigger.targets.includes(Evt.targets[0]))\r\n                                        trigger.targets.removeArray(Evt.targets);\r\n                                }\r\n                            }]\r\n                    }\r\n                },\r\n                ai: {\r\n                    combo: 'ahbingyi',\r\n                    maixie: true,\r\n                    maixie_hp: true,\r\n                    effect: {\r\n                        target(card, player, target) {\r\n                            if (player.hasSkillTag('jueqing', false, target))\r\n                                return [1, -1];\r\n                            if (get.tag(card, 'damage'))\r\n                                return [1, 0.55];\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            ciling: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return game.countPlayer(cur => cur !== player && !cur.hasSkill('ciling2'));\r\n                },\r\n                content: [() => {\r\n                        player.chooseTarget(get.$pro2('ciling'), function (card, player, target) {\r\n                            return target !== player && !target.hasSkill('ciling2');\r\n                        }).set('ai', tar => get.$a2(tar) < 0);\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('ciling', Evt.target);\r\n                            Evt.target.addSkill('ciling2');\r\n                            trigger.cancel();\r\n                            game.delayx();\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    threaten: 1.1,\r\n                },\r\n                involve: 'ciling',\r\n                subSkill: {\r\n                    dis: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                        filter(Evt, player) {\r\n                            return Evt.player.isIn() && Evt.player !== player && Evt.player.hasSkill('ciling2');\r\n                        },\r\n                        content: [() => {\r\n                                Evt.cards = trigger.cards;\r\n                                Evt.target = trigger.player;\r\n                                player.chooseControl('dialogcontrol', ['1.获得其弃牌', '2.视为对其使用一张【杀】', '取消']).set('ai', function () {\r\n                                    let { player, target, cards } = _status.event.getParent();\r\n                                    let values = get.value(cards || [], 'raw', player);\r\n                                    console.log(get.effect(target, { name: 'sha' }, player, player));\r\n                                    if (get.effect(target, { name: 'sha' }, player, player) > values / 3)\r\n                                        return 0;\r\n                                    if (values > 0)\r\n                                        return 1;\r\n                                    return 2;\r\n                                }).set('check', (get.$a(player, _status.currentPhase) > 0) ? 0 : 1).set('prompt', get.$pro2('ciling', Evt.target)).set('addDialog', Evt.cards ? [Evt.cards] : []);\r\n                            }, () => {\r\n                                if (result.control.indexOf('1.') === 0 && Evt.cards.length) {\r\n                                    player.gain(Evt.cards, 'log', 'gain2');\r\n                                }\r\n                                else if (result.control.indexOf('2.') === 0) {\r\n                                    player.useCard({ name: 'sha' }, Evt.target, false);\r\n                                }\r\n                            }]\r\n                    }).setT({ global: 'phaseDiscardEnd' })\r\n                },\r\n                group: 'ciling_dis'\r\n            }, 'direct').setT('phaseUseBefore'),\r\n            ciling2: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('mark', {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = 0;\r\n                },\r\n                filter(Evt, player) {\r\n                    return Evt.name === 'dying' || Evt.target.hasSkill('ciling');\r\n                },\r\n                intro: {\r\n                    content: '被追杀中，已累计对杀手使用#张【杀】'\r\n                },\r\n                content() {\r\n                    if (trigger.name === 'dying') {\r\n                        delete player.$.ciling2;\r\n                        player.removeSkill('ciling2');\r\n                    }\r\n                    else {\r\n                        if (++player.$.ciling2 >= 3) {\r\n                            delete player.$.ciling2;\r\n                            player.removeSkill('ciling2');\r\n                        }\r\n                    }\r\n                }\r\n            }, 'locked', 'mark').setT(['sha', 'dying'], 'Begin'),\r\n            xiyu: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return player !== _status.currentPhase;\r\n                },\r\n                content() {\r\n                    player.draw();\r\n                }\r\n            }, 'forced').setT('useCard2'),\r\n            exi: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filterTarget(card, player, target) {\r\n                    return target.countCards('h') && target != player;\r\n                },\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                content: [() => {\r\n                        player.chooseToPSS(target);\r\n                    }, () => {\r\n                        if (!result.tie) {\r\n                            let card = { name: 'sha' };\r\n                            if (result.winner == 'stone')\r\n                                card.name = 'juedou';\r\n                            if (result.bool) {\r\n                                player.draw(2);\r\n                                target.useCard(card, player, false, 'noai');\r\n                            }\r\n                            else {\r\n                                target.draw(2);\r\n                                player.useCard(card, target, false, 'noai');\r\n                            }\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    order: 10,\r\n                    result: {\r\n                        player: 1,\r\n                        target: -0.1,\r\n                    }\r\n                }\r\n            },\r\n            suisui: {\r\n                trigger: { player: 'damageBegin3' },\r\n                forced: true,\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return !Evt.source && player.hp != 1 || Evt.source && player.hp == 1;\r\n                },\r\n                content() {\r\n                    trigger.cancel();\r\n                },\r\n                ai: {\r\n                    threaten(player, target) {\r\n                        if (target.hp == 1)\r\n                            return 0.5;\r\n                        return 1;\r\n                    },\r\n                }\r\n            },\r\n            yuanyao: {\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    if (player.countCards('h') > player.maxHp || player.countCards('h') == player.hp)\r\n                        return false;\r\n                    return (player.getStat('skill').yuanyao || 0) < game.countPlayer(cur => cur.sex == 'female');\r\n                },\r\n                complexCard: true,\r\n                filterCard(Evt, player) {\r\n                    if (player.countCards('h') > player.hp)\r\n                        return true;\r\n                    return false;\r\n                },\r\n                selectCard() {\r\n                    let player = _status.event.player;\r\n                    if (player.countCards('h') > player.hp)\r\n                        return (player.countCards('h') - player.hp);\r\n                    return -1;\r\n                },\r\n                discard: true,\r\n                check(card) {\r\n                    return 7.5 - get.value(card);\r\n                },\r\n                content: [() => {\r\n                        if (cards && cards.length) {\r\n                            Evt.change = 'discard';\r\n                            Evt.num = cards.length;\r\n                        }\r\n                        else {\r\n                            Evt.change = 'draw';\r\n                            Evt.num = player.hp - player.countCards('h');\r\n                        }\r\n                    }, () => {\r\n                        switch (Evt.change) {\r\n                            case 'discard': {\r\n                                player.recover(Evt.num);\r\n                                break;\r\n                            }\r\n                            case 'draw': {\r\n                                player.draw(Evt.num);\r\n                                player.loseHp(Evt.num);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    order: 1.5,\r\n                    result: {\r\n                        player(player) {\r\n                            let num = game.countPlayer(cur => cur.sex == 'female') - (player.getStat('skill').yuanyao || 0);\r\n                            if (num > 1)\r\n                                return player.countCards('h');\r\n                            return player.countCards('h') - player.hp;\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            gongni: {\r\n                audio: true,\r\n                trigger: { player: ['phaseZhunbeiBegin', 'useCardAfter', 'respondAfter'] },\r\n                unique: true,\r\n                limited: true,\r\n                skillAnimation: true,\r\n                animationColor: 'yami',\r\n                filter(Evt, player) {\r\n                    if (Evt.name != 'phaseZhunbei' && _status.currentPhase == player)\r\n                        return false;\r\n                    return game.countPlayer() == game.countPlayer(cur => cur.isDamaged() && cur.hp >= 0);\r\n                },\r\n                logTarget(Evt, player) {\r\n                    return game.players;\r\n                },\r\n                check(Evt, player) {\r\n                    let effect = 0;\r\n                    game.filterPlayer(cur => {\r\n                        effect += (cur.getDamagedHp() - cur.hp) * get.$a(player, target);\r\n                    });\r\n                    return effect >= 3;\r\n                },\r\n                content: [() => {\r\n                        player.$.gongni = true;\r\n                        player.awakenSkill('gongni');\r\n                        Evt.doon = [];\r\n                        Evt.current = player;\r\n                    }, () => {\r\n                        player.line(Evt.current, 'ocean');\r\n                        Evt.current.hp = (Evt.current.getDamagedHp());\r\n                        Evt.current.$thunder();\r\n                        game.log(Evt.current, '的体力变为', '#g' + Evt.current.hp);\r\n                        Evt.current.update();\r\n                        game.delayx(1.2);\r\n                        Evt.doon.add(Evt.current);\r\n                    }, () => {\r\n                        if (!Evt.doon.includes(Evt.current.next)) {\r\n                            Evt.current = Evt.current.next;\r\n                            Evt.goto(1);\r\n                        }\r\n                    }],\r\n            },\r\n            lianyin: {\r\n                trigger: { global: ['useCard', 'respond'] },\r\n                priority: 996,\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'respond' && !player.awakenedSkills.includes('guixiang'))\r\n                        return false;\r\n                    if (!player.$.lianyin)\r\n                        player.$.lianyin = 0;\r\n                    if (!player.$.guixiang)\r\n                        player.$.guixiang = 0;\r\n                    return Evt.player != player && player == _status.currentPhase && player.$.lianyin < player.maxHp;\r\n                },\r\n                check(Evt, player) {\r\n                    return get.$a(player, Evt.player) > -1;\r\n                },\r\n                logTarget: 'player',\r\n                content: [() => {\r\n                        Evt.target = trigger.player;\r\n                        game.asyncDraw([player, Evt.target]);\r\n                    }, () => {\r\n                        player.$.lianyin++;\r\n                        player.$.guixiang++;\r\n                        player.markSkill('guixiang');\r\n                    }],\r\n                group: 'lianyin_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { player: 'phaseAfter' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        filter(Evt, player) {\r\n                            return player.$.lianyin;\r\n                        },\r\n                        content() {\r\n                            player.$.lianyin = 0;\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            guixiang: {\r\n                skillAnimation: true,\r\n                unique: true,\r\n                juexingji: true,\r\n                forced: true,\r\n                init(player) {\r\n                    player.$.guixiang = 0;\r\n                },\r\n                intro: {\r\n                    content: '已发动了&次『联音』',\r\n                },\r\n                trigger: { player: 'phaseZhunbeiBegin' },\r\n                filter(Evt, player) {\r\n                    return player.$.guixiang >= game.countPlayer();\r\n                },\r\n                content: [() => {\r\n                        player.gainMaxHp();\r\n                    }, () => {\r\n                        player.recover();\r\n                    }, () => {\r\n                        player.$.guixiang = true;\r\n                        player.awakenSkill('guixiang');\r\n                        player.unmarkSkill('guixiang');\r\n                    }],\r\n                ai: {\r\n                    combo: 'lianyin',\r\n                },\r\n            },\r\n            xuanying: {\r\n                trigger: { global: ['useCard', 'respond'] },\r\n                priority: 996,\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'respond' && !player.awakenedSkills.includes('houfan'))\r\n                        return false;\r\n                    if (!player.$.xuanying)\r\n                        player.$.xuanying = 0;\r\n                    return Evt.player != player && player == _status.currentPhase && player.$.xuanying < (player.countCards('e') || 1);\r\n                },\r\n                check(Evt, player) {\r\n                    return get.$a(player, Evt.player) > 0;\r\n                },\r\n                logTarget: 'player',\r\n                content: [() => {\r\n                        Evt.target = trigger.player;\r\n                        player.chooseCard(`###${get.$pro('xuanying')}###将一张牌交给${get.$t(Evt.target)}`, 'he').set('target', Evt.target).ai = card => {\r\n                            let player = _status.event.player, target = _status.event.target;\r\n                            if (get.position(card) == 'e')\r\n                                return ((player.countCards('e') + 1) || 1) + get.value(card, target, 'raw') * get.$a(player, target);\r\n                            else if (get.type(card) == 'equip')\r\n                                return ((player.countCards('e')) || 1) + get.value(card, target, 'raw') * get.$a(player, target);\r\n                            return 1 + get.value(card, target, 'raw') * get.$a(player, target);\r\n                        };\r\n                    }, () => {\r\n                        if (result.bool && result.cards) {\r\n                            if (get.type(result.cards[0]) == 'equip')\r\n                                Evt.drawNum = 'equip';\r\n                            player.give(result.cards, Evt.target, true);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        player.chooseTarget(`『玄荫』：令你或其摸${get.cnNumber(Evt.drawNum == 'equip' ? player.countCards('e') + 1 : 1)}张牌`, function (card, player, target) {\r\n                            return player == target || target == _status.event.target;\r\n                        }).set('target', Evt.target).ai = function (target) {\r\n                            if (target != player && target.hasSkillTag('nogain'))\r\n                                return 0;\r\n                            return get.$a(player, target);\r\n                        };\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            if (Evt.drawNum == 'equip')\r\n                                result.targets[0].draw(player.countCards('e') + 1 || 1);\r\n                            else\r\n                                result.targets[0].draw();\r\n                        }\r\n                    }],\r\n                group: 'xuanying_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { player: 'phaseAfter' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        filter(Evt, player) {\r\n                            return player.$.xuanying;\r\n                        },\r\n                        content() {\r\n                            player.$.xuanying = 0;\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            houfan: {\r\n                enable: 'phaseUse',\r\n                unique: true,\r\n                limited: true,\r\n                filter(Evt, player) {\r\n                    return player.isMinHandcard();\r\n                },\r\n                content: [() => {\r\n                        player.loseMaxHp();\r\n                        Evt.num = 0;\r\n                    }, () => {\r\n                        let card = get.discardPile(card => get.type(card) == 'equip');\r\n                        if (card) {\r\n                            player.gain(card, 'gain2');\r\n                            Evt.num++;\r\n                        }\r\n                        else\r\n                            Evt.goto(3);\r\n                    }, () => {\r\n                        if (Evt.num < 4)\r\n                            Evt.goto(1);\r\n                    }, () => {\r\n                        player.$.houfan = true;\r\n                        player.awakenSkill('houfan');\r\n                    }],\r\n                ai: {\r\n                    combo: 'xuanying',\r\n                    order(item, player) {\r\n                        let equips = [];\r\n                        for (let i = 0; i < ui.discardPile.childElementCount; i++) {\r\n                            let subtype = get.subtype(ui.discardPile.childNodes[i]);\r\n                            if (subtype && player.countCards('h', { subtype: subtype }) == 0) {\r\n                                equips.add(ui.discardPile.childNodes[i]);\r\n                            }\r\n                        }\r\n                        if (equips.length >= 3)\r\n                            return 10;\r\n                        return 0;\r\n                    },\r\n                    result: { player: 3 },\r\n                }\r\n            },\r\n            quzhuan: {\r\n                trigger: { global: 'useCardAfter' },\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player == _status.currentPhase && Evt.player != player && get.itemtype(Evt.cards) == 'cards' && Evt.cards.filterInD().length;\r\n                },\r\n                prompt2(Evt, player) {\r\n                    return '你可以获得' + get.$t(Evt.cards.filterInD());\r\n                },\r\n                check(Evt, player) {\r\n                    return Evt.cards.filterInD().length > 1 || get.value(Evt.cards.filterInD()[0], player) > 1;\r\n                },\r\n                content() {\r\n                    player.gain(trigger.cards.filterInD(), 'gain2');\r\n                }\r\n            },\r\n            yuanjiu: {\r\n                trigger: { global: 'phaseUseBegin' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    let esuits = get.suit3(Evt.player.getCards('e'));\r\n                    return esuits.length && player.countDiscardableCards(player, 'he', card => esuits.includes(card));\r\n                },\r\n                content: [() => {\r\n                        Evt.target = trigger.player;\r\n                        let suits = get.suit3(Evt.target.getCards('e'));\r\n                        player.chooseCard('he', get.$pro2('yuanjiu'), card => _status.event.suits.includes(get.suit(card))).set('suits', suits).set('ai', card => {\r\n                            let target = _status.event.getParent().target;\r\n                            let player = _status.event.player;\r\n                            if (target.hasSha() && target.getUseValue('jiu') > 0 && get.$a(player, target) > 0)\r\n                                return 11 - get.value(card);\r\n                            return 0;\r\n                        }).set('logSkill', ['yuanjiu', Evt.target]);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.give(result.cards, Evt.target, true);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        player.useCard({ name: 'jiu' }, Evt.target);\r\n                    }]\r\n            },\r\n            qijian: {\r\n                audio: 4,\r\n                trigger: { global: 'useCardAfter' },\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('qijian_lost'))\r\n                        return false;\r\n                    return Evt.player == _status.currentPhase && Evt.player != player && get.color(Evt.card) == 'red' && Evt.targets && Evt.targets.length;\r\n                },\r\n                prompt2(Evt, player) {\r\n                    return `你可以跟随${get.$t(Evt.cards)}使用一张牌`;\r\n                },\r\n                check(Evt, player) {\r\n                    return Evt.cards.length > 1 || get.value(Evt.cards[0], player) > 1;\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        player.chooseToUse({\r\n                            prompt: `###${get.$t('qijian')}###跟随${get.$t(trigger.player)}使用一张牌？`,\r\n                            filterCard(card, player) {\r\n                                return lib.filter.filterCard.apply(this, arguments);\r\n                            },\r\n                            addCount: false,\r\n                        }).set('ai1', card => {\r\n                            let player = _status.event.player;\r\n                            let useBy = _status.event.useBy;\r\n                            if (get.tag(card, 'damage') && useBy.group == 'qun' && player.hasZhuSkill('jushi'))\r\n                                return get.order(card) + 10;\r\n                            return get.order(card);\r\n                        }).set('useBy', trigger.player).set('logSkill', 'qijian').set('targetRequired', true);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            if (!player.hasHistory('sourceDamage', evt => evt.card.cardid == result.card.cardid && result.targets.includes(evt.player))) {\r\n                                player.draw();\r\n                                if (trigger.player.group != 'qun' || !player.hasZhuSkill('jushi'))\r\n                                    player.addTempSkill('qijian_lost');\r\n                            }\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    lost: {}\r\n                }\r\n            },\r\n            yizhan: {\r\n                subSkill: {\r\n                    count: {\r\n                        trigger: {\r\n                            global: \"recoverBegin\",\r\n                        },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            if (!Evt.card)\r\n                                return false;\r\n                            if (!Evt.source || Evt.source != player)\r\n                                return false;\r\n                            if (!Evt.player.isDying())\r\n                                return false;\r\n                            if (Evt.player.$.yizhan_mark != undefined)\r\n                                return false;\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            trigger.yizhan = true;\r\n                        },\r\n                    },\r\n                    mark: {\r\n                        mark: 'character',\r\n                        locked: true,\r\n                        intro: {\r\n                            name: 'ccm的翅膀',\r\n                            content: '已被$发动『翼展』',\r\n                        },\r\n                    }\r\n                },\r\n                audio: true,\r\n                group: ['yizhan_count'],\r\n                trigger: {\r\n                    global: \"recoverAfter\",\r\n                },\r\n                init(player) {\r\n                    player.$.yizhan = false;\r\n                },\r\n                filter(Evt, player) {\r\n                    if (Evt.player.$.yizhan)\r\n                        return false;\r\n                    if (Evt.player.isDying())\r\n                        return false;\r\n                    return Evt.yizhan == true;\r\n                },\r\n                skillAnimation: true,\r\n                animationColor: 'fire',\r\n                frequent: true,\r\n                logTarget: 'player',\r\n                content: [() => {\r\n                        Evt.target = trigger.player;\r\n                        player.drawTo(player.getHandcardLimit());\r\n                    }, () => {\r\n                        Evt.target.changeGroup('qun');\r\n                        Evt.target.$.yizhan_mark = player;\r\n                        Evt.target.addSkill('yizhan_mark');\r\n                    }],\r\n            },\r\n            jushi: {\r\n                unique: true,\r\n                zhuSkill: true,\r\n                mod: {\r\n                    maxHandcard(player, num) {\r\n                        if (player.hasZhuSkill('jushi') && game.countPlayer(cur => cur.group && cur.group == 'qun'))\r\n                            return num + game.countPlayer(cur => cur.group && cur.group == 'qun');\r\n                    },\r\n                },\r\n                ai: {\r\n                    combo: 'qijian'\r\n                }\r\n            },\r\n            shangsheng: {\r\n                audio: 5,\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = [-1, -1];\r\n                },\r\n                trigger: { player: 'phaseBegin' },\r\n                check(Evt, player) {\r\n                    return true;\r\n                },\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                frequent: true,\r\n                content: [() => {\r\n                        player.chooseControl('dialogcontrol', ['A.于摸牌阶段多摸1张牌', 'B.于出牌阶段多出1张【杀】', 'C.于弃牌阶段手牌上限+1']).set('ai', function () {\r\n                            let player = _status.event.player;\r\n                            let controls = _status.event.controls.slice(0);\r\n                            let map = ['A.于摸牌阶段多摸1张牌', 'B.于出牌阶段多出1张【杀】', 'C.于弃牌阶段手牌上限+1'];\r\n                            if (player.$.shangsheng[0] == -1)\r\n                                return controls.randomGet();\r\n                            else {\r\n                                if (player.$.shangsheng[0] >= 0)\r\n                                    controls.remove(map[player.$.shangsheng[0]]);\r\n                                if (player.$.shangsheng[1] >= 0)\r\n                                    controls.remove(map[player.$.shangsheng[1]]);\r\n                                if (controls.includes('B.于出牌阶段多出1张【杀】') && player.countCards('hs', 'sha') >= 2 && player.hasUseTarget({ name: 'sha', isCard: true }))\r\n                                    return 'B.于出牌阶段多出1张【杀】';\r\n                                return controls.randomGet();\r\n                            }\r\n                        }).set('prompt', '『能力上升』：选择一项');\r\n                    }, () => {\r\n                        Evt.change = result.control;\r\n                        switch (Evt.change) {\r\n                            case 'A.于摸牌阶段多摸1张牌': {\r\n                                player.addTempSkill('shangsheng_Buff0');\r\n                                break;\r\n                            }\r\n                            case 'B.于出牌阶段多出1张【杀】': {\r\n                                player.addTempSkill('shangsheng_Buff1');\r\n                                break;\r\n                            }\r\n                            case 'C.于弃牌阶段手牌上限+1': {\r\n                                player.addTempSkill('shangsheng_Buff2');\r\n                                break;\r\n                            }\r\n                        }\r\n                    }, () => {\r\n                        Evt.map = {\r\n                            'A.于摸牌阶段多摸1张牌': 1,\r\n                            'B.于出牌阶段多出1张【杀】': 2,\r\n                            'C.于弃牌阶段手牌上限+1': 3,\r\n                        };\r\n                        if (player.$.shangsheng[0] >= 0 && player.$.shangsheng[0] != Evt.map[Evt.change]\r\n                            && player.$.shangsheng[1] >= 0 && player.$.shangsheng[1] != Evt.map[Evt.change])\r\n                            player.$.shangsheng_Buff++;\r\n                        else if (player.$.shangsheng_Buff > 0)\r\n                            player.$.shangsheng_Buff--;\r\n                    }, () => {\r\n                        player.$.shangsheng[1] = player.$.shangsheng[0];\r\n                        player.$.shangsheng[0] = Evt.map[Evt.change];\r\n                        player.markSkill('shangsheng_Buff');\r\n                    }],\r\n                group: 'shangsheng_Buff',\r\n                subSkill: {\r\n                    Buff0: {\r\n                        trigger: { player: 'phaseDrawBegin2' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return !Evt.numFixed;\r\n                        },\r\n                        content() {\r\n                            let Buff = (player.$.shangsheng_Buff) || 1;\r\n                            trigger.num += Buff;\r\n                        },\r\n                        mark: true,\r\n                        marktext: 'A',\r\n                        intro: { name: 'Buff', content: '本回合内于摸牌阶段多摸牌' },\r\n                    },\r\n                    Buff1: {\r\n                        mod: {\r\n                            cardUsable(card, player, num) {\r\n                                let Buff = (player.$.shangsheng_Buff) || 1;\r\n                                if (card.name == 'sha' && player.isPhaseUsing())\r\n                                    return num + Buff;\r\n                            },\r\n                        },\r\n                        mark: true,\r\n                        marktext: 'B',\r\n                        intro: { name: 'Buff', content: '本回合内于出牌阶段可以多使用【杀】' },\r\n                    },\r\n                    Buff2: {\r\n                        trigger: { player: 'phaseDiscardBegin' },\r\n                        forced: true,\r\n                        content() { },\r\n                        mod: {\r\n                            maxHandcard(player, num) {\r\n                                if (_status.event.name == 'phaseDiscard') {\r\n                                    let Buff = (player.$.shangsheng_Buff) || 1;\r\n                                    return num += Buff;\r\n                                }\r\n                            },\r\n                        },\r\n                        mark: true,\r\n                        marktext: 'C',\r\n                        intro: { name: 'Buff', content: '本回合于弃牌阶段手牌上限上升' },\r\n                    },\r\n                    Buff: {\r\n                        init(player, skill) {\r\n                            if (!player.$[skill])\r\n                                player.$[skill] = 0;\r\n                        },\r\n                        marktext: \"↑↑\",\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '能力值大上升↑↑',\r\n                            content: 'Buff已叠加&层',\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            jinghua: {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = [];\r\n                },\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.getStat().card.sha > 0;\r\n                },\r\n                filterCard: true,\r\n                complexCard: true,\r\n                selectCard() {\r\n                    let player = _status.event.player;\r\n                    return player.getStat().card.sha;\r\n                },\r\n                complexTarget: true,\r\n                multitarget: true,\r\n                selectTarget() {\r\n                    if (!ui.selected.cards.length)\r\n                        return [1, 1];\r\n                    return [ui.selected.cards.length, ui.selected.cards.length];\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    if (!ui.selected.cards.length)\r\n                        return false;\r\n                    return target != player;\r\n                },\r\n                discard: false,\r\n                lose: false,\r\n                check(card) {\r\n                    if (get.type(card) == 'basic')\r\n                        return 7 - get.value(card);\r\n                    return 4 - get.value(card);\r\n                },\r\n                content: [() => {\r\n                        Evt.shows = cards.slice(0);\r\n                        Evt.gains = targets.slice(0);\r\n                        if (!player.$.jinghua)\r\n                            player.$.jinghua = [];\r\n                        player.$.jinghua.addArray(Evt.gains);\r\n                    }, () => {\r\n                        let show = Evt.shows.shift();\r\n                        let gain = Evt.gains.shift();\r\n                        player.showCards(show, '『镜花水月』展示牌');\r\n                        gain.addSkill('jinghua2');\r\n                        player.give(show, gain, true);\r\n                        gain.markAuto('jinghua2', [show]);\r\n                        if (Evt.gains.length)\r\n                            Evt.redo();\r\n                    }],\r\n                ai: {\r\n                    order: 7,\r\n                    result: {\r\n                        target: -1,\r\n                    }\r\n                }\r\n            },\r\n            jinghua2: {\r\n                marktext: '镜',\r\n                intro: {\r\n                    name: '镜花水月',\r\n                    content: 'cards',\r\n                },\r\n                onremove: true,\r\n                charlotte: true,\r\n                mod: {\r\n                    cardEnabled(card, player) {\r\n                        if (player.getStorage('jinghua2').filter(jinghua => get.type2(jinghua) == get.type2(card)).length)\r\n                            return false;\r\n                    },\r\n                    cardSavable(card, player) {\r\n                        if (player.getStorage('jinghua2').filter(jinghua => get.type2(jinghua) == get.type2(card)).length)\r\n                            return false;\r\n                    },\r\n                },\r\n                trigger: {\r\n                    global: 'phaseBefore',\r\n                },\r\n                locked: true,\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return Evt.player.hasSkill('jinghua') && Evt.player.getStorage('jinghua').includes(player);\r\n                },\r\n                content() {\r\n                    player.line(trigger.player);\r\n                    trigger.player.$.jinghua.remove(player);\r\n                    player.removeSkill('jinghua2');\r\n                },\r\n            },\r\n            shang: {\r\n                intro: {\r\n                    name: '裳',\r\n                    content: 'cards',\r\n                    onunmark: 'throw',\r\n                },\r\n                locked: true,\r\n                cardAround: true,\r\n            },\r\n            shangbei: {\r\n                group: ['shang', 'shangbei_give'],\r\n                trigger: { player: 'damageAfter' },\r\n                frequent: true,\r\n                content: [() => {\r\n                        let cards = [ui.cardPile.firstChild];\r\n                        Evt.cards = cards;\r\n                        player.showCards(Evt.cards, '『裳备』展示牌');\r\n                    }, () => {\r\n                        if (!player.getStorage('shang').includes(get.suit(Evt.cards[0], false))) {\r\n                            player.$draw(Evt.cards);\r\n                            player.markAuto('shang', game.cardsGotoSpecial(Evt.cards).cards);\r\n                            player.draw();\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    give: {\r\n                        trigger: { player: 'phaseUseBegin' },\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            return player.getStorage('shang').length > 0;\r\n                        },\r\n                        content: [() => {\r\n                                Evt.cards = player.getStorage('shang');\r\n                            }, () => {\r\n                                Evt.videoId = lib.status.videoId++;\r\n                                let dialogx = ['###『裳备』：你的「裳」###选择某一类型的「裳」，然后令一名角色获得之'];\r\n                                dialogx.push(Evt.cards);\r\n                                if (player.isOnline2()) {\r\n                                    player.send(function (dialogx, id) {\r\n                                        ui.create.dialog.apply(null, dialogx).videoId = id;\r\n                                    }, dialogx, Evt.videoId);\r\n                                }\r\n                                Evt.dialog = ui.create.dialog.apply(null, dialogx);\r\n                                Evt.dialog.videoId = Evt.videoId;\r\n                                if (player != game.me || _status.auto) {\r\n                                    Evt.dialog.style.display = 'none';\r\n                                }\r\n                            }, () => {\r\n                                let next = player.chooseButton();\r\n                                next.set('selectButton', 1);\r\n                                next.set('dialog', Evt.videoId);\r\n                                next.set('ai', function (button) {\r\n                                    return get.value(button.link);\r\n                                });\r\n                            }, () => {\r\n                                if (result.bool && result.links) {\r\n                                    Evt.links = result.links;\r\n                                    let func = function (cards, id) {\r\n                                        let dialog = get.idDialog(id);\r\n                                        if (dialog) {\r\n                                            for (let j of cards) {\r\n                                                for (let i = 0; i < dialog.buttons.length; i++) {\r\n                                                    if (get.type2(dialog.buttons[i].link) == get.type2(j)) {\r\n                                                        dialog.buttons[i].classList.add('glow');\r\n                                                    }\r\n                                                    else {\r\n                                                        dialog.buttons[i].classList.add('unselectable');\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    };\r\n                                    if (player.isOnline2()) {\r\n                                        player.send(func, Evt.links, Evt.videoId);\r\n                                    }\r\n                                    else if (player == game.me && !_status.auto) {\r\n                                        func(Evt.links, Evt.videoId);\r\n                                    }\r\n                                    player.chooseTarget('『裳备』：令一名角色获得之').set('ai', function (target) {\r\n                                        let player = _status.event.player, effect = get.$a(player, target) * 1.5;\r\n                                        if (target != player)\r\n                                            effect += get.recoverEffect(player, player, player);\r\n                                        return effect;\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    if (player.isOnline2()) {\r\n                                        player.send('closeDialog', Evt.videoId);\r\n                                    }\r\n                                    Evt.dialog.close();\r\n                                    Evt.finish();\r\n                                }\r\n                            }, () => {\r\n                                var _a;\r\n                                if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                                    Evt.target = result.targets[0];\r\n                                    let type = get.type2(Evt.links[0]);\r\n                                    Evt.cards = Evt.cards.filter(card => get.type2(card) == type);\r\n                                    player.unmarkAuto('shang', Evt.cards);\r\n                                    player.$give(Evt.cards, Evt.target);\r\n                                    Evt.target.gain(Evt.cards, 'giveAuto');\r\n                                    if (Evt.target != player)\r\n                                        player.recover();\r\n                                }\r\n                                else {\r\n                                    for (let i = 0; i < ui.dialog.buttons.length; i++) {\r\n                                        ui.dialog.buttons[i].classList.remove('glow');\r\n                                    }\r\n                                    Evt.goto(2);\r\n                                }\r\n                            }, () => {\r\n                                if (player.isOnline2()) {\r\n                                    player.send('closeDialog', Evt.videoId);\r\n                                }\r\n                                Evt.dialog.close();\r\n                            }],\r\n                    }\r\n                }\r\n            },\r\n            qianqing: {\r\n                trigger: { player: 'phaseBegin' },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return player.getStorage('shang').length == 0;\r\n                },\r\n                content() {\r\n                    player.damage('nosource');\r\n                }\r\n            },\r\n            shenghua: {\r\n                enable: 'phaseUse',\r\n                position: 'h',\r\n                filter(Evt, player) {\r\n                    return player.countCards('h');\r\n                },\r\n                filterCard: true,\r\n                selectCard: -1,\r\n                check(card) {\r\n                    if (get.type(card) == 'equip')\r\n                        return 10 - get.value(card);\r\n                    return 6 - get.value(card);\r\n                },\r\n                content() {\r\n                    player.draw(cards.length - player.countSkill('shenghua'));\r\n                },\r\n                ai: {\r\n                    order(item, player) {\r\n                        if (player.countCards('h', { type: 'equip' }))\r\n                            return 4;\r\n                        else\r\n                            return 1;\r\n                    },\r\n                    result: {\r\n                        player(player) {\r\n                            if (player.isTurnedOver() && player.countCards('h', { type: 'equip' }))\r\n                                return 1;\r\n                            return 1 - player.countSkill('shenghua');\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            zhanchong: {\r\n                trigger: { player: 'loseEnd' },\r\n                filter(Evt, player) {\r\n                    if (Evt.getParent().name && ['useCard', 'addJudge'].includes(Evt.getParent().name))\r\n                        return false;\r\n                    if (!Evt.visible)\r\n                        return false;\r\n                    for (let i = 0; i < Evt.hs.length; i++) {\r\n                        if (get.type(Evt.hs[i]) == 'equip')\r\n                            return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        var _a;\r\n                        (_a = Evt.num) !== null && _a !== void 0 ? _a : (Evt.num = trigger.hs.filter(chong => get.type(chong) == 'equip').length);\r\n                        if (Evt.num > 0) {\r\n                            player.chooseTarget(get.$pro2('zhanchong'), function (card, player, target) {\r\n                                return target.countCards('he');\r\n                            }).set('ai', function (target) {\r\n                                let player = _status.event.player;\r\n                                if (player.isTurnedOver())\r\n                                    return 4 - get.$a(player, target);\r\n                                return -1 - get.$a(player, target);\r\n                            });\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (result.bool && result.targets[0]) {\r\n                            Evt.target = result.targets[0];\r\n                            player.discardPlayerCard(result.targets[0], 'he', true).set('ai', function (button) {\r\n                                if (get.type(button.link) == 'equip')\r\n                                    return 2 - get.value(button.link);\r\n                                return 3 - get.value(button.link) + get.damageEffect(_status.event.target, _status.event.player, _status.event.player);\r\n                            });\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.cards) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            player.turnOver();\r\n                            Evt.num--;\r\n                            if (get.type(result.cards[0]) != 'equip') {\r\n                                Evt.target.damage(player);\r\n                            }\r\n                            Evt.goto(0);\r\n                        }\r\n                    }],\r\n            },\r\n            baiqing: {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = 0;\r\n                },\r\n                trigger: { global: 'useCard2' },\r\n                filter(Evt, player) {\r\n                    if (Evt.card.name != 'sha')\r\n                        return false;\r\n                    return true;\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        if (!player.$.baiqing)\r\n                            player.$.baiqing = 0;\r\n                        player.$.baiqing++;\r\n                        player.markSkill('baiqing');\r\n                    }, () => {\r\n                        if (player.getDamagedHp() + 1 == player.$.baiqing) {\r\n                            player.chooseBool(get.$pro2('baiqing')).ai = function () {\r\n                                return 1;\r\n                            };\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.cards = get.cards(player.$.baiqing);\r\n                            player.showCards(`『白情』亮出牌堆顶${get.cnNumber(player.$.baiqing)}张牌`, Evt.cards);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        let discards = [];\r\n                        if (trigger.cards) {\r\n                            Evt.cards = Evt.cards.filter(card => {\r\n                                for (let i = 0; i < trigger.cards.length; i++) {\r\n                                    if (get.color(trigger.cards[i]) == get.color(card)) {\r\n                                        discards.add(card);\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                                return true;\r\n                            });\r\n                        }\r\n                        if (discards.length) {\r\n                            game.cardsDiscard(discards);\r\n                        }\r\n                        player.gain(Evt.cards, 'log', 'gain2');\r\n                    }],\r\n                marktext: 'ヰ',\r\n                mark: true,\r\n                intro: {\r\n                    content: '全场已使用#张杀',\r\n                },\r\n                group: 'baiqing_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { global: 'phaseAfter' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        priority: 42,\r\n                        content() {\r\n                            player.unmarkSkill('baiqing');\r\n                            player.$.baiqing = 0;\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            shuangxing: {\r\n                trigger: { player: 'useCard2' },\r\n                filter(Evt, player) {\r\n                    if (get.type2(Evt.card) != 'trick')\r\n                        return false;\r\n                    return Evt.targets && Evt.targets.length && !Evt.targets.includes(player);\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        let controls = ['令你本回合使用牌无次数限制', '令其中一名目标对你使用一张【杀】，否则你获得其一张牌', '取消'];\r\n                        player.chooseControl('dialogcontrol', controls).set('ai', function () {\r\n                            let player = _status.event.player;\r\n                            if (player.countCards('hs', 'sha') > 2 && !player.hasSkill('shuangxing_chenhui') && !player.hasUnknown(2))\r\n                                return 0;\r\n                            return 1;\r\n                        }).set('prompt', get.$pro2('shuangxing'));\r\n                    }, () => {\r\n                        switch (result.control) {\r\n                            case '令你本回合使用牌无次数限制': {\r\n                                player.logSkill('shuangxing');\r\n                                player.addTempSkill('shuangxing_chenhui');\r\n                                Evt.finish();\r\n                                break;\r\n                            }\r\n                            case '令其中一名目标对你使用一张【杀】，否则你获得其一张牌': {\r\n                                player.chooseTarget(get.$pro2('shuangxing'), function (card, player, target) {\r\n                                    return _status.event.targets.includes(target) && target.countCards('h');\r\n                                }).set('ai', function (target) {\r\n                                    if (get.$a(player, target) < 0) {\r\n                                        if (player.maxHp - player.hp + 1 > player.$.baiqing)\r\n                                            return 4;\r\n                                        else\r\n                                            return 5 - target.countCards('hs');\r\n                                    }\r\n                                    return 0;\r\n                                }).set('targets', trigger.targets);\r\n                                break;\r\n                            }\r\n                            default: Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool && result.targets[0]) {\r\n                            let target = result.targets[0];\r\n                            Evt.target = target;\r\n                            player.logSkill('shuangxing', target);\r\n                            target.chooseToUse(function (card, player, Evt) {\r\n                                if (get.name(card) != 'sha')\r\n                                    return false;\r\n                                return lib.filter.filterCard.apply(this, arguments);\r\n                            }, `『星徊』：对${get.$t(player)}使用一张杀，或令其获得你的一张牌`).set('targetRequired', true).set('complexSelect', true).set('filterTarget', function (card, player, target) {\r\n                                if (target != _status.event.sourcex && !ui.selected.targets.includes(_status.event.sourcex))\r\n                                    return false;\r\n                                return lib.filter.targetEnabled2.apply(this, arguments);\r\n                            }).set('sourcex', player);\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool == false && Evt.target.countGainableCards(player, 'he') > 0) {\r\n                            player.gainPlayerCard(Evt.target, 'he', true);\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    chenhui: {\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '本回合使用牌无次数限制',\r\n                        },\r\n                        mod: {\r\n                            cardUsable(card, player, num) {\r\n                                return Infinity;\r\n                            },\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            nisheng: {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = [];\r\n                },\r\n                trigger: { global: 'phaseEnd' },\r\n                filter(Evt, player) {\r\n                    if (Evt.skill)\r\n                        return false;\r\n                    return player.countCards('h', card1 => {\r\n                        let num = get.number(card1, player);\r\n                        if (player.getStorage('nisheng').includes(num))\r\n                            return false;\r\n                        return player.countCards('h', card2 => card1 != card2 && num == get.number(card2, player));\r\n                    }) >= 2;\r\n                },\r\n                content: [() => {\r\n                        player.chooseCard(get.$pro2('nisheng'), 'h', 2, function (card, player) {\r\n                            let num = get.number(card);\r\n                            if (player.getStorage('nisheng').includes(num))\r\n                                return false;\r\n                            if (ui.selected.cards.length)\r\n                                return num == get.number(ui.selected.cards[0]);\r\n                            return true;\r\n                        }).ai = get.unuseful2;\r\n                    }, () => {\r\n                        if (result.bool && result.cards[0]) {\r\n                            player.showCards(result.cards, '拟声');\r\n                            player.$.nisheng.add(get.number(result.cards[0]));\r\n                            player.markSkill('nisheng');\r\n                            player.insertPhase();\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }],\r\n                intro: {\r\n                    content: '已使用过的点数：#',\r\n                },\r\n            },\r\n            jingyan: {\r\n                trigger: { player: 'damageEnd' },\r\n                filter(Evt, player) {\r\n                    return Evt.source && Evt.source.isIn() && Evt.source.countCards('he') / 2 > 0;\r\n                },\r\n                check(Evt, player) {\r\n                    return Evt.source.countCards('he') / 2 >= 2 || player.isTurnedOver();\r\n                },\r\n                logTarget: 'source',\r\n                content: [() => {\r\n                        player.turnOver();\r\n                    }, () => {\r\n                        player.gainPlayerCard(trigger.source, true, 'he', Math.ceil(trigger.source.countCards('he') / 2));\r\n                    }],\r\n                ai: {\r\n                    maixie: true,\r\n                    skillTagFilter(player) {\r\n                        return player.isTurnedOver();\r\n                    },\r\n                }\r\n            },\r\n            fantuan: {\r\n                trigger: { player: 'useCard2' },\r\n                direct: true,\r\n                filter(Evt) {\r\n                    return get.type(Evt.card) == 'delay';\r\n                },\r\n                content: [() => {\r\n                        player.chooseTarget(get.$pro2('fantuan')).set('ai', function (target) {\r\n                            let player = _status.event.player;\r\n                            return get.recoverEffect(target, player, player) + get.$a(player, target);\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool && result.targets[0]) {\r\n                            result.targets[0].recover();\r\n                            result.targets[0].draw();\r\n                        }\r\n                    }],\r\n            },\r\n            shengang: {\r\n                group: ['shengang_judge', 'shengang_useCard'],\r\n                subSkill: {\r\n                    judge: {\r\n                        trigger: { global: ['judgeAfter'] },\r\n                        filter(Evt, player) {\r\n                            if (!game.filterPlayer(cur => get.$dis(player, cur, 'pure') == 1, [player]).includes(Evt.player))\r\n                                return false;\r\n                            return Evt.card && get.type(Evt.card) == 'delay' && get.position(Evt.card) == 'd';\r\n                        },\r\n                        prompt2(Evt, player) {\r\n                            return '获得' + get.$t(Evt.card);\r\n                        },\r\n                        check(Evt, player) {\r\n                            return get.value(Evt.card) > 3;\r\n                        },\r\n                        round: 2,\r\n                        content() {\r\n                            player.gain(trigger.card, 'gain2', 'log');\r\n                        },\r\n                    },\r\n                    useCard: {\r\n                        trigger: { global: ['useCardAfter'] },\r\n                        filter(Evt, player) {\r\n                            if (!game.filterPlayer(cur => get.$dis(player, cur, 'pure') == 1, [player]).includes(Evt.player))\r\n                                return false;\r\n                            return Evt.cards && Evt.cards.filterInD().length;\r\n                        },\r\n                        prompt2(Evt, player) {\r\n                            return '获得' + get.$t(Evt.cards.filterInD());\r\n                        },\r\n                        check(Evt, player) {\r\n                            return get.value(Evt.cards.filterInD()) > 3;\r\n                        },\r\n                        round: 2,\r\n                        content() {\r\n                            player.gain(trigger.cards.filterInD(), 'gain2', 'log');\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            dan: {\r\n                locked: true,\r\n                marktext: '弹',\r\n                intro: {\r\n                    content: 'cardCount',\r\n                },\r\n                cardAround: true\r\n            },\r\n            sbliedan: {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = [];\r\n                },\r\n                trigger: { player: 'useCardToPlayered' },\r\n                filter(Evt, player) {\r\n                    return get.name(Evt.card) == 'sha' && Evt.target.countCards('he');\r\n                },\r\n                logTarget: 'target',\r\n                content: [() => {\r\n                        Evt.target = trigger.target;\r\n                        Evt.num = Math.min(game.roundNumber || 1, 7);\r\n                        Evt.target.chooseCard('he', Evt.num, true, `『烈弹』：将${get.cnNumber(Evt.num)}张牌置为「弹」`);\r\n                    }, () => {\r\n                        if (result.bool && result.cards.length) {\r\n                            Evt.target.lose(result.cards, ui.special, 'toStorage');\r\n                            target.addSkill('sbliedan2');\r\n                            target.$.sbliedan2 = Evt.num;\r\n                            player.markAuto('dan', result.cards);\r\n                        }\r\n                    }],\r\n                group: ['dan', 'sbliedan_gainBy'],\r\n                subSkill: {\r\n                    gainBy: {\r\n                        trigger: { player: 'phaseEnd' },\r\n                        forced: true,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            return player.$.dan && player.$.dan.length > 0;\r\n                        },\r\n                        content() {\r\n                            game.log(player, `收回了${get.cnNumber(player.gain(player.$.dan, 'draw', 'fromStorage').cards.length)}张「弹」`);\r\n                            player.$.dan.length = 0;\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            sbliedan2: {\r\n                trigger: { global: 'phaseDiscardEnd' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return player.$.sbliedan2;\r\n                },\r\n                content: [() => {\r\n                        Evt.num = player.$.sbliedan2;\r\n                        let cards = [];\r\n                        game.filterPlayer(cur => {\r\n                            if (cur.getStorage('dan').length)\r\n                                cards.addArray(cur.getStorage('dan'));\r\n                        });\r\n                        if (cards.length) {\r\n                            player.chooseCardButton(cards, Evt.num, `『烈弹』：可以收回${get.cnNumber(Evt.num)}张「弹」`);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (result.bool && result.links.length) {\r\n                            game.filterPlayer(cur => {\r\n                                if (cur.getStorage('dan').length)\r\n                                    cur.unmarkAuto('dan', result.links);\r\n                            });\r\n                            game.log(player, `收回了${get.cnNumber(player.gain(result.links, 'draw', 'fromStorage').cards.length)}张「弹」`);\r\n                            delete player.$.sbliedan2;\r\n                            player.removeSkill('sbliedan2');\r\n                        }\r\n                    }],\r\n                intro: {\r\n                    onunmark: 'throw',\r\n                    content: 'cardCount',\r\n                },\r\n            },\r\n            buqiang: {\r\n                trigger: { global: 'changeHp' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return Evt.player.hp == 1 && player.canUse('sha', Evt.player, false) && (player.hasSha() || _status.connectMode && player.countCards('hs'));\r\n                },\r\n                content() {\r\n                    Evt.target = trigger.player;\r\n                    player.chooseToUse(get.$pro2('buqiang', Evt.target), function (card, player, Evt) {\r\n                        if (get.name(card) != 'sha')\r\n                            return false;\r\n                        return lib.filter.filterCard.apply(this, arguments);\r\n                    }, Evt.target, -1).set('addCount', false).set('logSkill', 'buqiang');\r\n                },\r\n            },\r\n            pphpanfeng: {\r\n                trigger: { player: ['phaseUseBegin', 'damageAfter'] },\r\n                filter(Evt, player) {\r\n                    return !player.hasSkill('pphpanfeng_used');\r\n                },\r\n                content() {\r\n                    player.judge(card => {\r\n                        if (get.color(card) == 'red')\r\n                            return 2;\r\n                        return 0;\r\n                    }).callback = lib.skill.pphpanfeng.callback;\r\n                },\r\n                callback: [() => {\r\n                        if (Evt.judgeResult.color == 'red') {\r\n                            player.chooseTarget('『攀峰』：对体力最多的角色造成一点伤害', true, function (card, player, target) {\r\n                                return target.isMaxHp();\r\n                            }).set('ai', function (target) {\r\n                                let player = _status.event.player;\r\n                                return get.damageEffect(target, player, player);\r\n                            });\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('pphpanfeng', Evt.target);\r\n                            Evt.target.damage('nocard');\r\n                        }\r\n                    }],\r\n                group: 'pphpanfeng_usedBy',\r\n                subSkill: {\r\n                    usedBy: {\r\n                        trigger: { global: 'dyingAfter' },\r\n                        forced: true,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            return Evt.player.isAlive() && Evt.reason && Evt.reason.getParent().name == 'judgeCallback'\r\n                                && Evt.reason.getParent(3).name == 'pphpanfeng' && Evt.reason.getParent(3).player == player;\r\n                        },\r\n                        content() {\r\n                            player.addTempSkill('pphpanfeng_used');\r\n                        }\r\n                    },\r\n                    used: {\r\n                        mark: true,\r\n                        marktext: '峰',\r\n                        intro: {\r\n                            content: '不能发动『攀峰』'\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            lanyue: {\r\n                trigger: { global: 'damageSource' },\r\n                filter(Evt, player) {\r\n                    if (Evt._notrigger.includes(Evt.player))\r\n                        return false;\r\n                    if (!player.countCards('h'))\r\n                        return false;\r\n                    return (Evt.card && Evt.card.name == 'sha' && Evt.getParent().name == 'sha' &&\r\n                        Evt.source.isAlive());\r\n                },\r\n                direct: true,\r\n                limited: true,\r\n                skillAnimation: true,\r\n                animationColor: 'metal',\r\n                content: [() => {\r\n                        Evt.target = trigger.source;\r\n                        Evt.num = trigger.num;\r\n                        let check = get.$a(player, Evt.target) > 0 && (!Evt.target.countCards('h') || Evt.num >= 2);\r\n                        player.chooseToDiscard(get.$pro2('lanyue')).set('ai', card => {\r\n                            let check = _status.event.check;\r\n                            if (!check)\r\n                                return 0;\r\n                            return get.unuseful2(card);\r\n                        }).set('check', check);\r\n                    }, () => {\r\n                        if (result.bool && result.cards) {\r\n                            player.logSkill('lanyue', Evt.target);\r\n                            player.awakenSkill('lanyue');\r\n                            Evt.target.gainMaxHp();\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        let list = [player];\r\n                        list.add(Evt.target);\r\n                        game.asyncDraw(list, Evt.num);\r\n                    }]\r\n            },\r\n            shenghuo: {\r\n                audio: 3,\r\n                init(player, skill) {\r\n                    player.markSkill('shenghuo');\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = 0;\r\n                },\r\n                enable: 'phaseUse',\r\n                position: 'h',\r\n                filter(Evt, player) {\r\n                    return !player.getStat('skill').shenghuo || player.getStat('skill').shenghuo < player.$.shenghuo + 1;\r\n                },\r\n                content: [() => {\r\n                        Evt.topCards = get.cards(player.$.shenghuo + 1);\r\n                        Evt.bottomCards = get.bottomCards(player.$.shenghuo + 1);\r\n                        Evt.bottomCards.removeArray(Evt.topCards);\r\n                        let cards = Evt.topCards.concat(Evt.bottomCards);\r\n                        player.chooseButton([0, Infinity], true, ['『圣火』：按顺序选择置于牌堆另一端的牌（先选择的在外侧）', '牌堆顶', [Evt.topCards, 'card'], '牌堆底', [Evt.bottomCards, 'card']]).set('ai', function (button) {\r\n                            let player = _status.event.player, now = _status.currentPhase, next = now.getNext();\r\n                            let att = get.$a(player, next), card = button.link;\r\n                            let bottomCards = _status.event.bottomCards;\r\n                            let judge = next.getCards('j')[ui.selected.buttons.filter(buttonx => bottomCards.includes(buttonx.link)).length];\r\n                            if (judge) {\r\n                                if (bottomCards.includes(card))\r\n                                    return get.judge(judge)(card) * att;\r\n                                else\r\n                                    return -get.judge(judge)(card) * att;\r\n                            }\r\n                            if (bottomCards.includes(card))\r\n                                return next.getUseValue(card) * att;\r\n                            return -next.getUseValue(card) * att;\r\n                        }).set('bottomCards', Evt.bottomCards);\r\n                    }, () => {\r\n                        if (result.bool && result.links) {\r\n                            let links = result.links.slice(0);\r\n                            let top = Evt.topCards.slice(0).removeArray(links), bottom = Evt.bottomCards.slice(0).removeArray(links);\r\n                            for (let i = 0; i < links.length; i++) {\r\n                                if (Evt.topCards.includes(links[i]))\r\n                                    bottom.push(links[i]);\r\n                                if (Evt.bottomCards.includes(links[i]))\r\n                                    top.unshift(links[i]);\r\n                            }\r\n                            for (let i = top.length - 1; i > -1; i--) {\r\n                                ui.cardPile.insertBefore(top[i], ui.cardPile.firstChild);\r\n                            }\r\n                            for (let i = 0; i < bottom.length; i++) {\r\n                                ui.cardPile.appendChild(bottom[i]);\r\n                            }\r\n                            player.popup(`${get.cnNumber(top.length)}上${get.cnNumber(bottom.length)}下`);\r\n                            game.log(player, `将${get.cnNumber(top.length)}张牌置于牌堆顶`);\r\n                            game.updateRoundNumber();\r\n                            game.delay(2);\r\n                        }\r\n                    }],\r\n                marktext: 'Nya',\r\n                mark: true,\r\n                intro: {\r\n                    content: '上次受到的伤害值为#',\r\n                },\r\n                group: 'shenghuo_change',\r\n                subSkill: {\r\n                    change: {\r\n                        trigger: { player: 'damage' },\r\n                        filter(Evt, player) {\r\n                            return Evt.num > 0;\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            player.$.shenghuo = trigger.num;\r\n                            player.markSkill('shenghuo');\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    order(item, player) {\r\n                        if (player.countCards('hs', card => get.tag(card, 'draw')))\r\n                            return 10;\r\n                        else\r\n                            return 1;\r\n                    },\r\n                    result: {\r\n                        player(player) {\r\n                            return 1;\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            dipo: {\r\n                audio: 1,\r\n                trigger: {\r\n                    player: 'drawBegin'\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.isDamaged();\r\n                },\r\n                forced: true,\r\n                firstDo: true,\r\n                content() {\r\n                    trigger.bottom = true;\r\n                    trigger.num++;\r\n                },\r\n                ai: {\r\n                    maixie: true,\r\n                    maixie_hp: true,\r\n                    skillTagFilter(player) {\r\n                        return player.isHealthy();\r\n                    },\r\n                    threaten(player, target) {\r\n                        if (target.hp == target.maxHp)\r\n                            return 0.5;\r\n                        return 1.2;\r\n                    },\r\n                    effect: {\r\n                        target(card, player, target) {\r\n                            if (get.tag(card, 'draw') && target.isDamaged())\r\n                                return [1, 1];\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            miaoche: {\r\n                audio: 2,\r\n                trigger: { global: 'loseAfter' },\r\n                filter(Evt, player) {\r\n                    if (!player.hasZhuSkill('miaoche'))\r\n                        return false;\r\n                    return Evt.type == 'discard' && Evt.getParent('phaseDiscard').player == Evt.player && Evt.player.isYingV() && Evt.cards2.filterInD('d').length > 0;\r\n                },\r\n                zhuSkill: true,\r\n                direct: true,\r\n                logTarget: 'player',\r\n                content: [() => {\r\n                        Evt.target = trigger.player;\r\n                        if (trigger.delay === false)\r\n                            game.delay();\r\n                        let cards = trigger.cards2.filterInD('d');\r\n                        player.chooseCardButton(cards, '『喵车』：是否获得其中的一张牌？').set('ai', function (button) {\r\n                            return get.value(button.link, _status.event.player);\r\n                        });\r\n                        \"step 1\";\r\n                        if (result.bool) {\r\n                            player.logSkill('miaoche', Evt.target);\r\n                            player.gain(result.links[0], 'gain2');\r\n                            game.delayx();\r\n                        }\r\n                    }],\r\n            },\r\n            haosun: {\r\n                audio: 3,\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = [];\r\n                },\r\n                trigger: {\r\n                    player: 'phaseBegin'\r\n                },\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        let controls = ['回复1点体力以重置此技能并修改『伴猫』，然后你本回合每次摸牌少摸一张', '声明一种你可以使用的基本牌并令你不能使用之，然后你本回合每次摸牌额外摸一张', '取消'];\r\n                        player.chooseControl('dialogcontrol', controls).set('ai', function () {\r\n                            let player = _status.event.player;\r\n                            if (player.isDamaged() || player.getStorage('haosun').length > 1)\r\n                                return 0;\r\n                            return 1;\r\n                        }).set('prompt', get.$pro2('haosun'));\r\n                    }, () => {\r\n                        switch (result.control) {\r\n                            case '回复1点体力以重置此技能并修改『伴猫』，然后你本回合每次摸牌少摸一张': {\r\n                                player.logSkill('haosun');\r\n                                player.recover();\r\n                                player.$.banmao = true;\r\n                                player.$.haosun = [];\r\n                                player.addTempSkill('haosun_drop');\r\n                                player.unmarkSkill('haosun');\r\n                                Evt.finish();\r\n                                break;\r\n                            }\r\n                            case '声明一种你可以使用的基本牌并令你不能使用之，然后你本回合每次摸牌额外摸一张': {\r\n                                player.chooseControl(get.inpile('basic', card => lib.filter.cardEnabled({ name: card }, player, 'forceEnable'))).set('prompt', '声明一种你可以使用的基本牌并令你不能使用之').set('choice', get.inpile('basic', card => {\r\n                                    if (player.hasCard(card))\r\n                                        return false;\r\n                                    return lib.filter.cardEnabled({ name: card }, player, 'forceEnable');\r\n                                })).set('ai', function () {\r\n                                    let player = _status.event.player;\r\n                                    let controls = _status.event.controls.slice(0);\r\n                                    if (_status.event.choice && _status.event.choice.length)\r\n                                        return _status.event.choice.randomGet();\r\n                                    if (controls.includes('qi'))\r\n                                        return 'qi';\r\n                                    if (controls.includes('tao') && player.hp >= 2)\r\n                                        return 'tao';\r\n                                    if (controls.includes('jiu'))\r\n                                        return 'jiu';\r\n                                    return controls.randomGet();\r\n                                });\r\n                                break;\r\n                            }\r\n                            default: Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (result.control) {\r\n                            player.logSkill('haosun');\r\n                            player.popup(result.control);\r\n                            player.$.haosun.add(result.control);\r\n                            player.addTempSkill('haosun_plus');\r\n                            player.markSkill('haosun');\r\n                            game.delayx();\r\n                        }\r\n                    }],\r\n                mod: {\r\n                    cardEnabled(card, player) {\r\n                        if (player.getStorage('haosun').includes(get.name(card)))\r\n                            return false;\r\n                    },\r\n                    cardSavable(card, player) {\r\n                        if (player.getStorage('haosun').includes(get.name(card)))\r\n                            return false;\r\n                    }\r\n                },\r\n                mark: true,\r\n                intro: {\r\n                    content: '已禁用的基本牌：$',\r\n                },\r\n                subSkill: {\r\n                    drop: {\r\n                        trigger: {\r\n                            player: 'drawBegin'\r\n                        },\r\n                        forced: true,\r\n                        firstDo: true,\r\n                        content() {\r\n                            trigger.num--;\r\n                        },\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '摸牌量-1',\r\n                        },\r\n                        ai: {\r\n                            effect: {\r\n                                target(card, player, target) {\r\n                                    if (get.tag(card, 'draw'))\r\n                                        return 0;\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    plus: {\r\n                        trigger: {\r\n                            player: 'drawBegin'\r\n                        },\r\n                        forced: true,\r\n                        firstDo: true,\r\n                        content() {\r\n                            trigger.num++;\r\n                        },\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '摸牌量+1',\r\n                        },\r\n                        ai: {\r\n                            effect: {\r\n                                target(card, player, target) {\r\n                                    if (get.tag(card, 'draw'))\r\n                                        return [1, 1];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            banmao: {\r\n                audio: 2,\r\n                trigger: {\r\n                    player: 'damageEnd', source: 'damageEnd'\r\n                },\r\n                filter(Evt, player) {\r\n                    return Evt.source && Evt.card && get.name(Evt.card) == 'sha';\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    trigger.source.draw();\r\n                },\r\n                mod: {\r\n                    cardEnabled(card, player) {\r\n                        if (['shan', 'jiu'].includes(get.name(card)) && player.isHealthy() && player.$.banmao !== true)\r\n                            return false;\r\n                    },\r\n                    cardSavable(card, player) {\r\n                        if (['shan', 'jiu'].includes(get.name(card)) && player.isHealthy() && player.$.banmao !== true)\r\n                            return false;\r\n                    }\r\n                },\r\n                derivation: 'banmao_rewrite',\r\n            },\r\n            exiao: {\r\n                trigger: { player: 'useCard' },\r\n                frequent: true,\r\n                filter(Evt) {\r\n                    return get.type(Evt.card) == 'trick';\r\n                },\r\n                content: [() => {\r\n                        player.judge(card => {\r\n                            if (get.color(card) == 'black')\r\n                                return 4;\r\n                            return -1;\r\n                        });\r\n                    }, () => {\r\n                        if (result.judge > 0) {\r\n                            trigger.nowuxie = true;\r\n                            game.delayx();\r\n                            if (get.position(result.card) == 'd')\r\n                                player.gain(result.card, 'gain2', 'log');\r\n                        }\r\n                    }],\r\n            },\r\n            jinmei: {\r\n                audio: 2,\r\n                trigger: { global: 'phaseBegin' },\r\n                round: 1,\r\n                priority: 996,\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && player.countCards('he', { color: 'black' });\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        Evt.target = trigger.player;\r\n                        let goon = get.$a(player, Evt.target) < 0 && !Evt.target.hasJudge('lebu') && !Evt.target.hasJudge('bingliang');\r\n                        let next = player.chooseCard(get.$pro2('jinmei'), 'he', { color: 'black' }).set('goon', goon).set('ai', card => {\r\n                            if (!goon)\r\n                                return 0;\r\n                            return 5 - get.value(card);\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.logSkill('jinmei', Evt.target);\r\n                            Evt.target.gain(result.cards, player, 'giveAuto');\r\n                            Evt.target.addTempSkill('jinmei_drop');\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    expose: 0.1,\r\n                },\r\n                subSkill: {\r\n                    drop: {\r\n                        trigger: {\r\n                            player: 'drawBegin'\r\n                        },\r\n                        forced: true,\r\n                        firstDo: true,\r\n                        content() {\r\n                            trigger.num--;\r\n                        },\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '摸牌量-1',\r\n                        },\r\n                        ai: {\r\n                            effect: {\r\n                                target(card, player, target) {\r\n                                    if (get.tag(card, 'draw'))\r\n                                        return 0;\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            zhexun: {\r\n                group: 'zhexun0',\r\n                audio: 3,\r\n            },\r\n            zhexun0: {\r\n                trigger: { player: 'useCard2' },\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    let card = Evt.card;\r\n                    let info = get.info(card);\r\n                    if (info.allowMultiple == false)\r\n                        return false;\r\n                    let history = player.getHistory('useCard', evt => get.color(Evt.card) == get.color(evt.card)).length;\r\n                    return history > 1 && history == player.getHistory('useCard').length;\r\n                },\r\n                content: [() => {\r\n                        trigger.directHit.addArray(game.players);\r\n                    }, () => {\r\n                        if (get.type2(trigger.card) != 'equip') {\r\n                            let prompt2 = `为${get.$t(trigger.card)}额外指定一个目标`;\r\n                            player.chooseTarget(get.$pro(Evt.name), function (card, player, target) {\r\n                                if (_status.event.targets.includes(target))\r\n                                    return false;\r\n                                return lib.filter.targetEnabled2(_status.event.card, player, target) && lib.filter.targetInRange(_status.event.card, player, target);\r\n                            }).set('prompt2', prompt2).set('ai', function (target) {\r\n                                let player = _status.event.player;\r\n                                return get.effect(target, _status.event.card, player, player);\r\n                            }).set('targets', trigger.targets).set('card', trigger.card);\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            player.line(result.targets);\r\n                            game.log(result.targets, '成为了', trigger.card, '的额外目标');\r\n                            trigger.targets.addArray(result.targets);\r\n                        }\r\n                    }],\r\n            },\r\n            yuci: {\r\n                audio: 2,\r\n                trigger: {\r\n                    player: 'drawBegin'\r\n                },\r\n                forced: true,\r\n                firstDo: true,\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('yuci_used'))\r\n                        return false;\r\n                    let another = player.next;\r\n                    let sex = false;\r\n                    while (another != player) {\r\n                        if (sex != false && another.sex != sex)\r\n                            return false;\r\n                        sex = another.sex;\r\n                        another = another.next;\r\n                    }\r\n                    return true;\r\n                },\r\n                content() {\r\n                    trigger.num++;\r\n                    player.addTempSkill('yuci_used', 'phaseNext');\r\n                },\r\n                subSkill: {\r\n                    used: {}\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target) {\r\n                            if (get.tag(card, 'draw') && !target.hasSkill('yuci_used'))\r\n                                return [1, 1];\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            kuangbiao: {\r\n                intro: {\r\n                    mark(dialog, storage, player) {\r\n                        if (player.countCards('s', card => card.hasGaintag('kuangbiao')))\r\n                            dialog.addAuto(player.getCards('s', card => card.hasGaintag('kuangbiao')));\r\n                    },\r\n                    markcount(storage, player) {\r\n                        return player.countCards('s', card => card.hasGaintag('kuangbiao'));\r\n                    },\r\n                    onunmark(storage, player) {\r\n                        let cards = player.getCards('s', card => card.hasGaintag('kuangbiao'));\r\n                        if (cards.length) {\r\n                            player.lose(cards, ui.discardPile);\r\n                            player.$throw(cards, 1000);\r\n                            game.log(cards, '进入了弃牌堆');\r\n                        }\r\n                    },\r\n                },\r\n                cardAround(player) {\r\n                    return player.getCards('s', card => card.hasGaintag('kuangbiao'));\r\n                },\r\n                trigger: { player: 'useCardAfter' },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return get.suit(Evt.card) == 'heart' && player.hasHistory('lose', evt => {\r\n                        if (evt.getParent() != Evt)\r\n                            return false;\r\n                        if (JSON.stringify(evt.hs) == JSON.stringify(Evt.cards))\r\n                            return true;\r\n                        return false;\r\n                    });\r\n                },\r\n                content: [() => {\r\n                        if (player.hp != 1)\r\n                            player.loseHp();\r\n                    }, () => {\r\n                        player.directgains(trigger.cards, null, 'kuangbiao');\r\n                        player.markSkill('kuangbiao');\r\n                    }],\r\n                mod: {\r\n                    cardname(card, player, name) {\r\n                        if (get.suit(card) == 'heart' && get.position(card) == 'h')\r\n                            return 'wuzhong';\r\n                    },\r\n                    cardEnabled2(cardx, player) {\r\n                        if (player.countCards('s', card => card.hasGaintag('kuangbiao'))) {\r\n                            if (get.position(cardx) == 's' && cardx.hasGaintag('kuangbiao') && !player.isDamaged())\r\n                                return false;\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        player(card, player, target) {\r\n                            if (get.suit(card) == 'heart' && get.position(card) == 'h') {\r\n                                if (player.hp == 1)\r\n                                    return [1, 0.1, 1, 0];\r\n                                return [1, (player.hp - 3) * 2, 1, 0];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            leizhu: {\r\n                trigger: { player: 'useCard2' },\r\n                filter(Evt, player) {\r\n                    return get.type2(Evt.card) == 'trick';\r\n                },\r\n                direct: true,\r\n                intro: {\r\n                    name2: 'R18',\r\n                    content: 'mark',\r\n                },\r\n                content: [() => {\r\n                        player.addMark('leizhu', 1, false);\r\n                        if (player.countMark('leizhu') == 3) {\r\n                            player.removeMark('leizhu', 3, false);\r\n                            let card = trigger.card;\r\n                            let info = get.info(card);\r\n                            if (info.allowMultiple == false || !trigger.targets\r\n                                || !game.hasPlayer(cur => !trigger.targets.includes(cur) && lib.filter.targetEnabled2(card, player, cur)))\r\n                                Evt.finish();\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        let prompt2 = `为${get.$t(trigger.card)}增加一个目标`;\r\n                        player.chooseTarget(get.$pro(Evt.name), function (card, player, target) {\r\n                            if (_status.event.targets.includes(target))\r\n                                return false;\r\n                            return lib.filter.targetEnabled2(_status.event.card, player, target) && lib.filter.targetInRange(_status.event.card, player, target);\r\n                        }).set('prompt2', prompt2).set('ai', function (target) {\r\n                            let trigger = _status.event.getTrigger();\r\n                            let player = _status.event.player;\r\n                            if (player.hp == 1)\r\n                                return false;\r\n                            return get.effect(target, trigger.card, player, player) + get.damageEffect(target, player, player);\r\n                        }).set('targets', trigger.targets).set('card', trigger.card);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            if (!Evt.isMine() && !Evt.isOnline())\r\n                                game.delayx();\r\n                            Evt.targets = result.targets;\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.targets) {\r\n                            player.logSkill('leizhu', Evt.targets);\r\n                            trigger.targets.addArray(Evt.targets);\r\n                            player.damage();\r\n                            Evt.targets[0].damage();\r\n                        }\r\n                    }],\r\n            },\r\n            tonggan: {\r\n                unique: true,\r\n                trigger: {\r\n                    global: 'drawBegin'\r\n                },\r\n                zhuSkill: true,\r\n                forced: true,\r\n                firstDo: true,\r\n                filter(Evt, player) {\r\n                    if (!player.hasZhuSkill('tonggan'))\r\n                        return false;\r\n                    if (player.hasSkill('tonggan_used'))\r\n                        return false;\r\n                    return Evt.player.group && Evt.player.group == player.group;\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    Evt.target = trigger.player;\r\n                    Evt.target.addTempSkill('tonggan_used', 'phaseNext');\r\n                    if (game.roundNumber % 2 == 1)\r\n                        return trigger.num--;\r\n                    if (game.roundNumber % 2 != 1)\r\n                        return trigger.num++;\r\n                },\r\n                subSkill: {\r\n                    used: {}\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target) {\r\n                            if (get.tag(card, 'draw') && !target.hasSkill('tonggan_used')) {\r\n                                if (game.roundNumber % 2 == 1)\r\n                                    return [0.2, 0];\r\n                                if (game.roundNumber % 2 != 1)\r\n                                    return [1, 2];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            yingling: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return !player.hasSkill('yingling_used');\r\n                },\r\n                content() {\r\n                    player.addTempSkill('yingling_used', 'phaseNext');\r\n                    player.judge(card => {\r\n                        if (get.color(card) === 'red')\r\n                            return 1;\r\n                        return 0;\r\n                    }).callback = lib.skill.yingling.callback;\r\n                },\r\n                callback() {\r\n                    let evt = _status.event.getParent('yingling');\r\n                    if (Evt.judgeResult.color == 'red') {\r\n                        evt.getTrigger().num++;\r\n                    }\r\n                },\r\n                subSkill: { used: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('mark') },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target) {\r\n                            if (get.tag(card, 'draw') && !target.hasSkill('yingling_used'))\r\n                                return [1, 0.5];\r\n                        }\r\n                    }\r\n                }\r\n            }, 'forced', 'firstDo').setT('drawBegin'),\r\n            duchun: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return get.position(Evt.result.card, true) == 'o';\r\n                },\r\n                content: [() => {\r\n                        Evt.card = trigger.result.card;\r\n                        player.chooseTarget(get.$pro2('duchun'), function (card, player, target) {\r\n                            return true;\r\n                        }).set('ai', target => {\r\n                            let { player, card } = _status.event.getParent();\r\n                            return get.$a(player, target) * (get.value(card, 'raw', target) + (target.$.duchun_drop > 1 ? 1 : -2));\r\n                        });\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('duchun', Evt.target);\r\n                            Evt.target.gain(Evt.card, 'gain2');\r\n                            if (!Evt.target.$.duchun_drop) {\r\n                                Evt.target.$.duchun_drop = 1;\r\n                                Evt.target.addSkill('duchun_drop');\r\n                            }\r\n                            else {\r\n                                Evt.target.$.duchun_drop++;\r\n                                Evt.target.markSkill('duchun_drop');\r\n                            }\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    drop: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('mark', {\r\n                        content() {\r\n                            trigger.num -= player.$.duchun_drop;\r\n                            player.removeSkill('duchun_drop');\r\n                        },\r\n                        intro: {\r\n                            content: '摸牌量-#',\r\n                        },\r\n                        ai: {\r\n                            effect: {\r\n                                target(card, player, target) {\r\n                                    if (get.tag(card, 'draw'))\r\n                                        return 0;\r\n                                }\r\n                            }\r\n                        }\r\n                    }, 'mark', 'onremove', 'forced', 'firstDo').setT('drawBefore'),\r\n                }\r\n            }, 'direct').setT('judgeEnd'),\r\n            jiace: {\r\n                trigger: { target: 'useCardToTarget' },\r\n                filter(Evt, player) {\r\n                    if (!Evt.targets || !Evt.targets.includes(player))\r\n                        return false;\r\n                    if (Evt.player == player)\r\n                        return false;\r\n                    let info = get.info(Evt.card);\r\n                    if (info.allowMultiple == false || info.multitarget)\r\n                        return false;\r\n                    if (get.color(Evt.card) != 'black')\r\n                        return false;\r\n                    if (Evt.targets.length >= 1)\r\n                        return true;\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        Evt.target = trigger.player;\r\n                        player.chooseCard('h', get.$pro2('jiace'), { suit: get.suit(trigger.card) }).ai = get.unuseful2;\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.logSkill('jiace', Evt.target);\r\n                            player.give(result.cards, Evt.target, true);\r\n                            if (!player.hasSkill('jiace_used')) {\r\n                                if (!trigger.getParent().addedSkill)\r\n                                    trigger.getParent().addedSkill = [];\r\n                                trigger.getParent().addedSkill.add('jiace');\r\n                            }\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        player.addTempSkill('jiace_used');\r\n                        let prompt2 = `为${get.$t(trigger.card)}增加或减少一个目标`;\r\n                        player.chooseTarget(get.$pro('jiace'), (card, player, target) => {\r\n                            let source = _status.event.source;\r\n                            if (_status.event.targets.includes(target))\r\n                                return true;\r\n                            return lib.filter.targetEnabled2(_status.event.card, source, target) && lib.filter.targetInRange(_status.event.card, source, target);\r\n                        }).set('prompt2', prompt2).set('ai', target => {\r\n                            let player = _status.event.player, source = _status.event.source;\r\n                            return get.effect(target, _status.event.card, source, player) * (_status.event.targets.includes(target) ? -1 : 1);\r\n                        }).set('targets', trigger.targets).set('card', trigger.card).set('source', Evt.target);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            if (!Evt.isMine() && !Evt.isOnline())\r\n                                game.delayx();\r\n                            Evt.targets = result.targets;\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.targets) {\r\n                            player.logSkill('jiace', Evt.targets);\r\n                            if (trigger.targets.includes(Evt.targets[0]))\r\n                                trigger.targets.removeArray(Evt.targets);\r\n                            else\r\n                                trigger.targets.addArray(Evt.targets);\r\n                        }\r\n                    }],\r\n                group: ['jiace_gainBy'],\r\n                subSkill: {\r\n                    used: {},\r\n                    gainBy: {\r\n                        trigger: { global: 'useCardAfter' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            let cards = Evt.cards.filterInD();\r\n                            return cards.length && Evt.addedSkill && Evt.addedSkill.includes('jiace');\r\n                        },\r\n                        content() {\r\n                            let cards = trigger.cards.filterInD();\r\n                            player.gain(cards, 'gain2');\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            xiangying: {\r\n                enable: 'phaseUse',\r\n                position: 'h',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h', { color: 'red' });\r\n                },\r\n                filterCard(card, player) {\r\n                    return get.color(card) == 'red';\r\n                },\r\n                selectCard: [1, Infinity],\r\n                filterTarget(card, player, target) {\r\n                    return target.countCards('h') < player.countCards('h');\r\n                },\r\n                discard: false,\r\n                prepare: 'give2',\r\n                content: [() => {\r\n                        target.gain(cards, player);\r\n                    }, () => {\r\n                        if (target.countCards('h') > player.countCards('h')) {\r\n                            target.showHandcards();\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        let num = Math.abs(target.countCards('h', { color: 'red' }) - target.countCards('h', { color: 'black' }));\r\n                        player.draw(num);\r\n                    }],\r\n                ai: {\r\n                    order: 10,\r\n                    result: {\r\n                        player(player, target) {\r\n                            let num = ui.selected.cards.length * 2 + target.countCards('h');\r\n                            if (num <= player.countCards('h'))\r\n                                return -1;\r\n                            return Math.abs(num + target.countCards('h', { color: 'red' }) - target.countCards('h', { color: 'black' }));\r\n                        },\r\n                        target(player, target) {\r\n                            if (target.hasSkillTag('nogain'))\r\n                                return 0;\r\n                            return ui.selected.cards.length;\r\n                        }\r\n                    },\r\n                    threaten: 0.6\r\n                }\r\n            },\r\n            shengquan: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return player.countCards('h');\r\n                },\r\n                content: [() => {\r\n                        player.chooseToDiscard([2, Infinity], 'h', get.$pro2('shengquan')).set('complexCard', true).set('filterCard', (card, player) => {\r\n                            if (ui.selected.cards.length)\r\n                                return get.color(card) == get.color(ui.selected.cards[0]);\r\n                            return player.countCards('hes', { color: get.color(card) }) >= 2;\r\n                        }).set('ai', function (card) { return get.unuseful3(card); });\r\n                    }, () => {\r\n                        if (result.bool && result.cards.length) {\r\n                            player.logSkill('shengquan', player);\r\n                            Evt.num = result.cards.length - 1;\r\n                            player.recover(Evt.num);\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    maixie: true,\r\n                    skillTagFilter(player) {\r\n                        return player.countCards('h') > 1;\r\n                    },\r\n                }\r\n            }, 'direct').setT('damageAfter'),\r\n            yizhu: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('active', {\r\n                position: 'h',\r\n                filterTarget(card, player, target) {\r\n                    return target.countCards('h') >= 2 && target !== player;\r\n                },\r\n                content: [() => {\r\n                        player.loseHp();\r\n                    }, () => {\r\n                        player.gainPlayerCard(target, 'h', 2);\r\n                    }, () => {\r\n                        player.$.yizhu_giveBy = target;\r\n                        player.addTempSkill('yizhu_giveBy', 'yizhuBefore');\r\n                    }],\r\n                ai: {\r\n                    order: 10,\r\n                    result: {\r\n                        player(player, target) {\r\n                            if (player.hp === 1)\r\n                                return 0;\r\n                            if (player.$.yizhu === target && get.$a(player, target) > 0)\r\n                                return -1;\r\n                            return player.hp - 2;\r\n                        },\r\n                        target(player, target) {\r\n                            if (player.hp === 1)\r\n                                return 0;\r\n                            if (player.$.yizhu === target)\r\n                                return -1;\r\n                            return 2;\r\n                        }\r\n                    },\r\n                    threaten: 0.6\r\n                },\r\n            }).set('usable', 1, 'subSkill', {\r\n                giveBy: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                    filter(Evt, player) {\r\n                        var _a;\r\n                        return ((_a = player.$.yizhu_giveBy) === null || _a === void 0 ? void 0 : _a.isIn()) && (Evt.cards2 || Evt.cards).filterInD('d').length;\r\n                    },\r\n                    logTarget(Evt, player) {\r\n                        return player.$.yizhu_giveBy;\r\n                    },\r\n                    content() {\r\n                        Evt.tar = player.$.yizhu_giveBy;\r\n                        Evt.cards = (trigger.cards2 || trigger.cards).filterInD('d');\r\n                        Evt.tar.gain(Evt.cards, 'gain2');\r\n                    },\r\n                    mark: 'character',\r\n                    intro: {\r\n                        name: '译注',\r\n                        content: '令$获得自己的弃牌',\r\n                    },\r\n                }, 'direct', 'locked', 'onremove').setT('discardEnd')\r\n            }),\r\n            chengzhang: {\r\n                audio: 3,\r\n                trigger: {\r\n                    player: 'loseAfter',\r\n                    global: ['gainAfter', 'equipAfter', 'addJudgeAfter', 'loseAsyncAfter'],\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    return target != player && target.isIn() && target.hasUseTarget(card);\r\n                },\r\n                filter(Evt, player) {\r\n                    var _a;\r\n                    let evt = Evt.getl(player);\r\n                    return ((_a = evt === null || evt === void 0 ? void 0 : evt.es) === null || _a === void 0 ? void 0 : _a.filter(card => get.position(card, true) == 'd'\r\n                        && game.hasPlayer(target => lib.skill.chengzhang.filterTarget)).length) > 0;\r\n                },\r\n                frequent: true,\r\n                content: [() => {\r\n                        Evt.cards = trigger.getl(player).es.filter(card => {\r\n                            return get.position(card, true) == 'd' && game.hasPlayer(target => lib.skill.chengzhang.filterTarget(card, player, target));\r\n                        });\r\n                        Evt.count = Evt.cards.length;\r\n                    }, () => {\r\n                        Evt.count--;\r\n                        player.chooseTarget(function (card, player, target) {\r\n                            return target != player && target.isIn() && target.hasUseTarget(_status.event.cardx);\r\n                        }, '选择一名角色使用' + get.$t(Evt.cards[Evt.count])).set('ai', (target) => get.$a(_status.event.player, target) * get.value(_status.event.cardx, target)).set('cardx', Evt.cards[Evt.count]);\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            let target = result.targets[0];\r\n                            player.line(target, 'green');\r\n                            if (target.hasUseTarget(Evt.cards[Evt.count]))\r\n                                target.chooseUseTarget(Evt.cards[Evt.count], true);\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.count)\r\n                            Evt.goto(1);\r\n                    }],\r\n            },\r\n            mengdong: {\r\n                audio: 3,\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = [];\r\n                },\r\n                trigger: { player: 'useCardToPlayered' },\r\n                check: () => true,\r\n                filter(Evt, player) {\r\n                    return !player.getStorage('mengdong').includes(Evt.target) && Evt.target.countCards('e') % 2 == 1;\r\n                },\r\n                frequent: true,\r\n                logTarget: 'target',\r\n                content() {\r\n                    player.$.mengdong.add(trigger.target);\r\n                    player.markSkill('mengdong');\r\n                    player.draw();\r\n                },\r\n                group: 'mengdong_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { global: 'phaseAfter' },\r\n                        priority: 23,\r\n                        filter(Evt, player) {\r\n                            return player.$.mengdong && player.$.mengdong.length;\r\n                        },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            player.$.mengdong.length = 0;\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    result: {\r\n                        player: 1,\r\n                    },\r\n                    effect: {\r\n                        player(card, player, target, current) {\r\n                            if (target && !player.getStorage('mengdong').includes(target) && target.countCards('e') % 2 == 1)\r\n                                return [1, 1];\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            moemanyi: {\r\n                locked: true,\r\n                mod: {\r\n                    targetEnabled(card, player, target, now) {\r\n                        if (get.type(card) == 'delay') {\r\n                            for (let i = 0; i < game.players.length; i++) {\r\n                                if (!(game.players[i].isOut() || game.players[i] == player)) {\r\n                                    if (game.players[i].getAttackRange() < player.getAttackRange())\r\n                                        return now;\r\n                                }\r\n                                return false;\r\n                            }\r\n                        }\r\n                        if (get.name(card) == 'sha' && get.color(card) == 'black') {\r\n                            for (let i = 0; i < game.players.length; i++) {\r\n                                if (!(game.players[i].isOut() || game.players[i] == player)) {\r\n                                    if (game.players[i].getAttackRange() > player.getAttackRange())\r\n                                        return now;\r\n                                }\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            cuchuan: {\r\n                trigger: { player: 'phaseDrawBegin1' },\r\n                filter(Evt, player) {\r\n                    return !Evt.numFixed && game.hasPlayer(cur => player != cur && get.$dis(player, cur) <= 1);\r\n                },\r\n                check(Evt, player) {\r\n                    return game.countPlayer(cur => player != cur && get.$dis(player, cur) <= 1) >= 2;\r\n                },\r\n                content: [() => {\r\n                        trigger.changeToZero();\r\n                        Evt.targets = game.filterPlayer(cur => player != cur && get.$dis(player, cur) <= 1);\r\n                    }, () => {\r\n                        game.asyncDraw(Evt.targets);\r\n                        game.delayx();\r\n                        Evt.num = 0;\r\n                    }, () => {\r\n                        player.gainPlayerCard(Evt.targets[Evt.num], 'he', true);\r\n                        Evt.num++;\r\n                    }, () => {\r\n                        if (Evt.targets[Evt.num])\r\n                            Evt.goto(2);\r\n                    }],\r\n            },\r\n            huoju: {\r\n                trigger: { global: 'damageBegin' },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    if (!Evt.source)\r\n                        return false;\r\n                    if (Evt.source == player || get.$dis(player, Evt.source, 'pure') == 1) {\r\n                        return Evt.nature != 'fire';\r\n                    }\r\n                },\r\n                content() {\r\n                    trigger.nature = 'fire';\r\n                },\r\n                group: 'huoju_turnOverBy',\r\n                subSkill: {\r\n                    turnOverBy: {\r\n                        trigger: { player: 'damageAfter', source: 'damageAfter' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return Evt.nature == 'fire' && Evt.source && Evt.source.isIn()\r\n                                && (Evt.source.isMinHp() || Evt.source.isMinHandcard());\r\n                        },\r\n                        content: [() => {\r\n                                if (trigger.source.isMinHandcard()) {\r\n                                    trigger.source.turnOver();\r\n                                    trigger.source.draw();\r\n                                }\r\n                            }, () => {\r\n                                if (trigger.source.isMinHp()) {\r\n                                    trigger.source.turnOver();\r\n                                    trigger.source.recover();\r\n                                }\r\n                            }],\r\n                    }\r\n                }\r\n            },\r\n            zouyang: {\r\n                trigger: { player: 'useCard2' },\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('zouyang_used'))\r\n                        return false;\r\n                    let card = Evt.card, info = get.info(card);\r\n                    if (info.allowMultiple == false)\r\n                        return false;\r\n                    if (Evt.targets && Evt.targets.length == 1 && !info.multitarget) {\r\n                        if (game.hasPlayer(cur => !Evt.targets.includes(cur) && get.$dis(Evt.targets[0], cur, 'pure') == 1)) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                },\r\n                logTarget(Evt, player) {\r\n                    return game.filterPlayer(cur => !Evt.targets.includes(cur) && get.$dis(Evt.targets[0], cur, 'pure') == 1);\r\n                },\r\n                check(Evt, player) {\r\n                    return game.hasPlayer(cur => !Evt.targets.includes(cur) && get.$dis(Evt.targets[0], cur, 'pure') == 1 && get.effect(cur, Evt.card, player, player) > 0);\r\n                },\r\n                content: [() => {\r\n                        Evt.draws = [];\r\n                        Evt.targets = game.filterPlayer(cur => !trigger.targets.includes(cur) && get.$dis(trigger.targets[0], cur, 'pure') == 1);\r\n                        for (let i of Evt.targets) {\r\n                            if (lib.filter.targetEnabled2(trigger.card, player, i)) {\r\n                                if (Evt._zouyang_tmp && Evt._zouyang_tmp != 'target')\r\n                                    Evt._zouyang_tmp = 'goon';\r\n                                else\r\n                                    Evt._zouyang_tmp = 'target';\r\n                            }\r\n                            else {\r\n                                Evt.draws.add(i);\r\n                                if (Evt._zouyang_tmp && Evt._zouyang_tmp != 'draw')\r\n                                    Evt._zouyang_tmp = 'goon';\r\n                                else\r\n                                    Evt._zouyang_tmp = 'draw';\r\n                            }\r\n                        }\r\n                        Evt.targets.removeArray(Evt.draws);\r\n                    }, () => {\r\n                        if (Evt._zouyang_tmp != 'goon') {\r\n                            player.addTempSkill('zouyang_used');\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.targets.length) {\r\n                            trigger.targets.addArray(Evt.targets);\r\n                        }\r\n                        if (Evt.draws.length) {\r\n                            game.asyncDraw(Evt.draws);\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    used: {\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '不能发动『奏扬』',\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            xiezhen: {\r\n                trigger: { global: 'damageBegin' },\r\n                filter(Evt, player) {\r\n                    return Evt.source != player && get.$dis(Evt.source, player) <= 1 && Evt.source.countDiscardableCards(player, 'he');\r\n                },\r\n                check(Evt, player) {\r\n                    return get.damageEffect(_status.event.player0, player, player) > 0;\r\n                },\r\n                content: [() => {\r\n                        Evt.forced = true;\r\n                        Evt.target = trigger.source;\r\n                        player.turnOver();\r\n                    }, () => {\r\n                        player.discardPlayerCard('he', Evt.target, Evt.forced, `『谐振』：弃置${get.$t(Evt.target)}的一张牌`).set('ai', (button) => {\r\n                            let player = _status.event.player;\r\n                            let num = 10;\r\n                            if (get.position(button.link) == 'e') {\r\n                                if (get.damageEffect(_status.event.player0, player, player) > 0)\r\n                                    num += 6;\r\n                                if (get.damageEffect(_status.event.player0, player, player) < 0)\r\n                                    num -= 6;\r\n                            }\r\n                            return num - get.value(button.link) * _status.event.att;\r\n                        }).set('logSkill', ['rejianchu', Evt.target]).set('player0', trigger.player).set('att', get.$a(player, Evt.target) / 2);\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            if (get.type(result.links[0], null, result.links[0].original == 'h' ? Evt.target : false) == 'equip') {\r\n                                Evt.forced = false;\r\n                                trigger.num++;\r\n                                game.delayx();\r\n                                if (Evt.target.countDiscardableCards(player, 'he'))\r\n                                    Evt.goto(1);\r\n                            }\r\n                        }\r\n                    }],\r\n            },\r\n            wenzhou: {\r\n                trigger: { player: 'damageEnd', global: 'turnOverEnd' },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'damage')\r\n                        return Evt.num > 1 && Evt.source && Evt.source.isIn();\r\n                    return !Evt.player.isTurnedOver();\r\n                },\r\n                logTarget(Evt, player) {\r\n                    if (Evt.name == 'damage')\r\n                        return Evt.source;\r\n                    return Evt.player;\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    if (trigger.name == 'damage')\r\n                        trigger.source.turnOver();\r\n                    else\r\n                        trigger.player.draw();\r\n                },\r\n            },\r\n            miaolu: {\r\n                audio: 3,\r\n                trigger: { global: 'dying' },\r\n                filter(Evt, player) {\r\n                    return Evt.player.hp <= 0 && Evt.player.countCards('h') > 0;\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    \"step 0\";\r\n                    let check;\r\n                    if (trigger.player.isUnderControl(true, player) || get.$a(player, trigger.player) > 0) {\r\n                        check = trigger.player.hasCard(card => {\r\n                            return get.type(card) != 'basic';\r\n                        });\r\n                    }\r\n                    else {\r\n                        check = trigger.player.hasCard(card => {\r\n                            return get.type(card) == 'basic';\r\n                        });\r\n                    }\r\n                    player.discardPlayerCard(trigger.player, get.$pro('miaolu', trigger.player), 'h').set('ai', (button) => {\r\n                        if (!_status.event.check)\r\n                            return 0;\r\n                        if (_status.event.target.isUnderControl(true, _status.event.player) || get.recoverEffect(_status.event.target, _status.event.player, _status.event.player) > 0) {\r\n                            if (get.type(button.link) != 'basic') {\r\n                                return 10 - get.value(button.link);\r\n                            }\r\n                            return 0;\r\n                        }\r\n                        else {\r\n                            return Math.random();\r\n                        }\r\n                    }).set('check', check);\r\n                    \"step 1\";\r\n                    if (result.bool) {\r\n                        player.logSkill('miaolu', trigger.player);\r\n                        Evt.card = result.links[0];\r\n                        player.showCards([Evt.card], `${get.$t(player)}弃置的手牌`);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    \"step 2\";\r\n                    if (get.type(Evt.card) != 'basic') {\r\n                        trigger.player.recover();\r\n                    }\r\n                    else {\r\n                        player.gain(Evt.card, 'gain2', 'log');\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten: 1.4\r\n                }\r\n            },\r\n            benglei: {\r\n                audio: 2,\r\n                trigger: { player: 'damageEnd' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return (Evt.num > 0);\r\n                },\r\n                content: [() => {\r\n                        Evt.count = trigger.num;\r\n                    }, () => {\r\n                        Evt.count--;\r\n                        player.chooseTarget(get.$pro2('benglei')).set('ai', (target) => {\r\n                            let player = _status.event.player;\r\n                            return get.damageEffect(target, player, player);\r\n                        });\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            player.logSkill('benglei', result.targets);\r\n                            Evt.target = result.targets[0];\r\n                            Evt.target.judge(card => {\r\n                                if (get.suit(card) == 'spade')\r\n                                    return -3;\r\n                                if (get.suit(card) == 'club')\r\n                                    return -2;\r\n                                return 0;\r\n                            }).callback = lib.skill.benglei.callback;\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (Evt.discardBy === true) {\r\n                            if (Evt.target.countDiscardableCards(player, 'he')) {\r\n                                player.line(Evt.target);\r\n                                player.discardPlayerCard('he', Evt.target, true);\r\n                            }\r\n                            if (Evt.redoBy) {\r\n                                delete Evt.redoBy;\r\n                            }\r\n                            else if (Evt.discardBy) {\r\n                                delete Evt.discardBy;\r\n                            }\r\n                            Evt.redo();\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.count > 0)\r\n                            Evt.goto(1);\r\n                    }],\r\n                callback: [() => {\r\n                        let evt = _status.event.getParent('benglei');\r\n                        Evt.Nyaru = evt.player;\r\n                        if (Evt.judgeResult.suit == 'spade') {\r\n                            let evt = _status.event.getParent('damage');\r\n                            if ((evt === null || evt === void 0 ? void 0 : evt.name) == 'damage' && evt.num) {\r\n                                player.damage(evt.num, 'thunder', Evt.Nyaru);\r\n                            }\r\n                        }\r\n                        else if (Evt.judgeResult.suit == 'club') {\r\n                            evt.discardBy = true;\r\n                            evt.redoBy = true;\r\n                        }\r\n                        else if (Evt.judgeResult.color == 'red') {\r\n                            Evt.goto(2);\r\n                        }\r\n                    }, () => {\r\n                        game.delay(2);\r\n                        Evt.finish();\r\n                    }, () => {\r\n                        Evt.Nyaru.discardPlayerCard(player, get.$pro('miaolu', player), 'h').set('ai', (button) => {\r\n                            if (_status.event.target.isUnderControl(true, _status.event.player) || get.recoverEffect(_status.event.target, _status.event.player, _status.event.player) > 0) {\r\n                                if (get.type(button.link) != 'basic') {\r\n                                    return 10 - get.value(button.link);\r\n                                }\r\n                                return 0;\r\n                            }\r\n                            else {\r\n                                return Math.random();\r\n                            }\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.Nyaru.logSkill('miaolu', player);\r\n                            Evt.card = result.links[0];\r\n                            Evt.Nyaru.showCards([Evt.card], `${get.$t(Evt.Nyaru)}弃置的手牌`);\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (get.type(Evt.card) != 'basic') {\r\n                            player.recover();\r\n                        }\r\n                        else {\r\n                            Evt.Nyaru.gain(Evt.card, 'gain2', 'log');\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    maixie_defend: true,\r\n                    effect: {\r\n                        target(card, player, target) {\r\n                            if (player.countCards('he') > 1 && get.tag(card, 'damage')) {\r\n                                if (player.hasSkillTag('jueqing', false, target))\r\n                                    return [1, -1.5];\r\n                                if (get.$a(target, player) < 0)\r\n                                    return [1, 1];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            xuanquan: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countDisabled() < 5;\r\n                },\r\n                chooseButton: {\r\n                    dialog(Evt, player) {\r\n                        return ui.create.dialog('###『选权』###' + lib.translate.xuanquan_info);\r\n                    },\r\n                    chooseControl(Evt, player) {\r\n                        let list = [];\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (!player.isDisabled(i))\r\n                                list.push('equip' + i);\r\n                        }\r\n                        list.push('cancel2');\r\n                        return list;\r\n                    },\r\n                    check(Evt, player) {\r\n                        for (let i = 5; i > 0; i--) {\r\n                            if (player.isEmpty(i))\r\n                                return ('equip' + i);\r\n                        }\r\n                        return 'cancel2';\r\n                    },\r\n                    backup(result) {\r\n                        let next = get.copy(lib.skill.xuanquanx);\r\n                        next.position = result.control;\r\n                        return next;\r\n                    },\r\n                },\r\n                group: ['xuanquan_record'],\r\n                subSkill: {\r\n                    record: {\r\n                        trigger: { global: 'disableEquipAfter' },\r\n                        filter(Evt, player) {\r\n                            return Evt.player != player;\r\n                        },\r\n                        forced: true,\r\n                        content() {\r\n                            player.draw();\r\n                        },\r\n                    },\r\n                },\r\n                ai: {\r\n                    order: 1,\r\n                    result: {\r\n                        player(player) {\r\n                            if (game.hasPlayer(target => {\r\n                                if (player == target)\r\n                                    return false;\r\n                                let hs = target.countCards('he');\r\n                                return hs > 2 && get.$a(player, target) >= 0;\r\n                            }))\r\n                                return 1;\r\n                            return 0;\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            xuanquanx: {\r\n                content: [() => {\r\n                        player.disableEquip(lib.skill.xuanquan_backup.position);\r\n                    }, () => {\r\n                        if (player.isAlive() && game.hasPlayer(cur => cur != player && cur.countCards('he'))) {\r\n                            player.chooseTarget(true, '获得一名角色的一张牌并令其获得技能『选权』', function (card, player, target) {\r\n                                if (player == target)\r\n                                    return false;\r\n                                return target.countGainableCards(player, 'he') > 0;\r\n                            }).set('ai', target => get.$a(_status.event.player, target) * (target.countCards('he') - 2));\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            let target = result.targets[0];\r\n                            Evt.target = target;\r\n                            player.line(target);\r\n                            player.gainPlayerCard(target, 'he', true);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            target = Evt.target;\r\n                            target.addSkill('xuanquan');\r\n                        }\r\n                    }],\r\n            },\r\n            rusu: {\r\n                trigger: {\r\n                    player: ['loseAfter'],\r\n                    global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter'],\r\n                },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    var _a, _b;\r\n                    let evt = Evt.getl(player);\r\n                    return (((_a = evt === null || evt === void 0 ? void 0 : evt.es) === null || _a === void 0 ? void 0 : _a.length) && player.countCards('he', { type: 'equip' }))\r\n                        || (((_b = evt === null || evt === void 0 ? void 0 : evt.js) === null || _b === void 0 ? void 0 : _b.length) && player.countCards('he', { type: ['trick', 'delay'] }));\r\n                },\r\n                content: [() => {\r\n                        var _a;\r\n                        {\r\n                            let evt = trigger.getl(player);\r\n                            if (((_a = evt === null || evt === void 0 ? void 0 : evt.js) === null || _a === void 0 ? void 0 : _a.length) && player.countCards('he', { type: ['trick', 'delay'] })) {\r\n                                player.chooseCardTarget({\r\n                                    filterCard: { type: ['trick', 'delay'] },\r\n                                    position: 'he',\r\n                                    filterTarget(card, player, target) {\r\n                                        return target.canAddToJudge(card);\r\n                                    },\r\n                                    ai1(card) {\r\n                                        return 7 - get.value(card);\r\n                                    },\r\n                                    ai2(target) {\r\n                                        return 1 - get.$a(_status.event.player, target);\r\n                                    },\r\n                                    prompt: `###${get.$pro('rusu')}###将一张锦囊牌置于选择目标的判定区`\r\n                                });\r\n                            }\r\n                        }\r\n                    }, () => {\r\n                        var _a, _b;\r\n                        if (result.bool && ((_a = result.cards) === null || _a === void 0 ? void 0 : _a.length) && ((_b = result.targets) === null || _b === void 0 ? void 0 : _b.length)) {\r\n                            player.logSkill('rusu', result.targets);\r\n                            let thisTarget = result.targets[0];\r\n                            let thisCard = result.cards[0];\r\n                            thisTarget.addToJudge(thisCard, player);\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        let evt = trigger.getl(player);\r\n                        if (((_a = evt === null || evt === void 0 ? void 0 : evt.es) === null || _a === void 0 ? void 0 : _a.length) && player.countCards('he', { type: 'equip' })) {\r\n                            player.chooseCardTarget({\r\n                                filterCard: { type: 'equip' },\r\n                                position: 'he',\r\n                                filterTarget(card, player, target) {\r\n                                    return target.isEmpty(get.subtype(card));\r\n                                },\r\n                                ai1(card) {\r\n                                    return 6 - get.value(card);\r\n                                },\r\n                                ai2(target) {\r\n                                    return get.$a(_status.event.player, target) - 3;\r\n                                },\r\n                                prompt: `###${get.$pro('rusu')}###将一张装备牌置于选择目标的装备区`\r\n                            });\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        var _a, _b;\r\n                        if (result.bool && ((_a = result.cards) === null || _a === void 0 ? void 0 : _a.length) && ((_b = result.targets) === null || _b === void 0 ? void 0 : _b.length)) {\r\n                            player.logSkill('rusu', result.targets);\r\n                            let thisTarget = result.targets[0];\r\n                            let thisCard = result.cards[0];\r\n                            thisTarget.equip(thisCard);\r\n                            Evt.target = thisTarget;\r\n                            if (thisTarget != player) {\r\n                                player.$give(thisCard, thisTarget, false);\r\n                            }\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (get.type(card) == 'delay' && target.countCards('he', { type: ['trick', 'delay'] }))\r\n                                return [1, 1];\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            beike: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                init(player, skill) {\r\n                    var _a;\r\n                    var _b;\r\n                    (_a = (_b = player.$)[skill]) !== null && _a !== void 0 ? _a : (_b[skill] = get.inpile('trick2'));\r\n                    player.$.beike2 = [];\r\n                },\r\n                filter(Evt, player) {\r\n                    var _a, _b;\r\n                    return get.type2(Evt.card) === 'trick' && !((_b = (_a = player.$) === null || _a === void 0 ? void 0 : _a.beike2) === null || _b === void 0 ? void 0 : _b.contains(get.name(Evt.card)));\r\n                },\r\n                onremove: ['beike', 'beike2'],\r\n                content() {\r\n                    player.$.beike.remove(get.name(trigger.card));\r\n                    player.$.beike2.add(get.name(trigger.card));\r\n                    player.draw();\r\n                    player.markSkill('beike');\r\n                },\r\n                intro: {\r\n                    content: '本局游戏内尚未被使用的锦囊（原始牌堆）：<br>$'\r\n                },\r\n                group: 'beike_addDam',\r\n                subSkill: {\r\n                    addDam: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                        filter(Evt, player) {\r\n                            return player.$.beike.length === 0;\r\n                        },\r\n                        logTarget: 'player',\r\n                        content() {\r\n                            trigger.num++;\r\n                        }\r\n                    }, 'forced').setT({ source: 'damageBegin' }),\r\n                }\r\n            }, 'forced').setT({ global: 'useCard' }),\r\n            wenda: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('regard', {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = true;\r\n                },\r\n                filter(Evt, player) {\r\n                    return (player.$.wenda === true && player.countCards('hs', { type: 'equip' }))\r\n                        || (player.$.wenda === false && player.countCards('hs', { type: 'basic' }));\r\n                },\r\n                hiddenCard(player, name) {\r\n                    if (player.$.wenda === true && player.countCards('hs', { type: 'equip' })) {\r\n                        let list = get.inpile('trick2');\r\n                        for (let i of list) {\r\n                            if (i == name)\r\n                                return true;\r\n                        }\r\n                    }\r\n                    else if (player.$.wenda === false && player.countCards('hs', { type: 'basic' })) {\r\n                        if ('wuxie' === name)\r\n                            return true;\r\n                    }\r\n                },\r\n                chooseButton: {\r\n                    dialog(Evt, player) {\r\n                        let list = player.$.wenda ? get.inpile('trick2') : ['wuxie'];\r\n                        if (list.length == 0) {\r\n                            return ui.create.dialog('『一问一答』已无可用牌');\r\n                        }\r\n                        return ui.create.dialog('『一问一答』', [list, 'vcard']);\r\n                    },\r\n                    filter(button, player) {\r\n                        return _status.event.getParent().filterCard({ name: button.link[2] }, player, _status.event.getParent());\r\n                    },\r\n                    check(button) {\r\n                        let player = _status.event.player;\r\n                        if (button.link[2] == 'wugu')\r\n                            return 0;\r\n                        let effect = player.getUseValue(button.link[2]);\r\n                        if (effect > 0)\r\n                            return effect;\r\n                        return 0;\r\n                    },\r\n                    backup(links, player) {\r\n                        return {\r\n                            filterCard(card) {\r\n                                return player.$.wenda ? get.type(card) === 'equip' : get.type(card) === 'basic';\r\n                            },\r\n                            selectCard: 1,\r\n                            popname: true,\r\n                            check(card) {\r\n                                return 6 - get.value(card);\r\n                            },\r\n                            position: 'hs',\r\n                            viewAs: { name: links[0][2] },\r\n                            onuse(result, player) {\r\n                                player.$.wenda = !player.$.wenda;\r\n                            },\r\n                        };\r\n                    },\r\n                    prompt(links, player) {\r\n                        return `###『一问一答』###将一张【酒】当做【${get.$t(links[0][3]) || ''}${get.$t(links[0][2])}】使用`;\r\n                    }\r\n                },\r\n            }, 'enable:chooseToUse'),\r\n            chenming: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                content: [() => {\r\n                        let list = trigger.stageList || lib.phaseName.slice(0);\r\n                        player.chooseButton([get.$pro2('chenming'), [list, 'vcard'], 'hidden'])\r\n                            .set('filterButton', button => !['phaseDiscard', 'phaseDraw'].includes(button.link[2]))\r\n                            .set('ai', button => button.link[2] === 'phaseJudge' ? 10 : 5);\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            player.logSkill('chenming');\r\n                            let stageList = (trigger.stageList || lib.phaseName).slice(0);\r\n                            stageList.splice(stageList.indexOf(result.links[0][2]), 1, 'phaseDraw');\r\n                            trigger.stageList = stageList;\r\n                            game.delay(1);\r\n                        }\r\n                    }],\r\n            }, 'direct').setT('phaseBegin'),\r\n            xiantong: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return player.countCards('he');\r\n                },\r\n                content: [() => {\r\n                        player.judge();\r\n                    }, () => {\r\n                        if (result.card && result.color) {\r\n                            Evt.card = result.card;\r\n                            player.chooseToDiscard(`弃置颜色为${get.$t(result.color)}或类型为${get.$t(get.type2(Evt.card))}两张牌`, 'he', 2)\r\n                                .set('filterCard', (card, player) => get.color(card) === result.color || get.type2(card) === get.type2(Evt.card))\r\n                                .set('ai', card => get.unuseful2(card));\r\n                        }\r\n                    }, () => {\r\n                        var _a, _b;\r\n                        if ((_a = result.cards) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            trigger.num--;\r\n                            (_b = trigger.addedSkill) !== null && _b !== void 0 ? _b : (trigger.addedSkill = []);\r\n                            trigger.addedSkill.add('xiantong');\r\n                            trigger.addedSkill.add({ 'xiantong': Evt.card });\r\n                        }\r\n                    }],\r\n                group: ['xiantong_gainBy'],\r\n                subSkill: {\r\n                    gainBy: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                        filter(Evt, player) {\r\n                            var _a;\r\n                            return ((_a = Evt.addedSkill) === null || _a === void 0 ? void 0 : _a.includes('xiantong')) && Evt.num > 0;\r\n                        },\r\n                        content() {\r\n                            for (let i of trigger.addedSkill) {\r\n                                if (i instanceof Object && i.xiantong) {\r\n                                    player.gain(i.xiantong, 'gain2', 'log');\r\n                                }\r\n                            }\r\n                        }\r\n                    }, 'forced').setT('damageEnd'),\r\n                }\r\n            }).setT('damageBegin3'),\r\n            jichu: {\r\n                mod: {\r\n                    selectTarget(card, player, range) {\r\n                        if (range[1] == -1)\r\n                            return;\r\n                        let evt = player.getLastUsed();\r\n                        if ((evt === null || evt === void 0 ? void 0 : evt.card) && get.type2(evt.card) == 'trick' && !['delay', 'equip'].includes(get.type(card)))\r\n                            range[1] += 1;\r\n                    },\r\n                    aiOrder(player, card, num) {\r\n                        if (typeof card == 'object' && player.isPhaseUsing()) {\r\n                            let evt = player.getLastUsed();\r\n                            let order = num;\r\n                            if ((evt === null || evt === void 0 ? void 0 : evt.card) && get.type2(evt.card) == 'trick' && !['delay', 'equip'].includes(get.type(card))) {\r\n                                order += 2;\r\n                            }\r\n                            if ((evt === null || evt === void 0 ? void 0 : evt.card) && get.suit(evt.card) == 'diamond') {\r\n                                order += 2;\r\n                            }\r\n                            return order;\r\n                        }\r\n                    },\r\n                },\r\n                trigger: { player: 'useCardAfter' },\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    let evt = player.getLastUsed(1);\r\n                    if (!evt || !evt.card)\r\n                        return false;\r\n                    return get.suit(evt.card) == 'diamond' && !(Evt.result.bool == false || Evt.iswuxied);\r\n                },\r\n                content() {\r\n                    player.draw();\r\n                },\r\n            },\r\n            mingshizhige: {\r\n                trigger: { player: 'damageEnd' },\r\n                filter(Evt, player) {\r\n                    return Evt.num > 0;\r\n                },\r\n                check(Evt, player) {\r\n                    return player.countCards('h', card => {\r\n                        return player.getUseValue(card) > 0;\r\n                    });\r\n                },\r\n                content: [() => {\r\n                        Evt.cards = player.getCards('h');\r\n                        let num = Evt.cards.length;\r\n                        player.lose(Evt.cards, ui.discardPile).set('visible', true);\r\n                        player.$throw(Evt.cards, 1000);\r\n                        game.log(player, '将', Evt.cards, '置入了弃牌堆');\r\n                        player.draw(num);\r\n                        game.delayx();\r\n                    }, () => {\r\n                        player.chooseCardButton(Evt.cards, '是否使用其中的一张？').set('filterButton', function (button) {\r\n                            return _status.event.player.hasUseTarget(button.link);\r\n                        }).set('ai', button => _status.event.player.getUseValue(button.link));\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.chooseUseTarget(true, result.links[0]);\r\n                        }\r\n                    }],\r\n            },\r\n            meihua: {\r\n                trigger: { global: ['loseAfter', 'cardsDiscardAfter'] },\r\n                filter(Evt, player) {\r\n                    if (Evt.type == 'discard')\r\n                        return false;\r\n                    return Evt.cards.filter(card => get.position(card, true) == 'd' && get.suit(card) == 'club').length > 0;\r\n                },\r\n                addDialog(Evt, player) {\r\n                    return Evt.cards.filter(card => get.position(card, true) == 'd' && get.suit(card) == 'club');\r\n                },\r\n                check(Evt, player) {\r\n                    return Evt.cards.filter(card => get.position(card, true) == 'd' && get.suit(card) == 'club' && get.value(card, player) > 3).length;\r\n                },\r\n                round: 1,\r\n                content: [() => {\r\n                        let cards = trigger.cards.filter(card => get.position(card, true) == 'd' && get.suit(card) == 'club');\r\n                        if (cards.length == 1) {\r\n                            Evt.cards = cards;\r\n                        }\r\n                        else {\r\n                            player.chooseCardButton(cards, true).set('ai', (button) => get.value(button.link, _status.event.player) - 3);\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool && result.links) {\r\n                            Evt.cards = result.links.slice(0);\r\n                        }\r\n                        player.gain(Evt.cards, 'gain2', 'log');\r\n                    }],\r\n            },\r\n            shentian: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filterTarget(card, player, target) {\r\n                    return target.countCards('h') > 0;\r\n                },\r\n                content: [() => {\r\n                        player.viewHandcards(target);\r\n                    }, () => {\r\n                        player.judge();\r\n                    }, () => {\r\n                        let suit = result.suit;\r\n                        player.chooseButton([`请选择重铸${get.$t(target)}的手牌`, target.getCards('h')], [1, Infinity]).set('filterButton', function (button) {\r\n                            if (_status.event.suit == get.suit(button.link))\r\n                                return false;\r\n                            for (let i = 0; i < ui.selected.buttons.length; i++) {\r\n                                if (get.suit(ui.selected.buttons[i].link) == get.suit(button.link))\r\n                                    return false;\r\n                            }\r\n                            return true;\r\n                        }).set('suit', suit).set('att', get.$a(player, target)).set('ai', (button) => {\r\n                            if (_status.event.att <= 0)\r\n                                return get.value(button.link) - 4;\r\n                            return 4 - get.value(button.link);\r\n                        });\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            let cards = result.links;\r\n                            target.lose(cards, ui.discardPile).set('visible', true);\r\n                            target.$throw(cards, 1000);\r\n                            game.log(target, '将', cards, '置入了弃牌堆');\r\n                            target.draw(cards.length);\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    order: 6,\r\n                    result: {\r\n                        target(player, target) {\r\n                            if (target.countCards('h') > 2) {\r\n                                if (get.$a(player, target) > 0)\r\n                                    return 1;\r\n                                else\r\n                                    return -1;\r\n                            }\r\n                            return -0.1;\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            mishu: {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = [];\r\n                },\r\n                trigger: { global: 'phaseEnd' },\r\n                filter(Evt, player) {\r\n                    if (Evt.player == player)\r\n                        return false;\r\n                    let cards = [];\r\n                    game.getGlobalHistory('cardMove', evt => {\r\n                        if (evt == Evt || (evt.name != 'lose' && evt.name != 'cardsDiscard'))\r\n                            return false;\r\n                        if (evt.name == 'lose' && evt.position != ui.discardPile)\r\n                            return false;\r\n                        cards.addArray(evt.cards);\r\n                    });\r\n                    return cards.length && _status.currentPhase.isIn();\r\n                },\r\n                content: [() => {\r\n                        let cards = _status.discarded.slice(0);\r\n                        Evt.discards = cards;\r\n                        let list = ['获得本回合进入弃牌堆的任意类型不同的牌，且若这些牌之和为质数，令其回复1点体力', '令其获得本回合进入弃牌堆的一种类型的牌，且若这些牌点数之积大于13，对其造成1点伤害', '取消'];\r\n                        list.removeArray(player.$.mishu);\r\n                        if (list.length) {\r\n                            player.chooseControl('dialogcontrol', list).set('ai', function () {\r\n                                let evt = _status.event.getParent();\r\n                                let controls = _status.event.controls.slice(0);\r\n                                if (evt.discards.length >= 4 && controls.includes('获得本回合进入弃牌堆的任意类型不同的牌，且若这些牌之和为质数，令其回复1点体力'))\r\n                                    return 0;\r\n                                return _status.event.att;\r\n                            }).set('check', (get.$a(player, _status.currentPhase) > 0) ? 0 : 1).set('prompt', get.$pro2('mishu')).set('addDialog', [cards]);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (result.control && result.control != '取消') {\r\n                            let prompt = result.control;\r\n                            Evt.target = _status.currentPhase;\r\n                            Evt.control = result.control;\r\n                            prompt.replace(/其/, get.$t(_status.currentPhase));\r\n                            let next = player.chooseCardButton(Evt.discards, prompt);\r\n                            if (Evt.control == '获得本回合进入弃牌堆的任意类型不同的牌，且若这些牌之和为质数，令其回复1点体力') {\r\n                                next.set('filterButton', function (button) {\r\n                                    for (let i = 0; i < ui.selected.buttons.length; i++) {\r\n                                        if (get.type2(ui.selected.buttons[i].link) == get.type2(button.link))\r\n                                            return false;\r\n                                    }\r\n                                    return true;\r\n                                });\r\n                                next.set('selectButton', function () {\r\n                                    let types = [];\r\n                                    for (let i of Evt.discards) {\r\n                                        types.add(get.type2(i));\r\n                                    }\r\n                                    return types.length;\r\n                                }());\r\n                            }\r\n                            else {\r\n                                next.set('filterButton', function (button) {\r\n                                    return true;\r\n                                });\r\n                                next.set('ai', function (button) {\r\n                                    let cards = [];\r\n                                    let type = get.type2(button.link);\r\n                                    let player = _status.event.player;\r\n                                    let target = _status.event.target;\r\n                                    cards.concat(_status.event.discards.filter(card => {\r\n                                        return type == get.type2(card);\r\n                                    }));\r\n                                    let eff = get.$a(player, target) * get.value(cards, target, 'raw');\r\n                                    let num = 1;\r\n                                    for (let i of cards) {\r\n                                        num *= get.number(i);\r\n                                    }\r\n                                    if (num > 13)\r\n                                        eff += get.damageEffect(target, player, player);\r\n                                    return eff;\r\n                                });\r\n                                next.set('discards', Evt.discards);\r\n                                next.set('target', Evt.target);\r\n                            }\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            player.$.mishu.add(Evt.control);\r\n                            if (Evt.control == '获得本回合进入弃牌堆的任意类型不同的牌，且若这些牌之和为质数，令其回复1点体力') {\r\n                                let num = 0, count = 0, cards = result.links;\r\n                                for (let i of cards) {\r\n                                    num += get.number(i);\r\n                                }\r\n                                for (let i = 1; i <= num; i++) {\r\n                                    if (num % i == 0) {\r\n                                        count++;\r\n                                    }\r\n                                }\r\n                                player.gain(cards, 'gain2', 'log');\r\n                                if (count <= 2)\r\n                                    Evt.target.recover();\r\n                            }\r\n                            else {\r\n                                let num = 1;\r\n                                let cards = Evt.discards.filter(card => {\r\n                                    return get.type2(result.links[0]) == get.type2(card);\r\n                                });\r\n                                for (let i of cards) {\r\n                                    num *= get.number(i);\r\n                                }\r\n                                Evt.target.gain(cards, 'gain2', 'log');\r\n                                if (num > 13)\r\n                                    Evt.target.damage();\r\n                            }\r\n                        }\r\n                    }],\r\n                group: 'mishu_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: {\r\n                            global: 'roundStart'\r\n                        },\r\n                        firstDo: true,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            return player.$.mishu.length;\r\n                        },\r\n                        content() {\r\n                            player.$.mishu = [];\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            xingchen: {\r\n                trigger: { player: 'damageAfter' },\r\n                priority: 2,\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                content: [() => {\r\n                        player.draw(5);\r\n                    }, () => {\r\n                        player.chooseCard(5, 'he', '『未卜星辰』：选择放置到牌堆顶部的牌', true);\r\n                    }, () => {\r\n                        if (result.bool == true && result.cards != null) {\r\n                            Evt.cards = result.cards;\r\n                        }\r\n                        if (Evt.cards.length > 0) {\r\n                            player.chooseButton(true, Evt.cards.length, ['『未卜星辰』：按顺序将卡牌置于牌堆顶（先选择的在上）', Evt.cards]).set('ai', function (button) {\r\n                                let player = _status.event.player, now = _status.currentPhase, next = now.getNext();\r\n                                let att = get.$a(player, next), card = button.link;\r\n                                let judge = next.getCards('j')[ui.selected.buttons.length];\r\n                                if (judge) {\r\n                                    return get.judge(judge)(card) * att;\r\n                                }\r\n                                return next.getUseValue(card) * att;\r\n                            });\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length))\r\n                            Evt.linkcards = result.links.slice(0);\r\n                        else\r\n                            Evt.finish();\r\n                        game.delay();\r\n                    }, () => {\r\n                        player.lose(Evt.linkcards, ui.special);\r\n                        game.delay();\r\n                    }, () => {\r\n                        let cards = Evt.linkcards;\r\n                        while (cards.length > 0) {\r\n                            ui.cardPile.insertBefore(cards.pop().fix(), ui.cardPile.firstChild);\r\n                            game.updateRoundNumber();\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    maixie: true,\r\n                }\r\n            },\r\n            minghuahongxiao: {\r\n                trigger: { player: ['useCard', 'discardAfter'] },\r\n                filter(Evt, player) {\r\n                    return (Evt.name == 'useCard' && player != _status.currentPhase && Evt.cards.length && Evt.cards.length)\r\n                        || (Evt.name == 'discard' && player == _status.currentPhase && Evt.cards.length);\r\n                },\r\n                check(Evt, player) {\r\n                    if (Evt.name == 'useCard' && player.isPhaseUsing() && player.countCards('h') && get.type2(Evt.card) == 'trick')\r\n                        return false;\r\n                    return true;\r\n                },\r\n                content: [() => {\r\n                        Evt.list = [];\r\n                        for (let i of trigger.cards) {\r\n                            Evt.list.add(get.type2(i));\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.list.includes('basic'))\r\n                            player.addSkill('minghuahongxiao_change');\r\n                    }, () => {\r\n                        if (Evt.list.includes('trick')) {\r\n                            let evt = _status.event.getParent('phaseUse');\r\n                            if ((evt === null || evt === void 0 ? void 0 : evt.name) == 'phaseUse') {\r\n                                evt.skipped = true;\r\n                            }\r\n                            player.chooseTarget('令一名没有手牌的角色摸两张牌', function (card, player, target) {\r\n                                return target.countCards('h') == 0;\r\n                            });\r\n                        }\r\n                        else\r\n                            Evt.goto(4);\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            result.targets[0].draw(2);\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.list.includes('equip'))\r\n                            player.recover();\r\n                    }],\r\n                subSkill: {\r\n                    change: {\r\n                        trigger: { global: 'useCard2' },\r\n                        priority: 23,\r\n                        popup: false,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            let card = Evt.card;\r\n                            let info = get.info(card);\r\n                            if (info.allowMultiple == false)\r\n                                return false;\r\n                            return Evt.targets && Evt.targets.length;\r\n                        },\r\n                        content: [() => {\r\n                                if (['equip', 'delay'].includes(get.type(trigger.card))\r\n                                    || !game.hasPlayer(cur => !trigger.targets.includes(cur) && lib.filter.targetEnabled2(trigger.card, player, cur)))\r\n                                    Evt.goto(4);\r\n                            }, () => {\r\n                                let prompt2 = `为${get.$t(trigger.card)}增加一个目标`;\r\n                                player.chooseTarget(get.$pro('minghuahongxiao_change'), function (card, player, target) {\r\n                                    let source = _status.event.source;\r\n                                    if (_status.event.targets.includes(target))\r\n                                        return false;\r\n                                    return lib.filter.targetEnabled2(_status.event.card, source, target) && lib.filter.targetInRange(_status.event.card, source, target);\r\n                                }).set('prompt2', prompt2).set('ai', function (target) {\r\n                                    let player = _status.event.player;\r\n                                    let source = _status.event.source;\r\n                                    return get.effect(target, _status.event.card, source, player) * (_status.event.targets.includes(target) ? -1 : 1);\r\n                                }).set('targets', trigger.targets).set('card', trigger.card).set('source', trigger.player);\r\n                            }, () => {\r\n                                if (!Evt.isMine())\r\n                                    game.delayx();\r\n                                Evt.targets = result.targets;\r\n                            }, () => {\r\n                                if (Evt.targets) {\r\n                                    player.logSkill('minghuahongxiao_change', Evt.targets);\r\n                                    if (trigger.targets.includes(Evt.targets[0]))\r\n                                        trigger.targets.removeArray(Evt.targets);\r\n                                    else\r\n                                        trigger.targets.addArray(Evt.targets);\r\n                                }\r\n                            }, () => {\r\n                                player.removeSkill('minghuahongxiao_change');\r\n                            }],\r\n                    }\r\n                }\r\n            },\r\n            qianqi: {\r\n                init(player, skill) {\r\n                    player.$[skill] = 0;\r\n                },\r\n                trigger: { global: 'phaseBegin' },\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') > player.$.qianqi || 1;\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        player.chooseToDiscard(get.$pro2('qianqi', trigger.player), 'he', player.$.qianqi || 1).set('logSkill', ['qianqi', trigger.player]);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            game.delayx();\r\n                            Evt.target = trigger.player;\r\n                            let list = (trigger.stageList || lib.phaseName).slice(0);\r\n                            for (let i = 0; i < list.length; i++) {\r\n                                list[i] = ['', i + 1, list[i]];\r\n                            }\r\n                            player.chooseButton(['『迁奇』：选择两个阶段调换位置（若不选则执行另一个效果）', [list, 'vcard'], 'hidden'], 2);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (result.bool && result.links) {\r\n                            let steps = result.links.slice(0), stageList = (trigger.stageList || lib.phaseName).slice(0);\r\n                            let index0 = steps[0][1] - 1, index1 = steps[1][1] - 1;\r\n                            [stageList[index0], stageList[index1]] = [stageList[index1], stageList[index0]];\r\n                            trigger.stageList = stageList;\r\n                        }\r\n                        else {\r\n                            Evt.target.$.qianqi_change = player.$.qianqi || 1;\r\n                            Evt.target.addTempSkill('qianqi_change');\r\n                        }\r\n                        player.$.qianqi++;\r\n                        player.addTempSkill('qianqi_clear');\r\n                        player.markSkill('qianqi');\r\n                    }],\r\n                intro: {\r\n                    content: '『迁奇』发动次数：#',\r\n                },\r\n                subSkill: {\r\n                    change: {\r\n                        trigger: { player: 'useCard2' },\r\n                        priority: 23,\r\n                        forced: true,\r\n                        lastDo: true,\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '本回合使用的前&张牌，目标锁定为1',\r\n                        },\r\n                        filter(Evt, player) {\r\n                            if (player.countUsed(null, true) > player.$.qianqi_change)\r\n                                return false;\r\n                            let card = Evt.card, info = get.info(card);\r\n                            if (info.allowMultiple == false)\r\n                                return false;\r\n                            return Evt.targets && Evt.targets.length && Evt.targets.length != 1;\r\n                        },\r\n                        content: [() => {\r\n                                player.chooseTarget('『迁奇』：将目标数锁定为1', function (card, player, target) {\r\n                                    if (_status.event.targets.includes(target))\r\n                                        return true;\r\n                                }).set('ai', function (target) {\r\n                                    let player = _status.event.player;\r\n                                    return get.effect(target, _status.event.card, player, player);\r\n                                }).set('targets', trigger.targets).set('card', trigger.card);\r\n                            }, () => {\r\n                                if (!Evt.isMine())\r\n                                    game.delayx();\r\n                                Evt.targets = result.targets;\r\n                            }, () => {\r\n                                if (Evt.targets) {\r\n                                    player.logSkill('qianqi_change', Evt.targets);\r\n                                    trigger.targets = Evt.targets;\r\n                                }\r\n                            }],\r\n                    },\r\n                    clear: {\r\n                        trigger: { global: 'phaseEnd' },\r\n                        filter(Evt, player) {\r\n                            return !game.countPlayer2(cur => cur.getHistory('damage').length);\r\n                        },\r\n                        forced: true,\r\n                        content: [() => {\r\n                                player.$.qianqi = 0;\r\n                                player.unmarkSkill('qianqi');\r\n                                game.log(player, '重置了『迁奇』计数');\r\n                                game.delay(0.5);\r\n                            }],\r\n                    }\r\n                }\r\n            },\r\n            chutan: {\r\n                init(player, skill) {\r\n                    player.$[skill] = [];\r\n                },\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    return game.countPlayer(cur => {\r\n                        return cur != player;\r\n                    }) >= 2;\r\n                },\r\n                filterCard(card, player) {\r\n                    return true;\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    return target != player;\r\n                },\r\n                selectTarget: 2,\r\n                position: 'he',\r\n                check(card) {\r\n                    return 6 - get.value(card);\r\n                },\r\n                usable: 1,\r\n                line: false,\r\n                log: 'notarget',\r\n                content: [() => {\r\n                        if (!player.$.chutan)\r\n                            player.$.chutan = [];\r\n                        player.$.chutan.add(target);\r\n                        target.$.chutan_next = player;\r\n                        player.addTempSkill('chutan_next', { player: 'phaseBegin' });\r\n                    }],\r\n                ai: {\r\n                    order: 10,\r\n                    result: {\r\n                        player: 1,\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    next: {\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '『雏探』标记了两名角色'\r\n                        },\r\n                        onremove(player) {\r\n                            player.$.chutan.forEach(chu => {\r\n                                if (chu.$.chutan_next == player)\r\n                                    delete chu.$.chutan_next;\r\n                            });\r\n                            delete player.$.chutan;\r\n                        },\r\n                        trigger: { global: 'phaseEnd' },\r\n                        priority: 23,\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            let chus = player.getStorage('chutan').slice(0);\r\n                            if (!chus.includes(Evt.player))\r\n                                return false;\r\n                            chus.remove(Evt.player);\r\n                            return Evt.player.getHistory('useCard', evt => {\r\n                                return evt.targets.includes(chus[0]);\r\n                            }).length > 0;\r\n                        },\r\n                        logTarget: 'player',\r\n                        content() {\r\n                            let cards = [];\r\n                            trigger.player.getHistory('useCard', evt => {\r\n                                cards.addArray(evt.cards);\r\n                            });\r\n                            player.gain(cards, 'gain2', 'log');\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            yikai: {\r\n                enable: 'phaseUse',\r\n                limited: true,\r\n                filterTarget: true,\r\n                content: [() => {\r\n                        player.awakenSkill('yikai');\r\n                        target.draw(2);\r\n                    }, () => {\r\n                        target.damage('thunder');\r\n                    }, () => {\r\n                        let list = [];\r\n                        let skills = target.getOriginalSkills();\r\n                        for (let i of skills) {\r\n                            if (lib.skill[i].limited) {\r\n                                list.push(i);\r\n                            }\r\n                        }\r\n                        list.push('cancel2');\r\n                        if (list.length > 1) {\r\n                            player.chooseControl(list).set('prompt', '选择一个限定技：<br><ul><li>未发动~该限定技失效直到你的下个回合开始<li>已发动~此回合结束后视为该限定技未发动过</ul>');\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }, () => {\r\n                        if (result.control !== 'cancel2') {\r\n                            if (target.awakenedSkills.includes(result.control)) {\r\n                                target.$.yikai_restore = result.control;\r\n                                target.addTempSkill('yikai_restore', 'phaseZhunbeiBegin');\r\n                            }\r\n                            else {\r\n                                target.$.yikai_blocker = [result.control, player];\r\n                                target.addTempSkill('yikai_blocker', 'none');\r\n                            }\r\n                        }\r\n                    }],\r\n                subSkill: {\r\n                    restore: {\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '在回合结束后重置『$』',\r\n                        },\r\n                        trigger: { global: 'phaseAfter' },\r\n                        locked: true,\r\n                        silent: true,\r\n                        onremove: true,\r\n                        content() {\r\n                            player.restoreSkill(player.$.yikai_restore);\r\n                        }\r\n                    },\r\n                    blocker: {\r\n                        mark: true,\r\n                        intro: {\r\n                            content(storage, player, skill) {\r\n                                let str = '';\r\n                                let list = player.getSkills(null, null, false).filter(i => lib.skill.yikai_blocker.skillBlocker(i, player));\r\n                                if (list.length)\r\n                                    str += ('<li>失效技能：' + get.$t(list));\r\n                                return str;\r\n                            }\r\n                        },\r\n                        init(player, skill) {\r\n                            player.addSkillBlocker(skill);\r\n                        },\r\n                        onremove(player, skill) {\r\n                            delete player.$.yikai_blocker;\r\n                            player.removeSkillBlocker(skill);\r\n                        },\r\n                        locked: true,\r\n                        skillBlocker(skill, player) {\r\n                            return !lib.skill[skill].charlotte && player.getStorage('yikai_blocker')[0] == skill;\r\n                        },\r\n                        trigger: { global: 'phaseBegin' },\r\n                        filter(Evt, player) {\r\n                            let pika = player.getStorage('yikai_blocker')[0];\r\n                            return !pika || !pika.isIn() || pika == Evt.player;\r\n                        },\r\n                        content() {\r\n                            player.removeSkill('yikai_blocker');\r\n                        },\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 4,\r\n                    damage: true,\r\n                    result: {\r\n                        target(player, target) {\r\n                            if (target.hp > 1) {\r\n                                let skills = target.getOriginalSkills();\r\n                                for (let i of skills) {\r\n                                    if (lib.skill[i].limited && target.awakenedSkills.includes(i)) {\r\n                                        return 8;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (target != player)\r\n                                return 0;\r\n                            if (get.damageEffect(target, player, player) >= 0)\r\n                                return 10;\r\n                            if (target.hp >= 1)\r\n                                return 5;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            pkyuanjun: {\r\n                trigger: { player: 'damageEnd', source: 'damageEnd' },\r\n                filter(Evt, player) {\r\n                    if (Evt.nature != 'thunder')\r\n                        return false;\r\n                    return Evt.source && Evt.source.isAlive() && Evt.player.isAlive();\r\n                },\r\n                usable: 1,\r\n                logTarget(Evt, player) {\r\n                    return player == Evt.player ? Evt.source : Evt.player;\r\n                },\r\n                check(Evt, player) {\r\n                    let target = player == Evt.player ? Evt.source : Evt.player;\r\n                    if (target.countCards('h') >= player.countCards('h'))\r\n                        return true;\r\n                    if (target.countCards('h') - player.countCards('h') >= -1)\r\n                        return player.isDamaged();\r\n                },\r\n                content: [() => {\r\n                        Evt.target = player == trigger.player ? trigger.source : trigger.player;\r\n                        let num = Evt.target.countCards('h') - player.countCards('h');\r\n                        if (num > 0) {\r\n                            player.draw(num);\r\n                            Evt.finish();\r\n                        }\r\n                        else if (num < 0) {\r\n                            player.chooseToDiscard(-num, true);\r\n                        }\r\n                    }, () => {\r\n                        player.recover();\r\n                    }],\r\n                ai: {\r\n                    result: {\r\n                        player: 1,\r\n                    }\r\n                },\r\n            },\r\n            qinhuo: {\r\n                trigger: { global: 'useCardAfter' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    if (Evt.cards && get.name(Evt.card) == 'huogong'\r\n                        && !Evt.player.hasHistory('sourceDamage', evt => Evt == evt.getParent('useCard')))\r\n                        return true;\r\n                },\r\n                content: [() => {\r\n                        player.chooseTarget(function (card, player, target) {\r\n                            return target != _status.event.source;\r\n                        }).set('ai', function (target) {\r\n                            let att = get.$a(_status.event.player, target);\r\n                            if (target.hasSkillTag('nogain'))\r\n                                att /= 10;\r\n                            if (target.hasJudge('lebu'))\r\n                                att /= 2;\r\n                            return get.value(_status.event.cardx, target, 'raw') * att;\r\n                        }).set('cardx', trigger.cards).set('source', trigger.player).set('createDialog', [get.$pro('qinhuo'),\r\n                            'small', get.skillInfoTranslation('qinhuo', player), '令一名角色获得这些牌',\r\n                            [trigger.cards, 'card']]);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            let target = result.targets[0];\r\n                            player.logSkill('qinhuo', target);\r\n                            target.gain(trigger.cards, 'gain2');\r\n                        }\r\n                    }],\r\n            },\r\n            lvecao: {\r\n                trigger: { player: 'damageEnd' },\r\n                filter(Evt, player) {\r\n                    return player.hasUseTarget({ name: 'tiesuo' });\r\n                },\r\n                check(Evt, player) {\r\n                    return true;\r\n                },\r\n                frequent: true,\r\n                content() {\r\n                    player.chooseUseTarget({ name: 'tiesuo' }, true).set('addedSkill', ['lvecao']);\r\n                },\r\n                group: 'lvecao_fadian',\r\n                subSkill: {\r\n                    fadian: {\r\n                        trigger: { global: 'linkEnd' },\r\n                        filter(Evt, player) {\r\n                            let evt = Evt.getParent('useCard');\r\n                            if (evt.getParent('chooseUseTarget').addedSkill && evt.getParent('chooseUseTarget').addedSkill.includes('lvecao')) {\r\n                                return evt.card.name == 'tiesuo' && evt.player == player && !Evt.player.isLinked()\r\n                                    && Evt.player.countGainableCards(player, 'hej', card => {\r\n                                        if (get.position(card) != 'e' && get.position(card) != 'j' && !card.hasGaintag('ming_'))\r\n                                            return false;\r\n                                        return true;\r\n                                    });\r\n                            }\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            player.gainPlayerCard(trigger.player, 'hej', '获得其区域内一张可见牌').set('filterButton', function (button) {\r\n                                if (get.position(button.link) != 'e' && get.position(button.link) != 'j' && !button.link.hasGaintag('ming_'))\r\n                                    return false;\r\n                                return true;\r\n                            }).set('logSkill', 'lvecao_fadian');\r\n                        },\r\n                        ai: {\r\n                            effect: {\r\n                                player(card, player, target, current) {\r\n                                    if (_status.event.name == 'chooseUseTarget' && _status.event.addedSkill.includes('lvecao')) {\r\n                                        if (card.name == 'tiesuo' && target && target.isLinked() && target.countCards('hej', card => {\r\n                                            if (get.position(card) != 'e' && get.position(card) != 'j' && !card.hasGaintag('ming_'))\r\n                                                return false;\r\n                                            return true;\r\n                                        }))\r\n                                            return [1, 2, 1, -1];\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            yangxi: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') > player.countCards('he', { type: ['trick', 'delay'] });\r\n                },\r\n                filterCard(card, player) {\r\n                    if (get.type2(card) == 'basic')\r\n                        return false;\r\n                    if (get.type(card) == 'delay')\r\n                        return player.canAddJudge(card);\r\n                    if (player.canAddJudge('lebu') && get.color(card) == 'red')\r\n                        return true;\r\n                    if (player.canAddJudge('bingliang') && get.color(card) == 'black')\r\n                        return true;\r\n                    return false;\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    return true;\r\n                },\r\n                position: 'he',\r\n                discard: false,\r\n                lose: false,\r\n                check(card) {\r\n                    let player = _status.event.player;\r\n                    if (['shandian', 'fulei', 'haidi'].includes(get.name(card)))\r\n                        return 9 - get.value(card);\r\n                    if (get.color(card) == 'red' && !player.needsToDiscard())\r\n                        return 6 - get.value(card);\r\n                    if (get.color(card) == 'black' && player.countCards('he') >= 3)\r\n                        return 5 - get.value(card);\r\n                    if (get.type(card) == 'delay')\r\n                        return 4 - get.value(card);\r\n                    return 3 - get.value(card);\r\n                },\r\n                content: [() => {\r\n                        player.$give(cards, player, false);\r\n                        if (get.type(cards[0]) == 'delay')\r\n                            player.addJudge(cards[0]);\r\n                        else if (get.color(cards[0]) == 'red' && player.canAddJudge('lebu'))\r\n                            player.addJudge({ name: 'lebu' }, cards);\r\n                        else if (get.color(cards[0]) == 'black' && player.canAddJudge('bingliang'))\r\n                            player.addJudge({ name: 'bingliang' }, cards);\r\n                    }, () => {\r\n                        target.damage('thunder');\r\n                    }],\r\n                ai: {\r\n                    order: 2,\r\n                    result: {\r\n                        player(player, target) {\r\n                            if (player.countCards('h', card => ['shandian', 'fulei', 'haidi'].includes(get.name(card))))\r\n                                return 0;\r\n                            return -1.5;\r\n                        },\r\n                        target(player, target) {\r\n                            if (target.hasSkill('shenyou'))\r\n                                return 0;\r\n                            if (target.hp == 1)\r\n                                return get.damageEffect(target, player, target) - 2;\r\n                            return get.damageEffect(target, player, target);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            naisi: {\r\n                trigger: { global: 'phaseEnd' },\r\n                direct: true,\r\n                init(player, skill) {\r\n                    player.$[skill] = 0;\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.$.naisi;\r\n                },\r\n                content: [() => {\r\n                        if (player.$.naisi > 1) {\r\n                            player.chooseTarget(get.$pro2('naisi'), function (card, player, target) {\r\n                                return true;\r\n                            }).set('ai', function (target) {\r\n                                return get.damageEffect(target, _status.event.player, _status.event.player);\r\n                            });\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            let target = result.targets[0];\r\n                            player.logSkill('naisi', target);\r\n                            target.damage(player.$.naisi);\r\n                        }\r\n                    }, () => {\r\n                        player.$.naisi = 0;\r\n                    }],\r\n                group: 'naisi_recover',\r\n                subSkill: {\r\n                    recover: {\r\n                        trigger: { player: 'recoverAfter' },\r\n                        direct: true,\r\n                        lastDo: true,\r\n                        forced: true,\r\n                        silent: true,\r\n                        content() {\r\n                            player.$.naisi++;\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            tuzai: {\r\n                trigger: { source: 'damageEnd' },\r\n                filter(Evt, player) {\r\n                    return Evt.player.countGainableCards(player, 'hej', card => {\r\n                        if (get.position(card) != 'e' && get.position(card) != 'j' && !card.hasGaintag('ming_'))\r\n                            return false;\r\n                        return true;\r\n                    });\r\n                },\r\n                check(Evt, player) {\r\n                    if (get.recoverEffect(Evt.player, player, player) > 0)\r\n                        return true;\r\n                    let att = get.$a(player, Evt.player);\r\n                    if (att > 0 && Evt.player.countCards('j'))\r\n                        return true;\r\n                    let cards = Evt.player.getGainableCards(player, 'he', card => get.position(card) == 'e' || card.hasGaintag('ming_'));\r\n                    for (let i of cards) {\r\n                        if (get.equipValue(i) >= 6)\r\n                            return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                logTarget: 'player',\r\n                content: [() => {\r\n                        player.gainPlayerCard(trigger.player, 'hej', '获得其区域内一张可见牌', true).set('filterButton', function (button) {\r\n                            if (get.position(button.link) != 'e' && get.position(button.link) != 'j' && !button.link.hasGaintag('ming_'))\r\n                                return false;\r\n                            return true;\r\n                        });\r\n                    }, () => {\r\n                        trigger.player.recover();\r\n                    }],\r\n                effect: {\r\n                    player(cardx, player, target) {\r\n                        if (get.$a(player, target) > 0 && target.countGainableCards(player, 'hej', card => {\r\n                            if (get.position(card) != 'e' && get.position(card) != 'j' && !card.hasGaintag('ming_'))\r\n                                return false;\r\n                            return true;\r\n                        })) {\r\n                            if (get.tag(cardx, 'damage') == 1) {\r\n                                if (target.countGainableCards(player, 'j'))\r\n                                    return [1, 1, 0, 2];\r\n                                else\r\n                                    return [1, 1, 0, -0.5];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            wuneng: {\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    return player.countCards('h', card => ['tao', 'taoyuan'].includes(card.name) && !card.hasGaintag('ming_'));\r\n                },\r\n                filterCard(card, player) {\r\n                    return ['tao', 'taoyuan'].includes(card.name) && !card.hasGaintag('ming_');\r\n                },\r\n                position: 'h',\r\n                discard: false,\r\n                lose: false,\r\n                check(card) {\r\n                    return true;\r\n                },\r\n                content: [() => {\r\n                        player.showCards(cards, '『呜能』亮出手牌');\r\n                        player.addGaintag(cards, 'ming_wuneng');\r\n                        player.$give(cards, player, false);\r\n                        game.delayx();\r\n                    }, () => {\r\n                        player.draw();\r\n                    }],\r\n                ai: {\r\n                    order: 10,\r\n                    result: {\r\n                        player: 1,\r\n                    }\r\n                }\r\n            },\r\n            xilv: {\r\n                trigger: { global: 'drawAfter' },\r\n                filter(Evt, player) {\r\n                    if (Evt.player == player)\r\n                        return false;\r\n                    let name = lib.skill.yiqu.process(Evt), info = lib.skill[name];\r\n                    if (!info || info.equipSkill || info.ruleSkill)\r\n                        return false;\r\n                    return lib.translate[`${name}_info`] && player.countCards('h') > 0;\r\n                },\r\n                content: [() => {\r\n                        Evt.target = trigger.player;\r\n                        player.chooseCard('h', get.$pro2('xilv')).set('ai', card => {\r\n                            let target = _status.event.target;\r\n                            return get.$a2(target) * get.value(card, target, 'raw') + 1;\r\n                        }).set('target', Evt.target);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.logSkill('xilv', Evt.target);\r\n                            Evt.target.gain(result.cards, player, 'giveAuto');\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        let name = lib.skill.yiqu.process(trigger);\r\n                        Evt.list = ['将摸到的牌交给' + get.$t(player), `令${get.$t(player)}获得<div class=\"skill\">${get.$t(name)}</div>`];\r\n                        if (!player.hasSkill(name)) {\r\n                            Evt.target.chooseControl('dialogcontrol', Evt.list, function () {\r\n                                return _status.event.att;\r\n                            }).set('att', get.$a(Evt.target, player) > 0 ? 1 : 0).set('prompt', '『习律』请选择一项').set('addDialog', [trigger.result]);\r\n                        }\r\n                        else {\r\n                            Evt._result = { control: Evt.list[0] };\r\n                        }\r\n                    }, () => {\r\n                        switch (result.control) {\r\n                            case Evt.list[0]: {\r\n                                player.gain(trigger.result, Evt.target, 'giveAuto');\r\n                                break;\r\n                            }\r\n                            case Evt.list[1]: {\r\n                                let name = lib.skill.yiqu.process(trigger);\r\n                                player.flashAvatar('xilv', get.name(trigger.player));\r\n                                player.addAdditionalSkill('xilv', name, true);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }],\r\n                group: 'xilv_phaseEnd',\r\n                subSkill: {\r\n                    phaseEnd: {\r\n                        trigger: { player: 'phaseEnd' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return player.additionalSkills['xilv'];\r\n                        },\r\n                        content() {\r\n                            player.removeAdditionalSkill('xilv');\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            bana: {\r\n                trigger: { global: 'changeHp' },\r\n                filter(Evt, player) {\r\n                    return Evt.player.countCards('he') <= Evt.player.hp && Evt.player.hp <= game.countPlayer();\r\n                },\r\n                check(Evt, player) {\r\n                    return get.$a(player, Evt.player) > 0;\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    trigger.player.draw();\r\n                },\r\n                ai: {\r\n                    expose: 0.1,\r\n                }\r\n            },\r\n            weiguang: {\r\n                intro: {\r\n                    content: '『微光』：$',\r\n                },\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = null;\r\n                },\r\n                trigger: { player: 'phaseBegin' },\r\n                filter(Evt, player) {\r\n                    return player.countCards('hs');\r\n                },\r\n                direct: true,\r\n                content: [() => {\r\n                        player.chooseToUse({\r\n                            prompt: get.$pro2('weiguang'),\r\n                            addCount: false,\r\n                        });\r\n                    }, () => {\r\n                        if (result.card && get.type(result.card)) {\r\n                            if (!player.$.weiguang)\r\n                                player.$.weiguang = get.type(result.card);\r\n                            if (player.$.weiguang === get.type(result.card)) {\r\n                                player.markSkill('weiguang');\r\n                                player.draw();\r\n                            }\r\n                            else {\r\n                                player.$.weiguang = true;\r\n                            }\r\n                        }\r\n                    }],\r\n            },\r\n            liangqin: {\r\n                trigger: { player: 'dyingAfter' },\r\n                unique: true,\r\n                limited: true,\r\n                priority: 100,\r\n                check(Evt, player) {\r\n                    return true;\r\n                },\r\n                content: [() => {\r\n                        player.$.liangqin = true;\r\n                        player.awakenSkill('liangqin');\r\n                    }, () => {\r\n                        player.addSkill('liangqin_phaseBefore');\r\n                    }],\r\n                subSkill: {\r\n                    phaseBefore: {\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '在下个回合内摸牌量上升',\r\n                        },\r\n                        trigger: {\r\n                            player: 'phaseBefore'\r\n                        },\r\n                        forced: true,\r\n                        firstDo: true,\r\n                        content: [() => {\r\n                                player.$.liangqin_drawPlus = 1;\r\n                                player.addTempSkill('liangqin_drawPlus');\r\n                            }, () => {\r\n                                player.removeSkill('liangqin_phaseBefore');\r\n                            }],\r\n                    },\r\n                    drawPlus: {\r\n                        trigger: {\r\n                            player: 'drawBegin'\r\n                        },\r\n                        forced: true,\r\n                        firstDo: true,\r\n                        onremove: true,\r\n                        content() {\r\n                            trigger.num += player.$.liangqin_drawPlus;\r\n                            player.$.liangqin_drawPlus++;\r\n                        },\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '摸牌量+#',\r\n                        },\r\n                        ai: {\r\n                            effect: {\r\n                                target(card, player, target) {\r\n                                    if (get.tag(card, 'draw'))\r\n                                        return [1, player.$.liangqin_drawPlus || 1];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            tage: {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = 0;\r\n                },\r\n                trigger: { global: 'useCardAfter' },\r\n                firstDo: true,\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    if (Evt.player != _status.currentPhase)\r\n                        return false;\r\n                    let usable = player.getDamagedHp() || 1;\r\n                    if (player.$.tage >= usable)\r\n                        return false;\r\n                    let num = get.number(Evt.card);\r\n                    return typeof num == \"number\" && player.countCards('hs', card => [1, -1].includes(get.number(card) - num));\r\n                },\r\n                content: [() => {\r\n                        Evt.precard = trigger.cards.slice(0);\r\n                        let num = get.number(trigger.card);\r\n                        player.chooseToRespond('『踏歌』：是否打出一张牌替换' + get.$t(Evt.precard), card => {\r\n                            if (!get.number(card))\r\n                                return false;\r\n                            let num = _status.event.num;\r\n                            return [1, -1].includes(get.number(card) - num);\r\n                        }).set('num', num).set('ai', card => {\r\n                            if (!_status.event.check)\r\n                                return 1 - get.value(card);\r\n                            return 7 - get.value(card);\r\n                        }).set('check', get.value(Evt.precard, player) > 1 || (player.getDamagedHp() >= 2));\r\n                    }, () => {\r\n                        if (result.bool && result.cards) {\r\n                            player.logSkill('tage');\r\n                            if (!player.$.tage)\r\n                                player.$.tage = 1;\r\n                            else\r\n                                player.$.tage++;\r\n                            player.markSkill('tage');\r\n                            Evt.cards = result.cards.slice(0);\r\n                            trigger.cards = Evt.cards;\r\n                            player.gain(Evt.precard, 'gain2', 'log');\r\n                        }\r\n                    }],\r\n                intro: {\r\n                    content: '『踏歌』发动次数：#',\r\n                },\r\n                group: ['tage_drawBy', 'tage_clear'],\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: { global: 'phaseEnd' },\r\n                        filter(Evt, player) {\r\n                            return player.$.tage > 0;\r\n                        },\r\n                        prompt2(Evt, player) {\r\n                            let usable = player.getDamagedHp() || 1;\r\n                            return `摸${get.cnNumber(usable)}张牌，并交给${get.$t(Evt.player)}至少一张牌`;\r\n                        },\r\n                        content: [() => {\r\n                                let usable = player.getDamagedHp() || 1;\r\n                                player.draw(usable);\r\n                            }, () => {\r\n                                if (player.countCards('he') && trigger.player.isIn()) {\r\n                                    Evt.target = trigger.player;\r\n                                    player.chooseCard('he', true).set('ai', card => {\r\n                                        let player = _status.event.player, target = _status.event.target;\r\n                                        if (get.$a(player, target) > 0)\r\n                                            return get.value(card, target) - get.value(card, player);\r\n                                        return get.value(card, player) - get.value(card, target);\r\n                                    }).set('target', Evt.target).set('prompt', `选择交给${get.$t(Evt.target)}的牌`);\r\n                                }\r\n                                else\r\n                                    Evt.finish();\r\n                            }, () => {\r\n                                if (result.bool && result.cards) {\r\n                                    player.line(Evt.target);\r\n                                    player.give(result.cards, Evt.target, true);\r\n                                }\r\n                            }]\r\n                    },\r\n                    clear: {\r\n                        trigger: { global: 'phaseAfter' },\r\n                        priority: 23,\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            player.$.tage = 0;\r\n                            player.unmarkSkill('tage');\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            aowei: {\r\n                trigger: { global: 'cardsDiscardAfter' },\r\n                firstDo: true,\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    let evt = Evt.getParent();\r\n                    if (evt.name != 'orderingDiscard' || !evt.relatedEvent || evt.relatedEvent.player == player\r\n                        || !['useCard', 'respond'].includes(evt.relatedEvent.name) || get.name(evt.relatedEvent.card) != 'sha')\r\n                        return false;\r\n                    let cards = (Evt.cards2 || Evt.cards).filterInD('d');\r\n                    let card0 = evt.relatedEvent.card;\r\n                    return cards.length > 0 && player.countCards('hs', card => get.suit(card) == get.suit(card0) || get.number(card) == get.number(card0));\r\n                },\r\n                content: [() => {\r\n                        let evt = trigger.getParent(), cards = (trigger.cards2 || trigger.cards).filterInD('d');\r\n                        let precard = evt.relatedEvent.card;\r\n                        Evt.precard = cards.slice(0);\r\n                        Evt.change = !precard.nature;\r\n                        player.chooseToRespond('『傲尾』：是否打出一张牌替换' + get.$t(Evt.precard), card => {\r\n                            if (!get.suit(card) && !get.number(card))\r\n                                return false;\r\n                            let precard = _status.event.precard;\r\n                            return get.suit(card) == get.suit(precard)\r\n                                || get.number(card) == get.number(precard);\r\n                        }).set('precard', precard).set('ai', card => {\r\n                            if (!_status.event.check)\r\n                                return 1 - get.value(card);\r\n                            return 7 - get.value(card);\r\n                        }).set('check', 1);\r\n                    }, () => {\r\n                        if (result.bool && result.cards) {\r\n                            player.logSkill('aowei');\r\n                            Evt.cards = result.cards.slice(0);\r\n                            trigger.cards = Evt.cards;\r\n                            player.gain(Evt.precard, 'gain2', 'log');\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        player.chooseTarget('『傲尾』：你可以' + (Evt.change ? '弃置一名角色一张牌' : '令一名角色回复一点体力')).set('ai', function (target) {\r\n                            let player = _status.event.player;\r\n                            if (_status.event.change)\r\n                                return 1 - get.$a(player, target);\r\n                            return get.recoverEffect(target, player, player);\r\n                        }).set('change', Evt.change);\r\n                    }, () => {\r\n                        var _a;\r\n                        if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            Evt.target = result.targets[0];\r\n                            if (Evt.change) {\r\n                                player.discardPlayerCard(Evt.target, true, 'he');\r\n                            }\r\n                            else {\r\n                                Evt.target.recover();\r\n                            }\r\n                        }\r\n                    }],\r\n            },\r\n            meizhan: {\r\n                audio: true,\r\n                zhuSkill: true,\r\n                trigger: { global: 'gainAfter' },\r\n                filter(Evt, player) {\r\n                    if (!player.hasZhuSkill('meizhan'))\r\n                        return false;\r\n                    if (Evt.getParent().name == 'draw')\r\n                        return false;\r\n                    return Evt.player.group == player.group;\r\n                },\r\n                direct: true,\r\n                usable: 1,\r\n                content: [() => {\r\n                        Evt.target = trigger.player;\r\n                        let check = get.$a(Evt.target, player) > 0;\r\n                        let next = Evt.target.chooseBool(get.$pro2('meizhan', player, Evt.target));\r\n                        next.set('ai', () => {\r\n                            if (!_status.event.check)\r\n                                return 0;\r\n                            return 1;\r\n                        });\r\n                        next.set('check', check);\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            player.logSkill('meizhan', Evt.target);\r\n                            let draws = [Evt.target];\r\n                            draws.add(player);\r\n                            game.asyncDraw(draws);\r\n                        }\r\n                    }],\r\n            },\r\n            xiandu: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = 0;\r\n                },\r\n                content() {\r\n                    player.$.xiandu++;\r\n                    player.markSkill('xiandu');\r\n                    if (player.$.xiandu % 10 === 0) {\r\n                        player.logSkill('xiandu');\r\n                        player.draw(Math.min(player.$.xiandu / 10, 5));\r\n                    }\r\n                },\r\n                intro: {\r\n                    content: '本局游戏内累计使用了#张牌'\r\n                }\r\n            }, 'direct', 'locked').setT('useCard'),\r\n            yexi: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('active', {\r\n                filter(Evt, player) {\r\n                    return player.countCards('he');\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    return target !== player && player.countDiscardableCards(target, 'he');\r\n                },\r\n                content: [() => {\r\n                        target.discardPlayerCard(player, 'he', true, `『椰熙』：请弃置${get.$t(player)}的一张牌`);\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result === null || result === void 0 ? void 0 : result.cards) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            if (get.name(result.cards[0]) === 'sha' || get.type(result.cards[0]) === 'equip')\r\n                                target.useCard({ name: 'sha' }, get.cards(), player, false);\r\n                            else\r\n                                Evt.finish();\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (target.countCards('he')) {\r\n                            player.gainPlayerCard(target, 'he', `『椰熙』：请回收${get.$t(target)}的椰子壳🥥`);\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    order: 2,\r\n                    result: {\r\n                        player(player, target) {\r\n                            if (player.hp === 1 || player.countCards('he', { type: 'equip' }) + player.countCards('h', 'sha') === 0)\r\n                                return -5;\r\n                            if (!player.needsToDiscard() || player.isEmpty(2))\r\n                                return -2;\r\n                            if (!player.hasShan())\r\n                                return -1;\r\n                            return 0;\r\n                        },\r\n                        target(player, target) {\r\n                            if (target.countCards('he', 'equip'))\r\n                                return -2;\r\n                            if (target.countCards('he') > 2)\r\n                                return -1;\r\n                            return 0;\r\n                        }\r\n                    }\r\n                }\r\n            }),\r\n            jiuxian: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = 0;\r\n                },\r\n                content: [() => {\r\n                        player.$.jiuxian++;\r\n                        player.markSkill('jiuxian');\r\n                        if (player.$.jiuxian % 9 === 0) {\r\n                            player.chooseTarget(get.$pro2('jiuxian')).set('ai', tar => {\r\n                                let player = _status.event.player, att = get.$a(player, tar);\r\n                                if (att)\r\n                                    return get.recoverEffect(tar, player, player);\r\n                                else if (tar.hasSkillTag('maixie'))\r\n                                    return -0.5 * att;\r\n                                else\r\n                                    return -1.5 * att;\r\n                            });\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.target = result.targets[0];\r\n                            player.chooseControl('cancel2', 'recover_hp', 'lose_hp', function () {\r\n                                if (_status.event.check)\r\n                                    return 1;\r\n                                return 2;\r\n                            }).set('prompt', '令目标执行：').set('check', get.recoverEffect(Evt.target, player, player) > 0);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        switch (result.index) {\r\n                            case 0: {\r\n                                Evt.goto(0);\r\n                                break;\r\n                            }\r\n                            case 1: {\r\n                                player.logSkill('jiuxian', Evt.target);\r\n                                Evt.target.recover();\r\n                                break;\r\n                            }\r\n                            case 2: {\r\n                                player.logSkill('jiuxian', Evt.target);\r\n                                Evt.target.loseHp();\r\n                                break;\r\n                            }\r\n                        }\r\n                    }],\r\n                intro: {\r\n                    content: '本局游戏内累计使用了#张牌'\r\n                },\r\n                ai: {\r\n                    expose: 0.2\r\n                }\r\n            }, 'direct', 'locked').setT('useCard'),\r\n            yujian: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                init(player, skill) {\r\n                    if (!player.$[skill])\r\n                        player.$[skill] = true;\r\n                },\r\n                filter(Evt, player) {\r\n                    if (get.type(Evt.card) === 'equip') {\r\n                        return (player.$.yujian === true && player === Evt.player)\r\n                            || (player.$.yujian === false && player !== Evt.player);\r\n                    }\r\n                    return false;\r\n                },\r\n                content: [() => {\r\n                        if (player.$.yujian === true) {\r\n                            player.chooseTarget(get.$pro2('yujian', null, player), (card, player, target) => {\r\n                                return player != target;\r\n                            }).set('ai', tar => {\r\n                                let player = _status.event.player;\r\n                                return get.effect(tar, _status.event.card, player, player) + 0.1;\r\n                            }).set('card', trigger.card);\r\n                        }\r\n                        else if (player.$.yujian === false) {\r\n                            player.chooseToDiscard(get.$pro2('yujian', null, player), 'he').set('ai', card => {\r\n                                if (get.$a2(_status.event.target) > 0)\r\n                                    return -1;\r\n                                return get.unuseful2(card);\r\n                            }).set('card', trigger.player);\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if (player.$.yujian === true && ((_a = result === null || result === void 0 ? void 0 : result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('yujian', Evt.target);\r\n                            game.delay(1);\r\n                            player.draw();\r\n                            trigger.targets = [Evt.target];\r\n                        }\r\n                        else if (player.$.yujian === false) {\r\n                            Evt.target = trigger.player;\r\n                            player.logSkill('yujian', Evt.target);\r\n                            game.delay(1);\r\n                            trigger.finish();\r\n                            player.gain(trigger.cards);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        player.$.yujian = !player.$.yujian;\r\n                    }],\r\n            }, 'direct').setT({ global: 'useCard2' }),\r\n            yuenan: new _skilltype__WEBPACK_IMPORTED_MODULE_0__.toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return !Evt.numFixed;\r\n                },\r\n                check(Evt, player) {\r\n                    return true;\r\n                },\r\n                content: [() => {\r\n                        trigger.changeToZero();\r\n                    }, () => {\r\n                        var cards = Evt.cards = get.cards(5);\r\n                        game.cardsGotoOrdering(cards).relatedEvent = Evt.getParent();\r\n                        var dialog = ui.create.dialog('『月喃』使用一张牌', cards);\r\n                        _status.dieClose.push(dialog);\r\n                        dialog.videoId = lib.status.videoId++;\r\n                        game.addVideo('cardDialog', null, ['月喃', get.cardsInfo(cards), dialog.videoId]);\r\n                        Evt.getParent().preResult = dialog.videoId;\r\n                        game.broadcast(function (cards, id) {\r\n                            let dialog = ui.create.dialog('月喃', cards);\r\n                            _status.dieClose.push(dialog);\r\n                            dialog.videoId = id;\r\n                        }, cards, dialog.videoId);\r\n                        Evt.dialog = dialog;\r\n                        game.log(player, '亮出了', '#y牌堆顶的牌');\r\n                        player.chooseButton().set('dialog', dialog.videoId).set('filterButton', function (button) {\r\n                            let player = _status.event.player;\r\n                            return player.hasUseTarget(button.link);\r\n                        }).set('ai', button => {\r\n                            let player = _status.event.player;\r\n                            let effect = player.getUseValue(button.link);\r\n                            if (effect > 0)\r\n                                return effect;\r\n                            return 0;\r\n                        });\r\n                    }, () => {\r\n                        Evt.dialog.close();\r\n                        _status.dieClose.remove(Evt.dialog);\r\n                        game.broadcast(function (id) {\r\n                            var dialog = get.idDialog(id);\r\n                            if (dialog) {\r\n                                dialog.close();\r\n                                _status.dieClose.remove(dialog);\r\n                            }\r\n                        }, Evt.dialog.videoId);\r\n                        if (!result.links[0]) {\r\n                            Evt.goto(5);\r\n                        }\r\n                        else {\r\n                            player.chooseUseTarget(result.links[0], true, false);\r\n                            Evt.cards.remove(result.links[0]);\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.cards.length == 0) {\r\n                            Evt.finish();\r\n                            return;\r\n                        }\r\n                        var cards = Evt.cards;\r\n                        var dialog = ui.create.dialog('『月喃』使用一张牌', cards);\r\n                        _status.dieClose.push(dialog);\r\n                        dialog.videoId = lib.status.videoId++;\r\n                        game.addVideo('cardDialog', null, ['月喃', get.cardsInfo(cards), dialog.videoId]);\r\n                        Evt.getParent().preResult = dialog.videoId;\r\n                        game.broadcast(function (cards, id) {\r\n                            var dialog = ui.create.dialog('月喃', cards);\r\n                            _status.dieClose.push(dialog);\r\n                            dialog.videoId = id;\r\n                        }, cards, dialog.videoId);\r\n                        Evt.dialog = dialog;\r\n                        game.log(player, '亮出了', '#y牌堆顶的牌');\r\n                        player.chooseButton().set('dialog', dialog.videoId).set('filterButton', function (button) {\r\n                            let player = _status.event.player;\r\n                            return player.hasUseTarget(button.link);\r\n                        }).set('ai', button => {\r\n                            let player = _status.event.player;\r\n                            let effect = player.getUseValue(button.link);\r\n                            if (effect > 0)\r\n                                return effect;\r\n                            return 0;\r\n                        });\r\n                    }, () => {\r\n                        if (!result.links[0]) {\r\n                            Evt.goto(5);\r\n                        }\r\n                        else {\r\n                            player.chooseUseTarget(result.links[0], true, false);\r\n                        }\r\n                    }, () => {\r\n                        Evt.dialog.close();\r\n                        _status.dieClose.remove(Evt.dialog);\r\n                        game.broadcast(function (id) {\r\n                            var dialog = get.idDialog(id);\r\n                            if (dialog) {\r\n                                dialog.close();\r\n                                _status.dieClose.remove(dialog);\r\n                            }\r\n                        }, Evt.dialog.videoId);\r\n                        if (Evt.cards.length == 0) {\r\n                            Evt.finish();\r\n                        }\r\n                    }],\r\n            }).setT('phaseDrawBegin1'),\r\n        },\r\n        card: {\r\n            niwei_sha: {\r\n                content() {\r\n                    Evt.target.recover(player);\r\n                    game.delay(0.5);\r\n                },\r\n            },\r\n            niwei_shan: {\r\n                content() {\r\n                    delete Evt.result;\r\n                    Evt.player.draw(2);\r\n                    game.delay(0.5);\r\n                },\r\n            },\r\n            niwei_tao: {\r\n                content() {\r\n                    Evt.target.loseHp();\r\n                    game.delay(0.5);\r\n                },\r\n            },\r\n            niwei_jiu: {\r\n                content() {\r\n                    Evt.target.chooseToUse().set('targetRequired', true);\r\n                    game.delay(0.5);\r\n                },\r\n            },\r\n        },\r\n        dynamicTranslate: {\r\n            tiantang(player) {\r\n                let str = lib.translate.tiantang_info;\r\n                if (player.$.haoren === true)\r\n                    return `<font color=#fcd>${str.slice(0, str.indexOf(`（`)).replace(/弃置/g, `重铸`)}</font>${str.slice(str.indexOf(`（`))}`;\r\n                return str;\r\n            },\r\n            liying(player) {\r\n                let str = lib.translate.liying_info;\r\n                if (player.$.fuyu === true)\r\n                    return `<font color=#fcd>${str.slice(0, str.indexOf(`（`)).replace(/基本/g, `通常锦囊`)}</font>${str.slice(str.indexOf(`（`))}`;\r\n                return str;\r\n            },\r\n            gunxun(player) {\r\n                let str = lib.translate.gunxun_info;\r\n                switch (player.$.gunxun) {\r\n                    case 1: return str.replace(/①红色/g, `<span class=\"firetext\">①红色</span>`).replace(/①【杀】/g, `<span class=\"firetext\">①【杀】</span>`);\r\n                    case 2: return str.replace(/②黑色/g, `<span class=\"browntext\">②黑色</span>`).replace(/②【闪】/g, `<span class=\"browntext\">②【闪】</span>`);\r\n                }\r\n            },\r\n            fengqing(player) {\r\n                let str = lib.translate.fengqing_info;\r\n                switch (player.$.fengqing) {\r\n                    case 1: return str.replace(/①视为使用了【酒】/g, `<span class=\"changetext\">①视为使用了【酒】</span>`);\r\n                    case 2: return str.replace(/②视为使用了【桃】/g, `<span class=\"changetext\">②视为使用了【桃】</span>`);\r\n                    case 3: return str.replace(/③跳过本回合的判定和弃牌阶段/g, `<span class=\"changetext\">③跳过本回合的判定和弃牌阶段</span>`);\r\n                }\r\n                return str;\r\n            },\r\n            erni(player) {\r\n                let str = lib.translate.erni_info;\r\n                switch (player.$.erni) {\r\n                    case 1: return str.replace(/①【杀】/g, `<span class=\"changetext\">①【杀】</span>`);\r\n                    case 2: return str.replace(/②【闪】/g, `<span class=\"changetext\">②【闪】</span>`);\r\n                    case 3: return str.replace(/③【桃】/g, `<span class=\"changetext\">③【桃】</span>`);\r\n                }\r\n                return str;\r\n            },\r\n            luqiu(player) {\r\n                let str = lib.translate.luqiu_info;\r\n                switch (player.$.luqiu) {\r\n                    case 1: return str.replace(/①视为使用一张【杀】/g, `<span class=\"changetext\">①视为使用一张【杀】</span>`);\r\n                    case 2: return str.replace(/②摸一张牌/g, `<span class=\"changetext\">②摸一张牌</span>`);\r\n                    case 3: return str.replace(/③弃一张牌/g, `<span class=\"changetext\">③弃一张牌</span>`);\r\n                }\r\n                return str;\r\n            },\r\n            qianjiwanbian(player) {\r\n                let str = lib.translate.qianjiwanbian_info;\r\n                return player.$.qianjiwanbian_change ? str.replace(/雷电/g, `<span class=\"changetext\">${get.rawName(player.$.qianjiwanbian_change)}</span>`) : str;\r\n            },\r\n            shangsheng(player) {\r\n                let str = lib.translate.shangsheng_info;\r\n                let num = player.$.shangsheng_Buff || 1;\r\n                return num ? str.replace(/1/g, `<span class=\"changetext\">${num}</span>`) : str;\r\n            },\r\n            lianyin(player) {\r\n                let str = lib.translate.lianyin_info;\r\n                if (player.awakenedSkills.includes(`guixiang`)) {\r\n                    return str.replace(/使用/g, `<span class=\"changetext\">使用或打出</span>`);\r\n                }\r\n                return str;\r\n            },\r\n            xuanying(player) {\r\n                let str = lib.translate.xuanying_info;\r\n                if (player.awakenedSkills.includes(`houfan`)) {\r\n                    return str.replace(/使用/g, `<span class=\"changetext\">使用或打出</span>`);\r\n                }\r\n                return str;\r\n            },\r\n            shixi(player) {\r\n                let str = lib.translate.shixi_info;\r\n                if (player.$.yuezhi) {\r\n                    return str.replace(/（你）/g, `<span class=\"changetext\">（你或一名<皇珈骑士>）</span>`);\r\n                }\r\n                return str;\r\n            },\r\n            banmao(player) {\r\n                if (player.$.banmao)\r\n                    return `【已修改】 锁定技 你造成或受到来自【杀】的伤害时，来源摸一张牌。`;\r\n                return `锁定技 若你未受伤，你不能使用【闪】或【酒】。你造成或受到来自【杀】的伤害时，来源摸一张牌。`;\r\n            },\r\n            daoyi(player) {\r\n                let str = lib.translate.daoyi_info;\r\n                switch (player.$.daoyi) {\r\n                    case 0: return str.replace(/①颜色/g, `<span class=\"changetext\">①颜色</span>`);\r\n                    case 1: return str.replace(/②点数/g, `<span class=\"changetext\">②点数</span>`);\r\n                    case 2: return str.replace(/③花色/g, `<span class=\"changetext\">③花色</span>`);\r\n                    case 3: return str.replace(/④牌名/g, `<span class=\"changetext\">④牌名</span>`);\r\n                }\r\n                return str;\r\n            },\r\n            xiangnuo(player) {\r\n                let str = lib.translate.xiangnuo_info;\r\n                switch (player.$.xiangnuo) {\r\n                    case 1: return str.replace(/①进入/g, `<span class=\"changetext\">①进入</span>`);\r\n                    case 2: return str.replace(/②离开/g, `<span class=\"changetext\">②离开</span>`);\r\n                }\r\n                return str;\r\n            },\r\n            qingsui(player) {\r\n                let str = lib.translate.qingsui_info;\r\n                switch (player.$.qingsui) {\r\n                    case 0: return str.replace(/①『集爱』/g, `${lib.spanClass(`①『集爱』`, 'changetext')}`);\r\n                    case 1: return str.replace(/②『盛阴』/g, `${lib.spanClass(`②『盛阴』`, 'changetext')}`);\r\n                    case 2: return str.replace(/③『全域』/g, `${lib.spanClass(`③『全域』`, 'changetext')}`);\r\n                }\r\n                return str;\r\n            },\r\n            tuncai(player) {\r\n                let str = lib.translate.tuncai_info;\r\n                let result = /(阳~.*?)[；。].*(阴~.*?)[；。]/g.exec(str);\r\n                let yang = result[1], yin = result[2];\r\n                if (player.$.tuncai === true)\r\n                    return str.replace(yang, lib.spanClass(yang, 'changetext'));\r\n                return str.replace(yin, lib.spanClass(yin, 'changetext'));\r\n            },\r\n            yujian(player) {\r\n                let str = lib.translate.yujian_info;\r\n                let result = /(阳~.*?)[；。].*(阴~.*?)[；。]/g.exec(str);\r\n                let yang = result[1], yin = result[2];\r\n                if (player.$.yujian === true)\r\n                    return str.replace(yang, lib.spanClass(yang, 'changetext'));\r\n                return str.replace(yin, lib.spanClass(yin, 'changetext'));\r\n            },\r\n            wenda(player) {\r\n                let str = lib.translate.wenda_info;\r\n                let result = /(阳~.*?)[；。].*(阴~.*?)[；。]/g.exec(str);\r\n                let yang = result[1], yin = result[2];\r\n                if (player.$.wenda === true)\r\n                    return str.replace(yang, lib.spanClass(yang, 'changetext'));\r\n                return str.replace(yin, lib.spanClass(yin, 'changetext'));\r\n            },\r\n            yinxu(player) {\r\n                if (player.$.yinxu === true)\r\n                    return `转换技 你可以将一张${lib.spanClass(`①锦囊牌`, 'changetext')}②装备牌当作无视距离和次数限制的【杀】使用；以此使用的【杀】被抵消时，你可以令你或目标调整手牌至上限。`;\r\n                return `转换技 你可以将一张①锦囊牌${lib.spanClass(`②装备牌`, 'changetext')}当作无视距离和次数限制的【杀】使用；以此使用的【杀】被抵消时，你可以令你或目标调整手牌至上限。`;\r\n            },\r\n        },\r\n        translate: {\r\n            duoduopoi: '多多poi',\r\n            duoduopoi_ab: '多多',\r\n            ShigureUi: '时雨羽衣',\r\n            xinyuelan: `新月岚`,\r\n            xinyuelan_ab: `炒作大师`,\r\n            chisha: `迟砂`,\r\n            chisha_info: `准备阶段，你可以将手牌调整至全场唯一最多，若如此做，你不能使用本回合摸到的牌直到回合结束。`,\r\n            chisha_append: lib.figurer(`FAQ：“将手牌调整至全场唯一最多”不属于摸牌`),\r\n            wujian: `鹜荐`,\r\n            wujian_info: `你对其他角色造成伤害或受到其他角色的伤害后，若你手牌数多于对方，你可以与其交换手牌。`,\r\n            Shiranekoyuki: `白音小雪`,\r\n            jvliu: `拒流`,\r\n            jvliu_info: `其他角色使用非基本牌时，你可以失去一点体力取消之。`,\r\n            jvliu_append: lib.figurer(`特性：干扰`),\r\n            wuxia: `无瑕`,\r\n            wuxia_info: `觉醒技 准备阶段，若你体力为1，你增加一点体力并回复一点体力，弃置三张手牌（若不足则改为失去『拒流』）并获得『鸢揺』。`,\r\n            wuxia_yuanyao: `鸢揺(雪)`,\r\n            wuxia_yuanyao_append: lib.figurer(`特性：制衡`),\r\n            TsukushiAria: `月紫亚里亚`,\r\n            tatongling: `彤灵`,\r\n            tatongling_info: `一名角色体力流失或受到来源为你的伤害后，你可令其选择一项：\r\n\t\t\t将两张手牌置于你的武将牌上；翻面并回复一点体力，令你的『彤灵』失效直到本阶段结束。<br>\r\n\t\t\t当你的阶段被跳过时，你获得武将牌上的牌。`,\r\n            tatongling_append: lib.figurer(`特性：压制`),\r\n            yumeng: `预梦`,\r\n            yumeng2: `预梦`,\r\n            yumeng_info: `你可以跳过判定阶段与摸牌阶段，指定一名其他角色，其受到的伤害改为体力流失，直到你的下个回合开始。`,\r\n            AoiYui: `碧居结衣`,\r\n            suyuan: `溯愿`,\r\n            suyuan2: `溯愿`,\r\n            suyuan_info: `你的牌进入弃牌堆时，若这些牌包含三种或以上花色，\r\n\t\t\t你可以令一名其他角色获得这些牌并受到一点无来源的伤害，你于下个准备阶段获得其等量牌。`,\r\n            mujian: `幕间`,\r\n            mujian2: `幕间`,\r\n            mujian_info: `锁定技 若你以体力为 0 的状态死亡，下个轮次开始时，你复活并发现一个主动技，获得之直到你下次死亡。`,\r\n            NachoNeko: `甘城なつき`,\r\n            cirong: `赐绒`,\r\n            cirong_info: `出牌阶段限一次，你可以将一张手牌交给相邻角色。`,\r\n            maoyu: `猫羽`,\r\n            maoyu_info: `回合内，其他角色因为技能获得牌时，你可以令其选择一项：\r\n\t\t\t交给你两张牌；弃置一张牌，令其下家摸一张牌。`,\r\n            HinokumaRan: `日ノ隈らん`,\r\n            HinokumaRan_ab: `日ノ隈兰`,\r\n            yixiang: `异想`,\r\n            yixiang_info: `准备阶段，你可以翻面并令一名角色回复已损失的体力值，本回合结束时，其展示手牌，每缺少一种类型，其失去 1 点体力，你摸 1 张牌。`,\r\n            xianyu: `衔鱼`,\r\n            xianyu2: `衔鱼`,\r\n            xianyu_info: `游戏开始时，你可以指定一名角色，你失去体力时，其摸牌至上限；\r\n\t\t\t你或其死亡时，对方重置且翻至正面。`,\r\n            TEST: `测试员`,\r\n            Ruki: `琉绮Ruki`,\r\n            Ruki_ab: `琉绮`,\r\n            beixie: `备械`,\r\n            beixie_info: `${lib.discoloration1}游戏开始时，你可以指定获得牌堆中的一张牌，且若为武器牌，你立即装备之。`,\r\n            hunzhan: `混战`,\r\n            hunzhan_info: `锁定技 一名角色受到伤害时，其可立即使用一张牌，若其如此做，你摸一张牌。`,\r\n            YukiTuan: `雪团yuki`,\r\n            YukiTuan_ab: `雪团`,\r\n            chentu: `衬兔`,\r\n            chentu_info: `出牌阶段限一次，你可以弃置任意张牌，然后若你的手牌数为全场最低，你于下个回合开始时摸此次弃牌数两倍的牌。`,\r\n            chentu_append: lib.figurer(`特性：制衡`),\r\n            sishu: `饲鼠`,\r\n            sishu_info: `锁定技 回合内，你需要使用基本牌时，能且仅能将一组花色的牌交给一名其他角色视为使用之。`,\r\n            sishu_append: lib.figurer(`一组花色的牌：即四张花色各不相同的牌；特性：自肃（不能以其他方式使用基本牌）`),\r\n            Nyanners: `Nyanners`,\r\n            Nyanners_ab: `喵喵人`,\r\n            shenghuo: `圣火`,\r\n            shenghuo_info: `出牌阶段限X次，你可以观看牌堆顶与底各X张牌，然后将其中的任意张置于牌堆另一端。（X为你上一次受到伤害的伤害值+1）`,\r\n            shenghuo_append: lib.figurer(`特性：控顶`),\r\n            dipo: `底破`,\r\n            dipo_info: `锁定技 若你已受伤，你摸牌时从牌堆底摸取且摸牌量+1。`,\r\n            miaoche: `喵车`,\r\n            miaoche_info: `主公技 英V于弃牌阶段弃置牌后，你可以获得其中一张弃牌。`,\r\n            Ironmouse: `Ironmouse`,\r\n            Ironmouse_ab: `铁耗子`,\r\n            haosun: `耗损`,\r\n            haosun_info: `回合开始时，你可以选择一项：<br>回复1点体力以重置此技能并修改『伴猫』，然后你本回合摸牌量-1；声明一种你可以使用的基本牌并令你不能使用之，然后你本回合摸牌量+1。`,\r\n            banmao: `伴猫`,\r\n            banmao_info: `锁定技 若你未受伤，你不能使用【闪】或【酒】。你造成或受到来自【杀】的伤害时，来源摸一张牌。`,\r\n            banmao_rewrite: `伴猫·改`,\r\n            banmao_rewrite_info: `锁定技 你造成或受到来自【杀】的伤害时，来源摸一张牌。`,\r\n            Froot: `Froot`,\r\n            Froot_ab: `巫妖`,\r\n            exiao: `恶哮`,\r\n            exiao_info: `你使用通常锦囊牌时，可以进行一次判定，若结果为黑色，其不能被【无懈可击】抵消且你获得判定牌。`,\r\n            jinmei: `禁魅`,\r\n            jinmei_info: `轮次技 其他角色的回合开始时，你可以交给其一张黑色牌，然后其本回合摸牌量-1。`,\r\n            jinmei_append: lib.figurer(`特性：干扰`),\r\n            Veibae: `Veibae`,\r\n            Veibae_ab: `白恶魔`,\r\n            zhexun: `哲循`,\r\n            zhexun0: `哲循`,\r\n            zhexun_info: `你使用的一张牌若与你本回合已使用的所有牌颜色相同，其不可被响应且可以额外指定一个目标。`,\r\n            yuci: `欲词`,\r\n            yuci_info: `锁定技 若场上的其他角色均为同一性别，你每个阶段首次摸牌量+1。`,\r\n            Melody: `Projekt Melody`,\r\n            Melody_ab: `Mel`,\r\n            kuangbiao: `狂飙`,\r\n            kuangbiao_info: `锁定技 你的♥手牌视为【无中生有】。你使用的♥手牌结算后，你失去不为1的一点体力并将此牌置于武将牌上。你已受伤时，可以将『狂飙』牌如手牌般使用或打出。`,\r\n            leizhu: `磊诛`,\r\n            leizhu_info: `你每使用三张锦囊牌，可以为此牌增加一个目标，然后其与你各受到一点伤害。`,\r\n            tonggan: `同甘`,\r\n            tonggan_info: `主公技 锁定技 与你势力相同的角色，在奇数/偶数轮次内，每阶段首次摸牌量-1/+1。`,\r\n            Silvervale: `Silvervale`,\r\n            Silvervale_ab: `樱花狼灵`,\r\n            yingling: `樱聆`,\r\n            yingling_info: `锁定技 你每阶段首次摸牌时，进行一次判定，若结果为红色，本次摸牌量+1。`,\r\n            duchun: `渎纯`,\r\n            duchun_info: `你的判定牌生效后，你可以令一名其他角色获得之，其下次摸牌量-1。`,\r\n            ShishiroBotan: `狮白牡丹`,\r\n            dan: `弹`,\r\n            sbliedan: `烈弹`,\r\n            sbliedan2: `烈弹`,\r\n            sbliedan_info: `当你使用【杀】指定一名其他角色时，你可以令其将X张牌置于你的武将牌上，称之为「弹」。若如此做，一个弃牌阶段结束时，其可以获得等量的「弹」。若回合结束时你的武将牌上仍有「弹」，你获得之（X等于当前轮次数且至多为7）。`,\r\n            sbliedan_append: lib.figurer(`特性：爆发 破军`),\r\n            buqiang: `补枪`,\r\n            buqiang_info: `当其他角色体力值改变为1时，你可以对其使用一张【杀】。`,\r\n            PinkyPopHepburn: `PinkyPopHepburn`,\r\n            PinkyPopHepburn_ab: `PPH`,\r\n            pphpanfeng: `攀峰`,\r\n            pphpanfeng_info: `出牌阶段开始时或你受到伤害后，你可以进行一次判定，若结果为红色，你指定体力最多的一名角色，对其造成一点伤害；若其因此进入濒死状态，你不能发动『攀峰』直到本回合结束。`,\r\n            lanyue: `揽月`,\r\n            lanyue_info: `限定技 一名角色使用【杀】造成伤害后，你可以弃一张牌令其体力上限+1，并与其各摸伤害值的牌。`,\r\n            HosimiyaSio: `星宫汐`,\r\n            yuanyao: `鸢揺`,\r\n            yuanyao_info: `出牌阶段限X次，若你的手牌数不多于体力上限，你可以交换体力值与手牌数。（X为场上存在的女性角色数）`,\r\n            yuanyao_append: lib.figurer(`特性：制衡`),\r\n            gongni: `宫逆`,\r\n            gongni_info: `限定技 准备阶段开始时，或你于回合外使用或打出一张牌后，若所有角色均已受伤，你可以令所有角色依次交换体力值与已损失体力值。`,\r\n            luyao: `陆鳐LuLu`,\r\n            luyao_ab: `陆鳐`,\r\n            manyou: `鳗游`,\r\n            manyou_info: `每回合限一次，当雷电或海洋属性的【杀】进入弃牌堆时，你可以获得之，以此获得的牌被使用时不计入次数。`,\r\n            changjie: `长阶`,\r\n            changjie_info: `锁定技 出牌阶段结束时，若你于本阶段内造成过伤害，你摸X张牌，若没有，你弃X张牌。（X为你本局游戏内使用属性【杀】的次数）`,\r\n            changjie_append: lib.figurer(`特性：成长`),\r\n            shanbao: `扇宝`,\r\n            fengxu: `风许`,\r\n            fengxu_info: `你使用牌指定唯一目标时，可以将其区域内的一张牌移至其下家（可替换），若未发生替换，则对其下家重复此流程，直到发生替换或重复了五次。<br>若你的牌因此发生了替换，此技能结算后你摸重复次数的牌，然后不能发动此技能直到你下一次弃置手牌。`,\r\n            fengxu_append: lib.figurer(`特性：捡瓶子`),\r\n            qiudi: `秋蒂Q`,\r\n            xiangnuo: `香诺`,\r\n            xiangnuo2: `香诺-转换`,\r\n            xiangnuo_info: `转换技 当牌①进入②离开你的装备区时，你可以令一名角色摸两张牌，若其体力为全场唯一最低，额外回复一点体力。<br>\r\n\t\t\t出牌阶段限一次，你可以重铸点数之和为Q(12)的手牌并转换一次『香诺』。`,\r\n            xiaoxiayu: `Siva小虾鱼`,\r\n            xiaoxiayu_ab: `小虾鱼`,\r\n            tanghuang: `堂皇`,\r\n            tanghuang_info: `每回合限一次，当你成为其他角色使用牌的目标时，你可以摸X张牌并令其弃置你和其共计X+3张牌，然后弃置牌数：较少者～受到一点伤害；较多者～摸弃牌差的牌。（X为你已损失的体力值且至少为1）`,\r\n            xiejiang: `蟹酱`,\r\n            xiejiang_info: `锁定技 你摸两张以上的牌后，获得1点护甲；你失去护甲后，当前回合角色摸两张牌。`,\r\n            tianxixi: `田汐汐`,\r\n            lache: `拉扯`,\r\n            lache_info: `你回复体力时，可以令当前回合角色摸两张牌；你弃置两张以上的牌或护甲减少后，可以回复一点体力，若发生在回合外，你摸等量牌。`,\r\n            danfu: `蛋孵`,\r\n            danfu_info: `锁定技 结束阶段，若你本回合未造成伤害，你失去一点体力并获得1点护甲；你失去1点护甲后，当前回合角色摸一张牌。`,\r\n            iiivan: `伊万`,\r\n            shuipo: `水魄`,\r\n            shuipo_info: `锁定技 你弃置三张以上的牌或失去最后1点护甲后，回复一点体力并摸一张牌；你每阶段首次使用锦囊牌时，失去一点体力并弃置任意张牌。`,\r\n            ming_pianchao: `片超`,\r\n            pianchao: `片超`,\r\n            pianchao_phaseUseBy: `片超`,\r\n            pianchao_info: `你体力流失后，可以亮出两张手牌并获得1点护甲；当你弃置亮出的手牌时，可以使用其中一张，并于此额定阶段结束后进行一个额外的出牌阶段。`,\r\n            shenxiaoya: `申䒕雅`,\r\n            xyshixi: `实习`,\r\n            xyshixi_info: `出牌阶段限一次，你可以对一名角色造成一点伤害，然后令其回复一点体力。`,\r\n            wenxin: `闻新`,\r\n            wenxin_info: `结束阶段，你可以令本回合回复过体力的角色各摸X张牌。（X为你已损失的体力值且至少为1）`,\r\n            lanruo: `兰若Ruo`,\r\n            dieyuan: `蝶缘`,\r\n            dieyuan_info: `其他角色回复1点体力后，你可以令其摸X张牌，令其选择一项：<br>令你回复一点体力；交给你X张牌。（X为你与其的体力差且至少为1）`,\r\n            shengyang: `盛阳`,\r\n            shengyang_info: `出牌阶段限一次，你可以交给一名其他角色一张牌并进行一次判定，若结果的点数：<br>不大于2X~你获得其至多2X张牌；大于2X~其回复一点体力。`,\r\n            lanre: `兰若Re`,\r\n            daoyi: `道易`,\r\n            daoyi_info: `转换技 你可以修改场上一次判定结果的①颜色②点数③花色④牌名。此技能转换至①时，你可以对当前回合角色造成1点雷电伤害。`,\r\n            shengyin: `盛阴`,\r\n            shengyin_info: `出牌阶段限一次，你可以展示其他角色的一张手牌并令其进行一次判定，若结果与展示牌：类型相同～你获得展示牌；颜色相同～你与其各摸一张牌。`,\r\n            hunmiaomiao: `魂喵喵`,\r\n            hun: `魂`,\r\n            xiuyou: `修又`,\r\n            xiuyou_info: `锁定技 你进行判定/受到伤害后，你将判定牌/牌堆顶牌置于武将牌上，称为「魂」。你进入濒死状态时，若「魂」的数量多于2，你需将一张「魂」交给当前回合角色，令其选择一项：<br>\r\n\t\t\t将全部手牌与你的「魂」交换；令你摸「魂」数量张牌；令你回复一点体力。<br>\r\n\t\t\t若此技能多次对其发动，改为选择两项。`,\r\n            jiyuan: `楫渊`,\r\n            jiyuan_info: `轮次技 一名角色的准备阶段，你可以令其进行一次判定，若结果为：红色~其摸两张牌；黑色~其受到一点无来源的伤害。`,\r\n            caicai: `菜菜姐`,\r\n            tibing: `体并`,\r\n            tibing_info: `锁定技 你跳过不为出牌阶段的阶段。你于出牌阶段开始时，摸两张牌并获得自己场上的所有牌；于出牌阶段结束时，展示并弃置手牌中的非基本牌。`,\r\n            guangtui: `广推`,\r\n            guangtui_info: `若你已受伤，你可以扣减一点体力上限，将其他角色的弃牌阶段改为自己的出牌阶段。`,\r\n            mibai: `米白zzz`,\r\n            mibai_ab: `米白`,\r\n            zhepie: `折撇`,\r\n            zhepie_info: `准备阶段，你可以亮出牌堆顶牌并令一名角色获得之，其无法使用同类型的牌直到其回合结束。`,\r\n            chumo: `除魔`,\r\n            chumo_info: `轮次技。你区域内的牌进入弃牌堆时，你可以令一名角色获得之，若此牌无法被立即使用，你摸两张牌。`,\r\n            Ahab: `亚哈`,\r\n            ahbingyi: `秉义`,\r\n            ahbingyi_info: `其他角色摸牌时，若其手牌为全场最高，你可以失去一点体力，取消之并弃置其一张牌。`,\r\n            sujian: `肃监`,\r\n            sujian_info: `你受到来自一张牌的伤害/发动『秉义』时，可以将此牌/一张手牌置于武将牌上，称为「肃」。<br>与「肃」同名称或花色的牌在被使用时，你可以将一张对应的「肃」置于牌堆顶，取消此牌任意名目标。`,\r\n            sujian_append: lib.figurer(`特性：控顶 干扰`),\r\n            FushimiGaku: `伏见学`,\r\n            exi: `恶戏`,\r\n            exi_info: `出牌阶段限一次，你可与一名有手牌的角色猜拳：赢家摸两张牌，输家视为对赢家使用了一张【杀】。若以剪刀输，则将使用【杀】改为使用【决斗】。`,\r\n            suisui: `祟崇`,\r\n            suisui_info: `锁定技 当你的体力值不为1/为1时，防止你每回合首次受到的无/有来源伤害。`,\r\n            Xiaorou: `小柔`,\r\n            rouqing: `柔情`,\r\n            rouqing_info: `每回合限一次，一名角色体力减少1点后，你可以令其观看牌堆顶的四张牌并将至少（3）张牌置于牌堆底，获得其余的牌。`,\r\n            rouqing_append: lib.figurer(`特性：卖血`),\r\n            guangying: `光萦`,\r\n            guangying_info: `锁定技 当你一次性获得四张以上的牌后，你回复一点体力；当你不因使用失去手牌后，你『柔情』的（）值-1，直到你下一次发动『柔情』。`,\r\n            Ailurus: `艾露露`,\r\n            aldanyan: `胆燕`,\r\n            aldanyan_info: `出牌阶段限一次，你可以将两张牌交给体力不少于你的一名角色，令其选择一项：\r\n\t\t\t令你获得其三张牌；受到你造成的一点伤害。`,\r\n            aldanyan_append: lib.figurer(`特性：直接伤害`),\r\n            lunao: `胡闹`,\r\n            lunao_info: `当你造成伤害时，若目标体力不多于你，你可以令本次伤害改为指定属性且此伤害+1，本次伤害结算后立即结束当前回合。`,\r\n            ByakuyaMayoi: `白夜真宵`,\r\n            bykuangxin: `狂信`,\r\n            bykuangxin_info: `出牌阶段限一次，你可以进行判定直到出现两次点数为A～10的结果，然后你获得其他判定牌，并根据判定顺序组合（第一次为个位、第二次为十位）执行：<br>\r\n\t\t\t${lib.spanClass(`01～05`, `greentext`)}--摸两张牌增加一点体力上限；\r\n\t\t\t${lib.spanClass(`06～40`, `changetext`)}--回复一点体力；\r\n\t\t\t${lib.spanClass(`41～70`, `bluetext`)}--视为使用一张【决斗】；\r\n\t\t\t${lib.spanClass(`71～95`, `browntext`)}--失去一点体力并弃置手牌至上限；\r\n\t\t\t${lib.spanClass(`96～100`, `legendtext`)}--依次获得其他角色随机一张手牌并扣减一点体力上限。`,\r\n            Mamoru: `高原守`,\r\n            shoumi: `密守`,\r\n            shoumi_info: `锁定技 当且仅当你的体力变为0时，你进入濒死状态。你的体力小于/大于0时，视为拥有『英姿』/『鬼才』。`,\r\n            shoumi_yingzi: `英姿(密)`,\r\n            shoumi_yingzi_info: `锁定技 摸牌阶段摸牌时，你额外摸一张牌；你的手牌上限为你的体力上限。`,\r\n            shoumi_guicai: `鬼才(密)`,\r\n            shoumi_guicai_info: `在任意角色的判定牌生效前，你可以打出一张牌代替之`,\r\n            yanwang: `妄诳`,\r\n            yanwang_info: `其他角色使用牌指定你为目标时，其可以令你回复一点体力，然后展示并获得你的一张牌；若其因此获得了黑色牌，你可以令其视为对你指定的一名角色使用一张【决斗】。`,\r\n            Niuniuzi: `牛牛子`,\r\n            qiying: `奇嘤`,\r\n            qiying_info: `你于其他角色的回合受到伤害后，你可以翻面并视为使用一张【南蛮入侵】。`,\r\n            hengxuan: `恒宣`,\r\n            hengxuan_info: `结束阶段，你可以摸两张牌；当你被其他角色指定为牌的唯一目标时，立即弃置以此法摸到的牌。`,\r\n            Zaodaoji: `早稻叽`,\r\n            guangan: `珖黯`,\r\n            guangan_info: `你的上家对你使用牌，或你对你的下家使用牌时，你可以摸一张牌。每轮限X次（X为场上存活的其他角色数）。`,\r\n            guangan_append: lib.figurer(`特性：易上手`),\r\n            lanxuan: `澜绚`,\r\n            lanxuan_info: `每回合每项限一次，你造成或受到伤害后，可以立即无视距离与次数限制使用一张牌。`,\r\n            zonghe: `纵合`,\r\n            zonghe_info: `<font color=#fbd>主公技</font> 游戏开始时，你可以指定一名社势力角色，你对其发动『珖黯』时无视座次限制。`,\r\n            Hiiro: `希萝`,\r\n            jiace: `铗策`,\r\n            jiace_info: `你成为黑色牌的目标时，可以将一张与之同花色的手牌交给来源，为此牌增加或减少一个目标。若为你本回合首次发动『铗策』，你于此牌结算后获得之。`,\r\n            xiangying: `襄英`,\r\n            xiangying_info: `出牌阶段限一次，你可将任意红色牌交给一名手牌数小于你的角色，然后若其手牌数大于你，其展示手牌，你摸其中红黑色牌数差的牌。`,\r\n            xiangying_append: lib.figurer(`特性：难上手`),\r\n            HoureiTenten: `凤玲天天`,\r\n            shengquan: `圣泉`,\r\n            shengquan_info: `你受到伤害后，可以弃置任意张同色的手牌，回复X点体力（X为弃牌数-1）。`,\r\n            yizhu: `译注`,\r\n            yizhu_info: `出牌阶段限一次，你可以失去一点体力，获得一名其他角色的两张手牌；然后直到你下次发动此技能，其获得被你弃置的牌。`,\r\n            Moemi: `萌实`,\r\n            chengzhang: `澄涨`,\r\n            chengzhang_info: `你装备区内的一张牌进入弃牌堆时，你可以令一名其他角色使用之。`,\r\n            mengdong: `萌动`,\r\n            mengdong_info: `你使用牌指定本回合未指定过的角色为目标时，若其装备区牌数为奇数，你可以摸一张牌。`,\r\n            NatsumiMoe: `夏实萌惠`,\r\n            moemanyi: `满溢`,\r\n            moemanyi_info: `锁定技 你的攻击范围为全场最高/最低时，不能成为延时锦囊牌/黑色【杀】的目标。`,\r\n            cuchuan: `粗串`,\r\n            cuchuan_info: `摸牌阶段，你可以放弃摸牌，改为令距离为1的角色各摸一张牌，然后你获得这些角色各一张牌。`,\r\n            Harusaruhi: `春猿火`,\r\n            huoju: `火居`,\r\n            huoju_info: `锁定技 你和相邻角色造成的伤害改为火焰伤害。你造成或受到火焰伤害后，若伤害来源手牌/体力全场最少，其翻面并摸一张牌/回复一点体力。`,\r\n            zouyang: `奏扬`,\r\n            zouyang_info: `你使用非装备牌仅指定一名角色为目标时，可使其相邻角色也成为此牌目标，其中不能成为合法目标的摸一张牌，若均摸牌或均成为目标，你不能再发动此技能直到回合结束。`,\r\n            Koko: `幸祜`,\r\n            xiezhen: `谐振`,\r\n            xiezhen_info: `距离你为1的角色造成伤害时，你可以翻面并☆弃置其一张牌，若为装备牌，此伤害+1且你可以重复☆。`,\r\n            wenzhou: `吻昼`,\r\n            wenzhou_info: `锁定技 你受到大于1点的伤害后，令来源翻面；一名角色翻至正面时，令其摸一张牌。`,\r\n            NecoraNyaru: `猫雷NyaRu`,\r\n            NecoraNyaru_ab: `猫雷`,\r\n            miaolu: `露佐`,\r\n            miaolu_info: `一名角色进入濒死状态时，你可以弃置其一张手牌，若为基本牌，你获得之；若不为，其回复一点体力。`,\r\n            benglei: `绷雷`,\r\n            benglei_info: `你受到 1 点伤害后，可以令一名角色进行一次判定，若结果为：♠～对其造成与本次伤害等量的雷电伤害；♣～依次弃置其两张牌；红色～对其发动一次『露佐』。`,\r\n            Shiratama: `白玉`,\r\n            meihua: `莓华`,\r\n            meihua_info: `轮次技 当♣牌不因弃置进入弃牌堆时，你可以获得之。`,\r\n            shentian: `审甜`,\r\n            shentian_info: `出牌阶段限一次，你可以观看一名角色的手牌并进行一次判定，然后重铸其中与判定牌花色不同的牌，每种花色至多一张。`,\r\n            KotobukiYume: `琴吹梦`,\r\n            xuanquan: `选权`,\r\n            xuanquan_backup: `选权`,\r\n            xuanquan_info: `出牌阶段限一次，你可以废除一个装备栏，获得其他角色的一张牌并令其获得『选权』。其他角色废除装备栏后，你摸一张牌。`,\r\n            rusu: `入俗`,\r\n            rusu_info: `你判定/装备区的牌减少时，你可以将一张锦囊/装备牌置于场上同区域。`,\r\n            UmitsukiShell: `海月シェル`,\r\n            beike: `贝壳潮流`,\r\n            beike_info: `锁定技 一局游戏内，当一种锦囊首次被使用时，你摸一张牌；若原始牌堆中所有种类的锦囊均被使用过，你造成的伤害+1。`,\r\n            wenda: `一问一答`,\r\n            wenda_info: `转换技 阳~你可以将一张装备牌当作一张锦囊牌使用。阴~你可以将一张基本牌当作【无懈可击】使用。`,\r\n            PastelUyu: `羽澄照うゆ`,\r\n            PastelUyu_ab: `羽澄照乌愈`,\r\n            chenming: `晨鸣`,\r\n            chenming_info: `回合开始时，你可以将本回合除弃牌阶段外的一个阶段改为摸牌阶段。若为出牌阶段，你可以视为使用一张无视距离的【杀】。`,\r\n            xiantong: `衔桐`,\r\n            xiantong_info: `当你受到伤害时，你可以进行一次判定并弃置两张与结果颜色或类型相同的牌令伤害-1；若此伤害未被防止，你获得此判定牌。`,\r\n            HIMEHINA: `田中姬&铃木雏`,\r\n            HIMEHINA_ab: `姬&雏`,\r\n            jichu: `姬雏轮舞`,\r\n            jichu_info: `若本回合被使用的上一张牌为锦囊牌，你使用牌可以额外选择一个目标。若本回合被使用的上一张牌为♦️，你使用牌生效并结算后摸一张牌。`,\r\n            mingshizhige: `命逝之歌`,\r\n            mingshizhige_info: `当你受到 1 点伤害后，你可以重铸所有手牌，然后使用因此失去的其中一张。`,\r\n            SephiraSu: `塞菲拉·苏`,\r\n            mishu: `数之秘术`,\r\n            mishu_info: `其他角色的回合结束时，你可以选择一项：<br>\r\n\t\t\t获得本回合进入弃牌堆的任意类型不同的牌，且若这些牌之和为质数，令其回复1点体力； 令其获得本回合进入弃牌堆的一种类型的牌，且若这些牌点数之积大于13，对其造成1点伤害。每轮每项限一次。`,\r\n            xingchen: `未卜星辰`,\r\n            xingchen_info: `当你受到伤害后，可摸五张牌，然后将五张牌以任意顺序置于牌堆顶。`,\r\n            xingchen_append: lib.figurer(`特性：控顶`),\r\n            CierraRunis: `谢拉·露妮丝`,\r\n            CierraRunis_ab: `谢拉`,\r\n            minghuahongxiao: `鸣花轰咲`,\r\n            minghuahongxiao_info: `你在回合外使用牌或在回合内弃置牌时，可根据你失去的牌执行对应项：基本牌~为下一张牌额外指定一名目标；锦囊牌~结束当前阶段，然后可以令一名没有手牌的角色摸两张牌；装备牌~回复1点体力。`,\r\n            Taffy: `永雏塔菲`,\r\n            qianqi: `迁奇`,\r\n            qianqi_info: `一名角色的回合开始时，你可以弃置X张牌，交换本回合的两个阶段，或令其本回合使用的前X张牌可指定目标数为1；<br>然后若本回合没有角色受到伤害，重置X（X为此技能发动的次数且至少为1）。`,\r\n            chutan: `雏探`,\r\n            chutan_info: `出牌阶段限一次，你可以弃置一张牌，选择两名其他角色。你的下个回合开始前，若目标角色于其回合使用牌指定过另一名目标角色为目标，你于其回合结束时获得其本回合使用的实体牌，否则其不能成为『雏探』的目标。`,\r\n            shanguangpika: `闪光pika`,\r\n            shanguangpika_ab: `闪光皮卡`,\r\n            yikai: `异开`,\r\n            yikai_info: `限定技 出牌阶段，你可令一名角色摸2张牌并对其造成一点雷电伤害。然后你可以选择其的一个限定技，若该技能：<br>\r\n\t\t\t未发动~该限定技失效直到你的下个回合开始；已发动~此回合结束后视为该限定技未发动过。`,\r\n            pkyuanjun: `元昀`,\r\n            pkyuanjun_info: `每回合限一次，你造成或受到雷电伤害时，可以将手牌调整至与对方相同，若你未因此摸牌，你回复一点体力。`,\r\n            Merry: `咩栗`,\r\n            qinhuo: `侵火`,\r\n            qinhuo_info: `当一名角色使用的【火攻】结算后，若之未造成伤害，你可以令另一名角色获得之。`,\r\n            lvecao: `略草`,\r\n            lvecao_info: `你受到伤害后，可以视为使用一张【铁索连环】，若有角色因此重置，你可以获得其区域内一张可见牌。`,\r\n            yangxi: `羊袭`,\r\n            yangxi_info: `出牌阶段限一次，你可以将一张非基本牌置于你的判定区，然后对一名角色造成1点雷电伤害。`,\r\n            Umy: `呜米`,\r\n            naisi: `奶死`,\r\n            naisi_info: `一个回合结束时，若你于此回合内回复过多次体力，你可以对一名角色造成X点伤害。（X为你本回合回复体力的次数）`,\r\n            tuzai: `图崽`,\r\n            tuzai_info: `你对一名角色造成伤害后，可以获得其区域内一张可见牌，并令其回复一点体力。`,\r\n            wuneng: `呜能`,\r\n            ming_wuneng: `呜能`,\r\n            wuneng_info: `出牌阶段，你可以亮出一张【桃】或【桃园结义】并摸一张牌。`,\r\n            RinaHayashi: `林莉奈`,\r\n            xilv: `习律`,\r\n            xilv_info: `其他角色因为技能摸牌时，你可以交给其一张手牌，然后其选择一项：<br>1.交给你摸到的牌；2.若你没有对应技能，令你获得之，直到你的下个回合结束。`,\r\n            bana: `拔奈`,\r\n            bana_info: `当一名角色的体力改变后，若其牌数≤体力值≤场上角色数，你可以令其摸一张牌。`,\r\n            Kira: `姬拉Kira`,\r\n            Kira_ab: `姬拉`,\r\n            weiguang: `微光`,\r\n            weiguang_info: `回合开始时，你可以使用一张牌，若与你以『微光』使用的每一张牌类型相同，你摸一张牌。`,\r\n            liangqin: `良寝`,\r\n            liangqin_info: `<font color=#f57>限定技</font> 你脱离濒死状态后，可以令你下个回合内第X次摸牌的摸牌量+X。`,\r\n            Menherachan: `七濑胡桃`,\r\n            shang: `裳`,\r\n            shangbei: `裳备`,\r\n            shangbei_info: `你受到伤害后，可以展示牌堆顶牌，若你没有与之花色相同的「裳」，你将之置于武将牌上，称为「裳」，然后摸一张牌。<br>出牌阶段开始时，你可以令一名角色获得某一类型的「裳」，若为其他角色获得，你回复一点体力。`,\r\n            qianqing: `迁情`,\r\n            qianqing_info: `锁定技 回合开始时，若你没有「裳」，你受到一点无来源的伤害。`,\r\n            liqingge: `李清歌`,\r\n            tage: `踏歌`,\r\n            tage_info: `每回合限X次，当一名角色于其回合内使用一张牌后，你可以打出一张点数与之相差1的牌替换之。你以此法获得牌的回合结束时，可以摸X张牌，然后将一张手牌交给当前回合角色。（X为你已损失的体力值且至少为1）`,\r\n            JingujiTamamo: `神宫司玉藻`,\r\n            aowei: `傲尾`,\r\n            aowei_info: `当其他角色的【杀】结算完毕即将进入弃牌堆时，你可打出一张同花色或点数的手牌替换之。若你获得的牌：<br>有属性~你可以令一名角色回复一点体力；无属性~你可以弃置一名角色的一张牌。`,\r\n            meizhan: `魅绽`,\r\n            meizhan_info: `主公技 每回合限一次，与你同势力的角色不因摸牌获得牌时，可以与你各摸一张牌。`,\r\n            Kino: `吉诺儿kino`,\r\n            Kino_ab: `吉诺儿`,\r\n            xiandu: `显渡`,\r\n            xiandu_info: `锁定技 一局游戏内，你每使用十张牌，摸X张牌（X为此技能被发动的次数且至多为5）`,\r\n            yexi: `椰熙`,\r\n            yexi_info: `出牌阶段，你可以令一名其他角色弃置你的一张牌，若其弃置了【杀】或装备牌，其将牌堆顶牌当作【杀】对你使用，然后你获得其一张牌。`,\r\n            tangjiuxia: `唐九夏`,\r\n            jiuxian: `韭仙`,\r\n            jiuxian_info: `你每使用九张牌，你可以令一名角色回复或失去一点体力。`,\r\n            yujian: `御剑`,\r\n            yujian_info: `转换技 阳~你使用装备牌时，可以摸一张牌并令其他角色装备之；阴~其他角色使用装备牌时，你可以弃一张牌并令你获得之。`,\r\n            Bafuko: `晴步子`,\r\n            shangsheng: `能力上升`,\r\n            shangsheng_info: `回合开始时，你于本回合获得一项效果：A.于摸牌阶段多摸1张牌；B.于出牌阶段多出1张【杀】；C.于弃牌阶段手牌上限+1。然后若本次选择与前两次均不同，此技能所有数字+1；否则-1（至少为1）。`,\r\n            shangsheng_append: lib.figurer(`特性：成长`),\r\n            jinghua: `镜花水月`,\r\n            jinghua_info: `出牌阶段限一次，你可以将X张牌依次展示并交给不同角色，令其无法使用相同类型的牌，直到你的下个回合开始（X为你本回合使用【杀】的次数）。`,\r\n            AmemachiF: `雨街F`,\r\n            ciling: `刺令`,\r\n            ciling_info: `你可以跳过出牌阶段，改为指定一名其他角色，其每次弃牌阶段结束后，你可以选择一项：\r\n\t\t\t1.获得其弃牌；2.视为对其使用一张【杀】。<br>\r\n\t\t\t『刺令』状态会持续直至其进入濒死状态或其对你使用了三张【杀】。`,\r\n            ciling2: `刺令`,\r\n            ciling2_info: `被杀手刺杀中`,\r\n            xiyu: `细雨`,\r\n            xiyu_info: `锁定技。你于回合外使用牌时，摸一张牌。`,\r\n            linxi: `麟＆犀`,\r\n            lilian: `历敛`,\r\n            lilian_info: `准备阶段，你可以令一名角色摸等同你体力上限的牌，然后令你不为全场唯一最低的体力上限扣减1点。`,\r\n            zihuai: `辎徊`,\r\n            zihuai_info: `轮次技 你一次性弃置至少X张牌后，可以摸X张牌。（X为你上一次于弃牌阶段弃置的牌数）`,\r\n            jike: `机萪`,\r\n            qianjiwanbian: `千机万变`,\r\n            qianjiwanbian_info: `当你造成伤害时，你可将此伤害改为（雷电）属性。<br>\r\n\t\t\t回合开始时或你于一个独立事件中首次造成伤害后，可修改（）内属性并发现一个有字与此技能某字拼音相同的技能，在你下个回合开始之前获得之。若选择『千机万变』，直到你的下个回合开始前此技能触发时额外发现一次。`,\r\n            qianjiwanbian_append: lib.figurer(`特性：难上手`),\r\n            xinkeniang: `新科娘`,\r\n            daimao: `呆毛科技`,\r\n            daimao_info: `锁定技 游戏开始时，你将牌堆顶牌置于武将牌上，称为「萪」；你使用与「萪」同花色的牌不受距离和次数限制；你进入濒死状态时，将一张与「萪」不同花色的牌置于「萪」中，若如此做，则你体力上限-1，回复满体力，摸三张牌。`,\r\n            hongtou: `红头文件`,\r\n            hongtou_info: `<font color=#f44>主公技</font> 当你需要使用或打出基本牌时，场上的国V可代替你使用或打出。`,\r\n            azhun: `天气阿准`,\r\n            azhun_ab: `阿准`,\r\n            tianqi: `天气`,\r\n            tianqi_mark: `天气`,\r\n            tianqi_info: `锁定技 游戏开始时，你将牌堆顶牌置于你的武将牌旁，称为「天气」。`,\r\n            yubao: `预报`,\r\n            yubao_info: `拥有「天气」的角色的准备阶段开始时，你可以观看牌堆顶的X张牌，并以任意顺序放回（X为场上「天气」的数量）。`,\r\n            yubao_append: lib.figurer(`特性：控顶`),\r\n            butaizhun: `不太准`,\r\n            butaizhun_info: `每回合限一次，你可以扣置一张手牌当任意一张基本牌或通常锦囊牌使用或打出。此时，未拥有「天气」的其他角色可质疑则翻开此牌：若为假则此牌作废，若为真则质疑角色将牌堆顶牌置于武将牌旁，称为「天气」。`,\r\n            butaizhun_guess: `不太准`,\r\n            butaizhun_respond: `不太准`,\r\n            butaizhun_wuxie: `不太准`,\r\n            butaizhun_ally_bg: `真`,\r\n            butaizhun_betray_bg: `假`,\r\n            zhongguobanai: `中国绊爱`,\r\n            liying: `立影`,\r\n            liying_info: `当你受到伤害或打出牌响应其他角色后，你可以获得来源X张牌，然后交给其X-1张牌；当你于一个阶段内以此法给出第二张牌时，你可以视为使用一张基本牌。（X为其体力值）`,\r\n            fuyu: `扶谕`,\r\n            fuyu_info: `觉醒技 准备阶段，若你通过『立影』给出的牌数为4的倍数。你扣减一点体力上限，将『立影』里的“基本”改为“通常锦囊”。`,\r\n            YamaUsagi: `山兔YamaUsagi`,\r\n            YamaUsagi_ab: `山兔`,\r\n            zhengmeng: `正萌`,\r\n            zhengmeng_info: `摸牌阶段，你可以改为翻面并投掷一枚骰子，摸骰点张牌，若骰点为6，你本局游戏内【杀】造成的伤害+1。`,\r\n            wadao: `蛙蹈`,\r\n            wadao_info: `你翻至正面时，可以令一名其他角色进行一个额外的回合。`,\r\n            RIKO: `栗子酱`,\r\n            tieyu: `铁驭`,\r\n            tieyu_info: `你使用非装备牌时，可以弃置（3）张牌，若弃牌颜色为：<br>\r\n\t\t\t黑色～此牌数值+1；红色～增加至多两个目标；无色～此技能（）值-1。<br>\r\n\t\t\t你使用装备牌时，可以摸（2）张牌。`,\r\n            tieyu_append: lib.figurer(`特性：成长<br>FAQ：“数值”仅限于伤害值、回复值与护甲获得值`),\r\n            EQueen: `乃琳`,\r\n            yehua: `夜话`,\r\n            yehua_info: `回合开始时，你可以将手牌调整至场上唯一最多并翻面。`,\r\n            fengqing: `风情`,\r\n            fengqing_info: `转换技 当你的武将牌状态发生变化时，你可以选择一名角色，其在其下个准备阶段①视为使用了【酒】②视为使用了【桃】③跳过本回合的判定和弃牌阶段。`,\r\n            fengqing_jiu: `风情-酒`,\r\n            fengqing_tao: `风情-桃`,\r\n            Carol: `珈乐`,\r\n            huangjia: `王力口乐`,\r\n            shixi: `时隙`,\r\n            shixi_info: `锁定技 游戏开始时，记录你的初始手牌。当（你）的牌进入弃牌堆时，你可以选定一张花色与之相同的记录牌。一个阶段结束时，每有两个选定你便摸一张牌，然后重置选定。`,\r\n            xueta: `靴匿`,\r\n            xueta_info: `你响应其他角色的牌后，可以弃一张牌，令其摸两张牌，并令其成为<皇珈骑士>。`,\r\n            yuezhi: `乐治`,\r\n            yuezhi_info: `<font color=#a7f>觉醒技</font> 回合开始时，若场上<皇珈骑士>的数量不少于你的体力值或手牌数，你增加一点体力上限并从弃牌堆获得你的初始手牌，每有一张无法获得，你回复1点体力并摸两张牌，然后修改『时隙』（）内容为“你或一名<皇珈骑士>”。`,\r\n            Ava: `向晚`,\r\n            yiqu: `亦趋`,\r\n            yiqu_info: `若你在其他角色执行技能的过程中被指定为目标，你可以获得该技能直到下次进入濒死状态。`,\r\n            wanxian: `挽弦`,\r\n            wanxian_info: `锁定技 你令其他角色进入濒死状态时，你失去来自『亦趋』额外技能并摸等量的牌。`,\r\n            Diana: `嘉然`,\r\n            quanyu: `全域`,\r\n            quanyu_info: `其他角色使用一张牌时，若你没有该花色的手牌，你可以令此牌无效并获得之，然后你展示所有手牌，每缺少一种花色便受到1点无来源的伤害。`,\r\n            quanyu_append: lib.figurer(`特性：干扰`),\r\n            wulian: `舞连`,\r\n            wulian_info: `<font color=#ecd>限定技</font> 出牌阶段，你可以摸等同于已损失体力值的牌，然后在本轮内获得『连破』。`,\r\n            lianpo: `连破`,\r\n            lianpo_info: `一名角色的回合结束时，若你本回合内杀死过角色，则你可以进行一个额外的回合。`,\r\n            Bella: `贝拉`,\r\n            aswusheng: `舞圣`,\r\n            aswusheng_info: `你连续使用或打出第（）张基本牌时，可以触发对应项：（0）使之不计入次数；（1）摸一张牌；（2）获得对方的一张牌；（3）回复1点体力。`,\r\n            aswusheng_append: lib.figurer(`特性：易上手`),\r\n            gunxun: `棍训`,\r\n            gunxun_info: `转换技 出牌阶段，你可以亮出至少一张①红色②黑色手牌使之视为①【杀】②【闪】，然后你可令装备区牌数少于本次亮出牌数的一名角色失去所有非锁定技直到回合结束。`,\r\n            ming_gunxunshan: `棍训:闪`,\r\n            ming_gunxunsha: `棍训:杀`,\r\n            Mikawa: `三川`,\r\n            zhezhuan: `辙转`,\r\n            zhezhuan_info: `每回合限一次，你可以将一张非基本牌当作具有任意应变标签的同名牌或基本牌使用。`,\r\n            setu: `涩涂`,\r\n            setu_info: `出牌阶段限一次，你可以将任意张点数之和小于18的手牌置于武将牌上。然后若你武将牌上牌之乘积大于100，你将这些牌置入弃牌堆，摸等量的牌，并对一名角色造成1点伤害。`,\r\n            Sakurai: `樱井林`,\r\n            junxu: `军序`,\r\n            junxu_info: `你每个回合使用第X张牌时，可以摸两张牌或回复一点体力。（X为你的体力值）`,\r\n            jingniang: `井酿`,\r\n            jingniang_info: `出牌阶段，你可以弃一张牌，令你的【杀】不计入次数且伤害+1，直到本回合结束。`,\r\n            ŌokamiMio: `大神澪`,\r\n            niwei: `逆位`,\r\n            ming_niwei: `逆位`,\r\n            xuanxu: `玄虚映实`,\r\n            xuanxu_info: `出牌阶段开始时，你可以亮出任意张基本牌，称为「逆位」牌，「逆位」牌不计入手牌数，且只能以以下效果对原不合法的目标使用：【杀】∽回复1点体力；【闪】∽摸两张牌；【桃】∽失去1点体力；【酒】∽立即使用一张牌。`,\r\n            weizeng: `味增弼佐`,\r\n            weizeng_info: `其他角色的回合开始时，你可以将任意亮出牌以任意顺序置于牌堆顶，其获得这些牌后，其所有同名牌在本回合内均视为「逆位」。`,\r\n            weizeng_append: lib.figurer(`特性：难上手 控顶`),\r\n            Ciyana: `希亚娜`,\r\n            yankui: `魇窥`,\r\n            yankui_info: `其他角色的准备阶段，你可以弃置一张与本轮以此法弃置的牌类型均不同的牌，然后观看其手牌，展示并获得其中一张。若此牌为：非基本牌，本回合其跳过判定阶段与弃牌阶段；基本牌，本回合其可以多使用一张【杀】。`,\r\n            YaotomeNoe: `八乙女のえ`,\r\n            huiyuan: `回援`,\r\n            huiyuan_info: `每回合限一次，当其他角色使用基本牌时，若其手牌数多于你，则你可以与其各摸一张牌。`,\r\n            huiyuan_append: lib.figurer(`特性：辅助`),\r\n            suoshi: `琐事`,\r\n            suoshi_info: `当你受到伤害时，你可以将一张手牌交给一名全场手牌数最多的角色；若你手牌数不为全场最少，你受到的伤害+1。`,\r\n            SuouPatra: `周防パトラ`,\r\n            mianmo: `眠魔`,\r\n            mianmo_info: `每回合限一次，你使用牌的目标可改为任意体力和等于之点数或合计点数的角色，若包括你，重置此技能。`,\r\n            tiaolv: `调律`,\r\n            tiaolv_info: `你使用一张牌时，可以令其点数增加/减少X（X为你已损失的体力值且至少为1），然后若你以此牌发动『眠魔』，则你可以令目标横置/各摸一张牌。`,\r\n            tiaolv_append: lib.figurer(`特性：难上手`),\r\n            Paryi: `帕里`,\r\n            tiantang: `天扉`,\r\n            tiantang_info: `一名角色的回合开始时，你可以弃置X张牌并声明一种花色：<br>\r\n\t\t\t观看并弃置其一张声明花色的牌，令其执行一个额外的出牌阶段；或令其摸两张牌，只能使用声明花色的牌直到回合结束。（X为你对目标发动此技能的次数且至少为1）`,\r\n            haoren: `好人`,\r\n            haoren_info: `觉醒技 你发动『天扉』后，若发动次数大于存活人数，你扣减1点体力上限，将『天扉』的“弃置”改为“重铸”；且在『天扉』的额外出牌阶段内，当前回合角色获得『引流』。`,\r\n            haoren_append: lib.figurer(`特性：难上手`),\r\n            TakatsukiRitsu: `高槻律`,\r\n            shengya: `生涯`,\r\n            shengya_info: `<font color=#f33>锁定技</font> 出牌阶段内，你使用的一张红色牌后，你亮出牌堆顶一张牌并获得之。若你亮出了♣牌，你失去一点体力，并且失去此技能直到下个回合开始。`,\r\n            shengya_append: lib.figurer(`特性：易上手`),\r\n            liangshan: `汉歌`,\r\n            liangshan_info: `其他角色在你的回合内第一次摸牌后，你可以将牌堆顶牌置于你的武将牌上。一名角色回合开始或濒死时，你可以交给其一张你武将牌上的牌，视为其使用了一张【酒】。`,\r\n            liangshan_append: lib.figurer(`特性：辅助`),\r\n            chongshi: `铳士`,\r\n            chongshi_info: `你使用【杀】指定目标后，可与其各摸一张牌。`,\r\n            MorinagaMiu: `森永缪`,\r\n            guanzhai: `观宅`,\r\n            guanzhai_info: `其他角色的回合结束时，若其本回合使用的牌少于（2）张，你可观看其手牌并获得其中（1）张。`,\r\n            guanzhai_append: lib.figurer(`特性：易上手 压制`),\r\n            zhishu: `直抒`,\r\n            zhishu_info: `出牌阶段开始或你的体力改变时，你可以展示一张手牌，令一名其他角色选择一项：<br>交给你一张同花色的牌；令你与其下个回合内『观宅』的（）值+1。`,\r\n            OtomeOto: `乙女音`,\r\n            yuxia: `玉匣`,\r\n            yuxia_info: `你可以将三张牌当作一张通常锦囊牌使用；其结算后，你可以将这些牌以任意顺序置于牌堆顶。`,\r\n            yuxia_append: lib.figurer(`特性：控顶`),\r\n            lianjue: `连崛`,\r\n            lianjue_info: `回合结束时，若你的手牌数与本回合开始时差值为三的倍数，你可以选择一项：<br>令至多三名角色各摸一张牌；或视为使用一张未以此法使用过的通常锦囊牌。`,\r\n            changxiang: `长箱`,\r\n            changxiang_info: `主公技 其他同势力角色进入濒死状态时，你可以弃置数量等于自己当前体力值的手牌，视为对其使用一张【桃】。`,\r\n            xhhuanshi: `士`,\r\n            HisekiErio: `绯赤艾莉欧`,\r\n            huange: `幻歌`,\r\n            huange_info: `轮次技 一个回合开始时，你可以摸等同一名角色体力值的牌，然后于回合结束时，弃置等同其当前体力值的牌。若你发动过『奇誓』，你可以将弃牌改为置于你的武将牌上。`,\r\n            qishi: `奇誓`,\r\n            qishi_info: `<font color=#f54>觉醒技</font> 你造成且受到伤害的轮次结束时，你减1体力上限，获得『系绊』，然后进行判定直到出现黑色并将这些牌置于武将牌上，称为「士」。`,\r\n            xiban: `系绊`,\r\n            xiban_info: `其他角色的回合结束时，若其造成了伤害，你可以弃置X张「士」令其选择一项：弃置等量的牌；或若你已受伤，令你回复1点体力。（X为你当前体力值）`,\r\n            yongtuan: `拥团`,\r\n            yongtuan_info: `主公技 <font color=#fa8>限定技</font> 你弃置「士」时，可以令一名同势力角色获得之。`,\r\n            dusongziGin: `杜松子_Gin`,\r\n            dusongziGin_ab: `杜松子`,\r\n            danqing: `蛋擎`,\r\n            danqing_info: `你造成或受到伤害后，可以令一名本回合未以此法获得牌的角色获得一张【酒】，若是该回合首次发动，改为获得两张。`,\r\n            gaiqu: `改躯`,\r\n            gaiqu_info: `觉醒技 准备阶段，若你本局游戏内使用【酒】的次数多于你的手牌数，你增加一点体力上限并回复一点体力，弃置三张手牌（若不足则改为失去『蛋擎』）并令所有成为过『蛋擎』目标的角色获得『松星』。`,\r\n            songxing: `松星`,\r\n            songxing_info: `你可以将一张【酒】当作一张锦囊牌使用，每回合每种牌名限一次。`,\r\n            Yousa: `泠鸢`,\r\n            niaoji: `鸟肌`,\r\n            niaoji_info: `你造成/受到伤害后，可以进行判定：若为♥️，你摸X张牌；若为♠️，你弃置目标/来源X张牌。（X为你已损失的体力值+1）`,\r\n            ysxiangxing: `翔星`,\r\n            ysxiangxing_info: `出牌阶段限一次，你可以将所有手牌以任意顺序置于牌堆顶，然后对攻击范围内一名角色造成1点伤害。`,\r\n            ysxiangxing_append: lib.figurer(`特性：易上手 直接伤害 控顶`),\r\n            Hanser: `hanser`,\r\n            Hanser_ab: `憨色`,\r\n            naiwei: `奶味天使`,\r\n            naiwei_info: `出牌阶段限一次，你可令体力值最大的一名角色失去1点体力，或令体力值最小的一名角色回复1点体力。然后若满足该项的角色不止一名，你可发动另一项。`,\r\n            cishan: `慈善赌王`,\r\n            cishan_info: `摸牌阶段，你可改为将手牌数翻倍。然后其他角色可以选择与你拼点，赢的角色获得你一张牌。`,\r\n            cishan_append: lib.figurer(`特性：爆发`),\r\n            Shaun: `勺`,\r\n            juxiao: `句销`,\r\n            juxiao_info: `当你受到伤害后，可以令至多两名角色各摸一张牌，因此摸牌的角色不能使用【杀】直到回合结束。`,\r\n            juxiao_append: lib.figurer(`特性：卖血`),\r\n            shshenyan: `神言`,\r\n            shshenyan_info: `出牌阶段限一次，你可以展示并弃置手牌中一种牌名的牌，摸等量的牌。然后你可以：视为使用一张名称长度等于本阶段此技能弃置牌花色数的锦囊牌；否则若你弃置了【杀】，重置此技能。`,\r\n            shshenyan_append: lib.figurer(`特性：制衡`),\r\n            Muri: `无理Muri`,\r\n            Muri_ab: `无理`,\r\n            lique: `理却`,\r\n            lique_info: `锁定技 你成为非装备牌的目标时，失去一点体力并摸一张牌。`,\r\n            zhangdeng: `掌灯`,\r\n            zhangdeng_info: `锁定技 你进入濒死状态时，回复一点体力。`,\r\n            Aza: `阿萨Aza`,\r\n            Aza_ab: `阿萨`,\r\n            qiding: `契定`,\r\n            qiding_info: `出牌阶段限一次，你可以令攻击范围内的一名角色观看你的手牌并选择一项：<br>受到1点伤害；令你观看并获得其一张牌且防止你对其的伤害直到本回合结束。`,\r\n            chouxin: `酬心`,\r\n            chouxin_info: `锁定技 当♥牌正面朝上离开你的手牌时，若你：未受伤~失去1点体力；已受伤~回复一点体力。你已发动过此技能的回合内，你跳过弃牌阶段。`,\r\n            Mahiru: `真绯瑠Mahiru`,\r\n            Mahiru_ab: `真绯瑠`,\r\n            jusheng: `剧生`,\r\n            jusheng_info: `轮次技 其他角色的准备阶段，你可以与其交换装备区，若其装备区的牌数因此：<br>减少~你令你或其调整手牌至与对方相同；增加~其本回合使用牌指定你或其为目标时，你可以视为使用一张【杀】。`,\r\n            xingqu: `星取`,\r\n            xingqu_info: `限定技 你令其他角色进入濒死状态时，你可以扣减1点体力上限令其回复1点体力，然后你们同时发现一组技能，若你们选择的技能相同，你本局游戏内造成的伤害+1；若不同，你获得对方选择的技能。`,\r\n            Miki: `弥希Miki`,\r\n            Miki_ab: `弥希`,\r\n            xingxu: `星许`,\r\n            xingxu_shiyue: `星许`,\r\n            xingxu_info: `轮次技 其他角色的准备阶段，你可以交给其两张牌。本回合结束时，若其：使用了其中一张～你视为使用另一张；对你造成了伤害～你回复一点体力。`,\r\n            qingsui: `清随`,\r\n            qingsui_jiai: `集爱(清)`,\r\n            qingsui_shengyin: `盛阴(清)`,\r\n            qingsui_quanyu: `全域(清)`,\r\n            qingsui_info: `转换技 你视为拥有①『集爱』②『盛阴』③『全域』。<br>当此技能于你回合外转换至①时，你可以获得当前回合角色的一张牌。`,\r\n            Chiyuu: `千幽Chiyuu`,\r\n            Chiyuu_ab: `千幽`,\r\n            anyou: `暗友`,\r\n            anyou_info: `出牌阶段开始或你受到伤害后时，你可以令与你距离为1的角色依次选择一项：<br>交给你一张牌；使用一张牌，以此使用的牌指定你为目标时，你摸一张牌。`,\r\n            mingyou: `明悠`,\r\n            mingyou_info: `本回合已受到伤害的角色使用牌指定你为目标时，你可以与其各回复一点体力。`,\r\n            Mari: `茉里Mari`,\r\n            Mari_ab: `茉里`,\r\n            tingzhu: `庭柱`,\r\n            tingzhu_info: `你使用牌造成伤害后，可以弃置一张本回合未进入弃牌堆类型的牌，对目标外的一名角色造成一点伤害。`,\r\n            xuemo: `血耱`,\r\n            xuemo_info: `你对体力与你不同的角色造成伤害时，可以将体力调整至与其相同令伤害+1。`,\r\n            Mayumi: `勾檀Mayumi`,\r\n            Mayumi_ab: `勾檀`,\r\n            jinzhou: `晋胄`,\r\n            jinzhou_info: `锁定技 当你失去装备区的防具牌时，你摸（1）张牌，然后令所有（）值+1。`,\r\n            gouhun: `勾魂`,\r\n            gouhun_info: `出牌阶段限一次，你可以亮出牌堆顶（3）张牌，并选择一项：获得其中一种类型的牌；令所有（）值+1。<br>你以此技能获得的基本牌不计入次数，锦囊牌不计入手牌上限。`,\r\n            gouhun_append: lib.figurer(`特性：成长`),\r\n            Ruruna: `露露娜Ruruna`,\r\n            Ruruna_ab: `露露娜`,\r\n            miluan: `迷乱`,\r\n            miluan_info: `出牌阶段，你可以与至多两名角色拼点，没赢的角色受到来自对方的一点伤害并摸两张牌。`,\r\n            shenjiao: `身教`,\r\n            shenjiao_info: `你受到伤害后，可以令一名角色受到的伤害-1直到回合结束。`,\r\n            shenjiao_append: lib.figurer(`特性：辅助`),\r\n            Karon: `茶冷Karon`,\r\n            Karon_ab: `茶冷`,\r\n            huomo: `惑魔`,\r\n            huomo_info: `轮次技 你成为一张牌的目标时，可以弃置一张牌，令距离你为1的其他角色改变对于此牌的目标状态。`,\r\n            huomo_append: lib.figurer(`特性：辅助`),\r\n            tuying: `涂映`,\r\n            tuying_info: `出牌阶段结束时，你可以将一张手牌当做本阶段使用的最后一张牌使用，然后可以将之目标数改为与本阶段使用的第一张牌相同。`,\r\n            xiaoke: `小可学妹`,\r\n            xiaoke_ab: `小可`,\r\n            mian: `面`,\r\n            dianying: `店营`,\r\n            dianying2: `店营`,\r\n            dianying_info: `其他角色的出牌阶段限一次，其可以将至少一张手牌扣置于你的武将牌旁，称为「面」，然后其可以将两张「面」明置以回复1点体力。<br>\r\n\t\t\t你受到伤害时，可以将至少三张明置的「面」暗置，使此伤害-1，若伤害被防止，伤害来源获得因此暗置的「面」。`,\r\n            ganfen: `擀奋`,\r\n            ganfen_info: `你可以对自己造成1点伤害并跳过一个主要阶段，将牌堆顶三张牌扣置为「面」。<br>\r\n\t\t\t你使用或打出基本牌时，可以将一张「面」明置。`,\r\n            Azusa: `阿梓`,\r\n            juehuo: `绝活`,\r\n            zhiyue: `指月`,\r\n            zhiyue_info: `游戏开始时，你将牌堆顶牌扣置于武将牌旁，称为「绝活」。<br>\r\n\t\t\t当你使用与暗置「绝活」类型相同的牌时，可以将其中一张明置，然后若所有「绝活」均明置，你扣置牌堆顶牌于武将牌旁；<br>\r\n\t\t\t当你使用与明置「绝活」花色相同的牌时，可以将其中任意张暗置并摸等量的牌。`,\r\n            zhiyue_append: lib.figurer(`特性：成长`),\r\n            zhengniu: `蒸牛`,\r\n            zhengniu_info: `其他角色令你重置、回复体力或摸牌时，你可以令其获得任意的「绝活」。`,\r\n            ap_Nana7mi: `天启·七海`,\r\n            ap_Nana7mi_ab: `界七海`,\r\n            niyou: `溺游`,\r\n            niyou_info: `锁定技 一个回合结束时，若你受到了伤害，你进行一个额外的出牌阶段。若你于此阶段内没有使用牌，你翻面并摸两张牌；若使用了，你与其他角色距离+1。`,\r\n            shalu: `鲨戮`,\r\n            shalu_info: `出牌阶段限一次，你可以弃置所有手牌并对攻击范围外的一名角色造成一点伤害，然后摸其体力值的牌。`,\r\n            ap_Azusa: `天启·阿梓`,\r\n            ap_Azusa_ab: `界阿梓`,\r\n            puyu: `璞玉`,\r\n            puyu_info: `出牌阶段开始时，你可以令一名角色弃一张牌，本阶段内，你所有手牌的牌名视为之，且你使用5张牌或所有角色合计获得10张牌后立即结束此阶段。`,\r\n            appojian: `破茧`,\r\n            appojian_info: `锁定技 你使用牌造成伤害后，你令体力最多的一名角色失去一点体力，体力最少的一名角色回复一点体力；然后若你满足至少一项，立即结束当前回合。`,\r\n            qingzezi: `清则子`,\r\n            ze: `则`,\r\n            menghuan: `梦桓`,\r\n            menghuan_info: `锁定技 游戏开始时/一名角色进行判定后，你将牌堆顶牌/判定牌依次置于武将牌右侧，称为「则」，然后若「则」数量大于6，将左起第1张「则」置入弃牌堆。<br>\r\n\t\t\t当你于一个回合内使用的第n张牌与左起第n张「则」花色或类型相同时，你摸一张牌。`,\r\n            gengu: `亘古`,\r\n            gengu_info: `当你体力改变后，你可以令一名角色进行一次判定，若结果：<br>\r\n\t\t\t为黑色～其弃一张牌，若其武将牌周围有牌，则改为重铸一张牌。`,\r\n            shengge: `笙歌`,\r\n            di: `笛`,\r\n            dixian: `笛鲜`,\r\n            dixian_info: `出牌阶段限一次，你可以将牌堆顶牌置于武将牌的左侧或右侧，称为「笛」，当另一张同颜色的「笛」被置于另一侧或你使用一张同类型的牌后，你获得之。<br>\r\n\t\t\t你一次性获得3张或以上的「笛」后，可以立即发动一次此技能。`,\r\n            gumei: `古寐`,\r\n            gumei_info: `你使用锦囊牌时，可以令一名角色横置或重置，若其武将牌周围有牌，则改为摸一张牌。`,\r\n            zhugeaixi: `诸葛哀汐`,\r\n            kaituan: `开团`,\r\n            kaituan_info: `你可以将点数小于5的牌当作【过河拆桥】使用。`,\r\n            gehuang: `鸽簧`,\r\n            gehuang_info: `锁定技 当你使用一张锦囊牌时，记录此时你攻击范围内的角色数为X。<br>\r\n\t\t\t当X变化时，你摸变化差值张牌。<br>\r\n\t\t\t你体力等于X时，造成的伤害+1。`,\r\n            susi: `诉死`,\r\n            susi_enable: `诉死`,\r\n            susi_info: `限定技 出牌阶段，你可以将一个势力的所有角色移出游戏直到回合结束。`,\r\n            KurumiUsa: `胡桃Usa`,\r\n            KurumiUsa_ab: `胡桃`,\r\n            jidou: `激斗`,\r\n            jidou_info: `锁定技 你使用【决斗】指定唯一目标或成为【决斗】的目标时，摸一张牌，若你没有手牌或体力为1，改为摸三张。`,\r\n            duotian: `堕天`,\r\n            duotian_info: `出牌阶段限一次，你可以将一张基本牌当作一张单体锦囊牌使用，若此牌点数：<br>\r\n\t\t\t≥6~你可为之增加一个目标；≥12~你于此阶段结束后进行一个额外的出牌阶段。`,\r\n            NanaseUnia: `七濑Unia`,\r\n            NanaseUnia_ab: `七濑`,\r\n            qisui: `麒随`,\r\n            qisui_info: `每回合每名角色限一次，一名角色于你的回合内摸牌或其他角色令你摸牌时，你可以令其获得『灵军』直到其下一次使用【决斗】，若其已拥有『灵军』，改为本次摸牌量+1。`,\r\n            lingjun: `灵军`,\r\n            lingjun_info: `锁定技 你手牌中的【杀】视为【决斗】。`,\r\n            Myanna: `玛安娜Myanna`,\r\n            Myanna_ab: `玛安娜`,\r\n            yemo: `夜魔`,\r\n            yemo_backup: `夜魔`,\r\n            yemo_info: `出牌阶段，你可以摸一张牌并废除一个装备栏，令一名角色获得『灵昏』直到其下一次使用【决斗】，若其已有『灵昏』，改为弃置其区域内的一张牌。`,\r\n            jiaopin: `校频`,\r\n            jiaopin_info: `结束阶段，若你已受伤，你可以恢复一个装备栏。`,\r\n            linghun: `灵昏`,\r\n            linghun_info: `锁定技 你手牌中的【闪】视为【决斗】。`,\r\n            Haya: `花花Haya`,\r\n            Haya_ab: `花花`,\r\n            shengping: `升平`,\r\n            shengping_info: `其他角色弃置你的牌时，你可以与其各摸一张牌。`,\r\n            jiushuang: `酒霜`,\r\n            jiushuang_info: `一名角色的回合开始时，你可以令其弃置你的一张牌，并获得『灵醺』直到其下一次使用【决斗】，若其已有『灵醺』，改为令其横置或重置。`,\r\n            lingxun: `灵醺`,\r\n            lingxun_info: `锁定技 你手牌中的【酒】视为【决斗】。`,\r\n            Shirako: `白桃shirako`,\r\n            Shirako_ab: `白桃`,\r\n            jufu: `咀福`,\r\n            jufu_info: `你可以将【桃】当作【无中生有】或【五谷丰登】使用。`,\r\n            qihun: `祈婚`,\r\n            qihun_info: `出牌阶段结束时，你可以令一名角色展示手牌并将其中所有的红色牌交给你，若其中没有【桃】，你需交给其等量牌（若其势力与你相同，改为令其摸等量牌）。`,\r\n            SukoyaKana: `健屋花那`,\r\n            huawen: `花吻交染`,\r\n            huawen_info: `出牌阶段限一次，你可以选择一名其他女性角色，你与其互相展示手牌，然后交换花色、点数、种类相同的牌各一张，每交换一张便各摸一张牌。然后若交换不足三次，你与其各失去1点体力。`,\r\n            huawen_append: lib.figurer(`特性：难上手 爆发`),\r\n            liaohu: `逃杀疗护`,\r\n            liaohu_info: `一个回合结束时，若你造成了伤害且该回合未发动/发动了『花吻交染』，你可以令你/本轮『花吻交染』选择的其他角色回复1点体力。`,\r\n            ShirayukiTomoe: `白雪巴`,\r\n            gonggan: `奇癖共感`,\r\n            gonggan_info: `其他角色的回合开始时，你可以展示所有手牌然后扣置其中一张，令当前回合角色猜测此牌花色，若猜对，其获得此牌，且本回合你手牌花色、点数均视为与此牌相同；若猜错，你收回此牌，且本回合你手牌点数均视为Q。`,\r\n            gonggan_append: lib.figurer(`特性：难上手`),\r\n            yeyu: `夜域女王`,\r\n            yeyu_info: `其他角色使用【杀】时，你可以弃置一张点数大于此【杀】的牌取消之。其他角色使用通常锦囊牌时，你可以重铸一张梅花牌为之增加或减少一名目标。`,\r\n            yeyu_append: lib.figurer(`特性：干扰`),\r\n            Elu: `Elu`,\r\n            Elu_ab: `艾露`,\r\n            huangran: `煌燃`,\r\n            huangran_info: `你受到火焰伤害时，可以选择一名距离为1的角色与你平均承担，不能平均的额外1点由你分配。<br>每有一名角色因此受伤，你摸一张牌。`,\r\n            yinzhen: `隐真`,\r\n            yinzhen_info: `锁定技 每回合造成的第一次伤害均改为火焰伤害。其他角色与你距离减小的回合结束时，你观看其手牌并获得其中一张。`,\r\n            senhu: `森护`,\r\n            senhu_info: `锁定技 若你的装备区里没有防具牌，你受到的火焰伤害+1。`,\r\n            KenmochiDouya: `剑持刀也`,\r\n            shenglang: `声浪燃烈`,\r\n            shenglang_info: `出牌阶段限一次，你可以将一张【杀】当【决斗】使用。一个回合结束时，若你失去过牌，摸等同于该回合进入弃牌堆的♠【杀】数量的牌`,\r\n            nodao: `无刀之咎`,\r\n            nodao_info: `你没有装备武器时，可以于出牌阶段重铸【杀】，若你以此法获得武器牌，你可以立即装备之并回复1点体力。`,\r\n            AchikitaChinami: `远北千南`,\r\n            yingkuo: `影拓`,\r\n            yingkuo_info: `你装备区或手牌区的牌数增加时，若有其他角色在此区域内的牌数与你相同，你可令其弃置该区域内的一张牌。`,\r\n            shengni: `声拟`,\r\n            shengni_info: `若上一张进入弃牌堆的牌为其他角色的基本牌或通常锦囊牌，你可将你的一张手牌当做该牌使用或打出。若这是在你回合内首次发动『声拟』，改为“你可视为使用或打出该牌”。`,\r\n            HayamiSaki: `早见咲`,\r\n            tuncai: `屯财`,\r\n            tuncai_info: `轮次技 转换技 阳~其他角色摸牌后，你可以摸等量牌；阴~你弃牌后，可以令一名其他角色弃等量牌。`,\r\n            zhidu: `值督`,\r\n            zhidu_info: `主公技 当同势力角色进入濒死状态或受到两点或以上伤害时，你可以重置并转换『屯财』。`,\r\n            KiyoInga: `纪代因果`,\r\n            huanxi: `浣洗`,\r\n            huanxi_info: `出牌阶段开始或结束时，你可以弃置所有手牌，然后摸等量牌。若均弃牌且两次弃牌不包含同名牌，重置『册吕』`,\r\n            celv: `册吕`,\r\n            celv_info: `你体力减少或弃置与体力等量的牌时，可以展示并获得其他角色的一张手牌，然后你不能使用或打出与此牌同名的牌。`,\r\n            celv_append: lib.figurer(`特性：自肃`),\r\n            AngeKatrina: `安洁·卡特琳娜`,\r\n            chuangzuo: `创作延续`,\r\n            chuangzuo_info: `准备阶段，你可令一名角色获得其判定区或装备区的一张牌，然后你摸一张牌。`,\r\n            SuzuharaLulu: `铃原露露`,\r\n            zhongli: `重力牵引`,\r\n            zhongli_info: `锁定技 出牌阶段结束时，你进行判定：若为装备牌，你获得判定牌并继续判定；若你本回合首次因此获得了某张装备牌，你减1点体力上限（至少为1）且执行一个额外的出牌阶段。`,\r\n            xinhuo: `薪火相传`,\r\n            xinhuo_chuanhuo: `传火`,\r\n            xinhuo_info: `出牌阶段，你可以将两张牌置于牌堆顶，令你本回合下一张使用的牌无距离和次数限制且可额外选择一个目标（可叠加）。`,\r\n            weizhuang: `魔界伪装`,\r\n            weizhuang_discard: `魔界伪装`,\r\n            weizhuang_info: `锁定技 你在一回合内多次使用基本牌/锦囊牌后，摸/弃X张牌。（X为此牌指定的目标数）`,\r\n            weizhuang_append: lib.figurer(`特性：自肃`),\r\n            KagamiHayato: `加賀美隼人`,\r\n            liebo: `裂帛核哮`,\r\n            liebo_info: `锁定技 你的黑色牌无法被响应。当你使用一张黑色牌首次造成伤害时，你摸一张牌，令目标弃置你装备区的一张牌。`,\r\n            zhongjizhimeng: `重机织梦`,\r\n            zhongjizhimeng_info: `出牌阶段限一次，你可以弃置一张牌并展示一张手牌，此牌的颜色视为原来的异色，且你失去之时，可以令一名角色回复1点体力或摸两张牌。`,\r\n            AmamiyaKokoro: `天宫心`,\r\n            miaomiao: `流泪喵喵`,\r\n            miaomiao_info: `锁定技 你造成数值为1的伤害时，需将其改为等量体力回复，或令目标摸两张牌；若你本回合已发动『逞能龙息』，你摸一张牌。`,\r\n            chengneng: `逞能龙息`,\r\n            chengneng_info: `每回合限一次，当其他角色受到伤害时，你可以弃一张牌令其来源视为你，若你为其原来源，本次伤害改为等量体力流失。`,\r\n            chengneng_append: lib.figurer(`特性：难上手 combo`),\r\n            SakuraRitsuki: `櫻凜月`,\r\n            zhuqiao: `筑巧`,\r\n            zhuqiao_info: `出牌阶段，若你本回合因此进入弃牌堆的牌点数之和小于24，你可重铸一张牌。回合结束时，你可令一名角色将手牌数补至X张（X为你本回合以此重铸牌的花色数）。`,\r\n            zhuqiao_append: lib.figurer(`特性：易上手`),\r\n            TenkaiTsukasa: `天开司`,\r\n            pojie: `破戒`,\r\n            pojie_info: `回合内，一名角色装备区内的牌数变化时，你可以摸一张牌。弃牌阶段，你需弃置的牌数改为本回合发动此技能的次数。`,\r\n            dazhen: `大振`,\r\n            dazhen_info: `出牌阶段限一次，你可将你武器栏的牌移动至其他角色武器栏（可替换原武器），然后其弃置你手牌数与手牌上限之差的牌，若不足，受到你造成的1点伤害。`,\r\n            dazhen_append: lib.figurer(`特性：爆发 破军`),\r\n            UsakiNono: `宇佐纪诺诺`,\r\n            tuhui: `兔烩`,\r\n            tuhuiA: `兔烩(伤害)`,\r\n            tuhuiB: `兔烩(受伤害)`,\r\n            tuhui_info: `每轮每项限一次。你对其他角色造成伤害或其他角色对你造成伤害后，你可以与其各回复（1）点体力；无法回复体力的角色摸（1）张牌。`,\r\n            fuyou: `复幼`,\r\n            fuyou_info: `限定技 出牌阶段，你可以令所有角色无法回复体力直到回合结束，重置『兔烩』并使之的（）值+1。`,\r\n            Rynia: `莱妮娅Rynia`,\r\n            Rynia_ab: `莱妮娅`,\r\n            yinxu: `吟虚`,\r\n            yinxu_info: `转换技 你可以将一张①锦囊牌②装备牌当作无视距离和次数限制的【杀】使用；以此使用的【杀】被抵消时，你可以令你或目标调整手牌至上限。`,\r\n            yinxu_append: lib.figurer(`特性：易上手 爆发`),\r\n            airuisi: `艾瑞思`,\r\n            maozhi: `茆织`,\r\n            maozhi_info: `出牌阶段，你可以弃置两张不同类型的牌，令一名其他角色根据你弃牌包含的花色执行对应效果：<br>♥～失去1点体力并摸三张牌；♦～视为使用一张【杀】；♠～展示所有手牌并横置；♣～重铸至少三张牌。<br>\r\n\t\t\t若你的弃牌颜色相同，本回合你不能再发动此技能。`,\r\n            baifei: `拜妃`,\r\n            baifei_info: `主公技 每名角色限一次，你对其造成伤害或受到其造成的伤害后，可以回复1点体力或摸两张牌。`,\r\n            aibai: `艾白`,\r\n            bianyin: `变音`,\r\n            bianyin_info: `每回合限一次，当你使用一张牌时，你可以重铸一张牌，将之改为重铸牌的花色。`,\r\n            shabai: `傻白`,\r\n            shabai_info: `当一张红色牌于回合内离开你的区域时，你可摸一张牌；当一张黑色牌于回合外离开你的区域时，你可移动场上一张牌。`,\r\n            wenjing: `文静`,\r\n            zaiying: `再赢`,\r\n            zaiying_info: `出牌阶段限一次/其他角色于你的回合内获得牌时，你可以与一名角色/其拼点，赢的角色摸牌至上限，没赢的角色回复一点体力。`,\r\n            zhengen: `政恩`,\r\n            zhengen_info: `使命技 每名角色限一次，你对其造成伤害或受到其伤害时，你弃置一张手牌与其场上的一张牌。<br>\r\n\t\t\t成功～若你以此技能弃置了四张同点数的牌：你调整手牌至上限，重置次技能。<br>\r\n\t\t\t失败～你体力回复至上限时，若有手牌：你令X名角色横置并摸一张牌，然后你受到X点火焰伤害。（X为你手牌数）`,\r\n            xingtong: `星瞳`,\r\n            jiezou: `节奏`,\r\n            jiezou_info: `锁定技 你攻击范围内每有一名角色，你的手牌上限+1。`,\r\n            xtguyong: `孤勇`,\r\n            xtguyong_info: `准备阶段，你可以翻面并令一名手牌区/装备区/判定区牌数少于你的角色弃置你的对应区域各一张牌，\r\n\t\t\t然后你对攻击范围内至多X名角色各造成X点伤害（X为此技能弃置的牌数）`,\r\n            wula: `乌拉の帝国`,\r\n            wula_ab: `乌拉`,\r\n            dizuo: `帝座`,\r\n            dizuo_info: `你使用装备牌时，可以令一名与你距离为1的角色选择一项：<br>交给你一张装备牌并摸两张牌；成为你下一张牌的额外目标，若是首次选择此项，其与你交换座次。`,\r\n            hongtie: `洪铁`,\r\n            hongtie_info: `你使用牌指定偶数名角色为目标时，可以对其中一名目标造成一点伤害。`,\r\n            yunyuluan: `云玉鸾`,\r\n            jiujiu: `臼啾`,\r\n            jiujiu_info: `出牌阶段开始时，你可以将一张装备牌置于牌堆顶并跳过此阶段，令一名角色选择一项：<br>交给你一张装备牌并摸两张牌；受到你造成的一点伤害。`,\r\n            qitong: `栖桐`,\r\n            qitong_info: `转换技 结束阶段，若你本回合没有造成伤害，你可以与下家交换①装备区②座次；若你的座次因此变为最后，你调整手牌至上限并进行一个额外的出牌阶段。`,\r\n            yizhiYY: `亦枝YY`,\r\n            bianshi: `辨识`,\r\n            bianshi2: `辨识`,\r\n            ming_bianshi: `辨识`,\r\n            bianshi_info: `体力值不少于你的角色的回合开始时，你可以亮出一张手牌：直到回合结束，每当与此牌类别相同的牌进入弃牌堆时，该角色摸一张牌。以此法获得第二张牌后，该角色失去一点体力并令其因『辨识』的摸牌改为弃牌。`,\r\n            bianshi_append: lib.figurer(`特性：干扰`),\r\n            Pudding: `步玎`,\r\n            tianlve: `甜略`,\r\n            tianlve_info: `出牌阶段开始时，你可以令一名其他角色回复1点体力，然后本阶段内你对其使用牌无距离限制，且指定其为唯一目标时，可以摸一张牌或增加一个额外目标。`,\r\n            tianlve_append: lib.figurer(`特性：卖血 辅助 强化出杀`),\r\n            luxian: `颅祭`,\r\n            luxian_info: `<font color=#fda>限定技</font> 准备阶段，若你已受伤，你可以扣减1点体力上限，并发现一次P-SP角色，你视为拥有其所有技能直到弃牌阶段结束。`,\r\n            luxian_append: lib.figurer(`特性：难上手 爆发`),\r\n            AyanaNana: `绫奈奈奈`,\r\n            erni: `耳匿`,\r\n            erni_info: `转换技 你可以展示一张手牌并置于牌堆顶，视为使用或打出了一张同花色的①【杀】②【闪】③【桃】；当你发动其他技能后，可以转换一次『耳匿』。`,\r\n            erni_append: lib.figurer(`特性：控顶`),\r\n            shouru: `受乳`,\r\n            shouru_info: `每回合限一次，你受到伤害/发动『耳匿』后，可以获得当前回合角色上家或下家的一张牌。`,\r\n            shouru_append: lib.figurer(`特性：combo`),\r\n            chonghuang: `崇皇`,\r\n            chonghuang_info: `<font color=#dac>限定技</font> 当你体力值变为1时，你可以扣减1点体力上限，并发现一次P-SP角色，本轮次内你视为拥有其所有技能。`,\r\n            chonghuang_append: lib.figurer(`特性：难上手`),\r\n            yinzun: `隐尊`,\r\n            yinzun_info: `<font color=#dac>主公技</font> 你的『崇皇』可以在同势力角色体力变为1时发动。`,\r\n            AkiRinco: `秋凛子`,\r\n            jiren: `祭刃`,\r\n            jiren2: `祭刃-重置`,\r\n            jiren_info: `出牌阶段限一次，你可以进行判定，若结果为：红色~你摸一张牌；武器牌~你获得之。你可以失去1点体力以重置此技能。`,\r\n            luqiu: `戮秋`,\r\n            luqiu_info: `转换技 当一张牌进入弃牌堆时，若其花色与你本回合上一次『祭刃』的判定牌相同，你可以①视为使用一张【杀】②摸一张牌③弃一张牌。`,\r\n            luqiu_append: lib.figurer(`特性：难上手 爆发 combo`),\r\n            canxin: `残心`,\r\n            canxin_info: `<font color=#ed9>限定技</font> 出牌阶段结束时，若你已受伤，你可以重铸一张牌。若你以此法重铸了【杀】或伤害类锦囊牌，重复此操作；否则回复1点体力并立即结束回合。`,\r\n            KurenaiAkane: `红晓音`,\r\n            quankai: `拳开`,\r\n            quankai_info: `轮次技 你造成伤害后，可以弃置目标区域内的一张牌；当你使用锦囊牌后，可以从弃牌堆中获得上一次『拳开』的弃牌，或重置此技能。`,\r\n            heyuan: `合缘`,\r\n            heyuan_info: `<font color=#f57>限定技</font> 摸牌阶段，若你已受伤，你可以放弃摸牌，改为发现两次P-SP势力角色，然后视为拥有前者的非限定技和后者的限定技直到你的下个回合开始。`,\r\n            heyuan_append: lib.figurer(`特性：难上手`),\r\n            Lovely: `东爱璃`,\r\n            yangyao: `秧耀`,\r\n            yangyao_info: `出牌阶段，你可以失去一点体力或弃置两张同色的牌，令一名角色从弃牌堆获得一张锦囊牌；每回合每种锦囊牌限一次。`,\r\n            yangyao_append: lib.figurer(`特性：爆发 combo`),\r\n            shili: `拾璃`,\r\n            shili_info: `<font color=#987>限定技</font> 一个回合结束时，若你已受伤，你可以令一名角色摸X张牌并执行一个额外的出牌阶段（X为你本回合使用过的非基本牌数量）。`,\r\n            AkumaYuu: `西魔幽`,\r\n            akjianwu: `剑舞`,\r\n            akjianwu_info: `你使用或打出一张基本牌时，可以与对方拼点，赢的角色选择一项：<br>1.于此牌结算后获得之；2.展示并获得对方的一张牌。<br>以此获得【杀】或单体锦囊牌的角色可以立即使用之。`,\r\n            tongzhao: `同召`,\r\n            tongzhao_info: `<font color=#d87>限定技</font> 你拼点没赢时，若你已受伤，你可以发现一次（若为平局则改为发现两次）P-SP势力角色，视为拥有其所有技能直到你下一次体力减少。`,\r\n            AiTeN: `莲汰`,\r\n            langfei: `狼吠`,\r\n            langfei_info: `每回合限一次，你可以令你使用的通常锦囊牌伤害+1。`,\r\n            xieyun: `协韵`,\r\n            xieyun_info: `限定技 出牌阶段开始时，你可以指定场上一个已发动的限定技，令持有者重置此技能，然后你获得同名技能。`,\r\n            Seki: `星汐Seki`,\r\n            Seki_ab: `星汐`,\r\n            zhuxing: `铸星`,\r\n            zhuxing_info: `出牌阶段限一次，你可以观看牌堆顶的七张牌，并用手牌替换其中任意张。`,\r\n            zhuxing_append: lib.figurer(`特性：控顶`),\r\n            shanzhu: `潸逐`,\r\n            shanzhu_info: `限定技 结束阶段，若你已受伤，你可以获得本回合你使用的所有实体牌。`,\r\n            P_SP: `P-SP`,\r\n            zhu_tag: `常驻主公`,\r\n            guoV_tag: `国V`,\r\n            yingV_tag: `英V`,\r\n        },\r\n    };\r\n});\r\n\n\n//# sourceURL=webpack:///./character/yuzu.ts?")},"./character/_entry.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Beginner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Beginner */ "./character/Beginner.ts");\n/* harmony import */ var _Beginner__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Beginner__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _clubs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./clubs */ "./character/clubs.ts");\n/* harmony import */ var _clubs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_clubs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _emperor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./emperor */ "./character/emperor.ts");\n/* harmony import */ var _emperor__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_emperor__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _hololive__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hololive */ "./character/hololive.ts");\n/* harmony import */ var _hololive__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_hololive__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _huajing__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./huajing */ "./character/huajing.ts");\n/* harmony import */ var _huajing__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_huajing__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _nijisanji__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./nijisanji */ "./character/nijisanji.ts");\n/* harmony import */ var _nijisanji__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_nijisanji__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _sololive__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sololive */ "./character/sololive.ts");\n/* harmony import */ var _sololive__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_sololive__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _vtuber__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./vtuber */ "./character/vtuber.ts");\n/* harmony import */ var _vtuber__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_vtuber__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _xingtian__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./xingtian */ "./character/xingtian.ts");\n/* harmony import */ var _yuzu__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./yuzu */ "./character/yuzu.ts");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./character/_entry.js?')}},__webpack_module_cache__={};function __webpack_require__(r){var n=__webpack_module_cache__[r];if(void 0!==n)return n.exports;var e=__webpack_module_cache__[r]={exports:{}};return __webpack_modules__[r](e,e.exports,__webpack_require__),e.exports}__webpack_require__.n=r=>{var n=r&&r.__esModule?()=>r.default:()=>r;return __webpack_require__.d(n,{a:n}),n},__webpack_require__.d=(r,n)=>{for(var e in n)__webpack_require__.o(n,e)&&!__webpack_require__.o(r,e)&&Object.defineProperty(r,e,{enumerable:!0,get:n[e]})},__webpack_require__.o=(r,n)=>Object.prototype.hasOwnProperty.call(r,n),__webpack_require__.r=r=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./character/_entry.js")})();