/*! For license information please see game.js.LICENSE.txt */
(()=>{var __webpack_modules__={"./data/card.js":()=>{eval('{\r\n\t/**全局卡牌 */\r\n\tlet { game, ui, get, ai, lib, _status } = vkCore\r\n\tlib.card = {\r\n\t\tlist: [],\r\n\t\t//石头剪刀布\r\n\t\tpss_paper: {\r\n\t\t\ttype: \'pss\',\r\n\t\t\tfullskin: true,\r\n\t\t},\r\n\t\tpss_scissor: {\r\n\t\t\ttype: \'pss\',\r\n\t\t\tfullskin: true,\r\n\t\t},\r\n\t\tpss_stone: {\r\n\t\t\ttype: \'pss\',\r\n\t\t\tfullskin: true,\r\n\t\t},\r\n\t\t//区域废弃标志\r\n\t\tfeichu_equip1: {\r\n\t\t\ttype: "equip",\r\n\t\t\tsubtype: "equip1",\r\n\t\t},\r\n\t\tfeichu_equip2: {\r\n\t\t\ttype: "equip",\r\n\t\t\tsubtype: "equip2",\r\n\t\t},\r\n\t\tfeichu_equip3: {\r\n\t\t\ttype: "equip",\r\n\t\t\tsubtype: "equip3",\r\n\t\t},\r\n\t\tfeichu_equip4: {\r\n\t\t\ttype: "equip",\r\n\t\t\tsubtype: "equip4",\r\n\t\t},\r\n\t\tfeichu_equip5: {\r\n\t\t\ttype: "equip",\r\n\t\t\tsubtype: "equip5",\r\n\t\t},\r\n\t\tdisable_judge: {},\r\n\t\t//势力卡牌\r\n\t\tgroup_wei: { fullskin: true },\r\n\t\tgroup_shu: { fullskin: true },\r\n\t\tgroup_wu: { fullskin: true },\r\n\t\tgroup_qun: { fullskin: true },\r\n\t\tgroup_key: { fullskin: true },\r\n\t\tgroup_jin: { fullskin: true },\r\n\t\tgroup_holo: { fullskin: true, },\r\n\t\tgroup_nijisanji: { fullskin: true, },\r\n\t\tgroup_VirtuaReal: { fullskin: true, },\r\n\t\tgroup_upd8: { fullskin: true, },\r\n\t\tgroup_paryi: { fullskin: true, },\r\n\t\tgroup_kagura: { fullskin: true, },\r\n\t\tgroup_nanashi: { fullskin: true, },\r\n\t\tgroup_psp: { fullskin: true, },\r\n\t\tgroup_asoul: { fullskin: true, },\r\n\t\tgroup_nori: { fullskin: true, },\r\n\t\tgroup_vwp: { fullskin: true, },\r\n\t\tgroup_chaos: { fullskin: true, },\r\n\t\tgroup_xuyan: { fullskin: true, },\r\n\t\tgroup_xuefeng: { fullskin: true, },\r\n\t\tgroup_Providence: { fullskin: true, },\r\n\t}\r\n}\n\n//# sourceURL=webpack:///./data/card.js?')},"./data/emotionList.js":()=>{eval("{\r\n    /**\r\n     *表情基础设置 \r\n     * @namespace\r\n     */\r\n\tlet { game, ui, get, ai, lib, _status } = vkCore\r\n    lib.emotionList = {\r\n        xiaowu_emotion: 14,\r\n        shibing_emotion: 15,\r\n        guojia_emotion: 20,\r\n        zhenji_emotion: 20,\r\n        xiaosha_emotion: 20,\r\n        xiaotao_emotion: 20,\r\n        xiaojiu_emotion: 20,\r\n        Diana_emotion: 6,\r\n    }\r\n}\n\n//# sourceURL=webpack:///./data/emotionList.js?")},"./data/entry.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _card__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./card */ "./data/card.js");\n/* harmony import */ var _card__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_card__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _emotionList__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./emotionList */ "./data/emotionList.js");\n/* harmony import */ var _emotionList__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_emotionList__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./menu */ "./data/menu.js");\n/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_menu__WEBPACK_IMPORTED_MODULE_2__);\n\r\n\r\n\n\n//# sourceURL=webpack:///./data/entry.js?')},"./data/lib_groupList.js":module=>{eval("module.exports = {\r\n\t/**\r\n\t * 武将牌势力\r\n\t * |string|Group Name|\r\n\t * |:----:|:--------:|\r\n\t * |vtuber|企业|\r\n\t * |clubs|社团|\r\n\t * |wei|魏|\r\n\t * |shu|蜀|\r\n\t * |wu|吴|\r\n\t * |qun|群|\r\n\t * |jin|晋|\r\n\t * |shen|神、特典|\r\n\t * |holo|Hololive|\r\n\t * |nijisanji|虹|\r\n\t * |dotlive|点|\r\n\t * |upd8|U|\r\n\t * |eilene|艾琳|\r\n\t * |paryi|帕里|\r\n\t * |kagura|神楽|\r\n\t * |nori|苔|\r\n\t * |vwp|神椿|\r\n\t * |nanashi|774 inc.|\r\n\t * |VirtuaReal|VirtuaReal|\r\n\t * |psp|psplive|\r\n\t * |asoul|A-SOUL|\r\n\t * |chaos|Chaos Live|\r\n\t * |xuefeng|雪风军团|\r\n\t * |vshojo|Vshojo|\r\n\t * @type {string}\r\n\t */\r\n\tgroup: [\r\n\t\t'wei', 'shu', 'wu', 'qun', 'jin', 'western', 'key', 'shen',\r\n\t\t'holo', 'nijisanji', 'dotlive', 'upd8', 'eilene', 'paryi', 'kagura', 'nori', 'vwp', 'nanashi',\r\n\t\t'VirtuaReal', 'HappyElements', 'psp', 'asoul', 'xuyan', 'chaos', 'xuefeng', 'Providence', 'NetEase', 'hunmiao', 'ego', 'Tencent', 'lucca', 'RedC',\r\n\t\t'vshojo',\r\n\t\t'vtuber', 'clubs'\r\n\t],\r\n\t/**\r\n\t * shen势力可选的武将牌势力\r\n\t * 较group去除了企业、社团、三国势力\r\n\t * @type {string}\r\n\t */\r\n\tgroup2: ['qun', 'holo', 'nijisanji', 'VirtuaReal', 'nori', 'paryi', 'upd8', 'kagura', 'nanashi',\r\n\t\t'psp', 'asoul', 'vwp', 'xuyan', 'chaos', 'xuefeng'],\r\n\t/**\r\n\t * 势力对应属性\r\n\t * @constant\r\n\t */\r\n\tgroupnature: {\r\n\t\tshen: 'thunder',\r\n\t\twei: 'water',\r\n\t\tshu: 'soil',\r\n\t\twu: 'wood',\r\n\t\tqun: 'metal',\r\n\t\twestern: 'thunder',\r\n\t\tkey: 'key',\r\n\t\tjin: 'thunder',\r\n\t\tye: 'thunder',\r\n\t\tholo: 'soil',\r\n\t\tupd8: 'metal',\r\n\t\tdotlive: 'wood',\r\n\t\tnijisanji: 'water',\r\n\t\tVirtuaReal: 'ocean',\r\n\t\tHappyElements: 'ocean',\r\n\t\teilene: 'thunder',\r\n\t\tparyi: 'ice',\r\n\t\tkagura: 'ocean',\r\n\t\tnanashi: 'wood',\r\n\t\tpsp: 'fire',\r\n\t\tasoul: 'fire',\r\n\t\tnori: 'key',\r\n\t\tvwp: 'key',\r\n\t\tvshojo: 'metal',\r\n\t\txuyan: 'ice',\r\n\t\tchaos: 'ocean',\r\n\t\txuefeng: 'ocean',\r\n\t\tProvidence: 'ocean',\r\n\t\tNetEase: 'fire',\r\n\t\thunmiao: 'ocean',\r\n\t\tego: 'ocean',\r\n\t\tTencent: 'wood',\r\n\t\tlucca: 'wood',\r\n\t\tRedCircle: 'fire',\r\n\r\n\t\tvtuber: 'metal',\r\n\t\tclubs: 'ice',\r\n\t}\r\n}\n\n//# sourceURL=webpack:///./data/lib_groupList.js?")},"./data/lib_natureList.js":module=>{eval("module.exports = {\r\n    /**\r\n     * 卡牌属性\r\n     * @type {('fire'|'thunder'|'poison'|'ocean'|'ice'|'kami'|'yami')}\r\n     */\r\n    nature: ['fire', 'thunder', 'poison', 'ocean', 'ice', 'kami', 'yami'],\r\n    /**\r\n     * 可被铁索传递的属性 - TODO\r\n     * @type {string}\r\n     */\r\n    linked: ['fire', 'thunder', 'ocean', 'ice', 'kami', 'yami'],\r\n}\n\n//# sourceURL=webpack:///./data/lib_natureList.js?")},"./data/lib_translate.js":module=>{eval("module.exports = {\r\n\t/**\r\n\t * 词汇翻译\r\n\t * 翻译文本\r\n\t * @type {!Object}\r\n\t */\r\n\ttranslate: {\r\n\t\tsc: '打钱',\r\n\t\tship: '上舰',\r\n\t\tflower: '鲜花',\r\n\t\tegg: '鸡蛋',\r\n\t\twine: '酒杯',\r\n\t\tshoe: '拖鞋',\r\n\t\tyuxisx: '玉玺',\r\n\t\tshoukao: '枷锁',\r\n\t\tjunk: '平凡',\r\n\t\r\n\t\tcommon: '普通',\r\n\t\trare: '精品',\r\n\t\tepic: '史诗',\r\n\t\tlegend: '传说',\r\n\t\r\n\t\tbeginner: '简单',\r\n\t\r\n\t\tdefault: \"默认\",\r\n\t\tspecial: '特殊',\r\n\t\tzhenfa: '阵法',\r\n\t\taozhan: \"鏖战\",\r\n\t\tmode_derivation_card_config: '衍生',\r\n\t\tmode_banned_card_config: '禁卡',\r\n\t\tmode_favourite_character_config: '收藏',\r\n\t\tmode_banned_character_config: '禁将',\r\n\t\tsuit: '花色',\r\n\t\theart: \"♥︎\",\r\n\t\tdiamond: \"♦︎\",\r\n\t\tspade: \"♠︎\",\r\n\t\tclub: \"♣︎\",\r\n\t\tghujia: '护甲',\r\n\t\tghujia_bg: '甲',\r\n\t\theart2: \"红桃\",\r\n\t\tdiamond2: \"方片\",\r\n\t\tspade2: \"黑桃\",\r\n\t\tclub2: \"梅花\",\r\n\t\tcolor: '颜色',\r\n\t\tred: '红色',\r\n\t\tblack: '黑色',\r\n\t\tnone: '无色',\r\n\t\r\n\t\tnumber: '点数',\r\n\t\tcardname: '牌名',\r\n\t\r\n\t\tok: \"确定\",\r\n\t\tok2: \"确定\",\r\n\t\tcancel: \"取消\",\r\n\t\tcancel2: \"取消\",\r\n\t\trestart: \"重新开始\",\r\n\t\tsetting: \"设置\",\r\n\t\tstart: \"开始\",\r\n\t\trandom: \"随机\",\r\n\t\t_out: '无效',\r\n\t\tagree: '同意',\r\n\t\trefuse: '拒绝',\r\n\t\tfire: \"火\",\r\n\t\tthunder: \"雷\",\r\n\t\tpoison: \"毒\",\r\n\t\tkami: '神',\r\n\t\tocean: '海',\r\n\t\tice: '冰',\r\n\t\tyami: '暗',\r\n\t\r\n\t\tfire_ab: '火焰',\r\n\t\tthunder_ab: '雷电',\r\n\t\tocean_ab: '海洋',\r\n\t\tice_ab: '冰冻',\r\n\t\tyami_ab: '暗影',\r\n\t\r\n\t\tvtuber: '企',\r\n\t\tclubs: '社',\r\n\t\tvtuber2: '企业联合',\r\n\t\tclubs2: '社团联合',\r\n\t\r\n\t\twei: '魏',\r\n\t\tshu: '蜀',\r\n\t\twu: '吴',\r\n\t\tqun: '群',\r\n\t\tshen: '皇',\r\n\t\twestern: '西',\r\n\t\tkey: 'N',\r\n\t\tholo: '杏',\r\n\t\tdotlive: '点',\r\n\t\tnijisanji: '虹',\r\n\t\tVirtuaReal: '维阿',\r\n\t\tHappyElements: '乐',\r\n\t\tNetEase: '网',\r\n\t\tupd8: 'U',\r\n\t\teilene: '艾琳',\r\n\t\tparyi: '帕',\r\n\t\tkagura: '神楽',\r\n\t\tnanashi: '774',\r\n\t\tpsp: 'P',\r\n\t\tasoul: 'A',\r\n\t\tnori: '苔',\r\n\t\tvwp: '神椿',\r\n\t\tvshojo: 'V',\r\n\t\txuyan: '虚',\r\n\t\tchaos: 'C',\r\n\t\txuefeng: '雪',\r\n\t\tProvidence: '普',\r\n\t\thunmiao: '魂',\r\n\t\tego: '复',\r\n\t\tTencent: '腾',\r\n\t\tlucca: 'L',\r\n\t\tRedC: '红',\r\n\t\tdouble: '多',\r\n\t\twei2: '魏国',\r\n\t\tshu2: '蜀国',\r\n\t\twu2: '吴国',\r\n\t\tqun2: '群雄',\r\n\t\tshen2: '特典',\r\n\t\twestern2: '西方',\r\n\t\tkey2: 'KEY',\r\n\t\tholo2: 'Hololive',\r\n\t\tupd82: 'Upd8',\r\n\t\tdotlive2: '.live',\r\n\t\tnijisanji2: 'Nijisanji',\r\n\t\tVirtuaReal2: 'VirtuaReal',\r\n\t\tHappyElements2: '乐元素',\r\n\t\tNetEase2: '网易',\r\n\t\teilene2: '艾琳一家',\r\n\t\tparyi2: '帕里坡',\r\n\t\tkagura2: '神楽组',\r\n\t\tnanashi2: '774inc',\r\n\t\tpsp2: 'psplive',\r\n\t\tasoul2: 'A_SOUL',\r\n\t\tnori2: 'Noripro',\r\n\t\tvwp2: '神椿市',\r\n\t\tvshojo2: 'Vshojo',\r\n\t\txuyan2: '虚研社',\r\n\t\tchaos2: 'ChaosLive',\r\n\t\txuefeng2: '雪风军团',\r\n\t\tProvidence2: '普罗维登',\r\n\t\thunmiao2: '魂喵科技',\r\n\t\tego2: 'Egolive',\r\n\t\tTencent2: '腾讯',\r\n\t\tlucca2: 'Lucca事务所',\r\n\t\tRedC2: 'RedCircle',\r\n\t\tdouble2: '多势力',\r\n\t\tmale: '男',\r\n\t\tfemale: '女',\r\n\t\tmad: '混乱',\r\n\t\tmad_bg: '疯',\r\n\t\r\n\t\thp: '体力',\r\n\t\r\n\t\tdraw_card: '摸牌',\r\n\t\tdiscard_card: '弃牌',\r\n\t\ttake_damage: '受伤害',\r\n\t\treset_character: '复原武将牌',\r\n\t\trecover_hp: '回复体力',\r\n\t\tlose_hp: '流失体力',\r\n\t\tget_damage: '受伤害',\r\n\t\tweiColor: \"#b0d0e2\",\r\n\t\tshuColor: \"#ffddb9\",\r\n\t\twuColor: \"#b2d9a9\",\r\n\t\tqunColor: \"#f6f6f6\",\r\n\t\tshenColor: \"#ffe14c\",\r\n\t\twesternColor: \"#ffe14c\",\r\n\t\tjinColor: \"#ffe14c\",\r\n\t\tkeyColor: \"#c9b1fd\",\r\n\t\tholoColor: \"#38ABE0\",\r\n\t\tnijisanjiColor: \"#b0d0e2\",\r\n\t\tdotliveColor: \"#b2d9a9\",\r\n\t\tupd8Color: \"#ffe14c\",\r\n\t\teileneColor: \"#DB7093\",\r\n\t\tparyiColor: \"#DDAAAF\",\r\n\t\tVirtuaRealColor: \"#77aaee\",\r\n\t\tHappyElementsColor: \"#60ACC8\",\r\n\t\tkaguraColor: \"#55deef\",\r\n\t\tnanashiColor: \"#e27b6b\",\r\n\t\tpspColor: \"#4d3d11\",\r\n\t\tasoulColor: \"#ffddcc\",\r\n\t\tnoriColor: \"#a8ddaa\",\r\n\t\tbasic: '基本',\r\n\t\tequip: '装备',\r\n\t\ttrick: '锦囊',\r\n\t\tdelay: '延时锦囊',\r\n\t\tcharacter: '角色',\r\n\t\trevive: '复活',\r\n\t\tequip1: '武器',\r\n\t\tequip2: '防具',\r\n\t\tequip3: '防御载具',\r\n\t\tequip4: '攻击载具',\r\n\t\tequip5: '宝物',\r\n\t\tequip6: '坐骑',\r\n\t\tzero: '零',\r\n\t\tone: '一',\r\n\t\ttwo: '二',\r\n\t\tthree: '三',\r\n\t\tfour: '四',\r\n\t\tfive: '五',\r\n\t\tsix: '六',\r\n\t\tseven: '七',\r\n\t\teight: '八',\r\n\t\tnine: '九',\r\n\t\tten: '十',\r\n\t\t_chongzhu: '重铸',\r\n\t\t_lianhuan: '连环',\r\n\t\t_lianhuan2: '连环',\r\n\t\t_kamisha: '神杀',\r\n\t\t_oceansha: '海杀',\r\n\t\t_icesha: '冰杀',\r\n\t\t_yamisha: '暗杀',\r\n\t\t_yamisha2: '暗影',\r\n\t\t_shengjie: '升阶',\r\n\t\tqianxing: '潜行',\r\n\t\tmianyi: '免疫',\r\n\t\tfengyin: '封印',\r\n\t\tbaiban: '白板',\r\n\t\t_disableJudge: \"判定区\",\r\n\t\tpileTop: '牌堆顶',\r\n\t\tpileBottom: '牌堆底',\r\n\t\r\n\t\txiaowu_emotion: '小无表情',\r\n\t\tguojia_emotion: '郭嘉表情',\r\n\t\tzhenji_emotion: '甄姬表情',\r\n\t\tshibing_emotion: '士兵表情',\r\n\t\txiaosha_emotion: '小杀表情',\r\n\t\txiaotao_emotion: '小桃表情',\r\n\t\txiaojiu_emotion: '小酒表情',\r\n\t\tDiana_emotion: '嘉然表情',\r\n\t\r\n\t\tpause: '暂停',\r\n\t\tconfig: '选项',\r\n\t\tauto: '托管',\r\n\t\r\n\t\tunknown: '未知',\r\n\t\tunknown0: '一号位',\r\n\t\tunknown1: '二号位',\r\n\t\tunknown2: '三号位',\r\n\t\tunknown3: '四号位',\r\n\t\tunknown4: '五号位',\r\n\t\tunknown5: '六号位',\r\n\t\tunknown6: '七号位',\r\n\t\tunknown7: '八号位',\r\n\t\r\n\t\tfeichu_equip1: \"已废除\",\r\n\t\tfeichu_equip1_info: \"武器栏已废除\",\r\n\t\tfeichu_equip2: \"已废除\",\r\n\t\tfeichu_equip2_info: \"防具栏已废除\",\r\n\t\tfeichu_equip3: \"已废除\",\r\n\t\tfeichu_equip3_info: \"防御坐骑栏已废除\",\r\n\t\tfeichu_equip4: \"已废除\",\r\n\t\tfeichu_equip4_info: \"攻击坐骑栏已废除\",\r\n\t\tfeichu_equip5: \"已废除\",\r\n\t\tfeichu_equip5_info: \"宝物栏已废除\",\r\n\t\tfeichu_equip1_bg: \"废\",\r\n\t\tfeichu_equip2_bg: \"废\",\r\n\t\tfeichu_equip3_bg: \"废\",\r\n\t\tfeichu_equip4_bg: \"废\",\r\n\t\tfeichu_equip5_bg: \"废\",\r\n\t\tdisable_judge: '已废除',\r\n\t\tdisable_judge_info: '判定区已废除',\r\n\t\tdisable_judge_bg: '废',\r\n\t\tpss: '手势',\r\n\t\tpss_paper: '布',\r\n\t\tpss_scissor: '剪刀',\r\n\t\tpss_stone: '石头',\r\n\t\tpss_paper_info: '石头剪刀布时的一种手势。克制石头，但被剪刀克制。',\r\n\t\tpss_scissor_info: '石头剪刀布时的一种手势。克制布，但被石头克制。',\r\n\t\tpss_stone_info: '石头剪刀布时的一种手势。克制剪刀，但被布克制。',\r\n\t\r\n\t\tgroup_wei: \"魏势力\",\r\n\t\tgroup_shu: \"蜀势力\",\r\n\t\tgroup_wu: \"吴势力\",\r\n\t\tgroup_jin: \"晋势力\",\r\n\t\tgroup_qun: \"群势力\",\r\n\t\tgroup_key: \"键势力\",\r\n\t\tgroup_holo: \"杏势力\",\r\n\t\tgroup_nijisanji: \"虹势力\",\r\n\t\tgroup_VirtuaReal: \"维势力\",\r\n\t\tgroup_upd8: \"U势力\",\r\n\t\tgroup_paryi: \"帕势力\",\r\n\t\tgroup_kagura: \"神楽势力\",\r\n\t\tgroup_nanashi: \"7势力\",\r\n\t\tgroup_psp: \"P势力\",\r\n\t\tgroup_asoul: \"魂势力\",\r\n\t\tgroup_nori: \"苔势力\",\r\n\t\tgroup_vwp: \"神椿势力\",\r\n\t\tgroup_chaos: \"混沌势力\",\r\n\t\tgroup_xuyan: \"虚势力\",\r\n\t\tgroup_xuefeng: \"雪风势力\",\r\n\t\tgroup_Providence: \"普罗维登\",\r\n\t\tgroup_wei_bg: \"魏\",\r\n\t\tgroup_shu_bg: \"蜀\",\r\n\t\tgroup_wu_bg: \"吴\",\r\n\t\tgroup_qun_bg: \"群\",\r\n\t\tgroup_jin_bg: \"晋\",\r\n\t\tgroup_key_bg: \"键\",\r\n\t\tgroup_holo_bg: \"杏\",\r\n\t\tgroup_nijisanji_bg: \"虹\",\r\n\t\tgroup_VirtuaReal_bg: \"维\",\r\n\t\tgroup_upd8_bg: \"U\",\r\n\t\tgroup_paryi_bg: \"帕\",\r\n\t\tgroup_kagura_bg: \"咩\",\r\n\t\tgroup_nanashi_bg: \"な\",\r\n\t\tgroup_psp_bg: \"な\",\r\n\t\tgroup_asoul_bg: \"魂\",\r\n\t\tgroup_nori_bg: \"苔\",\r\n\t\tgroup_vwp_bg: \"椿\",\r\n\t\tgroup_chaos_bg: \"潮\",\r\n\t\tgroup_xuyan_bg: \"虚\",\r\n\t\tgroup_xuefeng_bg: \"雪\",\r\n\t\tgroup_Providence_bg: \"罗\",\r\n\t}\r\n}\n\n//# sourceURL=webpack:///./data/lib_translate.js?")},"./data/menu.js":()=>{eval("{\r\n    /**\r\n     * 游戏菜单\r\n     * @name configMenu\r\n     * @namespace\r\n     * @type {!Object}\r\n     */\r\n    let { game, ui, get, ai, lib, _status } = vkCore\r\n    lib.configMenu = {\r\n        /**\r\n         * 通用设置\r\n         * @name configMenu.general\r\n         * @type {!Object}\r\n         */\r\n        general: {\r\n            name: '通用',\r\n            config: {\r\n                low_performance: {\r\n                    name: '流畅模式',\r\n                    init: false,\r\n                    intro: '减少部分游戏特效，提高游戏速度',\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('low_performance', bool);\r\n                        if (bool) {\r\n                            ui.window.classList.add('low_performance');\r\n                        }\r\n                        else {\r\n                            ui.window.classList.remove('low_performance');\r\n                        }\r\n                    }\r\n                },\r\n                compatiblemode: {\r\n                    name: '兼容模式',\r\n                    init: false,\r\n                    intro: '开启兼容模式可防止扩展使游戏卡死并提高对旧扩展的兼容性，但对游戏速度有一定影响，若无不稳定或不兼容的扩展建议关闭',\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('compatiblemode', bool);\r\n                        if (bool) {\r\n                            ui.window.classList.add('compatiblemode');\r\n                        }\r\n                        else {\r\n                            ui.window.classList.remove('compatiblemode');\r\n                        }\r\n                    }\r\n                },\r\n                confirm_exit: {\r\n                    name: '确认退出',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                    intro: '离开游戏前弹出确认对话框',\r\n                },\r\n                keep_awake: {\r\n                    name: '屏幕常亮',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                    intro: '防止屏幕自动关闭<br>注：旧版本通过NoSleep.js实现的屏幕常亮可能会影响外置音频的音量',\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('keep_awake', bool);\r\n                        if (bool) {\r\n                            if (window.plugins && window.plugins.insomnia) window.plugins.insomnia.keepAwake();\r\n                            else if (window.noSleep) {\r\n                                document.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', function enableNoSleepX() {\r\n                                    document.removeEventListener(lib.config.touchscreen ? 'touchend' : 'click', enableNoSleepX, false);\r\n                                    window.noSleep.enable();\r\n                                }, false);\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (window.plugins && window.plugins.insomnia) window.plugins.insomnia.allowSleepAgain();\r\n                            else if (window.noSleep) window.noSleep.disable();\r\n                        }\r\n                    }\r\n                },\r\n                auto_confirm: {\r\n                    name: '自动确认',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                    intro: '当候选目标只有1个时，点击目标后无需再点击确认',\r\n                },\r\n                skip_shan: {\r\n                    name: '无闪自动取消',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                    intro: '当自己需要使用或打出【闪】时，若自己没有【闪】，则跳过该步骤',\r\n                },\r\n                unauto_choose: {\r\n                    name: '拆顺手牌选择',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                    intro: '拆牌或者顺牌时，就算只能选择对方的手牌依然手动选择',\r\n                },\r\n                wuxie_self: {\r\n                    name: '不无懈自己',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                    intro: '自己使用的单目标普通锦囊即将生效时，不询问无懈',\r\n                },\r\n                tao_enemy: {\r\n                    name: '不对敌方出桃',\r\n                    init: false,\r\n                    intro: '双方阵营明确的模式中（如对决），敌方角色濒死时不询问出桃',\r\n                    unfrequent: true,\r\n                },\r\n                enable_drag: {\r\n                    name: '启用拖拽',\r\n                    init: true,\r\n                    intro: '按住卡牌后可将卡牌拖至目标',\r\n                    unfrequent: true,\r\n                },\r\n                enable_dragline: {\r\n                    name: '拖拽指示线',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                    intro: '拖拽时显示虚线，可能降低游戏速度',\r\n                },\r\n                enable_touchdragline: {\r\n                    name: '拖拽指示线',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                    intro: '拖拽时显示虚线，可能降低游戏速度',\r\n                },\r\n                // enable_pressure:{\r\n                //     name:'启用压感',\r\n                //     init:false,\r\n                //     intro:'开启后可通过按压执行操作',\r\n                //     unfrequent:true,\r\n                // },\r\n                // pressure_taptic:{\r\n                //     name:'触觉反馈',\r\n                //     init:false,\r\n                //     intro:'开启后按压操作执行时将产生震动',\r\n                //     unfrequent:true,\r\n                // },\r\n                // pressure_click:{\r\n                //     name:'按压操作',\r\n                //     init:'pause',\r\n                //     intro:'在空白区域按压时的操作',\r\n                //     unfrequent:true,\r\n                //     item:{\r\n                //         pause:'暂停',\r\n                //         config:'选项',\r\n                //         auto:'托管',\r\n                //     }\r\n                // },\r\n                touchscreen: {\r\n                    name: '触屏模式',\r\n                    init: false,\r\n                    restart: true,\r\n                    unfrequent: true,\r\n                    intro: '开启后可使触屏设备反应更快，但无法使用鼠标操作',\r\n                    onclick: function (bool) {\r\n                        if (get.is.nomenu('touchscreen', bool)) return false;\r\n                        game.saveConfig('touchscreen', bool);\r\n                    }\r\n                },\r\n                swipe: {\r\n                    name: '滑动手势',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                    intro: '在非滚动区域向四个方向滑动可执行对应操作',\r\n                },\r\n                swipe_down: {\r\n                    name: '下划操作',\r\n                    init: 'menu',\r\n                    unfrequent: true,\r\n                    intro: '向下滑动时执行的操作',\r\n                    item: {\r\n                        system: '显示按钮',\r\n                        menu: '打开菜单',\r\n                        pause: '切换暂停',\r\n                        auto: '切换托管',\r\n                        chat: '显示聊天',\r\n                        off: '关闭',\r\n                    },\r\n                    onclick: function (item) {\r\n                        if (get.is.nomenu('swipe_down', item)) return false;\r\n                        game.saveConfig('swipe_down', item);\r\n                    }\r\n                },\r\n                swipe_up: {\r\n                    name: '上划操作',\r\n                    intro: '向上滑动时执行的操作',\r\n                    init: 'auto',\r\n                    unfrequent: true,\r\n                    item: {\r\n                        system: '显示按钮',\r\n                        menu: '打开菜单',\r\n                        pause: '切换暂停',\r\n                        auto: '切换托管',\r\n                        chat: '显示聊天',\r\n                        off: '关闭',\r\n                    },\r\n                    onclick: function (item) {\r\n                        if (get.is.nomenu('swipe_up', item)) return false;\r\n                        game.saveConfig('swipe_up', item);\r\n                    }\r\n                },\r\n                swipe_left: {\r\n                    name: '左划操作',\r\n                    intro: '向左滑动时执行的操作',\r\n                    init: 'system',\r\n                    unfrequent: true,\r\n                    item: {\r\n                        system: '显示按钮',\r\n                        menu: '打开菜单',\r\n                        pause: '切换暂停',\r\n                        auto: '切换托管',\r\n                        chat: '显示聊天',\r\n                        off: '关闭',\r\n                    },\r\n                    onclick: function (item) {\r\n                        if (get.is.nomenu('swipe_left', item)) return false;\r\n                        game.saveConfig('swipe_left', item);\r\n                    }\r\n                },\r\n                swipe_right: {\r\n                    name: '右划操作',\r\n                    intro: '向右滑动时执行的操作',\r\n                    init: 'system',\r\n                    unfrequent: true,\r\n                    item: {\r\n                        system: '显示按钮',\r\n                        menu: '打开菜单',\r\n                        pause: '切换暂停',\r\n                        auto: '切换托管',\r\n                        chat: '显示聊天',\r\n                        off: '关闭',\r\n                    },\r\n                    onclick: function (item) {\r\n                        if (get.is.nomenu('swipe_right', item)) return false;\r\n                        game.saveConfig('swipe_right', item);\r\n                    }\r\n                },\r\n                round_menu_func: {\r\n                    name: '触屏按钮操作',\r\n                    intro: '点击屏幕中圆形按钮时执行的操作',\r\n                    init: 'system',\r\n                    unfrequent: true,\r\n                    item: {\r\n                        system: '显示按钮',\r\n                        menu: '打开菜单',\r\n                        pause: '切换暂停',\r\n                        auto: '切换托管'\r\n                    },\r\n                    onclick: function (item) {\r\n                        if (get.is.nomenu('round_menu_func', item)) return false;\r\n                        game.saveConfig('round_menu_func', item);\r\n                    },\r\n                },\r\n                show_splash: {\r\n                    name: '显示开始界面',\r\n                    intro: '游戏开始前进入模式选择画面',\r\n                    init: 'init',\r\n                    item: {\r\n                        off: '关闭',\r\n                        init: '首次启动',\r\n                        always: '保持开启',\r\n                    }\r\n                },\r\n                game_speed: {\r\n                    name: '游戏速度',\r\n                    init: 'mid',\r\n                    item: {\r\n                        vslow: '慢',\r\n                        slow: '较慢',\r\n                        mid: '中',\r\n                        fast: '较快',\r\n                        vfast: '快',\r\n                        vvfast: '很快',\r\n                    },\r\n                    intro: '设置不同游戏操作间的时间间隔'\r\n                },\r\n                sync_speed: {\r\n                    name: '限制结算速度',\r\n                    intro: '在动画结算完成前不执行下一步操作，开启后游戏操作的间隔更长但画面更浏畅，在游戏较卡时建议开启',\r\n                    init: true\r\n                },\r\n                enable_vibrate: {\r\n                    name: '开启震动',\r\n                    intro: '回合开始时使手机震动',\r\n                    init: false\r\n                },\r\n                right_click: {\r\n                    name: '右键操作',\r\n                    init: 'pause',\r\n                    intro: '在空白区域点击右键时的操作',\r\n                    unfrequent: true,\r\n                    item: {\r\n                        pause: '暂停',\r\n                        shortcut: '工具',\r\n                        config: '选项',\r\n                        auto: '托管',\r\n                    },\r\n                    onclick: function (item) {\r\n                        if (get.is.nomenu('right_click', item)) return false;\r\n                        game.saveConfig('right_click', item);\r\n                    }\r\n                },\r\n                longpress_info: {\r\n                    name: '长按显示信息',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                    restart: true,\r\n                    intro: '长按后弹出菜单',\r\n                },\r\n                right_info: {\r\n                    name: '右键显示信息',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                    restart: true,\r\n                    intro: '右键点击后弹出菜单',\r\n                },\r\n                hover_all: {\r\n                    name: '悬停显示信息',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                    restart: true,\r\n                    intro: '悬停后弹出菜单',\r\n                },\r\n                hover_handcard: {\r\n                    name: '悬停手牌显示信息',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                    intro: '悬停手牌后弹出菜单',\r\n                },\r\n                hoveration: {\r\n                    name: '悬停菜单弹出时间',\r\n                    unfrequent: true,\r\n                    intro: '鼠标移至目标到弹出菜单的时间间隔',\r\n                    init: '1000',\r\n                    item: {\r\n                        '500': '0.5秒',\r\n                        '700': '0.7秒',\r\n                        '1000': '1秒',\r\n                        '1500': '1.5秒',\r\n                        '2500': '2.5秒',\r\n                    }\r\n                },\r\n                doubleclick_intro: {\r\n                    name: '双击显示武将资料',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                    intro: '双击武将头像后显示其资料卡',\r\n                },\r\n                video: {\r\n                    name: '保存录像',\r\n                    init: '20',\r\n                    intro: '游戏结束后保存录像在最大条数，超过后将从最早的录像开始删除（已收藏的录像不计入条数）',\r\n                    item: {\r\n                        '0': '关闭',\r\n                        '5': '五局',\r\n                        '10': '十局',\r\n                        '20': '二十局',\r\n                        '50': '五十局',\r\n                        '10000': '无限',\r\n                    },\r\n                    unfrequent: true,\r\n                },\r\n                max_loadtime: {\r\n                    name: '最长载入时间',\r\n                    intro: '设置游戏从启动到完成载入所需的最长时间，超过此时间未完成载入会报错，若设备较慢或安装了较多扩展可适当延长此时间',\r\n                    init: '10000',\r\n                    unfrequent: true,\r\n                    item: {\r\n                        5000: '5秒',\r\n                        10000: '10秒',\r\n                        20000: '20秒',\r\n                        60000: '60秒'\r\n                    },\r\n                    onclick: function (item) {\r\n                        game.saveConfig('max_loadtime', item);\r\n                        if (item == '5000') {\r\n                            localStorage.removeItem(lib.configprefix + 'loadtime');\r\n                        }\r\n                        else {\r\n                            localStorage.setItem(lib.configprefix + 'loadtime', item);\r\n                        }\r\n                    }\r\n                },\r\n                mousewheel: {\r\n                    name: '滚轮控制手牌',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                    intro: '开启后滚轮可使手牌横向滚动，在mac等可横向滚动的设备上建议关闭',\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('mousewheel', bool);\r\n                        if (lib.config.touchscreen) return;\r\n                        if (lib.config.mousewheel) {\r\n                            ui.handcards1Container.onmousewheel = ui.click.mousewheel;\r\n                            ui.handcards2Container.onmousewheel = ui.click.mousewheel;\r\n                        }\r\n                        else {\r\n                            ui.handcards1Container.onmousewheel = null;\r\n                            ui.handcards2Container.onmousewheel = null;\r\n                        }\r\n                    }\r\n                },\r\n                auto_check_update: {\r\n                    name: '自动检查游戏更新',\r\n                    intro: '进入游戏时检查更新',\r\n                    init: true,\r\n                    unfrequent: true\r\n                },\r\n                lucky_star: {\r\n                    name: '幸运星模式',\r\n                    intro: '在涉及随机数等的技能中，必定得到效果最好的结果。（联机模式无效）',\r\n                    init: false,\r\n                    unfrequent: true\r\n                },\r\n                dev: {\r\n                    name: '开发者模式',\r\n                    intro: '开启后可使用浏览器控制台控制游戏，同时可更新到开发版',\r\n                    init: false,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('dev', bool);\r\n                        if (_status.connectMode) return;\r\n                        if (bool) {\r\n                            lib.cheat.i();\r\n                        }\r\n                        else {\r\n                            delete window.cheat;\r\n                            delete window.game;\r\n                            delete window.ui;\r\n                            delete window.get;\r\n                            delete window.ai;\r\n                            delete window.lib;\r\n                            delete window._status;\r\n                        }\r\n                    },\r\n                    unfrequent: true,\r\n                },\r\n                errstop: {\r\n                    name: '出错时停止游戏',\r\n                    init: false,\r\n                    unfrequent: true\r\n                },\r\n                update_link: {\r\n                    name: '更新地址',\r\n                    init: 'coding',\r\n                    unfrequent: true,\r\n                    item: {\r\n                        coding: 'Coding',\r\n                        github: 'GitHub',\r\n                    },\r\n                    onclick: function (item) {\r\n                        game.saveConfig('update_link', item);\r\n                        lib.updateURL = lib.updateURLS[item] || lib.updateURLS.coding;\r\n                    },\r\n                },\r\n                //https://raw.githubusercontent.com/libccy/noname-extension/master/\r\n                extension_source: {\r\n                    name: '获取扩展地址',\r\n                    init: 'Coding',\r\n                    unfrequent: true,\r\n                    item: {},\r\n                    intro: function () {\r\n                        return '获取在线扩展时的地址。当前地址：<br>' + lib.config.extension_sources[lib.config.extension_source];\r\n                    },\r\n                    onclick: function (item) {\r\n                        game.saveConfig('extension_source', item);\r\n                    },\r\n                },\r\n                extension_create: {\r\n                    name: '添加获取扩展地址',\r\n                    clear: true,\r\n                    unfrequent: true,\r\n                    onclick: function () {\r\n                        game.prompt('请输入地址名称', function (str) {\r\n                            if (str) {\r\n                                var map = lib.config.extension_sources;\r\n                                game.prompt('请输入' + str + '的地址', function (str2) {\r\n                                    if (str2) {\r\n                                        delete map[str];\r\n                                        map[str] = str2;\r\n                                        game.saveConfig('extension_sources', map);\r\n                                        game.saveConfig('extension_source', str);\r\n                                        var nodexx = ui.extension_source;\r\n                                        nodexx.updateInner();\r\n                                        var nodeyy = nodexx._link.menu;\r\n                                        var nodezz = nodexx._link.config;\r\n                                        for (var i = 0; i < nodeyy.childElementCount; i++) {\r\n                                            if (nodeyy.childNodes[i]._link == str) {\r\n                                                nodeyy.childNodes[i].remove();\r\n                                                break;\r\n                                            }\r\n                                        }\r\n                                        var textMenu = ui.create.div('', str, nodeyy, function () {\r\n                                            var node = this.parentNode._link;\r\n                                            var config = node._link.config;\r\n                                            node._link.current = this.link;\r\n                                            var tmpName = node.lastChild.innerHTML;\r\n                                            node.lastChild.innerHTML = config.item[this._link];\r\n                                            if (config.onclick) {\r\n                                                if (config.onclick.call(node, this._link, this) === false) {\r\n                                                    node.lastChild.innerHTML = tmpName;\r\n                                                }\r\n                                            }\r\n                                            if (config.update) {\r\n                                                config.update();\r\n                                            }\r\n                                        });\r\n                                        textMenu._link = str;\r\n                                        nodezz.item[name] = str;\r\n                                        alert('已添加扩展地址：' + str);\r\n                                    }\r\n                                })\r\n                            }\r\n                        });\r\n                    },\r\n                },\r\n                extension_delete: {\r\n                    name: '删除当前扩展地址',\r\n                    clear: true,\r\n                    unfrequent: true,\r\n                    onclick: function () {\r\n                        var bool = false, map = lib.config.extension_sources;\r\n                        for (var i in map) {\r\n                            if (i != lib.config.extension_source) {\r\n                                bool = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!bool) {\r\n                            alert('不能删除最后一个扩展地址！');\r\n                            return;\r\n                        }\r\n                        var name = lib.config.extension_source;\r\n                        game.saveConfig('extension_source', i);\r\n                        delete map[name];\r\n                        game.saveConfig('extension_sources', map);\r\n                        var nodexx = ui.extension_source;\r\n                        nodexx.updateInner();\r\n                        var nodeyy = nodexx._link.menu;\r\n                        var nodezz = nodexx._link.config;\r\n                        for (var i = 0; i < nodeyy.childElementCount; i++) {\r\n                            if (nodeyy.childNodes[i]._link == name) {\r\n                                nodeyy.childNodes[i].remove();\r\n                                break;\r\n                            }\r\n                        }\r\n                        delete nodezz.item[name];\r\n                        alert('已删除扩展地址：' + name);\r\n                    },\r\n                },\r\n                update: function (config, map) {\r\n                    if ('ontouchstart' in document) {\r\n                        map.touchscreen.show();\r\n                    }\r\n                    else {\r\n                        map.touchscreen.hide();\r\n                    }\r\n                    if (lib.device || lib.node) {\r\n                        map.auto_check_update.show();\r\n                    }\r\n                    else {\r\n                        map.auto_check_update.hide();\r\n                    }\r\n                    if (lib.device) {\r\n                        map.enable_vibrate.show();\r\n                        map.keep_awake.show();\r\n                    }\r\n                    else {\r\n                        map.enable_vibrate.hide();\r\n                        map.keep_awake.hide();\r\n                    }\r\n                    // if(config.enable_pressure){\r\n                    //     map.pressure_click.show();\r\n                    //     if(lib.device){\r\n                    //         map.pressure_taptic.show();\r\n                    //     }\r\n                    //     else{\r\n                    //         map.pressure_taptic.hide();\r\n                    //     }\r\n                    // }\r\n                    // else{\r\n                    //     map.pressure_click.hide();\r\n                    //     map.pressure_taptic.hide();\r\n                    // }\r\n                    if (lib.config.touchscreen) {\r\n                        map.mousewheel.hide();\r\n                        map.hover_all.hide();\r\n                        map.hover_handcard.hide();\r\n                        map.hoveration.hide();\r\n                        map.right_info.hide();\r\n                        map.right_click.hide();\r\n                        map.longpress_info.show();\r\n                        map.swipe.show();\r\n                        if (lib.config.swipe) {\r\n                            map.swipe_up.show();\r\n                            map.swipe_down.show();\r\n                            map.swipe_left.show();\r\n                            map.swipe_right.show();\r\n                        }\r\n                        else {\r\n                            map.swipe_up.hide();\r\n                            map.swipe_down.hide();\r\n                            map.swipe_left.hide();\r\n                            map.swipe_right.hide();\r\n                        }\r\n                    }\r\n                    else {\r\n                        map.mousewheel.show();\r\n                        map.hover_all.show();\r\n                        map.right_info.show();\r\n                        map.right_click.show();\r\n                        map.longpress_info.hide();\r\n                        if (!config.hover_all) {\r\n                            map.hover_handcard.hide();\r\n                            map.hoveration.hide();\r\n                        }\r\n                        else {\r\n                            map.hover_handcard.show();\r\n                            map.hoveration.show();\r\n                        }\r\n                        map.swipe.hide();\r\n                        map.swipe_up.hide();\r\n                        map.swipe_down.hide();\r\n                        map.swipe_left.hide();\r\n                        map.swipe_right.hide();\r\n                    }\r\n                    if (lib.config.enable_drag) {\r\n                        if (lib.config.touchscreen) {\r\n                            map.enable_dragline.hide();\r\n                            map.enable_touchdragline.show();\r\n                        }\r\n                        else {\r\n                            map.enable_dragline.show();\r\n                            map.enable_touchdragline.hide();\r\n                        }\r\n                    }\r\n                    else {\r\n                        map.enable_dragline.hide();\r\n                        map.enable_touchdragline.hide();\r\n                    }\r\n                    if (!get.is.phoneLayout()) {\r\n                        map.round_menu_func.hide();\r\n                    }\r\n                    else {\r\n                        map.round_menu_func.show();\r\n                    }\r\n                    if (!lib.node && lib.device != 'ios') {\r\n                        map.confirm_exit.show();\r\n                    }\r\n                    else {\r\n                        map.confirm_exit.hide();\r\n                    }\r\n                    if (config.dev) {\r\n                        map.errstop.show();\r\n                    }\r\n                    else {\r\n                        map.errstop.hide();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * 外观设置\r\n         * @name configMenu.appearence\r\n         * @type {!Object}\r\n         */\r\n        appearence: {\r\n            name: '外观',\r\n            config: {\r\n                theme: {\r\n                    name: '主题',\r\n                    init: 'woodden',\r\n                    item: {},\r\n                    visualMenu: function (node, link) {\r\n                        if (!node.menu) {\r\n                            node.className = 'button character themebutton ' + link;\r\n                            node.menu = ui.create.div(node, '', '<div></div><div></div><div></div><div></div>');\r\n                        }\r\n                    },\r\n                    onclick: function (theme) {\r\n                        game.saveConfig('theme', theme);\r\n                        ui.arena.hide();\r\n                        lib.init.background();\r\n                        if (lib.config.autostyle) {\r\n                            if (theme == 'simple') {\r\n                                lib.configMenu.appearence.config.player_border.onclick('slim');\r\n                            }\r\n                            else {\r\n                                lib.configMenu.appearence.config.player_border.onclick('normal');\r\n                            }\r\n                        }\r\n                        setTimeout(function () {\r\n                            var theme = ui.css.theme;\r\n                            ui.css.theme = lib.init.css(lib.assetURL + 'theme/' + lib.config.theme, 'style');\r\n                            theme.remove();\r\n                            setTimeout(function () { ui.arena.show(); }, 100);\r\n                        }, 500);\r\n                    }\r\n                },\r\n                /**\r\n                 * 游戏布局\r\n                 * @name configMenu.appearence.layout\r\n                 */\r\n                layout: {\r\n                    name: '布局',\r\n                    init: 'mobile',\r\n                    item: {\r\n                        default: '旧版',\r\n                        newlayout: '对称',\r\n                        mobile: '默认',\r\n                        long: '宽屏',\r\n                        long2: '手杀',\r\n                        nova: '新版'\r\n                    },\r\n                    visualMenu: function (node, link) {\r\n                        node.className = 'button character themebutton ' + lib.config.theme;\r\n                        if (!node.created) {\r\n                            node.created = true;\r\n                            node.style.overflow = 'hidden';\r\n                            node.firstChild.style.display = 'none';\r\n                            // node.firstChild.classList.add('shadowed');\r\n                            // node.firstChild.style.width='16px';\r\n                            // node.firstChild.style.height='auto';\r\n                            // node.firstChild.style.padding='2px';\r\n                            // node.firstChild.style.textAlign='center';\r\n                            var me = ui.create.div(node);\r\n                            me.style.top = 'auto';\r\n                            if (link == 'default' || link == 'newlayout') {\r\n                                me.style.width = 'calc(100% - 6px)';\r\n                                me.style.left = '3px';\r\n                                me.style.bottom = '3px';\r\n                                me.style.height = '25px';\r\n                                if (link == 'newlayout') {\r\n                                    me.style.height = '23px';\r\n                                    me.style.bottom = '4px';\r\n                                }\r\n                            }\r\n                            else if (link == 'long2' || link == 'nova') {\r\n                                me.style.display = 'none';\r\n                            }\r\n                            else {\r\n                                me.style.width = '120%';\r\n                                me.style.left = '-10%';\r\n                                me.style.bottom = '0';\r\n                                me.style.height = '22px';\r\n                            }\r\n                            me.style.borderRadius = '2px';\r\n                            var list = ['KizunaAI', 'MiraiAkari', 'Siro', 'Nekomasu'];\r\n                            for (var i = 0; i < 4; i++) {\r\n                                var player = ui.create.div('.fakeplayer', node);\r\n                                ui.create.div('.avatar', player).setBackground(list.randomRemove(), 'character');\r\n                                player.style.borderRadius = '2px';\r\n                                if (i != 3) {\r\n                                    player.style.top = 'auto';\r\n                                }\r\n                                if (link == 'default') {\r\n                                    player.style.height = '19px';\r\n                                    player.style.width = '38px';\r\n                                    player.classList.add('oldlayout')\r\n                                }\r\n                                else if (link == 'mobile' || link == 'newlayout') {\r\n                                    player.style.width = '24px';\r\n                                    player.style.height = '29px';\r\n                                }\r\n                                else if (link == 'nova') {\r\n                                    player.style.width = '20px';\r\n                                    player.style.height = '24px';\r\n                                }\r\n                                else {\r\n                                    player.style.width = '20px';\r\n                                    player.style.height = '34px';\r\n                                }\r\n                                if (i == 1) {\r\n                                    player.style.left = '3px';\r\n                                }\r\n                                if (i == 2) {\r\n                                    player.style.left = 'auto';\r\n                                    player.style.right = '3px';\r\n                                }\r\n                                if (i == 3) {\r\n                                    player.style.top = '3px';\r\n                                }\r\n                                if (link == 'default') {\r\n                                    if (i == 0) {\r\n                                        player.style.bottom = '6px';\r\n                                    }\r\n                                    if (i == 0 || i == 3) {\r\n                                        player.style.left = 'calc(50% - 18px)';\r\n                                    }\r\n                                    if (i == 1 || i == 2) {\r\n                                        player.style.bottom = '36px';\r\n                                    }\r\n                                }\r\n                                else if (link == 'newlayout') {\r\n                                    if (i == 0) {\r\n                                        player.style.bottom = '1px';\r\n                                    }\r\n                                    if (i == 0 || i == 3) {\r\n                                        player.style.left = 'calc(50% - 12px)';\r\n                                    }\r\n                                    if (i == 1 || i == 2) {\r\n                                        player.style.bottom = '32px';\r\n                                    }\r\n                                }\r\n                                else if (link == 'mobile') {\r\n                                    if (i == 0 || i == 3) {\r\n                                        player.style.left = 'calc(50% - 12px)';\r\n                                    }\r\n                                    if (i == 1 || i == 2) {\r\n                                        player.style.bottom = '30px';\r\n                                    }\r\n                                }\r\n                                else if (link == 'long') {\r\n                                    if (i == 0 || i == 3) {\r\n                                        player.style.left = 'calc(50% - 10px)';\r\n                                    }\r\n                                    if (i == 1 || i == 2) {\r\n                                        player.style.bottom = '45px';\r\n                                    }\r\n                                }\r\n                                else if (link == 'long2') {\r\n                                    if (i == 0) {\r\n                                        player.style.bottom = '2px';\r\n                                        player.style.left = '3px';\r\n                                    }\r\n                                    if (i == 3) {\r\n                                        player.style.left = 'calc(50% - 10px)';\r\n                                    }\r\n                                    if (i == 1 || i == 2) {\r\n                                        player.style.bottom = '45px';\r\n                                    }\r\n                                }\r\n                                else if (link == 'nova') {\r\n                                    if (i == 0) {\r\n                                        player.style.bottom = '2px';\r\n                                        player.style.left = '3px';\r\n                                    }\r\n                                    if (i == 3) {\r\n                                        player.style.left = 'calc(50% - 10px)';\r\n                                    }\r\n                                    if (i == 1 || i == 2) {\r\n                                        player.style.left = '3px';\r\n                                        player.style.bottom = (i * 30) + 'px';\r\n                                    }\r\n                                }\r\n\r\n                                if (i == 0 && (link == 'mobile' || link == 'long')) {\r\n                                    player.classList.add('me');\r\n                                    player.style.borderRadius = '0px';\r\n                                    player.style.width = '25px';\r\n                                    player.style.height = '25px';\r\n                                    player.style.bottom = '-3px';\r\n                                    player.style.left = '-3px';\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    onclick: function (layout) {\r\n                        if (lib.layoutfixed.contains(lib.config.mode)) {\r\n                            game.saveConfig('layout', layout);\r\n                        }\r\n                        else {\r\n                            lib.init.layout(layout);\r\n                        }\r\n                    }\r\n                },\r\n                // fewplayer:{\r\n                //     name:'启用人数',\r\n                //     intro:'设置启用新版布局的最小人数（不足时切换至默认布局）',\r\n                //     init:'3',\r\n                //     // unfrequent:true,\r\n                //     item:{\r\n                //                  '2':'两人',\r\n                //                  '3':'三人',\r\n                //                  '4':'四人',\r\n                //                  '5':'五人',\r\n                //                  '6':'六人',\r\n                //                  '7':'七人',\r\n                //                  '8':'八人',\r\n                //     },\r\n                //     onclick:function(item){\r\n                //                  game.saveConfig('fewplayer',item);\r\n                //                  if(ui.arena) ui.arena.setNumber(ui.arena.dataset.number);\r\n                //     }\r\n                // },\r\n                player_height: {\r\n                    name: '角色高度',\r\n                    init: 'long',\r\n                    // unfrequent:true,\r\n                    item: {\r\n                        short: '矮',\r\n                        default: '中',\r\n                        long: '高',\r\n                    },\r\n                    onclick: function (item) {\r\n                        game.saveConfig('player_height', item);\r\n                        ui.arena.dataset.player_height = item;\r\n                    }\r\n                },\r\n                player_height_nova: {\r\n                    name: '角色高度',\r\n                    init: 'short',\r\n                    item: {\r\n                        // auto:'自动',\r\n                        short: '矮',\r\n                        default: '中',\r\n                        long: '高',\r\n                    },\r\n                    onclick: function (item) {\r\n                        game.saveConfig('player_height_nova', item);\r\n                        // if(item=='auto'){\r\n                        //     if(parseInt(ui.arena.dataset.number)>=7){\r\n                        //         ui.arena.dataset.player_height_nova='short';\r\n                        //     }\r\n                        //     else{\r\n                        //         ui.arena.dataset.player_height_nova='default';\r\n                        //     }\r\n                        // }\r\n                        // else{\r\n                        ui.arena.dataset.player_height_nova = item;\r\n                        // }\r\n                    }\r\n                },\r\n                // background_color_music:{\r\n                //     name:'背景色',\r\n                //     init:'black',\r\n                //     item:{\r\n                //         blue:'蓝色',\r\n                //         black:'黑色',\r\n                //     },\r\n                //     onclick:function(color){\r\n                //         game.saveConfig('background_color_music',color);\r\n                //         document.body.dataset.background_color_music=color;\r\n                //     }\r\n                // },\r\n                // background_color_wood:{\r\n                //     name:'背景色',\r\n                //     init:'blue',\r\n                //     item:{\r\n                //         blue:'蓝色',\r\n                //         black:'黑色',\r\n                //     },\r\n                //     onclick:function(color){\r\n                //         game.saveConfig('background_color_wood',color);\r\n                //         document.body.dataset.background_color_wood=color;\r\n                //     }\r\n                // },\r\n                // theme_color_music:{\r\n                //     name:'主题色',\r\n                //     init:'black',\r\n                //     item:{\r\n                //         blue:'蓝色',\r\n                //         black:'黑色',\r\n                //     },\r\n                //     onclick:function(color){\r\n                //         game.saveConfig('theme_color_music',color);\r\n                //         document.body.dataset.theme_color_music=color;\r\n                //     }\r\n                // },\r\n                ui_zoom: {\r\n                    name: '界面缩放',\r\n                    unfrequent: true,\r\n                    init: 'normal',\r\n                    item: {\r\n                        esmall: '80%',\r\n                        vsmall: '90%',\r\n                        small: '95%',\r\n                        normal: '100%',\r\n                        big: '105%',\r\n                        vbig: '110%',\r\n                        ebig: '120%',\r\n                    },\r\n                    onclick: function (zoom) {\r\n                        game.saveConfig('ui_zoom', zoom);\r\n                        switch (zoom) {\r\n                            case 'esmall': zoom = 0.8; break;\r\n                            case 'vsmall': zoom = 0.9; break;\r\n                            case 'small': zoom = 0.93; break;\r\n                            case 'big': zoom = 1.05; break;\r\n                            case 'vbig': zoom = 1.1; break;\r\n                            case 'ebig': zoom = 1.2; break;\r\n                            default: zoom = 1;\r\n                        }\r\n                        game.documentZoom = game.deviceZoom * zoom;\r\n                        ui.updatez();\r\n                    }\r\n                },\r\n                image_background: {\r\n                    name: '游戏背景',\r\n                    init: 'default',\r\n                    item: {},\r\n                    visualBar: function (node, item, create) {\r\n                        if (node.created) {\r\n                            node.lastChild.classList.remove('active');\r\n                            return;\r\n                        }\r\n                        node.created = true;\r\n                        ui.create.filediv('.menubutton', '添加背景', node, function (file) {\r\n                            if (file) {\r\n                                var name = file.name;\r\n                                if (name.indexOf('.') != -1) {\r\n                                    name = name.slice(0, name.indexOf('.'));\r\n                                }\r\n                                var link = (game.writeFile ? 'cdv_' : 'custom_') + name;\r\n                                if (item[link]) {\r\n                                    for (var i = 1; i < 1000; i++) {\r\n                                        if (!item[link + '_' + i]) {\r\n                                            link = link + '_' + i; break;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                item[link] = name;\r\n                                var callback = function () {\r\n                                    create(link, node.parentNode.defaultNode);\r\n                                    node.parentNode.updateBr();\r\n                                    lib.config.customBackgroundPack.add(link);\r\n                                    game.saveConfig('customBackgroundPack', lib.config.customBackgroundPack);\r\n                                };\r\n                                if (game.writeFile) {\r\n                                    game.writeFile(file, 'image/background', link + '.jpg', callback);\r\n                                }\r\n                                else {\r\n                                    game.putDB('image', link, file, callback);\r\n                                }\r\n                                if (node.lastChild.classList.contains('active')) {\r\n                                    editbg.call(node.lastChild);\r\n                                }\r\n                            }\r\n                        }).inputNode.accept = 'image/*';\r\n                        var editbg = function () {\r\n                            this.classList.toggle('active');\r\n                            var page = this.parentNode.parentNode;\r\n                            for (var i = 0; i < page.childElementCount; i++) {\r\n                                if (page.childNodes[i].classList.contains('button')) {\r\n                                    var link = page.childNodes[i]._link;\r\n                                    if (link && link != 'default') {\r\n                                        var str;\r\n                                        if (this.classList.contains('active')) {\r\n                                            if (link.indexOf('custom_') == 0 || link.indexOf('cdv_') == 0) {\r\n                                                str = '删除';\r\n                                            }\r\n                                            else {\r\n                                                str = '隐藏';\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            str = item[link];\r\n                                        }\r\n                                        page.childNodes[i].firstChild.innerHTML = get.verticalStr(str);\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                        ui.create.div('.menubutton', '编辑背景', node, editbg);\r\n                    },\r\n                    visualMenu: function (node, link, name, config) {\r\n                        node.className = 'button character';\r\n                        node.style.backgroundImage = '';\r\n                        node.style.backgroundSize = '';\r\n                        if (node.firstChild) {\r\n                            node.firstChild.innerHTML = get.verticalStr(name);\r\n                        }\r\n                        if (link == 'default' || link.indexOf('custom_') == 0) {\r\n                            node.style.backgroundImage = 'none';\r\n                            node.classList.add('dashedmenubutton');\r\n                            if (link.indexOf('custom_') == 0) {\r\n                                game.getDB('image', link, function (fileToLoad) {\r\n                                    if (!fileToLoad) return;\r\n                                    var fileReader = new FileReader();\r\n                                    fileReader.onload = function (fileLoadedEvent) {\r\n                                        var data = fileLoadedEvent.target.result;\r\n                                        node.style.backgroundImage = 'url(' + data + ')';\r\n                                        node.style.backgroundSize = 'cover';\r\n                                        node.classList.remove('dashedmenubutton');\r\n                                    };\r\n                                    fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                                });\r\n                            }\r\n                            else {\r\n                                node.parentNode.defaultNode = node;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (link.indexOf('svg_') == 0) {\r\n                                node.setBackgroundImage('image/background/' + link.slice(4) + '.svg');\r\n                            }\r\n                            else {\r\n                                node.setBackgroundImage('image/background/' + link + '.jpg');\r\n                            }\r\n                            node.style.backgroundSize = 'cover';\r\n                        }\r\n                    },\r\n                    onclick: function (background, node) {\r\n                        if (node && node.firstChild) {\r\n                            var menu = node.parentNode;\r\n                            if (node.firstChild.innerHTML == get.verticalStr('隐藏')) {\r\n                                menu.parentNode.noclose = true;\r\n                                node.remove();\r\n                                menu.updateBr();\r\n                                if (!lib.config.prompt_hidebg) {\r\n                                    alert('隐藏的背景可通过选项-其它-重置隐藏内容恢复');\r\n                                    game.saveConfig('prompt_hidebg', true);\r\n                                }\r\n                                lib.config.hiddenBackgroundPack.add(background);\r\n                                game.saveConfig('hiddenBackgroundPack', lib.config.hiddenBackgroundPack);\r\n                                delete lib.configMenu.appearence.config.image_background.item[background];\r\n                                if (lib.config.image_background == background) {\r\n                                    background = 'default';\r\n                                    this.lastChild.innerHTML = '默认';\r\n                                }\r\n                                else {\r\n                                    this.lastChild.innerHTML = lib.configMenu.appearence.config.image_background.item[lib.config.image_background];\r\n                                    return;\r\n                                }\r\n                            }\r\n                            else if (node.firstChild.innerHTML == get.verticalStr('删除')) {\r\n                                menu.parentNode.noclose = true;\r\n                                if (confirm('是否删除此背景？（此操作不可撤销）')) {\r\n                                    node.remove();\r\n                                    menu.updateBr();\r\n                                    lib.config.customBackgroundPack.remove(background);\r\n                                    game.saveConfig('customBackgroundPack', lib.config.customBackgroundPack);\r\n                                    if (background.indexOf('cdv_') == 0) {\r\n                                        game.removeFile('image/background/' + background + '.jpg');\r\n                                    }\r\n                                    else {\r\n                                        game.deleteDB('image', background);\r\n                                    }\r\n                                    delete lib.configMenu.appearence.config.image_background.item[background];\r\n                                    if (lib.config.image_background == background) {\r\n                                        background = 'default';\r\n                                        this.lastChild.innerHTML = '默认';\r\n                                    }\r\n                                    else {\r\n                                        this.lastChild.innerHTML = lib.configMenu.appearence.config.image_background.item[lib.config.image_background];\r\n                                        return;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        var animate = lib.config.image_background == 'default';\r\n                        game.saveConfig('image_background', background);\r\n                        lib.init.background();\r\n                        ui.background.delete();\r\n                        ui.background = ui.create.div('.background');\r\n\r\n                        if (lib.config.image_background_blur) {\r\n                            ui.background.style.filter = 'blur(8px)';\r\n                            ui.background.style.webkitFilter = 'blur(8px)';\r\n                            ui.background.style.transform = 'scale(1.05)';\r\n                        }\r\n                        else {\r\n                            ui.background.style.filter = '';\r\n                            ui.background.style.webkitFilter = '';\r\n                            ui.background.style.transform = '';\r\n                        }\r\n\r\n                        document.body.insertBefore(ui.background, document.body.firstChild);\r\n                        if (animate) ui.background.animate('start');\r\n                        if (lib.config.image_background == 'default') {\r\n                            ui.background.style.backgroundImage = \"none\";\r\n                        }\r\n                        else if (lib.config.image_background.indexOf('custom_') == 0) {\r\n                            ui.background.style.backgroundImage = \"none\";\r\n                            game.getDB('image', lib.config.image_background, function (fileToLoad) {\r\n                                if (!fileToLoad) return;\r\n                                var fileReader = new FileReader();\r\n                                fileReader.onload = function (fileLoadedEvent) {\r\n                                    var data = fileLoadedEvent.target.result;\r\n                                    ui.background.style.backgroundImage = 'url(' + data + ')';\r\n                                };\r\n                                fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                            });\r\n                        }\r\n                        else {\r\n                            if (lib.config.image_background.indexOf('svg_') == 0) {\r\n                                ui.background.setBackgroundImage('image/background/' + lib.config.image_background.slice(4) + '.svg');\r\n                            }\r\n                            else {\r\n                                ui.background.setBackgroundImage('image/background/' + lib.config.image_background + '.jpg');\r\n\r\n                                ui.backgroundSVG = ui.create.div('.background', ui.background);\r\n                                ui.backgroundSVG.setBackgroundImage('image/background/' + 'simple1_bg' + '.svg');\r\n                                ui.backgroundSVG.style.opacity = '.3';\r\n                            }\r\n                        }\r\n                        ui.background.style.backgroundSize = 'cover';\r\n                        ui.background.style.backgroundPosition = '50% 50%';\r\n                    },\r\n                },\r\n                image_background_random: {\r\n                    name: '随机背景',\r\n                    init: false,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('image_background_random', bool);\r\n                        lib.init.background();\r\n                    }\r\n                },\r\n                image_background_blur: {\r\n                    name: '背景模糊',\r\n                    init: false,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('image_background_blur', bool);\r\n                        if (lib.config.image_background_blur) {\r\n                            ui.background.style.filter = 'blur(8px)';\r\n                            ui.background.style.webkitFilter = 'blur(8px)';\r\n                            ui.background.style.transform = 'scale(1.05)';\r\n                        }\r\n                        else {\r\n                            ui.background.style.filter = '';\r\n                            ui.background.style.webkitFilter = '';\r\n                            ui.background.style.transform = '';\r\n                        }\r\n                    },\r\n                },\r\n                phonelayout: {\r\n                    name: '触屏布局',\r\n                    init: false,\r\n                    onclick: function (bool) {\r\n                        if (get.is.nomenu('phonelayout', bool)) return false;\r\n                        game.saveConfig('phonelayout', bool);\r\n                        if (get.is.phoneLayout()) {\r\n                            ui.css.phone.href = lib.assetURL + 'layout/default/phone.css';\r\n                            ui.arena.classList.add('phone');\r\n                        }\r\n                        else {\r\n                            ui.css.phone.href = '';\r\n                            ui.arena.classList.remove('phone');\r\n                        }\r\n                    }\r\n                },\r\n                change_skin: {\r\n                    name: '开启换肤',\r\n                    init: true,\r\n                    intro: '在武将的右键菜单中换肤，皮肤可在选项-文件-图片文件-皮肤图片中添加'\r\n                },\r\n                change_skin_auto: {\r\n                    name: '自动换肤',\r\n                    init: 'off',\r\n                    item: {\r\n                        'off': '关闭',\r\n                        '30000': '半分钟',\r\n                        '60000': '一分钟',\r\n                        '120000': '两分钟',\r\n                        '300000': '五分钟',\r\n                    },\r\n                    intro: '游戏每进行一段时间自动为一个随机角色更换皮肤',\r\n                    onclick: function (item) {\r\n                        game.saveConfig('change_skin_auto', item);\r\n                        clearTimeout(_status.skintimeout);\r\n                        if (item != 'off') {\r\n                            _status.skintimeout = setTimeout(ui.click.autoskin, parseInt(item));\r\n                        }\r\n                    }\r\n                },\r\n                card_style: {\r\n                    name: '卡牌样式',\r\n                    init: 'default',\r\n                    intro: '设置正面朝上的卡牌的样式',\r\n                    item: {\r\n                        wood: '木纹',\r\n                        music: '音乐',\r\n                        simple: '原版',\r\n                        ol: '手杀',\r\n                        // new:'新版',\r\n                        custom: '自定',\r\n                        default: '默认',\r\n                    },\r\n                    visualBar: function (node, item, create, switcher) {\r\n                        if (node.created) {\r\n                            return;\r\n                        }\r\n                        var button;\r\n                        for (var i = 0; i < node.parentNode.childElementCount; i++) {\r\n                            if (node.parentNode.childNodes[i]._link == 'custom') {\r\n                                button = node.parentNode.childNodes[i];\r\n                            }\r\n                        }\r\n                        if (!button) {\r\n                            return;\r\n                        }\r\n                        node.created = true;\r\n                        var deletepic;\r\n                        ui.create.filediv('.menubutton', '添加图片', node, function (file) {\r\n                            if (file) {\r\n                                game.putDB('image', 'card_style', file, function () {\r\n                                    game.getDB('image', 'card_style', function (fileToLoad) {\r\n                                        if (!fileToLoad) return;\r\n                                        var fileReader = new FileReader();\r\n                                        fileReader.onload = function (fileLoadedEvent) {\r\n                                            var data = fileLoadedEvent.target.result;\r\n                                            button.style.backgroundImage = 'url(' + data + ')';\r\n                                            button.className = 'button card fullskin';\r\n                                            node.classList.add('showdelete');\r\n                                        };\r\n                                        fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                                    });\r\n                                });\r\n                            }\r\n                        }).inputNode.accept = 'image*';\r\n                        deletepic = ui.create.div('.menubutton.deletebutton', '删除图片', node, function () {\r\n                            if (confirm('确定删除自定义图片？（此操作不可撤销）')) {\r\n                                game.deleteDB('image', 'card_style');\r\n                                button.style.backgroundImage = 'none';\r\n                                button.className = 'button character dashedmenubutton';\r\n                                node.classList.remove('showdelete');\r\n                                if (lib.config.card_style == 'custom') {\r\n                                    lib.configMenu.appearence.config.card_style.onclick('default');\r\n                                    switcher.lastChild.innerHTML = '默认';\r\n                                }\r\n                                button.classList.add('transparent');\r\n                            }\r\n                        });\r\n                    },\r\n                    visualMenu: function (node, link, name, config) {\r\n                        node.className = 'button card fullskin';\r\n                        node.style.backgroundSize = '100% 100%';\r\n                        switch (link) {\r\n                            case 'default': case 'custom': {\r\n                                if (lib.config.theme == 'simple') {\r\n                                    node.style.backgroundImage = 'linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4))';\r\n                                    node.className = 'button character';\r\n                                }\r\n                                else {\r\n                                    node.style.backgroundImage = 'none';\r\n                                    node.className = 'button character dashedmenubutton';\r\n                                }\r\n                                break;\r\n                            }\r\n                            case 'new': node.setBackgroundImage('theme/style/card/image/new.png'); break;\r\n                            case 'ol': node.setBackgroundImage('theme/style/card/image/ol.png'); break;\r\n                            case 'wood': node.setBackgroundImage('theme/woodden/wood.jpg'); node.style.backgroundSize = 'initial'; break;\r\n                            case 'music': node.setBackgroundImage('theme/music/wood3.png'); break;\r\n                            case 'simple': node.setBackgroundImage('theme/simple/card.png'); break;\r\n                        }\r\n                        if (link == 'custom') {\r\n                            node.classList.add('transparent');\r\n                            game.getDB('image', 'card_style', function (fileToLoad) {\r\n                                if (!fileToLoad) return;\r\n                                var fileReader = new FileReader();\r\n                                fileReader.onload = function (fileLoadedEvent) {\r\n                                    var data = fileLoadedEvent.target.result;\r\n                                    node.style.backgroundImage = 'url(' + data + ')';\r\n                                    node.className = 'button card fullskin';\r\n                                    node.parentNode.lastChild.classList.add('showdelete');\r\n                                };\r\n                                fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                            });\r\n                        }\r\n                    },\r\n                    onclick: function (layout) {\r\n                        game.saveConfig('card_style', layout);\r\n                        var style = ui.css.card_style;\r\n                        ui.css.card_style = lib.init.css(lib.assetURL + 'theme/style/card', lib.config.card_style);\r\n                        style.remove();\r\n                        if (ui.css.card_stylesheet) {\r\n                            ui.css.card_stylesheet.remove();\r\n                            delete ui.css.card_stylesheet;\r\n                        }\r\n                        if (layout == 'custom') {\r\n                            game.getDB('image', 'card_style', function (fileToLoad) {\r\n                                if (!fileToLoad) return;\r\n                                var fileReader = new FileReader();\r\n                                fileReader.onload = function (fileLoadedEvent) {\r\n                                    if (ui.css.card_stylesheet) {\r\n                                        ui.css.card_stylesheet.remove();\r\n                                    }\r\n                                    ui.css.card_stylesheet = lib.init.sheet('.card:not(*:empty){background-image:url(' + fileLoadedEvent.target.result + ')}');\r\n                                };\r\n                                fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                            });\r\n                        }\r\n                    },\r\n                    unfrequent: true,\r\n                },\r\n                cardback_style: {\r\n                    name: '卡背样式',\r\n                    intro: '设置背面朝上的卡牌的样式',\r\n                    init: 'default',\r\n                    item: {\r\n                        // wood:'木纹',\r\n                        // music:'音乐',\r\n                        vk: 'V杀',\r\n                        official: '原版',\r\n                        // new:'新版',\r\n                        feicheng: '废城',\r\n                        liusha: '流沙',\r\n                        ol: '手杀',\r\n                        custom: '自定',\r\n                        default: '默认',\r\n                    },\r\n                    visualBar: function (node, item, create, switcher) {\r\n                        if (node.created) {\r\n                            return;\r\n                        }\r\n                        var button;\r\n                        for (var i = 0; i < node.parentNode.childElementCount; i++) {\r\n                            if (node.parentNode.childNodes[i]._link == 'custom') {\r\n                                button = node.parentNode.childNodes[i];\r\n                            }\r\n                        }\r\n                        if (!button) {\r\n                            return;\r\n                        }\r\n                        node.created = true;\r\n                        var deletepic;\r\n                        ui.create.filediv('.menubutton', '添加图片', node, function (file) {\r\n                            if (file) {\r\n                                game.putDB('image', 'cardback_style', file, function () {\r\n                                    game.getDB('image', 'cardback_style', function (fileToLoad) {\r\n                                        if (!fileToLoad) return;\r\n                                        var fileReader = new FileReader();\r\n                                        fileReader.onload = function (fileLoadedEvent) {\r\n                                            var data = fileLoadedEvent.target.result;\r\n                                            button.style.backgroundImage = 'url(' + data + ')';\r\n                                            button.className = 'button character';\r\n                                            node.classList.add('showdelete');\r\n                                        };\r\n                                        fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                                    });\r\n                                });\r\n                            }\r\n                        }).inputNode.accept = 'image/*';\r\n                        ui.create.filediv('.menubutton.deletebutton.addbutton', '添加翻转图片', node, function (file) {\r\n                            if (file) {\r\n                                game.putDB('image', 'cardback_style2', file, function () {\r\n                                    node.classList.add('hideadd');\r\n                                });\r\n                            }\r\n                        }).inputNode.accept = 'image/*';\r\n                        deletepic = ui.create.div('.menubutton.deletebutton', '删除图片', node, function () {\r\n                            if (confirm('确定删除自定义图片？（此操作不可撤销）')) {\r\n                                game.deleteDB('image', 'cardback_style');\r\n                                game.deleteDB('image', 'cardback_style2');\r\n                                button.style.backgroundImage = 'none';\r\n                                button.className = 'button character dashedmenubutton';\r\n                                node.classList.remove('showdelete');\r\n                                node.classList.remove('hideadd');\r\n                                if (lib.config.cardback_style == 'custom') {\r\n                                    lib.configMenu.appearence.config.cardback_style.onclick('default');\r\n                                    switcher.lastChild.innerHTML = '默认';\r\n                                }\r\n                                button.classList.add('transparent');\r\n                            }\r\n                        });\r\n                    },\r\n                    visualMenu: function (node, link, name, config) {\r\n                        node.style.backgroundSize = '100% 100%';\r\n                        switch (link) {\r\n                            case 'default': case 'custom': {\r\n                                node.style.backgroundImage = 'none';\r\n                                node.className = 'button character dashedmenubutton';\r\n                                break;\r\n                            }\r\n                            case 'vk': node.className = 'button character'; node.setBackgroundImage('theme/style/cardback/image/vk.png'); break;\r\n                            case 'new': node.className = 'button character'; node.setBackgroundImage('theme/style/cardback/image/new.png'); break;\r\n                            case 'feicheng': node.className = 'button character'; node.setBackgroundImage('theme/style/cardback/image/feicheng.png'); break;\r\n                            case 'official': node.className = 'button character'; node.setBackgroundImage('theme/style/cardback/image/official.png'); break;\r\n                            case 'liusha': node.className = 'button character'; node.setBackgroundImage('theme/style/cardback/image/liusha.png'); break;\r\n                            case 'ol': node.className = 'button character'; node.setBackgroundImage('theme/style/cardback/image/ol.png'); break;\r\n                            case 'wood': node.className = 'button card fullskin'; node.setBackgroundImage('theme/woodden/wood.jpg'); node.style.backgroundSize = 'initial'; break;\r\n                            case 'music': node.className = 'button card fullskin'; node.setBackgroundImage('theme/music/wood3.png'); break;\r\n                        }\r\n                        if (link == 'custom') {\r\n                            node.classList.add('transparent');\r\n                            game.getDB('image', 'cardback_style', function (fileToLoad) {\r\n                                if (!fileToLoad) return;\r\n                                var fileReader = new FileReader();\r\n                                fileReader.onload = function (fileLoadedEvent) {\r\n                                    var data = fileLoadedEvent.target.result;\r\n                                    node.style.backgroundImage = 'url(' + data + ')';\r\n                                    node.className = 'button character';\r\n                                    node.parentNode.lastChild.classList.add('showdelete');\r\n                                    game.getDB('image', 'cardback_style2', function (file) {\r\n                                        if (file) {\r\n                                            node.parentNode.lastChild.classList.add('hideadd');\r\n                                        }\r\n                                    });\r\n                                };\r\n                                fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                            });\r\n                        }\r\n                    },\r\n                    onclick: function (layout) {\r\n                        game.saveConfig('cardback_style', layout);\r\n                        var style = ui.css.cardback_style;\r\n                        ui.css.cardback_style = lib.init.css(lib.assetURL + 'theme/style/cardback', lib.config.cardback_style);\r\n                        style.remove();\r\n                        if (ui.css.cardback_stylesheet) {\r\n                            ui.css.cardback_stylesheet.remove();\r\n                            delete ui.css.cardback_stylesheet;\r\n                        }\r\n                        if (ui.css.cardback_stylesheet2) {\r\n                            ui.css.cardback_stylesheet2.remove();\r\n                            delete ui.css.cardback_stylesheet2;\r\n                        }\r\n                        if (layout == 'custom') {\r\n                            game.getDB('image', 'cardback_style', function (fileToLoad) {\r\n                                if (!fileToLoad) return;\r\n                                var fileReader = new FileReader();\r\n                                fileReader.onload = function (fileLoadedEvent) {\r\n                                    if (ui.css.cardback_stylesheet) {\r\n                                        ui.css.cardback_stylesheet.remove();\r\n                                    }\r\n                                    ui.css.cardback_stylesheet = lib.init.sheet('.card:empty,.card.infohidden{background-image:url(' + fileLoadedEvent.target.result + ')}');\r\n                                    game.getDB('image', 'cardback_style2', function (fileToLoad) {\r\n                                        if (!fileToLoad) return;\r\n                                        var fileReader = new FileReader();\r\n                                        fileReader.onload = function (fileLoadedEvent) {\r\n                                            if (ui.css.cardback_stylesheet2) {\r\n                                                ui.css.cardback_stylesheet2.remove();\r\n                                            }\r\n                                            ui.css.cardback_stylesheet2 = lib.init.sheet('.card.infohidden:not(.infoflip){background-image:url(' + fileLoadedEvent.target.result + ')}');\r\n                                        };\r\n                                        fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                                    });\r\n                                };\r\n                                fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                            });\r\n                        }\r\n                    },\r\n                    unfrequent: true,\r\n                },\r\n                hp_style: {\r\n                    name: '体力条样式',\r\n                    init: 'ol',\r\n                    item: {\r\n                        default: '默认',\r\n                        // official:'勾玉',\r\n                        emotion: '表情',\r\n                        glass: '勾玉',\r\n                        round: '国战',\r\n                        ol: '手杀',\r\n                        xinglass: '双鱼',\r\n                        xinround: 'OL',\r\n                        custom: '自定',\r\n                    },\r\n                    visualBar: function (node, item, create, switcher) {\r\n                        if (node.created) {\r\n                            return;\r\n                        }\r\n                        var button;\r\n                        for (var i = 0; i < node.parentNode.childElementCount; i++) {\r\n                            if (node.parentNode.childNodes[i]._link == 'custom') {\r\n                                button = node.parentNode.childNodes[i];\r\n                            }\r\n                        }\r\n                        if (!button) {\r\n                            return;\r\n                        }\r\n                        node.created = true;\r\n                        var deletepic;\r\n                        ui.create.filediv('.menubutton.addbutton', '添加图片', node, function (file) {\r\n                            if (file && node.currentDB) {\r\n                                game.putDB('image', 'hp_style' + node.currentDB, file, function () {\r\n                                    game.getDB('image', 'hp_style' + node.currentDB, function (fileToLoad) {\r\n                                        if (!fileToLoad) return;\r\n                                        var fileReader = new FileReader();\r\n                                        fileReader.onload = function (fileLoadedEvent) {\r\n                                            var data = fileLoadedEvent.target.result;\r\n                                            button.childNodes[node.currentDB - 1].style.backgroundImage = 'url(' + data + ')';\r\n                                            button.classList.add('shown');\r\n                                            node.classList.add('showdelete');\r\n                                            node.currentDB++;\r\n                                            if (node.currentDB > 4) {\r\n                                                node.classList.add('hideadd');\r\n                                                button.classList.remove('transparent');\r\n                                                delete node.currentDB;\r\n                                            }\r\n                                        };\r\n                                        fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                                    });\r\n                                });\r\n                            }\r\n                        }).inputNode.accept = 'image/*';\r\n                        deletepic = ui.create.div('.menubutton.deletebutton', '删除图片', node, function () {\r\n                            if (confirm('确定删除自定义图片？（此操作不可撤销）')) {\r\n                                game.deleteDB('image', 'hp_style1');\r\n                                game.deleteDB('image', 'hp_style2');\r\n                                game.deleteDB('image', 'hp_style3');\r\n                                game.deleteDB('image', 'hp_style4');\r\n                                for (var i = 0; i < button.childElementCount; i++) {\r\n                                    button.childNodes[i].style.backgroundImage = 'none';\r\n                                }\r\n                                node.classList.remove('showdelete');\r\n                                node.classList.remove('hideadd');\r\n                                if (lib.config.hp_style == 'custom') {\r\n                                    lib.configMenu.appearence.config.hp_style.onclick('default');\r\n                                    switcher.lastChild.innerHTML = '默认';\r\n                                }\r\n                                button.classList.add('transparent');\r\n                                button.classList.remove('shown');\r\n                                node.currentDB = 1;\r\n                            }\r\n                        });\r\n                    },\r\n                    visualMenu: function (node, link, name, config) {\r\n                        node.className = 'button hpbutton dashedmenubutton';\r\n                        node.innerHTML = '';\r\n                        for (var i = 1; i <= 4; i++) {\r\n                            var div = ui.create.div(node);\r\n                            if (link == 'default') {\r\n                                ui.create.div(div);\r\n                            }\r\n                            else if (link != 'custom') {\r\n                                div.setBackgroundImage('theme/style/hp/image/' + link + i + '.png');\r\n                            }\r\n                            if (i == 4) {\r\n                                div.style.webkitFilter = 'grayscale(1)';\r\n                            }\r\n                        }\r\n                        if (link == 'custom') {\r\n                            node.classList.add('transparent');\r\n                            var getDB = function (num) {\r\n                                node.parentNode.lastChild.currentDB = num;\r\n                                game.getDB('image', 'hp_style' + num, function (fileToLoad) {\r\n                                    if (!fileToLoad) return;\r\n                                    var fileReader = new FileReader();\r\n                                    fileReader.onload = function (fileLoadedEvent) {\r\n                                        var data = fileLoadedEvent.target.result;\r\n                                        node.childNodes[num - 1].style.backgroundImage = 'url(' + data + ')';\r\n                                        node.classList.add('shown');\r\n                                        node.parentNode.lastChild.classList.add('showdelete');\r\n                                        if (num < 4) {\r\n                                            getDB(num + 1);\r\n                                        }\r\n                                        else {\r\n                                            node.parentNode.lastChild.classList.add('hideadd');\r\n                                            node.classList.remove('transparent');\r\n                                            delete node.parentNode.firstChild.currentDB;\r\n                                        }\r\n                                    };\r\n                                    fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                                });\r\n                            }\r\n                            getDB(1);\r\n                        }\r\n                    },\r\n                    onclick: function (layout) {\r\n                        game.saveConfig('hp_style', layout);\r\n                        var style = ui.css.hp_style;\r\n                        ui.css.hp_style = lib.init.css(lib.assetURL + 'theme/style/hp', lib.config.hp_style);\r\n                        style.remove();\r\n                        if (ui.css.hp_stylesheet1) {\r\n                            ui.css.hp_stylesheet1.remove();\r\n                            delete ui.css.hp_stylesheet1;\r\n                        }\r\n                        if (ui.css.hp_stylesheet2) {\r\n                            ui.css.hp_stylesheet2.remove();\r\n                            delete ui.css.hp_stylesheet2;\r\n                        }\r\n                        if (ui.css.hp_stylesheet3) {\r\n                            ui.css.hp_stylesheet3.remove();\r\n                            delete ui.css.hp_stylesheet3;\r\n                        }\r\n                        if (ui.css.hp_stylesheet4) {\r\n                            ui.css.hp_stylesheet4.remove();\r\n                            delete ui.css.hp_stylesheet4;\r\n                        }\r\n                        if (layout == 'custom') {\r\n                            game.getDB('image', 'hp_style1', function (fileToLoad) {\r\n                                if (!fileToLoad) return;\r\n                                var fileReader = new FileReader();\r\n                                fileReader.onload = function (fileLoadedEvent) {\r\n                                    if (ui.css.hp_stylesheet1) {\r\n                                        ui.css.hp_stylesheet1.remove();\r\n                                    }\r\n                                    ui.css.hp_stylesheet1 = lib.init.sheet('.hp:not(.text):not(.actcount)[data-condition=\"high\"]>div:not(.lost){background-image:url(' + fileLoadedEvent.target.result + ')}');\r\n                                };\r\n                                fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                            });\r\n                            game.getDB('image', 'hp_style2', function (fileToLoad) {\r\n                                if (!fileToLoad) return;\r\n                                var fileReader = new FileReader();\r\n                                fileReader.onload = function (fileLoadedEvent) {\r\n                                    if (ui.css.hp_stylesheet2) {\r\n                                        ui.css.hp_stylesheet2.remove();\r\n                                    }\r\n                                    ui.css.hp_stylesheet2 = lib.init.sheet('.hp:not(.text):not(.actcount)[data-condition=\"mid\"]>div:not(.lost){background-image:url(' + fileLoadedEvent.target.result + ')}');\r\n                                };\r\n                                fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                            });\r\n                            game.getDB('image', 'hp_style3', function (fileToLoad) {\r\n                                if (!fileToLoad) return;\r\n                                var fileReader = new FileReader();\r\n                                fileReader.onload = function (fileLoadedEvent) {\r\n                                    if (ui.css.hp_stylesheet3) {\r\n                                        ui.css.hp_stylesheet3.remove();\r\n                                    }\r\n                                    ui.css.hp_stylesheet3 = lib.init.sheet('.hp:not(.text):not(.actcount)[data-condition=\"low\"]>div:not(.lost){background-image:url(' + fileLoadedEvent.target.result + ')}');\r\n                                };\r\n                                fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                            });\r\n                            game.getDB('image', 'hp_style4', function (fileToLoad) {\r\n                                if (!fileToLoad) return;\r\n                                var fileReader = new FileReader();\r\n                                fileReader.onload = function (fileLoadedEvent) {\r\n                                    if (ui.css.hp_stylesheet4) {\r\n                                        ui.css.hp_stylesheet4.remove();\r\n                                    }\r\n                                    ui.css.hp_stylesheet4 = lib.init.sheet('.hp:not(.text):not(.actcount)>.lost{background-image:url(' + fileLoadedEvent.target.result + ')}');\r\n                                };\r\n                                fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                            });\r\n                        }\r\n                    },\r\n                    unfrequent: true,\r\n                },\r\n                player_style: {\r\n                    name: '角色背景',\r\n                    init: 'simple',\r\n                    intro: '设置角色的背景图片',\r\n                    item: {\r\n                        wood: '木纹',\r\n                        music: '音乐',\r\n                        simple: '简约',\r\n                        custom: '自定',\r\n                        default: '默认',\r\n                    },\r\n                    visualBar: function (node, item, create, switcher) {\r\n                        if (node.created) {\r\n                            return;\r\n                        }\r\n                        var button;\r\n                        for (var i = 0; i < node.parentNode.childElementCount; i++) {\r\n                            if (node.parentNode.childNodes[i]._link == 'custom') {\r\n                                button = node.parentNode.childNodes[i];\r\n                            }\r\n                        }\r\n                        if (!button) {\r\n                            return;\r\n                        }\r\n                        node.created = true;\r\n                        var deletepic;\r\n                        ui.create.filediv('.menubutton', '添加图片', node, function (file) {\r\n                            if (file) {\r\n                                game.putDB('image', 'player_style', file, function () {\r\n                                    game.getDB('image', 'player_style', function (fileToLoad) {\r\n                                        if (!fileToLoad) return;\r\n                                        var fileReader = new FileReader();\r\n                                        fileReader.onload = function (fileLoadedEvent) {\r\n                                            var data = fileLoadedEvent.target.result;\r\n                                            button.style.backgroundImage = 'url(' + data + ')';\r\n                                            button.className = 'button character';\r\n                                            button.style.backgroundSize = '100% 100%';\r\n                                            node.classList.add('showdelete');\r\n                                        };\r\n                                        fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                                    });\r\n                                });\r\n                            }\r\n                        }).inputNode.accept = 'image/*';\r\n                        deletepic = ui.create.div('.menubutton.deletebutton', '删除图片', node, function () {\r\n                            if (confirm('确定删除自定义图片？（此操作不可撤销）')) {\r\n                                game.deleteDB('image', 'player_style');\r\n                                button.style.backgroundImage = 'none';\r\n                                button.className = 'button character dashedmenubutton';\r\n                                node.classList.remove('showdelete');\r\n                                if (lib.config.player_style == 'custom') {\r\n                                    lib.configMenu.appearence.config.player_style.onclick('default');\r\n                                    switcher.lastChild.innerHTML = '默认';\r\n                                }\r\n                                button.classList.add('transparent');\r\n                            }\r\n                        });\r\n                    },\r\n                    visualMenu: function (node, link, name, config) {\r\n                        node.className = 'button character';\r\n                        node.style.backgroundSize = '';\r\n                        node.style.height = '108px';\r\n                        switch (link) {\r\n                            case 'default': case 'custom': {\r\n                                node.style.backgroundImage = 'none';\r\n                                node.className = 'button character dashedmenubutton';\r\n                                break;\r\n                            }\r\n                            case 'wood': node.setBackgroundImage('theme/woodden/wood.jpg'); break;\r\n                            case 'music': node.style.backgroundImage = 'linear-gradient(#4b4b4b, #464646)'; break;\r\n                            case 'simple': node.style.backgroundImage = 'linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4))'; break;\r\n                        }\r\n                        if (link == 'custom') {\r\n                            node.classList.add('transparent');\r\n                            game.getDB('image', 'player_style', function (fileToLoad) {\r\n                                if (!fileToLoad) return;\r\n                                var fileReader = new FileReader();\r\n                                fileReader.onload = function (fileLoadedEvent) {\r\n                                    var data = fileLoadedEvent.target.result;\r\n                                    node.style.backgroundImage = 'url(' + data + ')';\r\n                                    node.className = 'button character';\r\n                                    node.parentNode.lastChild.classList.add('showdelete');\r\n                                    node.style.backgroundSize = '100% 100%';\r\n                                };\r\n                                fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                            });\r\n                        }\r\n                    },\r\n                    onclick: function (layout) {\r\n                        game.saveConfig('player_style', layout);\r\n                        if (ui.css.player_stylesheet) {\r\n                            ui.css.player_stylesheet.remove();\r\n                            delete ui.css.player_stylesheet;\r\n                        }\r\n                        if (layout == 'custom') {\r\n                            game.getDB('image', 'player_style', function (fileToLoad) {\r\n                                if (!fileToLoad) return;\r\n                                var fileReader = new FileReader();\r\n                                fileReader.onload = function (fileLoadedEvent) {\r\n                                    if (ui.css.player_stylesheet) {\r\n                                        ui.css.player_stylesheet.remove();\r\n                                    }\r\n                                    ui.css.player_stylesheet = lib.init.sheet('#window .player{background-image:url(\"' + fileLoadedEvent.target.result + '\");background-size:100% 100%;}');\r\n                                };\r\n                                fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                            });\r\n                        }\r\n                        else if (layout != 'default') {\r\n                            var str = '';\r\n                            switch (layout) {\r\n                                case 'wood': str = 'url(\"' + lib.assetURL + 'theme/woodden/wood.jpg\")'; break;\r\n                                case 'music': str = 'linear-gradient(#4b4b4b, #464646)'; break;\r\n                                case 'simple': str = 'linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4))'; break;\r\n                            }\r\n                            ui.css.player_stylesheet = lib.init.sheet('#window .player{background-image:' + str + '}');\r\n                        }\r\n                    },\r\n                    unfrequent: true,\r\n                },\r\n                border_style: {\r\n                    name: '角色边框',\r\n                    init: 'default',\r\n                    intro: '设置角色边框的样式，当设为自动时，样式将随着一局游戏中伤害或击杀的数量自动改变',\r\n                    item: {\r\n                        gold: '金框',\r\n                        silver: '银框',\r\n                        bronze: '铜框',\r\n                        dragon_gold: '金龙',\r\n                        dragon_silver: '银龙',\r\n                        dragon_bronze: '玉龙',\r\n                        custom: '自定',\r\n                        auto: '自动',\r\n                        default: '默认',\r\n                    },\r\n                    visualBar: function (node, item, create, switcher) {\r\n                        if (node.created) {\r\n                            return;\r\n                        }\r\n                        var button;\r\n                        for (var i = 0; i < node.parentNode.childElementCount; i++) {\r\n                            if (node.parentNode.childNodes[i]._link == 'custom') {\r\n                                button = node.parentNode.childNodes[i];\r\n                            }\r\n                        }\r\n                        if (!button) {\r\n                            return;\r\n                        }\r\n                        node.created = true;\r\n                        var deletepic;\r\n                        ui.create.filediv('.menubutton', '添加图片', node, function (file) {\r\n                            if (file) {\r\n                                game.putDB('image', 'border_style', file, function () {\r\n                                    game.getDB('image', 'border_style', function (fileToLoad) {\r\n                                        if (!fileToLoad) return;\r\n                                        var fileReader = new FileReader();\r\n                                        fileReader.onload = function (fileLoadedEvent) {\r\n                                            var data = fileLoadedEvent.target.result;\r\n                                            button.style.backgroundImage = 'url(' + data + ')';\r\n                                            button.className = 'button character';\r\n                                            button.style.backgroundSize = '100% 100%';\r\n                                            node.classList.add('showdelete');\r\n                                        };\r\n                                        fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                                    });\r\n                                });\r\n                            }\r\n                        }).inputNode.accept = 'image/*';\r\n                        deletepic = ui.create.div('.menubutton.deletebutton', '删除图片', node, function () {\r\n                            if (confirm('确定删除自定义图片？（此操作不可撤销）')) {\r\n                                game.deleteDB('image', 'border_style');\r\n                                button.style.backgroundImage = 'none';\r\n                                button.className = 'button character dashedmenubutton';\r\n                                node.classList.remove('showdelete');\r\n                                if (lib.config.border_style == 'custom') {\r\n                                    lib.configMenu.appearence.config.border_style.onclick('default');\r\n                                    switcher.lastChild.innerHTML = '默认';\r\n                                }\r\n                                button.classList.add('transparent');\r\n                            }\r\n                        });\r\n                    },\r\n                    visualMenu: function (node, link, name, config) {\r\n                        node.className = 'button character';\r\n                        node.style.backgroundSize = '';\r\n                        node.style.height = '108px';\r\n                        node.dataset.decoration = '';\r\n                        if (link == 'default' || link == 'custom' || link == 'auto') {\r\n                            node.style.backgroundImage = 'none';\r\n                            node.className = 'button character dashedmenubutton';\r\n                        }\r\n                        else {\r\n                            if (link.indexOf('dragon_') == 0) {\r\n                                link = link.slice(7);\r\n                                node.dataset.decoration = link;\r\n                            }\r\n                            node.setBackgroundImage('theme/style/player/' + link + '1.png');\r\n                            node.style.backgroundSize = '100% 100%';\r\n                        }\r\n                        if (link == 'custom') {\r\n                            node.classList.add('transparent');\r\n                            game.getDB('image', 'border_style', function (fileToLoad) {\r\n                                if (!fileToLoad) return;\r\n                                var fileReader = new FileReader();\r\n                                fileReader.onload = function (fileLoadedEvent) {\r\n                                    var data = fileLoadedEvent.target.result;\r\n                                    node.style.backgroundImage = 'url(' + data + ')';\r\n                                    node.className = 'button character';\r\n                                    node.parentNode.lastChild.classList.add('showdelete');\r\n                                    node.style.backgroundSize = '100% 100%';\r\n                                };\r\n                                fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                            });\r\n                        }\r\n                    },\r\n                    onclick: function (layout) {\r\n                        game.saveConfig('border_style', layout);\r\n                        if (ui.css.border_stylesheet) {\r\n                            ui.css.border_stylesheet.remove();\r\n                            delete ui.css.border_stylesheet;\r\n                        }\r\n                        if (layout == 'custom') {\r\n                            game.getDB('image', 'border_style', function (fileToLoad) {\r\n                                if (!fileToLoad) return;\r\n                                var fileReader = new FileReader();\r\n                                fileReader.onload = function (fileLoadedEvent) {\r\n                                    if (ui.css.border_stylesheet) {\r\n                                        ui.css.border_stylesheet.remove();\r\n                                    }\r\n                                    ui.css.border_stylesheet = lib.init.sheet();\r\n                                    ui.css.border_stylesheet.sheet.insertRule('#window .player>.framebg{display:block;background-image:url(\"' + fileLoadedEvent.target.result + '\")}', 0);\r\n                                    ui.css.border_stylesheet.sheet.insertRule('.player>.count{z-index: 3 !important;border-radius: 2px !important;text-align: center !important;}', 0);\r\n                                };\r\n                                fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                            });\r\n                        }\r\n                        else if (layout != 'default' && layout != 'auto') {\r\n                            ui.css.border_stylesheet = lib.init.sheet();\r\n                            if (layout.indexOf('dragon_') == 0) {\r\n                                layout = layout.slice(7);\r\n                                ui.arena.dataset.framedecoration = layout;\r\n                            }\r\n                            else {\r\n                                ui.arena.dataset.framedecoration = '';\r\n                            }\r\n                            ui.css.border_stylesheet.sheet.insertRule('#window .player>.framebg,#window #arena.long.mobile:not(.fewplayer) .player[data-position=\"0\"]>.framebg{display:block;background-image:url(\"' + lib.assetURL + 'theme/style/player/' + layout + '1.png\")}', 0);\r\n                            ui.css.border_stylesheet.sheet.insertRule('#window #arena.long:not(.fewplayer) .player>.framebg, #arena.oldlayout .player>.framebg{background-image:url(\"' + lib.assetURL + 'theme/style/player/' + layout + '3.png\")}', 0);\r\n                            ui.css.border_stylesheet.sheet.insertRule('.player>.count{z-index: 3 !important;border-radius: 2px !important;text-align: center !important;}', 0);\r\n                        }\r\n                    },\r\n                    unfrequent: true,\r\n                },\r\n                autoborder_count: {\r\n                    name: '边框升级方式',\r\n                    intro: '<strong>击杀</strong> 每击杀一人，边框提升两级<br><strong>伤害</strong> 每造成两点伤害，边框提升一级<br><strong>混合</strong> 击杀量决定边框颜色，伤害量决定边框装饰',\r\n                    init: 'kill',\r\n                    item: {\r\n                        kill: '击杀',\r\n                        damage: '伤害',\r\n                        mix: '混合',\r\n                    },\r\n                    unfrequent: true,\r\n                },\r\n                autoborder_start: {\r\n                    name: '基础边框颜色',\r\n                    init: 'bronze',\r\n                    item: {\r\n                        bronze: '铜',\r\n                        silver: '银',\r\n                        gold: '金'\r\n                    },\r\n                    unfrequent: true\r\n                },\r\n                player_border: {\r\n                    name: '边框宽度',\r\n                    init: 'normal',\r\n                    intro: '设置角色的边框宽度',\r\n                    unfrequent: true,\r\n                    item: {\r\n                        slim: '细',\r\n                        narrow: '窄',\r\n                        normal: '中',\r\n                        wide: '宽'\r\n                    },\r\n                    onclick: function (item) {\r\n                        game.saveConfig('player_border', item);\r\n                        if (item != 'wide' || game.layout == 'long' || game.layout == 'long2') {\r\n                            ui.arena.classList.add('slim_player');\r\n                        }\r\n                        else {\r\n                            ui.arena.classList.remove('slim_player');\r\n                        }\r\n                        if (item == 'slim') {\r\n                            ui.arena.classList.add('uslim_player');\r\n                        }\r\n                        else {\r\n                            ui.arena.classList.remove('uslim_player');\r\n                        }\r\n                        if (item == 'narrow') {\r\n                            ui.arena.classList.add('mslim_player');\r\n                        }\r\n                        else {\r\n                            ui.arena.classList.remove('mslim_player');\r\n                        }\r\n                        if (item == 'normal' && lib.config.mode != 'brawl' && (game.layout == 'long' || game.layout == 'long2')) {\r\n                            ui.arena.classList.add('lslim_player');\r\n                        }\r\n                        else {\r\n                            ui.arena.classList.remove('lslim_player');\r\n                        }\r\n                        ui.window.dataset.player_border = item;\r\n                    }\r\n                },\r\n                menu_style: {\r\n                    name: '菜单背景',\r\n                    init: 'default',\r\n                    item: {\r\n                        wood: '木纹',\r\n                        music: '音乐',\r\n                        simple: '简约',\r\n                        custom: '自定',\r\n                        default: '默认',\r\n                    },\r\n                    visualBar: function (node, item, create, switcher) {\r\n                        if (node.created) {\r\n                            return;\r\n                        }\r\n                        var button;\r\n                        for (var i = 0; i < node.parentNode.childElementCount; i++) {\r\n                            if (node.parentNode.childNodes[i]._link == 'custom') {\r\n                                button = node.parentNode.childNodes[i];\r\n                            }\r\n                        }\r\n                        if (!button) {\r\n                            return;\r\n                        }\r\n                        node.created = true;\r\n                        var deletepic;\r\n                        ui.create.filediv('.menubutton', '添加图片', node, function (file) {\r\n                            if (file) {\r\n                                game.putDB('image', 'menu_style', file, function () {\r\n                                    game.getDB('image', 'menu_style', function (fileToLoad) {\r\n                                        if (!fileToLoad) return;\r\n                                        var fileReader = new FileReader();\r\n                                        fileReader.onload = function (fileLoadedEvent) {\r\n                                            var data = fileLoadedEvent.target.result;\r\n                                            button.style.backgroundImage = 'url(' + data + ')';\r\n                                            button.style.backgroundSize = 'cover';\r\n                                            button.className = 'button character';\r\n                                            node.classList.add('showdelete');\r\n                                        };\r\n                                        fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                                    });\r\n                                });\r\n                            }\r\n                        }).inputNode.accept = 'image/*';\r\n                        deletepic = ui.create.div('.menubutton.deletebutton', '删除图片', node, function () {\r\n                            if (confirm('确定删除自定义图片？（此操作不可撤销）')) {\r\n                                game.deleteDB('image', 'menu_style');\r\n                                button.style.backgroundImage = 'none';\r\n                                button.style.backgroundSize = 'auto';\r\n                                button.className = 'button character dashedmenubutton';\r\n                                node.classList.remove('showdelete');\r\n                                if (lib.config.menu_style == 'custom') {\r\n                                    lib.configMenu.appearence.config.menu_style.onclick('default');\r\n                                    switcher.lastChild.innerHTML = '默认';\r\n                                }\r\n                                button.classList.add('transparent');\r\n                            }\r\n                        });\r\n                    },\r\n                    visualMenu: function (node, link, name, config) {\r\n                        node.className = 'button character';\r\n                        node.style.backgroundSize = 'auto';\r\n                        switch (link) {\r\n                            case 'default': case 'custom': {\r\n                                node.style.backgroundImage = 'none';\r\n                                node.classList.add('dashedmenubutton');\r\n                                break;\r\n                            }\r\n                            case 'wood': node.setBackgroundImage('theme/woodden/wood2.png'); break;\r\n                            case 'music': node.style.backgroundImage = 'linear-gradient(#4b4b4b, #464646)'; break;\r\n                            case 'simple': node.style.backgroundImage = 'linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4))'; break;\r\n                        }\r\n                        if (link == 'custom') {\r\n                            node.classList.add('transparent');\r\n                            game.getDB('image', 'menu_style', function (fileToLoad) {\r\n                                if (!fileToLoad) return;\r\n                                var fileReader = new FileReader();\r\n                                fileReader.onload = function (fileLoadedEvent) {\r\n                                    var data = fileLoadedEvent.target.result;\r\n                                    node.style.backgroundImage = 'url(' + data + ')';\r\n                                    node.style.backgroundSize = 'cover';\r\n                                    node.className = 'button character';\r\n                                    node.parentNode.lastChild.classList.add('showdelete');\r\n                                };\r\n                                fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                            });\r\n                        }\r\n                    },\r\n                    onclick: function (layout) {\r\n                        game.saveConfig('menu_style', layout);\r\n                        if (ui.css.menu_stylesheet) {\r\n                            ui.css.menu_stylesheet.remove();\r\n                            delete ui.css.menu_stylesheet;\r\n                        }\r\n                        if (layout == 'custom') {\r\n                            game.getDB('image', 'menu_style', function (fileToLoad) {\r\n                                if (!fileToLoad) return;\r\n                                var fileReader = new FileReader();\r\n                                fileReader.onload = function (fileLoadedEvent) {\r\n                                    if (ui.css.menu_stylesheet) {\r\n                                        ui.css.menu_stylesheet.remove();\r\n                                    }\r\n                                    ui.css.menu_stylesheet = lib.init.sheet('html #window>.dialog.popped,html .menu,html .menubg{background-image:url(\"' + fileLoadedEvent.target.result + '\");background-size:cover}');\r\n                                };\r\n                                fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                            });\r\n                        }\r\n                        else if (layout != 'default') {\r\n                            var str = '';\r\n                            switch (layout) {\r\n                                case 'wood': str = 'url(\"' + lib.assetURL + 'theme/woodden/wood2.png\")'; break;\r\n                                case 'music': str = 'linear-gradient(#4b4b4b, #464646);color:white;text-shadow:black 0 0 2px'; break;\r\n                                case 'simple': str = 'linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4));color:white;text-shadow:black 0 0 2px'; break;\r\n                            }\r\n                            ui.css.menu_stylesheet = lib.init.sheet('html #window>.dialog.popped,html .menu,html .menubg{background-image:' + str + '}');\r\n                        }\r\n                    },\r\n                    unfrequent: true,\r\n                },\r\n                control_style: {\r\n                    name: '按钮背景',\r\n                    init: 'default',\r\n                    item: {\r\n                        wood: '木纹',\r\n                        music: '音乐',\r\n                        simple: '简约',\r\n                        custom: '自定',\r\n                        default: '默认',\r\n                    },\r\n                    visualBar: function (node, item, create, switcher) {\r\n                        if (node.created) {\r\n                            return;\r\n                        }\r\n                        var button;\r\n                        for (var i = 0; i < node.parentNode.childElementCount; i++) {\r\n                            if (node.parentNode.childNodes[i]._link == 'custom') {\r\n                                button = node.parentNode.childNodes[i];\r\n                            }\r\n                        }\r\n                        if (!button) {\r\n                            return;\r\n                        }\r\n                        node.created = true;\r\n                        var deletepic;\r\n                        ui.create.filediv('.menubutton', '添加图片', node, function (file) {\r\n                            if (file) {\r\n                                game.putDB('image', 'control_style', file, function () {\r\n                                    game.getDB('image', 'control_style', function (fileToLoad) {\r\n                                        if (!fileToLoad) return;\r\n                                        var fileReader = new FileReader();\r\n                                        fileReader.onload = function (fileLoadedEvent) {\r\n                                            var data = fileLoadedEvent.target.result;\r\n                                            button.style.backgroundImage = 'url(' + data + ')';\r\n                                            button.className = 'button character controlbutton';\r\n                                            node.classList.add('showdelete');\r\n                                        };\r\n                                        fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                                    });\r\n                                });\r\n                            }\r\n                        }).inputNode.accept = 'image/*';\r\n                        deletepic = ui.create.div('.menubutton.deletebutton', '删除图片', node, function () {\r\n                            if (confirm('确定删除自定义图片？（此操作不可撤销）')) {\r\n                                game.deleteDB('image', 'control_style');\r\n                                button.style.backgroundImage = 'none';\r\n                                button.className = 'button character controlbutton dashedmenubutton';\r\n                                node.classList.remove('showdelete');\r\n                                if (lib.config.control_style == 'custom') {\r\n                                    lib.configMenu.appearence.config.control_style.onclick('default');\r\n                                    switcher.lastChild.innerHTML = '默认';\r\n                                }\r\n                                button.classList.add('transparent');\r\n                            }\r\n                        });\r\n                    },\r\n                    visualMenu: function (node, link, name, config) {\r\n                        node.className = 'button character controlbutton';\r\n                        node.style.backgroundSize = '';\r\n                        switch (link) {\r\n                            case 'default': case 'custom': {\r\n                                node.style.backgroundImage = 'none';\r\n                                node.classList.add('dashedmenubutton');\r\n                                break;\r\n                            }\r\n                            case 'wood': node.setBackgroundImage('theme/woodden/wood.jpg'); break;\r\n                            case 'music': node.style.backgroundImage = 'linear-gradient(#4b4b4b, #464646)'; break;\r\n                            case 'simple': node.style.backgroundImage = 'linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4))'; break;\r\n                        }\r\n                        if (link == 'custom') {\r\n                            node.classList.add('transparent');\r\n                            game.getDB('image', 'control_style', function (fileToLoad) {\r\n                                if (!fileToLoad) return;\r\n                                var fileReader = new FileReader();\r\n                                fileReader.onload = function (fileLoadedEvent) {\r\n                                    var data = fileLoadedEvent.target.result;\r\n                                    node.style.backgroundImage = 'url(' + data + ')';\r\n                                    node.className = 'button character controlbutton';\r\n                                    node.parentNode.lastChild.classList.add('showdelete');\r\n                                };\r\n                                fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                            });\r\n                        }\r\n                    },\r\n                    onclick: function (layout) {\r\n                        game.saveConfig('control_style', layout);\r\n                        if (ui.css.control_stylesheet) {\r\n                            ui.css.control_stylesheet.remove();\r\n                            delete ui.css.control_stylesheet;\r\n                        }\r\n                        if (layout == 'custom') {\r\n                            game.getDB('image', 'control_style', function (fileToLoad) {\r\n                                if (!fileToLoad) return;\r\n                                var fileReader = new FileReader();\r\n                                fileReader.onload = function (fileLoadedEvent) {\r\n                                    if (ui.css.control_stylesheet) {\r\n                                        ui.css.control_stylesheet.remove();\r\n                                    }\r\n                                    ui.css.control_stylesheet = lib.init.sheet('#window .control,.menubutton:not(.active):not(.highlight):not(.red):not(.blue),#window #system>div>div{background-image:url(\"' + fileLoadedEvent.target.result + '\")}');\r\n                                };\r\n                                fileReader.readAsDataURL(fileToLoad, \"UTF-8\");\r\n                            });\r\n                        }\r\n                        else if (layout != 'default') {\r\n                            var str = '';\r\n                            switch (layout) {\r\n                                case 'wood': str = 'url(\"' + lib.assetURL + 'theme/woodden/wood.jpg\")'; break;\r\n                                case 'music': str = 'linear-gradient(#4b4b4b, #464646);color:white;text-shadow:black 0 0 2px'; break;\r\n                                case 'simple': str = 'linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4));color:white;text-shadow:black 0 0 2px'; break;\r\n                            }\r\n                            if (layout == 'wood') {\r\n                                ui.css.control_stylesheet = lib.init.sheet('#window .control,#window .menubutton,#window #system>div>div,#window #system>div>.pressdown2{background-image:' + str + '}');\r\n                            }\r\n                            else {\r\n                                ui.css.control_stylesheet = lib.init.sheet('#window .control,.menubutton:not(.active):not(.highlight):not(.red):not(.blue),#window #system>div>div{background-image:' + str + '}');\r\n                            }\r\n                        }\r\n                    },\r\n                    unfrequent: true,\r\n                },\r\n                custom_button: {\r\n                    name: '自定义按钮高度',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        if (bool !== 'skip') {\r\n                            game.saveConfig('custom_button', bool);\r\n                        }\r\n                        if (ui.css.buttonsheet) {\r\n                            ui.css.buttonsheet.remove();\r\n                        }\r\n                        if (lib.config.custom_button) {\r\n                            var cbnum1 = 6 + (parseInt(lib.config.custom_button_system_top) || 0);\r\n                            var cbnum2 = 6 + (parseInt(lib.config.custom_button_system_bottom) || 0);\r\n                            var cbnum3 = 3 + (parseInt(lib.config.custom_button_control_top) || 0);\r\n                            var cbnum4 = 3 + (parseInt(lib.config.custom_button_control_bottom) || 0);\r\n                            var cbnum5 = 2;\r\n                            var cbnum6 = 2;\r\n                            if (cbnum3 < 0) {\r\n                                cbnum5 += cbnum3;\r\n                                cbnum3 = 0;\r\n                            }\r\n                            if (cbnum4 < 0) {\r\n                                cbnum6 += cbnum4;\r\n                                cbnum4 = 0;\r\n                            }\r\n                            ui.css.buttonsheet = lib.init.sheet(\r\n                                '#system>div>div, .caption>div>.tdnode{padding-top:' + cbnum1 + 'px !important;padding-bottom:' + cbnum2 + 'px !important}',\r\n                                '#control>.control>div{padding-top:' + cbnum3 + 'px;padding-bottom:' + cbnum4 + 'px}',\r\n                                '#control>.control{padding-top:' + cbnum5 + 'px;padding-bottom:' + cbnum6 + 'px}'\r\n                            );\r\n                        }\r\n                    }\r\n                },\r\n                custom_button_system_top: {\r\n                    name: '菜单上部高度',\r\n                    init: '0x',\r\n                    item: {\r\n                        '-5x': '-5px',\r\n                        '-4x': '-4px',\r\n                        '-3x': '-3px',\r\n                        '-2x': '-2px',\r\n                        '-1x': '-1px',\r\n                        '0x': '默认',\r\n                        '1x': '1px',\r\n                        '2x': '2px',\r\n                        '3x': '3px',\r\n                        '4x': '4px',\r\n                        '5x': '5px',\r\n                    },\r\n                    unfrequent: true,\r\n                    onclick: function (item) {\r\n                        game.saveConfig('custom_button_system_top', item);\r\n                        lib.configMenu.appearence.config.custom_button.onclick('skip');\r\n                    }\r\n                },\r\n                custom_button_system_bottom: {\r\n                    name: '菜单下部高度',\r\n                    init: '0x',\r\n                    item: {\r\n                        '-5x': '-5px',\r\n                        '-4x': '-4px',\r\n                        '-3x': '-3px',\r\n                        '-2x': '-2px',\r\n                        '-1x': '-1px',\r\n                        '0x': '默认',\r\n                        '1x': '1px',\r\n                        '2x': '2px',\r\n                        '3x': '3px',\r\n                        '4x': '4px',\r\n                        '5x': '5px',\r\n                    },\r\n                    unfrequent: true,\r\n                    onclick: function (item) {\r\n                        game.saveConfig('custom_button_system_bottom', item);\r\n                        lib.configMenu.appearence.config.custom_button.onclick('skip');\r\n                    }\r\n                },\r\n                custom_button_control_top: {\r\n                    name: '技能上部高度',\r\n                    init: '0x',\r\n                    item: {\r\n                        '-5x': '-5px',\r\n                        '-4x': '-4px',\r\n                        '-3x': '-3px',\r\n                        '-2x': '-2px',\r\n                        '-1x': '-1px',\r\n                        '0x': '默认',\r\n                        '1x': '1px',\r\n                        '2x': '2px',\r\n                        '3x': '3px',\r\n                        '4x': '4px',\r\n                        '5x': '5px',\r\n                    },\r\n                    unfrequent: true,\r\n                    onclick: function (item) {\r\n                        game.saveConfig('custom_button_control_top', item);\r\n                        lib.configMenu.appearence.config.custom_button.onclick('skip');\r\n                    }\r\n                },\r\n                custom_button_control_bottom: {\r\n                    name: '技能下部高度',\r\n                    init: '0x',\r\n                    item: {\r\n                        '-5x': '-5px',\r\n                        '-4x': '-4px',\r\n                        '-3x': '-3px',\r\n                        '-2x': '-2px',\r\n                        '-1x': '-1px',\r\n                        '0x': '默认',\r\n                        '1x': '1px',\r\n                        '2x': '2px',\r\n                        '3x': '3px',\r\n                        '4x': '4px',\r\n                        '5x': '5px',\r\n                    },\r\n                    unfrequent: true,\r\n                    onclick: function (item) {\r\n                        game.saveConfig('custom_button_control_bottom', item);\r\n                        lib.configMenu.appearence.config.custom_button.onclick('skip');\r\n                    }\r\n                },\r\n                radius_size: {\r\n                    name: '圆角大小',\r\n                    init: 'default',\r\n                    item: {\r\n                        off: '关闭',\r\n                        reduce: '减小',\r\n                        default: '默认',\r\n                        increase: '增大',\r\n                    },\r\n                    unfrequent: true,\r\n                    onclick: function (item) {\r\n                        game.saveConfig('radius_size', item);\r\n                        ui.window.dataset.radius_size = item;\r\n                    }\r\n                },\r\n                glow_phase: {\r\n                    name: '当前回合角色高亮',\r\n                    unfrequent: true,\r\n                    init: 'yellow',\r\n                    intro: '设置当前回合角色的边框颜色',\r\n                    item: {\r\n                        none: '无',\r\n                        yellow: '黄色',\r\n                        green: '绿色',\r\n                        purple: '紫色',\r\n                    },\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('glow_phase', bool);\r\n                        lib.init.cssstyles();\r\n                    }\r\n                },\r\n                fold_card: {\r\n                    name: '折叠手牌',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                },\r\n                fold_mode: {\r\n                    name: '折叠模式菜单',\r\n                    intro: '关闭后模式菜单中“更多”内的项目将直接展开',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                },\r\n                seperate_control: {\r\n                    name: '分离选项条',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                    intro: '开启后玩家在进行选择时不同的选项将分开，而不是连在一起',\r\n                },\r\n                blur_ui: {\r\n                    name: '模糊效果',\r\n                    intro: '在暂停或打开菜单时开启模糊效果',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('blur_ui', bool);\r\n                        if (bool) {\r\n                            ui.window.classList.add('blur_ui');\r\n                        }\r\n                        else {\r\n                            ui.window.classList.remove('blur_ui');\r\n                        }\r\n                    }\r\n                },\r\n                glass_ui: {\r\n                    name: '玻璃主题',\r\n                    intro: '为游戏主题打开玻璃效果（手机暂不支持）',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('glass_ui', bool);\r\n                        if (bool) {\r\n                            ui.window.classList.add('glass_ui');\r\n                        }\r\n                        else {\r\n                            ui.window.classList.remove('glass_ui');\r\n                        }\r\n                    }\r\n                },\r\n                damage_shake: {\r\n                    name: '伤害抖动',\r\n                    intro: '角色受到伤害时的抖动效果',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                },\r\n                button_press: {\r\n                    name: '按钮效果',\r\n                    intro: '选项条被按下时将有按下效果',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                },\r\n                jiu_effect: {\r\n                    name: '喝酒效果',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                },\r\n                animation: {\r\n                    name: '游戏特效',\r\n                    intro: '开启后出现属性伤害、回复体力等情况时会显示动画',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                },\r\n                skill_animation_type: {\r\n                    name: '技能特效',\r\n                    intro: '开启后觉醒技、限定技将显示全屏文字',\r\n                    init: 'default',\r\n                    unfrequent: true,\r\n                    item: {\r\n                        default: '默认',\r\n                        old: '旧版',\r\n                        off: '关闭'\r\n                    }\r\n                },\r\n                die_move: {\r\n                    name: '阵亡效果',\r\n                    intro: '阵亡后武将的显示效果',\r\n                    init: 'flip',\r\n                    unfrequent: true,\r\n                    item: {\r\n                        off: '关闭',\r\n                        move: '移动',\r\n                        flip: '翻面',\r\n                    }\r\n                },\r\n                target_shake: {\r\n                    name: '目标效果',\r\n                    intro: '一名玩家成为卡牌或技能的目标时的显示效果',\r\n                    init: 'off',\r\n                    item: {\r\n                        off: '关闭',\r\n                        zoom: '缩放',\r\n                        shake: '抖动',\r\n                    },\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('target_shake', bool);\r\n                        ui.arena.dataset.target_shake = bool;\r\n                    }\r\n                },\r\n                turned_style: {\r\n                    name: '翻面文字',\r\n                    intro: '角色被翻面时显示“翻面”',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('turned_style', bool);\r\n                        if (bool) {\r\n                            ui.arena.classList.remove('hide_turned');\r\n                        }\r\n                        else {\r\n                            ui.arena.classList.add('hide_turned');\r\n                        }\r\n                    }\r\n                },\r\n                link_style2: {\r\n                    name: '横置样式',\r\n                    intro: '设置角色被横置时的样式',\r\n                    init: 'chain',\r\n                    unfrequent: true,\r\n                    item: {\r\n                        chain: '铁索',\r\n                        rotate: '横置',\r\n                        mark: '标记'\r\n                    },\r\n                    onclick: function (style) {\r\n                        var list = [];\r\n                        for (var i = 0; i < game.players.length; i++) {\r\n                            if (game.players[i].isLinked()) {\r\n                                list.push(game.players[i]);\r\n                            }\r\n                        }\r\n                        game.saveConfig('link_style2', style);\r\n                        for (var i = 0; i < list.length; i++) {\r\n                            if (get.is.linked2(list[i])) {\r\n                                list[i].classList.add('linked2');\r\n                                list[i].classList.remove('linked');\r\n                            }\r\n                            else {\r\n                                list[i].classList.add('linked');\r\n                                list[i].classList.remove('linked2');\r\n                            }\r\n                        }\r\n                        if (style == 'chain') {\r\n                            ui.arena.classList.remove('nolink');\r\n                        }\r\n                        else {\r\n                            ui.arena.classList.add('nolink');\r\n                        }\r\n                        ui.updatem();\r\n                    }\r\n                },\r\n                cardshape: {\r\n                    name: '手牌显示',\r\n                    intro: '将手牌设置为正方形或长方形',\r\n                    init: 'default',\r\n                    unfrequent: true,\r\n                    item: {\r\n                        default: '默认',\r\n                        oblong: '长方',\r\n                    },\r\n                    onclick: function (item) {\r\n                        var linked = false;\r\n                        if (game.me && game.me.isLinked()) {\r\n                            linked = true;\r\n                        }\r\n                        game.saveConfig('cardshape', item);\r\n                        if (item == 'oblong' && (game.layout == 'long' || game.layout == 'mobile' || game.layout == 'long2' || game.layout == 'nova')) {\r\n                            ui.arena.classList.add('oblongcard');\r\n                            ui.window.classList.add('oblongcard');\r\n                        }\r\n                        else {\r\n                            ui.arena.classList.remove('oblongcard');\r\n                            ui.window.classList.remove('oblongcard');\r\n                        }\r\n                        if (linked) {\r\n                            if (get.is.linked2(game.me)) {\r\n                                game.me.classList.remove('linked');\r\n                                game.me.classList.add('linked2');\r\n                            }\r\n                            else {\r\n                                game.me.classList.add('linked');\r\n                                game.me.classList.remove('linked2');\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                cardtempname: {\r\n                    name: '视为卡牌名称显示',\r\n                    intro: '显示强制视为类卡牌（如武魂）等名称的显示方式',\r\n                    init: 'default',\r\n                    unfrequent: true,\r\n                    item: {\r\n                        default: '纵向',\r\n                        horizon: '横向',\r\n                        off: '禁用',\r\n                    },\r\n                    onclick: function (item) {\r\n                        game.saveConfig('cardtempname', item);\r\n                        if (!game.me || !game.me.getCards) return;\r\n                        var hs = game.me.getCards('h');\r\n                        for (var i = 0; i < hs.length; i++) {\r\n                            if (hs[i]._tempName) {\r\n                                switch (item) {\r\n                                    case 'default':\r\n                                        var node = hs[i]._tempName;\r\n                                        node.innerHTML = get.verticalStr(node.tempname);\r\n                                        break;\r\n                                    case 'horizon':\r\n                                        var node = hs[i]._tempName;\r\n                                        node.innerHTML = node.tempname;\r\n                                        break;\r\n                                    default:\r\n                                        hs[i]._tempName.delete();\r\n                                        delete hs[i]._tempName;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                textequip: {\r\n                    name: '装备显示',\r\n                    init: 'image',\r\n                    unfrequent: true,\r\n                    item: {\r\n                        image: '图片',\r\n                        text: '文字',\r\n                    },\r\n                    onclick: function (item) {\r\n                        game.saveConfig('textequip', item);\r\n                        if (item == 'text' && (game.layout == 'long' || game.layout == 'mobile')) {\r\n                            ui.arena.classList.add('textequip');\r\n                        }\r\n                        else {\r\n                            ui.arena.classList.remove('textequip');\r\n                        }\r\n                    }\r\n                },\r\n                buttoncharacter_style: {\r\n                    name: '选将样式',\r\n                    init: 'default',\r\n                    item: {\r\n                        default: '默认',\r\n                        simple: '精简',\r\n                        old: '旧版'\r\n                    },\r\n                    unfrequent: true,\r\n                },\r\n                cursor_style: {\r\n                    name: '鼠标指针',\r\n                    init: 'auto',\r\n                    intro: '设置为固定后鼠标指针将不随移动到的区域而变化',\r\n                    unfrequent: true,\r\n                    item: {\r\n                        auto: '自动',\r\n                        pointer: '固定'\r\n                    },\r\n                    onclick: function (item) {\r\n                        game.saveConfig('cursor_style', item);\r\n                        if (item == 'pointer') {\r\n                            ui.window.classList.add('nopointer');\r\n                        }\r\n                        else {\r\n                            ui.window.classList.remove('nopointer');\r\n                        }\r\n                    }\r\n                },\r\n                name_font: {\r\n                    name: '人名字体',\r\n                    init: 'LuoLiTi2',\r\n                    unfrequent: true,\r\n                    item: {},\r\n                    textMenu: function (node, link) {\r\n                        if (link != 'default') {\r\n                            node.style.fontFamily = link;\r\n                        }\r\n                        node.style.fontSize = '20px';\r\n                    },\r\n                    onclick: function (font) {\r\n                        game.saveConfig('name_font', font);\r\n                        lib.init.cssstyles();\r\n                    }\r\n                },\r\n                identity_font: {\r\n                    name: '身份字体',\r\n                    init: 'xingkai',\r\n                    unfrequent: true,\r\n                    item: {},\r\n                    textMenu: function (node, link) {\r\n                        if (link != 'default') {\r\n                            node.style.fontFamily = link;\r\n                        }\r\n                        node.style.fontSize = '20px';\r\n                    },\r\n                    onclick: function (font) {\r\n                        game.saveConfig('identity_font', font);\r\n                        lib.init.cssstyles();\r\n                    }\r\n                },\r\n                cardtext_font: {\r\n                    name: '卡牌字体',\r\n                    init: 'LuoLiTi2',\r\n                    unfrequent: true,\r\n                    item: {},\r\n                    textMenu: function (node, link) {\r\n                        if (link != 'default') {\r\n                            node.style.fontFamily = link;\r\n                        }\r\n                        node.style.fontSize = '20px';\r\n                    },\r\n                    onclick: function (font) {\r\n                        game.saveConfig('cardtext_font', font);\r\n                        lib.init.cssstyles();\r\n                    }\r\n                },\r\n                global_font: {\r\n                    name: '界面字体',\r\n                    init: 'default',\r\n                    unfrequent: true,\r\n                    item: {},\r\n                    textMenu: function (node, link) {\r\n                        if (link != 'default') {\r\n                            node.style.fontFamily = link;\r\n                        }\r\n                        else {\r\n                            node.style.fontFamily = \"'STHeiti','SimHei','Microsoft JhengHei','Microsoft YaHei','WenQuanYi Micro Hei',Helvetica,Arial,sans-serif\";\r\n                        }\r\n                        node.style.fontSize = '20px';\r\n                    },\r\n                    onclick: function (font) {\r\n                        game.saveConfig('global_font', font);\r\n                        lib.init.cssstyles();\r\n                    }\r\n                },\r\n                update: function (config, map) {\r\n                    if (lib.config.custom_button) {\r\n                        map.custom_button_system_top.show();\r\n                        map.custom_button_system_bottom.show();\r\n                        map.custom_button_control_top.show();\r\n                        map.custom_button_control_bottom.show();\r\n                    }\r\n                    else {\r\n                        map.custom_button_system_top.hide();\r\n                        map.custom_button_system_bottom.hide();\r\n                        map.custom_button_control_top.hide();\r\n                        map.custom_button_control_bottom.hide();\r\n                    }\r\n                    if (lib.config.change_skin) {\r\n                        map.change_skin_auto.show();\r\n                    }\r\n                    else {\r\n                        map.change_skin_auto.hide();\r\n                    }\r\n                    if (lib.config.image_background_random) {\r\n                        map.image_background_blur.show();\r\n                        map.image_background.hide();\r\n                        // map.import_background.hide();\r\n                    }\r\n                    else {\r\n                        map.image_background.show();\r\n                        if (lib.config.image_background == 'default') {\r\n                            map.image_background_blur.hide();\r\n                        }\r\n                        else {\r\n                            map.image_background_blur.show();\r\n                        }\r\n                        // if(lib.config.image_background=='custom'&&lib.db){\r\n                        //     map.import_background.show();\r\n                        // }\r\n                        // else{\r\n                        //     map.import_background.hide();\r\n                        // }\r\n                    }\r\n                    if (lib.config.layout == 'long' || lib.config.layout == 'mobile') {\r\n                        map.textequip.show();\r\n                        map.cardshape.show();\r\n                        map.phonelayout.show();\r\n                    }\r\n                    else {\r\n                        map.textequip.hide();\r\n                        if (lib.config.layout == 'long2' || lib.config.layout == 'nova') {\r\n                            map.phonelayout.show();\r\n                            map.cardshape.show();\r\n                        }\r\n                        else {\r\n                            map.phonelayout.hide();\r\n                            map.cardshape.hide();\r\n                        }\r\n                    }\r\n                    if (lib.config.layout == 'long') {\r\n                        // map.fewplayer.show();\r\n                        map.player_height.show();\r\n                    }\r\n                    else {\r\n                        // map.fewplayer.hide();\r\n                        if (lib.config.layout == 'long2') {\r\n                            map.player_height.show();\r\n                        }\r\n                        else {\r\n                            map.player_height.hide();\r\n                        }\r\n                    }\r\n                    if (lib.config.layout == 'nova') {\r\n                        map.player_height_nova.show();\r\n                    }\r\n                    else {\r\n                        map.player_height_nova.hide();\r\n                    }\r\n                    if (lib.config.touchscreen) {\r\n                        map.cursor_style.hide();\r\n                    }\r\n                    else {\r\n                        map.cursor_style.show();\r\n                    }\r\n                    if (lib.config.border_style == 'auto') {\r\n                        map.autoborder_count.show();\r\n                        map.autoborder_start.show();\r\n                    }\r\n                    else {\r\n                        map.autoborder_count.hide();\r\n                        map.autoborder_start.hide();\r\n                    }\r\n                },\r\n            }\r\n        },\r\n        /**\r\n         * 显示设置\r\n         * @name configMenu.view\r\n         * @type {!Object}\r\n         */\r\n        view: {\r\n            name: '显示',\r\n            config: {\r\n                update: function (config, map) {\r\n                    if (['versus', 'chess', 'tafang', 'boss', 'richer'].contains(lib.config.mode)) {\r\n                        map.show_handcardbutton.show();\r\n                    }\r\n                    else {\r\n                        map.show_handcardbutton.hide();\r\n                    }\r\n                    if (lib.config.touchscreen) {\r\n                        map.pop_logv.hide();\r\n                    }\r\n                    else {\r\n                        map.pop_logv.show();\r\n                    }\r\n                    if (lib.device) {\r\n                        if (lib.device == 'android') {\r\n                            map.show_statusbar_android.show();\r\n                            map.show_statusbar_ios.hide();\r\n                        }\r\n                        else if (lib.device == 'ios') {\r\n                            map.show_statusbar_ios.show();\r\n                            map.show_statusbar_android.hide();\r\n                        }\r\n                        if (!game.download) {\r\n                            setTimeout(function () {\r\n                                if (!window.StatusBar) {\r\n                                    map.show_statusbar.hide();\r\n                                }\r\n                            }, 5000);\r\n                        }\r\n                    }\r\n                    else {\r\n                        map.show_statusbar_ios.hide();\r\n                        map.show_statusbar_android.hide();\r\n                    }\r\n                    if (get.is.phoneLayout()) {\r\n                        map.remember_round_button.show();\r\n                        map.popequip.show();\r\n                        map.filternode_button.show();\r\n                        map.show_pause.hide();\r\n                        map.show_auto.hide();\r\n                        map.show_replay.hide();\r\n                        map.show_round_menu.show();\r\n                    }\r\n                    else {\r\n                        map.show_pause.show();\r\n                        map.show_auto.show();\r\n                        map.show_replay.show();\r\n                        map.show_round_menu.hide();\r\n                        map.remember_round_button.hide();\r\n                        map.popequip.hide();\r\n                        map.filternode_button.hide();\r\n                    }\r\n                    if (lib.config.show_card_prompt) {\r\n                        map.hide_card_prompt_basic.show();\r\n                        map.hide_card_prompt_equip.show();\r\n                    }\r\n                    else {\r\n                        map.hide_card_prompt_basic.hide();\r\n                        map.hide_card_prompt_equip.hide();\r\n                    }\r\n                    if (lib.config.show_log != 'off') {\r\n                        map.clear_log.show();\r\n                    }\r\n                    else {\r\n                        map.clear_log.hide();\r\n                    }\r\n                    if (get.is.phoneLayout()) {\r\n                        map.show_time2.show();\r\n                        map.show_time.hide();\r\n                        if (lib.config.show_time2) {\r\n                            map.watchface.show();\r\n                        }\r\n                        else {\r\n                            map.watchface.hide();\r\n                        }\r\n                    }\r\n                    else {\r\n                        map.show_time2.hide();\r\n                        map.show_time.show();\r\n                        map.watchface.hide();\r\n                    }\r\n                    if (lib.config.show_extensionmaker) {\r\n                        map.show_extensionshare.show();\r\n                    }\r\n                    else {\r\n                        map.show_extensionshare.hide();\r\n                    }\r\n                },\r\n                show_history: {\r\n                    name: '出牌记录栏',\r\n                    init: 'off',\r\n                    intro: '在屏幕左侧或右侧显示出牌记录',\r\n                    unfrequent: true,\r\n                    item: {\r\n                        off: '关闭',\r\n                        left: '靠左',\r\n                        right: '靠右',\r\n                    },\r\n                    onclick: function (bool) {\r\n                        if (lib.config.show_history == 'right') ui.window.animate('rightbar2');\r\n                        game.saveConfig('show_history', bool);\r\n                        if (_status.video || !_status.prepareArena) return;\r\n                        if (bool == 'left') {\r\n                            ui.window.classList.add('leftbar');\r\n                            ui.window.classList.remove('rightbar');\r\n                        }\r\n                        else if (bool == 'right') {\r\n                            ui.window.classList.remove('leftbar');\r\n                            ui.window.classList.add('rightbar');\r\n                        }\r\n                        else {\r\n                            ui.window.classList.remove('leftbar');\r\n                            ui.window.classList.remove('rightbar');\r\n                        }\r\n                    }\r\n                },\r\n                pop_logv: {\r\n                    name: '自动弹出记录',\r\n                    init: false,\r\n                    unfrequent: true\r\n                },\r\n                show_log: {\r\n                    name: '历史记录栏',\r\n                    init: 'off',\r\n                    intro: '在屏幕中部显示出牌文字记录',\r\n                    unfrequent: true,\r\n                    item: {\r\n                        off: '关闭',\r\n                        left: '靠左',\r\n                        center: '居中',\r\n                        right: '靠右',\r\n                    },\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('show_log', bool);\r\n                        if (lib.config.show_log != 'off') {\r\n                            ui.arenalog.style.display = '';\r\n                            ui.arenalog.dataset.position = bool;\r\n                        }\r\n                        else {\r\n                            ui.arenalog.style.display = 'none';\r\n                            ui.arenalog.innerHTML = '';\r\n                        }\r\n                    }\r\n                },\r\n                clear_log: {\r\n                    name: '自动清除历史记录',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                    intro: '开启后将定时清除历史记录栏的条目（而不是等记录栏满后再清除）'\r\n                },\r\n                log_highlight: {\r\n                    name: '历史记录高亮',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                    intro: '开启后历史记录不同类别的信息将以不同颜色显示',\r\n                },\r\n                show_time: {\r\n                    name: '显示时间',\r\n                    intro: '在屏幕顶部显示当前时间',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('show_time', bool);\r\n                        if (bool) {\r\n                            ui.time.style.display = '';\r\n                        }\r\n                        else {\r\n                            ui.time.style.display = 'none';\r\n                        }\r\n                    }\r\n                },\r\n                show_time2: {\r\n                    name: '显示时间',\r\n                    intro: '在触屏按钮处显示当前时间',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('show_time2', bool);\r\n                        if (bool) {\r\n                            ui.roundmenu.classList.add('clock');\r\n                        }\r\n                        else {\r\n                            ui.roundmenu.classList.remove('clock');\r\n                        }\r\n                    }\r\n                },\r\n                watchface: {\r\n                    name: '表盘样式',\r\n                    init: 'none',\r\n                    unfrequent: true,\r\n                    item: {\r\n                        none: '默认',\r\n                        simple: '简约',\r\n                    },\r\n                    onclick: function (item) {\r\n                        game.saveConfig('watchface', item);\r\n                        ui.roundmenu.dataset.watchface = item;\r\n                    }\r\n                },\r\n                show_time3: {\r\n                    name: '显示游戏时间',\r\n                    init: false,\r\n                    unfrequent: true\r\n                },\r\n                show_statusbar_android: {\r\n                    name: '显示状态栏',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                    content: function (bool) {\r\n                        game.saveConfig('show_statusbar', bool);\r\n                        if (window.StatusBar && lib.device == 'android') {\r\n                            if (bool) {\r\n                                window.StatusBar.overlaysWebView(false);\r\n                                window.StatusBar.backgroundColorByName('black');\r\n                                window.StatusBar.show();\r\n                            }\r\n                            else {\r\n                                window.StatusBar.hide();\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                show_statusbar_ios: {\r\n                    name: '显示状态栏',\r\n                    init: 'off',\r\n                    unfrequent: true,\r\n                    item: {\r\n                        default: '默认',\r\n                        overlay: '嵌入',\r\n                        auto: '自动',\r\n                        off: '关闭'\r\n                    },\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('show_statusbar_ios', bool);\r\n                        if (window.StatusBar && lib.device == 'ios') {\r\n                            if (bool != 'off' && bool != 'auto') {\r\n                                if (lib.config.show_statusbar_ios == 'default') {\r\n                                    window.StatusBar.overlaysWebView(false);\r\n                                    document.body.classList.remove('statusbar');\r\n                                }\r\n                                else {\r\n                                    window.StatusBar.overlaysWebView(true);\r\n                                    document.body.classList.add('statusbar');\r\n                                }\r\n                                window.StatusBar.backgroundColorByName('black');\r\n                                window.StatusBar.show();\r\n                            }\r\n                            else {\r\n                                document.body.classList.remove('statusbar');\r\n                                window.StatusBar.hide();\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                show_card_prompt: {\r\n                    name: '显示出牌信息',\r\n                    intro: '出牌时在使用者上显示卡牌名称',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                },\r\n                hide_card_prompt_basic: {\r\n                    name: '隐藏基本牌信息',\r\n                    intro: '不显示基本牌名称',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                },\r\n                hide_card_prompt_equip: {\r\n                    name: '隐藏装备牌信息',\r\n                    intro: '不显示装备牌名称',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                },\r\n                show_phase_prompt: {\r\n                    name: '显示阶段信息',\r\n                    intro: '在当前回合不同阶段开始时显示阶段名称',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                },\r\n                show_phaseuse_prompt: {\r\n                    name: '出牌阶段提示',\r\n                    intro: '在你出牌时显示提示文字',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                },\r\n                auto_popped_config: {\r\n                    name: '自动弹出选项',\r\n                    intro: '鼠标移至选项按钮时弹出模式选择菜单',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                },\r\n                auto_popped_history: {\r\n                    name: '自动弹出历史',\r\n                    intro: '鼠标移至暂停按钮时弹出历史记录菜单',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                },\r\n                show_round_menu: {\r\n                    name: '显示触屏按钮',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        if (get.is.nomenu('show_round_menu', bool)) return false;\r\n                        game.saveConfig('show_round_menu', bool);\r\n                        if (bool && ui.roundmenu) {\r\n                            ui.roundmenu.style.display = '';\r\n                        }\r\n                        else {\r\n                            ui.roundmenu.style.display = 'none';\r\n                            alert('关闭触屏按钮后可通过手势打开菜单（默认为下划）')\r\n                        }\r\n                    }\r\n                },\r\n                remember_round_button: {\r\n                    name: '记住按钮位置',\r\n                    intro: '重新开始后触屏按钮将保存的上一局的位置',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('remember_round_button', bool);\r\n                        if (!bool) {\r\n                            ui.click.resetround();\r\n                        }\r\n                    }\r\n                },\r\n                remember_dialog: {\r\n                    name: '记住对话框位置',\r\n                    intro: '移动对话框后新的对话框也将在移动后的位置显示',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('remember_dialog', bool);\r\n                        if (!bool) {\r\n                            if (ui.dialog) {\r\n                                var dialog = ui.dialog;\r\n                                dialog.style.transform = '';\r\n                                dialog._dragtransform = [0, 0];\r\n                                dialog.style.transition = 'all 0.3s';\r\n                                dialog._dragtouches;\r\n                                dialog._dragorigin;\r\n                                dialog._dragorigintransform;\r\n                                setTimeout(function () {\r\n                                    dialog.style.transition = '';\r\n                                }, 500);\r\n                            }\r\n                            game.saveConfig('dialog_transform', [0, 0]);\r\n                        }\r\n                    }\r\n                },\r\n                transparent_dialog: {\r\n                    name: '堆叠对话框虚化',\r\n                    init: false,\r\n                    intro: '当具有static属性的对话框堆叠（如五谷丰登对话框中提示无懈可击）时，将后方的对话框变为半透明',\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('transparent_dialog', bool);\r\n                        if (bool) {\r\n                            for (var i = 0; i < ui.dialogs.length; i++) {\r\n                                if (ui.dialogs[i] != ui.dialog && ui.dialogs[i].static) {\r\n                                    ui.dialogs[i].unfocus();\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            for (var i = 0; i < ui.dialogs.length; i++) {\r\n                                if (ui.dialogs[i] != ui.dialog && ui.dialogs[i].static) {\r\n                                    ui.dialogs[i].refocus();\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                show_rarity: {\r\n                    name: '显示武将稀有度',\r\n                    init: false,\r\n                    intro: '仅供娱乐，重启后生效',\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('show_rarity', bool);\r\n                    }\r\n                },\r\n                mark_identity_style: {\r\n                    name: '标记身份操作',\r\n                    intro: '设置单击身份按钮时的操作',\r\n                    unfrequent: true,\r\n                    init: 'menu',\r\n                    item: {\r\n                        menu: '菜单',\r\n                        click: '单击',\r\n                    },\r\n                },\r\n                character_dialog_tool: {\r\n                    name: '自由选将显示',\r\n                    intro: '点击自由选将时默认显示的条目',\r\n                    init: '最近',\r\n                    item: {\r\n                        '收藏': '收藏',\r\n                        '最近': '最近',\r\n                        'all': '全部'\r\n                    },\r\n                    unfrequent: true,\r\n                },\r\n                recent_character_number: {\r\n                    name: '最近使用武将',\r\n                    intro: '自由选将对话框中最近使用武将的数量',\r\n                    init: '12',\r\n                    item: {\r\n                        '6': '6',\r\n                        '12': '12',\r\n                        '20': '24',\r\n                        '30': '36',\r\n                    },\r\n                    unfrequent: true\r\n                },\r\n                popequip: {\r\n                    name: '触屏装备选择',\r\n                    intro: '设置触屏布局中选择装备的方式',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                },\r\n                filternode_button: {\r\n                    name: '触屏筛选按钮',\r\n                    intro: '设置自由选将对话框中筛选按钮的样式',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                },\r\n                show_charactercard: {\r\n                    name: '显示武将资料',\r\n                    intro: '在武将界面单击时弹出武将资料卡',\r\n                    init: true,\r\n                    unfrequent: true\r\n                },\r\n                show_favourite: {\r\n                    name: '显示添加收藏',\r\n                    intro: '在角色的右键菜单中显示添加收藏',\r\n                    init: false,\r\n                    unfrequent: true\r\n                },\r\n                show_favmode: {\r\n                    name: '显示模式收藏',\r\n                    intro: '快捷菜单中显示收藏模式',\r\n                    init: true,\r\n                    unfrequent: true\r\n                },\r\n                show_favourite_menu: {\r\n                    name: '显示收藏菜单',\r\n                    intro: '在选项-武将中显示收藏一栏',\r\n                    init: true,\r\n                    unfrequent: true\r\n                },\r\n                show_ban_menu: {\r\n                    name: '显示禁将菜单',\r\n                    intro: '在选项-武将中显示禁将一栏',\r\n                    init: true,\r\n                    unfrequent: true\r\n                },\r\n                right_range: {\r\n                    name: '显示距离信息',\r\n                    intro: '在角色的右键菜单中显示距离等信息',\r\n                    init: true,\r\n                    unfrequent: true\r\n                },\r\n                replace_image: {\r\n                    name: '替换为原始卡图',\r\n                    intro: '所有V版卡图替换为三国杀原版卡图',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('replace_image', bool);\r\n                        if (bool) {\r\n                            ui.arena.classList.remove('replace_image');\r\n                        }\r\n                        else {\r\n                            ui.arena.classList.add('replace_image');\r\n                        }\r\n                    },\r\n                },\r\n                hide_card_image: {\r\n                    name: '隐藏卡牌背景',\r\n                    intro: '所有卡牌将使用文字作为背景',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                    restart: true,\r\n                },\r\n                show_name: {\r\n                    name: '显示角色名称',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('show_name', bool);\r\n                        if (bool) {\r\n                            ui.arena.classList.remove('hide_name');\r\n                        }\r\n                        else {\r\n                            ui.arena.classList.add('hide_name');\r\n                        }\r\n                    }\r\n                },\r\n                show_replay: {\r\n                    name: '显示重来按钮',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('show_replay', bool);\r\n                        if (lib.config.show_replay) {\r\n                            ui.replay.style.display = '';\r\n                        }\r\n                        else {\r\n                            ui.replay.style.display = 'none';\r\n                        }\r\n                    }\r\n                },\r\n                show_playerids: {\r\n                    name: '显示身份按钮',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('show_playerids', bool);\r\n                        if (lib.config.show_playerids) {\r\n                            ui.playerids.style.display = '';\r\n                        }\r\n                        else {\r\n                            ui.playerids.style.display = 'none';\r\n                        }\r\n                    }\r\n                },\r\n                show_sortcard: {\r\n                    name: '显示整理手牌按钮',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('show_sortcard', bool);\r\n                        if (lib.config.show_sortcard) {\r\n                            ui.sortCard.style.display = '';\r\n                        }\r\n                        else {\r\n                            ui.sortCard.style.display = 'none';\r\n                        }\r\n                    }\r\n                },\r\n                show_pause: {\r\n                    name: '显示暂停按钮',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('show_pause', bool);\r\n                        if (lib.config.show_pause) {\r\n                            ui.pause.style.display = '';\r\n                        }\r\n                        else {\r\n                            ui.pause.style.display = 'none';\r\n                        }\r\n                    }\r\n                },\r\n                show_auto: {\r\n                    name: '显示托管按钮',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('show_auto', bool);\r\n                        if (lib.config.show_auto) {\r\n                            ui.auto.style.display = '';\r\n                        }\r\n                        else {\r\n                            ui.auto.style.display = 'none';\r\n                        }\r\n                    }\r\n                },\r\n                show_volumn: {\r\n                    name: '显示音量按钮',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('show_volumn', bool);\r\n                        if (lib.config.show_volumn) {\r\n                            ui.volumn.style.display = '';\r\n                        }\r\n                        else {\r\n                            ui.volumn.style.display = 'none';\r\n                        }\r\n                    }\r\n                },\r\n                show_cardpile: {\r\n                    name: '显示牌堆按钮',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('show_cardpile', bool);\r\n                        if (bool) {\r\n                            ui.cardPileButton.style.display = '';\r\n                        }\r\n                        else {\r\n                            ui.cardPileButton.style.display = 'none';\r\n                        }\r\n                    }\r\n                },\r\n                show_cardpile_number: {\r\n                    name: '显示剩余牌数',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('show_cardpile_number', bool);\r\n                        if (bool) {\r\n                            ui.cardPileNumber.style.display = '';\r\n                        }\r\n                        else {\r\n                            ui.cardPileNumber.style.display = 'none';\r\n                        }\r\n                    }\r\n                },\r\n                show_handcardbutton: {\r\n                    name: '显示手牌按钮',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('show_handcardbutton', bool);\r\n                    }\r\n                },\r\n                show_giveup: {\r\n                    name: '显示投降按钮',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('show_giveup', bool);\r\n                    }\r\n                },\r\n                show_wuxie: {\r\n                    name: '显示无懈按钮',\r\n                    intro: '在右上角显示不询问无懈',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                    onclick: function (bool) {\r\n                        game.saveConfig('show_wuxie', bool);\r\n                        if (lib.config.show_wuxie) {\r\n                            ui.wuxie.style.display = '';\r\n                        }\r\n                        else {\r\n                            ui.wuxie.style.display = 'none';\r\n                        }\r\n                    }\r\n                },\r\n                wuxie_right: {\r\n                    name: '无懈按钮靠左',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                },\r\n                show_discardpile: {\r\n                    name: '暂停时显示弃牌堆',\r\n                    init: false,\r\n                    unfrequent: true,\r\n                },\r\n                show_extensionmaker: {\r\n                    name: '显示制作扩展',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                },\r\n                show_extensionshare: {\r\n                    name: '显示分享扩展',\r\n                    init: true,\r\n                    unfrequent: true,\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * 音效设置\r\n         * @name configMenu.audio\r\n         * @type {!Object}\r\n         */\r\n        audio: {\r\n            name: '音效',\r\n            config: {\r\n                update: function (config, map) {\r\n                    if (lib.config.background_music == 'music_custom' && (lib.device || lib.node)) {\r\n                        map.import_music.show();\r\n                    }\r\n                    else {\r\n                        map.import_music.hide();\r\n                    }\r\n                    map.clear_background_music[get.is.object(lib.config.customBackgroundMusic) ? 'show' : 'hide']();\r\n                    ui.background_music_setting = map.background_music;\r\n                    map.background_music._link.config.updatex.call(map.background_music, []);\r\n                },\r\n                background_music: {\r\n                    updatex: function () {\r\n                        this.lastChild.innerHTML = this._link.config.item[lib.config.background_music];\r\n                        var menu = this._link.menu;\r\n                        for (var i = 0; i < menu.childElementCount; i++) {\r\n                            if (!['music_off', 'music_custom', 'music_random'].concat(lib.config.all.background_music).contains(menu.childNodes[i]._link)) menu.childNodes[i].delete();\r\n                        }\r\n                    },\r\n                    name: '背景音乐',\r\n                    init: true,\r\n                    item: {\r\n                        music_default: '默认',\r\n                    },\r\n                    onclick: function (item) {\r\n                        game.saveConfig('background_music', item);\r\n                        game.playBackgroundMusic();\r\n                    }\r\n                },\r\n                import_music: {\r\n                    name: '<div style=\"white-space:nowrap;width:calc(100% - 5px)\">' +\r\n                        '<input type=\"file\" style=\"width:calc(100% - 40px)\" accept=\"audio/*\">' +\r\n                        '<button style=\"width:40px\">确定</button></div>',\r\n                    clear: true,\r\n                },\r\n                background_audio: {\r\n                    name: '游戏音效',\r\n                    init: true,\r\n                },\r\n                background_speak: {\r\n                    name: '人物配音',\r\n                    init: true,\r\n                },\r\n                equip_audio: {\r\n                    name: '装备配音',\r\n                    init: false,\r\n                },\r\n                repeat_audio: {\r\n                    name: '播放重复语音',\r\n                    init: false,\r\n                },\r\n                volumn_audio: {\r\n                    name: '音效音量',\r\n                    init: 8,\r\n                    item: {\r\n                        '0': '〇',\r\n                        '1': '一',\r\n                        '2': '二',\r\n                        '3': '三',\r\n                        '4': '四',\r\n                        '5': '五',\r\n                        '6': '六',\r\n                        '7': '七',\r\n                        '8': '八',\r\n                    },\r\n                    onclick: function (volume) {\r\n                        game.saveConfig('volumn_audio', parseInt(volume));\r\n                    }\r\n                },\r\n                volumn_background: {\r\n                    name: '音乐音量',\r\n                    init: 8,\r\n                    item: {\r\n                        '0': '〇',\r\n                        '1': '一',\r\n                        '2': '二',\r\n                        '3': '三',\r\n                        '4': '四',\r\n                        '5': '五',\r\n                        '6': '六',\r\n                        '7': '七',\r\n                        '8': '八',\r\n                    },\r\n                    onclick: function (volume) {\r\n                        game.saveConfig('volumn_background', parseInt(volume));\r\n                        ui.backgroundMusic.volume = volume / 8;\r\n                    }\r\n                },\r\n                clear_background_music: {\r\n                    name: '清除自定义背景音乐',\r\n                    clear: true,\r\n                    onclick: function () {\r\n                        if (confirm('是否清除已导入的所有自定义背景音乐？（该操作不可撤销！）')) {\r\n                            for (var i in lib.config.customBackgroundMusic) {\r\n                                lib.config.all.background_music.remove(i);\r\n                                if (i.indexOf('cdv_') == 0) {\r\n                                    game.removeFile('audio/background/' + i + '.mp3');\r\n                                }\r\n                                else {\r\n                                    game.deleteDB('audio', i);\r\n                                }\r\n                            }\r\n                            lib.config.customBackgroundMusic = null;\r\n                            game.saveConfig('customBackgroundMusic', null);\r\n                            game.saveConfig('background_music', 'music_off');\r\n                            if (!_status._aozhan) game.playBackgroundMusic();\r\n                        }\r\n                    },\r\n                },\r\n            }\r\n        },\r\n        /**\r\n         * (自动, 禁用)技能设置\r\n         * @name configMenu.skill\r\n         * @type {!Object}\r\n         */\r\n        skill: {\r\n            name: '技能',\r\n            config: {\r\n                update: function (config, map) {\r\n                    for (var i in map) {\r\n                        if (map[i]._link.config.type == 'autoskill') {\r\n                            if (!lib.config.autoskilllist.contains(i)) {\r\n                                map[i].classList.add('on');\r\n                            }\r\n                            else {\r\n                                map[i].classList.remove('on');\r\n                            }\r\n                        }\r\n                        else if (map[i]._link.config.type == 'banskill') {\r\n                            if (!lib.config.forbidlist.contains(i)) {\r\n                                map[i].classList.add('on');\r\n                            }\r\n                            else {\r\n                                map[i].classList.remove('on');\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * 其他菜单项\r\n         * @name configMenu.others\r\n         * @type {!Object}\r\n         */\r\n        others: {\r\n            name: '其它',\r\n            config: {\r\n                // reset_database:{\r\n                //     name:'重置游戏',\r\n                //     onclick:function(){\r\n                //         var node=this;\r\n                //         if(node._clearing){\r\n                //             if(indexedDB) indexedDB.deleteDatabase(lib.configprefix+'data');\r\n                //             game.reload();\r\n                //             return;\r\n                //         }\r\n                //         node._clearing=true;\r\n                //         node.innerHTML='单击以确认 (3)';\r\n                //         setTimeout(function(){\r\n                //             node.innerHTML='单击以确认 (2)';\r\n                //             setTimeout(function(){\r\n                //                 node.innerHTML='单击以确认 (1)';\r\n                //                 setTimeout(function(){\r\n                //                     node.innerHTML='重置游戏录像';\r\n                //                     delete node._clearing;\r\n                //                 },1000);\r\n                //             },1000);\r\n                //         },1000);\r\n                //     },\r\n                //     clear:true\r\n                // },\r\n                reset_game: {\r\n                    name: '重置游戏设置',\r\n                    onclick: function () {\r\n                        var node = this;\r\n                        if (node._clearing) {\r\n                            var noname_inited = localStorage.getItem('noname_inited');\r\n                            var onlineKey = localStorage.getItem(lib.configprefix + 'key');\r\n                            localStorage.clear();\r\n                            if (noname_inited) {\r\n                                localStorage.setItem('noname_inited', noname_inited);\r\n                            }\r\n                            if (onlineKey) {\r\n                                localStorage.setItem(lib.configprefix + 'key', onlineKey);\r\n                            }\r\n                            game.deleteDB('config');\r\n                            game.deleteDB('data');\r\n                            game.reload();\r\n                            return;\r\n                        }\r\n                        node._clearing = true;\r\n                        node.firstChild.innerHTML = '单击以确认 (3)';\r\n                        setTimeout(function () {\r\n                            node.firstChild.innerHTML = '单击以确认 (2)';\r\n                            setTimeout(function () {\r\n                                node.firstChild.innerHTML = '单击以确认 (1)';\r\n                                setTimeout(function () {\r\n                                    node.firstChild.innerHTML = '重置游戏设置';\r\n                                    delete node._clearing;\r\n                                }, 1000);\r\n                            }, 1000);\r\n                        }, 1000);\r\n                    },\r\n                    clear: true\r\n                },\r\n                reset_hiddenpack: {\r\n                    name: '重置隐藏内容',\r\n                    onclick: function () {\r\n                        if (this.firstChild.innerHTML != '已重置') {\r\n                            this.firstChild.innerHTML = '已重置'\r\n                            game.saveConfig('hiddenModePack', []);\r\n                            game.saveConfig('hiddenCharacterPack', []);\r\n                            game.saveConfig('hiddenCardPack', []);\r\n                            game.saveConfig('hiddenPlayPack', []);\r\n                            game.saveConfig('hiddenBackgroundPack', []);\r\n                            var that = this;\r\n                            setTimeout(function () {\r\n                                that.firstChild.innerHTML = '重置隐藏内容';\r\n                                setTimeout(function () {\r\n                                    if (confirm('是否重新启动使改变生效？')) {\r\n                                        game.reload();\r\n                                    }\r\n                                });\r\n                            }, 500);\r\n                        }\r\n                    },\r\n                    clear: true\r\n                },\r\n                reset_tutorial: {\r\n                    name: '重置新手向导',\r\n                    onclick: function () {\r\n                        if (this.firstChild.innerHTML != '已重置') {\r\n                            this.firstChild.innerHTML = '已重置'\r\n                            game.saveConfig('new_tutorial', false);\r\n                            game.saveConfig('prompt_hidebg');\r\n                            game.saveConfig('prompt_hidepack');\r\n                            var that = this;\r\n                            setTimeout(function () {\r\n                                that.firstChild.innerHTML = '重置新手向导';\r\n                            }, 500);\r\n                        }\r\n                    },\r\n                    clear: true\r\n                },\r\n                import_data: {\r\n                    name: '导入游戏设置',\r\n                    onclick: function () {\r\n                        ui.import_data_button.classList.toggle('hidden');\r\n                    },\r\n                    clear: true\r\n                },\r\n                import_data_button: {\r\n                    name: '<div style=\"white-space:nowrap;width:calc(100% - 10px)\">' +\r\n                        '<input type=\"file\" style=\"width:calc(100% - 40px)\">' +\r\n                        '<button style=\"width:40px\">确定</button></div>',\r\n                    clear: true,\r\n                },\r\n                export_data: {\r\n                    name: '导出游戏设置',\r\n                    onclick: function () {\r\n                        var data;\r\n                        var export_data = function (data) {\r\n                            game.export(lib.init.encode(JSON.stringify(data)), '无名杀 - 数据 - ' + (new Date()).toLocaleString());\r\n                        }\r\n                        if (!lib.db) {\r\n                            data = {};\r\n                            for (var i in localStorage) {\r\n                                if (i.indexOf(lib.configprefix) == 0) {\r\n                                    data[i] = localStorage[i];\r\n                                }\r\n                            }\r\n                            export_data(data);\r\n                        }\r\n                        else {\r\n                            game.getDB('config', null, function (data1) {\r\n                                game.getDB('data', null, function (data2) {\r\n                                    export_data({\r\n                                        config: data1,\r\n                                        data: data2\r\n                                    });\r\n                                });\r\n                            });\r\n                        }\r\n\r\n                    },\r\n                    clear: true\r\n                },\r\n                redownload_game: {\r\n                    name: '重新下载游戏',\r\n                    onclick: function () {\r\n                        var node = this;\r\n                        if (node._clearing) {\r\n                            localStorage.removeItem('noname_inited');\r\n                            game.reload();\r\n                            return;\r\n                        }\r\n                        node._clearing = true;\r\n                        node.firstChild.innerHTML = '单击以确认 (3)';\r\n                        setTimeout(function () {\r\n                            node.firstChild.innerHTML = '单击以确认 (2)';\r\n                            setTimeout(function () {\r\n                                node.firstChild.innerHTML = '单击以确认 (1)';\r\n                                setTimeout(function () {\r\n                                    node.firstChild.innerHTML = '重新下载游戏';\r\n                                    delete node._clearing;\r\n                                }, 1000);\r\n                            }, 1000);\r\n                        }, 1000);\r\n                    },\r\n                    clear: true\r\n                },\r\n                update: function (config, map) {\r\n                    if (lib.device || lib.node) {\r\n                        map.redownload_game.show();\r\n                    }\r\n                    else {\r\n                        map.redownload_game.hide();\r\n                    }\r\n                }\r\n                // trim_game:{\r\n                //     name:'隐藏非官方扩展包',\r\n                //     onclick:function(){\r\n                //         if(this.innerHTML!='已隐藏'){\r\n                //             this.innerHTML='已隐藏';\r\n                //                               var pack=lib.config.all.cards.slice(0);\r\n                //                               if(Array.isArray(lib.config.hiddenCardPack)){\r\n                //                                            for(var i=0;i<lib.config.hiddenCardPack.length;i++){\r\n                //                                                                  pack.add(lib.config.hiddenCardPack[i]);\r\n                //                                            }\r\n                //                               }\r\n                //                               for(var i=0;i<pack.length;i++){\r\n                //                                            if(lib.config.all.sgscards.contains(pack[i])){\r\n                //                                                                  pack.splice(i--,1);\r\n                //                                            }\r\n                //                               }\r\n                //             game.saveConfig('hiddenCardPack',pack);\r\n                //\r\n                //                               var pack=lib.config.all.characters.slice(0);\r\n                //                               if(Array.isArray(lib.config.hiddenCharacterPack)){\r\n                //                                            for(var i=0;i<lib.config.hiddenCharacterPack.length;i++){\r\n                //                                                                  pack.add(lib.config.hiddenCharacterPack[i]);\r\n                //                                            }\r\n                //                               }\r\n                //                               for(var i=0;i<pack.length;i++){\r\n                //                                            if(lib.config.all.sgscharacters.contains(pack[i])){\r\n                //                                                                  pack.splice(i--,1);\r\n                //                                            }\r\n                //                               }\r\n                //             game.saveConfig('hiddenCharacterPack',pack);\r\n                //\r\n                //                               var pack=lib.config.all.mode.slice(0);\r\n                //                               if(Array.isArray(lib.config.hiddenModePack)){\r\n                //                                            for(var i=0;i<lib.config.hiddenModePack.length;i++){\r\n                //                                                                  pack.add(lib.config.hiddenModePack[i]);\r\n                //                                            }\r\n                //                               }\r\n                //                               for(var i=0;i<pack.length;i++){\r\n                //                                            if(lib.config.all.sgsmodes.contains(pack[i])){\r\n                //                                                                  pack.splice(i--,1);\r\n                //                                            }\r\n                //                               }\r\n                //             game.saveConfig('hiddenModePack',pack);\r\n                //\r\n                //             var that=this;\r\n                //             setTimeout(function(){\r\n                //                 that.innerHTML='隐藏非官方扩展包';\r\n                //             },500);\r\n                //         }\r\n                //     },\r\n                //     clear:true\r\n                // }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 拓展菜单\r\n     * @name configMenu.extensionMenu\r\n     */\r\n     lib.extensionMenu = {\r\n        cardpile: {\r\n            enable: {\r\n                name: '开启',\r\n                init: false,\r\n                restart: true,\r\n            },\r\n            intro: {\r\n                name: '将杀闪等牌在牌堆中的比例维持在与军争牌堆相同，防止开启扩展包后被过多地稀释',\r\n                clear: true,\r\n                nopointer: true,\r\n            },\r\n            sha: {\r\n                name: '杀',\r\n                init: '1',\r\n                item: {\r\n                    '1': '补充全部',\r\n                    '0.5': '补充一半',\r\n                    '0': '不补充'\r\n                }\r\n            },\r\n            huosha: {\r\n                name: '火杀',\r\n                init: '1',\r\n                item: {\r\n                    '1': '补充全部',\r\n                    '0.5': '补充一半',\r\n                    '0': '不补充'\r\n                }\r\n            },\r\n            leisha: {\r\n                name: '雷杀',\r\n                init: '1',\r\n                item: {\r\n                    '1': '补充全部',\r\n                    '0.5': '补充一半',\r\n                    '0': '不补充'\r\n                }\r\n            },\r\n            shan: {\r\n                name: '闪',\r\n                init: '1',\r\n                item: {\r\n                    '1': '补充全部',\r\n                    '0.5': '补充一半',\r\n                    '0': '不补充'\r\n                }\r\n            },\r\n            tao: {\r\n                name: '桃',\r\n                init: '0',\r\n                item: {\r\n                    '1': '补充全部',\r\n                    '0.5': '补充一半',\r\n                    '0': '不补充'\r\n                }\r\n            },\r\n            jiu: {\r\n                name: '酒',\r\n                init: '0',\r\n                item: {\r\n                    '1': '补充全部',\r\n                    '0.5': '补充一半',\r\n                    '0': '不补充'\r\n                }\r\n            },\r\n            wuxie: {\r\n                name: '无懈可击',\r\n                init: '0.5',\r\n                item: {\r\n                    '1': '补充全部',\r\n                    '0.5': '补充一半',\r\n                    '0': '不补充'\r\n                }\r\n            },\r\n            nanman: {\r\n                name: '南蛮入侵',\r\n                init: '0',\r\n                item: {\r\n                    '1': '补充全部',\r\n                    '0.5': '补充一半',\r\n                    '0': '不补充'\r\n                }\r\n            },\r\n            wanjian: {\r\n                name: '万箭齐发',\r\n                init: '0',\r\n                item: {\r\n                    '1': '补充全部',\r\n                    '0.5': '补充一半',\r\n                    '0': '不补充'\r\n                }\r\n            },\r\n            guohe: {\r\n                name: '过河拆桥',\r\n                init: '0',\r\n                item: {\r\n                    '1': '补充全部',\r\n                    '0.5': '补充一半',\r\n                    '0': '不补充'\r\n                }\r\n            },\r\n            shunshou: {\r\n                name: '顺手牵羊',\r\n                init: '0',\r\n                item: {\r\n                    '1': '补充全部',\r\n                    '0.5': '补充一半',\r\n                    '0': '不补充'\r\n                }\r\n            },\r\n            tiesuo: {\r\n                name: '铁索连环',\r\n                init: '0',\r\n                item: {\r\n                    '1': '补充全部',\r\n                    '0.5': '补充一半',\r\n                    '0': '不补充'\r\n                }\r\n            },\r\n            hide: {\r\n                name: '隐藏此扩展',\r\n                clear: true,\r\n                onclick: function () {\r\n                    if (this.firstChild.innerHTML == '隐藏此扩展') {\r\n                        this.firstChild.innerHTML = '此扩展将在重启后隐藏';\r\n                        lib.config.hiddenPlayPack.add('cardpile');\r\n                        if (!lib.config.prompt_hidepack) {\r\n                            alert('隐藏的扩展包可通过选项-其它-重置隐藏内容恢复');\r\n                            game.saveConfig('prompt_hidepack', true);\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.firstChild.innerHTML = '隐藏此扩展';\r\n                        lib.config.hiddenPlayPack.remove('cardpile');\r\n                    }\r\n                    game.saveConfig('hiddenPlayPack', lib.config.hiddenPlayPack);\r\n                }\r\n            },\r\n        },\r\n        // boss: {\r\n        //     enable: {\r\n        //         name: '开启',\r\n        //         init: false,\r\n        //         restart: true,\r\n        //         onswitch: function (bool) {\r\n        //             if (bool) {\r\n        //                 var storage = { boss: {}, versus: {}, translate: {} };\r\n        //                 var loadversus = function () {\r\n        //                     game.loadModeAsync('versus', function (mode) {\r\n        //                         for (var i in mode.translate) {\r\n        //                             storage.translate[i] = mode.translate[i];\r\n        //                         }\r\n        //                         for (var i in mode.jiangeboss) {\r\n        //                             if (mode.jiangeboss[i][4].contains('bossallowed')) {\r\n        //                                 storage.versus[i] = mode.jiangeboss[i];\r\n        //                             }\r\n        //                         }\r\n        //                         localStorage.setItem('boss_storage_playpackconfig', JSON.stringify(storage));\r\n        //                     });\r\n        //                 };\r\n        //                 game.loadModeAsync('boss', function (mode) {\r\n        //                     for (var i in mode.translate) {\r\n        //                         storage.translate[i] = mode.translate[i];\r\n        //                     }\r\n        //                     for (var i in mode.characterPack.mode_boss) {\r\n        //                         if (mode.characterPack.mode_boss[i][4].contains('bossallowed')) {\r\n        //                             storage.boss[i] = mode.characterPack.mode_boss[i];\r\n        //                         }\r\n        //                     }\r\n        //                     loadversus();\r\n        //                 });\r\n        //             }\r\n        //             else {\r\n        //                 localStorage.removeItem('boss_storage_playpackconfig');\r\n        //             }\r\n        //         }\r\n        //     },\r\n        //     intro: {\r\n        //         name: '将剑阁和挑战模式的武将添加到其它模式',\r\n        //         clear: true,\r\n        //         nopointer: true,\r\n        //     },\r\n        //     enableai: {\r\n        //         name: '随机选将可用',\r\n        //         init: false\r\n        //     },\r\n        //     hide: {\r\n        //         name: '隐藏此扩展',\r\n        //         clear: true,\r\n        //         onclick: function () {\r\n        //             if (this.firstChild.innerHTML == '隐藏此扩展') {\r\n        //                 this.firstChild.innerHTML = '此扩展将在重启后隐藏';\r\n        //                 lib.config.hiddenPlayPack.add('boss');\r\n        //                 if (!lib.config.prompt_hidepack) {\r\n        //                     alert('隐藏的扩展包可通过选项-其它-重置隐藏内容恢复');\r\n        //                     game.saveConfig('prompt_hidepack', true);\r\n        //                 }\r\n        //             }\r\n        //             else {\r\n        //                 this.firstChild.innerHTML = '隐藏此扩展';\r\n        //                 lib.config.hiddenPlayPack.remove('boss');\r\n        //             }\r\n        //             game.saveConfig('hiddenPlayPack', lib.config.hiddenPlayPack);\r\n        //         }\r\n        //     },\r\n        // },\r\n        wuxing: {\r\n            enable: {\r\n                name: '开启',\r\n                init: false,\r\n                restart: true,\r\n            },\r\n            intro: {\r\n                name: '每名角色和部分卡牌在游戏开始时随机获得一个属性',\r\n                clear: true,\r\n                nopointer: true,\r\n            },\r\n            num: {\r\n                name: '带属性卡牌',\r\n                init: '0.3',\r\n                item: {\r\n                    '0.1': '10%',\r\n                    '0.2': '20%',\r\n                    '0.3': '30%',\r\n                    '0.5': '50%',\r\n                }\r\n            },\r\n            hide: {\r\n                name: '隐藏此扩展',\r\n                clear: true,\r\n                onclick: function () {\r\n                    if (this.firstChild.innerHTML == '隐藏此扩展') {\r\n                        this.firstChild.innerHTML = '此扩展将在重启后隐藏';\r\n                        lib.config.hiddenPlayPack.add('wuxing');\r\n                        if (!lib.config.prompt_hidepack) {\r\n                            alert('隐藏的扩展包可通过选项-其它-重置隐藏内容恢复');\r\n                            game.saveConfig('prompt_hidepack', true);\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.firstChild.innerHTML = '隐藏此扩展';\r\n                        lib.config.hiddenPlayPack.remove('wuxing');\r\n                    }\r\n                    game.saveConfig('hiddenPlayPack', lib.config.hiddenPlayPack);\r\n                }\r\n            },\r\n        },\r\n        coin: {\r\n            enable: {\r\n                name: '开启',\r\n                init: false,\r\n                restart: true,\r\n                onclick: function (bool) {\r\n                    if (bool) {\r\n                        lib.config.plays.add('coin');\r\n                    }\r\n                    else {\r\n                        lib.config.plays.remove('coin');\r\n                    }\r\n                    game.saveConfig('plays', lib.config.plays);\r\n                }\r\n            },\r\n            intro: {\r\n                name: '每完成一次对局，可获得一定数量的金币；金币可用于购买游戏特效',\r\n                clear: true,\r\n                nopointer: true,\r\n            },\r\n            display: {\r\n                name: '金币显示',\r\n                init: 'text',\r\n                item: {\r\n                    symbol: '符号',\r\n                    text: '文字'\r\n                },\r\n                onclick: function (item) {\r\n                    game.saveConfig('coin_display_playpackconfig', item);\r\n                    if (game.changeCoin) game.changeCoin(0);\r\n                }\r\n            },\r\n            canvas: {\r\n                name: '特效置顶',\r\n                init: false,\r\n                onclick: function (bool) {\r\n                    game.saveConfig('coin_canvas_playpackconfig', bool);\r\n                    if (bool) {\r\n                        ui.window.classList.add('canvas_top');\r\n                    }\r\n                    else {\r\n                        ui.window.classList.remove('canvas_top');\r\n                    }\r\n                }\r\n            },\r\n            hide: {\r\n                name: '隐藏此扩展',\r\n                clear: true,\r\n                onclick: function () {\r\n                    if (this.firstChild.innerHTML == '隐藏此扩展') {\r\n                        this.firstChild.innerHTML = '此扩展将在重启后隐藏';\r\n                        lib.config.hiddenPlayPack.add('coin');\r\n                        if (!lib.config.prompt_hidepack) {\r\n                            alert('隐藏的扩展包可通过选项-其它-重置隐藏内容恢复');\r\n                            game.saveConfig('prompt_hidepack', true);\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.firstChild.innerHTML = '隐藏此扩展';\r\n                        lib.config.hiddenPlayPack.remove('coin');\r\n                    }\r\n                    game.saveConfig('hiddenPlayPack', lib.config.hiddenPlayPack);\r\n                }\r\n            },\r\n        },\r\n    }\r\n}\n\n//# sourceURL=webpack:///./data/menu.js?")},"./extension/NoSleep.min.js":function(module){eval('/*! NoSleep.min.js v0.12.0 - git.io/vfn01 - Rich Tibbett - MIT license */\n!function(A,e){ true?module.exports=e():0}(this,(function(){return function(A){var e={};function B(g){if(e[g])return e[g].exports;var o=e[g]={i:g,l:!1,exports:{}};return A[g].call(o.exports,o,o.exports,B),o.l=!0,o.exports}return B.m=A,B.c=e,B.d=function(A,e,g){B.o(A,e)||Object.defineProperty(A,e,{enumerable:!0,get:g})},B.r=function(A){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(A,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(A,"__esModule",{value:!0})},B.t=function(A,e){if(1&e&&(A=B(A)),8&e)return A;if(4&e&&"object"==typeof A&&A&&A.__esModule)return A;var g=Object.create(null);if(B.r(g),Object.defineProperty(g,"default",{enumerable:!0,value:A}),2&e&&"string"!=typeof A)for(var o in A)B.d(g,o,function(e){return A[e]}.bind(null,o));return g},B.n=function(A){var e=A&&A.__esModule?function(){return A.default}:function(){return A};return B.d(e,"a",e),e},B.o=function(A,e){return Object.prototype.hasOwnProperty.call(A,e)},B.p="",B(B.s=0)}([function(A,e,B){"use strict";var g=function(){function A(A,e){for(var B=0;B<e.length;B++){var g=e[B];g.enumerable=g.enumerable||!1,g.configurable=!0,"value"in g&&(g.writable=!0),Object.defineProperty(A,g.key,g)}}return function(e,B,g){return B&&A(e.prototype,B),g&&A(e,g),e}}();var o=B(1),E=o.webm,n=o.mp4,C=function(){return"undefined"!=typeof navigator&&parseFloat((""+(/CPU.*OS ([0-9_]{3,4})[0-9_]{0,1}|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent)||[0,""])[1]).replace("undefined","3_2").replace("_",".").replace("_",""))<10&&!window.MSStream},Q=function(){return"wakeLock"in navigator},i=function(){function A(){var e=this;if(function(A,e){if(!(A instanceof e))throw new TypeError("Cannot call a class as a function")}(this,A),this.enabled=!1,Q()){this._wakeLock=null;var B=function(){null!==e._wakeLock&&"visible"===document.visibilityState&&e.enable()};document.addEventListener("visibilitychange",B),document.addEventListener("fullscreenchange",B)}else C()?this.noSleepTimer=null:(this.noSleepVideo=document.createElement("video"),this.noSleepVideo.setAttribute("title","No Sleep"),this.noSleepVideo.setAttribute("playsinline",""),this._addSourceToVideo(this.noSleepVideo,"webm",E),this._addSourceToVideo(this.noSleepVideo,"mp4",n),this.noSleepVideo.addEventListener("loadedmetadata",(function(){e.noSleepVideo.duration<=1?e.noSleepVideo.setAttribute("loop",""):e.noSleepVideo.addEventListener("timeupdate",(function(){e.noSleepVideo.currentTime>.5&&(e.noSleepVideo.currentTime=Math.random())}))})))}return g(A,[{key:"_addSourceToVideo",value:function(A,e,B){var g=document.createElement("source");g.src=B,g.type="video/"+e,A.appendChild(g)}},{key:"enable",value:function(){var A=this;return Q()?navigator.wakeLock.request("screen").then((function(e){A._wakeLock=e,A.enabled=!0,console.log("Wake Lock active."),A._wakeLock.addEventListener("release",(function(){console.log("Wake Lock released.")}))})).catch((function(e){throw A.enabled=!1,console.error(e.name+", "+e.message),e})):C()?(this.disable(),console.warn("\\n        NoSleep enabled for older iOS devices. This can interrupt\\n        active or long-running network requests from completing successfully.\\n        See https://github.com/richtr/NoSleep.js/issues/15 for more details.\\n      "),this.noSleepTimer=window.setInterval((function(){document.hidden||(window.location.href=window.location.href.split("#")[0],window.setTimeout(window.stop,0))}),15e3),this.enabled=!0,Promise.resolve()):this.noSleepVideo.play().then((function(e){return A.enabled=!0,e})).catch((function(e){throw A.enabled=!1,e}))}},{key:"disable",value:function(){Q()?(this._wakeLock&&this._wakeLock.release(),this._wakeLock=null):C()?this.noSleepTimer&&(console.warn("\\n          NoSleep now disabled for older iOS devices.\\n        "),window.clearInterval(this.noSleepTimer),this.noSleepTimer=null):this.noSleepVideo.pause(),this.enabled=!1}},{key:"isEnabled",get:function(){return this.enabled}}]),A}();A.exports=i},function(A,e,B){"use strict";A.exports={webm:"data:video/webm;base64,GkXfowEAAAAAAAAfQoaBAUL3gQFC8oEEQvOBCEKChHdlYm1Ch4EEQoWBAhhTgGcBAAAAAAAVkhFNm3RALE27i1OrhBVJqWZTrIHfTbuMU6uEFlSua1OsggEwTbuMU6uEHFO7a1OsghV17AEAAAAAAACkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVSalmAQAAAAAAAEUq17GDD0JATYCNTGF2ZjU1LjMzLjEwMFdBjUxhdmY1NS4zMy4xMDBzpJBlrrXf3DCDVB8KcgbMpcr+RImIQJBgAAAAAAAWVK5rAQAAAAAAD++uAQAAAAAAADLXgQFzxYEBnIEAIrWcg3VuZIaFVl9WUDiDgQEj44OEAmJaAOABAAAAAAAABrCBsLqBkK4BAAAAAAAPq9eBAnPFgQKcgQAitZyDdW5khohBX1ZPUkJJU4OBAuEBAAAAAAAAEZ+BArWIQOdwAAAAAABiZIEgY6JPbwIeVgF2b3JiaXMAAAAAAoC7AAAAAAAAgLUBAAAAAAC4AQN2b3JiaXMtAAAAWGlwaC5PcmcgbGliVm9yYmlzIEkgMjAxMDExMDEgKFNjaGF1ZmVudWdnZXQpAQAAABUAAABlbmNvZGVyPUxhdmM1NS41Mi4xMDIBBXZvcmJpcyVCQ1YBAEAAACRzGCpGpXMWhBAaQlAZ4xxCzmvsGUJMEYIcMkxbyyVzkCGkoEKIWyiB0JBVAABAAACHQXgUhIpBCCGEJT1YkoMnPQghhIg5eBSEaUEIIYQQQgghhBBCCCGERTlokoMnQQgdhOMwOAyD5Tj4HIRFOVgQgydB6CCED0K4moOsOQghhCQ1SFCDBjnoHITCLCiKgsQwuBaEBDUojILkMMjUgwtCiJqDSTX4GoRnQXgWhGlBCCGEJEFIkIMGQcgYhEZBWJKDBjm4FITLQagahCo5CB+EIDRkFQCQAACgoiiKoigKEBqyCgDIAAAQQFEUx3EcyZEcybEcCwgNWQUAAAEACAAAoEiKpEiO5EiSJFmSJVmSJVmS5omqLMuyLMuyLMsyEBqyCgBIAABQUQxFcRQHCA1ZBQBkAAAIoDiKpViKpWiK54iOCISGrAIAgAAABAAAEDRDUzxHlETPVFXXtm3btm3btm3btm3btm1blmUZCA1ZBQBAAAAQ0mlmqQaIMAMZBkJDVgEACAAAgBGKMMSA0JBVAABAAACAGEoOogmtOd+c46BZDppKsTkdnEi1eZKbirk555xzzsnmnDHOOeecopxZDJoJrTnnnMSgWQqaCa0555wnsXnQmiqtOeeccc7pYJwRxjnnnCateZCajbU555wFrWmOmkuxOeecSLl5UptLtTnnnHPOOeecc84555zqxekcnBPOOeecqL25lpvQxTnnnE/G6d6cEM4555xzzjnnnHPOOeecIDRkFQAABABAEIaNYdwpCNLnaCBGEWIaMulB9+gwCRqDnELq0ehopJQ6CCWVcVJKJwgNWQUAAAIAQAghhRRSSCGFFFJIIYUUYoghhhhyyimnoIJKKqmooowyyyyzzDLLLLPMOuyssw47DDHEEEMrrcRSU2011lhr7jnnmoO0VlprrbVSSimllFIKQkNWAQAgAAAEQgYZZJBRSCGFFGKIKaeccgoqqIDQkFUAACAAgAAAAABP8hzRER3RER3RER3RER3R8RzPESVREiVREi3TMjXTU0VVdWXXlnVZt31b2IVd933d933d+HVhWJZlWZZlWZZlWZZlWZZlWZYgNGQVAAACAAAghBBCSCGFFFJIKcYYc8w56CSUEAgNWQUAAAIACAAAAHAUR3EcyZEcSbIkS9IkzdIsT/M0TxM9URRF0zRV0RVdUTdtUTZl0zVdUzZdVVZtV5ZtW7Z125dl2/d93/d93/d93/d93/d9XQdCQ1YBABIAADqSIymSIimS4ziOJElAaMgqAEAGAEAAAIriKI7jOJIkSZIlaZJneZaomZrpmZ4qqkBoyCoAABAAQAAAAAAAAIqmeIqpeIqoeI7oiJJomZaoqZoryqbsuq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq4LhIasAgAkAAB0JEdyJEdSJEVSJEdygNCQVQCADACAAAAcwzEkRXIsy9I0T/M0TxM90RM901NFV3SB0JBVAAAgAIAAAAAAAAAMybAUy9EcTRIl1VItVVMt1VJF1VNVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVN0zRNEwgNWQkAkAEAkBBTLS3GmgmLJGLSaqugYwxS7KWxSCpntbfKMYUYtV4ah5RREHupJGOKQcwtpNApJq3WVEKFFKSYYyoVUg5SIDRkhQAQmgHgcBxAsixAsiwAAAAAAAAAkDQN0DwPsDQPAAAAAAAAACRNAyxPAzTPAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA0jRA8zxA8zwAAAAAAAAA0DwP8DwR8EQRAAAAAAAAACzPAzTRAzxRBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA0jRA8zxA8zwAAAAAAAAAsDwP8EQR0DwRAAAAAAAAACzPAzxRBDzRAwgIRQasiIAiBMAcEgSJAmSBM0DSJYFTYOmwTQBkmVB06BpME0AAAAAAAAAAAAAJE2DpkHTIIoASdOgadA0iCIAAAAAAAAAAAAAkqZB06BpEEWApGnQNGgaRBEAAAAAAAAAAAAAzzQhihBFmCbAM02IIkQRpgkAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAGHAAAAgwoQwUGrIiAIgTAHA4imUBAIDjOJYFAACO41gWAABYliWKAABgWZooAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAYcAAACDChDBQashIAiAIAcCiKZQHHsSzgOJYFJMmyAJYF0DyApgFEEQAIAAAocAAACLBBU2JxgEJDVgIAUQAABsWxLE0TRZKkaZoniiRJ0zxPFGma53meacLzPM80IYqiaJoQRVE0TZimaaoqME1VFQAAUOAAABBgg6bE4gCFhqwEAEICAByKYlma5nmeJ4qmqZokSdM8TxRF0TRNU1VJkqZ5niiKommapqqyLE3zPFEURdNUVVWFpnmeKIqiaaqq6sLzPE8URdE0VdV14XmeJ4qiaJqq6roQRVE0TdNUTVV1XSCKpmmaqqqqrgtETxRNU1Vd13WB54miaaqqq7ouEE3TVFVVdV1ZBpimaaqq68oyQFVV1XVdV5YBqqqqruu6sgxQVdd1XVmWZQCu67qyLMsCAAAOHAAAAoygk4wqi7DRhAsPQKEhKwKAKAAAwBimFFPKMCYhpBAaxiSEFEImJaXSUqogpFJSKRWEVEoqJaOUUmopVRBSKamUCkIqJZVSAADYgQMA2IGFUGjISgAgDwCAMEYpxhhzTiKkFGPOOScRUoox55yTSjHmnHPOSSkZc8w556SUzjnnnHNSSuacc845KaVzzjnnnJRSSuecc05KKSWEzkEnpZTSOeecEwAAVOAAABBgo8jmBCNBhYasBABSAQAMjmNZmuZ5omialiRpmud5niiapiZJmuZ5nieKqsnzPE8URdE0VZXneZ4oiqJpqirXFUXTNE1VVV2yLIqmaZqq6rowTdNUVdd1XZimaaqq67oubFtVVdV1ZRm2raqq6rqyDFzXdWXZloEsu67s2rIAAPAEBwCgAhtWRzgpGgssNGQlAJABAEAYg5BCCCFlEEIKIYSUUggJAAAYcAAACDChDBQashIASAUAAIyx1lprrbXWQGettdZaa62AzFprrbXWWmuttdZaa6211lJrrbXWWmuttdZaa6211lprrbXWWmuttdZaa6211lprrbXWWmuttdZaa6211lprrbXWWmstpZRSSimllFJKKaWUUkoppZRSSgUA+lU4APg/2LA6wknRWGChISsBgHAAAMAYpRhzDEIppVQIMeacdFRai7FCiDHnJKTUWmzFc85BKCGV1mIsnnMOQikpxVZjUSmEUlJKLbZYi0qho5JSSq3VWIwxqaTWWoutxmKMSSm01FqLMRYjbE2ptdhqq7EYY2sqLbQYY4zFCF9kbC2m2moNxggjWywt1VprMMYY3VuLpbaaizE++NpSLDHWXAAAd4MDAESCjTOsJJ0VjgYXGrISAAgJACAQUooxxhhzzjnnpFKMOeaccw5CCKFUijHGnHMOQgghlIwx5pxzEEIIIYRSSsaccxBCCCGEkFLqnHMQQgghhBBKKZ1zDkIIIYQQQimlgxBCCCGEEEoopaQUQgghhBBCCKmklEIIIYRSQighlZRSCCGEEEIpJaSUUgohhFJCCKGElFJKKYUQQgillJJSSimlEkoJJYQSUikppRRKCCGUUkpKKaVUSgmhhBJKKSWllFJKIYQQSikFAAAcOAAABBhBJxlVFmGjCRcegEJDVgIAZAAAkKKUUiktRYIipRikGEtGFXNQWoqocgxSzalSziDmJJaIMYSUk1Qy5hRCDELqHHVMKQYtlRhCxhik2HJLoXMOAAAAQQCAgJAAAAMEBTMAwOAA4XMQdAIERxsAgCBEZohEw0JweFAJEBFTAUBigkIuAFRYXKRdXECXAS7o4q4DIQQhCEEsDqCABByccMMTb3jCDU7QKSp1IAAAAAAADADwAACQXAAREdHMYWRobHB0eHyAhIiMkAgAAAAAABcAfAAAJCVAREQ0cxgZGhscHR4fICEiIyQBAIAAAgAAAAAggAAEBAQAAAAAAAIAAAAEBB9DtnUBAAAAAAAEPueBAKOFggAAgACjzoEAA4BwBwCdASqwAJAAAEcIhYWIhYSIAgIABhwJ7kPfbJyHvtk5D32ych77ZOQ99snIe+2TkPfbJyHvtk5D32ych77ZOQ99YAD+/6tQgKOFggADgAqjhYIAD4AOo4WCACSADqOZgQArADECAAEQEAAYABhYL/QACIBDmAYAAKOFggA6gA6jhYIAT4AOo5mBAFMAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCAGSADqOFggB6gA6jmYEAewAxAgABEBAAGAAYWC/0AAiAQ5gGAACjhYIAj4AOo5mBAKMAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCAKSADqOFggC6gA6jmYEAywAxAgABEBAAGAAYWC/0AAiAQ5gGAACjhYIAz4AOo4WCAOSADqOZgQDzADECAAEQEAAYABhYL/QACIBDmAYAAKOFggD6gA6jhYIBD4AOo5iBARsAEQIAARAQFGAAYWC/0AAiAQ5gGACjhYIBJIAOo4WCATqADqOZgQFDADECAAEQEAAYABhYL/QACIBDmAYAAKOFggFPgA6jhYIBZIAOo5mBAWsAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCAXqADqOFggGPgA6jmYEBkwAxAgABEBAAGAAYWC/0AAiAQ5gGAACjhYIBpIAOo4WCAbqADqOZgQG7ADECAAEQEAAYABhYL/QACIBDmAYAAKOFggHPgA6jmYEB4wAxAgABEBAAGAAYWC/0AAiAQ5gGAACjhYIB5IAOo4WCAfqADqOZgQILADECAAEQEAAYABhYL/QACIBDmAYAAKOFggIPgA6jhYICJIAOo5mBAjMAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCAjqADqOFggJPgA6jmYECWwAxAgABEBAAGAAYWC/0AAiAQ5gGAACjhYICZIAOo4WCAnqADqOZgQKDADECAAEQEAAYABhYL/QACIBDmAYAAKOFggKPgA6jhYICpIAOo5mBAqsAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCArqADqOFggLPgA6jmIEC0wARAgABEBAUYABhYL/QACIBDmAYAKOFggLkgA6jhYIC+oAOo5mBAvsAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCAw+ADqOZgQMjADECAAEQEAAYABhYL/QACIBDmAYAAKOFggMkgA6jhYIDOoAOo5mBA0sAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCA0+ADqOFggNkgA6jmYEDcwAxAgABEBAAGAAYWC/0AAiAQ5gGAACjhYIDeoAOo4WCA4+ADqOZgQObADECAAEQEAAYABhYL/QACIBDmAYAAKOFggOkgA6jhYIDuoAOo5mBA8MAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCA8+ADqOFggPkgA6jhYID+oAOo4WCBA+ADhxTu2sBAAAAAAAAEbuPs4EDt4r3gQHxghEr8IEK",mp4:"data:video/mp4;base64,AAAAHGZ0eXBNNFYgAAACAGlzb21pc28yYXZjMQAAAAhmcmVlAAAGF21kYXTeBAAAbGliZmFhYyAxLjI4AABCAJMgBDIARwAAArEGBf//rdxF6b3m2Ui3lizYINkj7u94MjY0IC0gY29yZSAxNDIgcjIgOTU2YzhkOCAtIEguMjY0L01QRUctNCBBVkMgY29kZWMgLSBDb3B5bGVmdCAyMDAzLTIwMTQgLSBodHRwOi8vd3d3LnZpZGVvbGFuLm9yZy94MjY0Lmh0bWwgLSBvcHRpb25zOiBjYWJhYz0wIHJlZj0zIGRlYmxvY2s9MTowOjAgYW5hbHlzZT0weDE6MHgxMTEgbWU9aGV4IHN1Ym1lPTcgcHN5PTEgcHN5X3JkPTEuMDA6MC4wMCBtaXhlZF9yZWY9MSBtZV9yYW5nZT0xNiBjaHJvbWFfbWU9MSB0cmVsbGlzPTEgOHg4ZGN0PTAgY3FtPTAgZGVhZHpvbmU9MjEsMTEgZmFzdF9wc2tpcD0xIGNocm9tYV9xcF9vZmZzZXQ9LTIgdGhyZWFkcz02IGxvb2thaGVhZF90aHJlYWRzPTEgc2xpY2VkX3RocmVhZHM9MCBucj0wIGRlY2ltYXRlPTEgaW50ZXJsYWNlZD0wIGJsdXJheV9jb21wYXQ9MCBjb25zdHJhaW5lZF9pbnRyYT0wIGJmcmFtZXM9MCB3ZWlnaHRwPTAga2V5aW50PTI1MCBrZXlpbnRfbWluPTI1IHNjZW5lY3V0PTQwIGludHJhX3JlZnJlc2g9MCByY19sb29rYWhlYWQ9NDAgcmM9Y3JmIG1idHJlZT0xIGNyZj0yMy4wIHFjb21wPTAuNjAgcXBtaW49MCBxcG1heD02OSBxcHN0ZXA9NCB2YnZfbWF4cmF0ZT03NjggdmJ2X2J1ZnNpemU9MzAwMCBjcmZfbWF4PTAuMCBuYWxfaHJkPW5vbmUgZmlsbGVyPTAgaXBfcmF0aW89MS40MCBhcT0xOjEuMDAAgAAAAFZliIQL8mKAAKvMnJycnJycnJycnXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXiEASZACGQAjgCEASZACGQAjgAAAAAdBmjgX4GSAIQBJkAIZACOAAAAAB0GaVAX4GSAhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZpgL8DJIQBJkAIZACOAIQBJkAIZACOAAAAABkGagC/AySEASZACGQAjgAAAAAZBmqAvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZrAL8DJIQBJkAIZACOAAAAABkGa4C/AySEASZACGQAjgCEASZACGQAjgAAAAAZBmwAvwMkhAEmQAhkAI4AAAAAGQZsgL8DJIQBJkAIZACOAIQBJkAIZACOAAAAABkGbQC/AySEASZACGQAjgCEASZACGQAjgAAAAAZBm2AvwMkhAEmQAhkAI4AAAAAGQZuAL8DJIQBJkAIZACOAIQBJkAIZACOAAAAABkGboC/AySEASZACGQAjgAAAAAZBm8AvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZvgL8DJIQBJkAIZACOAAAAABkGaAC/AySEASZACGQAjgCEASZACGQAjgAAAAAZBmiAvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZpAL8DJIQBJkAIZACOAAAAABkGaYC/AySEASZACGQAjgCEASZACGQAjgAAAAAZBmoAvwMkhAEmQAhkAI4AAAAAGQZqgL8DJIQBJkAIZACOAIQBJkAIZACOAAAAABkGawC/AySEASZACGQAjgAAAAAZBmuAvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZsAL8DJIQBJkAIZACOAAAAABkGbIC/AySEASZACGQAjgCEASZACGQAjgAAAAAZBm0AvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZtgL8DJIQBJkAIZACOAAAAABkGbgCvAySEASZACGQAjgCEASZACGQAjgAAAAAZBm6AnwMkhAEmQAhkAI4AhAEmQAhkAI4AhAEmQAhkAI4AhAEmQAhkAI4AAAAhubW9vdgAAAGxtdmhkAAAAAAAAAAAAAAAAAAAD6AAABDcAAQAAAQAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAzB0cmFrAAAAXHRraGQAAAADAAAAAAAAAAAAAAABAAAAAAAAA+kAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAALAAAACQAAAAAAAkZWR0cwAAABxlbHN0AAAAAAAAAAEAAAPpAAAAAAABAAAAAAKobWRpYQAAACBtZGhkAAAAAAAAAAAAAAAAAAB1MAAAdU5VxAAAAAAALWhkbHIAAAAAAAAAAHZpZGUAAAAAAAAAAAAAAABWaWRlb0hhbmRsZXIAAAACU21pbmYAAAAUdm1oZAAAAAEAAAAAAAAAAAAAACRkaW5mAAAAHGRyZWYAAAAAAAAAAQAAAAx1cmwgAAAAAQAAAhNzdGJsAAAAr3N0c2QAAAAAAAAAAQAAAJ9hdmMxAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAALAAkABIAAAASAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGP//AAAALWF2Y0MBQsAN/+EAFWdCwA3ZAsTsBEAAAPpAADqYA8UKkgEABWjLg8sgAAAAHHV1aWRraEDyXyRPxbo5pRvPAyPzAAAAAAAAABhzdHRzAAAAAAAAAAEAAAAeAAAD6QAAABRzdHNzAAAAAAAAAAEAAAABAAAAHHN0c2MAAAAAAAAAAQAAAAEAAAABAAAAAQAAAIxzdHN6AAAAAAAAAAAAAAAeAAADDwAAAAsAAAALAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAAiHN0Y28AAAAAAAAAHgAAAEYAAANnAAADewAAA5gAAAO0AAADxwAAA+MAAAP2AAAEEgAABCUAAARBAAAEXQAABHAAAASMAAAEnwAABLsAAATOAAAE6gAABQYAAAUZAAAFNQAABUgAAAVkAAAFdwAABZMAAAWmAAAFwgAABd4AAAXxAAAGDQAABGh0cmFrAAAAXHRraGQAAAADAAAAAAAAAAAAAAACAAAAAAAABDcAAAAAAAAAAAAAAAEBAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAkZWR0cwAAABxlbHN0AAAAAAAAAAEAAAQkAAADcAABAAAAAAPgbWRpYQAAACBtZGhkAAAAAAAAAAAAAAAAAAC7gAAAykBVxAAAAAAALWhkbHIAAAAAAAAAAHNvdW4AAAAAAAAAAAAAAABTb3VuZEhhbmRsZXIAAAADi21pbmYAAAAQc21oZAAAAAAAAAAAAAAAJGRpbmYAAAAcZHJlZgAAAAAAAAABAAAADHVybCAAAAABAAADT3N0YmwAAABnc3RzZAAAAAAAAAABAAAAV21wNGEAAAAAAAAAAQAAAAAAAAAAAAIAEAAAAAC7gAAAAAAAM2VzZHMAAAAAA4CAgCIAAgAEgICAFEAVBbjYAAu4AAAADcoFgICAAhGQBoCAgAECAAAAIHN0dHMAAAAAAAAAAgAAADIAAAQAAAAAAQAAAkAAAAFUc3RzYwAAAAAAAAAbAAAAAQAAAAEAAAABAAAAAgAAAAIAAAABAAAAAwAAAAEAAAABAAAABAAAAAIAAAABAAAABgAAAAEAAAABAAAABwAAAAIAAAABAAAACAAAAAEAAAABAAAACQAAAAIAAAABAAAACgAAAAEAAAABAAAACwAAAAIAAAABAAAADQAAAAEAAAABAAAADgAAAAIAAAABAAAADwAAAAEAAAABAAAAEAAAAAIAAAABAAAAEQAAAAEAAAABAAAAEgAAAAIAAAABAAAAFAAAAAEAAAABAAAAFQAAAAIAAAABAAAAFgAAAAEAAAABAAAAFwAAAAIAAAABAAAAGAAAAAEAAAABAAAAGQAAAAIAAAABAAAAGgAAAAEAAAABAAAAGwAAAAIAAAABAAAAHQAAAAEAAAABAAAAHgAAAAIAAAABAAAAHwAAAAQAAAABAAAA4HN0c3oAAAAAAAAAAAAAADMAAAAaAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAACMc3RjbwAAAAAAAAAfAAAALAAAA1UAAANyAAADhgAAA6IAAAO+AAAD0QAAA+0AAAQAAAAEHAAABC8AAARLAAAEZwAABHoAAASWAAAEqQAABMUAAATYAAAE9AAABRAAAAUjAAAFPwAABVIAAAVuAAAFgQAABZ0AAAWwAAAFzAAABegAAAX7AAAGFwAAAGJ1ZHRhAAAAWm1ldGEAAAAAAAAAIWhkbHIAAAAAAAAAAG1kaXJhcHBsAAAAAAAAAAAAAAAALWlsc3QAAAAlqXRvbwAAAB1kYXRhAAAAAQAAAABMYXZmNTUuMzMuMTAw"}}])}));\n\n//# sourceURL=webpack:///./extension/NoSleep.min.js?')},"./extension/jszip.min.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('/*!\n\nJSZip v3.7.1 - A JavaScript class for generating and reading zip files\n<http://stuartk.com/jszip>\n\n(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>\nDual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.\n\nJSZip uses the library pako released under the MIT license :\nhttps://github.com/nodeca/pako/blob/master/LICENSE\n*/\n\n!function(t){if(true)module.exports=t();else {}}(function(){return function s(a,o,h){function u(r,t){if(!o[r]){if(!a[r]){var e=undefined;if(!t&&__webpack_require__("./extension sync recursive"))return require(r,!0);if(l)return l(r,!0);var i=new Error("Cannot find module \'"+r+"\'");throw i.code="MODULE_NOT_FOUND",i}var n=o[r]={exports:{}};a[r][0].call(n.exports,function(t){var e=a[r][1][t];return u(e||t)},n,n.exports,s,a,o,h)}return o[r].exports}for(var l=undefined,t=0;t<h.length;t++)u(h[t]);return u}({1:[function(t,e,r){"use strict";var c=t("./utils"),d=t("./support"),p="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(t){for(var e,r,i,n,s,a,o,h=[],u=0,l=t.length,f=l,d="string"!==c.getTypeOf(t);u<t.length;)f=l-u,i=d?(e=t[u++],r=u<l?t[u++]:0,u<l?t[u++]:0):(e=t.charCodeAt(u++),r=u<l?t.charCodeAt(u++):0,u<l?t.charCodeAt(u++):0),n=e>>2,s=(3&e)<<4|r>>4,a=1<f?(15&r)<<2|i>>6:64,o=2<f?63&i:64,h.push(p.charAt(n)+p.charAt(s)+p.charAt(a)+p.charAt(o));return h.join("")},r.decode=function(t){var e,r,i,n,s,a,o=0,h=0,u="data:";if(t.substr(0,u.length)===u)throw new Error("Invalid base64 input, it looks like a data url.");var l,f=3*(t=t.replace(/[^A-Za-z0-9\\+\\/\\=]/g,"")).length/4;if(t.charAt(t.length-1)===p.charAt(64)&&f--,t.charAt(t.length-2)===p.charAt(64)&&f--,f%1!=0)throw new Error("Invalid base64 input, bad content length.");for(l=d.uint8array?new Uint8Array(0|f):new Array(0|f);o<t.length;)e=p.indexOf(t.charAt(o++))<<2|(n=p.indexOf(t.charAt(o++)))>>4,r=(15&n)<<4|(s=p.indexOf(t.charAt(o++)))>>2,i=(3&s)<<6|(a=p.indexOf(t.charAt(o++))),l[h++]=e,64!==s&&(l[h++]=r),64!==a&&(l[h++]=i);return l}},{"./support":30,"./utils":32}],2:[function(t,e,r){"use strict";var i=t("./external"),n=t("./stream/DataWorker"),s=t("./stream/Crc32Probe"),a=t("./stream/DataLengthProbe");function o(t,e,r,i,n){this.compressedSize=t,this.uncompressedSize=e,this.crc32=r,this.compression=i,this.compressedContent=n}o.prototype={getContentWorker:function(){var t=new n(i.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a("data_length")),e=this;return t.on("end",function(){if(this.streamInfo.data_length!==e.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")}),t},getCompressedWorker:function(){return new n(i.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},o.createWorkerFrom=function(t,e,r){return t.pipe(new s).pipe(new a("uncompressedSize")).pipe(e.compressWorker(r)).pipe(new a("compressedSize")).withStreamInfo("compression",e)},e.exports=o},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(t,e,r){"use strict";var i=t("./stream/GenericWorker");r.STORE={magic:"\\0\\0",compressWorker:function(t){return new i("STORE compression")},uncompressWorker:function(){return new i("STORE decompression")}},r.DEFLATE=t("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(t,e,r){"use strict";var i=t("./utils");var o=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();e.exports=function(t,e){return void 0!==t&&t.length?"string"!==i.getTypeOf(t)?function(t,e,r,i){var n=o,s=i+r;t^=-1;for(var a=i;a<s;a++)t=t>>>8^n[255&(t^e[a])];return-1^t}(0|e,t,t.length,0):function(t,e,r,i){var n=o,s=i+r;t^=-1;for(var a=i;a<s;a++)t=t>>>8^n[255&(t^e.charCodeAt(a))];return-1^t}(0|e,t,t.length,0):0}},{"./utils":32}],5:[function(t,e,r){"use strict";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(t,e,r){"use strict";var i=null;i="undefined"!=typeof Promise?Promise:t("lie"),e.exports={Promise:i}},{lie:37}],7:[function(t,e,r){"use strict";var i="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,n=t("pako"),s=t("./utils"),a=t("./stream/GenericWorker"),o=i?"uint8array":"array";function h(t,e){a.call(this,"FlateWorker/"+t),this._pako=null,this._pakoAction=t,this._pakoOptions=e,this.meta={}}r.magic="\\b\\0",s.inherits(h,a),h.prototype.processChunk=function(t){this.meta=t.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(o,t.data),!1)},h.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},h.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},h.prototype._createPako=function(){this._pako=new n[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var e=this;this._pako.onData=function(t){e.push({data:t,meta:e.meta})}},r.compressWorker=function(t){return new h("Deflate",t)},r.uncompressWorker=function(){return new h("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(t,e,r){"use strict";function A(t,e){var r,i="";for(r=0;r<e;r++)i+=String.fromCharCode(255&t),t>>>=8;return i}function i(t,e,r,i,n,s){var a,o,h=t.file,u=t.compression,l=s!==O.utf8encode,f=I.transformTo("string",s(h.name)),d=I.transformTo("string",O.utf8encode(h.name)),c=h.comment,p=I.transformTo("string",s(c)),m=I.transformTo("string",O.utf8encode(c)),_=d.length!==h.name.length,g=m.length!==c.length,b="",v="",y="",w=h.dir,k=h.date,x={crc32:0,compressedSize:0,uncompressedSize:0};e&&!r||(x.crc32=t.crc32,x.compressedSize=t.compressedSize,x.uncompressedSize=t.uncompressedSize);var S=0;e&&(S|=8),l||!_&&!g||(S|=2048);var z=0,C=0;w&&(z|=16),"UNIX"===n?(C=798,z|=function(t,e){var r=t;return t||(r=e?16893:33204),(65535&r)<<16}(h.unixPermissions,w)):(C=20,z|=function(t){return 63&(t||0)}(h.dosPermissions)),a=k.getUTCHours(),a<<=6,a|=k.getUTCMinutes(),a<<=5,a|=k.getUTCSeconds()/2,o=k.getUTCFullYear()-1980,o<<=4,o|=k.getUTCMonth()+1,o<<=5,o|=k.getUTCDate(),_&&(v=A(1,1)+A(B(f),4)+d,b+="up"+A(v.length,2)+v),g&&(y=A(1,1)+A(B(p),4)+m,b+="uc"+A(y.length,2)+y);var E="";return E+="\\n\\0",E+=A(S,2),E+=u.magic,E+=A(a,2),E+=A(o,2),E+=A(x.crc32,4),E+=A(x.compressedSize,4),E+=A(x.uncompressedSize,4),E+=A(f.length,2),E+=A(b.length,2),{fileRecord:R.LOCAL_FILE_HEADER+E+f+b,dirRecord:R.CENTRAL_FILE_HEADER+A(C,2)+E+A(p.length,2)+"\\0\\0\\0\\0"+A(z,4)+A(i,4)+f+b+p}}var I=t("../utils"),n=t("../stream/GenericWorker"),O=t("../utf8"),B=t("../crc32"),R=t("../signature");function s(t,e,r,i){n.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=e,this.zipPlatform=r,this.encodeFileName=i,this.streamFiles=t,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}I.inherits(s,n),s.prototype.push=function(t){var e=t.meta.percent||0,r=this.entriesCount,i=this._sources.length;this.accumulate?this.contentBuffer.push(t):(this.bytesWritten+=t.data.length,n.prototype.push.call(this,{data:t.data,meta:{currentFile:this.currentFile,percent:r?(e+100*(r-i-1))/r:100}}))},s.prototype.openedSource=function(t){this.currentSourceOffset=this.bytesWritten,this.currentFile=t.file.name;var e=this.streamFiles&&!t.file.dir;if(e){var r=i(t,e,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},s.prototype.closedSource=function(t){this.accumulate=!1;var e=this.streamFiles&&!t.file.dir,r=i(t,e,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),e)this.push({data:function(t){return R.DATA_DESCRIPTOR+A(t.crc32,4)+A(t.compressedSize,4)+A(t.uncompressedSize,4)}(t),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},s.prototype.flush=function(){for(var t=this.bytesWritten,e=0;e<this.dirRecords.length;e++)this.push({data:this.dirRecords[e],meta:{percent:100}});var r=this.bytesWritten-t,i=function(t,e,r,i,n){var s=I.transformTo("string",n(i));return R.CENTRAL_DIRECTORY_END+"\\0\\0\\0\\0"+A(t,2)+A(t,2)+A(e,4)+A(r,4)+A(s.length,2)+s}(this.dirRecords.length,r,t,this.zipComment,this.encodeFileName);this.push({data:i,meta:{percent:100}})},s.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},s.prototype.registerPrevious=function(t){this._sources.push(t);var e=this;return t.on("data",function(t){e.processChunk(t)}),t.on("end",function(){e.closedSource(e.previous.streamInfo),e._sources.length?e.prepareNextSource():e.end()}),t.on("error",function(t){e.error(t)}),this},s.prototype.resume=function(){return!!n.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},s.prototype.error=function(t){var e=this._sources;if(!n.prototype.error.call(this,t))return!1;for(var r=0;r<e.length;r++)try{e[r].error(t)}catch(t){}return!0},s.prototype.lock=function(){n.prototype.lock.call(this);for(var t=this._sources,e=0;e<t.length;e++)t[e].lock()},e.exports=s},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(t,e,r){"use strict";var u=t("../compressions"),i=t("./ZipFileWorker");r.generateWorker=function(t,a,e){var o=new i(a.streamFiles,e,a.platform,a.encodeFileName),h=0;try{t.forEach(function(t,e){h++;var r=function(t,e){var r=t||e,i=u[r];if(!i)throw new Error(r+" is not a valid compression method !");return i}(e.options.compression,a.compression),i=e.options.compressionOptions||a.compressionOptions||{},n=e.dir,s=e.date;e._compressWorker(r,i).withStreamInfo("file",{name:t,dir:n,date:s,comment:e.comment||"",unixPermissions:e.unixPermissions,dosPermissions:e.dosPermissions}).pipe(o)}),o.entriesCount=h}catch(t){o.error(t)}return o}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(t,e,r){"use strict";function i(){if(!(this instanceof i))return new i;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var t=new i;for(var e in this)"function"!=typeof this[e]&&(t[e]=this[e]);return t}}(i.prototype=t("./object")).loadAsync=t("./load"),i.support=t("./support"),i.defaults=t("./defaults"),i.version="3.7.1",i.loadAsync=function(t,e){return(new i).loadAsync(t,e)},i.external=t("./external"),e.exports=i},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(t,e,r){"use strict";var i=t("./utils"),n=t("./external"),o=t("./utf8"),h=t("./zipEntries"),s=t("./stream/Crc32Probe"),u=t("./nodejsUtils");function l(i){return new n.Promise(function(t,e){var r=i.decompressed.getContentWorker().pipe(new s);r.on("error",function(t){e(t)}).on("end",function(){r.streamInfo.crc32!==i.decompressed.crc32?e(new Error("Corrupted zip : CRC32 mismatch")):t()}).resume()})}e.exports=function(t,s){var a=this;return s=i.extend(s||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:o.utf8decode}),u.isNode&&u.isStream(t)?n.Promise.reject(new Error("JSZip can\'t accept a stream when loading a zip file.")):i.prepareContent("the loaded zip file",t,!0,s.optimizedBinaryString,s.base64).then(function(t){var e=new h(s);return e.load(t),e}).then(function(t){var e=[n.Promise.resolve(t)],r=t.files;if(s.checkCRC32)for(var i=0;i<r.length;i++)e.push(l(r[i]));return n.Promise.all(e)}).then(function(t){for(var e=t.shift(),r=e.files,i=0;i<r.length;i++){var n=r[i];a.file(n.fileNameStr,n.decompressed,{binary:!0,optimizedBinaryString:!0,date:n.date,dir:n.dir,comment:n.fileCommentStr.length?n.fileCommentStr:null,unixPermissions:n.unixPermissions,dosPermissions:n.dosPermissions,createFolders:s.createFolders})}return e.zipComment.length&&(a.comment=e.zipComment),a})}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(t,e,r){"use strict";var i=t("../utils"),n=t("../stream/GenericWorker");function s(t,e){n.call(this,"Nodejs stream input adapter for "+t),this._upstreamEnded=!1,this._bindStream(e)}i.inherits(s,n),s.prototype._bindStream=function(t){var e=this;(this._stream=t).pause(),t.on("data",function(t){e.push({data:t,meta:{percent:0}})}).on("error",function(t){e.isPaused?this.generatedError=t:e.error(t)}).on("end",function(){e.isPaused?e._upstreamEnded=!0:e.end()})},s.prototype.pause=function(){return!!n.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return!!n.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},e.exports=s},{"../stream/GenericWorker":28,"../utils":32}],13:[function(t,e,r){"use strict";var n=t("readable-stream").Readable;function i(t,e,r){n.call(this,e),this._helper=t;var i=this;t.on("data",function(t,e){i.push(t)||i._helper.pause(),r&&r(e)}).on("error",function(t){i.emit("error",t)}).on("end",function(){i.push(null)})}t("../utils").inherits(i,n),i.prototype._read=function(){this._helper.resume()},e.exports=i},{"../utils":32,"readable-stream":16}],14:[function(t,e,r){"use strict";e.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(t,e){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(t,e);if("number"==typeof t)throw new Error(\'The "data" argument must not be a number\');return new Buffer(t,e)},allocBuffer:function(t){if(Buffer.alloc)return Buffer.alloc(t);var e=new Buffer(t);return e.fill(0),e},isBuffer:function(t){return Buffer.isBuffer(t)},isStream:function(t){return t&&"function"==typeof t.on&&"function"==typeof t.pause&&"function"==typeof t.resume}}},{}],15:[function(t,e,r){"use strict";function s(t,e,r){var i,n=u.getTypeOf(e),s=u.extend(r||{},f);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),"string"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(t=g(t)),s.createFolders&&(i=_(t))&&b.call(this,i,!0);var a="string"===n&&!1===s.binary&&!1===s.base64;r&&void 0!==r.binary||(s.binary=!a),(e instanceof d&&0===e.uncompressedSize||s.dir||!e||0===e.length)&&(s.base64=!1,s.binary=!0,e="",s.compression="STORE",n="string");var o=null;o=e instanceof d||e instanceof l?e:p.isNode&&p.isStream(e)?new m(t,e):u.prepareContent(t,e,s.binary,s.optimizedBinaryString,s.base64);var h=new c(t,o,s);this.files[t]=h}var n=t("./utf8"),u=t("./utils"),l=t("./stream/GenericWorker"),a=t("./stream/StreamHelper"),f=t("./defaults"),d=t("./compressedObject"),c=t("./zipObject"),o=t("./generate"),p=t("./nodejsUtils"),m=t("./nodejs/NodejsStreamInputAdapter"),_=function(t){"/"===t.slice(-1)&&(t=t.substring(0,t.length-1));var e=t.lastIndexOf("/");return 0<e?t.substring(0,e):""},g=function(t){return"/"!==t.slice(-1)&&(t+="/"),t},b=function(t,e){return e=void 0!==e?e:f.createFolders,t=g(t),this.files[t]||s.call(this,t,null,{dir:!0,createFolders:e}),this.files[t]};function h(t){return"[object RegExp]"===Object.prototype.toString.call(t)}var i={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(t){var e,r,i;for(e in this.files)i=this.files[e],(r=e.slice(this.root.length,e.length))&&e.slice(0,this.root.length)===this.root&&t(r,i)},filter:function(r){var i=[];return this.forEach(function(t,e){r(t,e)&&i.push(e)}),i},file:function(t,e,r){if(1!==arguments.length)return t=this.root+t,s.call(this,t,e,r),this;if(h(t)){var i=t;return this.filter(function(t,e){return!e.dir&&i.test(t)})}var n=this.files[this.root+t];return n&&!n.dir?n:null},folder:function(r){if(!r)return this;if(h(r))return this.filter(function(t,e){return e.dir&&r.test(t)});var t=this.root+r,e=b.call(this,t),i=this.clone();return i.root=e.name,i},remove:function(r){r=this.root+r;var t=this.files[r];if(t||("/"!==r.slice(-1)&&(r+="/"),t=this.files[r]),t&&!t.dir)delete this.files[r];else for(var e=this.filter(function(t,e){return e.name.slice(0,r.length)===r}),i=0;i<e.length;i++)delete this.files[e[i].name];return this},generate:function(t){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(t){var e,r={};try{if((r=u.extend(t||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:n.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),"binarystring"===r.type&&(r.type="string"),!r.type)throw new Error("No output type specified.");u.checkSupport(r.type),"darwin"!==r.platform&&"freebsd"!==r.platform&&"linux"!==r.platform&&"sunos"!==r.platform||(r.platform="UNIX"),"win32"===r.platform&&(r.platform="DOS");var i=r.comment||this.comment||"";e=o.generateWorker(this,r,i)}catch(t){(e=new l("error")).error(t)}return new a(e,r.type||"string",r.mimeType)},generateAsync:function(t,e){return this.generateInternalStream(t).accumulate(e)},generateNodeStream:function(t,e){return(t=t||{}).type||(t.type="nodebuffer"),this.generateInternalStream(t).toNodejsStream(e)}};e.exports=i},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(t,e,r){e.exports=t("stream")},{stream:void 0}],17:[function(t,e,r){"use strict";var i=t("./DataReader");function n(t){i.call(this,t);for(var e=0;e<this.data.length;e++)t[e]=255&t[e]}t("../utils").inherits(n,i),n.prototype.byteAt=function(t){return this.data[this.zero+t]},n.prototype.lastIndexOfSignature=function(t){for(var e=t.charCodeAt(0),r=t.charCodeAt(1),i=t.charCodeAt(2),n=t.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===e&&this.data[s+1]===r&&this.data[s+2]===i&&this.data[s+3]===n)return s-this.zero;return-1},n.prototype.readAndCheckSignature=function(t){var e=t.charCodeAt(0),r=t.charCodeAt(1),i=t.charCodeAt(2),n=t.charCodeAt(3),s=this.readData(4);return e===s[0]&&r===s[1]&&i===s[2]&&n===s[3]},n.prototype.readData=function(t){if(this.checkOffset(t),0===t)return[];var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n},{"../utils":32,"./DataReader":18}],18:[function(t,e,r){"use strict";var i=t("../utils");function n(t){this.data=t,this.length=t.length,this.index=0,this.zero=0}n.prototype={checkOffset:function(t){this.checkIndex(this.index+t)},checkIndex:function(t){if(this.length<this.zero+t||t<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+t+"). Corrupted zip ?")},setIndex:function(t){this.checkIndex(t),this.index=t},skip:function(t){this.setIndex(this.index+t)},byteAt:function(t){},readInt:function(t){var e,r=0;for(this.checkOffset(t),e=this.index+t-1;e>=this.index;e--)r=(r<<8)+this.byteAt(e);return this.index+=t,r},readString:function(t){return i.transformTo("string",this.readData(t))},readData:function(t){},lastIndexOfSignature:function(t){},readAndCheckSignature:function(t){},readDate:function(){var t=this.readInt(4);return new Date(Date.UTC(1980+(t>>25&127),(t>>21&15)-1,t>>16&31,t>>11&31,t>>5&63,(31&t)<<1))}},e.exports=n},{"../utils":32}],19:[function(t,e,r){"use strict";var i=t("./Uint8ArrayReader");function n(t){i.call(this,t)}t("../utils").inherits(n,i),n.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(t,e,r){"use strict";var i=t("./DataReader");function n(t){i.call(this,t)}t("../utils").inherits(n,i),n.prototype.byteAt=function(t){return this.data.charCodeAt(this.zero+t)},n.prototype.lastIndexOfSignature=function(t){return this.data.lastIndexOf(t)-this.zero},n.prototype.readAndCheckSignature=function(t){return t===this.readData(4)},n.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n},{"../utils":32,"./DataReader":18}],21:[function(t,e,r){"use strict";var i=t("./ArrayReader");function n(t){i.call(this,t)}t("../utils").inherits(n,i),n.prototype.readData=function(t){if(this.checkOffset(t),0===t)return new Uint8Array(0);var e=this.data.subarray(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n},{"../utils":32,"./ArrayReader":17}],22:[function(t,e,r){"use strict";var i=t("../utils"),n=t("../support"),s=t("./ArrayReader"),a=t("./StringReader"),o=t("./NodeBufferReader"),h=t("./Uint8ArrayReader");e.exports=function(t){var e=i.getTypeOf(t);return i.checkSupport(e),"string"!==e||n.uint8array?"nodebuffer"===e?new o(t):n.uint8array?new h(i.transformTo("uint8array",t)):new s(i.transformTo("array",t)):new a(t)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(t,e,r){"use strict";r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\\b"},{}],24:[function(t,e,r){"use strict";var i=t("./GenericWorker"),n=t("../utils");function s(t){i.call(this,"ConvertWorker to "+t),this.destType=t}n.inherits(s,i),s.prototype.processChunk=function(t){this.push({data:n.transformTo(this.destType,t.data),meta:t.meta})},e.exports=s},{"../utils":32,"./GenericWorker":28}],25:[function(t,e,r){"use strict";var i=t("./GenericWorker"),n=t("../crc32");function s(){i.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}t("../utils").inherits(s,i),s.prototype.processChunk=function(t){this.streamInfo.crc32=n(t.data,this.streamInfo.crc32||0),this.push(t)},e.exports=s},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(t,e,r){"use strict";var i=t("../utils"),n=t("./GenericWorker");function s(t){n.call(this,"DataLengthProbe for "+t),this.propName=t,this.withStreamInfo(t,0)}i.inherits(s,n),s.prototype.processChunk=function(t){if(t){var e=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=e+t.data.length}n.prototype.processChunk.call(this,t)},e.exports=s},{"../utils":32,"./GenericWorker":28}],27:[function(t,e,r){"use strict";var i=t("../utils"),n=t("./GenericWorker");function s(t){n.call(this,"DataWorker");var e=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,t.then(function(t){e.dataIsReady=!0,e.data=t,e.max=t&&t.length||0,e.type=i.getTypeOf(t),e.isPaused||e._tickAndRepeat()},function(t){e.error(t)})}i.inherits(s,n),s.prototype.cleanUp=function(){n.prototype.cleanUp.call(this),this.data=null},s.prototype.resume=function(){return!!n.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,i.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(i.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var t=null,e=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":t=this.data.substring(this.index,e);break;case"uint8array":t=this.data.subarray(this.index,e);break;case"array":case"nodebuffer":t=this.data.slice(this.index,e)}return this.index=e,this.push({data:t,meta:{percent:this.max?this.index/this.max*100:0}})},e.exports=s},{"../utils":32,"./GenericWorker":28}],28:[function(t,e,r){"use strict";function i(t){this.name=t||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}i.prototype={push:function(t){this.emit("data",t)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(t){this.emit("error",t)}return!0},error:function(t){return!this.isFinished&&(this.isPaused?this.generatedError=t:(this.isFinished=!0,this.emit("error",t),this.previous&&this.previous.error(t),this.cleanUp()),!0)},on:function(t,e){return this._listeners[t].push(e),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(t,e){if(this._listeners[t])for(var r=0;r<this._listeners[t].length;r++)this._listeners[t][r].call(this,e)},pipe:function(t){return t.registerPrevious(this)},registerPrevious:function(t){if(this.isLocked)throw new Error("The stream \'"+this+"\' has already been used.");this.streamInfo=t.streamInfo,this.mergeStreamInfo(),this.previous=t;var e=this;return t.on("data",function(t){e.processChunk(t)}),t.on("end",function(){e.end()}),t.on("error",function(t){e.error(t)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var t=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),t=!0),this.previous&&this.previous.resume(),!t},flush:function(){},processChunk:function(t){this.push(t)},withStreamInfo:function(t,e){return this.extraStreamInfo[t]=e,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var t in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(t)&&(this.streamInfo[t]=this.extraStreamInfo[t])},lock:function(){if(this.isLocked)throw new Error("The stream \'"+this+"\' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var t="Worker "+this.name;return this.previous?this.previous+" -> "+t:t}},e.exports=i},{}],29:[function(t,e,r){"use strict";var h=t("../utils"),n=t("./ConvertWorker"),s=t("./GenericWorker"),u=t("../base64"),i=t("../support"),a=t("../external"),o=null;if(i.nodestream)try{o=t("../nodejs/NodejsStreamOutputAdapter")}catch(t){}function l(t,o){return new a.Promise(function(e,r){var i=[],n=t._internalType,s=t._outputType,a=t._mimeType;t.on("data",function(t,e){i.push(t),o&&o(e)}).on("error",function(t){i=[],r(t)}).on("end",function(){try{var t=function(t,e,r){switch(t){case"blob":return h.newBlob(h.transformTo("arraybuffer",e),r);case"base64":return u.encode(e);default:return h.transformTo(t,e)}}(s,function(t,e){var r,i=0,n=null,s=0;for(r=0;r<e.length;r++)s+=e[r].length;switch(t){case"string":return e.join("");case"array":return Array.prototype.concat.apply([],e);case"uint8array":for(n=new Uint8Array(s),r=0;r<e.length;r++)n.set(e[r],i),i+=e[r].length;return n;case"nodebuffer":return Buffer.concat(e);default:throw new Error("concat : unsupported type \'"+t+"\'")}}(n,i),a);e(t)}catch(t){r(t)}i=[]}).resume()})}function f(t,e,r){var i=e;switch(e){case"blob":case"arraybuffer":i="uint8array";break;case"base64":i="string"}try{this._internalType=i,this._outputType=e,this._mimeType=r,h.checkSupport(i),this._worker=t.pipe(new n(i)),t.lock()}catch(t){this._worker=new s("error"),this._worker.error(t)}}f.prototype={accumulate:function(t){return l(this,t)},on:function(t,e){var r=this;return"data"===t?this._worker.on(t,function(t){e.call(r,t.data,t.meta)}):this._worker.on(t,function(){h.delay(e,arguments,r)}),this},resume:function(){return h.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(t){if(h.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new o(this,{objectMode:"nodebuffer"!==this._outputType},t)}},e.exports=f},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(t,e,r){"use strict";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,r.nodebuffer="undefined"!=typeof Buffer,r.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)r.blob=!1;else{var i=new ArrayBuffer(0);try{r.blob=0===new Blob([i],{type:"application/zip"}).size}catch(t){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);n.append(i),r.blob=0===n.getBlob("application/zip").size}catch(t){r.blob=!1}}}try{r.nodestream=!!t("readable-stream").Readable}catch(t){r.nodestream=!1}},{"readable-stream":16}],31:[function(t,e,s){"use strict";for(var o=t("./utils"),h=t("./support"),r=t("./nodejsUtils"),i=t("./stream/GenericWorker"),u=new Array(256),n=0;n<256;n++)u[n]=252<=n?6:248<=n?5:240<=n?4:224<=n?3:192<=n?2:1;u[254]=u[254]=1;function a(){i.call(this,"utf-8 decode"),this.leftOver=null}function l(){i.call(this,"utf-8 encode")}s.utf8encode=function(t){return h.nodebuffer?r.newBufferFrom(t,"utf-8"):function(t){var e,r,i,n,s,a=t.length,o=0;for(n=0;n<a;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),o+=r<128?1:r<2048?2:r<65536?3:4;for(e=h.uint8array?new Uint8Array(o):new Array(o),n=s=0;s<o;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),r<128?e[s++]=r:(r<2048?e[s++]=192|r>>>6:(r<65536?e[s++]=224|r>>>12:(e[s++]=240|r>>>18,e[s++]=128|r>>>12&63),e[s++]=128|r>>>6&63),e[s++]=128|63&r);return e}(t)},s.utf8decode=function(t){return h.nodebuffer?o.transformTo("nodebuffer",t).toString("utf-8"):function(t){var e,r,i,n,s=t.length,a=new Array(2*s);for(e=r=0;e<s;)if((i=t[e++])<128)a[r++]=i;else if(4<(n=u[i]))a[r++]=65533,e+=n-1;else{for(i&=2===n?31:3===n?15:7;1<n&&e<s;)i=i<<6|63&t[e++],n--;1<n?a[r++]=65533:i<65536?a[r++]=i:(i-=65536,a[r++]=55296|i>>10&1023,a[r++]=56320|1023&i)}return a.length!==r&&(a.subarray?a=a.subarray(0,r):a.length=r),o.applyFromCharCode(a)}(t=o.transformTo(h.uint8array?"uint8array":"array",t))},o.inherits(a,i),a.prototype.processChunk=function(t){var e=o.transformTo(h.uint8array?"uint8array":"array",t.data);if(this.leftOver&&this.leftOver.length){if(h.uint8array){var r=e;(e=new Uint8Array(r.length+this.leftOver.length)).set(this.leftOver,0),e.set(r,this.leftOver.length)}else e=this.leftOver.concat(e);this.leftOver=null}var i=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;0<=r&&128==(192&t[r]);)r--;return r<0?e:0===r?e:r+u[t[r]]>e?r:e}(e),n=e;i!==e.length&&(h.uint8array?(n=e.subarray(0,i),this.leftOver=e.subarray(i,e.length)):(n=e.slice(0,i),this.leftOver=e.slice(i,e.length))),this.push({data:s.utf8decode(n),meta:t.meta})},a.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:s.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},s.Utf8DecodeWorker=a,o.inherits(l,i),l.prototype.processChunk=function(t){this.push({data:s.utf8encode(t.data),meta:t.meta})},s.Utf8EncodeWorker=l},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(t,e,a){"use strict";var o=t("./support"),h=t("./base64"),r=t("./nodejsUtils"),i=t("set-immediate-shim"),u=t("./external");function n(t){return t}function l(t,e){for(var r=0;r<t.length;++r)e[r]=255&t.charCodeAt(r);return e}a.newBlob=function(e,r){a.checkSupport("blob");try{return new Blob([e],{type:r})}catch(t){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return i.append(e),i.getBlob(r)}catch(t){throw new Error("Bug : can\'t construct the Blob.")}}};var s={stringifyByChunk:function(t,e,r){var i=[],n=0,s=t.length;if(s<=r)return String.fromCharCode.apply(null,t);for(;n<s;)"array"===e||"nodebuffer"===e?i.push(String.fromCharCode.apply(null,t.slice(n,Math.min(n+r,s)))):i.push(String.fromCharCode.apply(null,t.subarray(n,Math.min(n+r,s)))),n+=r;return i.join("")},stringifyByChar:function(t){for(var e="",r=0;r<t.length;r++)e+=String.fromCharCode(t[r]);return e},applyCanBeUsed:{uint8array:function(){try{return o.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(t){return!1}}(),nodebuffer:function(){try{return o.nodebuffer&&1===String.fromCharCode.apply(null,r.allocBuffer(1)).length}catch(t){return!1}}()}};function f(t){var e=65536,r=a.getTypeOf(t),i=!0;if("uint8array"===r?i=s.applyCanBeUsed.uint8array:"nodebuffer"===r&&(i=s.applyCanBeUsed.nodebuffer),i)for(;1<e;)try{return s.stringifyByChunk(t,r,e)}catch(t){e=Math.floor(e/2)}return s.stringifyByChar(t)}function d(t,e){for(var r=0;r<t.length;r++)e[r]=t[r];return e}a.applyFromCharCode=f;var c={};c.string={string:n,array:function(t){return l(t,new Array(t.length))},arraybuffer:function(t){return c.string.uint8array(t).buffer},uint8array:function(t){return l(t,new Uint8Array(t.length))},nodebuffer:function(t){return l(t,r.allocBuffer(t.length))}},c.array={string:f,array:n,arraybuffer:function(t){return new Uint8Array(t).buffer},uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return r.newBufferFrom(t)}},c.arraybuffer={string:function(t){return f(new Uint8Array(t))},array:function(t){return d(new Uint8Array(t),new Array(t.byteLength))},arraybuffer:n,uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return r.newBufferFrom(new Uint8Array(t))}},c.uint8array={string:f,array:function(t){return d(t,new Array(t.length))},arraybuffer:function(t){return t.buffer},uint8array:n,nodebuffer:function(t){return r.newBufferFrom(t)}},c.nodebuffer={string:f,array:function(t){return d(t,new Array(t.length))},arraybuffer:function(t){return c.nodebuffer.uint8array(t).buffer},uint8array:function(t){return d(t,new Uint8Array(t.length))},nodebuffer:n},a.transformTo=function(t,e){if(e=e||"",!t)return e;a.checkSupport(t);var r=a.getTypeOf(e);return c[r][t](e)},a.getTypeOf=function(t){return"string"==typeof t?"string":"[object Array]"===Object.prototype.toString.call(t)?"array":o.nodebuffer&&r.isBuffer(t)?"nodebuffer":o.uint8array&&t instanceof Uint8Array?"uint8array":o.arraybuffer&&t instanceof ArrayBuffer?"arraybuffer":void 0},a.checkSupport=function(t){if(!o[t.toLowerCase()])throw new Error(t+" is not supported by this platform")},a.MAX_VALUE_16BITS=65535,a.MAX_VALUE_32BITS=-1,a.pretty=function(t){var e,r,i="";for(r=0;r<(t||"").length;r++)i+="\\\\x"+((e=t.charCodeAt(r))<16?"0":"")+e.toString(16).toUpperCase();return i},a.delay=function(t,e,r){i(function(){t.apply(r||null,e||[])})},a.inherits=function(t,e){function r(){}r.prototype=e.prototype,t.prototype=new r},a.extend=function(){var t,e,r={};for(t=0;t<arguments.length;t++)for(e in arguments[t])arguments[t].hasOwnProperty(e)&&void 0===r[e]&&(r[e]=arguments[t][e]);return r},a.prepareContent=function(r,t,i,n,s){return u.Promise.resolve(t).then(function(i){return o.blob&&(i instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(i)))&&"undefined"!=typeof FileReader?new u.Promise(function(e,r){var t=new FileReader;t.onload=function(t){e(t.target.result)},t.onerror=function(t){r(t.target.error)},t.readAsArrayBuffer(i)}):i}).then(function(t){var e=a.getTypeOf(t);return e?("arraybuffer"===e?t=a.transformTo("uint8array",t):"string"===e&&(s?t=h.decode(t):i&&!0!==n&&(t=function(t){return l(t,o.uint8array?new Uint8Array(t.length):new Array(t.length))}(t))),t):u.Promise.reject(new Error("Can\'t read the data of \'"+r+"\'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))})}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,"set-immediate-shim":54}],33:[function(t,e,r){"use strict";var i=t("./reader/readerFor"),n=t("./utils"),s=t("./signature"),a=t("./zipEntry"),o=(t("./utf8"),t("./support"));function h(t){this.files=[],this.loadOptions=t}h.prototype={checkSignature:function(t){if(!this.reader.readAndCheckSignature(t)){this.reader.index-=4;var e=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+n.pretty(e)+", expected "+n.pretty(t)+")")}},isSignature:function(t,e){var r=this.reader.index;this.reader.setIndex(t);var i=this.reader.readString(4)===e;return this.reader.setIndex(r),i},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var t=this.reader.readData(this.zipCommentLength),e=o.uint8array?"uint8array":"array",r=n.transformTo(e,t);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var t,e,r,i=this.zip64EndOfCentralSize-44;0<i;)t=this.reader.readInt(2),e=this.reader.readInt(4),r=this.reader.readData(e),this.zip64ExtensibleData[t]={id:t,length:e,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var t,e;for(t=0;t<this.files.length;t++)e=this.files[t],this.reader.setIndex(e.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),e.readLocalPart(this.reader),e.handleUTF8(),e.processAttributes()},readCentralDir:function(){var t;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(t=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(t);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var t=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(t<0)throw!this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error("Can\'t find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html"):new Error("Corrupted zip: can\'t find end of central directory");this.reader.setIndex(t);var e=t;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===n.MAX_VALUE_16BITS||this.diskWithCentralDirStart===n.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===n.MAX_VALUE_16BITS||this.centralDirRecords===n.MAX_VALUE_16BITS||this.centralDirSize===n.MAX_VALUE_32BITS||this.centralDirOffset===n.MAX_VALUE_32BITS){if(this.zip64=!0,(t=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can\'t find the ZIP64 end of central directory locator");if(this.reader.setIndex(t),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can\'t find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var i=e-r;if(0<i)this.isSignature(e,s.CENTRAL_FILE_HEADER)||(this.reader.zero=i);else if(i<0)throw new Error("Corrupted zip: missing "+Math.abs(i)+" bytes.")},prepareReader:function(t){this.reader=i(t)},load:function(t){this.prepareReader(t),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},e.exports=h},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utf8":31,"./utils":32,"./zipEntry":34}],34:[function(t,e,r){"use strict";var i=t("./reader/readerFor"),s=t("./utils"),n=t("./compressedObject"),a=t("./crc32"),o=t("./utf8"),h=t("./compressions"),u=t("./support");function l(t,e){this.options=t,this.loadOptions=e}l.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(t){var e,r;if(t.skip(22),this.fileNameLength=t.readInt(2),r=t.readInt(2),this.fileName=t.readData(this.fileNameLength),t.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn\'t get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(e=function(t){for(var e in h)if(h.hasOwnProperty(e)&&h[e].magic===t)return h[e];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+s.pretty(this.compressionMethod)+" unknown (inner file : "+s.transformTo("string",this.fileName)+")");this.decompressed=new n(this.compressedSize,this.uncompressedSize,this.crc32,e,t.readData(this.compressedSize))},readCentralPart:function(t){this.versionMadeBy=t.readInt(2),t.skip(2),this.bitFlag=t.readInt(2),this.compressionMethod=t.readString(2),this.date=t.readDate(),this.crc32=t.readInt(4),this.compressedSize=t.readInt(4),this.uncompressedSize=t.readInt(4);var e=t.readInt(2);if(this.extraFieldsLength=t.readInt(2),this.fileCommentLength=t.readInt(2),this.diskNumberStart=t.readInt(2),this.internalFileAttributes=t.readInt(2),this.externalFileAttributes=t.readInt(4),this.localHeaderOffset=t.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");t.skip(e),this.readExtraFields(t),this.parseZIP64ExtraField(t),this.fileComment=t.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var t=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==t&&(this.dosPermissions=63&this.externalFileAttributes),3==t&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(t){if(this.extraFields[1]){var e=i(this.extraFields[1].value);this.uncompressedSize===s.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===s.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===s.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===s.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(t){var e,r,i,n=t.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});t.index+4<n;)e=t.readInt(2),r=t.readInt(2),i=t.readData(r),this.extraFields[e]={id:e,length:r,value:i};t.setIndex(n)},handleUTF8:function(){var t=u.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=o.utf8decode(this.fileName),this.fileCommentStr=o.utf8decode(this.fileComment);else{var e=this.findExtraFieldUnicodePath();if(null!==e)this.fileNameStr=e;else{var r=s.transformTo(t,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var i=this.findExtraFieldUnicodeComment();if(null!==i)this.fileCommentStr=i;else{var n=s.transformTo(t,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(n)}}},findExtraFieldUnicodePath:function(){var t=this.extraFields[28789];if(t){var e=i(t.value);return 1!==e.readInt(1)?null:a(this.fileName)!==e.readInt(4)?null:o.utf8decode(e.readData(t.length-5))}return null},findExtraFieldUnicodeComment:function(){var t=this.extraFields[25461];if(t){var e=i(t.value);return 1!==e.readInt(1)?null:a(this.fileComment)!==e.readInt(4)?null:o.utf8decode(e.readData(t.length-5))}return null}},e.exports=l},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(t,e,r){"use strict";function i(t,e,r){this.name=t,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=e,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}}var s=t("./stream/StreamHelper"),n=t("./stream/DataWorker"),a=t("./utf8"),o=t("./compressedObject"),h=t("./stream/GenericWorker");i.prototype={internalStream:function(t){var e=null,r="string";try{if(!t)throw new Error("No output type specified.");var i="string"===(r=t.toLowerCase())||"text"===r;"binarystring"!==r&&"text"!==r||(r="string"),e=this._decompressWorker();var n=!this._dataBinary;n&&!i&&(e=e.pipe(new a.Utf8EncodeWorker)),!n&&i&&(e=e.pipe(new a.Utf8DecodeWorker))}catch(t){(e=new h("error")).error(t)}return new s(e,r,"")},async:function(t,e){return this.internalStream(t).accumulate(e)},nodeStream:function(t,e){return this.internalStream(t||"nodebuffer").toNodejsStream(e)},_compressWorker:function(t,e){if(this._data instanceof o&&this._data.compression.magic===t.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new a.Utf8EncodeWorker)),o.createWorkerFrom(r,t,e)},_decompressWorker:function(){return this._data instanceof o?this._data.getContentWorker():this._data instanceof h?this._data:new n(this._data)}};for(var u=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],l=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},f=0;f<u.length;f++)i.prototype[u[f]]=l;e.exports=i},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(t,l,e){(function(e){"use strict";var r,i,t=e.MutationObserver||e.WebKitMutationObserver;if(t){var n=0,s=new t(u),a=e.document.createTextNode("");s.observe(a,{characterData:!0}),r=function(){a.data=n=++n%2}}else if(e.setImmediate||void 0===e.MessageChannel)r="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){u(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(u,0)};else{var o=new e.MessageChannel;o.port1.onmessage=u,r=function(){o.port2.postMessage(0)}}var h=[];function u(){var t,e;i=!0;for(var r=h.length;r;){for(e=h,h=[],t=-1;++t<r;)e[t]();r=h.length}i=!1}l.exports=function(t){1!==h.push(t)||i||r()}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],37:[function(t,e,r){"use strict";var n=t("immediate");function u(){}var l={},s=["REJECTED"],a=["FULFILLED"],i=["PENDING"];function o(t){if("function"!=typeof t)throw new TypeError("resolver must be a function");this.state=i,this.queue=[],this.outcome=void 0,t!==u&&c(this,t)}function h(t,e,r){this.promise=t,"function"==typeof e&&(this.onFulfilled=e,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function f(e,r,i){n(function(){var t;try{t=r(i)}catch(t){return l.reject(e,t)}t===e?l.reject(e,new TypeError("Cannot resolve promise with itself")):l.resolve(e,t)})}function d(t){var e=t&&t.then;if(t&&("object"==typeof t||"function"==typeof t)&&"function"==typeof e)return function(){e.apply(t,arguments)}}function c(e,t){var r=!1;function i(t){r||(r=!0,l.reject(e,t))}function n(t){r||(r=!0,l.resolve(e,t))}var s=p(function(){t(n,i)});"error"===s.status&&i(s.value)}function p(t,e){var r={};try{r.value=t(e),r.status="success"}catch(t){r.status="error",r.value=t}return r}(e.exports=o).prototype.finally=function(e){if("function"!=typeof e)return this;var r=this.constructor;return this.then(function(t){return r.resolve(e()).then(function(){return t})},function(t){return r.resolve(e()).then(function(){throw t})})},o.prototype.catch=function(t){return this.then(null,t)},o.prototype.then=function(t,e){if("function"!=typeof t&&this.state===a||"function"!=typeof e&&this.state===s)return this;var r=new this.constructor(u);this.state!==i?f(r,this.state===a?t:e,this.outcome):this.queue.push(new h(r,t,e));return r},h.prototype.callFulfilled=function(t){l.resolve(this.promise,t)},h.prototype.otherCallFulfilled=function(t){f(this.promise,this.onFulfilled,t)},h.prototype.callRejected=function(t){l.reject(this.promise,t)},h.prototype.otherCallRejected=function(t){f(this.promise,this.onRejected,t)},l.resolve=function(t,e){var r=p(d,e);if("error"===r.status)return l.reject(t,r.value);var i=r.value;if(i)c(t,i);else{t.state=a,t.outcome=e;for(var n=-1,s=t.queue.length;++n<s;)t.queue[n].callFulfilled(e)}return t},l.reject=function(t,e){t.state=s,t.outcome=e;for(var r=-1,i=t.queue.length;++r<i;)t.queue[r].callRejected(e);return t},o.resolve=function(t){if(t instanceof this)return t;return l.resolve(new this(u),t)},o.reject=function(t){var e=new this(u);return l.reject(e,t)},o.all=function(t){var r=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var i=t.length,n=!1;if(!i)return this.resolve([]);var s=new Array(i),a=0,e=-1,o=new this(u);for(;++e<i;)h(t[e],e);return o;function h(t,e){r.resolve(t).then(function(t){s[e]=t,++a!==i||n||(n=!0,l.resolve(o,s))},function(t){n||(n=!0,l.reject(o,t))})}},o.race=function(t){var e=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var r=t.length,i=!1;if(!r)return this.resolve([]);var n=-1,s=new this(u);for(;++n<r;)a=t[n],e.resolve(a).then(function(t){i||(i=!0,l.resolve(s,t))},function(t){i||(i=!0,l.reject(s,t))});var a;return s}},{immediate:36}],38:[function(t,e,r){"use strict";var i={};(0,t("./lib/utils/common").assign)(i,t("./lib/deflate"),t("./lib/inflate"),t("./lib/zlib/constants")),e.exports=i},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(t,e,r){"use strict";var a=t("./zlib/deflate"),o=t("./utils/common"),h=t("./utils/strings"),n=t("./zlib/messages"),s=t("./zlib/zstream"),u=Object.prototype.toString,l=0,f=-1,d=0,c=8;function p(t){if(!(this instanceof p))return new p(t);this.options=o.assign({level:f,method:c,chunkSize:16384,windowBits:15,memLevel:8,strategy:d,to:""},t||{});var e=this.options;e.raw&&0<e.windowBits?e.windowBits=-e.windowBits:e.gzip&&0<e.windowBits&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=a.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(r!==l)throw new Error(n[r]);if(e.header&&a.deflateSetHeader(this.strm,e.header),e.dictionary){var i;if(i="string"==typeof e.dictionary?h.string2buf(e.dictionary):"[object ArrayBuffer]"===u.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,(r=a.deflateSetDictionary(this.strm,i))!==l)throw new Error(n[r]);this._dict_set=!0}}function i(t,e){var r=new p(e);if(r.push(t,!0),r.err)throw r.msg||n[r.err];return r.result}p.prototype.push=function(t,e){var r,i,n=this.strm,s=this.options.chunkSize;if(this.ended)return!1;i=e===~~e?e:!0===e?4:0,"string"==typeof t?n.input=h.string2buf(t):"[object ArrayBuffer]"===u.call(t)?n.input=new Uint8Array(t):n.input=t,n.next_in=0,n.avail_in=n.input.length;do{if(0===n.avail_out&&(n.output=new o.Buf8(s),n.next_out=0,n.avail_out=s),1!==(r=a.deflate(n,i))&&r!==l)return this.onEnd(r),!(this.ended=!0);0!==n.avail_out&&(0!==n.avail_in||4!==i&&2!==i)||("string"===this.options.to?this.onData(h.buf2binstring(o.shrinkBuf(n.output,n.next_out))):this.onData(o.shrinkBuf(n.output,n.next_out)))}while((0<n.avail_in||0===n.avail_out)&&1!==r);return 4===i?(r=a.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===l):2!==i||(this.onEnd(l),!(n.avail_out=0))},p.prototype.onData=function(t){this.chunks.push(t)},p.prototype.onEnd=function(t){t===l&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},r.Deflate=p,r.deflate=i,r.deflateRaw=function(t,e){return(e=e||{}).raw=!0,i(t,e)},r.gzip=function(t,e){return(e=e||{}).gzip=!0,i(t,e)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(t,e,r){"use strict";var d=t("./zlib/inflate"),c=t("./utils/common"),p=t("./utils/strings"),m=t("./zlib/constants"),i=t("./zlib/messages"),n=t("./zlib/zstream"),s=t("./zlib/gzheader"),_=Object.prototype.toString;function a(t){if(!(this instanceof a))return new a(t);this.options=c.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&0<=e.windowBits&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(0<=e.windowBits&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),15<e.windowBits&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new n,this.strm.avail_out=0;var r=d.inflateInit2(this.strm,e.windowBits);if(r!==m.Z_OK)throw new Error(i[r]);this.header=new s,d.inflateGetHeader(this.strm,this.header)}function o(t,e){var r=new a(e);if(r.push(t,!0),r.err)throw r.msg||i[r.err];return r.result}a.prototype.push=function(t,e){var r,i,n,s,a,o,h=this.strm,u=this.options.chunkSize,l=this.options.dictionary,f=!1;if(this.ended)return!1;i=e===~~e?e:!0===e?m.Z_FINISH:m.Z_NO_FLUSH,"string"==typeof t?h.input=p.binstring2buf(t):"[object ArrayBuffer]"===_.call(t)?h.input=new Uint8Array(t):h.input=t,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new c.Buf8(u),h.next_out=0,h.avail_out=u),(r=d.inflate(h,m.Z_NO_FLUSH))===m.Z_NEED_DICT&&l&&(o="string"==typeof l?p.string2buf(l):"[object ArrayBuffer]"===_.call(l)?new Uint8Array(l):l,r=d.inflateSetDictionary(this.strm,o)),r===m.Z_BUF_ERROR&&!0===f&&(r=m.Z_OK,f=!1),r!==m.Z_STREAM_END&&r!==m.Z_OK)return this.onEnd(r),!(this.ended=!0);h.next_out&&(0!==h.avail_out&&r!==m.Z_STREAM_END&&(0!==h.avail_in||i!==m.Z_FINISH&&i!==m.Z_SYNC_FLUSH)||("string"===this.options.to?(n=p.utf8border(h.output,h.next_out),s=h.next_out-n,a=p.buf2string(h.output,n),h.next_out=s,h.avail_out=u-s,s&&c.arraySet(h.output,h.output,n,s,0),this.onData(a)):this.onData(c.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(f=!0)}while((0<h.avail_in||0===h.avail_out)&&r!==m.Z_STREAM_END);return r===m.Z_STREAM_END&&(i=m.Z_FINISH),i===m.Z_FINISH?(r=d.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===m.Z_OK):i!==m.Z_SYNC_FLUSH||(this.onEnd(m.Z_OK),!(h.avail_out=0))},a.prototype.onData=function(t){this.chunks.push(t)},a.prototype.onEnd=function(t){t===m.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=c.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},r.Inflate=a,r.inflate=o,r.inflateRaw=function(t,e){return(e=e||{}).raw=!0,o(t,e)},r.ungzip=o},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(t,e,r){"use strict";var i="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;r.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var r=e.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var i in r)r.hasOwnProperty(i)&&(t[i]=r[i])}}return t},r.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var n={arraySet:function(t,e,r,i,n){if(e.subarray&&t.subarray)t.set(e.subarray(r,r+i),n);else for(var s=0;s<i;s++)t[n+s]=e[r+s]},flattenChunks:function(t){var e,r,i,n,s,a;for(e=i=0,r=t.length;e<r;e++)i+=t[e].length;for(a=new Uint8Array(i),e=n=0,r=t.length;e<r;e++)s=t[e],a.set(s,n),n+=s.length;return a}},s={arraySet:function(t,e,r,i,n){for(var s=0;s<i;s++)t[n+s]=e[r+s]},flattenChunks:function(t){return[].concat.apply([],t)}};r.setTyped=function(t){t?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,n)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,s))},r.setTyped(i)},{}],42:[function(t,e,r){"use strict";var h=t("./common"),n=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(t){n=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){s=!1}for(var u=new h.Buf8(256),i=0;i<256;i++)u[i]=252<=i?6:248<=i?5:240<=i?4:224<=i?3:192<=i?2:1;function l(t,e){if(e<65537&&(t.subarray&&s||!t.subarray&&n))return String.fromCharCode.apply(null,h.shrinkBuf(t,e));for(var r="",i=0;i<e;i++)r+=String.fromCharCode(t[i]);return r}u[254]=u[254]=1,r.string2buf=function(t){var e,r,i,n,s,a=t.length,o=0;for(n=0;n<a;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),o+=r<128?1:r<2048?2:r<65536?3:4;for(e=new h.Buf8(o),n=s=0;s<o;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),r<128?e[s++]=r:(r<2048?e[s++]=192|r>>>6:(r<65536?e[s++]=224|r>>>12:(e[s++]=240|r>>>18,e[s++]=128|r>>>12&63),e[s++]=128|r>>>6&63),e[s++]=128|63&r);return e},r.buf2binstring=function(t){return l(t,t.length)},r.binstring2buf=function(t){for(var e=new h.Buf8(t.length),r=0,i=e.length;r<i;r++)e[r]=t.charCodeAt(r);return e},r.buf2string=function(t,e){var r,i,n,s,a=e||t.length,o=new Array(2*a);for(r=i=0;r<a;)if((n=t[r++])<128)o[i++]=n;else if(4<(s=u[n]))o[i++]=65533,r+=s-1;else{for(n&=2===s?31:3===s?15:7;1<s&&r<a;)n=n<<6|63&t[r++],s--;1<s?o[i++]=65533:n<65536?o[i++]=n:(n-=65536,o[i++]=55296|n>>10&1023,o[i++]=56320|1023&n)}return l(o,i)},r.utf8border=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;0<=r&&128==(192&t[r]);)r--;return r<0?e:0===r?e:r+u[t[r]]>e?r:e}},{"./common":41}],43:[function(t,e,r){"use strict";e.exports=function(t,e,r,i){for(var n=65535&t|0,s=t>>>16&65535|0,a=0;0!==r;){for(r-=a=2e3<r?2e3:r;s=s+(n=n+e[i++]|0)|0,--a;);n%=65521,s%=65521}return n|s<<16|0}},{}],44:[function(t,e,r){"use strict";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(t,e,r){"use strict";var o=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();e.exports=function(t,e,r,i){var n=o,s=i+r;t^=-1;for(var a=i;a<s;a++)t=t>>>8^n[255&(t^e[a])];return-1^t}},{}],46:[function(t,e,r){"use strict";var h,d=t("../utils/common"),u=t("./trees"),c=t("./adler32"),p=t("./crc32"),i=t("./messages"),l=0,f=4,m=0,_=-2,g=-1,b=4,n=2,v=8,y=9,s=286,a=30,o=19,w=2*s+1,k=15,x=3,S=258,z=S+x+1,C=42,E=113,A=1,I=2,O=3,B=4;function R(t,e){return t.msg=i[e],e}function T(t){return(t<<1)-(4<t?9:0)}function D(t){for(var e=t.length;0<=--e;)t[e]=0}function F(t){var e=t.state,r=e.pending;r>t.avail_out&&(r=t.avail_out),0!==r&&(d.arraySet(t.output,e.pending_buf,e.pending_out,r,t.next_out),t.next_out+=r,e.pending_out+=r,t.total_out+=r,t.avail_out-=r,e.pending-=r,0===e.pending&&(e.pending_out=0))}function N(t,e){u._tr_flush_block(t,0<=t.block_start?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,F(t.strm)}function U(t,e){t.pending_buf[t.pending++]=e}function P(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function L(t,e){var r,i,n=t.max_chain_length,s=t.strstart,a=t.prev_length,o=t.nice_match,h=t.strstart>t.w_size-z?t.strstart-(t.w_size-z):0,u=t.window,l=t.w_mask,f=t.prev,d=t.strstart+S,c=u[s+a-1],p=u[s+a];t.prev_length>=t.good_match&&(n>>=2),o>t.lookahead&&(o=t.lookahead);do{if(u[(r=e)+a]===p&&u[r+a-1]===c&&u[r]===u[s]&&u[++r]===u[s+1]){s+=2,r++;do{}while(u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&s<d);if(i=S-(d-s),s=d-S,a<i){if(t.match_start=e,o<=(a=i))break;c=u[s+a-1],p=u[s+a]}}}while((e=f[e&l])>h&&0!=--n);return a<=t.lookahead?a:t.lookahead}function j(t){var e,r,i,n,s,a,o,h,u,l,f=t.w_size;do{if(n=t.window_size-t.lookahead-t.strstart,t.strstart>=f+(f-z)){for(d.arraySet(t.window,t.window,f,f,0),t.match_start-=f,t.strstart-=f,t.block_start-=f,e=r=t.hash_size;i=t.head[--e],t.head[e]=f<=i?i-f:0,--r;);for(e=r=f;i=t.prev[--e],t.prev[e]=f<=i?i-f:0,--r;);n+=f}if(0===t.strm.avail_in)break;if(a=t.strm,o=t.window,h=t.strstart+t.lookahead,u=n,l=void 0,l=a.avail_in,u<l&&(l=u),r=0===l?0:(a.avail_in-=l,d.arraySet(o,a.input,a.next_in,l,h),1===a.state.wrap?a.adler=c(a.adler,o,l,h):2===a.state.wrap&&(a.adler=p(a.adler,o,l,h)),a.next_in+=l,a.total_in+=l,l),t.lookahead+=r,t.lookahead+t.insert>=x)for(s=t.strstart-t.insert,t.ins_h=t.window[s],t.ins_h=(t.ins_h<<t.hash_shift^t.window[s+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[s+x-1])&t.hash_mask,t.prev[s&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=s,s++,t.insert--,!(t.lookahead+t.insert<x)););}while(t.lookahead<z&&0!==t.strm.avail_in)}function Z(t,e){for(var r,i;;){if(t.lookahead<z){if(j(t),t.lookahead<z&&e===l)return A;if(0===t.lookahead)break}if(r=0,t.lookahead>=x&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==r&&t.strstart-r<=t.w_size-z&&(t.match_length=L(t,r)),t.match_length>=x)if(i=u._tr_tally(t,t.strstart-t.match_start,t.match_length-x),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=x){for(t.match_length--;t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart,0!=--t.match_length;);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else i=u._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=t.strstart<x-1?t.strstart:x-1,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}function W(t,e){for(var r,i,n;;){if(t.lookahead<z){if(j(t),t.lookahead<z&&e===l)return A;if(0===t.lookahead)break}if(r=0,t.lookahead>=x&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=x-1,0!==r&&t.prev_length<t.max_lazy_match&&t.strstart-r<=t.w_size-z&&(t.match_length=L(t,r),t.match_length<=5&&(1===t.strategy||t.match_length===x&&4096<t.strstart-t.match_start)&&(t.match_length=x-1)),t.prev_length>=x&&t.match_length<=t.prev_length){for(n=t.strstart+t.lookahead-x,i=u._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-x),t.lookahead-=t.prev_length-1,t.prev_length-=2;++t.strstart<=n&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!=--t.prev_length;);if(t.match_available=0,t.match_length=x-1,t.strstart++,i&&(N(t,!1),0===t.strm.avail_out))return A}else if(t.match_available){if((i=u._tr_tally(t,0,t.window[t.strstart-1]))&&N(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return A}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=u._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<x-1?t.strstart:x-1,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}function M(t,e,r,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=r,this.max_chain=i,this.func=n}function H(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=v,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new d.Buf16(2*w),this.dyn_dtree=new d.Buf16(2*(2*a+1)),this.bl_tree=new d.Buf16(2*(2*o+1)),D(this.dyn_ltree),D(this.dyn_dtree),D(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new d.Buf16(k+1),this.heap=new d.Buf16(2*s+1),D(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new d.Buf16(2*s+1),D(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function G(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=n,(e=t.state).pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?C:E,t.adler=2===e.wrap?0:1,e.last_flush=l,u._tr_init(e),m):R(t,_)}function K(t){var e=G(t);return e===m&&function(t){t.window_size=2*t.w_size,D(t.head),t.max_lazy_match=h[t.level].max_lazy,t.good_match=h[t.level].good_length,t.nice_match=h[t.level].nice_length,t.max_chain_length=h[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=x-1,t.match_available=0,t.ins_h=0}(t.state),e}function Y(t,e,r,i,n,s){if(!t)return _;var a=1;if(e===g&&(e=6),i<0?(a=0,i=-i):15<i&&(a=2,i-=16),n<1||y<n||r!==v||i<8||15<i||e<0||9<e||s<0||b<s)return R(t,_);8===i&&(i=9);var o=new H;return(t.state=o).strm=t,o.wrap=a,o.gzhead=null,o.w_bits=i,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=n+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+x-1)/x),o.window=new d.Buf8(2*o.w_size),o.head=new d.Buf16(o.hash_size),o.prev=new d.Buf16(o.w_size),o.lit_bufsize=1<<n+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new d.Buf8(o.pending_buf_size),o.d_buf=1*o.lit_bufsize,o.l_buf=3*o.lit_bufsize,o.level=e,o.strategy=s,o.method=r,K(t)}h=[new M(0,0,0,0,function(t,e){var r=65535;for(r>t.pending_buf_size-5&&(r=t.pending_buf_size-5);;){if(t.lookahead<=1){if(j(t),0===t.lookahead&&e===l)return A;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var i=t.block_start+r;if((0===t.strstart||t.strstart>=i)&&(t.lookahead=t.strstart-i,t.strstart=i,N(t,!1),0===t.strm.avail_out))return A;if(t.strstart-t.block_start>=t.w_size-z&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=0,e===f?(N(t,!0),0===t.strm.avail_out?O:B):(t.strstart>t.block_start&&(N(t,!1),t.strm.avail_out),A)}),new M(4,4,8,4,Z),new M(4,5,16,8,Z),new M(4,6,32,32,Z),new M(4,4,16,16,W),new M(8,16,32,32,W),new M(8,16,128,128,W),new M(8,32,128,256,W),new M(32,128,258,1024,W),new M(32,258,258,4096,W)],r.deflateInit=function(t,e){return Y(t,e,v,15,8,0)},r.deflateInit2=Y,r.deflateReset=K,r.deflateResetKeep=G,r.deflateSetHeader=function(t,e){return t&&t.state?2!==t.state.wrap?_:(t.state.gzhead=e,m):_},r.deflate=function(t,e){var r,i,n,s;if(!t||!t.state||5<e||e<0)return t?R(t,_):_;if(i=t.state,!t.output||!t.input&&0!==t.avail_in||666===i.status&&e!==f)return R(t,0===t.avail_out?-5:_);if(i.strm=t,r=i.last_flush,i.last_flush=e,i.status===C)if(2===i.wrap)t.adler=0,U(i,31),U(i,139),U(i,8),i.gzhead?(U(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),U(i,255&i.gzhead.time),U(i,i.gzhead.time>>8&255),U(i,i.gzhead.time>>16&255),U(i,i.gzhead.time>>24&255),U(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),U(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(U(i,255&i.gzhead.extra.length),U(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(t.adler=p(t.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(U(i,0),U(i,0),U(i,0),U(i,0),U(i,0),U(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),U(i,3),i.status=E);else{var a=v+(i.w_bits-8<<4)<<8;a|=(2<=i.strategy||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(a|=32),a+=31-a%31,i.status=E,P(i,a),0!==i.strstart&&(P(i,t.adler>>>16),P(i,65535&t.adler)),t.adler=1}if(69===i.status)if(i.gzhead.extra){for(n=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),F(t),n=i.pending,i.pending!==i.pending_buf_size));)U(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73)}else i.status=73;if(73===i.status)if(i.gzhead.name){n=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),F(t),n=i.pending,i.pending===i.pending_buf_size)){s=1;break}s=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,U(i,s)}while(0!==s);i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),0===s&&(i.gzindex=0,i.status=91)}else i.status=91;if(91===i.status)if(i.gzhead.comment){n=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),F(t),n=i.pending,i.pending===i.pending_buf_size)){s=1;break}s=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,U(i,s)}while(0!==s);i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),0===s&&(i.status=103)}else i.status=103;if(103===i.status&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&F(t),i.pending+2<=i.pending_buf_size&&(U(i,255&t.adler),U(i,t.adler>>8&255),t.adler=0,i.status=E)):i.status=E),0!==i.pending){if(F(t),0===t.avail_out)return i.last_flush=-1,m}else if(0===t.avail_in&&T(e)<=T(r)&&e!==f)return R(t,-5);if(666===i.status&&0!==t.avail_in)return R(t,-5);if(0!==t.avail_in||0!==i.lookahead||e!==l&&666!==i.status){var o=2===i.strategy?function(t,e){for(var r;;){if(0===t.lookahead&&(j(t),0===t.lookahead)){if(e===l)return A;break}if(t.match_length=0,r=u._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,r&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=0,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}(i,e):3===i.strategy?function(t,e){for(var r,i,n,s,a=t.window;;){if(t.lookahead<=S){if(j(t),t.lookahead<=S&&e===l)return A;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=x&&0<t.strstart&&(i=a[n=t.strstart-1])===a[++n]&&i===a[++n]&&i===a[++n]){s=t.strstart+S;do{}while(i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&n<s);t.match_length=S-(s-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=x?(r=u._tr_tally(t,1,t.match_length-x),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(r=u._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),r&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=0,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}(i,e):h[i.level].func(i,e);if(o!==O&&o!==B||(i.status=666),o===A||o===O)return 0===t.avail_out&&(i.last_flush=-1),m;if(o===I&&(1===e?u._tr_align(i):5!==e&&(u._tr_stored_block(i,0,0,!1),3===e&&(D(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),F(t),0===t.avail_out))return i.last_flush=-1,m}return e!==f?m:i.wrap<=0?1:(2===i.wrap?(U(i,255&t.adler),U(i,t.adler>>8&255),U(i,t.adler>>16&255),U(i,t.adler>>24&255),U(i,255&t.total_in),U(i,t.total_in>>8&255),U(i,t.total_in>>16&255),U(i,t.total_in>>24&255)):(P(i,t.adler>>>16),P(i,65535&t.adler)),F(t),0<i.wrap&&(i.wrap=-i.wrap),0!==i.pending?m:1)},r.deflateEnd=function(t){var e;return t&&t.state?(e=t.state.status)!==C&&69!==e&&73!==e&&91!==e&&103!==e&&e!==E&&666!==e?R(t,_):(t.state=null,e===E?R(t,-3):m):_},r.deflateSetDictionary=function(t,e){var r,i,n,s,a,o,h,u,l=e.length;if(!t||!t.state)return _;if(2===(s=(r=t.state).wrap)||1===s&&r.status!==C||r.lookahead)return _;for(1===s&&(t.adler=c(t.adler,e,l,0)),r.wrap=0,l>=r.w_size&&(0===s&&(D(r.head),r.strstart=0,r.block_start=0,r.insert=0),u=new d.Buf8(r.w_size),d.arraySet(u,e,l-r.w_size,r.w_size,0),e=u,l=r.w_size),a=t.avail_in,o=t.next_in,h=t.input,t.avail_in=l,t.next_in=0,t.input=e,j(r);r.lookahead>=x;){for(i=r.strstart,n=r.lookahead-(x-1);r.ins_h=(r.ins_h<<r.hash_shift^r.window[i+x-1])&r.hash_mask,r.prev[i&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=i,i++,--n;);r.strstart=i,r.lookahead=x-1,j(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=x-1,r.match_available=0,t.next_in=o,t.input=h,t.avail_in=a,r.wrap=s,m},r.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(t,e,r){"use strict";e.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(t,e,r){"use strict";e.exports=function(t,e){var r,i,n,s,a,o,h,u,l,f,d,c,p,m,_,g,b,v,y,w,k,x,S,z,C;r=t.state,i=t.next_in,z=t.input,n=i+(t.avail_in-5),s=t.next_out,C=t.output,a=s-(e-t.avail_out),o=s+(t.avail_out-257),h=r.dmax,u=r.wsize,l=r.whave,f=r.wnext,d=r.window,c=r.hold,p=r.bits,m=r.lencode,_=r.distcode,g=(1<<r.lenbits)-1,b=(1<<r.distbits)-1;t:do{p<15&&(c+=z[i++]<<p,p+=8,c+=z[i++]<<p,p+=8),v=m[c&g];e:for(;;){if(c>>>=y=v>>>24,p-=y,0===(y=v>>>16&255))C[s++]=65535&v;else{if(!(16&y)){if(0==(64&y)){v=m[(65535&v)+(c&(1<<y)-1)];continue e}if(32&y){r.mode=12;break t}t.msg="invalid literal/length code",r.mode=30;break t}w=65535&v,(y&=15)&&(p<y&&(c+=z[i++]<<p,p+=8),w+=c&(1<<y)-1,c>>>=y,p-=y),p<15&&(c+=z[i++]<<p,p+=8,c+=z[i++]<<p,p+=8),v=_[c&b];r:for(;;){if(c>>>=y=v>>>24,p-=y,!(16&(y=v>>>16&255))){if(0==(64&y)){v=_[(65535&v)+(c&(1<<y)-1)];continue r}t.msg="invalid distance code",r.mode=30;break t}if(k=65535&v,p<(y&=15)&&(c+=z[i++]<<p,(p+=8)<y&&(c+=z[i++]<<p,p+=8)),h<(k+=c&(1<<y)-1)){t.msg="invalid distance too far back",r.mode=30;break t}if(c>>>=y,p-=y,(y=s-a)<k){if(l<(y=k-y)&&r.sane){t.msg="invalid distance too far back",r.mode=30;break t}if(S=d,(x=0)===f){if(x+=u-y,y<w){for(w-=y;C[s++]=d[x++],--y;);x=s-k,S=C}}else if(f<y){if(x+=u+f-y,(y-=f)<w){for(w-=y;C[s++]=d[x++],--y;);if(x=0,f<w){for(w-=y=f;C[s++]=d[x++],--y;);x=s-k,S=C}}}else if(x+=f-y,y<w){for(w-=y;C[s++]=d[x++],--y;);x=s-k,S=C}for(;2<w;)C[s++]=S[x++],C[s++]=S[x++],C[s++]=S[x++],w-=3;w&&(C[s++]=S[x++],1<w&&(C[s++]=S[x++]))}else{for(x=s-k;C[s++]=C[x++],C[s++]=C[x++],C[s++]=C[x++],2<(w-=3););w&&(C[s++]=C[x++],1<w&&(C[s++]=C[x++]))}break}}break}}while(i<n&&s<o);i-=w=p>>3,c&=(1<<(p-=w<<3))-1,t.next_in=i,t.next_out=s,t.avail_in=i<n?n-i+5:5-(i-n),t.avail_out=s<o?o-s+257:257-(s-o),r.hold=c,r.bits=p}},{}],49:[function(t,e,r){"use strict";var I=t("../utils/common"),O=t("./adler32"),B=t("./crc32"),R=t("./inffast"),T=t("./inftrees"),D=1,F=2,N=0,U=-2,P=1,i=852,n=592;function L(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function s(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new I.Buf16(320),this.work=new I.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function a(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=P,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new I.Buf32(i),e.distcode=e.distdyn=new I.Buf32(n),e.sane=1,e.back=-1,N):U}function o(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,a(t)):U}function h(t,e){var r,i;return t&&t.state?(i=t.state,e<0?(r=0,e=-e):(r=1+(e>>4),e<48&&(e&=15)),e&&(e<8||15<e)?U:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=r,i.wbits=e,o(t))):U}function u(t,e){var r,i;return t?(i=new s,(t.state=i).window=null,(r=h(t,e))!==N&&(t.state=null),r):U}var l,f,d=!0;function j(t){if(d){var e;for(l=new I.Buf32(512),f=new I.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(T(D,t.lens,0,288,l,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;T(F,t.lens,0,32,f,0,t.work,{bits:5}),d=!1}t.lencode=l,t.lenbits=9,t.distcode=f,t.distbits=5}function Z(t,e,r,i){var n,s=t.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new I.Buf8(s.wsize)),i>=s.wsize?(I.arraySet(s.window,e,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):(i<(n=s.wsize-s.wnext)&&(n=i),I.arraySet(s.window,e,r-i,n,s.wnext),(i-=n)?(I.arraySet(s.window,e,r-i,i,0),s.wnext=i,s.whave=s.wsize):(s.wnext+=n,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=n))),0}r.inflateReset=o,r.inflateReset2=h,r.inflateResetKeep=a,r.inflateInit=function(t){return u(t,15)},r.inflateInit2=u,r.inflate=function(t,e){var r,i,n,s,a,o,h,u,l,f,d,c,p,m,_,g,b,v,y,w,k,x,S,z,C=0,E=new I.Buf8(4),A=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return U;12===(r=t.state).mode&&(r.mode=13),a=t.next_out,n=t.output,h=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,u=r.hold,l=r.bits,f=o,d=h,x=N;t:for(;;)switch(r.mode){case P:if(0===r.wrap){r.mode=13;break}for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(2&r.wrap&&35615===u){E[r.check=0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0),l=u=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&u)<<8)+(u>>8))%31){t.msg="incorrect header check",r.mode=30;break}if(8!=(15&u)){t.msg="unknown compression method",r.mode=30;break}if(l-=4,k=8+(15&(u>>>=4)),0===r.wbits)r.wbits=k;else if(k>r.wbits){t.msg="invalid window size",r.mode=30;break}r.dmax=1<<k,t.adler=r.check=1,r.mode=512&u?10:12,l=u=0;break;case 2:for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(r.flags=u,8!=(255&r.flags)){t.msg="unknown compression method",r.mode=30;break}if(57344&r.flags){t.msg="unknown header flags set",r.mode=30;break}r.head&&(r.head.text=u>>8&1),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=3;case 3:for(;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.head&&(r.head.time=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,E[2]=u>>>16&255,E[3]=u>>>24&255,r.check=B(r.check,E,4,0)),l=u=0,r.mode=4;case 4:for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.head&&(r.head.xflags=255&u,r.head.os=u>>8),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=5;case 5:if(1024&r.flags){for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.length=u,r.head&&(r.head.extra_len=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(o<(c=r.length)&&(c=o),c&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),I.arraySet(r.head.extra,i,s,c,k)),512&r.flags&&(r.check=B(r.check,i,c,s)),o-=c,s+=c,r.length-=c),r.length))break t;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===o)break t;for(c=0;k=i[s+c++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k)),k&&c<o;);if(512&r.flags&&(r.check=B(r.check,i,c,s)),o-=c,s+=c,k)break t}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===o)break t;for(c=0;k=i[s+c++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k)),k&&c<o;);if(512&r.flags&&(r.check=B(r.check,i,c,s)),o-=c,s+=c,k)break t}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(u!==(65535&r.check)){t.msg="header crc mismatch",r.mode=30;break}l=u=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),t.adler=r.check=0,r.mode=12;break;case 10:for(;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}t.adler=r.check=L(u),l=u=0,r.mode=11;case 11:if(0===r.havedict)return t.next_out=a,t.avail_out=h,t.next_in=s,t.avail_in=o,r.hold=u,r.bits=l,2;t.adler=r.check=1,r.mode=12;case 12:if(5===e||6===e)break t;case 13:if(r.last){u>>>=7&l,l-=7&l,r.mode=27;break}for(;l<3;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}switch(r.last=1&u,l-=1,3&(u>>>=1)){case 0:r.mode=14;break;case 1:if(j(r),r.mode=20,6!==e)break;u>>>=2,l-=2;break t;case 2:r.mode=17;break;case 3:t.msg="invalid block type",r.mode=30}u>>>=2,l-=2;break;case 14:for(u>>>=7&l,l-=7&l;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if((65535&u)!=(u>>>16^65535)){t.msg="invalid stored block lengths",r.mode=30;break}if(r.length=65535&u,l=u=0,r.mode=15,6===e)break t;case 15:r.mode=16;case 16:if(c=r.length){if(o<c&&(c=o),h<c&&(c=h),0===c)break t;I.arraySet(n,i,s,c,a),o-=c,s+=c,h-=c,a+=c,r.length-=c;break}r.mode=12;break;case 17:for(;l<14;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(r.nlen=257+(31&u),u>>>=5,l-=5,r.ndist=1+(31&u),u>>>=5,l-=5,r.ncode=4+(15&u),u>>>=4,l-=4,286<r.nlen||30<r.ndist){t.msg="too many length or distance symbols",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;l<3;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.lens[A[r.have++]]=7&u,u>>>=3,l-=3}for(;r.have<19;)r.lens[A[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,S={bits:r.lenbits},x=T(0,r.lens,0,19,r.lencode,0,r.work,S),r.lenbits=S.bits,x){t.msg="invalid code lengths set",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(b<16)u>>>=_,l-=_,r.lens[r.have++]=b;else{if(16===b){for(z=_+2;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(u>>>=_,l-=_,0===r.have){t.msg="invalid bit length repeat",r.mode=30;break}k=r.lens[r.have-1],c=3+(3&u),u>>>=2,l-=2}else if(17===b){for(z=_+3;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}l-=_,k=0,c=3+(7&(u>>>=_)),u>>>=3,l-=3}else{for(z=_+7;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}l-=_,k=0,c=11+(127&(u>>>=_)),u>>>=7,l-=7}if(r.have+c>r.nlen+r.ndist){t.msg="invalid bit length repeat",r.mode=30;break}for(;c--;)r.lens[r.have++]=k}}if(30===r.mode)break;if(0===r.lens[256]){t.msg="invalid code -- missing end-of-block",r.mode=30;break}if(r.lenbits=9,S={bits:r.lenbits},x=T(D,r.lens,0,r.nlen,r.lencode,0,r.work,S),r.lenbits=S.bits,x){t.msg="invalid literal/lengths set",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,S={bits:r.distbits},x=T(F,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,S),r.distbits=S.bits,x){t.msg="invalid distances set",r.mode=30;break}if(r.mode=20,6===e)break t;case 20:r.mode=21;case 21:if(6<=o&&258<=h){t.next_out=a,t.avail_out=h,t.next_in=s,t.avail_in=o,r.hold=u,r.bits=l,R(t,d),a=t.next_out,n=t.output,h=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,u=r.hold,l=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(g&&0==(240&g)){for(v=_,y=g,w=b;g=(C=r.lencode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}u>>>=v,l-=v,r.back+=v}if(u>>>=_,l-=_,r.back+=_,r.length=b,0===g){r.mode=26;break}if(32&g){r.back=-1,r.mode=12;break}if(64&g){t.msg="invalid literal/length code",r.mode=30;break}r.extra=15&g,r.mode=22;case 22:if(r.extra){for(z=r.extra;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.length+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;g=(C=r.distcode[u&(1<<r.distbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(0==(240&g)){for(v=_,y=g,w=b;g=(C=r.distcode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}u>>>=v,l-=v,r.back+=v}if(u>>>=_,l-=_,r.back+=_,64&g){t.msg="invalid distance code",r.mode=30;break}r.offset=b,r.extra=15&g,r.mode=24;case 24:if(r.extra){for(z=r.extra;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.offset+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){t.msg="invalid distance too far back",r.mode=30;break}r.mode=25;case 25:if(0===h)break t;if(c=d-h,r.offset>c){if((c=r.offset-c)>r.whave&&r.sane){t.msg="invalid distance too far back",r.mode=30;break}p=c>r.wnext?(c-=r.wnext,r.wsize-c):r.wnext-c,c>r.length&&(c=r.length),m=r.window}else m=n,p=a-r.offset,c=r.length;for(h<c&&(c=h),h-=c,r.length-=c;n[a++]=m[p++],--c;);0===r.length&&(r.mode=21);break;case 26:if(0===h)break t;n[a++]=r.length,h--,r.mode=21;break;case 27:if(r.wrap){for(;l<32;){if(0===o)break t;o--,u|=i[s++]<<l,l+=8}if(d-=h,t.total_out+=d,r.total+=d,d&&(t.adler=r.check=r.flags?B(r.check,n,d,a-d):O(r.check,n,d,a-d)),d=h,(r.flags?u:L(u))!==r.check){t.msg="incorrect data check",r.mode=30;break}l=u=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(u!==(4294967295&r.total)){t.msg="incorrect length check",r.mode=30;break}l=u=0}r.mode=29;case 29:x=1;break t;case 30:x=-3;break t;case 31:return-4;case 32:default:return U}return t.next_out=a,t.avail_out=h,t.next_in=s,t.avail_in=o,r.hold=u,r.bits=l,(r.wsize||d!==t.avail_out&&r.mode<30&&(r.mode<27||4!==e))&&Z(t,t.output,t.next_out,d-t.avail_out)?(r.mode=31,-4):(f-=t.avail_in,d-=t.avail_out,t.total_in+=f,t.total_out+=d,r.total+=d,r.wrap&&d&&(t.adler=r.check=r.flags?B(r.check,n,d,t.next_out-d):O(r.check,n,d,t.next_out-d)),t.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==f&&0===d||4===e)&&x===N&&(x=-5),x)},r.inflateEnd=function(t){if(!t||!t.state)return U;var e=t.state;return e.window&&(e.window=null),t.state=null,N},r.inflateGetHeader=function(t,e){var r;return t&&t.state?0==(2&(r=t.state).wrap)?U:((r.head=e).done=!1,N):U},r.inflateSetDictionary=function(t,e){var r,i=e.length;return t&&t.state?0!==(r=t.state).wrap&&11!==r.mode?U:11===r.mode&&O(1,e,i,0)!==r.check?-3:Z(t,e,i,i)?(r.mode=31,-4):(r.havedict=1,N):U},r.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(t,e,r){"use strict";var D=t("../utils/common"),F=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],N=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],U=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],P=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(t,e,r,i,n,s,a,o){var h,u,l,f,d,c,p,m,_,g=o.bits,b=0,v=0,y=0,w=0,k=0,x=0,S=0,z=0,C=0,E=0,A=null,I=0,O=new D.Buf16(16),B=new D.Buf16(16),R=null,T=0;for(b=0;b<=15;b++)O[b]=0;for(v=0;v<i;v++)O[e[r+v]]++;for(k=g,w=15;1<=w&&0===O[w];w--);if(w<k&&(k=w),0===w)return n[s++]=20971520,n[s++]=20971520,o.bits=1,0;for(y=1;y<w&&0===O[y];y++);for(k<y&&(k=y),b=z=1;b<=15;b++)if(z<<=1,(z-=O[b])<0)return-1;if(0<z&&(0===t||1!==w))return-1;for(B[1]=0,b=1;b<15;b++)B[b+1]=B[b]+O[b];for(v=0;v<i;v++)0!==e[r+v]&&(a[B[e[r+v]]++]=v);if(c=0===t?(A=R=a,19):1===t?(A=F,I-=257,R=N,T-=257,256):(A=U,R=P,-1),b=y,d=s,S=v=E=0,l=-1,f=(C=1<<(x=k))-1,1===t&&852<C||2===t&&592<C)return 1;for(;;){for(p=b-S,_=a[v]<c?(m=0,a[v]):a[v]>c?(m=R[T+a[v]],A[I+a[v]]):(m=96,0),h=1<<b-S,y=u=1<<x;n[d+(E>>S)+(u-=h)]=p<<24|m<<16|_|0,0!==u;);for(h=1<<b-1;E&h;)h>>=1;if(0!==h?(E&=h-1,E+=h):E=0,v++,0==--O[b]){if(b===w)break;b=e[r+a[v]]}if(k<b&&(E&f)!==l){for(0===S&&(S=k),d+=y,z=1<<(x=b-S);x+S<w&&!((z-=O[x+S])<=0);)x++,z<<=1;if(C+=1<<x,1===t&&852<C||2===t&&592<C)return 1;n[l=E&f]=k<<24|x<<16|d-s|0}}return 0!==E&&(n[d+E]=b-S<<24|64<<16|0),o.bits=k,0}},{"../utils/common":41}],51:[function(t,e,r){"use strict";e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(t,e,r){"use strict";var n=t("../utils/common"),o=0,h=1;function i(t){for(var e=t.length;0<=--e;)t[e]=0}var s=0,a=29,u=256,l=u+1+a,f=30,d=19,_=2*l+1,g=15,c=16,p=7,m=256,b=16,v=17,y=18,w=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],k=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],x=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],z=new Array(2*(l+2));i(z);var C=new Array(2*f);i(C);var E=new Array(512);i(E);var A=new Array(256);i(A);var I=new Array(a);i(I);var O,B,R,T=new Array(f);function D(t,e,r,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=r,this.elems=i,this.max_length=n,this.has_stree=t&&t.length}function F(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function N(t){return t<256?E[t]:E[256+(t>>>7)]}function U(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function P(t,e,r){t.bi_valid>c-r?(t.bi_buf|=e<<t.bi_valid&65535,U(t,t.bi_buf),t.bi_buf=e>>c-t.bi_valid,t.bi_valid+=r-c):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=r)}function L(t,e,r){P(t,r[2*e],r[2*e+1])}function j(t,e){for(var r=0;r|=1&t,t>>>=1,r<<=1,0<--e;);return r>>>1}function Z(t,e,r){var i,n,s=new Array(g+1),a=0;for(i=1;i<=g;i++)s[i]=a=a+r[i-1]<<1;for(n=0;n<=e;n++){var o=t[2*n+1];0!==o&&(t[2*n]=j(s[o]++,o))}}function W(t){var e;for(e=0;e<l;e++)t.dyn_ltree[2*e]=0;for(e=0;e<f;e++)t.dyn_dtree[2*e]=0;for(e=0;e<d;e++)t.bl_tree[2*e]=0;t.dyn_ltree[2*m]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function M(t){8<t.bi_valid?U(t,t.bi_buf):0<t.bi_valid&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function H(t,e,r,i){var n=2*e,s=2*r;return t[n]<t[s]||t[n]===t[s]&&i[e]<=i[r]}function G(t,e,r){for(var i=t.heap[r],n=r<<1;n<=t.heap_len&&(n<t.heap_len&&H(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!H(e,i,t.heap[n],t.depth));)t.heap[r]=t.heap[n],r=n,n<<=1;t.heap[r]=i}function K(t,e,r){var i,n,s,a,o=0;if(0!==t.last_lit)for(;i=t.pending_buf[t.d_buf+2*o]<<8|t.pending_buf[t.d_buf+2*o+1],n=t.pending_buf[t.l_buf+o],o++,0===i?L(t,n,e):(L(t,(s=A[n])+u+1,e),0!==(a=w[s])&&P(t,n-=I[s],a),L(t,s=N(--i),r),0!==(a=k[s])&&P(t,i-=T[s],a)),o<t.last_lit;);L(t,m,e)}function Y(t,e){var r,i,n,s=e.dyn_tree,a=e.stat_desc.static_tree,o=e.stat_desc.has_stree,h=e.stat_desc.elems,u=-1;for(t.heap_len=0,t.heap_max=_,r=0;r<h;r++)0!==s[2*r]?(t.heap[++t.heap_len]=u=r,t.depth[r]=0):s[2*r+1]=0;for(;t.heap_len<2;)s[2*(n=t.heap[++t.heap_len]=u<2?++u:0)]=1,t.depth[n]=0,t.opt_len--,o&&(t.static_len-=a[2*n+1]);for(e.max_code=u,r=t.heap_len>>1;1<=r;r--)G(t,s,r);for(n=h;r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],G(t,s,1),i=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=i,s[2*n]=s[2*r]+s[2*i],t.depth[n]=(t.depth[r]>=t.depth[i]?t.depth[r]:t.depth[i])+1,s[2*r+1]=s[2*i+1]=n,t.heap[1]=n++,G(t,s,1),2<=t.heap_len;);t.heap[--t.heap_max]=t.heap[1],function(t,e){var r,i,n,s,a,o,h=e.dyn_tree,u=e.max_code,l=e.stat_desc.static_tree,f=e.stat_desc.has_stree,d=e.stat_desc.extra_bits,c=e.stat_desc.extra_base,p=e.stat_desc.max_length,m=0;for(s=0;s<=g;s++)t.bl_count[s]=0;for(h[2*t.heap[t.heap_max]+1]=0,r=t.heap_max+1;r<_;r++)p<(s=h[2*h[2*(i=t.heap[r])+1]+1]+1)&&(s=p,m++),h[2*i+1]=s,u<i||(t.bl_count[s]++,a=0,c<=i&&(a=d[i-c]),o=h[2*i],t.opt_len+=o*(s+a),f&&(t.static_len+=o*(l[2*i+1]+a)));if(0!==m){do{for(s=p-1;0===t.bl_count[s];)s--;t.bl_count[s]--,t.bl_count[s+1]+=2,t.bl_count[p]--,m-=2}while(0<m);for(s=p;0!==s;s--)for(i=t.bl_count[s];0!==i;)u<(n=t.heap[--r])||(h[2*n+1]!==s&&(t.opt_len+=(s-h[2*n+1])*h[2*n],h[2*n+1]=s),i--)}}(t,e),Z(s,u,t.bl_count)}function X(t,e,r){var i,n,s=-1,a=e[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),e[2*(r+1)+1]=65535,i=0;i<=r;i++)n=a,a=e[2*(i+1)+1],++o<h&&n===a||(o<u?t.bl_tree[2*n]+=o:0!==n?(n!==s&&t.bl_tree[2*n]++,t.bl_tree[2*b]++):o<=10?t.bl_tree[2*v]++:t.bl_tree[2*y]++,s=n,u=(o=0)===a?(h=138,3):n===a?(h=6,3):(h=7,4))}function V(t,e,r){var i,n,s=-1,a=e[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),i=0;i<=r;i++)if(n=a,a=e[2*(i+1)+1],!(++o<h&&n===a)){if(o<u)for(;L(t,n,t.bl_tree),0!=--o;);else 0!==n?(n!==s&&(L(t,n,t.bl_tree),o--),L(t,b,t.bl_tree),P(t,o-3,2)):o<=10?(L(t,v,t.bl_tree),P(t,o-3,3)):(L(t,y,t.bl_tree),P(t,o-11,7));s=n,u=(o=0)===a?(h=138,3):n===a?(h=6,3):(h=7,4)}}i(T);var q=!1;function J(t,e,r,i){P(t,(s<<1)+(i?1:0),3),function(t,e,r,i){M(t),i&&(U(t,r),U(t,~r)),n.arraySet(t.pending_buf,t.window,e,r,t.pending),t.pending+=r}(t,e,r,!0)}r._tr_init=function(t){q||(function(){var t,e,r,i,n,s=new Array(g+1);for(i=r=0;i<a-1;i++)for(I[i]=r,t=0;t<1<<w[i];t++)A[r++]=i;for(A[r-1]=i,i=n=0;i<16;i++)for(T[i]=n,t=0;t<1<<k[i];t++)E[n++]=i;for(n>>=7;i<f;i++)for(T[i]=n<<7,t=0;t<1<<k[i]-7;t++)E[256+n++]=i;for(e=0;e<=g;e++)s[e]=0;for(t=0;t<=143;)z[2*t+1]=8,t++,s[8]++;for(;t<=255;)z[2*t+1]=9,t++,s[9]++;for(;t<=279;)z[2*t+1]=7,t++,s[7]++;for(;t<=287;)z[2*t+1]=8,t++,s[8]++;for(Z(z,l+1,s),t=0;t<f;t++)C[2*t+1]=5,C[2*t]=j(t,5);O=new D(z,w,u+1,l,g),B=new D(C,k,0,f,g),R=new D(new Array(0),x,0,d,p)}(),q=!0),t.l_desc=new F(t.dyn_ltree,O),t.d_desc=new F(t.dyn_dtree,B),t.bl_desc=new F(t.bl_tree,R),t.bi_buf=0,t.bi_valid=0,W(t)},r._tr_stored_block=J,r._tr_flush_block=function(t,e,r,i){var n,s,a=0;0<t.level?(2===t.strm.data_type&&(t.strm.data_type=function(t){var e,r=4093624447;for(e=0;e<=31;e++,r>>>=1)if(1&r&&0!==t.dyn_ltree[2*e])return o;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return h;for(e=32;e<u;e++)if(0!==t.dyn_ltree[2*e])return h;return o}(t)),Y(t,t.l_desc),Y(t,t.d_desc),a=function(t){var e;for(X(t,t.dyn_ltree,t.l_desc.max_code),X(t,t.dyn_dtree,t.d_desc.max_code),Y(t,t.bl_desc),e=d-1;3<=e&&0===t.bl_tree[2*S[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}(t),n=t.opt_len+3+7>>>3,(s=t.static_len+3+7>>>3)<=n&&(n=s)):n=s=r+5,r+4<=n&&-1!==e?J(t,e,r,i):4===t.strategy||s===n?(P(t,2+(i?1:0),3),K(t,z,C)):(P(t,4+(i?1:0),3),function(t,e,r,i){var n;for(P(t,e-257,5),P(t,r-1,5),P(t,i-4,4),n=0;n<i;n++)P(t,t.bl_tree[2*S[n]+1],3);V(t,t.dyn_ltree,e-1),V(t,t.dyn_dtree,r-1)}(t,t.l_desc.max_code+1,t.d_desc.max_code+1,a+1),K(t,t.dyn_ltree,t.dyn_dtree)),W(t),i&&M(t)},r._tr_tally=function(t,e,r){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&r,t.last_lit++,0===e?t.dyn_ltree[2*r]++:(t.matches++,e--,t.dyn_ltree[2*(A[r]+u+1)]++,t.dyn_dtree[2*N(e)]++),t.last_lit===t.lit_bufsize-1},r._tr_align=function(t){P(t,2,3),L(t,m,z),function(t){16===t.bi_valid?(U(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):8<=t.bi_valid&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}(t)}},{"../utils/common":41}],53:[function(t,e,r){"use strict";e.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(t,e,r){"use strict";e.exports="function"==typeof setImmediate?setImmediate:function(){var t=[].slice.apply(arguments);t.splice(1,0,0),setTimeout.apply(null,t)}},{}]},{},[10])(10)});\n\n//# sourceURL=webpack:///./extension/jszip.min.js?')},"./extension/keyWords.js":module=>{eval("module.exports = {\r\n    bannedKeyWords: [\r\n        'http',\r\n    ]\r\n}\n\n//# sourceURL=webpack:///./extension/keyWords.js?")},"./extension sync recursive":module=>{eval('function webpackEmptyContext(req) {\n\tvar e = new Error("Cannot find module \'" + req + "\'");\n\te.code = \'MODULE_NOT_FOUND\';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = "./extension sync recursive";\nmodule.exports = webpackEmptyContext;\n\n//# sourceURL=webpack:///./extension/_sync?')},"./game/Game.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  vkFun: function () {\r\n    /**\r\n     * 其中的变量是游戏中的全局变量，因为是在IIFE中声明而不是实际上的全局范围，从而对外部实现了隐藏\r\n     * @namespace\r\n     * @global\r\n     */\r\n    const _status = __webpack_require__(/*! ./_status */ "./game/_status.js");\r\n    /**\r\n     * 包(游戏牌, 武将牌, 拓展)管理相关\r\n     * 游戏入口{@link lib.init.init}\r\n     * @namespace\r\n     * @global\r\n     */\r\n    const lib = {\r\n      configprefix: \'vtuberkill_1.9_\',\r\n      versionOL: 27,\r\n      updateURLS: {\r\n        coding: \'https://v8gamemaker.coding.net/p/vtuberkill/d/vtuberkill_github/git/raw/\',\r\n        github: \'https://v8gamemaker.coding.net/p/vtuberkill/d/vtuberkill_github/git/raw/\',\r\n      },\r\n      updateURL: \'https://v8gamemaker.coding.net/p/vtuberkill/d/vtuberkill_github/git/raw/\',\r\n      mirrorURL: \'https://v8gamemaker.coding.net/p/vtuberkill/d/vtuberkill_github/git/raw/\',\r\n      hallURL: \'www.vtuberkill.com\',\r\n      assetURL: \'\',\r\n    };\r\n    /**\r\n     * 游戏内核\r\n     * 游戏循环{@link game.loop}\r\n     * @namespace\r\n     * @global\r\n     */\r\n    const game = {};\r\n    /**\r\n     * 游戏UI库\r\n     * @namespace\r\n     * @global\r\n     */\r\n    const ui = {};\r\n    /**\r\n     * 游戏工具函数库，对游戏中一些常用操作(查询，选择，转换，判断等)进行了封装\r\n     * @namespace\r\n     * @global\r\n     */\r\n    const get = {};\r\n    /**\r\n     * 游戏AI模块\r\n     * @namespace\r\n     * @global\r\n     */\r\n    const ai = {};\r\n    const vkCore  = window.vkCore = { game, ui, get, ai, lib, _status }\r\n    function vkExtends(target, source) {\r\n      for (var k in source) {\r\n        if (source.hasOwnProperty(k) === true) {\r\n          target[k] = source[k];\r\n        }\r\n      }\r\n    }\r\n    vkExtends(lib, (__webpack_require__(/*! ./lib */ "./game/lib.js").libFun)(vkCore))\r\n    vkExtends(game, (__webpack_require__(/*! ./_game */ "./game/_game.js").gameFun)(vkCore))\r\n    vkExtends(ui, (__webpack_require__(/*! ./ui */ "./game/ui.js").uiFun)(vkCore))\r\n    vkExtends(get, (__webpack_require__(/*! ./get */ "./game/get.js").getFun)(vkCore))\r\n    vkExtends(ai, (__webpack_require__(/*! ./ai */ "./game/ai.js").aiFun)(vkCore))\r\n    //导入资源\r\n    __webpack_require__(/*! @d/entry */ "./data/entry.js")\r\n    __webpack_require__(/*! @m/entry */ "./methods/entry.js")\r\n    game.galgameMod();\r\n    lib.init.init();\r\n  }\r\n});\r\n\n\n//# sourceURL=webpack:///./game/Game.js?')},"./game/_game.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("module.exports = {\r\n    gameFun: (vkCore) => {\r\n        let { game, ui, get, ai, lib, _status } = vkCore\r\n        return {\r\n            /**\r\n             * 资源封装_事件相关_向弹窗中添加一名角色区域内满足要求的牌\r\n             * @param {!object} Evt 弹窗所在的事件对象，必须要有dialog属性\r\n             * @param {!Player} target 获取牌的目标角色\r\n             * @param {boolean} [directh] 当添加的牌均为不可见（'blank'）的手牌时，directh为true\r\n             * @param {?string} [type] 获取牌的条件，可能为'canBeDiscarded' | 'canBeGained'\r\n             * @param {?function} [callback] 添加动作完成后执行的回调函数\r\n             */\r\n            showPlayerCard: function (Evt, target, directh, type, callback) {\r\n                if (!Evt.dialog) return;\r\n                let player = Evt.player || _status.event.player, position = Evt.position || 'h';\r\n                for (let i = 0; i < Evt.position.length; i++) {\r\n                    if (Evt.position[i] == 'h') {\r\n                        let ms = target.getCards('h', function (card) {\r\n                            if (type && !lib.filter[type](card, player, target)) return false;\r\n                            if (target.isUnderControl(true)) return true;\r\n                            if (card.hasGaintag('an_')) return false;\r\n                            if (Evt.visible || player.hasSkillTag('viewHandcard', null, target, true)) {\r\n                                return true;\r\n                            }\r\n                            return card.hasGaintag('ming_');\r\n                        });\r\n                        if (ms.length > 0) {\r\n                            Evt.dialog.addText('明置区');\r\n                            ms.randomSort();\r\n                            Evt.dialog.add(ms);\r\n                            directh = false;\r\n                        }\r\n                        let ans = target.getCards('h', function (card) {\r\n                            if (type && !lib.filter[type](card, player, target)) return false;\r\n                            if (ms.contains(card)) return false;\r\n                            return true;\r\n                        });\r\n                        if (ans.length > 0) {\r\n                            Evt.dialog.addText((ms.length ? '暗置区' : '手牌区'));\r\n                            ans.randomSort();\r\n                            Evt.dialog.add([ans, 'blank']);\r\n                        }\r\n                    }\r\n                    else if (Evt.position[i] == 'e') {\r\n                        let es = target.getCards('e', function (card) {\r\n                            if (type && !lib.filter[type](card, player, target)) return false;\r\n                            return true;\r\n                        });\r\n                        if (es.length) {\r\n                            Evt.dialog.addText('装备区');\r\n                            Evt.dialog.add(es);\r\n                            directh = false;\r\n                        }\r\n                    }\r\n                    else if (Evt.position[i] == 'j') {\r\n                        let js = target.getCards('j', function (card) {\r\n                            if (type && !lib.filter[type](card, player, target)) return false;\r\n                            return true;\r\n                        });\r\n                        if (js.length) {\r\n                            Evt.dialog.addText('判定区');\r\n                            Evt.dialog.add(js);\r\n                            directh = false;\r\n                        }\r\n                    }\r\n                }\r\n                callback && callback(Evt);\r\n                return directh;\r\n            },\r\n            //galgame相关功能\r\n            galgameMod: function () {\r\n                var galgame = {\r\n                    text: {},\r\n                    game: game,\r\n                    sce(shijian) {\r\n                        var game = galgame.game;\r\n                        var next = game.createEvent('sce', false);\r\n                        next.shijian = shijian;\r\n                        next.setContent(galgame.sces);\r\n                        return next;\r\n                    },\r\n                    audio: document.createElement(\"audio\"),\r\n                    backgroundMusic: document.createElement(\"audio\"),\r\n                    end() {\r\n                        var game = galgame.game;\r\n                        galgame.audio.pause();\r\n                        galgame.backgroundMusic.pause();\r\n                        game.resume();\r\n                    },\r\n                    cg(src, callback) {\r\n                        var cg = document.createElement(\"video\");\r\n                        cg.setAttribute(\"width\", \"100%\");\r\n                        cg.setAttribute(\"height\", \"100%\");\r\n                        cg.setAttribute(\"src\", src);\r\n                        cg.setAttribute(\"autoplay\", \"autoplay\");\r\n                        cg.addEventListener(\"ended\", callback);\r\n                        cg.addEventListener(\"loadedmetadata\", function () {\r\n                            (this).onclick = function () {\r\n                                this.play();\r\n                                this.currentTime = this.duration;\r\n                            }\r\n                        });\r\n                        return cg;\r\n                    },\r\n                    sces() {\r\n                        var game = galgame.game;\r\n                        var color = {};\r\n                        var beijing = ui.create.div('.scedi', ui.window);\r\n                        var booth = { node: ui.create.div(\".scetu\", beijing) };\r\n                        var node = ui.create.div('.sce', beijing);\r\n                        var drive = ui.create.div('.drive', beijing);\r\n                        var tou = ui.create.div('.tou', node);\r\n                        var txt = ui.create.div('.txt', node);\r\n                        var right = ui.create.div(node);\r\n                        var name = ui.create.div('.name', tou);\r\n                        var name2 = ui.create.div('.name', right);\r\n                        var num = 0,\r\n                            i = 0;\r\n                        var bofang = function () {\r\n                            if (!galgame.text[Evt.shijian]) return;\r\n                            var arr = galgame.text[Evt.shijian][num].split(':');\r\n                            if (arr[0] == \"background\") {\r\n                                if (arr[1] == \"none\") {\r\n                                    beijing.style.backgroundImage = \"\";\r\n                                } else {\r\n                                    beijing.setBackgroundImage('extension/' + arr[1]);\r\n                                }\r\n                                num++;\r\n                                bofang();\r\n                                return;\r\n                            } else if (arr[0] == \"booth\") {\r\n                                if (arr[6] || (arr[1] == \"none\" && arr[2])) {\r\n                                    if (!booth[arr[6]]) {\r\n                                        booth[arr[6]] = ui.create.div(\".scetu\", beijing);\r\n                                    }\r\n                                    if (arr[1] == \"none\") {\r\n                                        booth[arr[2]].hide();\r\n                                    } else {\r\n                                        if (booth[arr[6]].classList.contains(\"hidden\")) booth.node.show();\r\n                                        booth[arr[6]].style.width = parseInt(arr[2]) + \"px\";\r\n                                        booth[arr[6]].style.height = parseInt(arr[3]) + \"px\";\r\n                                        booth[arr[6]].style.left = parseInt(arr[4]) + \"%\";\r\n                                        booth[arr[6]].style.top = parseInt(arr[5]) + \"%\";\r\n                                        booth[arr[6]].setBackgroundImage('extension/' + arr[1]);\r\n                                    }\r\n                                } else {\r\n                                    if (arr[1] == \"none\") {\r\n                                        booth.node.hide();\r\n                                    } else {\r\n                                        if (booth.node.classList.contains(\"hidden\")) booth.node.show();\r\n                                        booth.node.style.width = parseInt(arr[2]) + \"px\";\r\n                                        booth.node.style.height = parseInt(arr[3]) + \"px\";\r\n                                        booth.node.style.left = parseInt(arr[4]) + \"%\";\r\n                                        booth.node.style.top = parseInt(arr[5]) + \"%\";\r\n                                        booth.node.setBackgroundImage('extension/' + arr[1]);\r\n                                    }\r\n                                }\r\n                                num++;\r\n                                bofang();\r\n                                return;\r\n                            } else if (arr[0] == \"color\") {\r\n                                if (arr[1] == \"text\") {\r\n                                    node.style.backgroundColor = arr[2];\r\n                                }\r\n                                if (arr[1] == \"choose\") {\r\n                                    if (arr[3]) {\r\n                                        color[arr[3]] = arr[2];\r\n                                    } else {\r\n                                        color.every = arr[2];\r\n                                    }\r\n                                }\r\n                                num++;\r\n                                bofang();\r\n                                return;\r\n                            } else if (arr[0] == \"music\") {\r\n                                ui.backgroundMusic.pause();\r\n                                galgame.backgroundMusic.src = lib.assetURL + \"galgame/\" + arr[1];\r\n                                galgame.backgroundMusic.play();\r\n                                num++;\r\n                                bofang();\r\n                                return;\r\n                            } else if (arr[0] == \"audio\") {\r\n                                galgame.audio.src = lib.assetURL + \"galgame/\" + arr[1];\r\n                                galgame.audio.play();\r\n                                num++;\r\n                                bofang();\r\n                                return;\r\n                            } else if (arr[0] == \"cg\") {\r\n                                ui.backgroundMusic.pause();\r\n                                galgame.backgroundMusic.pause();\r\n                                var di = ui.create.div('.cg');\r\n                                var cg = galgame.cg(lib.assetURL + \"galgame/\" + arr[1], function () {\r\n                                    beijing.removeChild(di);\r\n                                    ui.backgroundMusic.play();\r\n                                    bofang();\r\n                                });\r\n                                di.appendChild(cg);\r\n                                beijing.appendChild(di);\r\n                                num++;\r\n                                return;\r\n                            } else if (arr[0] == \"choose\") {\r\n                                var choose = ui.create.div('.choose', beijing);\r\n                                for (var j = 1; j < arr.length; j++) {\r\n                                    var sele = ui.create.div('.sele', choose);\r\n                                    sele.onclick = function () {\r\n                                        _status.event.result = {\r\n                                            bool: this.innerText,\r\n                                        }\r\n                                        ui.window.removeChild(beijing);\r\n                                        ui.backgroundMusic.play();\r\n                                        galgame.end();\r\n                                    };\r\n                                    sele.innerHTML = arr[j];\r\n                                    if (color.every) sele.style.backgroundColor = color.every;\r\n                                    if (color[j]) sele.style.backgroundColor = color[j];\r\n                                }\r\n                                return;\r\n                            } else if (arr[0] == \"right\") {\r\n                                if (arr[1] != \"none\") {\r\n                                    if (!right.classList.contains(\"galright\")) {\r\n                                        right.classList.add(\"galright\");\r\n                                    }\r\n                                    if (!txt.classList.contains(\"txt2\")) {\r\n                                        txt.classList.add(\"txt2\");\r\n                                    }\r\n                                    right.setBackgroundImage('extension/' + arr[1]);\r\n                                    if (arr[2] == \"none\") {\r\n                                        name2.innerHTML = \"\";\r\n                                    } else {\r\n                                        name2.innerHTML = arr[2];\r\n                                    }\r\n                                    if (arr[3]) {\r\n                                        if (arr[3] == \"left\") {\r\n                                            if (!tou.classList.contains(\"yingyin\")) {\r\n                                                tou.classList.add(\"yingyin\");\r\n                                            }\r\n                                            if (right.classList.contains(\"yingyin\")) {\r\n                                                right.classList.remove(\"yingyin\");\r\n                                            }\r\n                                        }\r\n                                        if (arr[3] == \"right\") {\r\n                                            if (tou.classList.contains(\"yingyin\")) {\r\n                                                tou.classList.remove(\"yingyin\");\r\n                                            }\r\n                                            if (!right.classList.contains(\"yingyin\")) {\r\n                                                right.classList.add(\"yingyin\");\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        if (tou.classList.contains(\"yingyin\")) {\r\n                                            tou.classList.remove(\"yingyin\");\r\n                                        }\r\n                                        if (right.classList.contains(\"yingyin\")) {\r\n                                            right.classList.remove(\"yingyin\");\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    right.classList.remove(\"galright\");\r\n                                    txt.classList.remove(\"txt2\");\r\n                                    if (tou.classList.contains(\"yingyin\")) {\r\n                                        tou.remove(\"yingyin\");\r\n                                    }\r\n                                    if (right.classList.contains(\"yingyin\")) {\r\n                                        right.remove(\"yingyin\");\r\n                                    }\r\n                                    name2.innerHTML = \"\";\r\n                                }\r\n                                num++;\r\n                                bofang();\r\n                                return;\r\n                            }\r\n                            tou.show();\r\n                            if (arr[0] == \"none\") {\r\n                                tou.hide();\r\n                            } else if (arr[0] == \"sp\") {\r\n                                tou.setBackgroundImage(\"galgame/\" + arr[3]);\r\n                                name.innerHTML = arr[2];\r\n                            } else {\r\n                                tou.setBackground(arr[0], \"character\");\r\n                                name.innerHTML = get.rawName([arr[0]]);\r\n                            }\r\n                            function skip0(e) {\r\n                                if (e.ctrlKey) {\r\n                                    window.status = 'skip';\r\n                                }\r\n                            }\r\n                            function skip1(e) {\r\n                                if (e.keyCode == '17') {\r\n                                    window.status = '';\r\n                                }\r\n                            }\r\n                            var skipfun0 = function (e) {\r\n                                skip0(e);\r\n                            }\r\n                            var skipfun1 = function (e) {\r\n                                skip1(e);\r\n                            }\r\n                            var link = arr[1].replace(/@/g, lib.config.connect_nickname);\r\n                            var show = function () {\r\n                                delete drive.onclick\r\n                                if (link[i] == \"<\") {\r\n                                    for (var j = i; j < link.length; j++) {\r\n                                        if (link[j] == \">\") {\r\n                                            if (link[j + 1] && link[j + 1] == \"<\") {\r\n                                                continue;\r\n                                            }\r\n                                            i = j + 1;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                var str = link.substr(0, i);\r\n                                txt.innerHTML = str;\r\n                                i++;\r\n                                if (i <= link.length) {\r\n                                    window.addEventListener('keydown', skipfun0);\r\n                                    window.addEventListener('keyup', skipfun1);\r\n                                    if (window.status == 'skip') {\r\n                                        let t = setTimeout(show, 100);\r\n                                        drive.onclick = function () {\r\n                                            clearTimeout(t);\r\n                                            show();\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        let t = setTimeout(show, 750);\r\n                                        drive.onclick = function () {\r\n                                            clearTimeout(t);\r\n                                            show();\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    if (num < galgame.text[Evt.shijian].length) {\r\n                                        if (window.status == 'skip') {\r\n                                            i = 0;\r\n                                            galgame.audio.pause();\r\n                                            bofang();\r\n                                            window.status = '';\r\n                                            delete drive.onclick\r\n                                        }\r\n                                        else {\r\n                                            drive.onclick = function () {\r\n                                                this.onclick = false;\r\n                                                i = 0;\r\n                                                galgame.audio.pause();\r\n                                                bofang();\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        window.removeEventListener('keydown', skipfun0);\r\n                                        window.removeEventListener('keyup', skipfun1);\r\n                                        if (window.status == 'skip') {\r\n                                            ui.backgroundMusic.play();\r\n                                            ui.window.removeChild(beijing);\r\n                                            galgame.end();\r\n                                            window.status = '';\r\n                                            delete drive.onclick\r\n                                        }\r\n                                        else {\r\n                                            drive.onclick = function () {\r\n                                                this.onclick = false;\r\n                                                ui.backgroundMusic.play();\r\n                                                ui.window.removeChild(beijing);\r\n                                                galgame.end();\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            show();\r\n                            console.log('++')\r\n                            num++;\r\n                        }\r\n                        bofang();\r\n                        game.pause();\r\n                    }\r\n                };\r\n                lib.init.json(lib.assetURL + 'galgame/galgame.json', function (text) {\r\n                    for (var i in text) {\r\n                        galgame.text[i] = text[i];\r\n                    }\r\n                    lib.init.css(lib.assetURL + 'galgame', 'galgame');\r\n                });\r\n        \r\n                game.galgame = galgame;\r\n            },\r\n            loseAsync: function (arg) {\r\n                var next = game.createEvent('loseAsync');\r\n                next.getl = function (player) {\r\n                    var that = this;\r\n                    var map = {\r\n                        player: player,\r\n                        hs: [],\r\n                        es: [],\r\n                        js: [],\r\n                        ss: [],\r\n                        cards: [],\r\n                        cards2: [],\r\n                    };\r\n                    player.getHistory('lose', function (evt) {\r\n                        if (evt.parent == that) {\r\n                            map.hs.addArray(evt.hs);\r\n                            map.es.addArray(evt.es);\r\n                            map.js.addArray(evt.js);\r\n                            map.ss.addArray(evt.ss);\r\n                            map.cards.addArray(evt.cards);\r\n                            map.cards2.addArray(evt.cards2);\r\n                        }\r\n                    });\r\n                    if (map.cards.length > 0 || map.ss.length > 0) return map;\r\n                };\r\n                if (arg && get.is.object(arg)) {\r\n                    for (var i in arg) next[i] = arg[i];\r\n                }\r\n                return next;\r\n            },\r\n            //获取（角色名）的评级\r\n            getRarity: function (name) {\r\n                var rank = lib.rank.rarity;\r\n                if (rank.beginner.contains(name)) return 'beginner';\r\n                if (rank.legend.contains(name)) return 'legend';\r\n                if (rank.epic.contains(name)) return 'epic';\r\n                if (rank.rare.contains(name)) return 'rare';\r\n                if (get.mode() != 'chess' && rank.junk.contains(name)) return 'junk';\r\n                return 'common';\r\n            },\r\n            getGlobalHistory: function (key, filter) {\r\n                if (!key) return _status.globalHistory[_status.globalHistory.length - 1];\r\n                if (!filter) return _status.globalHistory[_status.globalHistory.length - 1][key];\r\n                else {\r\n                    var history = game.getGlobalHistory(key).slice(0);\r\n                    for (var i = 0; i < history.length; i++) {\r\n                        if (!filter(history[i])) history.splice(i--, 1);\r\n                    }\r\n                    return history;\r\n                }\r\n            },\r\n            cardsDiscard: function (cards) {\r\n                var type = get.itemtype(cards);\r\n                if (type != 'cards' && type != 'card') return;\r\n                var next = game.createEvent('cardsDiscard');\r\n                next.cards = type == 'cards' ? cards.slice(0) : [cards];\r\n                next.setContent('cardsDiscard');\r\n                return next;\r\n            },\r\n            cardsGotoOrdering: function (cards) {\r\n                var type = get.itemtype(cards);\r\n                if (type != 'cards' && type != 'card') return;\r\n                var next = game.createEvent('cardsGotoOrdering');\r\n                next.cards = type == 'cards' ? cards.slice(0) : [cards];\r\n                next.setContent('cardsGotoOrdering');\r\n                return next;\r\n            },\r\n            cardsGotoSpecial: function (cards, bool) {\r\n                var type = get.itemtype(cards);\r\n                if (type != 'cards' && type != 'card') return;\r\n                var next = game.createEvent('cardsGotoSpecial');\r\n                next.cards = type == 'cards' ? cards.slice(0) : [cards];\r\n                if (bool === false) next.notrigger = true;\r\n                next.setContent('cardsGotoSpecial');\r\n                return next;\r\n            },\r\n            online: false,\r\n            onlineID: null,\r\n            onlineKey: null,\r\n            showHistory: function (pause) {\r\n                if (lib.config.show_history == 'left') {\r\n                    ui.window.classList.add('leftbar');\r\n                }\r\n                else if (lib.config.show_history == 'right') {\r\n                    ui.window.classList.add('rightbar');\r\n                }\r\n                if (pause != false && ui.pause) {\r\n                    ui.pause.show();\r\n                }\r\n            },\r\n            createBackground: function (src, blur) {\r\n                var current = document.body.querySelector('.background.upper');\r\n                if (current) {\r\n                    current.delete();\r\n                }\r\n                var node = ui.create.div('.background.blurbg', document.body);\r\n                node.setBackgroundImage(src);\r\n                node.style.backgroundSize = 'cover';\r\n                if (blur) {\r\n                    node.classList.add('paused')\r\n                }\r\n                return node;\r\n            },\r\n            changeLand: function (url, player) {\r\n                game.addVideo('changeLand', player, url);\r\n                if (url.indexOf('/') === -1) {\r\n                    url = 'image/card/' + url;\r\n                }\r\n                if (url.indexOf('.png') == -1 && url.indexOf('.jpg') == -1) {\r\n                    url += '.jpg';\r\n                }\r\n                var name = url.slice(url.lastIndexOf('/') + 1, url.lastIndexOf('.'));\r\n                var skill = name + '_skill';\r\n                var node = ui.create.div('.background.upper.land');\r\n                node.setBackgroundImage(url);\r\n                node.destroy = function () {\r\n                    if (this.skill) {\r\n                        game.removeGlobalSkill(this.skill);\r\n                        if (this.system) {\r\n                            this.system.remove();\r\n                        }\r\n                    }\r\n                    this.classList.add('hidden');\r\n                    var node = this;\r\n                    setTimeout(function () {\r\n                        node.remove();\r\n                    }, 3000);\r\n                    if (ui.land == this) {\r\n                        ui.land = null;\r\n                    }\r\n                }\r\n                if (ui.land) {\r\n                    document.body.insertBefore(node, ui.land);\r\n                    ui.land.destroy();\r\n                }\r\n                else {\r\n                    node.classList.add('hidden');\r\n                    document.body.insertBefore(node, ui.window);\r\n                    ui.refresh(node);\r\n                    node.classList.remove('hidden');\r\n                }\r\n                ui.land = node;\r\n                if (name) {\r\n                    node.name = name;\r\n                    node.skill = skill;\r\n                    if (player) {\r\n                        node.player = player;\r\n                        player.addTempSkill('land_used');\r\n                    }\r\n                    node.system = ui.create.system(lib.translate[skill], null, true, true);\r\n                    lib.setPopped(node.system, function () {\r\n                        var uiintro = ui.create.dialog('hidden');\r\n                        var str = '地图';\r\n                        if (player) {\r\n                            str = '来源：' + get.translation(player);\r\n                        }\r\n                        var caption = uiintro.addText(str);\r\n                        caption.style.margin = '0';\r\n                        uiintro._place_text = uiintro.add('<div class=\"text\">' + lib.translate[skill + '_info'] + '</div>');\r\n                        uiintro.add(ui.create.div('.placeholder.slim'));\r\n                        return uiintro;\r\n                    }, 200);\r\n                    game.addGlobalSkill(skill);\r\n                }\r\n            },\r\n            checkFileList: function (updates, proceed) {\r\n                var n = updates.length;\r\n                if (!n) {\r\n                    proceed(n);\r\n                }\r\n                for (var i = 0; i < updates.length; i++) {\r\n                    if (lib.node && lib.node.fs) {\r\n                        lib.node.fs.access(__dirname + '/' + updates[i], (function (entry) {\r\n                            return function (err) {\r\n                                if (!err) {\r\n                                    var stat = lib.node.fs.statSync(__dirname + '/' + entry);\r\n                                    if (stat.size == 0) {\r\n                                        err = true;\r\n                                    }\r\n                                }\r\n                                if (err) {\r\n                                    n--;\r\n                                    if (n == 0) {\r\n                                        proceed();\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    n--;\r\n                                    updates.remove(entry);\r\n                                    if (n == 0) {\r\n                                        proceed();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }(updates[i])));\r\n                    }\r\n                    else {\r\n                        resolveLocalFileSystemURL(lib.assetURL + updates[i], (function (name) {\r\n                            return function (entry) {\r\n                                n--;\r\n                                updates.remove(name);\r\n                                if (n == 0) {\r\n                                    proceed();\r\n                                }\r\n                            }\r\n                        }(updates[i])), function () {\r\n                            n--;\r\n                            if (n == 0) {\r\n                                proceed();\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            },\r\n            replaceHandcards: function () {\r\n                var next = game.createEvent('replaceHandcards');\r\n                if (Array.isArray(arguments[0])) {\r\n                    next.players = arguments[0];\r\n                }\r\n                else {\r\n                    next.players = [];\r\n                    for (var i = 0; i < arguments.length; i++) {\r\n                        if (get.itemtype(arguments[i]) == 'player') {\r\n                            next.players.push(arguments[i]);\r\n                        }\r\n                    }\r\n                }\r\n                if (_status.connectMode) {\r\n                    next.setContent('replaceHandcardsOL');\r\n                }\r\n                else {\r\n                    next.setContent('replaceHandcards');\r\n                }\r\n            },\r\n            removeCard: function (name) {\r\n                for (var i = 0; i < lib.card.list.length; i++) {\r\n                    if (lib.card.list[i][2] == name) {\r\n                        lib.card.list.splice(i--, 1);\r\n                    }\r\n                }\r\n                var list = [];\r\n                for (var i = 0; i < ui.cardPile.childElementCount; i++) {\r\n                    if (ui.cardPile.childNodes[i].name == name) {\r\n                        list.push(ui.cardPile.childNodes[i]);\r\n                    }\r\n                }\r\n                for (var i = 0; i < list.length; i++) {\r\n                    list[i].remove();\r\n                }\r\n            },\r\n            randomMapOL: function (type) {\r\n                if (type == 'hidden') {\r\n                    ui.arena.classList.add('playerhidden');\r\n                }\r\n                game.prepareArena();\r\n                if (window.isNonameServer) {\r\n                    game.me = ui.create.player();\r\n                }\r\n                var list = [];\r\n                for (var i = 0; i < game.players.length; i++) {\r\n                    if (game.players[i] != game.me) {\r\n                        list.push(game.players[i]);\r\n                    }\r\n                }\r\n                var map = [];\r\n                for (var i = 0; i < lib.node.clients.length; i++) {\r\n                    if (!list.length) break;\r\n                    if (lib.configOL.observe_race) var current = list.shift();\r\n                    else var current = list.randomRemove();\r\n                    current.ws = lib.node.clients[i];\r\n                    current.playerid = current.ws.id;\r\n                    current.nickname = current.ws.nickname;\r\n                    current.setNickname();\r\n                }\r\n                if (!window.isNonameServer) {\r\n                    game.me.playerid = get.id();\r\n                    game.me.nickname = get.connectNickname();\r\n                    game.me.setNickname();\r\n                }\r\n                for (var i = 0; i < game.players.length; i++) {\r\n                    if (!game.players[i].playerid) {\r\n                        game.players[i].playerid = get.id();\r\n                    }\r\n                    map.push([game.players[i].playerid, game.players[i].nickname]);\r\n                    lib.playerOL[game.players[i].playerid] = game.players[i];\r\n                }\r\n                game.broadcast(function (map, config, hidden) {\r\n                    if (hidden) {\r\n                        ui.arena.classList.add('playerhidden');\r\n                    }\r\n                    lib.configOL = config;\r\n                    ui.create.players();\r\n                    ui.create.me();\r\n                    game.me.playerid = game.onlineID;\r\n                    game.me.nickname = get.connectNickname();\r\n                    for (var i = 0; i < map.length; i++) {\r\n                        if (map[i][0] == game.me.playerid) {\r\n                            map = map.concat(map.splice(0, i));\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (var i = 0; i < game.players.length; i++) {\r\n                        game.players[i].playerid = map[i][0];\r\n                        game.players[i].nickname = map[i][1];\r\n                        game.players[i].setNickname();\r\n                        lib.playerOL[game.players[i].playerid] = game.players[i];\r\n                    }\r\n                    _status.mode = lib.configOL[lib.configOL.mode + '_mode'];\r\n                }, map, lib.configOL, type == 'hidden');\r\n                _status.mode = lib.configOL[lib.configOL.mode + '_mode'];\r\n                game.chooseCharacterOL();\r\n            },\r\n            closeMenu: function () {\r\n                if (ui.menuContainer && !ui.menuContainer.classList.contains('hidden')) {\r\n                    ui.click.configMenu();\r\n                }\r\n            },\r\n            closeConnectMenu: function () {\r\n                if (ui.connectMenuContainer && !ui.connectMenuContainer.classList.contains('hidden')) {\r\n                    ui.click.connectMenu();\r\n                }\r\n            },\r\n            closePopped: function () {\r\n                if (ui.currentpopped) {\r\n                    if (ui.currentpopped._uiintro) {\r\n                        ui.currentpopped._uiintro.delete();\r\n                        delete ui.currentpopped._uiintro;\r\n                    }\r\n                    delete ui.currentpopped;\r\n                }\r\n            },\r\n            broadcast: function () {\r\n                if (!lib.node || !lib.node.clients || game.online) return;\r\n                for (var i = 0; i < lib.node.clients.length; i++) {\r\n                    if (lib.node.clients[i].inited) {\r\n                        lib.node.clients[i].send.apply(lib.node.clients[i], arguments);\r\n                    }\r\n                }\r\n            },\r\n            broadcastAll: function () {\r\n                if (game.online) return;\r\n                var argc = arguments.length;\r\n                var args = new Array(argc);\r\n                for (var i = 0; i < argc; i++) {\r\n                    args[i] = arguments[i];\r\n                }\r\n                game.broadcast.apply(this, args);\r\n                var func = args.shift();\r\n                if (typeof func == 'string') {\r\n                    func = lib.message.client[func];\r\n                }\r\n                if (typeof func == 'function') {\r\n                    func.apply(this, args);\r\n                }\r\n            },\r\n            syncState: function () {\r\n                var state = null;\r\n                if (game.getState) {\r\n                    state = game.getState();\r\n                }\r\n                game.broadcast(function (state, current, number) {\r\n                    if (game.updateState && state) game.updateState(state);\r\n                    _status.currentPhase = current;\r\n                    game.phaseNumber = number;\r\n                }, state, _status.currentPhase, game.phaseNumber);\r\n            },\r\n            updateWaiting: function () {\r\n                var map = [];\r\n                for (var i = 0; i < game.connectPlayers.length; i++) {\r\n                    var player = game.connectPlayers[i];\r\n                    if (player.playerid) {\r\n                        if (!game.onlinezhu) {\r\n                            game.onlinezhu = player.playerid;\r\n                            game.send('server', 'changeAvatar', player.nickname, player.avatar);\r\n                            _status.onlinenickname = player.nickname;\r\n                            _status.onlineavatar = player.avatar;\r\n                        }\r\n                        map[i] = [player.nickname, player.avatar, player.playerid];\r\n                        if (player.playerid == game.onlinezhu) {\r\n                            map[i].push('zhu');\r\n                        }\r\n                    }\r\n                    else if (player.classList.contains('unselectable2')) {\r\n                        map[i] = 'disabled';\r\n                    }\r\n                    else {\r\n                        map[i] = null;\r\n                    }\r\n                }\r\n                game.broadcast('updateWaiting', map);\r\n            },\r\n            createServer: function () {\r\n                lib.node.clients = [];\r\n                lib.node.banned = [];\r\n                lib.node.observing = [];\r\n                lib.node.torespond = {};\r\n                lib.node.torespondtimeout = {};\r\n                lib.playerOL = {};\r\n                lib.cardOL = {};\r\n                lib.wsOL = {};\r\n                ui.create.roomInfo();\r\n                ui.create.chat();\r\n        \r\n                if (game.onlineroom) {\r\n        \r\n                }\r\n                else {\r\n                    var WebSocketServer = (__webpack_require__(/*! ws */ \"../../node_modules/ws/index.js\").Server);\r\n                    var wss = new WebSocketServer({ port: 8080 });\r\n        \r\n                    game.ip = get.ip();\r\n        \r\n                    wss.on('connection', lib.init.connection);\r\n                }\r\n            },\r\n            playAudio: function () {\r\n                if (_status.video && arguments[1] != 'video') return;\r\n                var str = '';\r\n                var onerror = null;\r\n                for (var i = 0; i < arguments.length; i++) {\r\n                    if (typeof arguments[i] === 'string' || typeof arguments[i] == 'number') {\r\n                        str += '/' + arguments[i];\r\n                    }\r\n                    else if (typeof arguments[i] == 'function') {\r\n                        onerror = arguments[i]\r\n                    }\r\n                    if (_status.video) break;\r\n                }\r\n                if (!lib.config.repeat_audio && _status.skillaudio.contains(str)) return;\r\n                _status.skillaudio.add(str);\r\n                game.addVideo('playAudio', null, str);\r\n                setTimeout(function () {\r\n                    _status.skillaudio.remove(str);\r\n                }, 1000);\r\n                var audio = document.createElement('audio');\r\n                audio.autoplay = true;\r\n                audio.volume = lib.config.volumn_audio / 8;\r\n                if (str.indexOf('.mp3') != -1 || str.indexOf('.ogg') != -1) {\r\n                    audio.src = lib.assetURL + 'audio' + str;\r\n                }\r\n                else {\r\n                    audio.src = lib.assetURL + 'audio' + str + '.mp3';\r\n                }\r\n                audio.addEventListener('ended', function () {\r\n                    this.remove();\r\n                });\r\n                audio.onerror = function () {\r\n                    if (this._changed) {\r\n                        this.remove();\r\n                        if (onerror) {\r\n                            onerror();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.src = lib.assetURL + 'audio' + str + '.ogg';\r\n                        this._changed = true;\r\n                    }\r\n                };\r\n                ui.window.appendChild(audio);\r\n                return audio;\r\n            },\r\n            trySkillAudio: function (skill, player, directaudio) {\r\n                game.broadcast(game.trySkillAudio, skill, player, directaudio);\r\n                var info = get.info(skill);\r\n                if (!info) return;\r\n                if ((!info.direct || directaudio) && lib.config.background_speak &&\r\n                    (!lib.skill.global.contains(skill) || lib.skill[skill].forceaudio)) {\r\n                    var audioname = skill;\r\n                    if (info.audioname2 && info.audioname2[player.name]) {\r\n                        audioname = info.audioname2[player.name];\r\n                        info = lib.skill[audioname];\r\n                    }\r\n                    var audioinfo = info.audio;\r\n                    if (typeof audioinfo == 'string' && lib.skill[audioinfo]) {\r\n                        audioname = audioinfo;\r\n                        audioinfo = lib.skill[audioname].audio;\r\n                    }\r\n                    if (typeof audioinfo == 'string') {\r\n                        if (audioinfo.indexOf('ext:') == 0) {\r\n                            audioinfo = audioinfo.split(':');\r\n                            if (audioinfo.length == 3) {\r\n                                if (audioinfo[2] == 'true') {\r\n                                    game.playAudio('..', 'extension', audioinfo[1], audioname);\r\n                                }\r\n                                else {\r\n                                    audioinfo[2] = parseInt(audioinfo[2]);\r\n                                    if (audioinfo[2]) {\r\n                                        game.playAudio('..', 'extension', audioinfo[1], audioname + Math.ceil(audioinfo[2] * Math.random()));\r\n                                    }\r\n                                }\r\n                            }\r\n                            return;\r\n                        }\r\n                    }\r\n                    else if (Array.isArray(audioinfo)) {\r\n                        audioname = audioinfo[0];\r\n                        audioinfo = audioinfo[1];\r\n                    }\r\n                    if (Array.isArray(info.audioname) && player) {\r\n                        if (info.audioname.contains(player.name)) {\r\n                            audioname += '_' + player.name;\r\n                        }\r\n                        else if (info.audioname.contains(player.name1)) {\r\n                            audioname += '_' + player.name1;\r\n                        }\r\n                        else if (info.audioname.contains(player.name2)) {\r\n                            audioname += '_' + player.name2;\r\n                        }\r\n                    }\r\n                    if (typeof audioinfo == 'number') {\r\n                        console.log(audioname)\r\n                        game.playAudio('skill', audioname + Math.ceil(audioinfo * Math.random()));\r\n                    }\r\n                    else if (audioinfo) {\r\n                        game.playAudio('skill', audioname);\r\n                    }\r\n                    else if ( true && info.audio !== false) {\r\n                        game.playSkillAudio(audioname);\r\n                    }\r\n                }\r\n            },\r\n            playSkillAudio: function (name, index) {\r\n                if (_status.video && arguments[1] != 'video') return;\r\n                if (!lib.config.repeat_audio && _status.skillaudio.contains(name)) return;\r\n                game.addVideo('playSkillAudio', null, name);\r\n                if (name.indexOf('|') < name.lastIndexOf('|')) {\r\n                    name = name.slice(name.lastIndexOf('|') + 1);\r\n                }\r\n                _status.skillaudio.add(name);\r\n                setTimeout(function () {\r\n                    _status.skillaudio.remove(name);\r\n                }, 1000);\r\n                var str = 'audio/skill/';\r\n                var audio = document.createElement('audio');\r\n                audio.autoplay = true;\r\n                audio.volume = lib.config.volumn_audio / 8;\r\n                audio.src = lib.assetURL + str + name + '.mp3';\r\n                audio.addEventListener('ended', function () {\r\n                    this.remove();\r\n                });\r\n                if (typeof index != 'number') {\r\n                    index = Math.ceil(Math.random() * 2);\r\n                }\r\n                audio._changed = 1;\r\n                audio.onerror = function () {\r\n                    switch (this._changed) {\r\n                        case 1: {\r\n                            audio.src = lib.assetURL + str + name + '.ogg';\r\n                            this._changed = 2;\r\n                            break;\r\n                        }\r\n                        case 2: {\r\n                            audio.src = lib.assetURL + str + name + index + '.mp3';\r\n                            this._changed = 3;\r\n                            break;\r\n                        }\r\n                        case 3: {\r\n                            audio.src = lib.assetURL + str + name + index + '.ogg';\r\n                            this._changed = 4;\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            this.remove();\r\n                        }\r\n                    }\r\n                };\r\n                ui.window.appendChild(audio);\r\n            },\r\n            playBackgroundMusic: function () {\r\n                if (lib.config.background_music == 'music_off') {\r\n                    ui.backgroundMusic.src = '';\r\n                }\r\n                else if (_status._aozhan == true && lib.config.mode_config.guozhan.aozhan_bgm != 'disabled') {\r\n                    var aozhan = lib.config.mode_config.guozhan.aozhan_bgm;\r\n                    ui.backgroundMusic.src = lib.assetURL + 'audio/background/aozhan_' + aozhan + '.mp3';\r\n                }\r\n                else {\r\n                    var music = lib.config.background_music;\r\n                    if (music == 'music_random') {\r\n                        music = lib.config.all.background_music.randomGet('music_off', 'music_random', _status.currentMusic);\r\n                    }\r\n                    _status.currentMusic = music;\r\n                    if (music == 'music_custom') {\r\n                        if (lib.config.background_music_src) {\r\n                            ui.backgroundMusic.src = lib.config.background_music_src;\r\n                        }\r\n                    }\r\n                    else {\r\n                        ui.backgroundMusic.src = lib.assetURL + 'audio/background/' + music + '.mp3';\r\n                    }\r\n                }\r\n            },\r\n            /**\r\n             * 导入包(卡牌|角色|拓展)\r\n             * @param {!string} type 类型\r\n             * @param {!function} content 载入内容的回调函数\r\n             */\r\n            import: function (type, content) {\r\n                if (type == 'extension') {\r\n                    game.loadExtension(content);\r\n                }\r\n                else {\r\n                    if (!lib.imported[type]) {\r\n                        lib.imported[type] = {};\r\n                    }\r\n                    var content2 = content(lib, game, ui, get, ai, _status);\r\n                    if (content2.name) {\r\n                        lib.imported[type][content2.name] = content2;\r\n                        delete content2.name;\r\n                    }\r\n                }\r\n            },\r\n            loadExtension: function (obj) {\r\n                var noeval = false;\r\n                if (typeof obj == 'function') {\r\n                    obj = obj(lib, game, ui, get, ai, _status);\r\n                    noeval = true;\r\n                }\r\n                {\r\n                    // function changeStep(content) {\r\n                    //     if (content instanceof Function) {\r\n                    //         let v = new Function('return ' + content.toString())()\r\n                    //         content = [];\r\n                    //         let str = v.toString();\r\n                    //         str = str.slice(str.indexOf('{') + 1);\r\n                    //         if (str.indexOf('step 0') == -1) {\r\n                    //             content[0] = new Function(str)\r\n                    //         }\r\n                    //         else {\r\n                    //             let keys = str.split('step ')\r\n                    //             for (let k = 0; k < keys.length; k++) {\r\n                    //                 content[k] = new Function(keys[k].slice(1))\r\n                    //             }\r\n                    //         }\r\n                    //     }\r\n                    // }\r\n                    // for (let i in obj.skill) {\r\n                    //     changeStep(obj.skill[i].content)\r\n                    //     changeStep(obj.skill[i].callback)\r\n                    //     changeStep(obj.skill[i].precontent)\r\n                    // }\r\n                    // for (let i in obj.card) {\r\n                    //     changeStep(obj.skill[i].content)\r\n                    // }\r\n                }\r\n                lib.extensionMenu['extension_' + obj.name] = {\r\n                    enable: {\r\n                        name: '开启',\r\n                        init: true\r\n                    }\r\n                };\r\n                if (obj.package && obj.package.author) {\r\n                    lib.extensionMenu['extension_' + obj.name].author = {\r\n                        name: '作者：' + obj.package.author,\r\n                        clear: true,\r\n                        nopointer: true,\r\n                    }\r\n                }\r\n                if (obj.package && obj.package.intro) {\r\n                    lib.extensionMenu['extension_' + obj.name].intro = {\r\n                        name: obj.package.intro,\r\n                        clear: true,\r\n                        nopointer: true,\r\n                    }\r\n                }\r\n                for (var i in obj.config) {\r\n                    lib.extensionMenu['extension_' + obj.name][i] = obj.config[i];\r\n                }\r\n                for (var i in obj.help) {\r\n                    lib.help[i] = obj.help[i];\r\n                }\r\n                if (obj.editable !== false && lib.config.show_extensionmaker) {\r\n                    lib.extensionMenu['extension_' + obj.name].edit = {\r\n                        name: '编辑此扩展',\r\n                        clear: true,\r\n                        onclick: function () {\r\n                            if (game.editExtension && lib.extensionPack && lib.extensionPack[obj.name]) {\r\n                                game.editExtension(obj.name);\r\n                            }\r\n                            else {\r\n                                alert('无法编辑未启用的扩展，请启用此扩展并重启后重试')\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                lib.extensionMenu['extension_' + obj.name].delete = {\r\n                    name: '删除此扩展',\r\n                    clear: true,\r\n                    onclick: function () {\r\n                        if (this.innerHTML == '<span>确认删除</span>') {\r\n                            var prefix = 'extension_' + obj.name;\r\n                            var page = this.parentNode;\r\n                            var start = page.parentNode.previousSibling;\r\n                            page.remove();\r\n                            if (start) {\r\n                                for (var i = 0; i < start.childElementCount; i++) {\r\n                                    if (start.childNodes[i].link == page) {\r\n                                        var active = false;\r\n                                        if (start.childNodes[i].classList.contains('active')) {\r\n                                            active = true;\r\n                                        }\r\n                                        start.childNodes[i].remove();\r\n                                        if (active) {\r\n                                            start.firstChild.classList.add('active');\r\n                                            start.nextSibling.appendChild(start.firstChild.link);\r\n                                        }\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            game.removeExtension(obj.name);\r\n                            if (obj.onremove) {\r\n                                obj.onremove();\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.innerHTML = '<span>确认删除</span>';\r\n                            var that = this;\r\n                            setTimeout(function () {\r\n                                that.innerHTML = '<span>删除此扩展</span>';\r\n                            }, 1000);\r\n                        }\r\n                    }\r\n                }\r\n        \r\n                if (!_status.importingExtension) {\r\n                    if (obj && lib.config['extension_' + obj.name + '_enable']) {\r\n                        if (!noeval) lib.init.eval(obj);\r\n                        var cfg = {};\r\n                        for (var j in lib.config) {\r\n                            if (j.indexOf('extension_' + obj.name) == 0 &&\r\n                                j != 'extension_' + obj.name) {\r\n                                cfg[j.slice(11 + obj.name.length)] = lib.config[j];\r\n                            }\r\n                        }\r\n                        try {\r\n                            if (obj.package) {\r\n                                lib.extensionPack[obj.name] = obj.package;\r\n                                lib.extensionPack[obj.name].files = obj.files || {};\r\n                                if (!lib.extensionPack[obj.name].files.character) {\r\n                                    lib.extensionPack[obj.name].files.character = [];\r\n                                }\r\n                                if (!lib.extensionPack[obj.name].files.card) {\r\n                                    lib.extensionPack[obj.name].files.card = [];\r\n                                }\r\n                                if (!lib.extensionPack[obj.name].files.skill) {\r\n                                    lib.extensionPack[obj.name].files.skill = [];\r\n                                }\r\n                            }\r\n                            else {\r\n                                lib.extensionPack[obj.name] = {};\r\n                            }\r\n                            lib.extensionPack[obj.name].code = {\r\n                                content: obj.content,\r\n                                precontent: obj.precontent,\r\n                                help: obj.help,\r\n                                config: obj.config\r\n                            }\r\n                            if (obj.precontent) {\r\n                                _status.extension = obj.name;\r\n                                obj.precontent(cfg);\r\n                                delete _status.extension;\r\n                            }\r\n                            if (obj.content) {\r\n                                lib.extensions.push([obj.name, obj.content, cfg, _status.evaluatingExtension, obj.package || {}]);\r\n                            }\r\n                        }\r\n                        catch (e) {\r\n                            console.log(e);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    game.importedPack = obj;\r\n                }\r\n            },\r\n            createDir: function (dir, success, error) {\r\n                var nullFC = function () { };\r\n                success = success || nullFC;\r\n                error = error || nullFC;\r\n                dir = dir.split(\"/\");\r\n                if (window.resolveLocalFileSystemURL) {\r\n                    window.resolveLocalFileSystemURL(lib.assetURL, function (entry) {\r\n                        (function redo(entry) {\r\n                            var i = dir.shift();\r\n                            entry.getDirectory(i, { create: true }, function (dirEntry) {\r\n                                if (dir.length) redo(dirEntry);\r\n                                else success();\r\n                            });\r\n                        })(entry);\r\n                    }, error);\r\n                }\r\n                else {\r\n                    var fs = __webpack_require__(/*! fs */ \"fs\");\r\n                    var str = __dirname;\r\n                    (function redo() {\r\n                        str += \"/\";\r\n                        str += dir.shift();\r\n                        fs.access(str, function (err) {\r\n                            if (!err) {\r\n                                //已存在此目录\r\n                                if (dir.length) redo();\r\n                                else success();\r\n                            }\r\n                            else {\r\n                                fs.mkdir(str, function () {\r\n                                    if (dir.length) redo();\r\n                                    else success();\r\n                                });\r\n                            }\r\n                        });\r\n                    })();\r\n                }\r\n            },\r\n            importExtension: function (data, finishLoad, exportext, pkg) {\r\n                if (!window.JSZip) {\r\n                    lib.init.js(lib.assetURL + 'game', 'jszip', function () {\r\n                        game.importExtension(data, finishLoad, exportext, pkg);\r\n                    });\r\n                }\r\n                else if (get.objtype(data) == 'object') {\r\n                    //导出\r\n                    var zip = new JSZip();\r\n                    var filelist = [];\r\n                    var filelist2 = [];\r\n                    if (data._filelist) {\r\n                        filelist2 = data._filelist;\r\n                        delete data._filelist;\r\n                    }\r\n                    for (var i in data) {\r\n                        zip.file(i, data[i]);\r\n                        filelist.push(i);\r\n                    }\r\n                    if (exportext) {\r\n                        if (pkg) {\r\n                            filelist.remove('extension.js');\r\n                            pkg.files = filelist.slice(0);\r\n                            pkg.files.addArray(filelist2);\r\n                            pkg.size = zip.generate({ type: \"arraybuffer\" }).byteLength;\r\n                            if (pkg.size < 1000) {\r\n                                pkg.size = pkg.size + 'B';\r\n                            }\r\n                            else if (pkg.size < 1000000) {\r\n                                pkg.size = Math.round(pkg.size / 1000) + 'KB';\r\n                            }\r\n                            else {\r\n                                pkg.size = Math.round(pkg.size / 100000) / 10 + 'MB';\r\n                            }\r\n                            var pkgstr = 'extension[\"' + exportext + '\"]={\\n';\r\n                            for (var i in pkg) {\r\n                                var pkgfrag;\r\n                                if (i == 'files') {\r\n                                    var pkgjs = JSON.stringify(pkg[i]);\r\n                                    var pkgfrag = '';\r\n                                    var pkgbuffer = 0;\r\n                                    for (var j = 0; j < pkgjs.length; j++) {\r\n                                        pkgfrag += pkgjs[j];\r\n                                        pkgbuffer++;\r\n                                        if (pkgbuffer >= 80 && pkgjs[j] == ',' && pkgjs[j - 1] == '\"') {\r\n                                            pkgfrag += '\\n\\t\\t';\r\n                                            pkgbuffer = 0;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    pkgfrag = JSON.stringify(pkg[i]);\r\n                                }\r\n                                pkgstr += '\\t' + i + ':' + pkgfrag + ',\\n'\r\n                            }\r\n                            pkgstr = pkgstr.slice(0, pkgstr.length - 2);\r\n                            pkgstr += '\\n};';\r\n                            zip.file('package.js', pkgstr);\r\n                        }\r\n                        var blob = zip.generate({ type: \"blob\" });\r\n                        var fileNameToSaveAs = exportext;\r\n                        fileNameToSaveAs = fileNameToSaveAs.replace(/\\\\|\\/|\\:|\\?|\\\"|\\*|<|>|\\|/g, '.');\r\n                        fileNameToSaveAs += '.zip';\r\n        \r\n                        if (lib.device) {\r\n                            var directory;\r\n                            if (lib.device == 'android') {\r\n                                directory = cordova.file.externalDataDirectory;\r\n                            }\r\n                            else {\r\n                                directory = cordova.file.documentsDirectory;\r\n                            }\r\n                            window.resolveLocalFileSystemURL(directory, function (entry) {\r\n                                entry.getFile(fileNameToSaveAs, { create: true }, function (fileEntry) {\r\n                                    fileEntry.createWriter(function (fileWriter) {\r\n                                        fileWriter.onwriteend = function () {\r\n                                            alert('文件已导出至' + directory + fileNameToSaveAs);\r\n                                        }\r\n                                        fileWriter.write(blob)\r\n                                    });\r\n                                });\r\n                            });\r\n                        }\r\n                        else {\r\n                            var downloadLink = document.createElement(\"a\");\r\n                            downloadLink.download = fileNameToSaveAs;\r\n                            downloadLink.innerHTML = \"Download File\";\r\n                            downloadLink.href = window.URL.createObjectURL(blob);\r\n                            downloadLink.click();\r\n                        }\r\n        \r\n                        if (typeof finishLoad == 'function') {\r\n                            finishLoad();\r\n                        }\r\n                    }\r\n                    else {\r\n                        game.importExtension.apply(this, [zip.generate({ type: 'arraybuffer' }), finishLoad]);\r\n                    }\r\n                }\r\n                else {\r\n                    //导入\r\n                    function UHP() {\r\n                        alert(\"导入失败\");\r\n                    };\r\n                    var zip = new JSZip();\r\n                    try {\r\n                        zip.loadAsync(data).then(zip => {\r\n                            zip.file('extension.js').async(\"string\").then(str => {\r\n                                _status.importingExtension = true;\r\n                                eval(str)\r\n                                _status.importingExtension = false;\r\n                                if (!game.importedPack) throw ('err');\r\n                                let extname = game.importedPack.name;\r\n                                if (lib.config.all.plays.contains(extname)) {\r\n                                    throw ('禁止安装游戏原生扩展');\r\n                                }\r\n                                if (lib.config.extensions.contains(extname)) {\r\n                                    game.removeExtension(extname, true);\r\n                                }\r\n                                lib.config.extensions.add(extname);\r\n                                game.saveConfig('extensions', lib.config.extensions);\r\n                                game.saveConfig('extension_' + extname + '_enable', true);\r\n                                for (let i in game.importedPack.config) {\r\n                                    if (game.importedPack.config[i] && game.importedPack.config[i].hasOwnProperty('init')) {\r\n                                        game.saveConfig('extension_' + extname + '_' + i, game.importedPack.config[i].init);\r\n                                    }\r\n                                }\r\n                                if (game.download) {\r\n                                    let filelist = [];\r\n                                    for (let i in zip.files) {\r\n                                        //alert(zip.files[i].dir+i)\r\n                                        if (!zip.files[i].dir && i[0] != '.' && i[0] != '_') {\r\n                                            filelist.push(i);\r\n                                        }\r\n                                    }\r\n                                    //alert(filelist)\r\n                                    if (lib.node && lib.node.fs) {\r\n                                        //电脑端\r\n                                        //具备nodeJS环境\r\n                                        game.ensureDirectory('extension/' + extname, function () {\r\n                                            let writeFile = function (e) {\r\n                                                if (e) {\r\n                                                    finishLoad();\r\n                                                    UHP();\r\n                                                    return;\r\n                                                }\r\n                                                if (filelist.length) {\r\n                                                    let filename = filelist.shift();\r\n                                                    //filename 数组 ...dir+/+file\r\n                                                    let zipdir = filename;\r\n                                                    filename = filename.split(\"/\");\r\n                                                    let name = filename.pop();\r\n                                                    if (filename.length) game.createDir(`extension/${extname}/${filename.join(\"/\")}`, function () {\r\n                                                        //这里需要个创文件夹的函数\r\n                                                        Letgo(`${filename.join(\"/\")}/${name}`);\r\n                                                    }, UHP);\r\n                                                    else Letgo(name);\r\n                                                    function Letgo(name) {\r\n                                                        zip.file(zipdir).async('nodebuffer').then(str => {\r\n                                                            lib.node.fs.writeFile(`${__dirname}/extension/${extname}/${name}`, str, null, writeFile);\r\n                                                        })\r\n                                                    }\r\n                                                }\r\n                                                else {\r\n                                                    finishLoad();\r\n                                                }\r\n                                            }\r\n                                            writeFile();\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        window.resolveLocalFileSystemURL(lib.assetURL, function (entry) {\r\n                                            entry.getDirectory('extension/' + extname, { create: true }, function (dirEntry) {\r\n                                                //扩展文件夹\r\n                                                writeFile();\r\n                                                function writeFile() {\r\n                                                    if (filelist.length) {\r\n                                                        let filename = filelist.shift();\r\n                                                        //filename 数组 ...dir+/+file\r\n                                                        let zipdir = filename;\r\n                                                        filename = filename.split(\"/\");\r\n                                                        let name = filename.pop();\r\n                                                        if (filename.length) game.createDir(`extension/${extname}/${filename.join(\"/\")}`, function () {\r\n                                                            Letgo(`${filename.join(\"/\")}/${name}`);\r\n                                                        }, UHP);\r\n                                                        else Letgo(name);\r\n                                                        function Letgo(name) {\r\n                                                            dirEntry.getFile(name, { create: true }, function (fileEntry) {\r\n                                                                fileEntry.createWriter(function (fileWriter) {\r\n                                                                    fileWriter.onwriteend = writeFile;\r\n                                                                    zip.file(zipdir).async(\"arraybuffer\").then(str => {\r\n                                                                        fileWriter.write(str);\r\n                                                                    })\r\n                                                                });\r\n                                                            }, UHP);\r\n                                                        }\r\n                                                    }\r\n                                                    else {\r\n                                                        finishLoad();\r\n                                                    }\r\n                                                };\r\n                \r\n                                            });\r\n                                        });\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    localStorage.setItem(`${lib.configprefix}extension_${extname}`, str);\r\n                                    let imglist = [];\r\n                                    for (let i in zip.files) {\r\n                                        if (i[0] != '.' && i[0] != '_') {\r\n                                            if (i.indexOf('.jpg') != -1 || i.indexOf('.png') != -1) {\r\n                                                imglist.push(i);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (imglist.length && lib.db) {\r\n                                        lib.config.extensionInfo[extname] = {\r\n                                            image: imglist\r\n                                        }\r\n                                        game.saveConfig('extensionInfo', lib.config.extensionInfo);\r\n                                        for (let i = 0; i < imglist.length; i++) {\r\n                                            let imgname = imglist[i];\r\n                                            zip.file(imgname).async(\"arraybuffer\").then(str => {\r\n                                                let blob = new Blob([str]);\r\n                                                let fileReader = new FileReader();\r\n                                                console.log(imgname,str,blob)\r\n                                                fileReader.onload = (function (imgname) {\r\n                                                    return function (fileLoadedEvent) {\r\n                                                        let data = fileLoadedEvent.target.result;\r\n                                                        game.putDB('image', `extension-${extname}:${imgname}`, data);\r\n                                                    };\r\n                                                }(imgname))\r\n                                                fileReader.readAsDataURL(blob);\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                    finishLoad();\r\n                                }\r\n                                delete game.importedPack;\r\n                            }).catch(reason => {\r\n                                if (!str) throw (`你导入的不是扩展！请选择正确的文件:\\n ${reason}`);\r\n                            })\r\n                        })\r\n                    }\r\n                    catch (e) {\r\n                        console.log(e);\r\n                        alert('导入失败');\r\n                        return false;\r\n                    }\r\n                }\r\n            },\r\n            export: function (textToWrite, name) {\r\n                let textFileAsBlob = new Blob([textToWrite], { type: 'text/plain' });\r\n                let fileNameToSaveAs = name || 'noname';\r\n                fileNameToSaveAs = fileNameToSaveAs.replace(/\\\\|\\/|\\:|\\?|\\\"|\\*|<|>|\\|/g, '.');\r\n        \r\n                if (lib.device) {\r\n                    let directory;\r\n                    if (lib.device == 'android') {\r\n                        directory = cordova.file.externalDataDirectory;\r\n                    }\r\n                    else {\r\n                        directory = cordova.file.documentsDirectory;\r\n                    }\r\n                    window.resolveLocalFileSystemURL(directory, function (entry) {\r\n                        entry.getFile(fileNameToSaveAs, { create: true }, function (fileEntry) {\r\n                            fileEntry.createWriter(function (fileWriter) {\r\n                                fileWriter.onwriteend = function () {\r\n                                    alert('文件已导出至' + directory + fileNameToSaveAs);\r\n                                }\r\n                                fileWriter.write(textFileAsBlob)\r\n                            });\r\n                        });\r\n                    });\r\n                }\r\n                else {\r\n                    let downloadLink = document.createElement(\"a\");\r\n                    downloadLink.download = fileNameToSaveAs;\r\n                    downloadLink.innerHTML = \"Download File\";\r\n                    downloadLink.href = window.URL.createObjectURL(textFileAsBlob);\r\n                    downloadLink.click();\r\n                }\r\n            },\r\n            multiDownload2: function (list, onsuccess, onerror, onfinish, process, dev) {\r\n                list = list.slice(0);\r\n                let download = function () {\r\n                    if (list.length) {\r\n                        let current = list.shift();\r\n                        let current2;\r\n                        if (typeof process == 'function') {\r\n                            current2 = process(current);\r\n                        }\r\n                        else {\r\n                            current2 = current;\r\n                        }\r\n                        if (current.indexOf('theme') == 0) {\r\n                            game.print(current.slice(6));\r\n                        }\r\n                        else if (current.indexOf('image/skin') == 0) {\r\n                            game.print(current.slice(11));\r\n                        }\r\n                        else {\r\n                            game.print(current.slice(current.lastIndexOf('/') + 1));\r\n                        }\r\n                        game.download(current, current2, function () {\r\n                            if (onsuccess) onsuccess(list.length);\r\n                            download();\r\n                        }, function () {\r\n                            if (onerror) onerror(list.length);\r\n                            download();\r\n                        }, dev);\r\n                    }\r\n                    else {\r\n                        if (onfinish) onfinish();\r\n                    }\r\n                }\r\n                download();\r\n            },\r\n            multiDownload: function (list, onsuccess, onerror, onfinish, process, dev) {\r\n                if (lib.config.dev) game.print(get.url());\r\n                var args = Array.from(arguments);\r\n                if (list.length <= 3) {\r\n                    game.multiDownload2.apply(this, args);\r\n                }\r\n                else {\r\n                    var num = Math.round(list.length / 3);\r\n                    var left = 3;\r\n                    args[3] = function () {\r\n                        left--;\r\n                        if (left == 0) {\r\n                            onfinish();\r\n                        }\r\n                    };\r\n                    setTimeout(function () {\r\n                        args[0] = list.slice(0, num); game.multiDownload2.apply(game, args);\r\n                    });\r\n                    setTimeout(function () {\r\n                        args[0] = list.slice(num, 2 * num); game.multiDownload2.apply(this, args);\r\n                    }, 200);\r\n                    setTimeout(function () {\r\n                        args[0] = list.slice(2 * num); game.multiDownload2.apply(this, args);\r\n                    }, 400);\r\n                }\r\n            },\r\n            fetch: function (url, onload, onerror, onprogress) {\r\n                var tmpName = '~tmp' + get.id();\r\n                game.download(encodeURI(url), tmpName, function () {\r\n                    game.readFile(tmpName, function (data) {\r\n                        onload(data);\r\n                        game.removeFile(tmpName);\r\n                    }, onerror);\r\n                }, onerror, null, onprogress);\r\n            },\r\n            playVideo: function (time, mode) {\r\n                if (!_status.replayvideo) {\r\n                    localStorage.setItem(lib.configprefix + 'playbackmode', lib.config.mode);\r\n                }\r\n                game.saveConfig('mode', mode);\r\n                localStorage.setItem(lib.configprefix + 'playback', time);\r\n                game.reload();\r\n            },\r\n            playVideoContent: function (video) {\r\n                var next = game.createEvent('video', false);\r\n                next.video = video;\r\n                ui.system.style.display = 'none';\r\n                ui.system.hide();\r\n                ui.arena.style.display = 'none';\r\n                ui.arena.hide();\r\n                ui.window.classList.remove('leftbar');\r\n                ui.window.classList.remove('rightbar');\r\n                ui.historybar.style.display = 'none';\r\n                _status.event = next;\r\n                _status.paused = false;\r\n                _status.paused2 = false;\r\n                _status.over = false;\r\n                _status.video = true;\r\n                clearTimeout(_status.timeout);\r\n        \r\n                for (var i in lib.characterPack) {\r\n                    for (var j in lib.characterPack[i]) {\r\n                        lib.character[j] = lib.character[j] || lib.characterPack[i][j];\r\n                    }\r\n                }\r\n                next.setContent('playVideoContent');\r\n                game.loop();\r\n            },\r\n            /**\r\n             * 一些函数的回放实现(录像功能)\r\n             * @type {!Object}\r\n             */\r\n            videoContent: {\r\n                arrangeLib: function (content) {\r\n                    for (var i in content) {\r\n                        for (var j in content[i]) {\r\n                            lib[i][j] = content[i][j];\r\n                        }\r\n                    }\r\n                },\r\n                jiuNode: function (player, bool) {\r\n                    //Powered by 升麻\r\n                    if (bool) {\r\n                        if (!player.node.jiu && lib.config.jiu_effect) {\r\n                            player.node.jiu = ui.create.div('.playerjiu', player.node.avatar);\r\n                            player.node.jiu2 = ui.create.div('.playerjiu', player.node.avatar2);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (player.node.jiu) {\r\n                            player.node.jiu.delete();\r\n                            player.node.jiu2.delete();\r\n                            delete player.node.jiu;\r\n                            delete player.node.jiu2;\r\n                        }\r\n                    }\r\n                },\r\n                init: function (players) {\r\n                    if (game.chess) return;\r\n                    if (lib.config.mode == 'versus') {\r\n                        players.bool = players.pop();\r\n                    }\r\n                    ui.arena.setNumber(players.length);\r\n                    ui.arena.classList.add('video');\r\n                    game.players.length = 0;\r\n                    game.dead.length = 0;\r\n                    ui.create.players(players.length);\r\n                    game.me = game.players[0];\r\n                    ui.handcards1 = game.me.node.handcards1;\r\n                    ui.handcards2 = game.me.node.handcards2;\r\n                    ui.handcards1Container.appendChild(ui.handcards1);\r\n                    ui.handcards2Container.appendChild(ui.handcards2);\r\n                    if (lib.config.mode == 'versus') {\r\n                        if (players.bool) {\r\n                            ui.arena.setNumber(parseInt(ui.arena.dataset.number) + 1);\r\n                            for (var i = 0; i < game.players.length; i++) {\r\n                                game.players[i].dataset.position = parseInt(game.players[i].dataset.position) + 1;\r\n                            }\r\n                            game.singleHandcard = true;\r\n                            ui.arena.classList.add('single-handcard');\r\n                            ui.window.classList.add('single-handcard');\r\n                            ui.fakeme = ui.create.div('.fakeme.avatar', ui.me);\r\n                        }\r\n                        ui.arena.style.display = '';\r\n                        ui.refresh(ui.arena);\r\n                        ui.arena.show();\r\n                    }\r\n                    else if (lib.config.mode == 'boss') {\r\n                        if (!players.boss) {\r\n                            game.singleHandcard = true;\r\n                            ui.arena.classList.add('single-handcard');\r\n                            ui.window.classList.add('single-handcard');\r\n                            ui.fakeme = ui.create.div('.fakeme.avatar', ui.me);\r\n                        }\r\n                        ui.arena.setNumber(8);\r\n                    }\r\n                    ui.updatehl();\r\n                    for (var i = 0; i < players.length; i++) {\r\n                        if (lib.config.mode == 'identity') {\r\n                            game.players[i].init(players[i].name, players[i].name2);\r\n                            game.players[i].setIdentity(players[i].identity);\r\n                        }\r\n                        else if (lib.config.mode == 'doudizhu' || lib.config.mode == 'longlaoguan' || lib.config.mode == 'single') {\r\n                            game.players[i].init(players[i].name, players[i].name2);\r\n                            game.players[i].setIdentity(players[i].identity);\r\n                        }\r\n                        else if (lib.config.mode == 'stone') {\r\n                            game.players[i].init(players[i].name, players[i].name2);\r\n                            game.players[i].classList.add('noidentity');\r\n                            game.players[i].updateActCount(null, players[i].count, 0);\r\n                        }\r\n                        else if (lib.config.mode == 'boss') {\r\n                            game.players[i].init(players[i].name, players[i].name2);\r\n                            game.players[i].setIdentity(players[i].identity);\r\n                            game.players[i].dataset.position = players[i].position;\r\n                            game.players[i].node.action.innerHTML = '行动';\r\n                        }\r\n                        else if (lib.config.mode == 'versus') {\r\n                            game.players[i].init(players[i].name, players[i].name2);\r\n                            game.players[i].node.identity.firstChild.innerHTML = players[i].identity;\r\n                            game.players[i].node.identity.dataset.color = players[i].color;\r\n                            game.players[i].node.action.innerHTML = '行动';\r\n                        }\r\n                        else if (lib.config.mode == 'guozhan') {\r\n                            game.players[i].name = players[i].name;\r\n                            game.players[i].name1 = players[i].name1;\r\n                            game.players[i].name2 = players[i].name2;\r\n        \r\n                            game.players[i].sex = 'unknown';\r\n                            game.players[i].identity = 'unknown';\r\n        \r\n                            lib.translate[game.players[i].name] = players[i].translate;\r\n                            game.players[i].init(players[i].name1, players[i].name2);\r\n        \r\n                            game.players[i].classList.add('unseen_v');\r\n                            game.players[i].classList.add('unseen2_v');\r\n                            if (game.players[i] != game.me) {\r\n                                game.players[i].node.identity.firstChild.innerHTML = '猜';\r\n                                game.players[i].node.identity.dataset.color = 'unknown';\r\n                            }\r\n                            else {\r\n                                game.players[i].setIdentity(game.players[i].group);\r\n                            }\r\n                        }\r\n                    }\r\n                    for (var i = 0; i < game.players.length; i++) {\r\n                        game.playerMap[game.players[i].dataset.position] = game.players[i];\r\n                    }\r\n        \r\n                    if (lib.config.mode == 'versus') {\r\n                        if (players.bool) {\r\n                            game.onSwapControl();\r\n                        }\r\n                    }\r\n                    else if (lib.config.mode == 'boss') {\r\n                        if (!players.boss) {\r\n                            game.onSwapControl();\r\n                        }\r\n                        ui.arena.style.display = '';\r\n                        ui.refresh(ui.arena);\r\n                        ui.arena.show();\r\n                        ui.updatehl();\r\n                    }\r\n                },\r\n                newcard: function (content) {\r\n                    if (content) {\r\n                        lib.translate[content.name] = content.translate;\r\n                        lib.translate[content.name + '_info'] = content.info;\r\n                        lib.card[content.name] = {};\r\n                        lib.card[content.name].cardimage = content.card\r\n                        for (var i in lib.card[content.card]) {\r\n                            lib.card[content.name][i] = lib.card[content.card][i];\r\n                        }\r\n                        if (content.legend) {\r\n                            lib.card[content.name].legend = true;\r\n                        }\r\n                        else if (content.epic) {\r\n                            lib.card[content.name].epic = true;\r\n                        }\r\n                        else if (content.unique) {\r\n                            lib.card[content.name].unique = true;\r\n                        }\r\n                    }\r\n                },\r\n                changeLand: function (player, url) {\r\n                    game.changeLand(url, player);\r\n                },\r\n                destroyLand: function () {\r\n                    if (ui.land) {\r\n                        ui.land.destroy();\r\n                    }\r\n                },\r\n                playAudio: function (str) {\r\n                    game.playAudio(str, 'video');\r\n                },\r\n                playSkillAudio: function (name) {\r\n                    game.playSkillAudio(name, 'video');\r\n                },\r\n                phaseChange: function (player) {\r\n                    if (player) {\r\n                        var glowing = document.querySelector('.glow_phase');\r\n                        if (glowing) {\r\n                            glowing.classList.remove('glow_phase');\r\n                        }\r\n                        if (lib.config.glow_phase) {\r\n                            player.classList.add('glow_phase');\r\n                            // player.dataset.glow_phase=lib.config.glow_phase;\r\n                        }\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                playerfocus: function (player, time) {\r\n                    if (player && player.playerfocus) {\r\n                        player.playerfocus(time);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                playerfocus2: function () {\r\n                    ui.arena.classList.add('playerfocus');\r\n                    setTimeout(function () {\r\n                        ui.arena.classList.remove('playerfocus');\r\n                    }, 1500)\r\n                },\r\n                identityText: function (player, str) {\r\n                    if (player && str) {\r\n                        player.node.identity.firstChild.innerHTML = str;\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                identityColor: function (player, str) {\r\n                    if (player && str) {\r\n                        player.node.identity.dataset.color = str;\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                chessSwap: function (content) {\r\n                    var me = game.playerMap[content[0]];\r\n                    var player = game.playerMap[content[1]];\r\n                    if (me) {\r\n                        me.classList.remove('current_action');\r\n                    }\r\n                    if (player) {\r\n                        player.classList.add('current_action');\r\n                    }\r\n                },\r\n                chessgainmod: function (player, num) {\r\n                    if (Array.isArray(num)) {\r\n                        num = get.infoCards(num);\r\n                    }\r\n                    if (player && player.$gainmod) {\r\n                        player.$gainmod(num);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                moveTo: function (player, pos) {\r\n                    if (player && player.moveTo && pos) {\r\n                        player.moveTo(pos[0], pos[1]);\r\n                    }\r\n                    else {\r\n                        console.log(player)\r\n                    }\r\n                },\r\n                addObstacle: function (pos) {\r\n                    if (pos) {\r\n                        game.addObstacle(pos[0], pos[1]);\r\n                    }\r\n                },\r\n                removeObstacle: function (pos) {\r\n                    game.removeObstacle(pos);\r\n                },\r\n                moveObstacle: function (pos) {\r\n                    if (pos) {\r\n                        game.moveObstacle(pos[0], pos[1], pos[2]);\r\n                    }\r\n                },\r\n                colorObstacle: function (pos) {\r\n                    if (pos) {\r\n                        game.colorObstacle(pos[0], pos[1]);\r\n                    }\r\n                },\r\n                thrownhighlight1: function () {\r\n                    ui.arena.classList.add('thrownhighlight');\r\n                },\r\n                thrownhighlight2: function () {\r\n                    ui.arena.classList.remove('thrownhighlight');\r\n                },\r\n                chessFocus: function (player) {\r\n                    if (player) {\r\n                        player.chessFocus();\r\n                    }\r\n                    else {\r\n                        console.log('chessFocus');\r\n                    }\r\n                },\r\n                removeTreasure: function (pos) {\r\n                    if (game.playerMap[pos]) {\r\n                        game.playerMap[pos].delete();\r\n                        delete game.playerMap[pos];\r\n                    }\r\n                    else {\r\n                        console.log(pos);\r\n                    }\r\n                },\r\n                initobs: function (obs) {\r\n                    if (obs) {\r\n                        for (var i = 0; i < obs.length; i++) {\r\n                            game.addObstacle(obs[i]);\r\n                        }\r\n                    }\r\n                    else {\r\n                        console.log(obs);\r\n                    }\r\n                },\r\n                stonePosition: function (content) {\r\n                    var player = game.playerMap[content[0]];\r\n                    if (player) {\r\n                        delete game.playerMap[content[0]];\r\n                        player.dataset.position = content[1];\r\n                        game.playerMap[content[1]] = player;\r\n                    }\r\n                    else {\r\n                        console.log(content);\r\n                    }\r\n                },\r\n                bossSwap: function (player, name) {\r\n                    if (player && name) {\r\n                        player.delete();\r\n                        var noboss = false;\r\n                        if (name[0] == '_') {\r\n                            name = name.slice(1);\r\n                            noboss = true;\r\n                        }\r\n                        var boss = ui.create.player().init(name);\r\n                        boss.dataset.position = player.dataset.position;\r\n                        game.playerMap[player.dataset.position] = boss;\r\n                        if (game.me == player) {\r\n                            game.me = boss;\r\n                        }\r\n                        game.players.push(boss);\r\n                        game.arrangePlayers();\r\n                        if (!noboss) {\r\n                            game.boss = boss;\r\n                            boss.setIdentity('zhu');\r\n                            boss.identity = 'zhu';\r\n                        }\r\n                        else {\r\n                            boss.setIdentity('zhong');\r\n                            boss.identity = 'zhong';\r\n                        }\r\n                        ui.arena.appendChild(boss.animate('zoominanim'));\r\n                    }\r\n                },\r\n                stoneSwap: function (info) {\r\n                    var player = ui.create.player();\r\n                    player.classList.add('noidentity');\r\n                    player.dataset.position = info.position;\r\n                    player.animate(info.me ? 'replaceme' : 'replaceenemy');\r\n                    player.actcount = info.actcount;\r\n                    player.init(info.name, info.name2);\r\n                    game.players.push(player);\r\n                    player.updateActCount(null, info.actcount, 0);\r\n                    ui.arena.appendChild(player);\r\n                    game.playerMap[player.dataset.position] = player;\r\n                    game.arrangePlayers();\r\n                },\r\n                chess_tongshuai: function (player, content) {\r\n                    if (player && player.storage) {\r\n                        player.storage.tongshuai.owned = content;\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                chess_tongshuai_skill: function (player, content) {\r\n                    if (player && content) {\r\n                        if (player.marks.tongshuai.firstChild) {\r\n                            player.marks.tongshuai.firstChild.remove();\r\n                        }\r\n                        player.marks.tongshuai.setBackground(content[0], 'character');\r\n                        player.additionalSkills.tongshuai = content[1];\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                smoothAvatar: function (player, vice) {\r\n                    if (player && player.node) {\r\n                        if (vice) {\r\n                            if (player.node.avatar2) {\r\n                                player.smoothAvatar(vice);\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (player.node.avatar) {\r\n                                player.smoothAvatar(vice);\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                setAvatar: function (player, content) {\r\n                    if (player && content && content.length == 2) {\r\n                        player.setAvatar(content[0], content[1])\r\n                    }\r\n                },\r\n                setAvatarQueue: function (player, content) {\r\n                    if (player && content && content.length == 2) {\r\n                        player.setAvatarQueue(content[0], content[1])\r\n                    }\r\n                },\r\n                addSubPlayer: function (player, content) {\r\n                    if (player && content && content[0] && content[1] &&\r\n                        content[2] && content[3] && content[4]) {\r\n                        var skill = content[0];\r\n                        lib.skill[skill] = content[1];\r\n                        lib.character[skill] = content[2];\r\n                        lib.translate[skill] = content[3];\r\n                        player.storage[skill] = content[4];\r\n                    }\r\n                },\r\n                arenaNumber: function (content) {\r\n                    ui.arena.dataset.number = content;\r\n                },\r\n                reinit: function (source, content) {\r\n                    if (source && content) {\r\n                        source.uninit();\r\n                        source.init(content[0]);\r\n                        source.node.identity.dataset.color = content[1];\r\n                    }\r\n                    else {\r\n                        console.log(source);\r\n                    }\r\n                },\r\n                reinit2: function (source, name) {\r\n                    if (source && name) {\r\n                        source.init(name);\r\n                    }\r\n                    else {\r\n                        console.log(source);\r\n                    }\r\n                },\r\n                reinit3: function (source, content) {\r\n                    if (source && content) {\r\n                        var info1 = lib.character[content.from];\r\n                        var info2 = lib.character[content.to];\r\n                        if (content.avatar2) {\r\n                            source.name2 = content.to;\r\n                            if (source.isUnseen(0)) {\r\n                                source.sex = info2[0];\r\n                            }\r\n                            source.node.avatar2.setBackground(content.to, 'character');\r\n                            source.node.name2.innerHTML = get.slimName(content.to);\r\n                        }\r\n                        else {\r\n                            source.name = content.to;\r\n                            source.sex = info2[0];\r\n                            source.node.avatar.setBackground(content.to, 'character');\r\n                            source.node.name.innerHTML = get.slimName(content.to);\r\n                        }\r\n                        source.maxHp = content.hp;\r\n                        this.update();\r\n                        for (var i = 0; i < info1[3].length; i++) {\r\n                            source.removeSkill(info1[3][i]);\r\n                        }\r\n                        for (var i = 0; i < info2[3].length; i++) {\r\n                            source.addSkill(info2[3][i]);\r\n                        }\r\n                    }\r\n                },\r\n                skill: function (player, content) {\r\n                    if (typeof content == 'string') {\r\n                        lib.skill[content].video(player);\r\n                    }\r\n                    else if (Array.isArray(content)) {\r\n                        lib.skill[content[0]].video(player, content[1]);\r\n                    }\r\n                    else {\r\n                        console.log(player, content)\r\n                    }\r\n                },\r\n                addFellow: function (content) {\r\n                    var player = game.addFellow(content[0], content[1], content[2]);\r\n                    game.playerMap[player.dataset.position] = player;\r\n                },\r\n                windowzoom1: function () {\r\n                    ui.window.style.transition = 'all 0.5s';\r\n                    ui.window.classList.add('zoomout3');\r\n                    ui.window.hide();\r\n                },\r\n                windowzoom2: function () {\r\n                    ui.window.style.transition = 'all 0s';\r\n                    ui.refresh(ui.window);\r\n                },\r\n                windowzoom3: function () {\r\n                    ui.window.classList.remove('zoomout3');\r\n                    ui.window.classList.add('zoomin3');\r\n                },\r\n                windowzoom4: function () {\r\n                    ui.window.style.transition = 'all 0.5s';\r\n                    ui.refresh(ui.window);\r\n                    ui.window.show();\r\n                    ui.window.classList.remove('zoomin3');\r\n                },\r\n                windowzoom5: function () {\r\n                    ui.window.style.transition = '';\r\n                },\r\n                updateActCount: function (player, content) {\r\n                    if (player && content) {\r\n                        player.updateActCount(content[0], content[1], content[2]);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                setIdentity: function (player, identity) {\r\n                    if (player && identity) {\r\n                        player.setIdentity(identity);\r\n                    }\r\n                    else {\r\n                        console.log(num);\r\n                    }\r\n                },\r\n                showCharacter: function (player, num) {\r\n                    if (player && player.classList) {\r\n                        switch (num) {\r\n                            case 0:\r\n                                player.classList.remove('unseen_v');\r\n                                break;\r\n                            case 1:\r\n                                player.classList.remove('unseen2_v');\r\n                                break;\r\n                            case 2:\r\n                                player.classList.remove('unseen_v');\r\n                                player.classList.remove('unseen2_v');\r\n                                break;\r\n                        }\r\n                        if (!player.classList.contains('unseen_v') && (!player.name2 || !player.classList.contains('unseen2_v')) && player.storage.nohp) {\r\n                            delete player.storage.nohp;\r\n                            player.node.hp.show();\r\n                            player.update();\r\n                        }\r\n                    }\r\n                    else {\r\n                        console.log(num);\r\n                    }\r\n                },\r\n                hidePlayer: function (player) {\r\n                    if (player) {\r\n                        player.hide();\r\n                    }\r\n                },\r\n                deleteHandcards: function (player) {\r\n                    if (player) {\r\n                        player.node.handcards1.delete();\r\n                        player.node.handcards2.delete();\r\n                    }\r\n                },\r\n                hideCharacter: function (player, num) {\r\n                    if (player && player.classList) {\r\n                        switch (num) {\r\n                            case 0:\r\n                                player.classList.add('unseen_v');\r\n                                break;\r\n                            case 1:\r\n                                player.classList.add('unseen2_v');\r\n                                break;\r\n                            case 2:\r\n                                player.classList.add('unseen_v');\r\n                                player.classList.add('unseen2_v');\r\n                                break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        console.log(num);\r\n                    }\r\n                },\r\n                popup: function (player, info) {\r\n                    if (player && info) {\r\n                        player.popup(info[0], info[1]);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                log: function (str) {\r\n                    game.log(str);\r\n                },\r\n                draw: function (player, info) {\r\n                    if (player && player.$draw) {\r\n                        player.$draw(info);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                drawCard: function (player, info) {\r\n                    if (player && info) {\r\n                        player.$draw(get.infoCards(info));\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                throw: function (player, info) {\r\n                    if (player && info) {\r\n                        player.$throw(get.infoCards(info[0]), info[1], null, info[2]);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                compare: function (player, info) {\r\n                    if (player && info) {\r\n                        player.$compare(get.infoCard(info[0]), game.playerMap[info[1]], get.infoCard(info[2]));\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                compareMultiple: function (player, info) {\r\n                    if (player && info) {\r\n                        player.$compareMultiple(get.infoCard(info[0]), get.infoTargets(info[1]), get.infoCards(info[2]));\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                give: function (player, info) {\r\n                    if (player && info) {\r\n                        player.$give(info[0], game.playerMap[info[1]]);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                giveCard: function (player, info) {\r\n                    if (player && info) {\r\n                        player.$give(get.infoCards(info[0]), game.playerMap[info[1]]);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                gain: function (player, info) {\r\n                    if (player && player.$gain) {\r\n                        player.$gain(info);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                gainCard: function (player, info) {\r\n                    if (player && info) {\r\n                        player.$gain(get.infoCards(info));\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                gain2: function (player, cards) {\r\n                    if (player && player.$draw) {\r\n                        var nodeList = document.querySelectorAll('#arena>.card,#chess>.card');\r\n                        var nodes = [];\r\n                        for (var i = 0; i < nodeList.length; i++) {\r\n                            nodes.push(nodeList[i]);\r\n                        }\r\n                        for (var i = 0; i < cards.length; i++) {\r\n                            for (var j = 0; j < nodes.length; j++) {\r\n                                if (cards[i][2] == nodes[j].name && cards[i][0] == nodes[j].suit && cards[i][1] == nodes[j].number) {\r\n                                    nodes[j].moveDelete(player);\r\n                                    cards.splice(i--, 1);\r\n                                    nodes.splice(j--, 1);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (cards.length) {\r\n                            player.$draw(get.infoCards(cards));\r\n                        }\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                deletenode: function (player, cards, method) {\r\n                    if (cards) {\r\n                        var nodeList = document.querySelectorAll('#arena>.card,#chess>.card');\r\n                        var nodes = [];\r\n                        for (var i = 0; i < nodeList.length; i++) {\r\n                            nodes.push(nodeList[i]);\r\n                        }\r\n                        for (var i = 0; i < cards.length; i++) {\r\n                            for (var j = 0; j < nodes.length; j++) {\r\n                                if (cards[i][2] == nodes[j].name && cards[i][0] == nodes[j].suit && cards[i][1] == nodes[j].number) {\r\n                                    nodes[j].delete();\r\n                                    if (method == 'zoom') {\r\n                                        nodes[j].style.transform = 'scale(0)';\r\n                                    }\r\n                                    cards.splice(i--, 1);\r\n                                    nodes.splice(j--, 1);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        console.log(player, cards);\r\n                    }\r\n                },\r\n                highlightnode: function (player, card) {\r\n                    if (card) {\r\n                        var nodeList = document.querySelectorAll('#arena>.card,#chess>.card');\r\n                        var nodes = [];\r\n                        for (var i = 0; i < nodeList.length; i++) {\r\n                            nodes.push(nodeList[i]);\r\n                        }\r\n                        for (var j = nodes.length - 1; j >= 0; j--) {\r\n                            if (card[2] == nodes[j].name && card[0] == nodes[j].suit && card[1] == nodes[j].number) {\r\n                                nodes[j].classList.add('thrownhighlight');\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        console.log(player, cards);\r\n                    }\r\n                },\r\n                uiClear: function () {\r\n                    ui.clear();\r\n                },\r\n                judge1: function (player, content) {\r\n                    if (player && content) {\r\n                        var judging = get.infoCard(content[0]);\r\n                        if (game.chess) {\r\n                            judging.copy('thrown', 'center', 'thrownhighlight', ui.arena).animate('start');\r\n                        }\r\n                        else {\r\n                            player.$throwordered(judging.copy('thrownhighlight'), true);\r\n                        }\r\n        \r\n                        ui.create.dialog(content[1]).videoId = content[2];\r\n                        ui.arena.classList.add('thrownhighlight');\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                centernode: function (content) {\r\n                    get.infoCard(content).copy('thrown', 'center', 'thrownhighlight', ui.arena).animate('start');\r\n                },\r\n                judge2: function (videoId) {\r\n                    for (var i = 0; i < ui.dialogs.length; i++) {\r\n                        if (ui.dialogs[i].videoId == videoId) {\r\n                            ui.dialogs[i].close();\r\n                        }\r\n                    }\r\n                    ui.arena.classList.remove('thrownhighlight');\r\n                },\r\n                unmarkname: function (player, name) {\r\n                    if (player && player.unmark) {\r\n                        player.unmark(name);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                unmark: function (player, name) {\r\n                    if (player && player.marks && player.marks[name]) {\r\n                        player.marks[name].delete();\r\n                        player.marks[name].style.transform += ' scale(0.2)';\r\n                        delete player.marks[name];\r\n                        ui.updatem(this);\r\n                    }\r\n                },\r\n                flame: function (player, type) {\r\n                    if (player && type) {\r\n                        player['$' + type]();\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                throwEmotion: function (player, content) {\r\n                    if (player && content) {\r\n                        player.$throwEmotion(game.playerMap[content[0]], content[1]);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                addGaintag: function (player, content) {\r\n                    if (player && content) {\r\n                        var checkMatch = function (l1, l2) {\r\n                            for (var i = 0; i < l1.length; i++) {\r\n                                for (var j = 0; j < l2.length; j++) {\r\n                                    if (l2[j].suit == l1[i][0] && l2[j].number == l1[i][1] && l2[j].name == l1[i][2]) {\r\n                                        l2[j].addGaintag(content[1]);\r\n                                        l2.splice(j--, 1);\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        checkMatch(content[0], player.getCards('h'));\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                removeGaintag: function (player, content) {\r\n                    if (player && content) {\r\n                        player.removeGaintag(content);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                line: function (player, content) {\r\n                    if (player && content) {\r\n                        player.line(game.playerMap[content[0]], content[1]);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                fullscreenpop: function (player, content) {\r\n                    if (player && content) {\r\n                        player.$fullscreenpop(content[0], content[1], content[2]);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                damagepop: function (player, content) {\r\n                    if (player && content) {\r\n                        player.$damagepop(content[0], content[1], content[2]);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                damage: function (player, source) {\r\n                    if (player && player.$damage) {\r\n                        player.$damage(game.playerMap[source]);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                diex: function (player) {\r\n                    if (!player) {\r\n                        console.log('diex');\r\n                        return;\r\n                    }\r\n                    var cards = player.getCards('hej');\r\n                    for (var i = 0; i < cards.length; i++) {\r\n                        cards[i].discard();\r\n                    }\r\n                    while (player.node.marks.childNodes.length > 1) {\r\n                        player.node.marks.lastChild.remove();\r\n                    }\r\n                    player.classList.add('dead');\r\n                    player.classList.remove('turnedover');\r\n                    player.classList.remove('out');\r\n                    player.node.count.innerHTML = '0';\r\n                    player.node.hp.hide();\r\n                    player.node.equips.hide();\r\n                    player.node.count.hide();\r\n                    player.previous.next = player.next;\r\n                    player.next.previous = player.previous;\r\n                    game.players.remove(player);\r\n                    game.dead.push(player);\r\n                    if (lib.config.mode == 'stone') {\r\n                        setTimeout(function () {\r\n                            player.delete();\r\n                        }, 500);\r\n                    }\r\n                },\r\n                tafangMe: function (player) {\r\n                    if (player) {\r\n                        game.me = player;\r\n                        ui.me.lastChild.show();\r\n                        ui.create.fakeme();\r\n                        ui.handcards1 = player.node.handcards1.animate('start').fix();\r\n                        ui.handcards2 = player.node.handcards2.animate('start').fix();\r\n                        ui.handcards1Container.appendChild(ui.handcards1);\r\n                        ui.handcards2Container.appendChild(ui.handcards2);\r\n                        ui.updatehl();\r\n                        game.setChessInfo();\r\n                    }\r\n                },\r\n                deleteChessPlayer: function (player) {\r\n                    if (player) {\r\n                        player.delete();\r\n                        delete game.playerMap[player.dataset.position];\r\n                        game.players.remove(player);\r\n                        for (var i = 0; i < ui.phasequeue.length; i++) {\r\n                            if (ui.phasequeue[i].link == player) {\r\n                                ui.phasequeue[i].remove();\r\n                                ui.phasequeue.splice(i, 1);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                addChessPlayer: function (content) {\r\n                    game.addChessPlayer.apply(this, content);\r\n                },\r\n                die: function (player) {\r\n                    if (!player) {\r\n                        console.log('die');\r\n                        return;\r\n                    }\r\n                    player.$die();\r\n                    if (game.chess) {\r\n                        delete lib.posmap[player.dataset.position];\r\n                        setTimeout(function () {\r\n                            player.delete();\r\n                        }, 500);\r\n                        for (var i = 0; i < ui.phasequeue.length; i++) {\r\n                            if (ui.phasequeue[i].link == player) {\r\n                                ui.phasequeue[i].remove();\r\n                                ui.phasequeue.splice(i, 1);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                revive: function (player) {\r\n                    if (!player) {\r\n                        console.log('revive');\r\n                        return;\r\n                    }\r\n                    player.classList.remove('dead');\r\n                    player.node.hp.show();\r\n                    player.node.equips.show();\r\n                    player.node.count.show();\r\n                    player.node.avatar.style.transform = '';\r\n                    player.node.avatar2.style.transform = '';\r\n                    player.removeAttribute('style');\r\n                },\r\n                update: function (player, info) {\r\n                    if (player && info) {\r\n                        player.hp = info[1];\r\n                        player.maxHp = info[2];\r\n                        player.hujia = info[3];\r\n                        player.update(info[0]);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                phaseJudge: function (player, card) {\r\n                    if (player && card) {\r\n                        // player.$phaseJudge(get.infoCard(card));\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                directgain: function (player, cards) {\r\n                    if (player && cards) {\r\n                        player.directgain(get.infoCards(cards));\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                directgains: function (player, cards) {\r\n                    if (player && cards) {\r\n                        player.directgains(get.infoCards(cards));\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                directequip: function (player, cards) {\r\n                    if (player && cards) {\r\n                        player.directequip(get.infoCards(cards));\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                gain12: function (player, cards12) {\r\n                    if (player && cards12) {\r\n                        var cards1 = get.infoCards(cards12[0]);\r\n                        var cards2 = get.infoCards(cards12[1]);\r\n                        for (var i = 0; i < cards1.length; i++) {\r\n                            cards1[i].classList.add('drawinghidden');\r\n                            cards1[i].addGaintag(cards12[2]);\r\n                            player.node.handcards1.insertBefore(cards1[i], player.node.handcards1.firstChild);\r\n                        }\r\n                        for (var i = 0; i < cards2.length; i++) {\r\n                            cards2[i].classList.add('drawinghidden');\r\n                            cards2[i].addGaintag(cards12[2]);\r\n                            player.node.handcards2.insertBefore(cards2[i], player.node.handcards2.firstChild);\r\n                        }\r\n                        ui.updatehl();\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                equip: function (player, card) {\r\n                    if (player && card) {\r\n                        player.$equip(get.infoCard(card));\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                addJudge: function (player, content) {\r\n                    if (player && content) {\r\n                        var card = get.infoCard(content[0]);\r\n                        card.viewAs = content[1];\r\n                        if (card.viewAs && card.viewAs != card.name && (card.classList.contains('fullskin') || card.classList.contains('fullborder'))) {\r\n                            card.classList.add('fakejudge');\r\n                            card.node.background.innerHTML = lib.translate[card.viewAs + '_bg'] || get.translation(card.viewAs)[0]\r\n                        }\r\n                        card.classList.add('drawinghidden');\r\n                        player.node.judges.insertBefore(card, player.node.judges.firstChild);\r\n                        ui.updatej(player);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                markCharacter: function (player, content) {\r\n                    if (player && content) {\r\n                        if (game.playerMap[content.target]) {\r\n                            content.target = game.playerMap[content.target];\r\n                        }\r\n                        var mark = player.markCharacter(content.target, content);\r\n                        if (content.id) {\r\n                            player.marks[content.id] = mark;\r\n                        }\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                changeMarkCharacter: function (player, content) {\r\n                    if (player && content && player.marks[content.id]) {\r\n                        player.marks[content.id].info = {\r\n                            name: content.name,\r\n                            content: content.content\r\n                        };\r\n                        player.marks[content.id].setBackground(content.target, 'character');\r\n                    }\r\n                },\r\n                mark: function (player, content) {\r\n                    if (player && content) {\r\n                        var mark = player.mark(content.id, content);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                markSkill: function (player, content) {\r\n                    if (player && content) {\r\n                        if (content[1]) {\r\n                            player.markSkill(content[0], null, get.infoCard(content[1]));\r\n                        }\r\n                        else {\r\n                            player.markSkill(content[0]);\r\n                        }\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                unmarkSkill: function (player, name) {\r\n                    if (player && player.unmarkSkill) {\r\n                        player.unmarkSkill(name);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                storage: function (player, content) {\r\n                    if (player && content) {\r\n                        if (content[2]) {\r\n                            switch (content[2]) {\r\n                                case 'cards': content[1] = get.infoCards(content[1]); break;\r\n                                case 'card': content[1] = get.infoCard(content[1]); break;\r\n                            }\r\n                        }\r\n                        player.storage[content[0]] = content[1];\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                markId: function (player, content) {\r\n                    if (player && content) {\r\n                        player.mark(get.infoCard(content[0]), content[1]);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                unmarkId: function (player, content) {\r\n                    if (player && content) {\r\n                        player.unmark(get.infoCard(content[0]), content[1]);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                lose: function (player, info) {\r\n                    if (player && info) {\r\n                        var hs = info[0] || [], es = info[1] || [], js = info[2] || [], ss = info[3] || [];\r\n                        var phs = player.getCards('h'), pes = player.getCards('e'), pjs = player.getCards('j'), pss = player.getCards('s');\r\n                        var checkMatch = function (l1, l2) {\r\n                            for (var i = 0; i < l1.length; i++) {\r\n                                for (var j = 0; j < l2.length; j++) {\r\n                                    if (l2[j].suit == l1[i][0] && l2[j].number == l1[i][1] && l2[j].name == l1[i][2]) {\r\n                                        l2[j].remove();\r\n                                        l2.splice(j--, 1);\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        checkMatch(hs, phs);\r\n                        checkMatch(es, pes);\r\n                        checkMatch(js, pjs);\r\n                        checkMatch(ss, pss);\r\n                        ui.updatehl();\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                loseAfter: function (player) {\r\n                    if (!player) {\r\n                        console.log('loseAfter');\r\n                        return;\r\n                    }\r\n                },\r\n                link: function (player, bool) {\r\n                    if (player && player.classList) {\r\n                        if (bool) {\r\n                            player.addLink();\r\n                        }\r\n                        else {\r\n                            player.removeLink();\r\n                        }\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                turnOver: function (player, bool) {\r\n                    if (player && player.classList) {\r\n                        if (bool) {\r\n                            player.classList.add('turnedover');\r\n                        }\r\n                        else {\r\n                            player.classList.remove('turnedover');\r\n                        }\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                showCards: function (player, info) {\r\n                    if (info) {\r\n                        var dialog = ui.create.dialog(info[0], get.infoCards(info[1]));\r\n                        setTimeout(function () {\r\n                            dialog.close();\r\n                        }, 1000);\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                cardDialog: function (content) {\r\n                    if (Array.isArray(content)) {\r\n                        ui.create.dialog(content[0], get.infoCards(content[1])).videoId = content[2];\r\n                    }\r\n                    else if (typeof content == 'number') {\r\n                        for (var i = 0; i < ui.dialogs.length; i++) {\r\n                            if (ui.dialogs[i].videoId == content) {\r\n                                ui.dialogs[i].close();\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                changeSeat: function (player, info) {\r\n                    if (player && player.getBoundingClientRect && player.changeSeat) {\r\n                        player.changeSeat(info);\r\n                        game.playerMap = {};\r\n                        var players = game.players.concat(game.dead);\r\n                        for (var i = 0; i < players.length; i++) {\r\n                            game.playerMap[players[i].dataset.position] = players[i];\r\n                        }\r\n                    }\r\n                },\r\n                dialogCapt: function (content) {\r\n                    for (var i = 0; i < ui.dialogs.length; i++) {\r\n                        if (ui.dialogs[i].videoId == content[0]) {\r\n                            ui.dialogs[i].content.firstChild.innerHTML = content[1];\r\n                            return;\r\n                        }\r\n                    }\r\n                },\r\n                swapSeat: function (content) {\r\n                    var player1 = game.playerMap[content[0]];\r\n                    var player2 = game.playerMap[content[1]];\r\n                    if (!player1 || !player2) {\r\n                        console.log(content);\r\n                        return;\r\n                    }\r\n                    var temp1, pos, i, num;\r\n                    temp1 = player1.dataset.position;\r\n                    player1.dataset.position = player2.dataset.position;\r\n                    player2.dataset.position = temp1;\r\n                    game.arrangePlayers();\r\n                    if (player1.dataset.position == '0' || player2.dataset.position == '0') {\r\n                        pos = parseInt(player1.dataset.position);\r\n                        if (pos == 0) pos = parseInt(player2.dataset.position);\r\n                        num = game.players.length + game.dead.length;\r\n                        for (i = 0; i < game.players.length; i++) {\r\n                            temp1 = parseInt(game.players[i].dataset.position) - pos;\r\n                            if (temp1 < 0) temp1 += num;\r\n                            game.players[i].dataset.position = temp1;\r\n                        }\r\n                        for (i = 0; i < game.dead.length; i++) {\r\n                            temp1 = parseInt(game.dead[i].dataset.position) - pos;\r\n                            if (temp1 < 0) temp1 += num;\r\n                            game.dead[i].dataset.position = temp1;\r\n                        }\r\n                    }\r\n                    game.playerMap = {};\r\n                    var players = game.players.concat(game.dead);\r\n                    for (var i = 0; i < players.length; i++) {\r\n                        game.playerMap[players[i].dataset.position] = players[i];\r\n                    }\r\n                },\r\n                removeTafangPlayer: function () {\r\n                    ui.fakeme.hide();\r\n                    ui.handcards1Container.innerHTML = '';\r\n                    ui.handcards2Container.innerHTML = '';\r\n                    game.me = ui.create.player();\r\n                },\r\n                swapControl: function (player, hs) {\r\n                    if (player && player.node) {\r\n                        var cards = get.infoCards(hs);\r\n                        player.node.handcards1.innerHTML = '';\r\n                        player.node.handcards2.innerHTML = '';\r\n                        player.directgain(cards, false);\r\n        \r\n                        game.me.node.handcards1.remove();\r\n                        game.me.node.handcards2.remove();\r\n        \r\n                        ui.handcards1 = player.node.handcards1.animate('start').fix();\r\n                        ui.handcards2 = player.node.handcards2.animate('start').fix();\r\n                        ui.handcards1Container.insertBefore(ui.handcards1, ui.handcards1Container.firstChild);\r\n                        ui.handcards2Container.insertBefore(ui.handcards2, ui.handcards2Container.firstChild);\r\n        \r\n                        game.me = player;\r\n                        ui.updatehl();\r\n                        if (game.chess) {\r\n                            ui.create.fakeme();\r\n                        }\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                onSwapControl: function () {\r\n                    game.onSwapControl();\r\n                },\r\n                swapPlayer: function (player, hs) {\r\n                    if (player && player.node) {\r\n                        var cards = get.infoCards(hs);\r\n                        player.node.handcards1.innerHTML = '';\r\n                        player.node.handcards2.innerHTML = '';\r\n                        player.directgain(cards, false);\r\n        \r\n                        var pos = parseInt(player.dataset.position);\r\n                        var num = game.players.length + game.dead.length;\r\n                        var players = game.players.concat(game.dead);\r\n                        var temp;\r\n                        for (var i = 0; i < players.length; i++) {\r\n                            temp = parseInt(players[i].dataset.position) - pos;\r\n                            if (temp < 0) temp += num;\r\n                            players[i].dataset.position = temp;\r\n                        }\r\n                        game.me.node.handcards1.remove();\r\n                        game.me.node.handcards2.remove();\r\n                        game.me = player;\r\n                        ui.handcards1 = player.node.handcards1.animate('start').fix();\r\n                        ui.handcards2 = player.node.handcards2.animate('start').fix();\r\n                        ui.handcards1Container.appendChild(ui.handcards1);\r\n                        ui.handcards2Container.appendChild(ui.handcards2);\r\n        \r\n                        ui.updatehl();\r\n        \r\n                        game.playerMap = {};\r\n                        var players = game.players.concat(game.dead);\r\n                        for (var i = 0; i < players.length; i++) {\r\n                            game.playerMap[players[i].dataset.position] = players[i];\r\n                        }\r\n                    }\r\n                    else {\r\n                        console.log(player);\r\n                    }\r\n                },\r\n                over: function (str) {\r\n                    var dialog = ui.create.dialog('hidden');\r\n                    dialog.noforcebutton = true;\r\n                    dialog.content.innerHTML = str;\r\n                    dialog.forcebutton = true;\r\n                    dialog.open();\r\n                    if (game.chess) {\r\n                        dialog.classList.add('center');\r\n                    }\r\n                    if ((game.layout == 'long2' || game.layout == 'nova') && !game.chess) {\r\n                        ui.arena.classList.add('choose-character');\r\n                        if (ui.me) ui.me.hide();\r\n                        if (ui.mebg) ui.mebg.hide()\r\n                        if (ui.autonode) ui.autonode.hide();\r\n                        if (lib.config.radius_size != 'off') {\r\n                            if (ui.historybar) ui.historybar.style.borderRadius = '0 0 0 4px';\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            reload: function () {\r\n                if (_status) {\r\n                    if (_status.reloading) return;\r\n                    _status.reloading = true;\r\n                }\r\n                if (_status.video && !_status.replayvideo) {\r\n                    localStorage.removeItem(lib.configprefix + 'playbackmode');\r\n                }\r\n                localStorage.setItem('show_splash_off', true);\r\n                if (lib.status.reload) {\r\n                    _status.waitingToReload = true;\r\n                }\r\n                else {\r\n                    window.location.reload();\r\n                }\r\n            },\r\n            reload2: function () {\r\n                lib.status.reload--;\r\n                if (lib.status.reload == 0 && lib.ondb2.length) {\r\n                    var command = lib.ondb2.shift();\r\n                    game[command[0]].apply(game, command[1]);\r\n                }\r\n                if (lib.status.reload == 0 && lib.ondb.length) {\r\n                    var command = lib.ondb.shift();\r\n                    game[command[0]].apply(game, command[1]);\r\n                }\r\n                if (lib.status.reload == 0) {\r\n                    if (_status.waitingToReload) {\r\n                        window.location.reload();\r\n                        delete _status.waitingToReload;\r\n                    }\r\n                }\r\n            },\r\n            exit: function () {\r\n                if (lib.device == 'ios') {\r\n                    game.saveConfig('mode');\r\n                    if (_status) {\r\n                        if (_status.reloading) return;\r\n                        _status.reloading = true;\r\n                    }\r\n                    if (_status.video && !_status.replayvideo) {\r\n                        localStorage.removeItem(lib.configprefix + 'playbackmode');\r\n                    }\r\n                    window.location.reload();\r\n                }\r\n                else {\r\n                    if (navigator.app && navigator.app.exitApp) {\r\n                        navigator.app.exitApp();\r\n                    }\r\n                }\r\n            },\r\n            open: function (url) {\r\n                if (lib.device) {\r\n                    if (cordova.InAppBrowser) {\r\n                        cordova.InAppBrowser.open(url, '_system');\r\n                    }\r\n                    else {\r\n                        ui.create.iframe(url);\r\n                    }\r\n                }\r\n                else {\r\n                    window.open(url);\r\n                }\r\n            },\r\n            reloadCurrent: function () {\r\n                game.saveConfig('continue_name', [game.me.name1 || game.me.name, game.me.name2]);\r\n                game.saveConfig('mode', lib.config.mode);\r\n                localStorage.setItem(lib.configprefix + 'directstart', true);\r\n                game.reload();\r\n            },\r\n            update: function (func) {\r\n                lib.updates.push(func);\r\n                if (lib.updates.length === 1) {\r\n                    game.run();\r\n                }\r\n                return func;\r\n            },\r\n            unupdate: function (func) {\r\n                lib.updates.remove(func);\r\n            },\r\n            stop: function () {\r\n                cancelAnimationFrame(lib.status.frameId);\r\n            },\r\n            run: function () {\r\n                if (lib.updates.length) {\r\n                    cancelAnimationFrame(lib.status.frameId);\r\n                    lib.status.frameId = requestAnimationFrame(function (time) {\r\n                        if (lib.status.time !== 0) {\r\n                            lib.status.delayed += time - lib.status.time;\r\n                        }\r\n                        lib.status.frameId = requestAnimationFrame(lib.run);\r\n                    });\r\n                }\r\n            },\r\n            addVideo: function (type, player, content) {\r\n                if (_status.video || game.online) return;\r\n                if (!_status.videoInited) {\r\n                    if (type == 'arrangeLib') {\r\n                        lib.video.push({\r\n                            type: type,\r\n                            player: player,\r\n                            content: content,\r\n                            delay: 0\r\n                        });\r\n                    }\r\n                    return;\r\n                }\r\n                if (type == 'storage' && player && player.updateMarks) {\r\n                    player.updateMarks();\r\n                }\r\n                if (game.getVideoName) {\r\n                    var time = get.time();\r\n                    if (!_status.lastVideoLog) {\r\n                        _status.lastVideoLog = time;\r\n                    }\r\n                    if (get.itemtype(player) == 'player') {\r\n                        player = player.dataset.position;\r\n                    }\r\n                    lib.video.push({\r\n                        type: type,\r\n                        player: player,\r\n                        content: content,\r\n                        delay: time - _status.lastVideoLog\r\n                    });\r\n                    _status.lastVideoLog = time;\r\n                }\r\n            },\r\n            draw: function (func) {\r\n                lib.canvasUpdates.push(func);\r\n                if (!lib.status.canvas) {\r\n                    lib.status.canvas = true;\r\n                    game.update(lib.updateCanvas);\r\n                }\r\n            },\r\n            vibrate: function (time) {\r\n                if (typeof navigator.vibrate == 'function') {\r\n                    navigator.vibrate(time || 500);\r\n                }\r\n            },\r\n            prompt: function () {\r\n                var str, forced, callback, noinput = false, str2 = '';\r\n                for (var i = 0; i < arguments.length; i++) {\r\n                    if (arguments[i] == 'alert') {\r\n                        forced = true;\r\n                        callback = function () { };\r\n                        noinput = true;\r\n                    }\r\n                    else if (typeof arguments[i] == 'string') {\r\n                        if (arguments[i].indexOf('###') == 0) {\r\n                            var list = arguments[i].slice(3).split('###');\r\n                            str = list[0];\r\n                            str2 = list[1];\r\n                        }\r\n                        else str = arguments[i];\r\n                    }\r\n                    else if (typeof arguments[i] == 'boolean') {\r\n                        forced = arguments[i];\r\n                    }\r\n                    else if (typeof arguments[i] == 'function') {\r\n                        callback = arguments[i];\r\n                    }\r\n                }\r\n                if (!callback) {\r\n                    return;\r\n                }\r\n                //try{\r\n                //    if(noinput){\r\n                //        throw('e');\r\n                //    }\r\n                //    var result=prompt(str);\r\n                //    callback(result);\r\n                //}\r\n                //catch(e){\r\n                var promptContainer = ui.create.div('.popup-container', ui.window, function () {\r\n                    if (this.clicked) {\r\n                        this.clicked = false;\r\n                    }\r\n                    else {\r\n                        clickCancel();\r\n                    }\r\n                });\r\n                var dialogContainer = ui.create.div('.prompt-container', promptContainer);\r\n                var dialog = ui.create.div('.menubg', ui.create.div(dialogContainer), function () {\r\n                    promptContainer.clicked = true;\r\n                });\r\n                var strnode = ui.create.div('', str || '', dialog);\r\n                var input = ui.create.node('input', ui.create.div(dialog));\r\n                input.value = str2;\r\n                if (noinput) {\r\n                    input.style.display = 'none';\r\n                }\r\n                var controls = ui.create.div(dialog);\r\n                var clickConfirm = function () {\r\n                    if (noinput) {\r\n                        promptContainer.remove();\r\n                    }\r\n                    else if (input.value) {\r\n                        callback(input.value);\r\n                        promptContainer.remove();\r\n                    }\r\n                }\r\n                var clickCancel = function () {\r\n                    if (!forced) {\r\n                        callback(false);\r\n                        promptContainer.remove();\r\n                    }\r\n                }\r\n                var confirmNode = ui.create.div('.menubutton.large.disabled', '确定', controls, clickConfirm);\r\n                if (!forced) {\r\n                    ui.create.div('.menubutton.large', '取消', controls, clickCancel);\r\n                }\r\n                if (noinput) {\r\n                    confirmNode.classList.remove('disabled');\r\n                }\r\n                else {\r\n                    input.onkeydown = function (e) {\r\n                        if (e.keyCode == 13) {\r\n                            clickConfirm();\r\n                        }\r\n                        else if (e.keyCode == 27) {\r\n                            clickCancel();\r\n                        }\r\n                    }\r\n                    input.onkeyup = function () {\r\n                        if (input.value) {\r\n                            confirmNode.classList.remove('disabled');\r\n                        }\r\n                        else {\r\n                            confirmNode.classList.remove('disabled');\r\n                        }\r\n                    }\r\n                    input.focus();\r\n                }\r\n                //}\r\n            },\r\n            alert: function (str) {\r\n                game.prompt(str, 'alert');\r\n            },\r\n            print: function () {\r\n                if (!_status.toprint) {\r\n                    _status.toprint = [];\r\n                }\r\n                _status.toprint.push(Array.from(arguments));\r\n            },\r\n            animate: {\r\n                window: function (num) {\r\n                    switch (num) {\r\n                        case 1: {\r\n                            ui.window.style.transition = 'all 0.5s';\r\n                            ui.window.classList.add('zoomout3');\r\n                            ui.window.hide();\r\n                            game.addVideo('windowzoom1');\r\n                            game.delay(0, 500);\r\n                            break;\r\n                        }\r\n                        case 2: {\r\n                            ui.window.style.transition = 'all 0s';\r\n                            ui.refresh(ui.window);\r\n                            game.addVideo('windowzoom2');\r\n                            game.pause();\r\n                            setTimeout(function () {\r\n                                ui.window.classList.remove('zoomout3');\r\n                                ui.window.classList.add('zoomin3');\r\n                                game.addVideo('windowzoom3');\r\n                                setTimeout(function () {\r\n                                    ui.window.style.transition = 'all 0.5s';\r\n                                    ui.refresh(ui.window);\r\n                                    ui.window.show();\r\n                                    ui.window.classList.remove('zoomin3');\r\n                                    game.addVideo('windowzoom4');\r\n                                    setTimeout(function () {\r\n                                        ui.window.style.transition = '';\r\n                                        game.addVideo('windowzoom5');\r\n                                        game.resume();\r\n                                    }, 500);\r\n                                }, 100);\r\n                            }, 100);\r\n                            break;\r\n                        }\r\n                    }\r\n                },\r\n                flame: function (x, y, duration, type) {\r\n                    var particles = [];\r\n                    var particle_count = 50;\r\n                    if (type == 'thunder' || type == 'recover') {\r\n                        particle_count = 30;\r\n                    }\r\n                    else if (type == 'coin' || type == 'dust') {\r\n                        particle_count = 50;\r\n                    }\r\n                    else if (type == 'legend') {\r\n                        particle_count = 120;\r\n                    }\r\n                    else if (type == 'epic') {\r\n                        particle_count = 80;\r\n                    }\r\n                    else if (type == 'rare') {\r\n                        particle_count = 50;\r\n                    }\r\n                    for (var i = 0; i < particle_count; i++) {\r\n                        particles.push(new particle());\r\n                    }\r\n                    function particle() {\r\n                        this.speed = { x: -1 + Math.random() * 2, y: -5 + Math.random() * 5 };\r\n                        if (type == 'thunder' || type == 'coin' || type == 'dust') {\r\n                            this.speed.y = -3 + Math.random() * 5;\r\n                            this.speed.x = -2 + Math.random() * 4;\r\n                        }\r\n                        if (type == 'legend' || type == 'rare' || type == 'epic') {\r\n                            this.speed.x *= 3;\r\n                            this.speed.y *= 1.5;\r\n                        }\r\n                        this.location = { x: x, y: y };\r\n        \r\n                        this.radius = 0.5 + Math.random() * 1;\r\n        \r\n                        this.life = 10 + Math.random() * 10;\r\n                        this.death = this.life;\r\n        \r\n                        switch (type) {\r\n                            case 'thunder': {\r\n                                this.b = 255;\r\n                                this.r = Math.round(Math.random() * 255);\r\n                                this.g = Math.round(Math.random() * 255);\r\n                                this.x += Math.random() * 20 - 10;\r\n                                this.y += Math.random() * 20 - 10;\r\n        \r\n                                break;\r\n                            }\r\n                            case 'fire': {\r\n                                this.r = 255;\r\n                                this.g = Math.round(Math.random() * 155);\r\n                                this.b = 0;\r\n                                break;\r\n                            }\r\n                            case 'coin': {\r\n                                this.r = 255;\r\n                                this.g = Math.round(Math.random() * 25 + 230);\r\n                                this.b = Math.round(Math.random() * 100 + 50);\r\n                                this.location.x += Math.round(Math.random() * 60) - 30;\r\n                                this.location.y += Math.round(Math.random() * 40) - 20;\r\n                                if (this.location.x < x) {\r\n                                    this.speed.x = -Math.abs(this.speed.x);\r\n                                }\r\n                                else if (this.location.x > x) {\r\n                                    this.speed.x = Math.abs(this.speed.x);\r\n                                }\r\n                                this.life *= 1.3;\r\n                                this.death *= 1.3;\r\n                                break;\r\n                            }\r\n                            case 'dust': {\r\n                                this.r = Math.round(Math.random() * 55) + 105;\r\n                                this.g = Math.round(Math.random() * 55) + 150;\r\n                                this.b = 255;\r\n                                this.location.x += Math.round(Math.random() * 60) - 30;\r\n                                this.location.y += Math.round(Math.random() * 40) - 20;\r\n                                if (this.location.x < x) {\r\n                                    this.speed.x = -Math.abs(this.speed.x);\r\n                                }\r\n                                else if (this.location.x > x) {\r\n                                    this.speed.x = Math.abs(this.speed.x);\r\n                                }\r\n                                this.life *= 1.3;\r\n                                this.death *= 1.3;\r\n                                break;\r\n                            }\r\n                            case 'legend': {\r\n                                this.r = 255;\r\n                                this.g = Math.round(Math.random() * 100 + 155);\r\n                                this.b = Math.round(Math.random() * 100 + 50);\r\n                                this.location.x += Math.round(Math.random() * 60) - 30;\r\n                                this.location.y += Math.round(Math.random() * 40) - 20;\r\n                                if (this.location.x < x) {\r\n                                    this.speed.x = -Math.abs(this.speed.x);\r\n                                }\r\n                                else if (this.location.x > x) {\r\n                                    this.speed.x = Math.abs(this.speed.x);\r\n                                }\r\n                                this.speed.x /= 2;\r\n                                this.speed.y /= 2;\r\n                                this.life *= 2;\r\n                                this.death *= 2;\r\n                                break;\r\n                            }\r\n                            case 'epic': {\r\n                                this.r = Math.round(Math.random() * 55) + 200;\r\n                                this.g = Math.round(Math.random() * 100) + 55;\r\n                                this.b = 255;\r\n                                this.location.x += Math.round(Math.random() * 60) - 30;\r\n                                this.location.y += Math.round(Math.random() * 40) - 20;\r\n                                if (this.location.x < x) {\r\n                                    this.speed.x = -Math.abs(this.speed.x);\r\n                                }\r\n                                else if (this.location.x > x) {\r\n                                    this.speed.x = Math.abs(this.speed.x);\r\n                                }\r\n                                this.speed.x /= 2;\r\n                                this.speed.y /= 2;\r\n                                this.life *= 2;\r\n                                this.death *= 2;\r\n                                break;\r\n                            }\r\n                            case 'rare': {\r\n                                this.r = Math.round(Math.random() * 55) + 105;\r\n                                this.g = Math.round(Math.random() * 55) + 150;\r\n                                this.b = 255;\r\n                                this.location.x += Math.round(Math.random() * 60) - 30;\r\n                                this.location.y += Math.round(Math.random() * 40) - 20;\r\n                                if (this.location.x < x) {\r\n                                    this.speed.x = -Math.abs(this.speed.x);\r\n                                }\r\n                                else if (this.location.x > x) {\r\n                                    this.speed.x = Math.abs(this.speed.x);\r\n                                }\r\n                                this.speed.x /= 2;\r\n                                this.speed.y /= 2;\r\n                                this.life *= 2;\r\n                                this.death *= 2;\r\n                                break;\r\n                            }\r\n                            case 'recover': {\r\n                                this.g = 255;\r\n                                this.r = Math.round(Math.random() * 200 + 55);\r\n                                this.b = Math.round(Math.random() * 155 + 55);\r\n                                this.location.x += Math.round(Math.random() * 60) - 30;\r\n                                this.location.y += Math.round(Math.random() * 40) - 20;\r\n                                if (this.location.x < x) {\r\n                                    this.speed.x = -Math.abs(this.speed.x);\r\n                                }\r\n                                else if (this.location.x > x) {\r\n                                    this.speed.x = Math.abs(this.speed.x);\r\n                                }\r\n                                this.speed.x /= 2;\r\n                                this.speed.y /= 2;\r\n                                this.life *= 2;\r\n                                this.death *= 2;\r\n                                break;\r\n                            }\r\n                            default: {\r\n                                this.r = 255;\r\n                                this.g = Math.round(Math.random() * 155);\r\n                                this.b = 0;\r\n                            }\r\n                        }\r\n                    }\r\n        \r\n                    game.draw(function (time, surface) {\r\n                        surface.globalCompositeOperation = \"source-over\";\r\n                        surface.globalCompositeOperation = \"lighter\";\r\n        \r\n                        for (var i = 0; i < particles.length; i++) {\r\n                            var p = particles[i];\r\n        \r\n                            surface.beginPath();\r\n                            var middle = 0.5;\r\n                            var radius = p.radius;\r\n                            if (type == 'recover' || type == 'legend' || type == 'rare' ||\r\n                                type == 'epic' || type == 'coin' || type == 'dust') {\r\n                                middle = 0.7;\r\n                                radius /= 3;\r\n                            }\r\n        \r\n                            p.opacity = Math.round(p.death / p.life * 100) / 100\r\n                            var gradient = surface.createRadialGradient(p.location.x, p.location.y, 0, p.location.x, p.location.y, p.radius);\r\n                            gradient.addColorStop(0, \"rgba(\" + p.r + \", \" + p.g + \", \" + p.b + \", \" + p.opacity + \")\");\r\n                            gradient.addColorStop(middle, \"rgba(\" + p.r + \", \" + p.g + \", \" + p.b + \", \" + p.opacity + \")\");\r\n                            gradient.addColorStop(1, \"rgba(\" + p.r + \", \" + p.g + \", \" + p.b + \", 0)\");\r\n                            surface.fillStyle = gradient;\r\n                            surface.arc(p.location.x, p.location.y, radius, Math.PI * 2, false);\r\n                            surface.fill();\r\n                            p.death--;\r\n                            if (type == 'recover') {\r\n                                p.radius += 0.5;\r\n                            }\r\n                            else if (type == 'coin' || type == 'dust') {\r\n                                p.radius += 0.7;\r\n                            }\r\n                            else if (type == 'legend' || type == 'rare' || type == 'epic') {\r\n                                p.radius += 0.5;\r\n                            }\r\n                            else {\r\n                                p.radius++;\r\n                            }\r\n                            p.location.x += (p.speed.x);\r\n                            p.location.y += (p.speed.y);\r\n        \r\n                            if (p.death < 0 || p.radius < 0) {\r\n                                if (typeof duration == 'number' && time + 500 >= duration) {\r\n                                    particles.splice(i--, 1);\r\n                                }\r\n                                else {\r\n                                    particles[i] = new particle();\r\n                                }\r\n                            }\r\n                        }\r\n                        if (particles.length == 0) {\r\n                            return false;\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n            linexy: function (path) {\r\n                var from = [path[0], path[1]];\r\n                var to = [path[2], path[3]];\r\n                var total = typeof arguments[1] === 'number' ? arguments[1] : lib.config.duration * 2;\r\n                var opacity = 1;\r\n                var color = [255, 255, 255];\r\n                var dashed = false;\r\n                var drag = false;\r\n                if (typeof arguments[1] == 'object') {\r\n                    for (var i in arguments[1]) {\r\n                        switch (i) {\r\n                            case 'opacity': opacity = arguments[1][i]; break;\r\n                            case 'color': color = arguments[1][i]; break;\r\n                            case 'dashed': dashed = arguments[1][i]; break;\r\n                            case 'duration': total = arguments[1][i]; break;\r\n                        }\r\n                    }\r\n                }\r\n                else if (arguments[1] == 'fire' || arguments[1] == 'thunder' || arguments[1] == 'ocean' || arguments[1] == 'green') {\r\n                    color = arguments[1];\r\n                }\r\n                if (color == 'fire') {\r\n                    color = [255, 146, 68];\r\n                }\r\n                else if (color == 'thunder') {\r\n                    color = [141, 216, 255];\r\n                }\r\n                else if (color == 'ocean') {\r\n                    color = [98, 146, 240];\r\n                }\r\n                else if (color == 'green') {\r\n                    color = [141, 255, 216];\r\n                }\r\n                var node;\r\n                if (arguments[1] == 'drag') {\r\n                    color = [236, 201, 71];\r\n                    drag = true;\r\n                    if (arguments[2]) {\r\n                        node = arguments[2]\r\n                    }\r\n                    else {\r\n                        node = ui.create.div('.linexy.drag');\r\n                        node.style.left = from[0] + 'px';\r\n                        node.style.top = from[1] + 'px';\r\n                        node.style.background = 'linear-gradient(transparent,rgba(' + color.toString() + ',' + opacity + '),rgba(' + color.toString() + ',' + opacity + '))';\r\n                        if (game.chess) {\r\n                            ui.chess.appendChild(node);\r\n                        }\r\n                        else {\r\n                            ui.arena.appendChild(node);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    node = ui.create.div('.linexy.hidden');\r\n                    node.style.left = from[0] + 'px';\r\n                    node.style.top = from[1] + 'px';\r\n                    node.style.background = 'linear-gradient(transparent,rgba(' + color.toString() + ',' + opacity + '),rgba(' + color.toString() + ',' + opacity + '))';\r\n                    node.style.transitionDuration = (total / 3000) + 's';\r\n                }\r\n                var dy = to[1] - from[1];\r\n                var dx = to[0] - from[0];\r\n                var deg = Math.atan(Math.abs(dy) / Math.abs(dx)) / Math.PI * 180;\r\n                if (dx >= 0) {\r\n                    if (dy <= 0) {\r\n                        deg += 90;\r\n                    }\r\n                    else {\r\n                        deg = 90 - deg;\r\n                    }\r\n                }\r\n                else {\r\n                    if (dy <= 0) {\r\n                        deg = 270 - deg;\r\n                    }\r\n                    else {\r\n                        deg += 270;\r\n                    }\r\n                }\r\n                if (drag) {\r\n                    node.style.transform = 'rotate(' + (-deg) + 'deg)';\r\n                    node.style.height = get.xyDistance(from, to) + 'px';\r\n                }\r\n                else {\r\n                    node.style.transform = 'rotate(' + (-deg) + 'deg) scaleY(0)';\r\n                    node.style.height = get.xyDistance(from, to) + 'px';\r\n                    if (game.chess) {\r\n                        ui.chess.appendChild(node);\r\n                    }\r\n                    else {\r\n                        ui.arena.appendChild(node);\r\n                    }\r\n                    ui.refresh(node);\r\n                    node.show();\r\n                    node.style.transform = 'rotate(' + (-deg) + 'deg) scaleY(1)';\r\n                    node.listenTransition(function () {\r\n                        setTimeout(function () {\r\n                            if (node.classList.contains('removing')) return;\r\n                            node.delete();\r\n                        }, total / 3);\r\n                    });\r\n                }\r\n                return node;\r\n            },\r\n            _linexy: function (path) {\r\n                var from = [path[0], path[1]];\r\n                var to = [path[2], path[3]];\r\n                var total = typeof arguments[1] === 'number' ? arguments[1] : lib.config.duration * 2;\r\n                var opacity = 1;\r\n                var color = [255, 255, 255];\r\n                var dashed = false;\r\n                if (typeof arguments[1] == 'object') {\r\n                    for (var i in arguments[1]) {\r\n                        switch (i) {\r\n                            case 'opacity': opacity = arguments[1][i]; break;\r\n                            case 'color': color = arguments[1][i]; break;\r\n                            case 'dashed': dashed = arguments[1][i]; break;\r\n                            case 'duration': total = arguments[1][i]; break;\r\n                        }\r\n                    }\r\n                }\r\n                else if (arguments[1] == 'fire' || arguments[1] == 'thunder' || arguments[1] == 'ocean' || arguments[1] == 'green') {\r\n                    color = arguments[1];\r\n                }\r\n                if (color == 'fire') {\r\n                    color = [255, 146, 68];\r\n                }\r\n                else if (color == 'thunder') {\r\n                    color = [141, 216, 255];\r\n                }\r\n                else if (color == 'ocean') {\r\n                    color = [98, 146, 250];\r\n                }\r\n                else if (color == 'green') {\r\n                    color = [141, 255, 216];\r\n                }\r\n                var drawfunc = function (time, ctx) {\r\n                    var current;\r\n                    if (time < total / 3) {\r\n                        ctx.strokeStyle = 'rgba(' + color.toString() + ',' + opacity * (time / (total / 3)) + ')';\r\n                        current = [from[0] + (to[0] - from[0]) * time / (total / 3),\r\n                        from[1] + (to[1] - from[1]) * time / (total / 3)];\r\n                    }\r\n                    else if (time <= total) {\r\n                        current = to;\r\n                        if (time > total / 1.5) {\r\n                            ctx.strokeStyle = 'rgba(' + color.toString() + ',' + opacity * (1 - (time - total / 1.5) / (total - total / 1.5)) + ')';\r\n                        }\r\n                        else {\r\n                            ctx.strokeStyle = 'rgba(' + color.toString() + ',' + opacity + ')';\r\n                        }\r\n                    }\r\n                    else {\r\n                        return false;\r\n                    }\r\n                    ctx.beginPath();\r\n                    if (dashed) {\r\n                        ctx.lineCap = 'butt';\r\n                        ctx.setLineDash([8, 2]);\r\n                    }\r\n                    else {\r\n                        ctx.lineCap = 'round';\r\n                    }\r\n                    ctx.moveTo(from[0], from[1]);\r\n                    ctx.lineTo(current[0], current[1]);\r\n                    ctx.stroke();\r\n                };\r\n                if (arguments[2] && game.chess) {\r\n                    game.draw2(drawfunc);\r\n                }\r\n                else {\r\n                    game.draw(drawfunc);\r\n                }\r\n            },\r\n            /**\r\n             * 创建trigger事件；`trigger`本身也是事件，但是`trigger`事件不可触发\r\n             * @param {string} name trigger name\r\n             * @param {*} skill 技能ID\r\n             * @param {GameCores.GameObjects.Player} player 事件所属的角色\r\n             * @param {GameCores.Bases.Event} Evt trigger事件的触发事件\r\n             */\r\n            createTrigger: function (name, skill, player, Evt) {\r\n                if (player.isOut() || player.removed) return;\r\n                if (player.isDead() && !lib.skill[skill].forceDie) return;\r\n                var next = game.createEvent('trigger', false);\r\n                next.skill = skill;\r\n                next.player = player;\r\n                next.triggername = name;\r\n                next.forceDie = true;\r\n                next._trigger = Evt;\r\n                next.setContent('createTrigger');\r\n            },\r\n            /**\r\n             * 创建事件\r\n             * @function\r\n             * @param {string} name 事件名称\r\n             * @param {?boolean} [canTriggered] 是否可以触发，如果是true或未指定，可以触发；如果是false，不会触发\r\n             * @param {?GameCores.Bases.Event} [triggerevent] 前置事件，如果未指定，使用当前事件{@link _status.event}\r\n             */\r\n            createEvent: function (name, trigger, triggerevent) {\r\n                /**\r\n                 * 事件对象\r\n                 * 创建事件，见{@link game.createEvent}\r\n                 * @namespace GameCores.Bases.Event\r\n                 */\r\n                var next =\r\n                /**@lends GameCores.Bases.Event */\r\n                {\r\n                    /**\r\n                     * 事件名称\r\n                     * @type {string}\r\n                     */\r\n                    name: name,\r\n                    /**\r\n                     * 事件状态，用于记录状态机状态\r\n                     * @type {string}\r\n                     * @default 0\r\n                     */\r\n                    step: 0,\r\n                    /**\r\n                     * 事件是否结束，如果结束则为true；默认为false\r\n                     * @type {boolean}\r\n                     * @default false\r\n                     */\r\n                    finished: false,\r\n                    /**\r\n                     * 事件的子事件数组\r\n                     * @type {!GameCores.Bases.Event[]}\r\n                     */\r\n                    next: [],\r\n                    /**\r\n                     * 事件的追加事件数组，在After后如果有事件就执行\r\n                     * 受`skipList`影响\r\n                     * @type {GameCores.Bases.Event[]}\r\n                     */\r\n                    after: [],\r\n                    custom: {//??\r\n                        add: {},\r\n                        replace: {}\r\n                    },\r\n                    _aiexclude: [],\r\n                    /**\r\n                     * 禁止触发对象数组，该事件无法被其中的角色对象触发\r\n                     * @type {GameCores.GameObjects.Player[]}\r\n                     */\r\n                    _notrigger: [],\r\n                    /**\r\n                     * 子事件返回值\r\n                     * @type {?Object}\r\n                     */\r\n                    _result: {},\r\n                    _set: [],\r\n                }\r\n                if (trigger !== false && !game.online) next._triggered = 0;\r\n                for (var i in lib.element.event) {\r\n                    next[i] = lib.element.event[i];\r\n                }\r\n                (triggerevent || _status.event).next.push(next);\r\n                return next;\r\n            },\r\n            /**\r\n             * 添加角色\r\n             * @param {*} name \r\n             * @param {*} info \r\n             */\r\n            //TODO\r\n            addCharacter: function (name, info) {\r\n                var extname = (_status.extension || info.extension);\r\n                var imgsrc;\r\n                if (_status.evaluatingExtension) {\r\n                    imgsrc = 'db:extension-' + extname + ':' + name + '.jpg';\r\n                }\r\n                else {\r\n                    imgsrc = 'ext:' + extname + '/' + name + '.jpg';\r\n                }\r\n                var character = [info.sex, info.group, info.hp, info.skills || [], [imgsrc]];\r\n                if (info.tags) {\r\n                    character[4] = character[4].concat(info.tags);\r\n                }\r\n                lib.character[name] = character;\r\n                var packname = 'mode_extension_' + extname;\r\n                if (!lib.characterPack[packname]) {\r\n                    lib.characterPack[packname] = {};\r\n                }\r\n                lib.translate[name] = info.translate;\r\n                lib.characterPack[packname][name] = character;\r\n                lib.translate[packname + '_character_config'] = extname;\r\n            },\r\n            /**\r\n             * 添加角色包\r\n             * @param {*} pack \r\n             * @param {*} packagename \r\n             */\r\n            //TODO\r\n            addCharacterPack: function (pack, packagename) {\r\n                var extname = _status.extension || '扩展';\r\n                packagename = packagename || extname;\r\n                for (var i in pack) {\r\n                    if (i == 'mode' || i == 'forbid') continue;\r\n                    for (var j in pack[i]) {\r\n                        if (i == 'character') {\r\n                            if (!pack[i][j][4]) {\r\n                                pack[i][j][4] = [];\r\n                            }\r\n                            var imgsrc;\r\n                            if (_status.evaluatingExtension) {\r\n                                imgsrc = 'db:extension-' + extname + ':' + j + '.jpg';\r\n                            }\r\n                            else {\r\n                                imgsrc = 'ext:' + extname + '/' + j + '.jpg';\r\n                            }\r\n                            pack[i][j][4].push(imgsrc);\r\n                            if (pack[i][j][4].contains('boss') ||\r\n                                pack[i][j][4].contains('hiddenboss')) {\r\n                                lib.config.forbidai.add(j);\r\n                            }\r\n                            if (lib.config.forbidai_user && lib.config.forbidai_user.contains(j)) {\r\n                                lib.config.forbidai.add(j);\r\n                            }\r\n                            for (var l = 0; l < pack[i][j][3].length; l++) {\r\n                                lib.skilllist.add(pack[i][j][3][l]);\r\n                            }\r\n                        }\r\n                        else if (i == 'skill') {\r\n                            if (typeof pack[i][j].audio == 'number' || typeof pack[i][j].audio == 'boolean') {\r\n                                pack[i][j].audio = 'ext:' + extname + ':' + pack[i][j].audio;\r\n                            }\r\n                        }\r\n                        if (lib[i][j] == undefined) {\r\n                            lib[i][j] = pack[i][j];\r\n                        }\r\n                    }\r\n                }\r\n                var packname = 'mode_extension_' + packagename;\r\n                lib.characterPack[packname] = pack.character;\r\n                lib.translate[packname + '_character_config'] = packagename;\r\n            },\r\n            /**\r\n             * 添加卡牌\r\n             */\r\n            //TODO\r\n            addCard: function (name, info, info2) {\r\n                var extname = (_status.extension || info2.extension);\r\n                if (info.audio == true) {\r\n                    info.audio = 'ext:' + extname;\r\n                }\r\n                if (info.fullskin) {\r\n                    if (_status.evaluatingExtension) {\r\n                        info.image = 'db:extension-' + extname + ':' + name + '.png';\r\n                    }\r\n                    else {\r\n                        info.image = 'ext:' + extname + '/' + name + '.png';\r\n                    }\r\n                }\r\n                else if (info.fullimage) {\r\n                    if (_status.evaluatingExtension) {\r\n                        info.image = 'db:extension-' + extname + ':' + name + '.jpg';\r\n                    }\r\n                    else {\r\n                        info.image = 'ext:' + extname + '/' + name + '.jpg';\r\n                    }\r\n                }\r\n                lib.card[name] = info;\r\n                lib.translate[name] = info2.translate;\r\n                lib.translate[name + '_info'] = info2.description;\r\n                if (typeof info2.number == 'number') {\r\n                    var suits = ['heart', 'spade', 'diamond', 'club'];\r\n                    if (info2.color == 'red') {\r\n                        suits = ['heart', 'diamond'];\r\n                    }\r\n                    else if (info2.color == 'black') {\r\n                        suits = ['club', 'spade'];\r\n                    }\r\n                    for (var i = 0; i < info2.number; i++) {\r\n                        lib.card.list.push([suits[Math.floor(Math.random() * suits.length)], Math.ceil(Math.random() * 13), name]);\r\n                    }\r\n                }\r\n                var packname = 'mode_extension_' + extname;\r\n                if (!lib.cardPack[packname]) {\r\n                    lib.cardPack[packname] = [];\r\n                    lib.translate[packname + '_card_config'] = extname;\r\n                }\r\n                lib.cardPack[packname].push(name);\r\n            },\r\n            /**\r\n             * 添加卡包\r\n             * @param {Object} pack 包\r\n             * @param {string} packagename 包名\r\n             */\r\n            //TODO\r\n            addCardPack: function (pack, packagename) {\r\n                var extname = _status.extension || '扩展';\r\n                packagename = packagename || extname;\r\n                var packname = 'mode_extension_' + packagename;\r\n                lib.cardPack[packname] = [];\r\n                lib.translate[packname + '_card_config'] = packagename;\r\n                for (var i in pack) {\r\n                    if (i == 'mode' || i == 'forbid') continue;\r\n                    if (i == 'list') {\r\n                        for (var j = 0; j < pack[i].length; j++) {\r\n                            lib.card.list.push(pack[i][j]);\r\n                        }\r\n                        continue;\r\n                    }\r\n                    for (var j in pack[i]) {\r\n                        if (i == 'card') {\r\n                            if (pack[i][j].audio == true) {\r\n                                pack[i][j].audio = 'ext:' + extname;\r\n                            }\r\n                            if (pack[i][j].fullskin) {\r\n                                if (_status.evaluatingExtension) {\r\n                                    pack[i][j].image = 'db:extension-' + extname + ':' + j + '.png';\r\n                                }\r\n                                else {\r\n                                    pack[i][j].image = 'ext:' + extname + '/' + j + '.png';\r\n                                }\r\n                            }\r\n                            else if (pack[i][j].fullimage) {\r\n                                if (_status.evaluatingExtension) {\r\n                                    pack[i][j].image = 'db:extension-' + extname + ':' + j + '.jpg';\r\n                                }\r\n                                else {\r\n                                    pack[i][j].image = 'ext:' + extname + '/' + j + '.jpg';\r\n                                }\r\n                            }\r\n                            lib.cardPack[packname].push(j);\r\n                        }\r\n                        else if (i == 'skill') {\r\n                            if (typeof pack[i][j].audio == 'number' || typeof pack[i][j].audio == 'boolean') {\r\n                                pack[i][j].audio = 'ext:' + extname + ':' + pack[i][j].audio;\r\n                            }\r\n                        }\r\n                        if (lib[i][j] == undefined) lib[i][j] = pack[i][j];\r\n                    }\r\n                }\r\n            },\r\n            /**\r\n             * 添加技能\r\n             */\r\n            //TODO\r\n            addSkill: function (name, info, translate, description) {\r\n                if (lib.skill[name]) {\r\n                    return false;\r\n                }\r\n                if (typeof info.audio == 'number' || typeof info.audio == 'boolean') {\r\n                    info.audio = 'ext:' + _status.extension + ':' + info.audio;\r\n                }\r\n                lib.skill[name] = info;\r\n                lib.translate[name] = translate;\r\n                lib.translate[name + '_info'] = description;\r\n                return true;\r\n            },\r\n            /**\r\n             * 添加游戏模式（Mode）\r\n             * @param {string} name \r\n             * @param {string} info \r\n             * @param {string} info2\r\n             * @deprecated [never used] \r\n             */\r\n            addMode: function (name, info, info2) {\r\n                lib.config.all.mode.push(name);\r\n                lib.translate[name] = info2.translate;\r\n                var imgsrc;\r\n                var extname = _status.extension || info2.extension;\r\n                if (_status.evaluatingExtension) {\r\n                    imgsrc = 'extension-' + extname + ':' + name + '.jpg';\r\n                }\r\n                else {\r\n                    imgsrc = 'ext:' + extname + '/' + name + '.jpg';\r\n                }\r\n                lib.mode[name] = {\r\n                    name: info2.translate,\r\n                    config: info2.config,\r\n                    splash: imgsrc,\r\n                    fromextension: true\r\n                }\r\n                lib.init['setMode_' + name] = function () {\r\n                    game.import('mode', function (lib, game, ui, get, ai, _status) {\r\n                        info.name = name;\r\n                        return info;\r\n                    });\r\n                }\r\n                if (!lib.config.extensionInfo[extname]) {\r\n                    lib.config.extensionInfo[extname] = {};\r\n                }\r\n                if (!lib.config.extensionInfo[extname].mode) {\r\n                    lib.config.extensionInfo[extname].mode = [];\r\n                }\r\n                if (lib.config.extensionInfo[extname].mode.indexOf(name) == -1) {\r\n                    lib.config.extensionInfo[extname].mode.push(name);\r\n                }\r\n                game.saveConfig('extensionMode', lib.config.extensionInfo);\r\n            },\r\n            /**\r\n             * 添加全局技能\r\n             * @param {string} skill 技能名\r\n             * @param {?string} player 可以为该技能绑定一名角色\r\n             * @deprecated [never used] \r\n             */\r\n            addGlobalSkill: function (skill, player) {\r\n                var info = lib.skill[skill];\r\n                if (!info) return false;\r\n                lib.skill.global.add(skill);\r\n                if (player) {\r\n                    if (!lib.skill.globalmap[skill]) {\r\n                        lib.skill.globalmap[skill] = [];\r\n                    }\r\n                    lib.skill.globalmap[skill].add(player);\r\n                }\r\n                if (info.trigger) {\r\n                    var setTrigger = function (i, evt) {\r\n                        var name = i + '_' + evt;\r\n                        if (!lib.hook.globalskill[name]) {\r\n                            lib.hook.globalskill[name] = [];\r\n                        }\r\n                        lib.hook.globalskill[name].add(skill);\r\n                        lib.hookmap[evt] = true;\r\n                    }\r\n                    for (var i in info.trigger) {\r\n                        if (typeof info.trigger[i] == 'string') {\r\n                            setTrigger(i, info.trigger[i]);\r\n                        }\r\n                        else if (Array.isArray(info.trigger[i])) {\r\n                            for (var j = 0; j < info.trigger[i].length; j++) {\r\n                                setTrigger(i, info.trigger[i][j]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n            },\r\n            removeGlobalSkill: function (skill) {\r\n                lib.skill.global.remove(skill);\r\n                delete lib.skill.globalmap[skill];\r\n                for (var i in lib.hook.globalskill) {\r\n                    lib.hook.globalskill[i].remove(skill);\r\n                }\r\n            },\r\n            //将清除武将牌上的临时技能\r\n            resetSkills: function () {\r\n                for (var i = 0; i < game.players.length; i++) {\r\n                    for (var j in game.players[i].tempSkills) {\r\n                        game.players[i].removeSkill(j);\r\n                    }\r\n                    var skills = game.players[i].getSkills();\r\n                    for (var j = 0; j < skills.length; j++) {\r\n                        if (lib.skill[skills[j]].vanish) {\r\n                            game.players[i].removeSkill(skills[j]);\r\n                        }\r\n                    }\r\n                    game.players[i].in(true);\r\n                }\r\n                ui.clear();\r\n            },\r\n            removeExtension: function (extname, keepfile) {\r\n                var prefix = 'extension_' + extname;\r\n                for (var i in lib.config) {\r\n                    if (i.indexOf(prefix) == 0) {\r\n                        game.saveConfig(i);\r\n                    }\r\n                }\r\n                localStorage.removeItem(lib.configprefix + prefix);\r\n                game.deleteDB('data', prefix);\r\n                lib.config.extensions.remove(extname);\r\n                game.saveConfig('extensions', lib.config.extensions);\r\n                var modelist = lib.config.extensionInfo[extname];\r\n                if (modelist) {\r\n                    if (modelist.image) {\r\n                        for (var i = 0; i < modelist.image.length; i++) {\r\n                            game.deleteDB('image', 'extension-' + extname + ':' + modelist.image[i]);\r\n                        }\r\n                    }\r\n                    if (modelist.mode) {\r\n                        for (var i = 0; i < modelist.mode.length; i++) {\r\n                            game.clearModeConfig(modelist.mode[i]);\r\n                        }\r\n                    }\r\n                    delete lib.config.extensionInfo[extname];\r\n                    game.saveConfig('extensionInfo', lib.config.extensionInfo);\r\n                }\r\n                if (game.download && !keepfile) {\r\n                    if (lib.node && lib.node.fs) {\r\n                        try {\r\n                            lib.node.fs.readdir(__dirname + '/extension/' + extname, function (err, list) {\r\n                                if (err) {\r\n                                    return;\r\n                                }\r\n                                var removeFile = function () {\r\n                                    if (list.length) {\r\n                                        var filename = list.shift();\r\n                                        lib.node.fs.unlink(__dirname + '/extension/' + extname + '/' + filename, removeFile);\r\n                                    }\r\n                                    else {\r\n                                        try {\r\n                                            lib.node.fs.rmdir(__dirname + '/extension/' + extname, function () { });\r\n                                        }\r\n                                        catch (e) { }\r\n                                    }\r\n                                }\r\n                                removeFile();\r\n                            });\r\n                        }\r\n                        catch (e) { }\r\n                    }\r\n                    else {\r\n                        window.resolveLocalFileSystemURL(lib.assetURL + 'extension/' + extname, function (entry) {\r\n                            entry.removeRecursively();\r\n                        });\r\n                    }\r\n                }\r\n            },\r\n            addRecentCharacter: function () {\r\n                var list = get.config('recentCharacter') || [];\r\n                for (var i = 0; i < arguments.length; i++) {\r\n                    if (lib.character[arguments[i]]) {\r\n                        list.remove(arguments[i]);\r\n                        list.unshift(arguments[i]);\r\n                    }\r\n                }\r\n                var num = parseInt(lib.config.recent_character_number);\r\n                if (list.length > num) {\r\n                    list.splice(num);\r\n                }\r\n                game.saveConfig('recentCharacter', list, true);\r\n            },\r\n            createCard: function (name, suit, number, nature, tags, specialEffects) {\r\n                if (typeof name == 'object') {\r\n                    nature = name.nature;\r\n                    number = name.number;\r\n                    suit = name.suit;\r\n                    name = name.name;\r\n                    if (tags) tags = name.tags;\r\n                    if (specialEffects) specialEffects = name.specialEffects;\r\n                }\r\n                if (typeof name != 'string') {\r\n                    name = 'sha';\r\n                }\r\n                var noclick = false;\r\n                if (suit == 'noclick') {\r\n                    noclick = true;\r\n                    suit = null;\r\n                }\r\n                if (!lib.card[name]) console.log(name);\r\n                if (!suit && lib.card[name] && lib.card[name].cardcolor) {\r\n                    suit = lib.card[name].cardcolor;\r\n                }\r\n                if (!nature && lib.card[name] && lib.card[name].cardnature) {\r\n                    nature = lib.card[name].cardnature;\r\n                }\r\n                if (typeof suit != 'string') {\r\n                    suit = ['heart', 'diamond', 'club', 'spade'].randomGet();\r\n                }\r\n                else if (suit == 'black') {\r\n                    suit = Math.random() < 0.5 ? 'club' : 'spade';\r\n                }\r\n                else if (suit == 'red') {\r\n                    suit = Math.random() < 0.5 ? 'diamond' : 'heart';\r\n                }\r\n                if (typeof number != 'number' && typeof number != 'string') {\r\n                    number = Math.ceil(Math.random() * 13);\r\n                }\r\n                var card;\r\n                if (noclick) {\r\n                    card = ui.create.card(ui.special, 'noclick', true);\r\n                }\r\n                else {\r\n                    card = ui.create.card(ui.special);\r\n                }\r\n                card.storage.vanish = true;\r\n                return card.init([suit, number, name, nature, tags, specialEffects]);\r\n            },\r\n            createCard2: function () {\r\n                var card = game.createCard.apply(this, arguments);\r\n                delete card.storage.vanish;\r\n                return card;\r\n            },\r\n            forceOver: function (bool, callback) {\r\n                _status.event.next.length = 0;\r\n                var next = game.createEvent('finish_game');\r\n                next.bool = bool;\r\n                next.callback = callback;\r\n                next.setContent('forceOver');\r\n                if (_status.paused) {\r\n                    game.uncheck();\r\n                    game.resume();\r\n                }\r\n            },\r\n            over: function (result) {\r\n                if (_status.over) return;\r\n                if (game.me._trueMe) game.swapPlayer(game.me._trueMe);\r\n                var i, j, k, num, table, tr, td, dialog;\r\n                _status.over = true;\r\n                ui.control.show();\r\n                ui.clear();\r\n                game.stopCountChoose();\r\n                if (ui.time3) {\r\n                    clearInterval(ui.time3.interval);\r\n                }\r\n                if ((game.layout == 'long2' || game.layout == 'nova') && !game.chess) {\r\n                    ui.arena.classList.add('choose-character');\r\n                    ui.me.hide();\r\n                    ui.mebg.hide()\r\n                    ui.autonode.hide();\r\n                    if (lib.config.radius_size != 'off') {\r\n                        ui.historybar.style.borderRadius = '0 0 0 4px';\r\n                    }\r\n                }\r\n                if (game.online) {\r\n                    var dialog = ui.create.dialog();\r\n                    dialog.noforcebutton = true;\r\n                    dialog.content.innerHTML = result;\r\n                    dialog.forcebutton = true;\r\n                    var result2 = arguments[1];\r\n                    if (result2 == true) {\r\n                        dialog.content.firstChild.innerHTML = '战斗胜利';\r\n                    }\r\n                    else if (result2 == false) {\r\n                        dialog.content.firstChild.innerHTML = '战斗失败';\r\n                    }\r\n                    ui.update();\r\n                    dialog.add(ui.create.div('.placeholder'));\r\n                    for (var i = 0; i < game.players.length; i++) {\r\n                        var hs = game.players[i].getCards('h');\r\n                        if (hs.length) {\r\n                            dialog.add('<div class=\"text center\">' + get.translation(game.players[i]) + '</div>');\r\n                            dialog.addSmall(hs);\r\n                        }\r\n                    }\r\n        \r\n                    for (var j = 0; j < game.dead.length; j++) {\r\n                        var hs = game.dead[j].getCards('h');\r\n                        if (hs.length) {\r\n                            dialog.add('<div class=\"text center\">' + get.translation(game.dead[j]) + '</div>');\r\n                            dialog.addSmall(hs);\r\n                        }\r\n                    }\r\n        \r\n                    dialog.add(ui.create.div('.placeholder.slim'));\r\n                    if (lib.config.background_audio) {\r\n                        if (result2 === true) {\r\n                            game.playAudio('effect', 'win');\r\n                        }\r\n                        else if (result2 === false) {\r\n                            game.playAudio('effect', 'lose');\r\n                        }\r\n                        else {\r\n                            game.playAudio('effect', 'tie');\r\n                        }\r\n                    }\r\n                    if (!ui.exit) {\r\n                        ui.create.exit();\r\n                    }\r\n                    if (ui.giveup) {\r\n                        ui.giveup.remove();\r\n                        delete ui.giveup;\r\n                    }\r\n                    if (game.servermode) {\r\n                        ui.exit.firstChild.innerHTML = '返回房间';\r\n                        setTimeout(function () {\r\n                            ui.exit.firstChild.innerHTML = '退出房间';\r\n                            _status.roomtimeout = true;\r\n                            lib.config.reconnect_info[2] = null;\r\n                            game.saveConfig('reconnect_info', lib.config.reconnect_info);\r\n                        }, 10000);\r\n                    }\r\n                    if (ui.tempnowuxie) {\r\n                        ui.tempnowuxie.close();\r\n                        delete ui.tempnowuxie;\r\n                    }\r\n                    if (ui.auto) ui.auto.hide();\r\n                    if (ui.wuxie) ui.wuxie.hide();\r\n                    if (game.getIdentityList) {\r\n                        for (var i = 0; i < game.players.length; i++) {\r\n                            game.players[i].setIdentity();\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n                if (lib.config.background_audio) {\r\n                    if (result === true) {\r\n                        game.playAudio('effect', 'win');\r\n                    }\r\n                    else if (result === false) {\r\n                        game.playAudio('effect', 'lose');\r\n                    }\r\n                    else {\r\n                        game.playAudio('effect', 'tie');\r\n                    }\r\n                }\r\n                var resultbool = result;\r\n                if (typeof resultbool !== 'boolean') {\r\n                    resultbool = null;\r\n                }\r\n                if (result === true) result = '战斗胜利';\r\n                if (result === false) result = '战斗失败';\r\n                if (result == undefined) result = '战斗结束';\r\n                dialog = ui.create.dialog(result);\r\n                dialog.noforcebutton = true;\r\n                dialog.forcebutton = true;\r\n                if (game.addOverDialog) {\r\n                    game.addOverDialog(dialog, result);\r\n                }\r\n                if (typeof _status.coin == 'number' && !_status.connectMode) {\r\n                    var coeff = Math.random() * 0.4 + 0.8;\r\n                    var added = 0;\r\n                    var betWin = false;\r\n                    if (result == '战斗胜利') {\r\n                        if (_status.betWin) {\r\n                            betWin = true;\r\n                            _status.coin += 10;\r\n                        }\r\n                        _status.coin += 20;\r\n                        if (_status.additionalReward) {\r\n                            _status.coin += _status.additionalReward();\r\n                        }\r\n                        switch (lib.config.mode) {\r\n                            case 'identity': {\r\n                                switch (game.me.identity) {\r\n                                    case 'zhu': case 'zhong': case 'mingzhong':\r\n                                        if (get.config('enhance_zhu')) {\r\n                                            added = 10;\r\n                                        }\r\n                                        else {\r\n                                            added = 20;\r\n                                        }\r\n                                        break;\r\n                                    case 'fan':\r\n                                        if (get.config('enhance_zhu')) {\r\n                                            added = 16;\r\n                                        }\r\n                                        else {\r\n                                            added = 8;\r\n                                        }\r\n                                        break;\r\n                                    case 'nei':\r\n                                        added = 40;\r\n                                        break;\r\n                                }\r\n                                added = added * (game.players.length + game.dead.length) / 8;\r\n                                break;\r\n                            }\r\n                            case 'guozhan':\r\n                                if (game.me.identity == 'ye') {\r\n                                    added = 8;\r\n                                }\r\n                                else {\r\n                                    added = 5 / get.totalPopulation(game.me.identity);\r\n                                }\r\n                                added = added * (game.players.length + game.dead.length);\r\n                                break;\r\n                            case 'versus':\r\n                                if (_status.friend) {\r\n                                    added = 5 * (game.players.length + _status.friend.length);\r\n                                }\r\n                                break;\r\n                            default:\r\n                                added = 10;\r\n                        }\r\n                    }\r\n                    else {\r\n                        added = 10;\r\n                    }\r\n                    if (lib.config.mode == 'chess' && _status.mode == 'combat' && get.config('additional_player')) {\r\n                        added = 2;\r\n                    }\r\n                    _status.coin += added * coeff;\r\n                    if (_status.coinCoeff) {\r\n                        _status.coin *= _status.coinCoeff;\r\n                    }\r\n                    _status.coin = Math.ceil(_status.coin);\r\n                    dialog.add(ui.create.div('', '获得' + _status.coin + '金'));\r\n                    if (betWin) {\r\n                        game.changeCoin(20);\r\n                        dialog.content.appendChild(document.createElement('br'));\r\n                        dialog.add(ui.create.div('', '（下注赢得10金）'));\r\n                    }\r\n                    game.changeCoin(_status.coin);\r\n                }\r\n                if (get.mode() == 'versus' && _status.ladder) {\r\n                    var mmr = _status.ladder_mmr;\r\n                    mmr += 10 - get.rank(game.me.name, true) * 2;\r\n                    if (result == '战斗胜利') {\r\n                        mmr = 20 + Math.round(mmr);\r\n                        if (mmr > 40) {\r\n                            mmr = 40;\r\n                        }\r\n                        else if (mmr < 10) {\r\n                            mmr = 10;\r\n                        }\r\n                        dialog.add(ui.create.div('', '获得 ' + mmr + ' 积分'));\r\n                    }\r\n                    else {\r\n                        mmr = -30 + Math.round(mmr / 2);\r\n                        if (mmr > -20) {\r\n                            mmr = -20;\r\n                        }\r\n                        else if (mmr < -35) {\r\n                            mmr = -35;\r\n                        }\r\n                        if (lib.storage.ladder.current < 900) {\r\n                            mmr = Math.round(mmr / 4);\r\n                        }\r\n                        else if (lib.storage.ladder.current < 1400) {\r\n                            mmr = Math.round(mmr / 2);\r\n                        }\r\n                        else if (lib.storage.ladder.current < 2000) {\r\n                            mmr = Math.round(mmr / 1.5);\r\n                        }\r\n                        else if (lib.storage.ladder.current > 2500) {\r\n                            mmr = Math.round(mmr * 1.5);\r\n                        }\r\n                        dialog.add(ui.create.div('', '失去 ' + (-mmr) + ' 积分'));\r\n                    }\r\n                    if (_status.ladder_tmp) {\r\n                        lib.storage.ladder.current += 40;\r\n                        delete _status.ladder_tmp;\r\n                    }\r\n                    lib.storage.ladder.current += mmr;\r\n                    if (lib.storage.ladder.top < lib.storage.ladder.current) {\r\n                        lib.storage.ladder.top = lib.storage.ladder.current;\r\n                    }\r\n                    game.save('ladder', lib.storage.ladder);\r\n                    if (ui.ladder && game.getLadderName) {\r\n                        ui.ladder.innerHTML = game.getLadderName(lib.storage.ladder.current);\r\n                    }\r\n                }\r\n                // if(true){\r\n                var tableData = [];\r\n                if (game.players.length) {\r\n                    table = document.createElement('table');\r\n                    tr = document.createElement('tr');\r\n                    tr.appendChild(document.createElement('td'));\r\n                    td = document.createElement('td');\r\n                    td.innerHTML = '伤害';\r\n                    tr.appendChild(td);\r\n                    td = document.createElement('td');\r\n                    td.innerHTML = '受伤';\r\n                    tr.appendChild(td);\r\n                    td = document.createElement('td');\r\n                    td.innerHTML = '摸牌';\r\n                    tr.appendChild(td);\r\n                    td = document.createElement('td');\r\n                    td.innerHTML = '出牌';\r\n                    tr.appendChild(td);\r\n                    td = document.createElement('td');\r\n                    td.innerHTML = '杀敌';\r\n                    tr.appendChild(td);\r\n                    table.appendChild(tr);\r\n                    for (i = 0; i < game.players.length; i++) {\r\n                        var uploadDataRow = {}\r\n                        tr = document.createElement('tr');\r\n                        td = document.createElement('td');\r\n                        td.innerHTML = get.translation(game.players[i]);\r\n                        uploadDataRow.name = game.players[i].name; //名字拼音\r\n                        uploadDataRow.transName = td.innerHTML; //名字\r\n                        uploadDataRow.nickname = game.players[i].nickname;//昵称\r\n                        tr.appendChild(td);\r\n                        td = document.createElement('td');\r\n                        num = 0;\r\n                        for (j = 0; j < game.players[i].stat.length; j++) {\r\n                            if (game.players[i].stat[j].damage != undefined) num += game.players[i].stat[j].damage;\r\n                        }\r\n                        td.innerHTML = num;\r\n                        uploadDataRow.damage = num; //伤害\r\n                        tr.appendChild(td);\r\n                        td = document.createElement('td');\r\n                        num = 0;\r\n                        for (j = 0; j < game.players[i].stat.length; j++) {\r\n                            if (game.players[i].stat[j].damaged != undefined) num += game.players[i].stat[j].damaged;\r\n                        }\r\n                        td.innerHTML = num;\r\n                        uploadDataRow.damaged = num; //受伤\r\n                        tr.appendChild(td);\r\n                        td = document.createElement('td');\r\n                        num = 0;\r\n                        for (j = 0; j < game.players[i].stat.length; j++) {\r\n                            if (game.players[i].stat[j].gain != undefined) num += game.players[i].stat[j].gain;\r\n                        }\r\n                        td.innerHTML = num;\r\n                        uploadDataRow.gain = num; //摸牌\r\n                        tr.appendChild(td);\r\n                        td = document.createElement('td');\r\n                        num = 0;\r\n                        for (j = 0; j < game.players[i].stat.length; j++) {\r\n                            for (k in game.players[i].stat[j].card) {\r\n                                num += game.players[i].stat[j].card[k];\r\n                            }\r\n                        }\r\n                        td.innerHTML = num;\r\n                        uploadDataRow.card = num; //出牌\r\n                        tr.appendChild(td);\r\n                        td = document.createElement('td');\r\n                        num = 0;\r\n                        for (j = 0; j < game.players[i].stat.length; j++) {\r\n                            if (game.players[i].stat[j].kill != undefined) num += game.players[i].stat[j].kill;\r\n                        }\r\n                        td.innerHTML = num;\r\n                        uploadDataRow.kill = num; //杀敌\r\n                        tr.appendChild(td);\r\n                        table.appendChild(tr);\r\n                        uploadDataRow.identity = get.translation(game.players[i].identity) //身份\r\n                        uploadDataRow.alive = true; //存活\r\n                        if (get.mode() == 'identity') {\t//胜利或失败\r\n                            if (game.zhu.isAlive()) {\r\n                                if (game.players[i].identity == 'fan' || game.players[i].identity == 'nei') {\r\n                                    uploadDataRow.winner = false;\r\n                                }\r\n                                else {\r\n                                    uploadDataRow.winner = true;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (game.players.length == 1) {\r\n                                    if (game.players[i].identity == 'zhong')\r\n                                        uploadDataRow.winner = false;\r\n                                    else\r\n                                        uploadDataRow.winner = true;\r\n                                }\r\n                                else {\r\n                                    if (game.players[i].identity == 'fan') {\r\n                                        uploadDataRow.winner = true;\r\n                                    }\r\n                                    else\r\n                                        uploadDataRow.winner = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (get.mode() == 'guozhan') {\r\n                            uploadDataRow.winner = true;\r\n                        }\r\n                        else {\r\n                            uploadDataRow.winner = true;\r\n                        }\r\n                        tableData.push(uploadDataRow)\r\n                    }\r\n                    dialog.add(ui.create.div('.placeholder'));\r\n                    dialog.content.appendChild(table);\r\n                }\r\n                if (game.dead.length) {\r\n                    table = document.createElement('table');\r\n                    table.style.opacity = '0.5';\r\n                    if (game.players.length == 0) {\r\n                        tr = document.createElement('tr');\r\n                        tr.appendChild(document.createElement('td'));\r\n                        td = document.createElement('td');\r\n                        td.innerHTML = '伤害';\r\n                        tr.appendChild(td);\r\n                        td = document.createElement('td');\r\n                        td.innerHTML = '受伤';\r\n                        tr.appendChild(td);\r\n                        td = document.createElement('td');\r\n                        td.innerHTML = '摸牌';\r\n                        tr.appendChild(td);\r\n                        td = document.createElement('td');\r\n                        td.innerHTML = '出牌';\r\n                        tr.appendChild(td);\r\n                        td = document.createElement('td');\r\n                        td.innerHTML = '杀敌';\r\n                        tr.appendChild(td);\r\n                        table.appendChild(tr);\r\n                    }\r\n                    for (i = 0; i < game.dead.length; i++) {\r\n                        var uploadDataRow = {}\r\n                        tr = document.createElement('tr');\r\n                        td = document.createElement('td');\r\n                        td.innerHTML = get.translation(game.dead[i]);\r\n                        uploadDataRow.name = game.dead[i].name;//名字拼音\r\n                        uploadDataRow.transName = td.innerHTML; //名字\r\n                        uploadDataRow.nickname = game.dead[i].nickname;//昵称\r\n                        tr.appendChild(td);\r\n                        td = document.createElement('td');\r\n                        num = 0;\r\n                        for (j = 0; j < game.dead[i].stat.length; j++) {\r\n                            if (game.dead[i].stat[j].damage != undefined) num += game.dead[i].stat[j].damage;\r\n                        }\r\n                        td.innerHTML = num;\r\n                        uploadDataRow.damage = num; //伤害\r\n                        tr.appendChild(td);\r\n                        td = document.createElement('td');\r\n                        num = 0;\r\n                        for (j = 0; j < game.dead[i].stat.length; j++) {\r\n                            if (game.dead[i].stat[j].damaged != undefined) num += game.dead[i].stat[j].damaged;\r\n                        }\r\n                        td.innerHTML = num;\r\n                        uploadDataRow.damaged = num; //受伤\r\n                        tr.appendChild(td);\r\n                        td = document.createElement('td');\r\n                        num = 0;\r\n                        for (j = 0; j < game.dead[i].stat.length; j++) {\r\n                            if (game.dead[i].stat[j].gain != undefined) num += game.dead[i].stat[j].gain;\r\n                        }\r\n                        td.innerHTML = num;\r\n                        uploadDataRow.gain = num; //摸牌\r\n                        tr.appendChild(td);\r\n                        td = document.createElement('td');\r\n                        num = 0;\r\n                        for (j = 0; j < game.dead[i].stat.length; j++) {\r\n                            for (k in game.dead[i].stat[j].card) {\r\n                                num += game.dead[i].stat[j].card[k];\r\n                            }\r\n                        }\r\n                        td.innerHTML = num;\r\n                        uploadDataRow.card = num; //出牌\r\n                        tr.appendChild(td);\r\n                        td = document.createElement('td');\r\n                        num = 0;\r\n                        for (j = 0; j < game.dead[i].stat.length; j++) {\r\n                            if (game.dead[i].stat[j].kill != undefined) num += game.dead[i].stat[j].kill;\r\n                        }\r\n                        td.innerHTML = num;\r\n                        uploadDataRow.kill = num; //杀敌\r\n                        tr.appendChild(td);\r\n                        table.appendChild(tr);\r\n                        uploadDataRow.identity = get.translation(game.dead[i].identity); //身份\r\n                        uploadDataRow.alive = false; //存活\r\n                        if (get.mode() == 'identity') {\t//胜利或失败\r\n                            if (game.zhu.isAlive()) {\r\n                                if (game.dead[i].identity == 'fan' || game.dead[i].identity == 'nei') {\r\n                                    uploadDataRow.winner = false;\r\n                                }\r\n                                else {\r\n                                    uploadDataRow.winner = true;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (game.players.length == 1) {\r\n                                    if (game.players[0].identity == 'nei') {\r\n                                        uploadDataRow.winner = false;\r\n                                    }\r\n                                    else if (game.players[0].identity == 'fan') {\r\n                                        if (game.dead[i].identity == 'fan')\r\n                                            uploadDataRow.winner = true;\r\n                                        else\r\n                                            uploadDataRow.winner = false;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    if (game.dead[i].identity == 'fan') {\r\n                                        uploadDataRow.winner = true;\r\n                                    }\r\n                                    else\r\n                                        uploadDataRow.winner = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (get.mode() == 'guozhan') {\r\n                            if (game.players[0] && (game.dead[i].identity == game.players[0])) {\r\n                                if (game.dead[i].identity != 'ye') {\r\n                                    uploadDataRow.winner = true;\r\n                                }\r\n                                else {\r\n                                    uploadDataRow.winner = false;\r\n                                }\r\n                            }\r\n                            else\r\n                                uploadDataRow.winner = false;\r\n                        }\r\n                        else {\r\n                            if (game.players[0] && (game.dead[i].identity == game.players[0])) {\r\n                                if (game.dead[i].identity != 'ye') {\r\n                                    uploadDataRow.winner = true;\r\n                                }\r\n                                else {\r\n                                    uploadDataRow.winner = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        tableData.push(uploadDataRow)\r\n                    }\r\n                    dialog.add(ui.create.div('.placeholder'));\r\n                    dialog.content.appendChild(table);\r\n                }\r\n                var nowType = 'other'\r\n                if (get.mode() == 'identity') nowType = 'identity'\r\n                else if (get.mode() == 'guozhan') nowType = 'guozhan'\r\n                var uploadData = { type: nowType, playerRecords: tableData }\r\n                if (game.onlinezhu) {\r\n                    try {\r\n                        var xhr = new XMLHttpRequest();\r\n                        var sendForm = new FormData();\r\n                        sendForm.append('data', JSON.stringify(uploadData))\r\n                        xhr.open('post', 'https://data.vtuberkill.com/game-records/', (e) => { console.log(e) })\r\n                        xhr.send(sendForm);\r\n                    }\r\n                    catch (e) {\r\n                        console.log(e);\r\n                    }\r\n                }\r\n                if (game.additionaldead && game.additionaldead.length) {\r\n                    table = document.createElement('table');\r\n                    table.style.opacity = '0.5';\r\n                    for (i = 0; i < game.additionaldead.length; i++) {\r\n                        tr = document.createElement('tr');\r\n                        td = document.createElement('td');\r\n                        td.innerHTML = get.translation(game.additionaldead[i]);\r\n                        tr.appendChild(td);\r\n                        td = document.createElement('td');\r\n                        num = 0;\r\n                        for (j = 0; j < game.additionaldead[i].stat.length; j++) {\r\n                            if (game.additionaldead[i].stat[j].damage != undefined) num += game.additionaldead[i].stat[j].damage;\r\n                        }\r\n                        td.innerHTML = num;\r\n                        tr.appendChild(td);\r\n                        td = document.createElement('td');\r\n                        num = 0;\r\n                        for (j = 0; j < game.additionaldead[i].stat.length; j++) {\r\n                            if (game.additionaldead[i].stat[j].damaged != undefined) num += game.additionaldead[i].stat[j].damaged;\r\n                        }\r\n                        td.innerHTML = num;\r\n                        tr.appendChild(td);\r\n                        td = document.createElement('td');\r\n                        num = 0;\r\n                        for (j = 0; j < game.additionaldead[i].stat.length; j++) {\r\n                            if (game.additionaldead[i].stat[j].gain != undefined) num += game.additionaldead[i].stat[j].gain;\r\n                        }\r\n                        td.innerHTML = num;\r\n                        tr.appendChild(td);\r\n                        td = document.createElement('td');\r\n                        num = 0;\r\n                        for (j = 0; j < game.additionaldead[i].stat.length; j++) {\r\n                            for (k in game.additionaldead[i].stat[j].card) {\r\n                                num += game.additionaldead[i].stat[j].card[k];\r\n                            }\r\n                        }\r\n                        td.innerHTML = num;\r\n                        tr.appendChild(td);\r\n                        td = document.createElement('td');\r\n                        num = 0;\r\n                        for (j = 0; j < game.additionaldead[i].stat.length; j++) {\r\n                            if (game.additionaldead[i].stat[j].kill != undefined) num += game.additionaldead[i].stat[j].kill;\r\n                        }\r\n                        td.innerHTML = num;\r\n                        tr.appendChild(td);\r\n                        table.appendChild(tr);\r\n                    }\r\n                    dialog.add(ui.create.div('.placeholder'));\r\n                    dialog.content.appendChild(table);\r\n                }\r\n                // }\r\n                dialog.add(ui.create.div('.placeholder'));\r\n        \r\n                var clients = game.players.concat(game.dead);\r\n                for (var i = 0; i < clients.length; i++) {\r\n                    if (clients[i].isOnline2()) {\r\n                        clients[i].send(game.over, dialog.content.innerHTML, game.checkOnlineResult(clients[i]));\r\n                    }\r\n                }\r\n        \r\n                dialog.add(ui.create.div('.placeholder'));\r\n        \r\n                for (var i = 0; i < game.players.length; i++) {\r\n                    if (!_status.connectMode && game.players[i].isUnderControl(true) && game.layout != 'long2') continue;\r\n                    var hs = game.players[i].getCards('h');\r\n                    if (hs.length) {\r\n                        dialog.add('<div class=\"text center\">' + get.translation(game.players[i]) + '</div>');\r\n                        dialog.addSmall(hs);\r\n                    }\r\n                }\r\n                for (var i = 0; i < game.dead.length; i++) {\r\n                    if (!_status.connectMode && game.dead[i].isUnderControl(true) && game.layout != 'long2') continue;\r\n                    var hs = game.dead[i].getCards('h');\r\n                    if (hs.length) {\r\n                        dialog.add('<div class=\"text center\">' + get.translation(game.dead[i]) + '</div>');\r\n                        dialog.addSmall(hs);\r\n                    }\r\n                }\r\n                dialog.add(ui.create.div('.placeholder.slim'));\r\n                game.addVideo('over', null, dialog.content.innerHTML);\r\n                var vinum = parseInt(lib.config.video);\r\n                if (!_status.video && vinum && game.getVideoName && window.indexedDB && _status.videoInited) {\r\n                    var store = lib.db.transaction(['video'], 'readwrite').objectStore('video');\r\n                    var videos = lib.videos.slice(0);\r\n                    for (var i = 0; i < videos.length; i++) {\r\n                        if (videos[i].starred) {\r\n                            videos.splice(i--, 1);\r\n                        }\r\n                    }\r\n                    for (var deletei = 0; deletei < 5; deletei++) {\r\n                        if (videos.length >= vinum) {\r\n                            var toremove = videos.pop();\r\n                            lib.videos.remove(toremove);\r\n                            store.delete(toremove.time);\r\n                        }\r\n                        else {\r\n                            break;\r\n                        }\r\n                    }\r\n                    var me = game.me || game.players[0];\r\n                    if (!me) return;\r\n                    var newvid = {\r\n                        name: game.getVideoName(),\r\n                        mode: lib.config.mode,\r\n                        video: lib.video,\r\n                        win: result == '战斗胜利',\r\n                        name1: me.name1 || me.name,\r\n                        name2: me.name2,\r\n                        time: lib.getUTC(new Date())\r\n                    };\r\n                    var modecharacters = lib.characterPack['mode_' + get.mode()];\r\n                    if (modecharacters) {\r\n                        if (get.mode() == 'guozhan') {\r\n                            if (modecharacters[newvid.name1]) {\r\n                                if (newvid.name1.indexOf('gz_shibing') == 0) {\r\n                                    newvid.name1 = newvid.name1.slice(3, 11);\r\n                                }\r\n                                else {\r\n                                    newvid.name1 = newvid.name1.slice(3);\r\n                                }\r\n                            }\r\n                            if (modecharacters[newvid.name2]) {\r\n                                if (newvid.name2.indexOf('gz_shibing') == 0) {\r\n                                    newvid.name2 = newvid.name2.slice(3, 11);\r\n                                }\r\n                                else {\r\n                                    newvid.name2 = newvid.name2.slice(3);\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (modecharacters[newvid.name1]) {\r\n                                newvid.name1 = get.mode() + '::' + newvid.name1;\r\n                            }\r\n                            if (modecharacters[newvid.name2]) {\r\n                                newvid.name2 = get.mode() + '::' + newvid.name2;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (newvid.name1 && newvid.name1.indexOf('subplayer_') == 0) {\r\n                        newvid.name1 = newvid.name1.slice(10, newvid.name1.lastIndexOf('_'));\r\n                    }\r\n                    if (newvid.name2 && newvid.name2.indexOf('subplayer_') == 0) {\r\n                        newvid.name1 = newvid.name2.slice(10, newvid.name1.lastIndexOf('_'));\r\n                    }\r\n                    lib.videos.unshift(newvid);\r\n                    store.put(newvid);\r\n                    ui.create.videoNode(newvid, true);\r\n                }\r\n                // _status.auto=false;\r\n                if (ui.auto) {\r\n                    // ui.auto.classList.remove('glow');\r\n                    ui.auto.hide();\r\n                }\r\n                if (ui.wuxie) ui.wuxie.hide();\r\n                if (ui.giveup) {\r\n                    ui.giveup.remove();\r\n                    delete ui.giveup;\r\n                }\r\n        \r\n                if (lib.config.test_game && !_status.connectMode) {\r\n                    if (typeof lib.config.test_game !== 'string') {\r\n                        switch (lib.config.mode) {\r\n                            case 'identity': game.saveConfig('mode', 'guozhan'); break;\r\n                            case 'guozhan': game.saveConfig('mode', 'versus'); break;\r\n                            case 'versus': game.saveConfig('mode', 'boss'); break;\r\n                            case 'boss': game.saveConfig('mode', 'chess'); break;\r\n                            case 'chess': game.saveConfig('mode', 'stone'); break;\r\n                            case 'stone': game.saveConfig('mode', 'identity'); break;\r\n                        }\r\n                    }\r\n                    setTimeout(game.reload, 500);\r\n                }\r\n                if (game.controlOver) {\r\n                    game.controlOver(); return;\r\n                }\r\n                if (!_status.brawl) {\r\n                    if (lib.config.mode == 'boss') {\r\n                        ui.create.control('再战', function () {\r\n                            var pointer = game.boss;\r\n                            var map = { boss: game.me == game.boss, links: [] };\r\n                            for (var iwhile = 0; iwhile < 10; iwhile++) {\r\n                                pointer = pointer.nextSeat;\r\n                                if (pointer == game.boss) {\r\n                                    break;\r\n                                }\r\n                                if (!pointer.side) {\r\n                                    map.links.push(pointer.name);\r\n                                }\r\n                            }\r\n                            game.saveConfig('continue_name_boss', map);\r\n                            game.saveConfig('mode', lib.config.mode);\r\n                            localStorage.setItem(lib.configprefix + 'directstart', true);\r\n                            game.reload();\r\n                        });\r\n                    }\r\n                    else if (lib.config.mode == 'versus') {\r\n                        if (_status.mode == 'standard' || _status.mode == 'three') {\r\n                            ui.create.control('再战', function () {\r\n                                game.saveConfig('continue_name_versus' + (_status.mode == 'three' ? '_three' : ''), {\r\n                                    friend: _status.friendBackup,\r\n                                    enemy: _status.enemyBackup,\r\n                                    color: _status.color\r\n                                });\r\n                                game.saveConfig('mode', lib.config.mode);\r\n                                localStorage.setItem(lib.configprefix + 'directstart', true);\r\n                                game.reload();\r\n                            });\r\n                        }\r\n                    }\r\n                    else if (!_status.connectMode && get.config('continue_game') && !ui.continue_game && !_status.brawl && !game.no_continue_game) {\r\n                        ui.continue_game = ui.create.control('再战', game.reloadCurrent);\r\n                    }\r\n                }\r\n                if (!ui.restart) {\r\n                    if (game.onlineroom && typeof game.roomId == 'number') {\r\n                        ui.restart = ui.create.control('restart', function () {\r\n                            game.broadcastAll(function () {\r\n                                if (ui.exit) {\r\n                                    ui.exit.stay = true;\r\n                                    ui.exit.firstChild.innerHTML = '返回房间';\r\n                                }\r\n                            });\r\n                            game.saveConfig('tmp_owner_roomId', game.roomId);\r\n                            setTimeout(game.reload, 100);\r\n                        });\r\n                    }\r\n                    else {\r\n                        ui.restart = ui.create.control('restart', game.reload);\r\n                    }\r\n                }\r\n                if (ui.tempnowuxie) {\r\n                    ui.tempnowuxie.close();\r\n                    delete ui.tempnowuxie;\r\n                }\r\n        \r\n                if (ui.revive) {\r\n                    ui.revive.close();\r\n                    delete ui.revive;\r\n                }\r\n                if (ui.swap) {\r\n                    ui.swap.close();\r\n                    delete ui.swap;\r\n                }\r\n                for (var i = 0; i < lib.onover.length; i++) {\r\n                    lib.onover[i](resultbool);\r\n                }\r\n                if (game.addRecord) {\r\n                    game.addRecord(resultbool);\r\n                }\r\n                if (window.isNonameServer) {\r\n                    lib.configOL.gameStarted = false;\r\n                    game.saveConfig('pagecfg' + window.isNonameServer, [lib.configOL, game.roomId, _status.onlinenickname, _status.onlineavatar]);\r\n                    game.reload();\r\n                }\r\n                else if (_status.connectMode && !game.online) {\r\n                    setTimeout(game.reload, 15000)\r\n                }\r\n            },\r\n            /**\r\n             * 游戏事件循环\r\n             * @function\r\n             */\r\n            loop: function () {\r\n                var Evt = _status.event;\r\n                var step = Evt.step;\r\n                var source = Evt.source;\r\n                var player = Evt.player;\r\n                var target = Evt.target;\r\n                var targets = Evt.targets;\r\n                var card = Evt.card;\r\n                var cards = Evt.cards;\r\n                var skill = Evt.skill;\r\n                var forced = Evt.forced;\r\n                var num = Evt.num;\r\n                var trigger = Evt._trigger;\r\n                var result = Evt._result;\r\n                if (_status.paused2 || _status.imchoosing) {\r\n                    if (!lib.status.dateDelaying) {\r\n                        lib.status.dateDelaying = new Date();\r\n                    }\r\n                }\r\n                if (_status.paused || _status.paused2 || _status.over) {\r\n                    return;\r\n                }\r\n                if (_status.paused3) {\r\n                    _status.paused3 = 'paused';\r\n                    return;\r\n                }\r\n                if (lib.status.dateDelaying) {\r\n                    lib.status.dateDelayed += lib.getUTC(new Date()) - lib.getUTC(lib.status.dateDelaying);\r\n                    delete lib.status.dateDelaying;\r\n                }\r\n                if (Evt.next.length > 0) {\r\n                    var next = Evt.next.shift();\r\n                    if (next.player && next.player.skipList.contains(next.name)) {\r\n                        Evt.trigger(next.name + 'Skipped');\r\n                        next.player.skipList.remove(next.name);\r\n                        if (lib.phaseName.contains(next.name)) next.player.getHistory('skipped').add(next.name);\r\n                    }\r\n                    else {\r\n                        /**\r\n                         * _status.event.parent(即Evt.parent)：当前正在执行事件的父事件\r\n                         * 当_status.event.next或_status.event.after内的事件被执行时，当前事件会成为被执行事件的父事件\r\n                         * @name _status.event_parent\r\n                         * @type {!Object}\r\n                         */\r\n                        next.parent = Evt;\r\n                        /**\r\n                         * _status.event.player(即Evt.player)：当前正在执行事件的角色\r\n                         * @name _status.event_player\r\n                         * @type {!HTMLDivElement}\r\n                         */\r\n                        /**\r\n                         * _status.event.target(即Evt.target)：当前正在执行事件的目标\r\n                         * @name _status.event_target\r\n                         * @type {!HTMLDivElement}\r\n                         */\r\n                        _status.event = next;\r\n                    }\r\n                }\r\n                else if (Evt.finished) {\r\n                    if (Evt._triggered == 1) {\r\n                        if (Evt.type == 'card') Evt.trigger('useCardToOmitted');\r\n                        Evt.trigger(Evt.name + 'Omitted');\r\n                        Evt._triggered = 4;\r\n                    }\r\n                    else if (Evt._triggered == 2) {\r\n                        if (Evt.type == 'card') Evt.trigger('useCardToEnd');\r\n                        Evt.trigger(Evt.name + 'End');\r\n                        Evt._triggered = 3;\r\n                    }\r\n                    else if (Evt._triggered == 3) {\r\n                        if (Evt.type == 'card') Evt.trigger('useCardToAfter');\r\n                        Evt.trigger(Evt.name + 'After');\r\n                        Evt._triggered++;\r\n                    }\r\n                    else if (Evt.after && Evt.after.length) {\r\n                        var next = Evt.after.shift();\r\n                        if (next.player && next.player.skipList.contains(next.name)) {\r\n                            Evt.trigger(next.name + 'Skipped');\r\n                            next.player.skipList.remove(next.name);\r\n                            if (lib.phaseName.contains(next.name)) next.player.getHistory('skipped').add(next.name)\r\n                        }\r\n                        else {\r\n                            next.parent = Evt;\r\n                            _status.event = next;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (Evt.parent) {\r\n                            if (Evt.result) {\r\n                                Evt.parent._result = Evt.result;\r\n                            }\r\n                            _status.event = Evt.parent;\r\n                        }\r\n                        else {\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (Evt._triggered == 0) {\r\n                        if (Evt.type == 'card') Evt.trigger('useCardToBefore');\r\n                        Evt.trigger(Evt.name + 'Before');\r\n                        Evt._triggered++;\r\n                    }\r\n                    else if (Evt._triggered == 1) {\r\n                        if (Evt.type == 'card') Evt.trigger('useCardToBegin');\r\n                        if (Evt.name == 'phase' && !Evt._begun) {\r\n                            var next = game.createEvent('phasing', false, Evt);\r\n                            next.player = Evt.player;\r\n                            next.skill = Evt.skill;\r\n                            next.setContent('phasing');\r\n                            Evt._begun = true;\r\n                        }\r\n                        else {\r\n                            Evt.trigger(Evt.name + 'Begin');\r\n                            Evt._triggered++;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (player && player.classList.contains('dead') && !Evt.forceDie && Evt.name != 'phaseLoop') {\r\n                            game.broadcastAll(function () {\r\n                                while (_status.dieClose.length) {\r\n                                    _status.dieClose.shift().close();\r\n                                }\r\n                            });\r\n                            if (Evt._oncancel) {\r\n                                Evt._oncancel();\r\n                            }\r\n                            Evt.finish();\r\n                        }\r\n                        else if (player && player.removed && Evt.name != 'phaseLoop') {\r\n                            Evt.finish();\r\n                        }\r\n                        else if (player && player.isOut() && Evt.name != 'phaseLoop' && !Evt.includeOut) {\r\n                            if (Evt.name == 'phase' && player == _status.roundStart && !Evt.skill) {\r\n                                _status.roundSkipped = true;\r\n                            }\r\n                            Evt.finish();\r\n                        }\r\n                        else {\r\n                            if (_status.withError || lib.config.compatiblemode || (_status.connectMode && !lib.config.debug)) {\r\n                                try {\r\n                                    Evt.content(Evt, step, source, player, target, targets,\r\n                                        card, cards, skill, forced, num, trigger, result,\r\n                                        _status, lib, game, ui, get, ai);\r\n                                }\r\n                                catch (e) {\r\n                                    game.print('游戏出错：' + Evt.name);\r\n                                    game.print(e.toString());\r\n                                    console.log(e);\r\n                                }\r\n                            }\r\n                            else {\r\n                                Evt.content(Evt, step, source, player, target, targets,\r\n                                    card, cards, skill, forced, num, trigger, result,\r\n                                    _status, lib, game, ui, get, ai);\r\n                            }\r\n                        }\r\n                        Evt.step++;\r\n                    }\r\n                }\r\n                game.loop();\r\n            },\r\n            pause: function () {\r\n                clearTimeout(_status.timeout);\r\n                _status.paused = true;\r\n            },\r\n            pause2: function () {\r\n                if (_status.connectMode) return;\r\n                _status.paused2 = true;\r\n            },\r\n            resume: function () {\r\n                if (_status.paused) {\r\n                    if (!_status.noclearcountdown) {\r\n                        game.stopCountChoose();\r\n                    }\r\n                    _status.paused = false;\r\n                    delete _status.waitingForTransition;\r\n                    game.loop();\r\n                }\r\n            },\r\n            resume2: function () {\r\n                if (_status.connectMode) return;\r\n                if (_status.paused2) {\r\n                    _status.paused2 = false;\r\n                    game.loop();\r\n                }\r\n            },\r\n            delay: function (time, time2) {\r\n                if (_status.paused) return;\r\n                game.pause();\r\n                if (typeof time != 'number') time = 1;\r\n                if (typeof time2 != 'number') time2 = 0;\r\n                time = time * lib.config.duration + time2;\r\n                if (lib.config.speed == 'vvfast') time /= 3;\r\n                _status.timeout = setTimeout(game.resume, time);\r\n            },\r\n            delayx: function (time, time2) {\r\n                if (typeof time != 'number') time = 1;\r\n                switch (lib.config.game_speed) {\r\n                    case 'vslow': time *= 2.5; break;\r\n                    case 'slow': time *= 1.5; break;\r\n                    case 'fast': time *= 0.7; break;\r\n                    case 'vfast': time *= 0.4; break;\r\n                    case 'vvfast': time *= 0.2; break;\r\n                }\r\n                return game.delay(time, time2);\r\n            },\r\n            /**\r\n             * 检测玩家是否选择完毕(选择按钮`Evt.filterButton`，选择卡牌`Evt.filterCard`，选择对象`Evt.filterTarget`)\r\n             * @param {?GameCores.Bases.Event} Evt 要处理的事件，如果为null，使用当前事件\r\n             * @returns {(undefined|boolean)} 如果事件不需要等待玩家选择，返回undefined；如果事件选择完毕，返回true；否则返回false\r\n             */\r\n            check: function (Evt) {\r\n                var i, j, range;\r\n                if (Evt == undefined) Evt = _status.event;\r\n                var custom = Evt.custom || {};\r\n                var ok = true, auto = true;\r\n                var player = Evt.player;\r\n                var auto_confirm = lib.config.auto_confirm;\r\n                var players = game.players.slice(0);\r\n                if (Evt.deadTarget) players.addArray(game.dead);\r\n                if (!Evt.filterButton && !Evt.filterCard && !Evt.filterTarget && (!Evt.skill || !Evt._backup)) {\r\n                    if (Evt.choosing) {\r\n                        _status.imchoosing = true;//??\r\n                    }\r\n                    return;\r\n                }\r\n                player.node.equips.classList.remove('popequip');\r\n                //button\r\n                if (Evt.filterButton) {\r\n                    var dialog = Evt.dialog;\r\n                    range = get.select(Evt.selectButton);\r\n                    var selectableButtons = false;\r\n                    if (Evt.forceAuto && ui.selected.buttons.length == range[1]) auto = true;\r\n                    else if (range[0] != range[1] || range[0] > 1) auto = false;\r\n                    for (i = 0; i < dialog.buttons.length; i++) {\r\n                        if (dialog.buttons[i].classList.contains('unselectable')) continue;\r\n                        if (Evt.filterButton(dialog.buttons[i], player) && lib.filter.buttonIncluded(dialog.buttons[i])) {\r\n                            if (ui.selected.buttons.length < range[1]) {\r\n                                dialog.buttons[i].classList.add('selectable');\r\n                            }\r\n                            else if (range[1] == -1) {\r\n                                dialog.buttons[i].classList.add('selected');\r\n                                ui.selected.buttons.add(dialog.buttons[i]);\r\n                            }\r\n                            else {\r\n                                dialog.buttons[i].classList.remove('selectable');\r\n                            }\r\n                        }\r\n                        else {\r\n                            dialog.buttons[i].classList.remove('selectable');\r\n                            if (range[1] == -1) {\r\n                                dialog.buttons[i].classList.remove('selected');\r\n                                ui.selected.buttons.remove(dialog.buttons[i]);\r\n                            }\r\n                        }\r\n                        if (dialog.buttons[i].classList.contains('selected')) {\r\n                            dialog.buttons[i].classList.add('selectable');\r\n                        }\r\n                        else if (!selectableButtons && dialog.buttons[i].classList.contains('selectable')) {\r\n                            selectableButtons = true;\r\n                        }\r\n                    }\r\n                    if (ui.selected.buttons.length < range[0]) {\r\n                        if (!Evt.forced || selectableButtons) {\r\n                            ok = false;\r\n                        }\r\n                        if (Evt.complexSelect || Evt.getParent().name == 'chooseCharacter' || Evt.getParent().name == 'chooseButtonOL') {\r\n                            ok = false;\r\n                        }\r\n                    }\r\n                    if (custom.add.button) {\r\n                        custom.add.button();\r\n                    }\r\n                }\r\n                //card\r\n                if (Evt.filterCard) {\r\n                    if (ok == false) {\r\n                        game.uncheck('card');\r\n                    }\r\n                    else {\r\n                        var cards = player.getCards(Evt.position);\r\n                        var firstCheck = false;\r\n                        range = get.select(Evt.selectCard);\r\n                        if (!Evt._cardChoice && typeof Evt.selectCard != 'function' &&\r\n                            !Evt.complexCard && range[1] != -1 && !lib.config.compatiblemode) {\r\n                            Evt._cardChoice = [];\r\n                            firstCheck = true;\r\n                        }\r\n                        if (Evt.isMine() && Evt.name == 'chooseToUse' && Evt.parent.name == 'phaseUse' && !Evt.skill &&\r\n                            !Evt._targetChoice && !firstCheck && window.Map && !lib.config.compatiblemode) {\r\n                            Evt._targetChoice = new Map();\r\n                            for (var i = 0; i < Evt._cardChoice.length; i++) {\r\n                                if (!lib.card[Evt._cardChoice[i].name].complexTarget) {\r\n                                    var targets = [];\r\n                                    for (var j = 0; j < players.length; j++) {\r\n                                        if (Evt.filterTarget(Evt._cardChoice[i], player, players[j])) {\r\n                                            targets.push(players[j]);\r\n                                        }\r\n                                    }\r\n                                    Evt._targetChoice.set(Evt._cardChoice[i], targets);\r\n                                }\r\n                            }\r\n                        }\r\n                        var selectableCards = false;\r\n                        if (range[0] != range[1] || range[0] > 1) auto = false;\r\n                        for (i = 0; i < cards.length; i++) {\r\n                            if (lib.config.cardtempname != 'off') {\r\n                                var cardname = get.name(cards[i]);\r\n                                var cardnature = get.nature(cards[i]);\r\n                                if (cards[i].name != cardname || ((cardnature || cards[i].nature) && cards[i].nature != cardnature)) {\r\n                                    if (!cards[i]._tempName) cards[i]._tempName = ui.create.div('.tempname', cards[i]);\r\n                                    var tempname = get.translation(cardname);\r\n                                    cards[i]._tempName.dataset.nature = 'fire';\r\n                                    if (cardname == 'sha') {\r\n                                        if (cardnature) tempname = get.translation(cardnature) + tempname;\r\n                                        if (cardnature == 'thunder') cards[i]._tempName.dataset.nature = 'thunder';\r\n                                        if (cardnature == 'kami') cards[i]._tempName.dataset.nature = 'kami';\r\n                                        if (cardnature == 'ice') cards[i]._tempName.dataset.nature = 'ice';\r\n                                        if (cardnature == 'ocean') cards[i]._tempName.dataset.nature = 'ocean';\r\n                                        if (cardnature == 'yami') cards[i]._tempName.dataset.nature = 'yami';\r\n                                    }\r\n                                    cards[i]._tempName.innerHTML = lib.config.cardtempname == 'default' ? get.verticalStr(tempname) : tempname;\r\n                                    cards[i]._tempName.tempname = tempname;\r\n                                }\r\n                            }\r\n                            var nochess = true;\r\n                            if (!lib.filter.cardAiIncluded(cards[i])) {\r\n                                nochess = false;\r\n                            }\r\n                            else if (Evt._cardChoice && !firstCheck) {\r\n                                if (!Evt._cardChoice.contains(cards[i])) {\r\n                                    nochess = false;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (player.isOut() || !lib.filter.cardRespondable(cards[i], player) ||\r\n                                    cards[i].classList.contains('uncheck') ||\r\n                                    !Evt.filterCard(cards[i], player)) {\r\n                                    nochess = false;\r\n                                }\r\n                            }\r\n                            if (nochess) {\r\n                                if (ui.selected.cards.length < range[1]) {\r\n                                    cards[i].classList.add('selectable');\r\n                                    if (Evt._cardChoice && firstCheck) {\r\n                                        Evt._cardChoice.push(cards[i]);\r\n                                    }\r\n                                }\r\n                                else if (range[1] == -1) {\r\n                                    cards[i].classList.add('selected');\r\n                                    cards[i].updateTransform(true);\r\n                                    ui.selected.cards.add(cards[i]);\r\n                                }\r\n                                else {\r\n                                    cards[i].classList.remove('selectable');\r\n                                }\r\n                            }\r\n                            else {\r\n                                cards[i].classList.remove('selectable');\r\n                                if (range[1] == -1) {\r\n                                    cards[i].classList.remove('selected');\r\n                                    cards[i].updateTransform();\r\n                                    ui.selected.cards.remove(cards[i]);\r\n                                }\r\n                            }\r\n                            if (cards[i].classList.contains('selected')) {\r\n                                cards[i].classList.add('selectable');\r\n                            }\r\n                            else if (!selectableCards && cards[i].classList.contains('selectable')) {\r\n                                selectableCards = true;\r\n                            }\r\n                        }\r\n                        if (ui.selected.cards.length < range[0]) {\r\n                            if (!Evt.forced || selectableCards || Evt.complexSelect) {\r\n                                ok = false;\r\n                            }\r\n                        }\r\n        \r\n                        if (lib.config.popequip && get.is.phoneLayout() &&\r\n                            typeof Evt.position == 'string' && Evt.position.indexOf('e') != -1 &&\r\n                            player.node.equips.querySelector('.card.selectable')) {\r\n                            player.node.equips.classList.add('popequip');\r\n                            auto_confirm = false;\r\n                        }\r\n                    }\r\n                    if (custom.add.card) {\r\n                        custom.add.card();\r\n                    }\r\n                }\r\n                //player\r\n                if (Evt.filterTarget) {\r\n                    if (ok == false) {\r\n                        game.uncheck('target');\r\n                    }\r\n                    else {\r\n                        var card = get.card();\r\n                        var firstCheck = false;\r\n                        range = get.select(Evt.selectTarget);\r\n                        var selectableTargets = false;\r\n                        if (range[0] != range[1] || range[0] > 1) auto = false;\r\n                        for (i = 0; i < players.length; i++) {\r\n                            var nochess = true;\r\n                            if (game.chess && !Evt.chessForceAll && player && get.distance(player, players[i], 'pure') > 7) {\r\n                                nochess = false;\r\n                            }\r\n                            else if (players[i].isOut()) {\r\n                                nochess = false;\r\n                            }\r\n                            else if (Evt._targetChoice && Evt._targetChoice.has(card)) {\r\n                                var targetChoice = Evt._targetChoice.get(card);\r\n                                if (!Array.isArray(targetChoice) || !targetChoice.contains(players[i])) {\r\n                                    nochess = false;\r\n                                }\r\n                            }\r\n                            else if (!Evt.filterTarget(card, player, players[i])) {\r\n                                nochess = false;\r\n                            }\r\n                            if (nochess) {\r\n                                if (ui.selected.targets.length < range[1]) {\r\n                                    players[i].classList.add('selectable');\r\n                                    if (Array.isArray(Evt._targetChoice)) {\r\n                                        Evt._targetChoice.push(players[i]);\r\n                                    }\r\n                                }\r\n                                else if (range[1] == -1) {\r\n                                    players[i].classList.add('selected');\r\n                                    ui.selected.targets.add(players[i]);\r\n                                }\r\n                                else {\r\n                                    players[i].classList.remove('selectable');\r\n                                }\r\n                            }\r\n                            else {\r\n                                players[i].classList.remove('selectable');\r\n                                if (range[1] == -1) {\r\n                                    players[i].classList.remove('selected');\r\n                                    ui.selected.targets.remove(players[i]);\r\n                                }\r\n                            }\r\n                            if (players[i].classList.contains('selected')) {\r\n                                players[i].classList.add('selectable');\r\n                            }\r\n                            else if (!selectableTargets && players[i].classList.contains('selectable')) {\r\n                                selectableTargets = true;\r\n                            }\r\n                            if (players[i].instance) {\r\n                                if (players[i].classList.contains('selected')) {\r\n                                    players[i].instance.classList.add('selected');\r\n                                }\r\n                                else {\r\n                                    players[i].instance.classList.remove('selected');\r\n                                }\r\n                                if (players[i].classList.contains('selectable')) {\r\n                                    players[i].instance.classList.add('selectable');\r\n                                }\r\n                                else {\r\n                                    players[i].instance.classList.remove('selectable');\r\n                                }\r\n                            }\r\n                        }\r\n                        if (ui.selected.targets.length < range[0]) {\r\n                            if (!Evt.forced || selectableTargets || Evt.complexSelect) {\r\n                                ok = false;\r\n                            }\r\n                        }\r\n                        if (range[1] == -1 && ui.selected.targets.length == 0 && Evt.targetRequired) {\r\n                            ok = false;\r\n                        }\r\n                    }\r\n                    if (custom.add.target) {\r\n                        custom.add.target();\r\n                    }\r\n                }\r\n                //skill\r\n                if (!Evt.skill && get.noSelected() && !_status.noconfirm) {\r\n                    var skills = [], enable, info;\r\n                    var skills2;\r\n                    if (Evt._skillChoice) {\r\n                        skills2 = Evt._skillChoice;\r\n                        for (var i = 0; i < skills2.length; i++) {\r\n                            if (Evt.isMine() || !Evt._aiexclude.contains(skills2[i])) {\r\n                                skills.push(skills2[i]);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        var skills2;\r\n                        if (get.mode() == 'guozhan' && player.hasSkillTag('nomingzhi', false, null, true)) {\r\n                            skills2 = player.getSkills(false, true, false);\r\n                        }\r\n                        else {\r\n                            skills2 = player.getSkills(true, true, false);\r\n                        }\r\n                        skills2 = game.filterSkills(skills2.concat(lib.skill.global), player, player.getSkills('e').concat(lib.skill.global));\r\n                        Evt._skillChoice = [];\r\n                        game.expandSkills(skills2);\r\n                        for (i = 0; i < skills2.length; i++) {\r\n                            _status.event.skillBy = skills2[i];\r\n                            info = get.info(skills2[i]);\r\n                            enable = false;\r\n                            if (typeof info.enable == 'function') enable = info.enable(Evt);\r\n                            else if (typeof info.enable == 'object') enable = info.enable.contains(Evt.name);\r\n                            else if (info.enable == 'phaseUse') enable = (Evt.type == 'phase');\r\n                            else if (typeof info.enable == 'string') enable = (info.enable == Evt.name);\r\n                            if (enable) {\r\n                                if (!game.expandSkills(player.getSkills().concat(lib.skill.global)).contains(skills2[i]) && (info.noHidden || get.mode() != 'guozhan' || player.hasSkillTag('nomingzhi', false, null, true))) enable = false;\r\n                                if (info.filter && !info.filter(Evt, player)) enable = false;\r\n                                if (info.viewAs && typeof info.viewAs != 'function' && Evt.filterCard && !Evt.filterCard(info.viewAs, player, Evt)) enable = false;\r\n                                if (info.viewAs && typeof info.viewAs != 'function' && info.viewAsFilter && info.viewAsFilter(player) == false) enable = false;\r\n                                if (info.usable && get.skillCount(skills2[i]) >= info.usable) enable = false;\r\n                                if (info.chooseButton && _status.event.noButton) enable = false;\r\n                                if (info.round && player.storage[_status.event.skillBy + '_roundcount'] > 0) enable = false;\r\n                            }\r\n                            if (enable) {\r\n                                if (Evt.isMine() || !Evt._aiexclude.contains(skills2[i])) {\r\n                                    skills.add(skills2[i]);\r\n                                }\r\n                                Evt._skillChoice.add(skills2[i]);\r\n                            }\r\n                            delete _status.event.skillBy;\r\n                        }\r\n                    }\r\n        \r\n                    var globalskills = [];\r\n                    var globallist = lib.skill.global.slice(0);\r\n                    game.expandSkills(globallist);\r\n                    for (var i = 0; i < skills.length; i++) {\r\n                        if (globallist.contains(skills[i])) {\r\n                            globalskills.push(skills.splice(i--, 1)[0]);\r\n                        }\r\n                    }\r\n                    var equipskills = [];\r\n                    var ownedskills = player.getSkills(true, false);\r\n                    game.expandSkills(ownedskills);\r\n                    for (var i = 0; i < skills.length; i++) {\r\n                        if (!ownedskills.contains(skills[i])) {\r\n                            equipskills.push(skills.splice(i--, 1)[0]);\r\n                        }\r\n                    }\r\n                    if (equipskills.length) {\r\n                        ui.create.skills3(equipskills);\r\n                    }\r\n                    else if (ui.skills3) {\r\n                        ui.skills3.close();\r\n                    }\r\n                    if (skills.length) {\r\n                        ui.create.skills(skills);\r\n                    }\r\n                    else if (ui.skills) {\r\n                        ui.skills.close();\r\n                    }\r\n                    if (globalskills.length) {\r\n                        ui.create.skills2(globalskills);\r\n                    }\r\n                    else if (ui.skills2) {\r\n                        ui.skills2.close();\r\n                    }\r\n                }\r\n                else {\r\n                    if (ui.skills) {\r\n                        ui.skills.close()\r\n                    }\r\n                    if (ui.skills2) {\r\n                        ui.skills2.close()\r\n                    }\r\n                    if (ui.skills3) {\r\n                        ui.skills3.close()\r\n                    }\r\n                }\r\n                //is multipled targets\r\n                _status.multitarget = false;\r\n                var skillinfo = get.info(_status.event.skill);\r\n                if (_status.event.name == 'chooseToUse') {\r\n                    if (skillinfo && skillinfo.multitarget && !skillinfo.multiline) {\r\n                        _status.multitarget = true;\r\n                    }\r\n                    if ((skillinfo && skillinfo.viewAs && typeof skillinfo.viewAs != 'function') || !_status.event.skill) {\r\n                        var cardinfo = get.info(get.card());\r\n                        if (cardinfo && cardinfo.multitarget && !cardinfo.multiline) {\r\n                            _status.multitarget = true;\r\n                        }\r\n                    }\r\n                }\r\n                else if (_status.event.multitarget) {\r\n                    _status.multitarget = true;\r\n                }\r\n        \r\n                if (Evt.isMine()) {\r\n                    if (game.chess && game.me && get.config('show_distance')) {\r\n                        for (var i = 0; i < players.length; i++) {\r\n                            if (players[i] == game.me) {\r\n                                players[i].node.action.hide();\r\n                            }\r\n                            else {\r\n                                players[i].node.action.show();\r\n                                var dist = get.distance(game.me, players[i], 'pure');\r\n                                var dist2 = get.distance(game.me, players[i]);\r\n                                players[i].node.action.innerHTML = '距离：' + dist2 + '/' + dist;\r\n                                if (dist > 7) {\r\n                                    players[i].node.action.classList.add('thunder');\r\n                                }\r\n                                else {\r\n                                    players[i].node.action.classList.remove('thunder');\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (ok && auto && (auto_confirm || (skillinfo && skillinfo.direct)) && (!_status.mousedragging || !_status.mouseleft) &&\r\n                        !_status.mousedown && !_status.touchnocheck) {\r\n                        if (ui.confirm) {\r\n                            if (!skillinfo || !skillinfo.preservecancel) {\r\n                                ui.confirm.close();\r\n                            }\r\n                        }\r\n                        if (skillinfo && skillinfo.preservecancel && !ui.confirm) {\r\n                            ui.create.confirm('c');\r\n                        }\r\n                        if (Evt.skillDialog == true) Evt.skillDialog = false;\r\n                        ui.click.ok();\r\n                        _status.mousedragging = null;\r\n                    }\r\n                    else {\r\n                        ui.arena.classList.add('selecting');\r\n                        if (Evt.filterTarget && (!Evt.filterCard || !Evt.position || (typeof Evt.position == 'string' && Evt.position.indexOf('e') == -1))) {\r\n                            ui.arena.classList.add('tempnoe');\r\n                        }\r\n                        game.countChoose();\r\n                        if (!_status.noconfirm && !_status.event.noconfirm) {\r\n                            if (!_status.mousedown || _status.mouseleft) {\r\n                                var str = '';\r\n                                if (ok) str += 'o';\r\n                                if (!Evt.forced && !Evt.fakeforce && get.noSelected()) str += 'c';\r\n                                ui.create.confirm(str);\r\n                            }\r\n                        }\r\n                    }\r\n                    if (ui.confirm && ui.confirm.lastChild.link == 'cancel') {\r\n                        if (_status.event.type == 'phase' && !_status.event.skill) {\r\n                            ui.confirm.lastChild.innerHTML = '结束';\r\n                        }\r\n                        else {\r\n                            ui.confirm.lastChild.innerHTML = '取消';\r\n                        }\r\n                    }\r\n                }\r\n                return ok;\r\n            },\r\n            uncheck: function () {\r\n                var i, j;\r\n                if (game.chess) {\r\n                    var shadows = ui.chessContainer.getElementsByClassName('playergrid temp');\r\n                    while (shadows.length) {\r\n                        shadows[0].remove();\r\n                    }\r\n                }\r\n                var argc = arguments.length;\r\n                var args = new Array(argc);\r\n                for (var i = 0; i < argc; i++) {\r\n                    args[i] = arguments[i];\r\n                }\r\n                if ((args.length == 0 || args.contains('card')) && _status.event.player) {\r\n                    var cards = _status.event.player.getCards('hejs');\r\n                    for (j = 0; j < cards.length; j++) {\r\n                        cards[j].classList.remove('selected');\r\n                        cards[j].classList.remove('selectable');\r\n                        if (cards[j]._tempName) {\r\n                            cards[j]._tempName.delete();\r\n                            delete cards[j]._tempName;\r\n                        }\r\n                        cards[j].updateTransform();\r\n                    }\r\n                    ui.selected.cards.length = 0;\r\n                    _status.event.player.node.equips.classList.remove('popequip');\r\n                }\r\n                var players = game.players.slice(0);\r\n                if (_status.event.deadTarget) players.addArray(game.dead);\r\n                if ((args.length == 0 || args.contains('target'))) {\r\n                    for (j = 0; j < players.length; j++) {\r\n                        players[j].classList.remove('selected');\r\n                        players[j].classList.remove('selectable');\r\n                        if (players[j].instance) {\r\n                            players[j].instance.classList.remove('selected');\r\n                            players[j].instance.classList.remove('selectable');\r\n                        }\r\n                    }\r\n                    ui.selected.targets.length = 0;\r\n                }\r\n                if ((args.length == 0 || args.contains('button')) && _status.event.dialog && _status.event.dialog.buttons) {\r\n                    for (var j = 0; j < _status.event.dialog.buttons.length; j++) {\r\n                        _status.event.dialog.buttons[j].classList.remove('selectable');\r\n                        _status.event.dialog.buttons[j].classList.remove('selected');\r\n                    }\r\n                    ui.selected.buttons.length = 0;\r\n                }\r\n                if (args.length == 0) {\r\n                    ui.arena.classList.remove('selecting');\r\n                    ui.arena.classList.remove('tempnoe');\r\n                    _status.imchoosing = false;\r\n                    _status.lastdragchange.length = 0;\r\n                    _status.mousedragging = null;\r\n                    _status.mousedragorigin = null;\r\n        \r\n                    while (ui.touchlines.length) {\r\n                        ui.touchlines.shift().delete();\r\n                    }\r\n                }\r\n                ui.canvas.width = ui.arena.offsetWidth;\r\n                ui.canvas.height = ui.arena.offsetHeight;\r\n                for (var i = 0; i < players.length; i++) {\r\n                    players[i].unprompt();\r\n                }\r\n                for (var i = 0; i < _status.dragline.length; i++) {\r\n                    if (_status.dragline[i]) _status.dragline[i].remove();\r\n                }\r\n                ui.arena.classList.remove('dragging');\r\n                _status.dragline.length = 0;\r\n            },\r\n            swapSeat: function (player1, player2, prompt, behind, noanimate) {\r\n                if (noanimate) {\r\n                    player1.style.transition = 'all 0s';\r\n                    player2.style.transition = 'all 0s';\r\n                    ui.refresh(player1);\r\n                    ui.refresh(player2);\r\n                }\r\n                if (behind) {\r\n                    var totalPopulation = game.players.length + game.dead.length + 1;\r\n                    for (var iwhile = 0; iwhile < totalPopulation; iwhile++) {\r\n                        if (player1.next != player2) {\r\n                            game.swapSeat(player1, player1.next, false, false);\r\n                        }\r\n                        else {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (prompt != false) {\r\n                        game.log(player1, '将座位移至', player2, '后');\r\n                    }\r\n                }\r\n                else {\r\n                    game.addVideo('swapSeat', null, [player1.dataset.position, player2.dataset.position]);\r\n                    var temp1, pos, i, num;\r\n                    temp1 = player1.dataset.position;\r\n                    player1.dataset.position = player2.dataset.position;\r\n                    player2.dataset.position = temp1;\r\n                    game.arrangePlayers();\r\n                    if (!game.chess) {\r\n                        if (player1.dataset.position == '0' || player2.dataset.position == '0') {\r\n                            pos = parseInt(player1.dataset.position);\r\n                            if (pos == 0) pos = parseInt(player2.dataset.position);\r\n                            num = game.players.length + game.dead.length;\r\n                            for (i = 0; i < game.players.length; i++) {\r\n                                temp1 = parseInt(game.players[i].dataset.position) - pos;\r\n                                if (temp1 < 0) temp1 += num;\r\n                                game.players[i].dataset.position = temp1;\r\n                            }\r\n                            for (i = 0; i < game.dead.length; i++) {\r\n                                temp1 = parseInt(game.dead[i].dataset.position) - pos;\r\n                                if (temp1 < 0) temp1 += num;\r\n                                game.dead[i].dataset.position = temp1;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (prompt != false) {\r\n                        game.log(player1, '和', player2, '交换了座位');\r\n                    }\r\n                }\r\n                if (noanimate) {\r\n                    setTimeout(function () {\r\n                        player1.style.transition = '';\r\n                        player2.style.transition = '';\r\n                    }, 200);\r\n                }\r\n            },\r\n            swapPlayer: function (player, player2) {\r\n                if (player2) {\r\n                    if (player == game.me) game.swapPlayer(player2);\r\n                    else if (player2 == game.me) game.swapPlayer(player);\r\n                }\r\n                else {\r\n                    if (player == game.me) return;\r\n                    var players = game.players.concat(game.dead);\r\n                    for (var i = 0; i < players.length; i++) {\r\n                        players[i].style.transition = 'all 0s';\r\n                    }\r\n                    game.addVideo('swapPlayer', player, get.cardsInfo(player.getCards('h')));\r\n                    if (!game.chess) {\r\n                        var pos = parseInt(player.dataset.position);\r\n                        var num = game.players.length + game.dead.length;\r\n                        var players = game.players.concat(game.dead);\r\n                        var temp;\r\n                        for (var i = 0; i < players.length; i++) {\r\n                            temp = parseInt(players[i].dataset.position) - pos;\r\n                            if (temp < 0) temp += num;\r\n                            players[i].dataset.position = temp;\r\n                        }\r\n                    }\r\n                    game.me.node.handcards1.remove();\r\n                    game.me.node.handcards2.remove();\r\n                    var current = game.me;\r\n                    game.me = player;\r\n                    if (current.isDead()) {\r\n                        current.$die();\r\n                    }\r\n                    ui.handcards1 = player.node.handcards1.animate('start').fix();\r\n                    ui.handcards2 = player.node.handcards2.animate('start').fix();\r\n                    ui.handcards1Container.appendChild(ui.handcards1);\r\n                    ui.handcards2Container.appendChild(ui.handcards2);\r\n        \r\n                    ui.updatehl();\r\n                }\r\n                if (game.me.isAlive()) {\r\n                    if (ui.auto) ui.auto.show();\r\n                    if (ui.wuxie) ui.wuxie.show();\r\n                    if (ui.revive) {\r\n                        ui.revive.close();\r\n                        delete ui.revive;\r\n                    }\r\n                    if (ui.swap) {\r\n                        ui.swap.close();\r\n                        delete ui.swap;\r\n                    }\r\n                    if (ui.restart) {\r\n                        ui.restart.close();\r\n                        delete ui.restart;\r\n                    }\r\n                    if (ui.continue_game) {\r\n                        ui.continue_game.close();\r\n                        delete ui.continue_game;\r\n                    }\r\n                }\r\n                if (lib.config.mode == 'identity') {\r\n                    game.me.setIdentity(game.me.identity);\r\n                }\r\n                setTimeout(function () {\r\n                    for (var i = 0; i < players.length; i++) {\r\n                        players[i].style.transition = '';\r\n                    }\r\n                }, 100);\r\n            },\r\n            swapControl: function (player) {\r\n                if (player == game.me) return;\r\n        \r\n                game.me.node.handcards1.remove();\r\n                game.me.node.handcards2.remove();\r\n        \r\n                game.me = player;\r\n                ui.handcards1 = player.node.handcards1.animate('start').fix();\r\n                ui.handcards2 = player.node.handcards2.animate('start').fix();\r\n                ui.handcards1Container.insertBefore(ui.handcards1, ui.handcards1Container.firstChild);\r\n                ui.handcards2Container.insertBefore(ui.handcards2, ui.handcards2Container.firstChild);\r\n                ui.updatehl();\r\n                game.addVideo('swapControl', player, get.cardsInfo(player.getCards('h')));\r\n        \r\n                if (game.me.isAlive()) {\r\n                    if (ui.auto) ui.auto.show();\r\n                    if (ui.wuxie) ui.wuxie.show();\r\n                    if (ui.revive) {\r\n                        ui.revive.close();\r\n                        delete ui.revive;\r\n                    }\r\n                    if (ui.swap) {\r\n                        ui.swap.close();\r\n                        delete ui.swap;\r\n                    }\r\n                    if (ui.restart) {\r\n                        ui.restart.close();\r\n                        delete ui.restart;\r\n                    }\r\n                    if (ui.continue_game) {\r\n                        ui.continue_game.close();\r\n                        delete ui.continue_game;\r\n                    }\r\n                }\r\n            },\r\n            swapPlayerAuto: function (player) {\r\n                if (game.modeSwapPlayer) {\r\n                    game.modeSwapPlayer(player);\r\n                }\r\n                else {\r\n                    game.swapPlayer(player);\r\n                }\r\n            },\r\n            findNext: function (player) {\r\n                var players = get.players(lib.sort.position);\r\n                var position = parseInt(player.dataset.position);\r\n                for (var i = 0; i < players.length; i++) {\r\n                    if (parseInt(players[i].dataset.position) >= position) {\r\n                        return players[i];\r\n                    }\r\n                }\r\n                return players[0];\r\n            },\r\n            loadModeAsync: function (name, callback) {\r\n                window.game = game;\r\n                var script = lib.init.js(lib.assetURL + 'mode', name, function () {\r\n                    if (!lib.config.dev) delete window.game;\r\n                    script.remove();\r\n                    var content = lib.imported.mode[name];\r\n                    delete lib.imported.mode[name];\r\n                    if (get.is.empty(lib.imported.mode)) {\r\n                        delete lib.imported.mode;\r\n                    }\r\n                    callback(content);\r\n                });\r\n            },\r\n            switchMode: function (name, configx) {\r\n                if (!lib.layoutfixed.contains(name)) {\r\n                    if (lib.config.layout != game.layout) {\r\n                        lib.init.layout(lib.config.layout);\r\n                    }\r\n                    else if (lib.config.mode == 'brawl') {\r\n                        if (lib.config.player_border == 'normal' && (game.layout == 'long' || game.layout == 'long2')) {\r\n                            ui.arena.classList.add('lslim_player');\r\n                        }\r\n                    }\r\n                }\r\n                window.game = game;\r\n                var script = lib.init.js(lib.assetURL + 'mode', name, function () {\r\n                    if (!lib.config.dev) delete window.game;\r\n                    script.remove();\r\n                    var mode = lib.imported.mode;\r\n                    _status.sourcemode = lib.config.mode;\r\n                    lib.config.mode = name;\r\n        \r\n                    var i, j, k;\r\n                    for (i in mode[lib.config.mode].element) {\r\n                        if (!lib.element[i]) lib.element[i] = [];\r\n                        for (j in mode[lib.config.mode].element[i]) {\r\n                            if (j == 'init') {\r\n                                if (!lib.element[i].inits) lib.element[i].inits = [];\r\n                                lib.element[i].inits.push(mode[lib.config.mode].element[i][j]);\r\n                            }\r\n                            else {\r\n                                lib.element[i][j] = mode[lib.config.mode].element[i][j];\r\n                            }\r\n                        }\r\n                    }\r\n                    for (i in mode[lib.config.mode].ai) {\r\n                        if (typeof mode[lib.config.mode].ai[i] == 'object') {\r\n                            if (ai[i] == undefined) ai[i] = {};\r\n                            for (j in mode[lib.config.mode].ai[i]) {\r\n                                ai[i][j] = mode[lib.config.mode].ai[i][j];\r\n                            }\r\n                        }\r\n                        else {\r\n                            ai[i] = mode[lib.config.mode].ai[i];\r\n                        }\r\n                    }\r\n                    for (i in mode[lib.config.mode].ui) {\r\n                        if (typeof mode[lib.config.mode].ui[i] == 'object') {\r\n                            if (ui[i] == undefined) ui[i] = {};\r\n                            for (j in mode[lib.config.mode].ui[i]) {\r\n                                ui[i][j] = mode[lib.config.mode].ui[i][j];\r\n                            }\r\n                        }\r\n                        else {\r\n                            ui[i] = mode[lib.config.mode].ui[i];\r\n                        }\r\n                    }\r\n                    for (i in mode[lib.config.mode].game) {\r\n                        game[i] = mode[lib.config.mode].game[i];\r\n                    }\r\n                    for (i in mode[lib.config.mode].get) {\r\n                        get[i] = mode[lib.config.mode].get[i];\r\n                    }\r\n                    if (game.onwash) {\r\n                        lib.onwash.push(game.onwash);\r\n                        delete game.onwash;\r\n                    }\r\n                    if (game.onover) {\r\n                        lib.onover.push(game.onover);\r\n                        delete game.onover;\r\n                    }\r\n                    lib.config.banned = lib.config[lib.config.mode + '_banned'] || [];\r\n                    lib.config.bannedcards = lib.config[lib.config.mode + '_bannedcards'] || [];\r\n        \r\n                    for (i in mode[lib.config.mode]) {\r\n                        if (i == 'element') continue;\r\n                        if (i == 'game') continue;\r\n                        if (i == 'ai') continue;\r\n                        if (i == 'ui') continue;\r\n                        if (i == 'get') continue;\r\n                        if (i == 'config') continue;\r\n                        if (i == 'start') continue;\r\n                        if (i == 'startBefore') continue;\r\n                        if (lib[i] == undefined) lib[i] = (Array.isArray(mode[lib.config.mode][i])) ? [] : {};\r\n                        for (j in mode[lib.config.mode][i]) {\r\n                            lib[i][j] = mode[lib.config.mode][i][j];\r\n                        }\r\n                    }\r\n        \r\n                    // var pilecfg=lib.config.customcardpile[get.config('cardpilename')];\r\n                    // if(pilecfg){\r\n                    //     lib.config.bannedpile=pilecfg[0]||{};\r\n                    //     lib.config.addedpile=pilecfg[1]||{};\r\n                    // }\r\n        \r\n                    _status.event = {\r\n                        finished: true,\r\n                        next: [],\r\n                        after: []\r\n                    };\r\n                    _status.paused = false;\r\n        \r\n                    if (_status.connectMode && lib.mode[name].connect) {\r\n                        game.saveConfig('connect_mode', name);\r\n                        game.clearConnect();\r\n                        lib.configOL.mode = name;\r\n                        if (configx) {\r\n                            for (var i in configx) {\r\n                                lib.configOL[i] = configx[i];\r\n                            }\r\n                        }\r\n                        else {\r\n                            for (var i in lib.mode[name].connect) {\r\n                                if (i == 'update') continue;\r\n                                lib.configOL[i.slice(8)] = get.config(i);\r\n                            }\r\n                            lib.configOL.characterPack = lib.connectCharacterPack.slice(0);\r\n                            lib.configOL.cardPack = lib.connectCardPack.slice(0);\r\n                            for (var i = 0; i < lib.config.connect_characters.length; i++) {\r\n                                lib.configOL.characterPack.remove(lib.config.connect_characters[i]);\r\n                            }\r\n                            for (var i = 0; i < lib.config.connect_cards.length; i++) {\r\n                                lib.configOL.cardPack.remove(lib.config.connect_cards[i]);\r\n                            }\r\n                            lib.configOL.banned = lib.config['connect_' + name + '_banned'];\r\n                            lib.configOL.bannedcards = lib.config['connect_' + name + '_bannedcards'];\r\n                        }\r\n                        lib.configOL.version = lib.versionOL;\r\n                        for (var i in lib.cardPackList) {\r\n                            if (lib.configOL.cardPack.contains(i)) {\r\n                                lib.card.list = lib.card.list.concat(lib.cardPackList[i]);\r\n                            }\r\n                        }\r\n                        for (i = 0; i < lib.card.list.length; i++) {\r\n                            if (lib.card.list[i][2] == 'huosha') {\r\n                                lib.card.list[i] = lib.card.list[i].slice(0);\r\n                                lib.card.list[i][2] = 'sha';\r\n                                lib.card.list[i][3] = 'fire';\r\n                            }\r\n                            else if (lib.card.list[i][2] == 'leisha') {\r\n                                lib.card.list[i] = lib.card.list[i].slice(0);\r\n                                lib.card.list[i][2] = 'sha';\r\n                                lib.card.list[i][3] = 'thunder';\r\n                            }\r\n                            else if (lib.card.list[i][2] == 'haisha') {\r\n                                lib.card.list[i] = lib.card.list[i].slice(0);\r\n                                lib.card.list[i][2] = 'sha';\r\n                                lib.card.list[i][3] = 'ocean';\r\n                            }\r\n                            else if (lib.card.list[i][2] == 'yamisha') {\r\n                                lib.card.list[i] = lib.card.list[i].slice(0);\r\n                                lib.card.list[i][2] = 'sha';\r\n                                lib.card.list[i][3] = 'yami';\r\n                            }\r\n                            if (lib.card.list[i][2] == 'haitao') {\r\n                                lib.card.list[i] = lib.card.list[i].slice(0);\r\n                                lib.card.list[i][2] = 'tao';\r\n                                lib.card.list[i][3] = 'ocean';\r\n                            }\r\n                            if (lib.card.list[i][2] == 'haijiu') {\r\n                                lib.card.list[i] = lib.card.list[i].slice(0);\r\n                                lib.card.list[i][2] = 'jiu';\r\n                                lib.card.list[i][3] = 'ocean';\r\n                            }\r\n                            if (!lib.card[lib.card.list[i][2]]) {\r\n                                lib.card.list.splice(i, 1); i--;\r\n                            }\r\n                            else if (lib.card[lib.card.list[i][2]].mode &&\r\n                                lib.card[lib.card.list[i][2]].mode.contains(lib.config.mode) == false) {\r\n                                lib.card.list.splice(i, 1); i--;\r\n                            }\r\n                        }\r\n                    }\r\n        \r\n                    if (!lib.config.show_playerids || !game.showIdentity) {\r\n                        ui.playerids.style.display = 'none';\r\n                    }\r\n                    else {\r\n                        ui.playerids.style.display = '';\r\n                    }\r\n        \r\n                    if (mode[lib.config.mode].startBefore) mode[lib.config.mode].startBefore();\r\n                    game.createEvent('game', false).setContent(mode[lib.config.mode].start);\r\n                    if (lib.mode[lib.config.mode] && lib.mode[lib.config.mode].fromextension) {\r\n                        var startstr = mode[lib.config.mode].start.toString();\r\n                        if (startstr.indexOf('onfree') == -1) {\r\n                            setTimeout(lib.init.onfree, 500);\r\n                        }\r\n                    }\r\n                    delete lib.imported.mode[name];\r\n        \r\n                    if (!lib.db) {\r\n                        try {\r\n                            lib.storage = JSON.parse(localStorage.getItem(lib.configprefix + lib.config.mode));\r\n                            if (typeof lib.storage != 'object') throw ('err');\r\n                            if (lib.storage == null) throw ('err');\r\n                        }\r\n                        catch (err) {\r\n                            lib.storage = {};\r\n                            localStorage.setItem(lib.configprefix + lib.config.mode, \"{}\");\r\n                        }\r\n                        game.loop();\r\n                    }\r\n                    else {\r\n                        game.getDB('data', lib.config.mode, function (obj) {\r\n                            lib.storage = obj || {};\r\n                            game.loop();\r\n                        });\r\n                    }\r\n                });\r\n            },\r\n            loadMode: function (mode) {\r\n                var next = game.createEvent('loadMode', false);\r\n                next.mode = mode;\r\n                next.setContent('loadMode');\r\n            },\r\n            loadPackage: function () {\r\n                var next = game.createEvent('loadPackage');\r\n                next.packages = [];\r\n                for (var i = 0; i < arguments.length; i++) {\r\n                    if (typeof arguments[i] == 'string') {\r\n                        next.packages.push(arguments[i]);\r\n                    }\r\n                }\r\n                next.setContent('loadPackage');\r\n            },\r\n            phaseLoop: function (player) {\r\n                var next = game.createEvent('phaseLoop');\r\n                next.player = player;\r\n                next.setContent('phaseLoop');\r\n            },\r\n            gameDraw: function (player, num) {\r\n                var next = game.createEvent('gameDraw');\r\n                next.player = player || game.me;\r\n                if (num == undefined) next.num = 4;\r\n                else next.num = num;\r\n                next.setContent('gameDraw');\r\n                return next;\r\n            },\r\n            chooseCharacterDouble: function () {\r\n                var next = game.createEvent('chooseCharacter', false);\r\n                var config, width, num, ratio, func, update, list, first;\r\n                for (var i = 0; i < arguments.length; i++) {\r\n                    if (typeof arguments[i] == 'number') {\r\n                        if (!width) {\r\n                            width = arguments[i];\r\n                        }\r\n                        else if (!num) {\r\n                            num = arguments[i];\r\n                        }\r\n                        else {\r\n                            ratio = arguments[i];\r\n                        }\r\n                    }\r\n                    else if (typeof arguments[i] == 'function') {\r\n                        if (!func) {\r\n                            func = arguments[i];\r\n                        }\r\n                        else {\r\n                            update = arguments[i];\r\n                        }\r\n                    }\r\n                    else if (Array.isArray(arguments[i])) {\r\n                        list = arguments[i];\r\n                    }\r\n                    else if (get.objtype(arguments[i]) == 'object') {\r\n                        config = arguments[i];\r\n                    }\r\n                }\r\n                if (!config) {\r\n                    list = config;\r\n                    config = {};\r\n                }\r\n                config.width = config.width || width || 8;\r\n                config.height = 4;\r\n                config.size = config.width * config.height;\r\n                config.num = config.num || num || 3;\r\n                config.ratio = config.ratio || ratio || 1.2;\r\n                config.update = config.update || update;\r\n                if (!config.hasOwnProperty('first')) {\r\n                    if (typeof first == 'boolean') {\r\n                        config.first = first;\r\n                    }\r\n                    else {\r\n                        config.first = 'rand';\r\n                    }\r\n                }\r\n                if (!list) {\r\n                    list = [];\r\n                    for (var i in lib.character) {\r\n                        if (typeof func == 'function') {\r\n                            if (!func(i)) continue;\r\n                        }\r\n                        else {\r\n                            if (lib.filter.characterDisabled(i)) continue;\r\n                        }\r\n                        list.push(i);\r\n                    }\r\n                }\r\n                next.config = config;\r\n                next.list = list;\r\n                next.setContent([function(){\r\n                    Evt.nodes = [];\r\n                    Evt.avatars = [];\r\n                    Evt.friend = [];\r\n                    Evt.enemy = [];\r\n                    Evt.blank = [];\r\n                    for (var i = 0; i < Evt.config.size; i++) {\r\n                        Evt.nodes.push(ui.create.div('.shadowed.reduce_radius.choosedouble'));\r\n                    }\r\n                    Evt.moveAvatar = function (node, i) {\r\n                        if (!node.classList.contains('moved')) {\r\n                            Evt.blank.push(node.index);\r\n                        }\r\n                        Evt.nodes[node.index].style.display = '';\r\n                        Evt.nodes[node.index].show();\r\n                        clearTimeout(Evt.nodes[node.index].choosetimeout);\r\n                        Evt.moveNode(node, i);\r\n                        var nodex = Evt.nodes[node.index];\r\n                        nodex.choosetimeout = setTimeout(function () {\r\n                            nodex.hide();\r\n                            nodex.choosetimeout = setTimeout(function () {\r\n                                nodex.show();\r\n                                nodex.style.display = 'none';\r\n                            }, 300);\r\n                        }, 400);\r\n                    };\r\n                    Evt.aiMove = function (friend) {\r\n                        var list = [];\r\n                        for (var i = 0; i < Evt.avatars.length; i++) {\r\n                            if (!Evt.avatars[i].classList.contains('moved')) {\r\n                                list.push(Evt.avatars[i]);\r\n                            }\r\n                        }\r\n                        for (var i = 0; i < list.length; i++) {\r\n                            if (Math.random() < 0.7 || i == list.length - 1) {\r\n                                if (friend) {\r\n                                    Evt.moveAvatar(list[i], Evt.friend.length + Evt.config.width * (Evt.config.height - 1));\r\n                                    Evt.friend.push(list[i]);\r\n                                }\r\n                                else {\r\n                                    Evt.moveAvatar(list[i], Evt.enemy.length);\r\n                                    Evt.enemy.push(list[i]);\r\n                                }\r\n                                list[i].classList.add('moved');\r\n                                break;\r\n                            }\r\n                        }\r\n                    };\r\n                    Evt.promptbar = ui.create.div('.hidden', ui.window);\r\n                    Evt.promptbar.style.width = '100%';\r\n                    Evt.promptbar.style.left = 0;\r\n                    if (get.is.phoneLayout()) {\r\n                        Evt.promptbar.style.top = '20px';\r\n                    }\r\n                    else {\r\n                        Evt.promptbar.style.top = '58px';\r\n                    }\r\n                    Evt.promptbar.style.pointerEvents = 'none';\r\n                    Evt.promptbar.style.textAlign = 'center';\r\n                    Evt.promptbar.style.zIndex = '2';\r\n                    ui.create.div('.shadowed.reduce_radius', Evt.promptbar);\r\n                    Evt.promptbar.firstChild.style.fontSize = '18px';\r\n                    Evt.promptbar.firstChild.style.padding = '6px 10px';\r\n                    Evt.promptbar.firstChild.style.position = 'relative';\r\n                    Evt.prompt = function (str) {\r\n                        Evt.promptbar.firstChild.innerHTML = str;\r\n                        Evt.promptbar.show();\r\n                    };\r\n                    Evt.moveNode = function (node, i) {\r\n                        var width = Evt.width, height = Evt.height, margin = Evt.margin;\r\n                        var left = -(width + 10) * Evt.config.width / 2 + 5 + (i % Evt.config.width) * (width + 10);\r\n                        var top = -(height + 10) * Evt.config.height / 2 + 5 + Math.floor(i / Evt.config.width) * (height + 10) + margin / 2;\r\n                        node.style.transform = 'translate(' + left + 'px,' + top + 'px)';\r\n                        node.index = i;\r\n                    };\r\n                    Evt.resize = function () {\r\n                        var margin = 0;\r\n                        if (!get.is.phoneLayout()) {\r\n                            margin = 38;\r\n                        }\r\n                        var height = (ui.window.offsetHeight - 10 * (Evt.config.height + 1) - margin) / Evt.config.height;\r\n                        var width = (ui.window.offsetWidth - 10 * (Evt.config.width + 1)) / Evt.config.width;\r\n                        if (width * Evt.config.ratio < height) {\r\n                            height = width * Evt.config.ratio;\r\n                        }\r\n                        else {\r\n                            width = height / Evt.config.ratio;\r\n                        }\r\n                        Evt.width = width;\r\n                        Evt.height = height;\r\n                        Evt.margin = margin;\r\n                        for (var i = 0; i < Evt.config.size; i++) {\r\n                            Evt.moveNode(Evt.nodes[i], i);\r\n                            Evt.nodes[i].style.width = width + 'px';\r\n                            Evt.nodes[i].style.height = height + 'px';\r\n                            if (Evt.avatars[i]) {\r\n                                Evt.moveNode(Evt.avatars[i], Evt.avatars[i].index);\r\n                                Evt.avatars[i].style.width = width + 'px';\r\n                                Evt.avatars[i].style.height = height + 'px';\r\n                                Evt.avatars[i].nodename.style.fontSize = Math.max(14, Math.round(width / 5.6)) + 'px';\r\n                            }\r\n                        }\r\n                        if (Evt.deciding) {\r\n                            var str = 'px,' + (Evt.margin / 2 - Evt.height * 0.5) + 'px)';\r\n                            for (var i = 0; i < Evt.friendlist.length; i++) {\r\n                                Evt.friendlist[i].style.transform = 'scale(1.2) translate(' + (-(Evt.width + 14) * Evt.friendlist.length / 2 + 7 + i * (Evt.width + 14)) + str;\r\n                            }\r\n                        }\r\n                    };\r\n                    lib.onresize.push(Evt.resize);\r\n                    Evt.clickAvatar = function () {\r\n                        if (Evt.deciding) {\r\n                            if (this.index < Evt.config.width) return;\r\n                            if (Evt.friendlist.contains(this)) {\r\n                                Evt.friendlist.remove(this);\r\n                                Evt.moveNode(this, this.index);\r\n                                this.nodename.innerHTML = get.slimName(this.link);\r\n                            }\r\n                            else {\r\n                                Evt.friendlist.push(this);\r\n                            }\r\n                            if (Evt.friendlist.length == Evt.config.num) {\r\n                                Evt.deciding = false;\r\n                                Evt.prompt('比赛即将开始');\r\n                                setTimeout(game.resume, 1000);\r\n                            }\r\n                            if (Evt.config.update) {\r\n                                for (var i = 0; i < Evt.friendlist.length; i++) {\r\n                                    Evt.friendlist[i].nodename.innerHTML = Evt.config.update(i, Evt.friendlist.length) || Evt.friendlist[i].nodename.innerHTML;\r\n                                }\r\n                            }\r\n                            var str = 'px,' + (Evt.margin / 2 - Evt.height * 0.5) + 'px)';\r\n                            for (var i = 0; i < Evt.friendlist.length; i++) {\r\n                                Evt.friendlist[i].style.transform = 'scale(1.2) translate(' + (-(Evt.width + 14) * Evt.friendlist.length / 2 + 7 + i * (Evt.width + 14)) + str;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (!Evt.imchoosing) return;\r\n                            if (Evt.replacing) {\r\n                                this.link = Evt.replacing;\r\n                                this.setBackground(Evt.replacing, 'character');\r\n        \r\n                                this.nodename.innerHTML = get.slimName(Evt.replacing);\r\n                                this.nodename.dataset.nature = get.groupnature(lib.character[Evt.replacing][1]);\r\n        \r\n                                delete Evt.replacing;\r\n                                if (this.classList.contains('moved')) {\r\n                                    Evt.custom.add.window();\r\n                                }\r\n                            }\r\n                            if (this.classList.contains('moved')) return;\r\n                            Evt.moveAvatar(this, Evt.friend.length + Evt.config.width * (Evt.config.height - 1));\r\n                            Evt.friend.push(this.link);\r\n                            this.classList.add('moved');\r\n                            game.resume();\r\n                        }\r\n                    };\r\n                    Evt.skipnode = ui.create.system('跳过', function () {\r\n                        this.remove();\r\n                        Evt._skiprest = true;\r\n                        if (Evt.imchoosing) {\r\n                            game.resume();\r\n                        }\r\n                    });\r\n                    if (get.config('change_choice')) {\r\n                        Evt.replacenode = ui.create.system('换将', function () {\r\n                            Evt.promptbar.hide();\r\n                            while (Evt.avatars.length) {\r\n                                Evt.avatars.shift().remove();\r\n                            }\r\n                            for (var i = 0; i < Evt.config.size; i++) {\r\n                                Evt.nodes[i].show();\r\n                                Evt.nodes[i].style.display = '';\r\n                                clearTimeout(Evt.nodes[i].choosetimeout);\r\n                            }\r\n                            delete Evt.list2;\r\n                            Evt.friend.length = 0;\r\n                            Evt.enemy.length = 0;\r\n                            Evt.blank.length = 0;\r\n                            Evt.redoing = true;\r\n                            if (Evt.imchoosing) {\r\n                                game.resume();\r\n                            }\r\n                        }, true);\r\n                    }\r\n                    if (get.config('change_choice')) {\r\n                        Evt.reselectnode = ui.create.system('重选', function () {\r\n                            Evt.promptbar.hide();\r\n                            Evt.list2 = Evt.list2.concat(Evt.friend).concat(Evt.enemy);\r\n                            Evt.friend.length = 0;\r\n                            Evt.enemy.length = 0;\r\n                            for (var i = 0; i < Evt.avatars.length; i++) {\r\n                                if (Evt.avatars[i].classList.contains('moved')) {\r\n                                    Evt.moveAvatar(Evt.avatars[i], Evt.blank.randomRemove());\r\n                                    Evt.avatars[i].classList.remove('moved');\r\n                                }\r\n                            }\r\n                            Evt.redoing = true;\r\n                            if (Evt.imchoosing) {\r\n                                game.resume();\r\n                            }\r\n                        }, true);\r\n                    }\r\n                    if (get.config('free_choose')) {\r\n                        var createCharacterDialog = function () {\r\n                            Evt.freechoosedialog = ui.create.characterDialog();\r\n                            Evt.freechoosedialog.style.height = '80%';\r\n                            Evt.freechoosedialog.style.top = '10%';\r\n                            Evt.freechoosedialog.style.transform = 'scale(0.8)';\r\n                            Evt.freechoosedialog.style.transition = 'all 0.3s';\r\n                            Evt.freechoosedialog.listen(function (e) {\r\n                                if (!Evt.replacing) {\r\n                                    Evt.dialoglayer.clicked = true;\r\n                                }\r\n                            });\r\n                            Evt.freechoosedialog.classList.add('pointerdialog');\r\n                            Evt.dialoglayer = ui.create.div('.popup-container.hidden', function (e) {\r\n                                if (this.classList.contains('removing')) return;\r\n                                if (this.clicked) {\r\n                                    this.clicked = false;\r\n                                    return;\r\n                                }\r\n                                ui.window.classList.remove('modepaused');\r\n                                this.delete();\r\n                                e.stopPropagation();\r\n                                Evt.freechoosedialog.style.transform = 'scale(0.8)';\r\n                                if (Evt.replacing) {\r\n                                    Evt.prompt('用' + get.translation(Evt.replacing) + '替换一名武将');\r\n                                }\r\n                                else {\r\n                                    if (Evt.side == 0) {\r\n                                        Evt.prompt('请选择两名武将');\r\n                                    }\r\n                                    else {\r\n                                        Evt.prompt('请选择一名武将');\r\n                                    }\r\n                                }\r\n                            });\r\n                            Evt.dialoglayer.classList.add('modenopause');\r\n                            Evt.dialoglayer.appendChild(Evt.freechoosedialog);\r\n                            Evt.freechoosenode.classList.remove('hidden');\r\n                        }\r\n        \r\n                        Evt.custom.replace.button = function (button) {\r\n                            Evt.replacing = button.link;\r\n                        };\r\n                        Evt.custom.add.window = function () {\r\n                            if (Evt.replacing) {\r\n                                delete Evt.replacing;\r\n                                if (Evt.side == 0) {\r\n                                    Evt.prompt('请选择两名武将');\r\n                                }\r\n                                else {\r\n                                    Evt.prompt('请选择一名武将');\r\n                                }\r\n                            }\r\n                        };\r\n                        Evt.freechoosenode = ui.create.system('自由选将', function () {\r\n                            if (this.classList.contains('hidden')) return;\r\n                            if (!Evt.imchoosing) {\r\n                                Evt.prompt('请等待敌方选将');\r\n                                return;\r\n                            }\r\n                            delete Evt.replacing;\r\n                            ui.window.classList.add('modepaused');\r\n                            ui.window.appendChild(Evt.dialoglayer);\r\n                            ui.refresh(Evt.dialoglayer);\r\n                            Evt.dialoglayer.show();\r\n                            Evt.freechoosedialog.style.transform = 'scale(1)';\r\n                            Evt.promptbar.hide();\r\n                        }, true);\r\n                        if (lib.onfree) {\r\n                            Evt.freechoosenode.classList.add('hidden');\r\n                            lib.onfree.push(createCharacterDialog);\r\n                        }\r\n                        else {\r\n                            createCharacterDialog();\r\n                        }\r\n                    }\r\n                    Evt.checkredo = function () {\r\n                        if (Evt.redoing) {\r\n                            Evt.goto(1);\r\n                            delete Evt.redoing;\r\n                            return true;\r\n                        }\r\n                    };\r\n                    // if(ui.cardPileButton) ui.cardPileButton.style.display='none';\r\n                    ui.auto.hide();\r\n                    ui.wuxie.hide();\r\n                    Evt.resize();\r\n                    for (var i = 0; i < Evt.config.size; i++) {\r\n                        ui.window.appendChild(Evt.nodes[i]);\r\n                    }},function(){\r\n                    var rand = Evt.config.first;\r\n                    if (rand == 'rand') {\r\n                        rand = (Math.random() < 0.5);\r\n                    }\r\n                    if (rand) {\r\n                        _status.color = true;\r\n                        Evt.side = 1;\r\n                    }\r\n                    else {\r\n                        _status.color = false;\r\n                        Evt.side = 3;\r\n                    }\r\n                    if (!Evt.list2) {\r\n                        Evt.list2 = Evt.list.randomGets(Evt.config.width * 2);\r\n                        for (var i = 0; i < Evt.config.width * 2; i++) {\r\n                            Evt.avatars.push(ui.create.div('.shadowed.shadowed2.reduce_radius.character.choosedouble', Evt.clickAvatar));\r\n                            var name = Evt.list2[i];\r\n                            Evt.avatars[i].setBackground(name, 'character');\r\n                            Evt.avatars[i].link = name;\r\n                            Evt.avatars[i].nodename = ui.create.div('.name', Evt.avatars[i], get.slimName(name));\r\n                            Evt.avatars[i].nodename.style.fontFamily = lib.config.name_font;\r\n                            Evt.avatars[i].index = i + Evt.config.width;\r\n                            Evt.avatars[i].animate('start');\r\n                            Evt.nodes[Evt.avatars[i].index].style.display = 'none';\r\n                            Evt.avatars[i].nodename.dataset.nature = get.groupnature(lib.character[name][1]);\r\n                            lib.setIntro(Evt.avatars[i]);\r\n                        }\r\n                        Evt.resize();\r\n                        for (var i = 0; i < Evt.avatars.length; i++) {\r\n                            ui.window.appendChild(Evt.avatars[i]);\r\n                        }\r\n                        Evt.avatars.sort(function (a, b) {\r\n                            return get.rank(b.link, true) - get.rank(a.link, true);\r\n                        })\r\n                    }\r\n                    game.delay();\r\n                    lib.init.onfree();},function(){\r\n                    if (Evt.checkredo()) return;\r\n                    if (Evt._skiprest) return;\r\n                    if (Evt.side < 2) {\r\n                        Evt.imchoosing = true;\r\n                        if (Evt.side == 0) {\r\n                            Evt.prompt('请选择两名武将');\r\n                        }\r\n                        else {\r\n                            Evt.prompt('请选择一名武将');\r\n                            Evt.fast = get.time();\r\n                        }\r\n                        game.pause();\r\n                    }\r\n                    else {\r\n                        Evt.aiMove();\r\n                        game.delay();\r\n                    }},function(){\r\n                    if (typeof Evt.fast == 'number' && get.time() - Evt.fast <= 1000) {\r\n                        Evt.fast = true;\r\n                    }\r\n                    else {\r\n                        Evt.fast = false;\r\n                    }\r\n                    delete Evt.imchoosing;\r\n                    if (Evt.checkredo()) return;\r\n                    if (Evt._skiprest) {\r\n                        while (Evt.enemy.length < Evt.config.width) {\r\n                            Evt.aiMove();\r\n                        }\r\n                        while (Evt.friend.length < Evt.config.width) {\r\n                            Evt.aiMove(true);\r\n                        }\r\n                    }\r\n                    else if (Evt.friend.length + Evt.enemy.length < Evt.config.width * 2 - 1) {\r\n                        if (Evt.side == 1) {\r\n                            game.delay(Evt.fast ? 1 : 2);\r\n                            Evt.promptbar.hide();\r\n                        }\r\n                        Evt.side++;\r\n                        if (Evt.side > 3) {\r\n                            Evt.side = 0;\r\n                        }\r\n                        Evt.goto(2);\r\n                    }\r\n                    else {\r\n                        Evt.promptbar.hide();\r\n                        Evt.side++;\r\n                        if (Evt.side > 3) {\r\n                            Evt.side = 0;\r\n                        }\r\n                        if (Evt.side >= 2) {\r\n                            game.delay()\r\n                        }\r\n                    }},function(){\r\n                    if (Evt.checkredo()) return;\r\n                    if (Evt.skipnode) Evt.skipnode.delete();\r\n                    if (Evt.replacenode) Evt.replacenode.delete();\r\n                    if (Evt.reselectnode) Evt.reselectnode.delete();\r\n                    if (Evt.freechoosenode) Evt.freechoosenode.delete();\r\n                    for (var i = 0; i < Evt.avatars.length; i++) {\r\n                        if (!Evt.avatars[i].classList.contains('moved')) {\r\n                            if (Evt.side < 2) {\r\n                                Evt.moveAvatar(Evt.avatars[i], Evt.friend.length + Evt.config.width * (Evt.config.height - 1));\r\n                                Evt.friend.push(Evt.avatars[i]);\r\n                            }\r\n                            else {\r\n                                Evt.moveAvatar(Evt.avatars[i], Evt.enemy.length);\r\n                                Evt.enemy.push(Evt.avatars[i]);\r\n                            }\r\n                            Evt.avatars[i].classList.add('moved');\r\n                        }\r\n                    }\r\n                    game.delay();},function(){\r\n                    Evt.prompt('选择' + get.cnNumber(Evt.config.num) + '名出场武将');\r\n                    Evt.enemylist = [];\r\n                    for (var i = 0; i < Evt.avatars.length; i++) {\r\n                        if (Evt.avatars[i].index > Evt.config.width) {\r\n                            Evt.avatars[i].classList.add('selecting');\r\n                        }\r\n                    }\r\n                    var rand = [];\r\n                    for (var i = 0; i < Evt.config.width; i++) {\r\n                        for (var j = 0; j < Evt.config.width - i; j++) {\r\n                            rand.push(i);\r\n                        }\r\n                    }\r\n                    for (var i = 0; i < Evt.config.num; i++) {\r\n                        var rand2 = rand.randomGet();\r\n                        for (var j = 0; j < rand.length; j++) {\r\n                            if (rand[j] == rand2) {\r\n                                rand.splice(j--, 1);\r\n                            }\r\n                        }\r\n                        Evt.enemylist.push(Evt.enemy[rand2]);\r\n                    }\r\n                    Evt.enemylist.randomSort();\r\n                    Evt.friendlist = [];\r\n                    Evt.deciding = true;\r\n                    for (var i = 0; i < Evt.config.size; i++) {\r\n                        Evt.nodes[i].hide();\r\n                    }\r\n                    game.pause();},function(){\r\n                    Evt.promptbar.delete();\r\n                    if (ui.cardPileButton) ui.cardPileButton.style.display = '';\r\n                    lib.onresize.remove(Evt.resize);\r\n                    ui.wuxie.show();\r\n                    ui.auto.show();\r\n                    for (var i = 0; i < Evt.avatars.length; i++) {\r\n                        Evt.avatars[i].delete();\r\n                    }\r\n                    for (var i = 0; i < Evt.nodes.length; i++) {\r\n                        Evt.nodes[i].delete();\r\n                    }\r\n                    Evt.result = { friend: [], enemy: [] };\r\n                    for (var i = 0; i < Evt.config.num; i++) {\r\n                        Evt.result.friend[i] = Evt.friendlist[i].link;\r\n                        Evt.result.enemy[i] = Evt.enemylist[i].link;\r\n                    }\r\n                }]);\r\n            },\r\n            updateRoundNumber: function () {\r\n                game.broadcastAll(function (num1, num2, top) {\r\n                    if (ui.cardPileNumber) ui.cardPileNumber.innerHTML = num1 + '轮 剩余牌: ' + num2;\r\n                    _status.pileTop = top;\r\n                }, game.roundNumber, ui.cardPile.childNodes.length, ui.cardPile.firstChild);\r\n            },\r\n            asyncDraw: function (players, num, drawDeck, bottom) {\r\n                for (var i = 0; i < players.length; i++) {\r\n                    var num2 = 1;\r\n                    if (typeof num == 'number') {\r\n                        num2 = num;\r\n                    }\r\n                    else if (Array.isArray(num)) {\r\n                        num2 = num[i];\r\n                    }\r\n                    else if (typeof num == 'function') {\r\n                        num2 = num(players[i]);\r\n                    }\r\n                    if (drawDeck && drawDeck.drawDeck) {\r\n                        players[i].draw(num2, false, drawDeck);\r\n                    }\r\n                    else {\r\n                        if (bottom) players[i].draw(num2, 'nodelay', 'bottom');\r\n                        else players[i].draw(num2, 'nodelay');\r\n                    }\r\n                }\r\n            },\r\n            asyncDrawAuto: function (players, num, drawDeck) {\r\n                if (players.length == 1) {\r\n                    var num2 = 1;\r\n                    if (typeof num == 'number') {\r\n                        num2 = num;\r\n                    }\r\n                    else if (Array.isArray(num)) {\r\n                        num2 = num[0];\r\n                    }\r\n                    else if (typeof num == 'function') {\r\n                        num2 = num(players[0]);\r\n                    }\r\n                    if (drawDeck && drawDeck.drawDeck) {\r\n                        players[0].draw(num2, drawDeck);\r\n                    }\r\n                    else {\r\n                        players[0].draw(num2);\r\n                    }\r\n                }\r\n                else {\r\n                    game.asyncDraw.apply(this, arguments);\r\n                }\r\n            },\r\n            /**\r\n             * 为角色技能添加`translate`文本，设置默认ai，进行预处理\r\n             * 同时将下划线(_)开头的技能添加到{@link lib.skill.global}\r\n             * @param {string} i 技能名\r\n             * @param {*} [sub] \r\n             * @see{@link game.finishCards}\r\n             */\r\n            finishSkill: function (i, sub) {\r\n                var j;\r\n                var mode = get.mode();\r\n                var info = lib.skill[i];\r\n                if (info.alter) {\r\n                    lib.translate[i + '_info_origin'] = lib.translate[i + '_info'];\r\n                    if (!lib.config.vintageSkills.contains(i)) {\r\n                        lib.translate[i + '_info'] = lib.translate[i + '_info_alter'];\r\n                    }\r\n                }\r\n                else if (lib.translate[i + '_info_' + mode]) {\r\n                    lib.translate[i + '_info'] = lib.translate[i + '_info_' + mode];\r\n                }\r\n                else if (lib.translate[i + '_info_zhu'] && (mode == 'identity' || (mode == 'guozhan' && _status.mode == 'four'))) {\r\n                    lib.translate[i + '_info'] = lib.translate[i + '_info_zhu'];\r\n                }\r\n                else if (lib.translate[i + '_info_combat'] && get.is.versus()) {\r\n                    lib.translate[i + '_info'] = lib.translate[i + '_info_combat'];\r\n                }\r\n                if (info.forbid && info.forbid.contains(mode)) {\r\n                    lib.skill[i] = {};\r\n                    if (lib.translate[i + '_info']) {\r\n                        lib.translate[i + '_info'] = '此模式下不可用';\r\n                    }\r\n                    return;\r\n                }\r\n                if (info.mode && info.mode.contains(mode) == false) {\r\n                    lib.skill[i] = {};\r\n                    if (lib.translate[i + '_info']) {\r\n                        lib.translate[i + '_info'] = '此模式下不可用';\r\n                    }\r\n                    return;\r\n                }\r\n                if (info.available && info.available(mode) == false) {\r\n                    lib.skill[i] = {};\r\n                    if (lib.translate[i + '_info']) {\r\n                        lib.translate[i + '_info'] = '此模式下不可用';\r\n                    }\r\n                    return;\r\n                }\r\n                if (info.viewAs && typeof info.viewAs != 'function') {\r\n                    if (typeof info.viewAs == 'string') {\r\n                        info.viewAs = { name: info.viewAs };\r\n                    }\r\n                    if (!lib.card[info.viewAs.name]) {\r\n                        lib.skill[i] = {};\r\n                        lib.translate[i + '_info'] = '技能不可用';\r\n                        return;\r\n                    }\r\n                    if (info.ai == undefined) info.ai = {};\r\n                    var skill = info.ai;\r\n                    var card = lib.card[info.viewAs.name].ai;\r\n                    for (j in card) {\r\n                        if (skill[j] == undefined) skill[j] = card[j];\r\n                        else if (typeof skill[j] == 'object') {\r\n                            for (var k in card[j]) {\r\n                                if (skill[j][k] == undefined) skill[j][k] = card[j][k];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (info.inherit) {\r\n                    var skill = lib.skill[info.inherit];\r\n                    for (j in skill) {\r\n                        if (info[j] == undefined) {\r\n                            if (j == 'audio' && (typeof info[j] == 'number' || typeof info[j] == 'boolean')) {\r\n                                info[j] = info.inherit;\r\n                            }\r\n                            else {\r\n                                info[j] = skill[j];\r\n                            }\r\n                        }\r\n                    }\r\n                    if (lib.translate[i] == undefined) {\r\n                        lib.translate[i] = lib.translate[info.inherit];\r\n                    }\r\n                    if (lib.translate[i + '_info'] == undefined) {\r\n                        lib.translate[i + '_info'] = lib.translate[info.inherit + '_info'];\r\n                    }\r\n                }\r\n                if (info.limited) {\r\n                    if (info.mark === undefined) info.mark = true;\r\n                    if (!info.intro) info.intro = {};\r\n                    if (info.intro.content === undefined) info.intro.content = 'limited';\r\n                    if (info.skillAnimation === undefined) info.skillAnimation = true;\r\n                    if (info.init === undefined) info.init = function (player, skill) {\r\n                        player.storage[skill] = false;\r\n                    }\r\n                }\r\n                if (info.subSkill && !sub) {\r\n                    for (var j in info.subSkill) {\r\n                        lib.skill[i + '_' + j] = info.subSkill[j];\r\n                        lib.skill[i + '_' + j].sub = true;\r\n                        if (info.subSkill[j].name) {\r\n                            lib.translate[i + '_' + j] = info.subSkill[j].name;\r\n                        }\r\n                        else {\r\n                            lib.translate[i + '_' + j] = lib.translate[i + '_' + j] || lib.translate[i];\r\n                        }\r\n                        if (info.subSkill[j].description) {\r\n                            lib.translate[i + '_' + j + '_info'] = info.subSkill[j].description;\r\n                        }\r\n                        if (info.subSkill[j].marktext) {\r\n                            lib.translate[i + '_' + j + '_bg'] = info.subSkill[j].marktext;\r\n                        }\r\n                        game.finishSkill(i + '_' + j, true);\r\n                    }\r\n                }\r\n                if (info.round) {\r\n                    var k = i + '_roundcount';\r\n                    if (typeof info.group == 'string') {\r\n                        info.group = [info.group, k];\r\n                    }\r\n                    else if (Array.isArray(info.group)) {\r\n                        info.group.add(k);\r\n                    }\r\n                    else {\r\n                        info.group = [k];\r\n                    }\r\n                    lib.skill[k] = (function (round, name) {\r\n                        return {\r\n                            init(player) {\r\n                                if (typeof player.storage[name] !== 'number') player.storage[name] = 0;\r\n                            },\r\n                            intro: {\r\n                                content(storage, player) {\r\n                                    let str = '';\r\n                                    let info = get.info(name.slice(0, name.indexOf('_roundcount')));\r\n                                    if (info && info.addintro) {\r\n                                        str += info.addintro(storage, player);\r\n                                    }\r\n                                    // let num = round - (game.roundNumber - storage);\r\n                                    let num = storage\r\n                                    if (num > 0) {\r\n                                        str += get.cnNumber(num) + '轮后' + (info.roundtext || '技能重置');\r\n                                    }\r\n                                    else {\r\n                                        str += '技能可发动';\r\n                                    }\r\n                                    return str;\r\n                                },\r\n                                markcount(storage, player) {\r\n                                    let num = storage;\r\n                                    if (num > 0) {\r\n                                        return num;\r\n                                    }\r\n                                    return 0;\r\n                                }\r\n                            },\r\n                            trigger: { global: 'roundEnd' },\r\n                            forced: true,\r\n                            popup: false,\r\n                            silent: true,\r\n                            content() {\r\n                                var roundname = Evt.name;\r\n                                if (player.storage[roundname] > 0) {\r\n                                    player.storage[roundname]--\r\n                                }\r\n                                if (player.storage[roundname] > 0) {\r\n                                    player.updateMarks();\r\n                                }\r\n                                else {\r\n                                    player.unmarkSkill(roundname);\r\n                                }\r\n                            }\r\n                        };\r\n                    }(info.round, k));\r\n                    lib.translate[k] = lib.translate[i] || '';\r\n                    lib.translate[k + '_bg'] = lib.translate[i + '_bg'] || lib.translate[k][0];\r\n                }\r\n                if (info.marktext) {\r\n                    lib.translate[i + '_bg'] = info.marktext;\r\n                }\r\n                if (info.silent) {\r\n                    if (!info.hasOwnProperty('forced')) info.forced = true;\r\n                    if (!info.hasOwnProperty('popup')) info.popup = false;\r\n                }\r\n                if (i[0] == '_') {\r\n                    game.addGlobalSkill(i);\r\n                }\r\n            },\r\n            /**\r\n             * 为(游戏牌|角色技能)添加`translate`文本，设置默认ai，进行预处理\r\n             * @see {@link game.finishSkill}\r\n             */\r\n            finishCards: function () {\r\n                _status.cardsFinished = true;\r\n                var i, j, k;\r\n                var mode = get.mode();\r\n                for (i in lib.card) {\r\n                    if (lib.translate[i + '_info_' + mode]) {\r\n                        lib.translate[i + '_info'] = lib.translate[i + '_info_' + mode];\r\n                    }\r\n                    else if (lib.translate[i + '_info_zhu'] && (mode == 'identity' || (mode == 'guozhan' && _status.mode == 'four'))) {\r\n                        lib.translate[i + '_info'] = lib.translate[i + '_info_zhu'];\r\n                    }\r\n                    else if (lib.translate[i + '_info_combat'] && get.is.versus()) {\r\n                        lib.translate[i + '_info'] = lib.translate[i + '_info_combat'];\r\n                    }\r\n                    var card = lib.card[i];\r\n                    if (card.filterTarget && card.selectTarget == undefined) {\r\n                        card.selectTarget = 1;\r\n                    }\r\n                    if (card.autoViewAs) {\r\n                        if (!card.ai) {\r\n                            card.ai = {};\r\n                        }\r\n                        if (!card.ai.order) {\r\n                            card.ai.order = lib.card[card.autoViewAs].ai.order;\r\n                            if (!card.ai.order && lib.card[card.autoViewAs].ai.basic) {\r\n                                card.ai.order = lib.card[card.autoViewAs].ai.basic.order;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (card.type == 'equip') {\r\n                        if (card.enable == undefined) card.enable = true;\r\n                        if (card.selectTarget == undefined) card.selectTarget = -1;\r\n                        if (card.filterTarget == undefined) card.filterTarget = function (card, player, target) {\r\n                            return target == player;\r\n                        };\r\n                        if (card.modTarget == undefined) card.modTarget = true;\r\n                        if (card.allowMultiple == undefined) card.allowMultiple = false;\r\n                        if (card.content == undefined) card.content = lib.element.content.equipCard;\r\n                        if (card.toself == undefined) card.toself = true;\r\n                        if (card.ai == undefined) card.ai = { basic: {} };\r\n                        if (card.ai.basic == undefined) card.ai.basic = {};\r\n                        if (card.ai.result == undefined) card.ai.result = { target: 1.5 };\r\n                        if (card.ai.basic.order == undefined) card.ai.basic.order = function (card, player) {\r\n                            if (player && player.hasSkillTag('reverseEquip')) {\r\n                                return 8.5 - get.equipValue(card, player) / 20;\r\n                            }\r\n                            else {\r\n                                return 8 + get.equipValue(card, player) / 20;\r\n                            }\r\n                        };\r\n                        if (card.ai.basic.useful == undefined) card.ai.basic.useful = 2;\r\n                        if (card.subtype == 'equip3') {\r\n                            if (card.ai.basic.equipValue == undefined) card.ai.basic.equipValue = 7;\r\n                        }\r\n                        else if (card.subtype == 'equip4') {\r\n                            if (card.ai.basic.equipValue == undefined) card.ai.basic.equipValue = 4;\r\n                        }\r\n                        else {\r\n                            if (card.ai.basic.equipValue == undefined) card.ai.basic.equipValue = 1;\r\n                        }\r\n                        if (card.ai.basic.value == undefined) card.ai.basic.value = function (card, player, index, method) {\r\n                            if (player.isDisabled(get.subtype(card))) return 0.01;\r\n                            var value = 0;\r\n                            var info = get.info(card);\r\n                            var current = player.getEquip(info.subtype);\r\n                            if (current && card != current) {\r\n                                value = get.value(current, player);\r\n                            }\r\n                            var equipValue = info.ai.equipValue;\r\n                            if (equipValue == undefined) {\r\n                                equipValue = info.ai.basic.equipValue;\r\n                            }\r\n                            if (typeof equipValue == 'function') {\r\n                                if (method == 'raw') return equipValue(card, player);//原装备价值\r\n                                if (method == 'raw2') return equipValue(card, player) - value;//装备牌`card`的相对装备价值(相对当前相同位置的装备。如果没有装备，则为原装备价值)\r\n                                return Math.max(0.1, equipValue(card, player) - value);\r\n                            }\r\n                            if (typeof equipValue != 'number') equipValue = 0;\r\n                            if (method == 'raw') return equipValue;\r\n                            if (method == 'raw2') return equipValue - value;\r\n                            return Math.max(0.1, equipValue - value);\r\n                        }\r\n                        if (!card.ai.result.keepAI) card.ai.result.target = function (player, target, card) {\r\n                            return get.equipResult(player, target, card.name);\r\n                        };\r\n                    }\r\n                    else if (card.type == 'delay') {\r\n                        if (card.enable == undefined) card.enable = true;\r\n                        if (card.filterTarget == undefined) card.filterTarget = lib.filter.judge;\r\n                        if (card.content == undefined) card.content = lib.element.content.addJudgeCard;\r\n                        if (card.allowMultiple == undefined) card.allowMultiple = false;\r\n                    }\r\n                }\r\n                for (i in lib.skill) {\r\n                    game.finishSkill(i);\r\n                }\r\n            },\r\n            //Mod类技能的相关检测\r\n            checkMod: function () {\r\n                var name = arguments[arguments.length - 2];\r\n                var skills = arguments[arguments.length - 1];\r\n                if (skills.getSkills) {\r\n                    if (name != 'cardname') skills = skills.getSkills();\r\n                    else skills = skills.getSkills(null, false);\r\n                }\r\n                skills = skills.concat(lib.skill.global);\r\n                game.expandSkills(skills);\r\n                var arg = [], i, info;\r\n                for (i = 0; i < arguments.length - 2; i++) {\r\n                    arg.push(arguments[i]);\r\n                }\r\n                for (i = 0; i < skills.length; i++) {\r\n                    info = get.info(skills[i]);\r\n                    if (info && info.mod && info.mod[name]) {\r\n                        var result = info.mod[name].apply(this, arg);\r\n                        if (typeof arg[arg.length - 1] != 'object' && result != undefined) arg[arg.length - 1] = result;\r\n                    }\r\n                }\r\n                return arg[arg.length - 1];\r\n            },\r\n            prepareArena: function (num) {\r\n                _status.prepareArena = true;\r\n                game.showHistory(false);\r\n                ui.create.players(num);\r\n                ui.create.me();\r\n                ui.create.cardsAsync();\r\n                game.finishCards();\r\n            },\r\n            clearArena: function () {\r\n                ui.control.innerHTML = '';\r\n                ui.arenalog.innerHTML = '';\r\n                var nodes = [];\r\n                for (var i = 0; i < ui.arena.childNodes.length; i++) {\r\n                    nodes.push(ui.arena.childNodes[i]);\r\n                }\r\n                for (var i = 0; i < nodes.length; i++) {\r\n                    if (nodes[i] == ui.canvas) continue;\r\n                    if (nodes[i] == ui.control) continue;\r\n                    if (nodes[i] == ui.arenalog) continue;\r\n                    if (nodes[i] == ui.roundmenu) continue;\r\n                    if (nodes[i] == ui.timer) continue;\r\n                    if (nodes[i] == ui.autonode) continue;\r\n                    nodes[i].remove();\r\n                }\r\n                ui.sidebar.innerHTML = '';\r\n                ui.cardPile.innerHTML = '';\r\n                ui.discardPile.innerHTML = '';\r\n                ui.special.innerHTML = '';\r\n                ui.ordering.innerHTML = '';\r\n                ui.playerids.remove();\r\n                game.players.length = 0;\r\n                game.dead.length = 0;\r\n                game.me = null;\r\n            },\r\n            clearConnect: function () {\r\n                if (ui.ipnode) {\r\n                    ui.ipnode.remove();\r\n                    delete ui.ipnode;\r\n                }\r\n                if (ui.iptext) {\r\n                    ui.iptext.remove();\r\n                    delete ui.iptext;\r\n                }\r\n                if (ui.ipbutton) {\r\n                    ui.ipbutton.remove();\r\n                    delete ui.ipbutton;\r\n                }\r\n                if (ui.recentIP) {\r\n                    ui.recentIP.remove();\r\n                    delete ui.recentIP;\r\n                }\r\n                if (ui.hall_button) {\r\n                    ui.hall_button.remove();\r\n                    delete ui.hall_button;\r\n                }\r\n                if (ui.startServer) {\r\n                    ui.startServer.remove();\r\n                    delete ui.startServer;\r\n                }\r\n                if (ui.rooms) {\r\n                    for (var i = 0; i < ui.rooms.length; i++) {\r\n                        ui.rooms[i].remove();\r\n                    }\r\n                    delete ui.rooms;\r\n                }\r\n                if (ui.roombase) {\r\n                    ui.roombase.remove();\r\n                    delete ui.roombase;\r\n                }\r\n                if (ui.connectEvents) {\r\n                    ui.connectEvents.remove();\r\n                    ui.connectEventsCount.remove();\r\n                    ui.connectClients.remove();\r\n                    ui.connectClientsCount.remove();\r\n                    ui.createRoomButton.remove();\r\n                    delete ui.connectEvents;\r\n                    delete ui.connectEventsCount;\r\n                    delete ui.connectClients;\r\n                    delete ui.connectClientsCount;\r\n                    delete ui.createRoomButton;\r\n                }\r\n            },\r\n            log: function () {\r\n                var str = '', str2 = '', logvid = null;\r\n                for (var i = 0; i < arguments.length; i++) {\r\n                    var itemtype = get.itemtype(arguments[i]);\r\n                    if (itemtype == 'player' || itemtype == 'players') {\r\n                        str += '<span class=\"bluetext\">' + get.translation(arguments[i]) + '</span>';\r\n                        str2 += get.translation(arguments[i]);\r\n                    }\r\n                    else if (itemtype == 'cards' || itemtype == 'card' || (typeof arguments[i] == 'object' && arguments[i] && arguments[i].name)) {\r\n                        str += '<span class=\"yellowtext\">' + get.translation(arguments[i]) + '</span>';\r\n                        str2 += get.translation(arguments[i]);\r\n                    }\r\n                    else if (typeof arguments[i] == 'object') {\r\n                        if (arguments[i]) {\r\n                            if (arguments[i].parentNode == ui.historybar) {\r\n                                logvid = arguments[i].logvid;\r\n                            }\r\n                            else {\r\n                                str += get.translation(arguments[i]);\r\n                                str2 += get.translation(arguments[i]);\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (typeof arguments[i] == 'string') {\r\n                        if (arguments[i][0] == '【' && arguments[i][arguments[i].length - 1] == '】') {\r\n                            str += '<span class=\"greentext\">' + get.translation(arguments[i]) + '</span>';\r\n                            str2 += get.translation(arguments[i]);\r\n                        }\r\n                        else if (arguments[i][0] == '#') {\r\n                            var color = '';\r\n                            switch (arguments[i][1]) {\r\n                                case 'r': color = 'fire'; break;\r\n                                case 'p': color = 'legend'; break;\r\n                                case 'b': color = 'blue'; break;\r\n                                case 'g': color = 'green'; break;\r\n                                case 'y': color = 'yellow'; break;\r\n                                case 'i': color = 'ice'; break;\r\n                            }\r\n                            str += '<span class=\"' + color + 'text\">' + get.translation(arguments[i].slice(2)) + '</span>';\r\n                            str2 += get.translation(arguments[i].slice(2));\r\n                        }\r\n                        else {\r\n                            str += get.translation(arguments[i]);\r\n                            str2 += get.translation(arguments[i]);\r\n                        }\r\n                    }\r\n                    else {\r\n                        str += arguments[i];\r\n                        str2 += arguments[i];\r\n                    }\r\n        \r\n                }\r\n                var node = ui.create.div();\r\n                node.innerHTML = lib.config.log_highlight ? str : str2;\r\n                ui.sidebar.insertBefore(node, ui.sidebar.firstChild);\r\n                game.addVideo('log', null, lib.config.log_highlight ? str : str2);\r\n                game.broadcast(function (str, str2) {\r\n                    game.log(lib.config.log_highlight ? str : str2);\r\n                }, str, str2);\r\n                if (!_status.video && !game.online) {\r\n                    if (!logvid) {\r\n                        logvid = _status.event.getLogv();\r\n                    }\r\n                    if (logvid) {\r\n                        game.logv(logvid, '<div class=\"text center\">' + lib.config.log_highlight ? str : 0);\r\n                    }\r\n                }\r\n                // if(lib.config.title) document.title=lib.config.log_highlight?str:str2;\r\n                if (lib.config.show_log != 'off' && !game.chess) {\r\n                    var nodeentry = node.cloneNode(true);\r\n                    ui.arenalog.insertBefore(nodeentry, ui.arenalog.firstChild);\r\n                    if (!lib.config.clear_log) {\r\n                        while (ui.arenalog.childNodes.length && ui.arenalog.scrollHeight > ui.arenalog.offsetHeight) {\r\n                            ui.arenalog.lastChild.remove();\r\n                        }\r\n                    }\r\n                    if (!lib.config.low_performance) {\r\n                        nodeentry.style.transition = 'all 0s';\r\n                        nodeentry.style.marginBottom = (-nodeentry.offsetHeight) + 'px';\r\n                        ui.refresh(nodeentry);\r\n                        nodeentry.style.transition = '';\r\n                        nodeentry.style.marginBottom = '';\r\n                    }\r\n                    if (lib.config.clear_log) {\r\n                        nodeentry.timeout = setTimeout(function () {\r\n                            nodeentry.delete();\r\n                        }, 1000);\r\n                        for (var i = 0; i < ui.arenalog.childElementCount; i++) {\r\n                            if (!ui.arenalog.childNodes[i].timeout) {\r\n                                ui.arenalog.childNodes[i].remove();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            logv: function (player, card, targets, Evt, forced, logvid) {\r\n                var node = ui.create.div('.hidden');\r\n                node.node = {};\r\n                logvid = logvid || get.id();\r\n                if (!player) {\r\n                    player = _status.event.getParent().logvid;\r\n                    if (!player) return;\r\n                }\r\n                game.broadcast(function (player, card, targets, Evt, forced, logvid) {\r\n                    game.logv(player, card, targets, Evt, forced, logvid);\r\n                }, player, card, targets, Evt, forced, logvid);\r\n                if (typeof player == 'string') {\r\n                    for (var i = 0; i < ui.historybar.childElementCount; i++) {\r\n                        if (ui.historybar.childNodes[i].logvid == player) {\r\n                            ui.historybar.childNodes[i].added.push(card); break;\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n                if (typeof card == 'string') {\r\n                    if (card != 'die') {\r\n                        if (lib.skill[card] && lib.skill[card].logv === false && !forced) return;\r\n                        if (!lib.translate[card]) return;\r\n                    }\r\n                    var avatar;\r\n                    if (!player.isUnseen(0)) {\r\n                        avatar = player.node.avatar.cloneNode();\r\n                    }\r\n                    else if (!player.isUnseen(1)) {\r\n                        avatar = player.node.avatar2.cloneNode();\r\n                    }\r\n                    else {\r\n                        return;\r\n                    }\r\n                    node.node.avatar = avatar;\r\n                    avatar.style.transform = '';\r\n                    avatar.className = 'avatar';\r\n                    if (card == 'die') {\r\n                        node.dead = true;\r\n                        node.player = player;\r\n                        var avatar2 = avatar.cloneNode();\r\n                        avatar2.className = 'avatarbg grayscale1';\r\n                        avatar.appendChild(avatar2);\r\n                        avatar.style.opacity = 0.6;\r\n                    }\r\n                    else {\r\n                        node.node.text = ui.create.div('', get.translation(card, 'skill'), avatar);\r\n                        node.node.text.dataset.nature = 'water';\r\n                        node.skill = card;\r\n                    }\r\n                    node.appendChild(avatar);\r\n                    if (card == 'die' && targets && targets != player) {\r\n                        node.source = targets;\r\n                        var avatar;\r\n                        player = targets;\r\n                        if (!player.isUnseen(0)) {\r\n                            avatar = player.node.avatar.cloneNode();\r\n                        }\r\n                        else if (!player.isUnseen(1)) {\r\n                            avatar = player.node.avatar2.cloneNode();\r\n                        }\r\n                        else if (get.mode() == 'guozhan' && player.node && player.node.name_seat) {\r\n                            avatar = ui.create.div('.avatar.cardbg');\r\n                            avatar.innerHTML = player.node.name_seat.innerHTML[0];\r\n                        }\r\n                        else {\r\n                            return;\r\n                        }\r\n                        avatar.style.transform = '';\r\n                        node.node.avatar2 = avatar;\r\n                        avatar.classList.add('avatar2');\r\n                        node.appendChild(avatar);\r\n                    }\r\n                }\r\n                else if (Array.isArray(card)) {\r\n                    node.cards = card[1];\r\n                    card = card[0];\r\n                    var info = [card.suit || '', card.number || '', card.name || '', card.nature || ''];\r\n                    if (!Array.isArray(node.cards) || !node.cards.length) {\r\n                        node.cards = [ui.create.card(node, 'noclick', true).init(info)];\r\n                    }\r\n                    if (card.name == 'wuxie') {\r\n                        if (ui.historybar.firstChild && ui.historybar.firstChild.type == 'wuxie') {\r\n                            ui.historybar.firstChild.players.push(player);\r\n                            ui.historybar.firstChild.cards.addArray(node.cards);\r\n                            return;\r\n                        }\r\n                        else {\r\n                            node.type = 'wuxie';\r\n                            node.players = [player];\r\n                        }\r\n                    }\r\n                    if (card.copy) {\r\n                        card.copy(node, false);\r\n                    }\r\n                    else {\r\n                        card = ui.create.card(node, 'noclick', true);\r\n                        card.init(info);\r\n                    }\r\n                    var avatar;\r\n                    if (!player.isUnseen(0)) {\r\n                        avatar = player.node.avatar.cloneNode();\r\n                    }\r\n                    else if (!player.isUnseen(1)) {\r\n                        avatar = player.node.avatar2.cloneNode();\r\n                    }\r\n                    else if (get.mode() == 'guozhan' && player.node && player.node.name_seat) {\r\n                        avatar = ui.create.div('.avatar.cardbg');\r\n                        avatar.innerHTML = player.node.name_seat.innerHTML[0];\r\n                    }\r\n                    else {\r\n                        return;\r\n                    }\r\n                    node.node.avatar = avatar;\r\n                    avatar.style.transform = '';\r\n                    avatar.classList.add('avatar2');\r\n                    node.appendChild(avatar);\r\n        \r\n                    if (targets && targets.length == 1 && targets[0] != player && get.itemtype(targets[0]) == 'player') {\r\n                        (function () {\r\n                            var avatar2;\r\n                            var target = targets[0];\r\n                            if (!target.isUnseen(0)) {\r\n                                avatar2 = target.node.avatar.cloneNode();\r\n                            }\r\n                            else if (!player.isUnseen(1)) {\r\n                                avatar2 = target.node.avatar2.cloneNode();\r\n                            }\r\n                            else if (get.mode() == 'guozhan' && target.node && target.node.name_seat) {\r\n                                avatar2 = ui.create.div('.avatar.cardbg');\r\n                                avatar2.innerHTML = target.node.name_seat.innerHTML[0];\r\n                            }\r\n                            else {\r\n                                return;\r\n                            }\r\n                            node.node.avatar2 = avatar2;\r\n                            avatar2.style.transform = '';\r\n                            avatar2.classList.add('avatar2');\r\n                            avatar2.classList.add('avatar3');\r\n                            node.insertBefore(avatar2, avatar);\r\n                        }());\r\n                    }\r\n                }\r\n                if (targets && targets.length) {\r\n                    if (targets.length == 1 && targets[0] == player) {\r\n                        node.targets = [];\r\n                    }\r\n                    else {\r\n                        node.targets = targets;\r\n                    }\r\n                }\r\n                var fullheight = ui.historybar.offsetHeight;\r\n                var num = Math.round((fullheight - 8) / 50);\r\n                var margin = (fullheight - 42 * num) / (num + 1);\r\n                node.style.transform = 'scale(0.8)';\r\n                ui.historybar.insertBefore(node, ui.historybar.firstChild);\r\n                ui.refresh(node);\r\n                node.classList.remove('hidden');\r\n                for (var i = 0; i < ui.historybar.childElementCount; i++) {\r\n                    var current = ui.historybar.childNodes[i];\r\n                    if (i < num) {\r\n                        current.style.transform = 'scale(1) translateY(' + (margin + i * (42 + margin) - 4) + 'px)';\r\n                    }\r\n                    else {\r\n                        if (!current.removetimeout) {\r\n                            current.style.opacity = 0;\r\n                            current.style.transform = 'scale(1) translateY(' + fullheight + 'px)';\r\n                            current.removetimeout = setTimeout((function (current) {\r\n                                return function () {\r\n                                    current.remove();\r\n                                };\r\n                            }(current)), 500);\r\n                        }\r\n                    }\r\n                }\r\n                if (lib.config.touchscreen) {\r\n                    node.addEventListener('touchstart', ui.click.intro);\r\n                }\r\n                else {\r\n                    // node.addEventListener('mouseenter',ui.click.intro);\r\n                    node.addEventListener(lib.config.pop_logv ? 'mousemove' : 'click', ui.click.logv);\r\n                    node.addEventListener('mouseleave', ui.click.logvleave);\r\n                }\r\n                node.logvid = logvid;\r\n                node.added = [];\r\n                if (!game.online) {\r\n                    Evt = Evt || _status.event;\r\n                    Evt.logvid = node.logvid;\r\n                }\r\n                return node;\r\n            },\r\n            /**\r\n             * 从IndexedDB中获取对象仓库(object store)，并更新对象\r\n             * @param {string} type - 仓库名称\r\n             * @param {string} id - 键路径的值\r\n             * @param {any} item - 要插入/更新的对象\r\n             * @param {function} callback - 成功时回调函数\r\n             */\r\n            putDB: function (type, id, item, callback) {\r\n                if (!lib.db) return item;\r\n                if (lib.status.reload) {\r\n                    lib[_status.dburgent ? 'ondb2' : 'ondb'].push(['putDB', Array.from(arguments)]);\r\n                    return;\r\n                }\r\n                lib.status.reload++;\r\n                var put = lib.db.transaction([type], 'readwrite').objectStore(type).put(item, id);\r\n                put.onsuccess = function () {\r\n                    if (callback) {\r\n                        _status.dburgent = true;\r\n                        callback.apply(this, arguments);\r\n                        delete _status.dburgent;\r\n                    }\r\n                    game.reload2();\r\n                };\r\n            },\r\n            /**\r\n             * 从IndexedDB中获取对象仓库(object store)，并获取对象\r\n             * @param {string} type - 仓库名称\r\n             * @param {string} id - 键路径的值\r\n             * @param {!function} callback - 成功时回调函数\r\n             */\r\n            getDB: function (type, id, callback) {\r\n                if (!lib.db) {\r\n                    callback(null);\r\n                    return;\r\n                }\r\n                if (!callback) return;\r\n                if (lib.status.reload) {\r\n                    lib[_status.dburgent ? 'ondb2' : 'ondb'].push(['getDB', Array.from(arguments)]);\r\n                    return;\r\n                }\r\n                lib.status.reload++;\r\n                var store = lib.db.transaction([type], 'readwrite').objectStore(type);\r\n                if (id) {\r\n                    store.get(id).onsuccess = function (e) {\r\n                        _status.dburgent = true;\r\n                        callback(e.target.result);\r\n                        delete _status.dburgent;\r\n                        game.reload2();\r\n                    };\r\n                }\r\n                else {\r\n                    var obj = {};\r\n                    store.openCursor().onsuccess = function (e) {\r\n                        var cursor = e.target.result;\r\n                        if (cursor) {\r\n                            obj[cursor.key] = cursor.value;\r\n                            cursor.continue();\r\n                        }\r\n                        else {\r\n                            _status.dburgent = true;\r\n                            callback(obj);\r\n                            delete _status.dburgent;\r\n                            game.reload2();\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            /**\r\n             * 从IndexedDB中获取对象仓库(object store)，并删除对象\r\n             * @param {string} type - 仓库名称\r\n             * @param {string} id - 键路径的值\r\n             * @param {function} callback - 成功时回调函数\r\n             */\r\n            deleteDB: function (type, id, callback) {\r\n                if (!lib.db) {\r\n                    callback(false);\r\n                    return;\r\n                }\r\n                if (lib.status.reload) {\r\n                    lib[_status.dburgent ? 'ondb2' : 'ondb'].push(['deleteDB', Array.from(arguments)]);\r\n                    return;\r\n                }\r\n                if (arguments.length == 1) {\r\n                    game.getDB(type, null, function (obj) {\r\n                        var store = lib.db.transaction([type], 'readwrite').objectStore(type);\r\n                        for (var id in obj) {\r\n                            lib.status.reload++;\r\n                        }\r\n                        for (var id in obj) {\r\n                            store.delete(id).onsuccess = game.reload2;\r\n                        }\r\n                        game.reload2();\r\n                    });\r\n                }\r\n                else {\r\n                    lib.status.reload++;\r\n                    var store = lib.db.transaction([type], 'readwrite').objectStore(type);\r\n                    store.delete(id).onsuccess = function () {\r\n                        if (callback) {\r\n                            callback.apply(this, arguments);\r\n                        }\r\n                        game.reload2();\r\n                    };\r\n                }\r\n            },\r\n            save: function (key, value, mode) {\r\n                if (_status.reloading) return;\r\n                mode = mode || lib.config.mode;\r\n                if (!lib.db) {\r\n                    var config = {};\r\n                    if (key) {\r\n                        try {\r\n                            config = JSON.parse(localStorage.getItem(lib.configprefix + mode));\r\n                            if (typeof config != 'object') throw 'err';\r\n                        }\r\n                        catch (err) {\r\n                            config = {};\r\n                        }\r\n                        if (value == undefined) {\r\n                            delete config[key];\r\n                            if (mode == lib.config.mode) delete lib.storage[key];\r\n                        }\r\n                        else {\r\n                            config[key] = value;\r\n                            if (mode == lib.config.mode) lib.storage[key] = value;\r\n                        }\r\n                        config.version = lib.version;\r\n                        localStorage.setItem(lib.configprefix + mode, JSON.stringify(config));\r\n                    }\r\n                    else {\r\n                        localStorage.setItem(lib.configprefix + mode, JSON.stringify(lib.storage));\r\n                    }\r\n                }\r\n                else {\r\n                    if (key) {\r\n                        if (mode == lib.config.mode) {\r\n                            if (value == undefined) {\r\n                                delete lib.storage[key];\r\n                            }\r\n                            else {\r\n                                lib.storage[key] = value;\r\n                            }\r\n                            lib.storage.version = lib.version;\r\n                            game.putDB('data', mode, lib.storage);\r\n                        }\r\n                        else {\r\n                            game.getDB('data', mode, function (config) {\r\n                                if (!config) config = {};\r\n                                if (value == undefined) {\r\n                                    delete config[key];\r\n                                }\r\n                                else {\r\n                                    config[key] = value;\r\n                                }\r\n                                config.version = lib.version;\r\n                                game.putDB('data', mode, config);\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        game.putDB('data', mode, get.copy(lib.storage));\r\n                    }\r\n                }\r\n            },\r\n            showChangeLog: function () {\r\n                if (lib.version != lib.config.version || _status.extensionChangeLog) {\r\n                    var ul = document.createElement('ul');\r\n                    ul.style.textAlign = 'left';\r\n                    var caption;\r\n                    var players = null, cards = null;\r\n                    if (lib.version != lib.config.version) {\r\n                        for (var i = 0; i < lib.changeLog.length; i++) {\r\n                            if (lib.changeLog[i].indexOf('players://') == 0) {\r\n                                try {\r\n                                    players = JSON.parse(lib.changeLog[i].slice(10));\r\n                                }\r\n                                catch (e) {\r\n                                    players = null;\r\n                                }\r\n                            }\r\n                            else if (lib.changeLog[i].indexOf('cards://') == 0) {\r\n                                try {\r\n                                    cards = JSON.parse(lib.changeLog[i].slice(8));\r\n                                }\r\n                                catch (e) {\r\n                                    cards = null;\r\n                                }\r\n                            }\r\n                            else {\r\n                                var li = document.createElement('li');\r\n                                li.innerHTML = lib.changeLog[i];\r\n                                ul.appendChild(li);\r\n                            }\r\n                        }\r\n                        caption = lib.version + '更新内容';\r\n                    }\r\n                    else {\r\n                        caption = '扩展更新';\r\n                    }\r\n                    game.saveConfig('version', lib.version);\r\n                    for (var i in _status.extensionChangeLog) {\r\n                        var li = document.createElement('li');\r\n                        li.innerHTML = i + '：' + _status.extensionChangeLog[i];\r\n                        ul.appendChild(li);\r\n                    }\r\n                    var dialog = ui.create.dialog(caption, 'hidden');\r\n                    var lic = ui.create.div(dialog.content);\r\n                    lic.style.display = 'block';\r\n                    ul.style.display = 'inline-block';\r\n                    ul.style.marginLeft = '-40px';\r\n                    lic.appendChild(ul);\r\n                    if (players) {\r\n                        for (var i = 0; i < players.length; i++) {\r\n                            if (!lib.character[players[i]]) {\r\n                                players.splice(i--, 1);\r\n                            }\r\n                        }\r\n                        if (players.length) {\r\n                            dialog.addSmall([players, 'character']);\r\n                            dialog.classList.add('forcebutton');\r\n                            dialog.classList.add('withbg');\r\n                        }\r\n                    }\r\n                    if (cards) {\r\n                        for (var i = 0; i < cards.length; i++) {\r\n                            if (!lib.card[cards[i]]) {\r\n                                cards.splice(i--, 1);\r\n                            }\r\n                        }\r\n                        if (cards.length) {\r\n                            for (var i = 0; i < cards.length; i++) {\r\n                                cards[i] = [get.translation(get.type(cards[i])), '', cards[i]]\r\n                            }\r\n                            dialog.addSmall([cards, 'vcard']);\r\n                            dialog.classList.add('forcebutton');\r\n                            dialog.classList.add('withbg');\r\n                        }\r\n                    }\r\n                    dialog.open();\r\n                    var hidden = false;\r\n                    if (!ui.auto.classList.contains('hidden')) {\r\n                        ui.auto.hide();\r\n                        hidden = true;\r\n                    }\r\n                    game.pause();\r\n                    var control = ui.create.control('确定', function () {\r\n                        dialog.close();\r\n                        control.close();\r\n                        if (hidden) ui.auto.show();\r\n                        game.resume();\r\n                    });\r\n                    lib.init.onfree();\r\n                }\r\n            },\r\n            showExtensionChangeLog: function (str, extname) {\r\n                extname = extname || _status.extension;\r\n                var cfg = 'extension_' + extname + '_changelog';\r\n                if (lib.extensionPack[extname] && lib.extensionPack[extname].version != lib.config[cfg]) {\r\n                    game.saveConfig(cfg, lib.extensionPack[extname].version);\r\n                    if (!_status.extensionChangeLog) {\r\n                        _status.extensionChangeLog = {};\r\n                        _status.extensionChangeLog[extname] = str;\r\n                    }\r\n                }\r\n            },\r\n            /**\r\n             * 保存配置\r\n             * 如果有IndexedDB，使用IndexedDB；否则以`{key:lib.configprefix + 'config', value:{key:value}}`的形式存入localStorage\r\n             * @function\r\n             * @param {!string} key 对应的键名\r\n             * @param {?Object} value 值，如果为虚值表示删除数据，否则添加/更新数据\r\n             * @param {?string} local 模组名，如果指定字符串，更新模组配置(`lib.config.mode_config[local]`)，否则更新全局配置(`lib.config`)\r\n             * @param {function():void} callback 更新完成的回调函数\r\n             */\r\n            saveConfig: function (key, value, local, callback) {\r\n                if (_status.reloading) return;\r\n                if (local) {\r\n                    var localmode;\r\n                    if (typeof local == 'string') {\r\n                        localmode = local;\r\n                    }\r\n                    else {\r\n                        localmode = lib.config.mode;\r\n                    }\r\n                    if (!lib.config.mode_config[localmode]) {\r\n                        lib.config.mode_config[localmode] = {};\r\n                    }\r\n                    if (value == undefined) {\r\n                        delete lib.config.mode_config[localmode][key];\r\n                    }\r\n                    else {\r\n                        lib.config.mode_config[localmode][key] = value;\r\n                    }\r\n                    key += '_mode_config_' + localmode;\r\n                }\r\n                else {\r\n                    if (value == undefined) {\r\n                        delete lib.config[key];\r\n                    }\r\n                    else {\r\n                        lib.config[key] = value;\r\n                    }\r\n                }\r\n                if (!lib.db) {\r\n                    var config;\r\n                    try {\r\n                        config = JSON.parse(localStorage.getItem(lib.configprefix + 'config'));\r\n                        if (!config || typeof config != 'object') throw 'err'\r\n                    }\r\n                    catch (err) {\r\n                        config = {};\r\n                    }\r\n                    if (value === undefined) {\r\n                        delete config[key];\r\n                    }\r\n                    else {\r\n                        config[key] = value;\r\n                    }\r\n                    localStorage.setItem(lib.configprefix + 'config', JSON.stringify(config));\r\n                    if (callback) {\r\n                        callback();\r\n                    }\r\n                }\r\n                else {\r\n                    if (value == undefined) {\r\n                        game.deleteDB('config', key, callback);\r\n                    }\r\n                    else {\r\n                        game.putDB('config', key, value, callback);\r\n                    }\r\n                }\r\n            },\r\n            /**\r\n             * 持久化配置，`lib.config[key]`\r\n             * @function\r\n             * @param {!string} key 键名\r\n             * @see {@link game.saveConfig}\r\n             */\r\n            saveConfigValue: function (key) {\r\n                game.saveConfig(key, lib.config[key]);\r\n            },\r\n            /**\r\n             * 持久化拓展的配置\r\n             * @function\r\n             * @param {!string} extension 拓展名\r\n             * @param {!string} key 键名，自动拓展为`extension_${extension}_${key}`\r\n             * @param {?Object} value\r\n             * @see {@link game.saveConfig}\r\n             */\r\n            saveExtensionConfig: function (extension, key, value) {\r\n                return game.saveConfig('extension_' + extension + '_' + key, value);\r\n            },\r\n            /**\r\n             * 获取拓展的配置\r\n             * @function\r\n             * @param {!string} extension 拓展名\r\n             * @param {!string} key 键名\r\n             * @returns {?Object} \r\n             */\r\n            getExtensionConfig: function (extension, key) {\r\n                return lib.config['extension_' + extension + '_' + key];\r\n            },\r\n            /**\r\n             * 于IndexedDB/localStorage中清空某个mode的配置\r\n             * @function\r\n             * @param {!string} mode mode名\r\n             */\r\n            clearModeConfig: function (mode) {\r\n                if (_status.reloading) return;\r\n                if (!lib.db) {\r\n                    var config;\r\n                    try {\r\n                        config = JSON.parse(localStorage.getItem(lib.configprefix + 'config'));\r\n                        if (!config || typeof config != 'object') throw 'err'\r\n                    }\r\n                    catch (err) {\r\n                        config = {};\r\n                    }\r\n                    for (var i in config) {\r\n                        if (i.substr(i.indexOf('_mode_config') + 13) == mode) {\r\n                            delete config[i];\r\n                        }\r\n                    }\r\n                    localStorage.setItem(lib.configprefix + 'config', JSON.stringify(config));\r\n                    localStorage.removeItem(lib.configprefix + mode);\r\n                }\r\n                else {\r\n                    game.getDB('config', null, function (config) {\r\n                        for (var i in config) {\r\n                            if (i.substr(i.indexOf('_mode_config') + 13) == mode) {\r\n                                game.saveConfig(i);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n            addPlayer: function (position, character, character2) {\r\n                if (position < 0 || position > game.players.length + game.dead.length || position == undefined) {\r\n                    position = Math.ceil(Math.random() * (game.players.length + game.dead.length));\r\n                }\r\n                var players = game.players.concat(game.dead);\r\n                ui.arena.setNumber(players.length + 1);\r\n                for (var i = 0; i < players.length; i++) {\r\n                    if (parseInt(players[i].dataset.position) >= position) {\r\n                        players[i].dataset.position = parseInt(players[i].dataset.position) + 1;\r\n                    }\r\n                }\r\n                var player = ui.create.player(ui.arena).animate('start');\r\n                if (character) player.init(character, character2);\r\n                game.players.push(player);\r\n                player.dataset.position = position;\r\n                game.arrangePlayers();\r\n                return player;\r\n            },\r\n            addFellow: function (position, character, animation) {\r\n                game.addVideo('addFellow', null, [position, character, animation]);\r\n                var player = ui.create.player(ui.arena).animate(animation || 'start');\r\n                player.dataset.position = position || game.players.length + game.dead.length;\r\n                player.getId();\r\n                if (character) player.init(character);\r\n                game.players.push(player); game.arrangePlayers();\r\n                return player;\r\n            },\r\n            triggerEnter: function (player) {\r\n                var next = game.createEvent('enterGame', false);\r\n                next.player = player;\r\n                next.setContent(function () {\r\n                    Evt.trigger('enterGame');\r\n                });\r\n            },\r\n            restorePlayer: function (player) {\r\n                if (game.players.contains(player) || game.dead.contains(player)) return;\r\n                var position = parseInt(player.dataset.position);\r\n                if (position < 0 || position > game.players.length + game.dead.length || position == undefined) {\r\n                    position = Math.ceil(Math.random() * (game.players.length + game.dead.length));\r\n                }\r\n                var players = game.players.concat(game.dead);\r\n                ui.arena.setNumber(players.length + 1);\r\n                for (var i = 0; i < players.length; i++) {\r\n                    if (parseInt(players[i].dataset.position) >= position) {\r\n                        players[i].dataset.position = parseInt(players[i].dataset.position) + 1;\r\n                    }\r\n                }\r\n                game.players.push(player);\r\n                delete player.removed;\r\n                player.removeAttribute('style');\r\n                player.animate('start');\r\n                ui.arena.appendChild(player);\r\n                game.arrangePlayers();\r\n                return player;\r\n            },\r\n            removePlayer: function (player) {\r\n                if (_status.roundStart == player) {\r\n                    _status.roundStart = player.next || player.getNext() || game.players[0];\r\n                }\r\n                var players = game.players.concat(game.dead);\r\n                player.style.left = player.getLeft() + 'px';\r\n                player.style.top = player.getTop() + 'px';\r\n                if (player == undefined) player = game.dead[0] || game.me.next;\r\n                var position = parseInt(player.dataset.position);\r\n                for (var i = 0; i < players.length; i++) {\r\n                    if (parseInt(players[i].dataset.position) > position) {\r\n                        players[i].dataset.position = parseInt(players[i].dataset.position) - 1;\r\n                    }\r\n                }\r\n                if (player.isAlive()) {\r\n                    player.next.previous = player.previous;\r\n                    player.previous.next = player.next;\r\n                }\r\n                player.nextSeat.previousSeat = player.previousSeat;\r\n                player.previousSeat.nextSeat = player.nextSeat;\r\n                player.delete();\r\n                game.players.remove(player);\r\n                game.dead.remove(player);\r\n                ui.arena.setNumber(players.length - 1);\r\n                player.removed = true;\r\n                if (player == game.me) {\r\n                    ui.me.hide();\r\n                    ui.auto.hide();\r\n                    ui.wuxie.hide();\r\n                }\r\n                setTimeout(function () {\r\n                    player.removeAttribute('style');\r\n                }, 500);\r\n                return player;\r\n            },\r\n            replacePlayer: function (player, character, character2) {\r\n                player.removed = true;\r\n                var position = parseInt(player.dataset.position);\r\n                game.players.remove(player);\r\n                game.dead.remove(player);\r\n                player.delete();\r\n                var player2 = ui.create.player(ui.arena).animate('start');\r\n                if (character) player2.init(character, character2);\r\n                game.players.push(player2);\r\n                player2.dataset.position = position;\r\n                player2.nextSeat = player.nextSeat;\r\n                player2.previousSeat = player.previousSeat;\r\n                player2.nextSeat.previousSeat = player2;\r\n                player2.previousSeat.nextSeat = player2;\r\n                var player3 = player2.nextSeat;\r\n                while (player3.isDead()) player3 = player3.nextSeat;\r\n                player3.previous = player2;\r\n                player2.next = player3;\r\n                var player4 = player2.previousSeat;\r\n                while (player4.isDead()) player4 = player4.previousSeat;\r\n                player4.next = player2;\r\n                player2.previous = player4;\r\n                if (_status.roundStart == player) {\r\n                    _status.roundStart = player2;\r\n                }\r\n                return player2;\r\n            },\r\n            arrangePlayers: function () {\r\n                if (game.chess && game.me) {\r\n                    var friendCount = 0;\r\n                    var enemyCount = 0;\r\n                    var rand = Math.random() < 0.5;\r\n                    for (var i = 0; i < game.players.length; i++) {\r\n                        if (game.players[i].side == game.me.side) {\r\n                            if (rand) {\r\n                                if (game.players[i] == game.friendZhu) {\r\n                                    game.players[i]._sortCount = -2;\r\n                                }\r\n                                else {\r\n                                    game.players[i]._sortCount = 2 * friendCount;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (game.players[i] == game.friendZhu) {\r\n                                    game.players[i]._sortCount = -1;\r\n                                }\r\n                                else {\r\n                                    game.players[i]._sortCount = 2 * friendCount + 1;\r\n                                }\r\n                            }\r\n                            friendCount++;\r\n                        }\r\n                        else {\r\n                            if (rand) {\r\n                                if (game.players[i] == game.enemyZhu) {\r\n                                    game.players[i]._sortCount = -1;\r\n                                }\r\n                                else {\r\n                                    game.players[i]._sortCount = 2 * enemyCount + 1;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (game.players[i] == game.enemyZhu) {\r\n                                    game.players[i]._sortCount = -2;\r\n                                }\r\n                                else {\r\n                                    game.players[i]._sortCount = 2 * enemyCount;\r\n                                }\r\n                            }\r\n                            enemyCount++;\r\n                        }\r\n                    }\r\n                    game.players.sort(function (a, b) {\r\n                        return a._sortCount - b._sortCount;\r\n                    });\r\n                    for (var i = 0; i < game.players.length; i++) {\r\n                        delete game.players[i]._sortCount;\r\n                    }\r\n                }\r\n                else {\r\n                    game.players.sort(lib.sort.position);\r\n                }\r\n                var players = game.players.concat(game.dead);\r\n                players.sort(lib.sort.position);\r\n                for (var i = 0; i < players.length; i++) {\r\n                    if (i == 0) {\r\n                        players[i].previousSeat = players[players.length - 1];\r\n                    }\r\n                    else {\r\n                        players[i].previousSeat = players[i - 1];\r\n                    }\r\n                    if (i == players.length - 1) {\r\n                        players[i].nextSeat = players[0];\r\n                    }\r\n                    else {\r\n                        players[i].nextSeat = players[i + 1];\r\n                    }\r\n                }\r\n                for (var i = 0; i < game.players.length; i++) {\r\n                    if (i == 0) {\r\n                        game.players[i].previous = game.players[game.players.length - 1];\r\n                    }\r\n                    else {\r\n                        game.players[i].previous = game.players[i - 1];\r\n                    }\r\n                    if (i == game.players.length - 1) {\r\n                        game.players[i].next = game.players[0];\r\n                    }\r\n                    else {\r\n                        game.players[i].next = game.players[i + 1];\r\n                    }\r\n                }\r\n            },\r\n            /**\r\n             * 检测一组技能，返回其中未失效的技能\r\n             * @param {!Array<string>} skills 技能名数组\r\n             * @param {!HTMLDivElement} player 检测角色\r\n             * @param {?Function} exclude 用于筛选的函数\r\n             * @returns {Array<string>} 排除失效技能的数组\r\n             */\r\n            filterSkills: function (skills, player, exclude) {\r\n                let out = skills.slice(0);\r\n                for (let i in player.disabledSkills) {\r\n                    out.remove(i);\r\n                }\r\n                if (player.storage.skill_blocker && player.storage.skill_blocker.length) {\r\n                    for (let i = 0; i < out.length; i++) {\r\n                        if ((!exclude || !exclude.contains(out[i])) && get.is.blocked(out[i], player)) out.splice(i--, 1);\r\n                    }\r\n                }\r\n                return out;\r\n            },\r\n            /**\r\n             * 对一组技能进行展开，得到由其中每个技能和其子技能组成的数组，返回展开后的技能名数组\r\n             * @param {!Array<string>} skills 技能名数组\r\n             * @returns {Array<string>} 包含子技能的技能名数组\r\n             */\r\n            expandSkills: function (skills) {\r\n                var skills2 = [];\r\n                for (var i = 0; i < skills.length; i++) {\r\n                    var info = get.info(skills[i]);\r\n                    if (info) {\r\n                        if (info.group) skills2 = skills2.concat(info.group);\r\n                    }\r\n                    else {\r\n                        console.log(skills[i]);\r\n                    }\r\n                }\r\n                for (var i = 0; i < skills2.length; i++) {\r\n                    skills.add(skills2[i]);\r\n                }\r\n                return skills;\r\n            },\r\n            css: function (style) {\r\n                for (var i in style) {\r\n                    if (ui.style[i]) ui.style[i].innerHTML = i + JSON.stringify(style[i]).replace(/\"/g, \"\");\r\n                    else {\r\n                        ui.style[i] = document.createElement('style');\r\n                        ui.style[i].innerHTML = i + JSON.stringify(style[i]).replace(/\"/g, \"\");\r\n                        document.head.appendChild(ui.style[i]);\r\n                    }\r\n                }\r\n            },\r\n            players: [],\r\n            dead: [],\r\n            imported: [],\r\n            playerMap: {},\r\n            phaseNumber: 0,\r\n            roundNumber: 0,\r\n            shuffleNumber: 0,\r\n            /**检测类game方法 */\r\n            ...__webpack_require__(/*! @m/_game_detect */ \"./methods/_game_detect.js\"),\r\n            /**联机类game方法 */\r\n            ...__webpack_require__(/*! @m/_game_connect */ \"./methods/_game_connect.js\"),\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack:///./game/_game.js?")},"./game/_status.js":module=>{eval("module.exports = {\r\n    paused: false,\r\n    paused2: false,\r\n    paused3: false,\r\n    over: false,\r\n    clicked: false,\r\n    auto: false,\r\n    /**\r\n     * 当前事件对象，游戏内所有未定义的event等价于_status.event\r\n     * @name _status.event\r\n     * @type {!Object}\r\n     */\r\n    event: {\r\n        finished: true,\r\n        /**\r\n         * _status.event.next：插入事件列表，当前step结束后，该列表内的事件会被执行\r\n         * {@link game.createEvent}生成的事件默认插入其中\r\n         * @name _status.event_next\r\n         * @type {!Array}\r\n         */\r\n        next: [],\r\n        /**\r\n         * _status.event.after：后续事件列表，当前事件结束后，该列表内的事件会被执行\r\n         * @name _status.event_after\r\n         * @type {!Array}\r\n         */\r\n        after: []\r\n    },\r\n    ai: {},\r\n    lastdragchange: [],\r\n    skillaudio: [],\r\n    dieClose: [],\r\n    dragline: [],\r\n    dying: [],\r\n    globalHistory: [{\r\n        cardMove: [],\r\n        custom: [],\r\n    }],\r\n    cardtag: {\r\n        yingbian_zhuzhan: [],\r\n        yingbian_kongchao: [],\r\n        yingbian_fujia: [],\r\n        yingbian_canqu: [],\r\n    },\r\n    prehidden_skills: [],\r\n}\n\n//# sourceURL=webpack:///./game/_status.js?")},"./game/ai.js":module=>{eval("module.exports = {\r\n    aiFun: (vkCore) => {\r\n        let { game, ui, get, ai, lib, _status } = vkCore\r\n        return {\r\n            basic: {\r\n                chooseButton: function (check) {\r\n                    var Evt = _status.event;\r\n                    var i, j, range, buttons, buttons2;\r\n                    var ok = false, forced = Evt.forced;\r\n                    var iwhile = 100;\r\n                    while (iwhile--) {\r\n                        range = get.select(Evt.selectButton);\r\n                        if (range[1] == -1) {\r\n                            j = 0;\r\n                            for (i = 0; i < ui.selected.buttons.length; i++) {\r\n                                j += check(ui.selected.buttons[i]);\r\n                            }\r\n                            return (j > 0);\r\n                        }\r\n                        buttons = get.selectableButtons();\r\n                        if (buttons.length == 0) {\r\n                            return ok;\r\n                        }\r\n                        buttons2 = buttons.slice(0);\r\n                        var ix = 0;\r\n                        var checkix = check(buttons[0], buttons2);\r\n                        for (i = 1; i < buttons.length; i++) {\r\n                            var checkixtmp = check(buttons[i], buttons2);\r\n                            if (checkixtmp > checkix) {\r\n                                ix = i;\r\n                                checkix = checkixtmp;\r\n                            }\r\n                        }\r\n                        // buttons.sort(function(a,b){\r\n                        //     return check(b,buttons2)-check(a,buttons2);\r\n                        // });\r\n                        if (check(buttons[ix]) <= 0) {\r\n                            if (!forced || ok) {\r\n                                return ok;\r\n                            }\r\n                        }\r\n                        buttons[ix].classList.add('selected');\r\n                        ui.selected.buttons.add(buttons[ix]);\r\n                        game.check();\r\n                        if (ui.selected.buttons.length >= range[0]) {\r\n                            ok = true;\r\n                        }\r\n                        if (ui.selected.buttons.length == range[1]) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                },\r\n                chooseCard: function (check) {\r\n                    var Evt = _status.event;\r\n                    if (Evt.filterCard == undefined) return (check() > 0);\r\n                    var i, j, range, cards, cards2, skills, check, effect;\r\n                    var ok = false, forced = Evt.forced;\r\n                    var iwhile = 100;\r\n                    while (iwhile--) {\r\n                        range = get.select(Evt.selectCard);\r\n                        if (ui.selected.cards.length >= range[0]) {\r\n                            ok = true;\r\n                        }\r\n                        if (range[1] == -1) {\r\n                            if (ui.selected.cards.length == 0) return true;\r\n                            j = 0;\r\n                            for (i = 0; i < ui.selected.cards.length; i++) {\r\n                                effect = check(ui.selected.cards[i]);\r\n                                if (effect < 0) j -= Math.sqrt(-effect);\r\n                                else j += Math.sqrt(effect);\r\n                            }\r\n                            return (j > 0);\r\n                        }\r\n                        cards = get.selectableCards();\r\n                        if (!_status.event.player._noSkill) {\r\n                            cards = cards.concat(get.skills());\r\n                        }\r\n                        if (cards.length == 0) {\r\n                            return ok;\r\n                        }\r\n                        cards2 = cards.slice(0);\r\n                        // cards.sort(function(a,b){\r\n                        //     return (check(b,cards2)-check(a,cards2));\r\n                        // });\r\n                        var ix = 0;\r\n                        var checkix = check(cards[0], cards2);\r\n                        for (i = 1; i < cards.length; i++) {\r\n                            var checkixtmp = check(cards[i], cards2);\r\n                            if (checkixtmp > checkix) {\r\n                                ix = i;\r\n                                checkix = checkixtmp;\r\n                            }\r\n                        }\r\n                        if (check(cards[ix]) <= 0) {\r\n                            if (!forced || ok) {\r\n                                return ok;\r\n                            }\r\n                        }\r\n                        if (typeof cards[ix] == 'string') {\r\n                            ui.click.skill(cards[ix]);\r\n                            var info = get.info(Evt.skill);\r\n                            if (info.filterCard) {\r\n                                check = info.check || get.unuseful2;\r\n                                return (ai.basic.chooseCard(check));\r\n                            }\r\n                            else {\r\n                                return true;\r\n                            }\r\n                        }\r\n                        else {\r\n                            cards[ix].classList.add('selected');\r\n                            ui.selected.cards.add(cards[ix]);\r\n                            game.check();\r\n                            if (ui.selected.cards.length >= range[ix]) {\r\n                                ok = true;\r\n                            }\r\n                            if (ui.selected.cards.length == range[1]) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                chooseTarget: function (check) {\r\n                    var Evt = _status.event;\r\n                    if (Evt.filterTarget == undefined) return (check() > 0);\r\n                    var i, j, range, targets, targets2, effect;\r\n                    var ok = false, forced = Evt.forced;\r\n                    var iwhile = 100;\r\n                    while (iwhile--) {\r\n                        range = get.select(Evt.selectTarget);\r\n                        if (range[1] == -1) {\r\n                            j = 0;\r\n                            for (i = 0; i < ui.selected.targets.length; i++) {\r\n                                effect = check(ui.selected.targets[i]);\r\n                                if (effect < 0) j -= Math.sqrt(-effect);\r\n                                else j += Math.sqrt(effect);\r\n                            }\r\n                            return (j > 0);\r\n                        }\r\n                        else if (range[1] == 0) {\r\n                            return check() > 0\r\n                        }\r\n                        targets = get.selectableTargets();\r\n                        if (targets.length == 0) {\r\n                            return range[0] == 0 || ok;\r\n                        }\r\n                        targets2 = targets.slice(0);\r\n                        // targets.sort(function(a,b){\r\n                        //     return check(b)-check(a);\r\n                        // });\r\n                        var ix = 0;\r\n                        var checkix = check(targets[0], targets2);\r\n                        for (i = 1; i < targets.length; i++) {\r\n                            var checkixtmp = check(targets[i], targets2);\r\n                            if (checkixtmp > checkix) {\r\n                                ix = i;\r\n                                checkix = checkixtmp;\r\n                            }\r\n                        }\r\n                        if (check(targets[ix]) <= 0) {\r\n                            if (!forced || ok) {\r\n                                return ok;\r\n                            }\r\n                        }\r\n                        targets[ix].classList.add('selected');\r\n                        ui.selected.targets.add(targets[ix]);\r\n                        game.check();\r\n                        if (ui.selected.targets.length >= range[0]) {\r\n                            ok = true;\r\n                        }\r\n                        if (ui.selected.targets.length == range[1]) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            /**\r\n             * AI用取值\r\n             * @see {@link get}\r\n             */\r\n            get: get\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack:///./game/ai.js?")},"./game/get.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("module.exports = {\r\n   getFun: (vkCore) => {\r\n      let { game, ui, get, ai, lib, _status } = vkCore\r\n      return {\r\n         /**\r\n          * 返回联机名称\r\n          * @returns {!number} 默认为“无名玩家”\r\n          */\r\n         connectNickname: function () {\r\n            return typeof lib.config.connect_nickname == 'string' ? (lib.config.connect_nickname.slice(0, 12)) : '无名玩家';\r\n         },\r\n         //TODO\r\n         sourceCharacter: function (str) {\r\n            if (str) {\r\n               for (var i in lib.characterReplace) {\r\n                  if (lib.characterReplace[i].contains(str)) return i;\r\n               }\r\n            }\r\n            return str;\r\n         },\r\n         /**\r\n          * 返回一个角色是否是幸运星；\r\n          * 此函数仅单机模式有效，联机模式总返回false\r\n          * @param {GameCores.GameObjects.Player} player 一个角色\r\n          * @returns {!boolean}\r\n          */\r\n         isLuckyStar: function (player) {\r\n            if (player && player.hasSkillTag('luckyStar')) return true;\r\n            if (_status.connectMode) return false;\r\n            return (!player || player == game.me || player.isUnderControl()) && lib.config.lucky_star == true;\r\n         },\r\n         /**\r\n          * 返回模板的hp\r\n          * @param {(number|string)} hp 如果是数值，返回`hp`；如果是字符串，且为`hp/maxHp`的形式，返回那个**hp**的值；其他情况返回0\r\n          * @returns {!number}\r\n          */\r\n         infoHp: function (hp) {\r\n            if (typeof hp == 'number') return hp;\r\n            else if (typeof hp == 'string' && hp.indexOf('/') != -1) {\r\n               return parseInt(hp.slice(0, hp.indexOf('/')));\r\n            }\r\n            return 0;\r\n         },\r\n         /**\r\n          * 返回模板的maxHp\r\n          * @param {(number|string)} hp 如果是数值，返回`hp`；如果是字符串，且为`hp/maxHp`的形式，返回那个**maxHp**的值；其他情况返回0\r\n          * @returns {!number}\r\n          */\r\n         infoMaxHp: function (hp) {\r\n            if (typeof hp == 'number') return hp;\r\n            else if (typeof hp == 'string' && hp.indexOf('/') != -1) {\r\n               return parseInt(hp.slice(hp.indexOf('/') + 1));\r\n            }\r\n            return 0;\r\n         },\r\n         /**\r\n          * 布尔判断封装\r\n          * @namespace\r\n          */\r\n         is: {\r\n            //“保护新手”模式的ban将\r\n            banForBeginner: function (current) {\r\n               if (current in lib.character) {\r\n                  for (var i in lib.characterPack) {\r\n                     if (!['Beginner', 'hololive', 'nijisanji', 'clubs', 'vtuber'].contains(i)) {\r\n                        if (current in lib.characterPack[i]) {\r\n                           return true\r\n                        }\r\n                     }\r\n                  }\r\n                  if ([\r\n                     're_ShigureUi', 're_NijikawaRaki',\r\n                     'ŌokamiMio',\r\n                     'Elu', 'SuzukaUtako', 'MononobeAlice', 'SakuraRitsuki', 'YagamiKaruta',\r\n                     'Bella', 'Carol', 'Azusa', 'Yousa', 'AkiRinco', 'Lovely', 'Pudding', 'jike', 'Bacharu', 'SephiraSu', 'Reine', 'IsekaiJoucho', 'Rim', 'Harusaruhi',\r\n                     'Bafuko', 'Hiiro', 'Eilene', 'YaotomeNoe', 'Niuniuzi', 'Zaodaoji'\r\n                  ].contains(current)) return true;\r\n                  return false;\r\n               }\r\n               if (current in lib.card) {\r\n                  for (var i in lib.cardPack) {\r\n                     if (!['standard', 'extra'].contains(i)) {\r\n                        if (lib.cardPack[i].contains(current)) {\r\n                           return true\r\n                        }\r\n                     }\r\n                  }\r\n                  return false;\r\n               }\r\n            },\r\n            //检查卡牌是否符合要求的快捷方法(只要求满足至少一种条件，无条件时默认不满足)\r\n            filterCardBy: function (card, arg) {\r\n               if (!card || !arg) return false;\r\n               if (typeof arg == 'string') {\r\n                  if (arg == get.name(card)) return true;\r\n               }\r\n               else if (typeof arg == 'object') {\r\n                  for (var x in arg) {\r\n                     var value;\r\n                     if (x == 'type' || x == 'subtype' || x == 'color' || x == 'suit' || x == 'number') {\r\n                        value = get[x](card);\r\n                     }\r\n                     else {\r\n                        value = card[x];\r\n                     }\r\n                     if ((typeof arg[x] == 'string' && value == arg[x]) ||\r\n                        (Array.isArray(arg[x]) && arg[x].contains(value))) {\r\n                        return true;\r\n                     }\r\n                  }\r\n               }\r\n               else if (typeof arg == 'function') {\r\n                  return arg(card);\r\n               }\r\n               return false;\r\n            },\r\n            /**\r\n             * 判断技能是否被封锁\r\n             */\r\n            blocked: function (skill, player) {\r\n               if (!player.storage.skill_blocker || !player.storage.skill_blocker.length) return false;\r\n               for (let i of player.storage.skill_blocker) {\r\n                  if (lib.skill[i] && lib.skill[i].skillBlocker && lib.skill[i].skillBlocker(skill, player)) return true;\r\n               }\r\n               return false;\r\n            },\r\n            /**\r\n             * 判断角色是否为多势力\r\n             */\r\n            double: function (name, array) {\r\n               if (!lib.character[name] || !lib.character[name][4]) return false;\r\n               for (let i of lib.character[name][4]) {\r\n                  if (i.indexOf('doublegroup:') == 0) {\r\n                     if (!array) return true;\r\n                     return i.split(':').slice(1);\r\n                  }\r\n               }\r\n               return false;\r\n            },\r\n            /**\r\n             * 判断卡牌是否携带应变标签\r\n             */\r\n            yingbian: function (node) {\r\n               return get.cardtag(node, 'yingbian_zhuzhan') || get.cardtag(node, 'yingbian_fujia') || get.cardtag(node, 'yingbian_canqu') || get.cardtag(node, 'yingbian_kongchao');\r\n            },\r\n            emoji: function (substring) {\r\n               if (substring) {\r\n                  var reg = new RegExp(\"[~#^$@%&!?%*]\", 'g');\r\n                  if (substring.match(reg)) {\r\n                     return true;\r\n                  }\r\n                  for (var i = 0; i < substring.length; i++) {\r\n                     var hs = substring.charCodeAt(i);\r\n                     if (0xd800 <= hs && hs <= 0xdbff) {\r\n                        if (substring.length > 1) {\r\n                           var ls = substring.charCodeAt(i + 1);\r\n                           var uc = ((hs - 0xd800) * 0x400) + (ls - 0xdc00) + 0x10000;\r\n                           if (0x1d000 <= uc && uc <= 0x1f77f) {\r\n                              return true;\r\n                           }\r\n                        }\r\n                     }\r\n                     else if (substring.length > 1) {\r\n                        var ls = substring.charCodeAt(i + 1);\r\n                        if (ls == 0x20e3) {\r\n                           return true;\r\n                        }\r\n                     }\r\n                     else {\r\n                        if (0x2100 <= hs && hs <= 0x27ff) {\r\n                           return true;\r\n                        }\r\n                        else if (0x2B05 <= hs && hs <= 0x2b07) {\r\n                           return true;\r\n                        }\r\n                        else if (0x2934 <= hs && hs <= 0x2935) {\r\n                           return true;\r\n                        }\r\n                        else if (0x3297 <= hs && hs <= 0x3299) {\r\n                           return true;\r\n                        }\r\n                        else if (hs == 0xa9 || hs == 0xae || hs == 0x303d || hs == 0x3030\r\n                           || hs == 0x2b55 || hs == 0x2b1c || hs == 0x2b1b\r\n                           || hs == 0x2b50) {\r\n                           return true;\r\n                        }\r\n                     }\r\n                  }\r\n               }\r\n               return false;\r\n            },\r\n            banWords: function (str) {\r\n               if (get.is.emoji(str)) return true;\r\n               for (let i of (__webpack_require__(/*! @e/keyWords */ \"./extension/keyWords.js\").bannedKeyWords)) {\r\n                  if (str.indexOf(i) != -1) return true;\r\n               }\r\n               return false;\r\n            },\r\n            converted: function (Evt) {\r\n               return !(Evt.card && Evt.card.isCard);\r\n            },\r\n            safari: function () {\r\n               var ua = navigator.userAgent.toLowerCase();\r\n               return ua.indexOf('safari' != -1) && ua.indexOf('chrome') == -1;\r\n            },\r\n            freePosition: function (cards) {\r\n               for (var i = 0; i < cards.length; i++) {\r\n                  if (!cards[i].hasPosition) return false;\r\n                  if (cards[i].hasPosition()) return false;\r\n               }\r\n               return true;\r\n            },\r\n            nomenu: function (name, item) {\r\n               var menus = ['system', 'menu'];\r\n               var configs = {\r\n                  show_round_menu: lib.config.show_round_menu,\r\n                  round_menu_func: lib.config.round_menu_func,\r\n                  touchscreen: lib.config.touchscreen,\r\n                  swipe_up: lib.config.swipe_up,\r\n                  swipe_down: lib.config.swipe_down,\r\n                  swipe_left: lib.config.swipe_left,\r\n                  swipe_right: lib.config.swipe_right,\r\n                  right_click: lib.config.right_click,\r\n                  phonelayout: lib.config.phonelayout\r\n               };\r\n               configs[name] = item;\r\n               if (!configs.phonelayout) return false;\r\n               if (configs.show_round_menu && menus.contains(configs.round_menu_func)) {\r\n                  return false;\r\n               }\r\n               if (configs.touchscreen) {\r\n                  if (menus.contains(configs.swipe_up)) return false;\r\n                  if (menus.contains(configs.swipe_down)) return false;\r\n                  if (menus.contains(configs.swipe_left)) return false;\r\n                  if (menus.contains(configs.swipe_right)) return false;\r\n               }\r\n               else {\r\n                  if (configs.right_click == 'config') return false;\r\n               }\r\n               if (name) {\r\n                  setTimeout(function () {\r\n                     alert('请将至少一个操作绑定为显示按钮或打开菜单，否则将永远无法打开菜单');\r\n                  });\r\n               }\r\n               return true;\r\n            },\r\n            altered: function (skill) {\r\n               return false;\r\n               // if(_status.connectMode) return true;\r\n               // return !lib.config.vintageSkills.contains(skill);\r\n            },\r\n            node: function (obj) {\r\n               var str = Object.prototype.toString.call(obj);\r\n               if (str && str.indexOf('[object HTML')) return true;\r\n               return false;\r\n            },\r\n            div: function (obj) {\r\n               return Object.prototype.toString.call(obj) === '[object HTMLDivElement]';\r\n            },\r\n            map: function (obj) {\r\n               return Object.prototype.toString.call(obj) === '[object Map]';\r\n            },\r\n            set: function (obj) {\r\n               return Object.prototype.toString.call(obj) === '[object Set]';\r\n            },\r\n            object: function (obj) {\r\n               return Object.prototype.toString.call(obj) === '[object Object]';\r\n            },\r\n            singleSelect: function (func) {\r\n               if (typeof func == 'function') return false;\r\n               var select = get.select(func);\r\n               return select[0] == 1 && select[1] == 1;\r\n            },\r\n            jun: function (name) {\r\n               if (get.mode() == 'guozhan') {\r\n                  if (name && typeof name == 'object') {\r\n                     if (name.isUnseen && name.isUnseen(0)) return false;\r\n                     name = name.name1;\r\n                  }\r\n                  if (typeof name == 'string' && name.indexOf('gz_jun_') == 0) {\r\n                     return true;\r\n                  }\r\n               }\r\n               return false;\r\n            },\r\n            versus: function () {\r\n               return !_status.connectMode && get.mode() == 'versus' && _status.mode == 'three';\r\n            },\r\n            changban: function () {\r\n               return get.mode() == 'single' && _status.mode == 'changban';\r\n            },\r\n            single: function () {\r\n               return get.mode() == 'single' && _status.mode == 'normal';\r\n            },\r\n            mobileMe: function (player) {\r\n               return (game.layout == 'mobile' || game.layout == 'long') && !game.chess && player.dataset.position == 0;\r\n            },\r\n            newLayout: function () {\r\n               if (game.layout != 'default') return true;\r\n               return false;\r\n            },\r\n            phoneLayout: function () {\r\n               if (!lib.config.phonelayout) return false;\r\n               return (game.layout == 'mobile' || game.layout == 'long' || game.layout == 'long2' || game.layout == 'nova');\r\n            },\r\n            singleHandcard: function () {\r\n               if (game.singleHandcard || game.layout == 'mobile' || game.layout == 'long' || game.layout == 'long2' || game.layout == 'nova') {\r\n                  return true;\r\n               }\r\n               return false;\r\n            },\r\n            linked2: function (player) {\r\n               if (game.chess) return true;\r\n               if (lib.config.link_style2 != 'rotate') return true;\r\n               // if(game.chess) return false;\r\n               if (game.layout == 'long' || game.layout == 'long2' || game.layout == 'nova') return true;\r\n               if (player.dataset.position == '0') {\r\n                  return ui.arena.classList.contains('oblongcard');\r\n               }\r\n               return false;\r\n            },\r\n            empty: function (obj) {\r\n               for (var i in obj) return false;\r\n               return true;\r\n            },\r\n            pos: function (str) {\r\n               return (str == 'h' || str == 'e' || str == 'j' || str == 'he' || str == 'hj' || str == 'ej' || str == 'hej');\r\n            },\r\n            /**\r\n             * 判断技能是否为锁定技\r\n             */\r\n            locked: function (skill, player) {\r\n               var info = lib.skill[skill];\r\n               if (typeof info.locked == 'function') return info.locked(skill, player);\r\n               if (info.locked == false) return false;\r\n               if (info.trigger && info.forced) return true;\r\n               if (info.mod) return true;\r\n               if (info.locked) return true;\r\n               return false;\r\n            },\r\n         },\r\n         /**\r\n          * 从牌堆底抽取指定数量的游戏牌\r\n          * 如果牌堆没有牌，游戏直接平局\r\n          * @param {number} num 要抽的牌数\r\n          * @returns {!Array<GameCores.GameObjects.Card>}\r\n          */\r\n         bottomCards: function (num) {\r\n            if (_status.waitingForCards) {\r\n               ui.create.cards.apply(ui.create, _status.waitingForCards);\r\n               delete _status.waitingForCards;\r\n            }\r\n            var list = [];\r\n            var card = false;\r\n            if (typeof num != 'number') num = 1;\r\n            if (num == 0) { card = true; num = 1; }\r\n            if (num < 0) num = 1;\r\n            while (num--) {\r\n               if (ui.cardPile.hasChildNodes() == false) {\r\n                  if (_status.maxShuffle != undefined) {\r\n                     if (_status.maxShuffle == 0) {\r\n                        if (_status.maxShuffleCheck) {\r\n                           game.over(_status.maxShuffleCheck());\r\n                        }\r\n                        else {\r\n                           game.over('平局');\r\n                        }\r\n                        return [];\r\n                     }\r\n                     _status.maxShuffle--;\r\n                  }\r\n                  game.shuffleNumber++;\r\n                  if (_status.event.trigger) _status.event.trigger('washCard');\r\n                  var cards = [], i;\r\n                  for (var i = 0; i < lib.onwash.length; i++) {\r\n                     if (lib.onwash[i]() == 'remove') {\r\n                        lib.onwash.splice(i--, 1);\r\n                     }\r\n                  }\r\n                  if (_status.discarded) {\r\n                     _status.discarded.length = 0;\r\n                  }\r\n                  for (i = 0; i < ui.discardPile.childNodes.length; i++) {\r\n                     var currentcard = ui.discardPile.childNodes[i];\r\n                     currentcard.vanishtag.length = 0;\r\n                     if (get.info(currentcard).vanish || currentcard.storage.vanish) {\r\n                        currentcard.remove();\r\n                        continue;\r\n                     }\r\n                     cards.push(currentcard);\r\n                  }\r\n                  cards.randomSort();\r\n                  for (var i = 0; i < cards.length; i++) {\r\n                     ui.cardPile.appendChild(cards[i]);\r\n                  }\r\n               }\r\n               if (ui.cardPile.hasChildNodes() == false) {\r\n                  game.over('平局');\r\n                  return [];\r\n               }\r\n               var cardx = ui.cardPile.removeChild(ui.cardPile.lastChild);\r\n               cardx.original = 'c';\r\n               list.push(cardx);\r\n            }\r\n            game.updateRoundNumber();\r\n            if (card) return list[0];\r\n            return list;\r\n         },\r\n         //TODO\r\n         discarded: function () {\r\n            var list = _status.discarded.slice(0);\r\n            for (var i = 0; i < list.length; i++) {\r\n               if (list[i].parentNode != ui.discardPile) {\r\n                  list.splice(i--, 1);\r\n               }\r\n            }\r\n            return list;\r\n         },\r\n         /**\r\n          * 返回横坐标上的一个偏移量\r\n          * #window <- #arena\r\n          * @returns {number}\r\n          */\r\n         cardOffset: function () {\r\n            var x = ui.arena.getBoundingClientRect();\r\n            var y = ui.window.getBoundingClientRect();\r\n            return -y.width / 2 + (x.left + x.width / 2);\r\n         },\r\n         /**\r\n          * @param {string} str color\r\n          * @returns {string} '#r'\r\n          */\r\n         colorspan: function (str) {\r\n            if (str[0] == '#') {\r\n               var color;\r\n               switch (str[1]) {\r\n                  case 'r': color = 'fire'; break;\r\n                  case 'p': color = 'legend'; break;\r\n                  case 'b': color = 'blue'; break;\r\n                  case 'g': color = 'green'; break;\r\n                  case 'y': color = 'yellow'; break;\r\n                  case 'i': color = 'ice'; break;\r\n                  default: return str.slice(2);\r\n               }\r\n               return '<span class=\"' + color + 'text ' + color + 'auto\">' + str.slice(2) + '</span>';\r\n            }\r\n            return str;\r\n         },\r\n         evtprompt: function (next, str) {\r\n            if (next.prompt) {\r\n               next.set('prompt2', str);\r\n            }\r\n            else {\r\n               if (str.indexOf('###') == 0) {\r\n                  var prompts = str.slice(3).split('###');\r\n                  if (prompts[0]) next.set('prompt', prompts[0]);\r\n                  if (prompts[1]) next.set('prompt2', prompts[1]);\r\n               }\r\n               else {\r\n                  next.set('prompt', str);\r\n               }\r\n            }\r\n         },\r\n         /**\r\n          * 将游戏牌(数组)`cards`视为一张给定牌名的游戏牌`card`；\r\n          * 如果游戏牌`card`有属性`autoViewAs`，游戏牌(数组)`cards`视为一张牌名为`autoViewAs`的游戏牌\r\n          * @param {GameCores.GameObjects.Card} card  一个至少有牌名的临时\"游戏牌\"对象，除了牌名，其他属性、函数可以不指定\r\n          * @param {!string} card.name 牌名\r\n          * @param {(GameCores.GameObjects.Card|Array<GameCores.GameObjects.Card>)} cards 游戏牌(数组)\r\n          * @returns {({name:string, cards:?Array<GameCores.GameObjects.Card>}|{name:string, suit: string, number: (string|number), nature: string}|{name:string, suit: string, number: (string|number), nature: string, isCard: true, cardid: (string|number), wunature: boolean, storage: Object, cards: Array<GameCores.GameObjects.Card>}|GameCores.GameObjects.Card)}\r\n          */\r\n         autoViewAs: function (card, cards) {\r\n            var info = get.info(card);\r\n            if (info.autoViewAs) {\r\n               if (cards === false) {\r\n                  return {\r\n                     name: info.autoViewAs\r\n                  };\r\n               }\r\n               else if (Array.isArray(cards)) {\r\n                  return {\r\n                     name: info.autoViewAs,\r\n                     cards: cards.slice(0)\r\n                  };\r\n               }\r\n               else if (get.itemtype(card) == 'card') {\r\n                  return {\r\n                     name: info.autoViewAs,\r\n                     cards: [card]\r\n                  };\r\n               }\r\n               else {\r\n                  return {\r\n                     name: info.autoViewAs,\r\n                     suit: card.suit,\r\n                     number: card.number,\r\n                     nature: card.nature,\r\n                  };\r\n               }\r\n            }\r\n            else {\r\n               if (card.isCard || get.itemtype(card) == 'card') {\r\n                  var next = {\r\n                     name: get.name(card),\r\n                     suit: get.suit(card),\r\n                     number: get.number(card),\r\n                     nature: get.nature(card),\r\n                     isCard: true,\r\n                     cardid: card.cardid,\r\n                     wunature: card.wunature,\r\n                     storage: card.storage,\r\n                     cards: card.cards,\r\n                  };\r\n                  if (get.itemtype(cards) == 'cards' && !card.cards) next.cards = cards.slice(0);\r\n                  else if (get.itemtype(card) == 'card') next.cards = [card];\r\n                  return next;\r\n               }\r\n               else if (get.is.object(card) && get.itemtype(cards) == 'cards' && !card.cards) {\r\n                  card = get.copy(card);\r\n                  card.cards = cards.slice(0);\r\n               }\r\n               return card;\r\n            }\r\n         },\r\n         max: function (list, func, type) {\r\n            list = list.slice(0);\r\n            if (typeof func == 'string') {\r\n               var key = func;\r\n               func = function (item) {\r\n                  return item[key];\r\n               }\r\n            }\r\n            list.sort(function (a, b) {\r\n               return func(b) - func(a);\r\n            });\r\n            if (type == 'list') {\r\n               var list2 = [];\r\n               for (var i = 0; i < list.length; i++) {\r\n                  if (func(list[i]) == func(list[0])) {\r\n                     list2.push(list[i]);\r\n                  }\r\n               }\r\n               return list2;\r\n            }\r\n            else if (type == 'item') {\r\n               return list[0];\r\n            }\r\n            else {\r\n               return func(list[0]);\r\n            }\r\n         },\r\n         min: function (list, func, type) {\r\n            list = list.slice(0);\r\n            if (typeof func == 'string') {\r\n               var key = func;\r\n               func = function (item) {\r\n                  return item[key];\r\n               }\r\n            }\r\n            list.sort(function (a, b) {\r\n               return func(a) - func(b);\r\n            });\r\n            if (type == 'list') {\r\n               var list2 = [];\r\n               for (var i = 0; i < list.length; i++) {\r\n                  if (func(list[i]) == func(list[0])) {\r\n                     list2.push(list[i]);\r\n                  }\r\n               }\r\n               return list2;\r\n            }\r\n            else if (type == 'item') {\r\n               return list[0];\r\n            }\r\n            else {\r\n               return func(list[0]);\r\n            }\r\n         },\r\n         character: function (name, num) {\r\n            var info = lib.character[name];\r\n            if (!info) {\r\n               for (var i in lib.characterPack) {\r\n                  if (lib.characterPack[i][name]) {\r\n                     info = lib.characterPack[i][name];\r\n                     break;\r\n                  }\r\n               }\r\n            }\r\n            if (info) {\r\n               if (typeof num == 'number') {\r\n                  return info[num];\r\n               }\r\n               return info;\r\n            }\r\n            return null;\r\n         },\r\n         characterIntro: function (name) {\r\n            if (lib.characterIntro[name]) return lib.characterIntro[name];\r\n            var tags = get.character(name, 4);\r\n            if (tags) {\r\n               for (var i = 0; i < tags.length; i++) {\r\n                  if (tags[i].indexOf('des:') == 0) {\r\n                     return tags[i].slice(4);\r\n                  }\r\n               }\r\n            }\r\n            if (name.indexOf('gz_') == 0) {\r\n               name = name.slice(3);\r\n               if (lib.characterIntro[name]) return lib.characterIntro[name];\r\n            }\r\n            if (name.indexOf('_') != -1) {\r\n               name = name.slice(name.indexOf('_') + 1);\r\n            }\r\n            if (lib.characterIntro[name]) return lib.characterIntro[name];\r\n            // return '暂无武将介绍';\r\n            return '';\r\n         },\r\n         characterTag: function (name) {\r\n            var str = '';\r\n            var tags = get.character(name, 4);\r\n            if (!tags) return str;\r\n            if (tags) {\r\n               for (var i = 0; i < tags.length; i++) {\r\n                  if (tags[i].indexOf('des:') == 0) {\r\n                     continue;\r\n                  }\r\n                  var str0 = lib.translate[tags[i] + '_tag'] || lib.translate[tags[i]];\r\n                  if (str0) {\r\n                     if (!str.length) str += '标签:';\r\n                     str += ' ';\r\n                     str += str0;\r\n                  }\r\n               }\r\n            }\r\n            return str;\r\n         },\r\n         groupnature: function (group, method) {\r\n            var nature = lib.groupnature[group];\r\n            if (!nature) return '';\r\n            if (method == 'raw') {\r\n               return nature;\r\n            }\r\n            return nature + 'mm';\r\n         },\r\n         /**\r\n          * 符号函数，提取数值的符号\r\n          * @param {number} 数值\r\n          * @returns {number} (-1|0|1)\r\n          */\r\n         sgn: function (num) {\r\n            if (num > 0) return 1;\r\n            if (num < 0) return -1;\r\n            return 0;\r\n         },\r\n         rand: function (num, num2) {\r\n            if (typeof num2 == 'number') {\r\n               return num + Math.floor(Math.random() * (num2 - num + 1));\r\n            }\r\n            else {\r\n               return Math.floor(Math.random() * num);\r\n            }\r\n         },\r\n         sort: function (arr, method) {\r\n            switch (method) {\r\n               case 'seat': {\r\n                  lib.tempSortSeat = arguments[2];\r\n                  arr.sort(lib.sort.seat);\r\n                  delete lib.tempSortSeat;\r\n                  return arr;\r\n               }\r\n            }\r\n         },\r\n         sortSeat: function (arr, target) {\r\n            lib.tempSortSeat = target;\r\n            arr.sort(lib.sort.seat);\r\n            delete lib.tempSortSeat;\r\n            return arr;\r\n         },\r\n         zip: function (callback) {\r\n            callback(new JSZip());\r\n         },\r\n         delayx: function (num, max) {\r\n            if (typeof num != 'number') num = 1;\r\n            if (typeof max != 'number') max = Infinity;\r\n            switch (lib.config.game_speed) {\r\n               case 'vslow': return Math.min(max, 2.5 * num);\r\n               case 'slow': return Math.min(max, 1.5 * num);\r\n               case 'fast': return Math.min(max, 0.7 * num);\r\n               case 'vfast': return Math.min(max, 0.4 * num);\r\n               case 'vvfast': return Math.min(max, 0.2 * num);\r\n               default: return Math.min(max, num);\r\n            }\r\n         },\r\n         prompt: function (skill, target, player) {\r\n            player = player || _status.event.player;\r\n            if (target) {\r\n               var str = get.translation(target);\r\n               if (target == player) {\r\n                  str += '（你）'\r\n               }\r\n               return '是否对' + str + '发动『' + get.skillTranslation(skill, player) + '』？';\r\n            }\r\n            else {\r\n               return '是否发动『' + get.skillTranslation(skill, player) + '』？';\r\n            }\r\n         },\r\n         prompt2: function (skill, target, player) {\r\n            var str = get.prompt.apply(this, arguments);\r\n            if (!lib.translate[skill + '_info'] && !lib.dynamicTranslate[skill]) return str;\r\n            return '###' + str + '###' + get.skillInfoTranslation(skill, player);\r\n         },\r\n         url: function (master) {\r\n            var url = lib.config.updateURL || lib.updateURL;\r\n            if (url[url.length - 1] != '/') {\r\n               url += '/';\r\n            }\r\n            if (master != 'nodev') {\r\n               return url + 'master/';\r\n            }\r\n            else {\r\n               return url + 'v' + lib.version + '/';\r\n            }\r\n         },\r\n         round: function (num, f) {\r\n            var round = 1;\r\n            for (var i = 0; i < f; i++) {\r\n               round *= 10;\r\n            }\r\n            return Math.round(num * round) / round;\r\n         },\r\n         playerNumber: function () {\r\n            var num;\r\n            if (_status.brawl && _status.brawl.playerNumber) {\r\n               num = _status.brawl.playerNumber\r\n            }\r\n            else {\r\n               num = get.config('player_number');\r\n            }\r\n            return parseInt(num) || 2;\r\n         },\r\n         benchmark: function (func1, func2, iteration, arg) {\r\n            var tic, toc;\r\n            var key1, key2;\r\n            if (!arg) arg = [];\r\n            if (Array.isArray(func2)) {\r\n               key1 = func2[0];\r\n               key2 = func2[1];\r\n            }\r\n            else if (typeof func2 == 'string') {\r\n               key1 = func2;\r\n               func2 = iteration || 100;\r\n            }\r\n            else if (typeof func2 == 'number') {\r\n               arg = iteration || arg;\r\n               iteration = func2;\r\n            }\r\n            tic = get.utc();\r\n            for (var i = 0; i < iteration; i++) {\r\n               if (key1) {\r\n                  func1[key1](arg.randomGet());\r\n               }\r\n               else {\r\n                  func1(arg.randomGet());\r\n               }\r\n            }\r\n            toc = get.utc();\r\n            if (typeof func2 == 'number') {\r\n               return toc - tic;\r\n            }\r\n            console.log('time1: ' + (toc - tic));\r\n            tic = get.utc();\r\n            for (var i = 0; i < iteration; i++) {\r\n               if (key2) {\r\n                  func1[key2](arg.randomGet());\r\n               }\r\n               else {\r\n                  func2(arg.randomGet());\r\n               }\r\n            }\r\n            toc = get.utc();\r\n            console.log('time2: ' + (toc - tic));\r\n         },\r\n         stringify: function (obj, level) {\r\n            level = level || 0;\r\n            var indent = '';\r\n            var str;\r\n            for (var i = 0; i < level; i++) {\r\n               indent += '    ';\r\n            }\r\n            if (get.objtype(obj) == 'object') {\r\n               str = '{\\n';\r\n               for (var i in obj) {\r\n                  if (/[^a-zA-Z]/.test(i)) {\r\n                     str += indent + '    \"' + i + '\":' + get.stringify(obj[i], level + 1) + ',\\n';\r\n                  }\r\n                  else {\r\n                     str += indent + '    ' + i + ':' + get.stringify(obj[i], level + 1) + ',\\n';\r\n                  }\r\n               }\r\n               str += indent + '}';\r\n               return str;\r\n            }\r\n            else {\r\n               if (typeof obj == 'function') {\r\n                  str = obj.toString();\r\n                  str = str.replace(/\\t/g, '    ');\r\n                  var i = str.lastIndexOf('\\n');\r\n                  var num = 0;\r\n                  for (var j = i + 1; j < str.length && str[j] == ' '; j++) {\r\n                     num++;\r\n                  }\r\n                  num = Math.floor(num / 4);\r\n                  for (i = 0; i < num - level; i++) {\r\n                     str = str.replace(/\\n    /g, '\\n');\r\n                  }\r\n               }\r\n               else {\r\n                  try {\r\n                     if (Array.isArray(obj) && obj.contains(Infinity)) {\r\n                        obj = obj.slice(0);\r\n                        var rand = get.id();\r\n                        for (var i = 0; i < obj.length; i++) {\r\n                           if (obj[i] === Infinity) {\r\n                              obj[i] = parseInt(rand);\r\n                           }\r\n                        }\r\n                        str = JSON.stringify(obj).replace(new RegExp(rand, 'g'), 'Infinity');\r\n                     }\r\n                     else {\r\n                        str = JSON.stringify(obj) || '';\r\n                     }\r\n                  }\r\n                  catch (e) {\r\n                     str = '';\r\n                  }\r\n               }\r\n               return str;\r\n            }\r\n         },\r\n         /**\r\n          * 浅拷贝(对象|数组)，要拷贝的对象如果是HTML元素，不做任何操作，返回原对象\r\n          * @param {any} obj 要拷贝的对象\r\n          * @returns {any}\r\n          */\r\n         copy: function (obj) {\r\n            if (get.objtype(obj) == 'object') {\r\n               var copy = {};\r\n               for (var i in obj) {\r\n                  copy[i] = get.copy(obj[i]);\r\n               }\r\n               return copy;\r\n            }\r\n            else if (Array.isArray(obj)) {\r\n               var copy = [];\r\n               for (var i = 0; i < obj.length; i++) {\r\n                  copy.push(get.copy(obj[i]));\r\n               }\r\n               return copy;\r\n            }\r\n            else {\r\n               return obj;\r\n            }\r\n         },\r\n         inpilefull: function (type) {\r\n            var list = [];\r\n            for (var i in lib.cardPile) {\r\n               for (var j = 0; j < lib.cardPile[i].length; j++) {\r\n                  var info = lib.cardPile[i][j];\r\n                  if (lib.inpile.contains(info[2]) && get.type(info[2]) == type) {\r\n                     list.push({\r\n                        name: info[2],\r\n                        suit: info[0],\r\n                        number: info[1],\r\n                        nature: info[3]\r\n                     });\r\n                  }\r\n               }\r\n            }\r\n            return list;\r\n         },\r\n         inpile: function (type, filter) {\r\n            var list = [];\r\n            if (filter == 'trick' || type == 'trick2') {\r\n               if (type == 'trick2') type = 'trick'\r\n               for (var i = 0; i < lib.inpile.length; i++) {\r\n                  if (typeof filter == 'function' && !filter(lib.inpile[i])) continue;\r\n                  if (get.type(lib.inpile[i], 'trick') == type) list.push(lib.inpile[i]);\r\n               }\r\n            }\r\n            else {\r\n               for (var i = 0; i < lib.inpile.length; i++) {\r\n                  if (typeof type == 'function') {\r\n                     if (type(lib.inpile[i])) {\r\n                        list.push(lib.inpile[i]);\r\n                     }\r\n                  }\r\n                  else {\r\n                     if (typeof filter == 'function' && !filter(lib.inpile[i])) continue;\r\n                     if (type.indexOf('equip') == 0 && type.length == 6) {\r\n                        if (get.subtype(lib.inpile[i]) == type) list.push(lib.inpile[i]);\r\n                     }\r\n                     else {\r\n                        if (get.type(lib.inpile[i]) == type) list.push(lib.inpile[i]);\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n            return list;\r\n         },\r\n         inpile2: function (type) {\r\n            return get.inpile(type, 'trick');\r\n         },\r\n         typeCard: function (type, filter) {\r\n            var list = [];\r\n            for (var i in lib.card) {\r\n               if (lib.card[i].mode && lib.card[i].mode.contains(get.mode()) == false) continue;\r\n               // if(lib.card[i].vanish||lib.card[i].destroy) continue;\r\n               if (lib.card[i].destroy) continue;\r\n               if (typeof filter == 'function' && !filter(i)) continue;\r\n               if (lib.config.bannedcards.contains(i)) continue;\r\n               if (!lib.translate[i + '_info']) continue;\r\n               if ((type.indexOf('equip') == 0 && type.length == 6) ||\r\n                  (type.indexOf('hslingjian') == 0 && type.length == 11) ||\r\n                  (type.indexOf('spell_') == 0)) {\r\n                  if (get.subtype(i) == type) list.push(i);\r\n               }\r\n               else {\r\n                  if (get.type(i) == type) list.push(i);\r\n               }\r\n            }\r\n            return list;\r\n         },\r\n         libCard: function (filter) {\r\n            var list = [];\r\n            for (var i in lib.card) {\r\n               if (lib.card[i].mode && lib.card[i].mode.contains(get.mode()) == false) continue;\r\n               // if(lib.card[i].vanish||lib.card[i].destroy) continue;\r\n               if (lib.card[i].destroy) continue;\r\n               if (lib.config.bannedcards.contains(i)) continue;\r\n               if (!lib.translate[i + '_info']) continue;\r\n               if (filter(lib.card[i], i)) {\r\n                  list.push(i);\r\n               }\r\n            }\r\n            return list;\r\n         },\r\n         ip: function () {\r\n            if (false) {}\r\n            var interfaces = (__webpack_require__(/*! os */ \"os\").networkInterfaces)();\r\n            for (var devName in interfaces) {\r\n               var iface = interfaces[devName];\r\n               for (var i = 0; i < iface.length; i++) {\r\n                  var alias = iface[i];\r\n                  if (alias.family === 'IPv4' && alias.address !== '127.0.0.1' && !alias.internal) {\r\n                     return alias.address;\r\n                  }\r\n               }\r\n            }\r\n         },\r\n         modetrans: function (config, server) {\r\n            if (config.mode == 'doudizhu') {\r\n               switch (config.doudizhu_mode) {\r\n                  case 'kaihei': return '开黑斗地主';\r\n                  case 'huanle': return '欢乐斗地主';\r\n                  case 'binglin': return '兵临城下';\r\n                  case 'online': return '智斗三国';\r\n                  default: return '休闲' + (config.double_character ? '双将' : '') + '斗地主';\r\n               }\r\n            }\r\n            if (config.mode == 'longlaoguan') return '龙牢关';\r\n            if (config.mode == 'versus') {\r\n               switch (config.versus_mode) {\r\n                  case '1v1': return '单人对决';\r\n                  case '2v2': return '欢乐成双';\r\n                  case '3v3': return '血战到底';\r\n                  case '4v4': return '四人对决';\r\n                  case 'guandu': return '官渡之战';\r\n               }\r\n            }\r\n            else if (config.mode == 'single') {\r\n               switch (config.single_mode) {\r\n                  case 'normal': return '新1v1';\r\n                  case 'changban': return '血战长坂坡';\r\n                  case 'dianjiang': return '点将单挑';\r\n               }\r\n            }\r\n            else if (config.mode == 'identity') {\r\n               switch (config.identity_mode) {\r\n                  case 'purple': return '三对三对二';\r\n                  case 'zhong': return (config.double_character ? '双将' : '') + '忠胆英杰';\r\n                  default: return get.cnNumber(parseInt(config.number)) + '人' + (config.double_character ? '双将' : '') + '身份';\r\n               }\r\n            }\r\n            else if (config.mode == 'guozhan' && config.guozhan_mode != 'normal') {\r\n               switch (config.guozhan_mode) {\r\n                  case 'yingbian': return '应变国战';\r\n                  case 'old': return '怀旧国战';\r\n               }\r\n            }\r\n            else {\r\n               if (server) {\r\n                  return get.translation(config.mode) + '模式';\r\n               }\r\n               else {\r\n                  return get.cnNumber(parseInt(config.number)) + '人' + get.translation(config.mode);\r\n               }\r\n            }\r\n         },\r\n         charactersOL: function (func) {\r\n            var list = [];\r\n            var libCharacter = {};\r\n            for (var i = 0; i < lib.configOL.characterPack.length; i++) {\r\n               var pack = lib.characterPack[lib.configOL.characterPack[i]];\r\n               for (var j in pack) {\r\n                  if (typeof func == 'function' && func(j)) continue;\r\n                  if (lib.connectBanned.contains(j)) continue;\r\n                  if (lib.configOL.protect_beginner && get.is.banForBeginner(i)) return true;\r\n                  if (lib.character[j]) libCharacter[j] = pack[j];\r\n               }\r\n            }\r\n            for (i in libCharacter) {\r\n               if (lib.filter.characterDisabled(i, libCharacter)) continue;\r\n               list.push(i);\r\n            }\r\n            return list;\r\n         },\r\n         trimip: function (str) {\r\n            var len = str.length - 5;\r\n            if (str.lastIndexOf(':8080') == len) {\r\n               str = str.slice(0, len);\r\n            }\r\n            return str;\r\n         },\r\n         /**\r\n          * 返回游戏的当前模式\r\n          * @returns {!string}\r\n          */\r\n         mode: function () {\r\n            if (_status.connectMode) {\r\n               return lib.configOL.mode;\r\n            }\r\n            else {\r\n               return lib.config.mode;\r\n            }\r\n         },\r\n         idDialog: function (id) {\r\n            for (var i = 0; i < ui.dialogs.length; i++) {\r\n               if (ui.dialogs[i].videoId == id) {\r\n                  return ui.dialogs[i];\r\n               }\r\n            }\r\n            return null;\r\n         },\r\n         arenaState: function () {\r\n            var state = {\r\n               number: ui.arena.dataset.number,\r\n               players: {},\r\n               mode: _status.mode,\r\n               dying: _status.dying,\r\n               servermode: window.isNonameServer,\r\n               roomId: game.roomId,\r\n               over: _status.over,\r\n               inpile: lib.inpile,\r\n               cardtag: _status.cardtag,\r\n            };\r\n            for (var i in lib.playerOL) {\r\n               state.players[i] = lib.playerOL[i].getState();\r\n            }\r\n            return state;\r\n         },\r\n         skillState: function (player) {\r\n            var skills = {\r\n               global: lib.skill.global\r\n            };\r\n            var skillinfo = {};\r\n            for (var i in lib.playerOL) {\r\n               skills[i] = {\r\n                  skills: lib.playerOL[i].skills,\r\n                  hiddenSkills: lib.playerOL[i].hiddenSkills,\r\n                  additionalSkills: lib.playerOL[i].additionalSkills,\r\n                  disabledSkills: lib.playerOL[i].disabledSkills,\r\n                  tempSkills: lib.playerOL[i].tempSkills,\r\n                  storage: lib.playerOL[i].storage,\r\n               }\r\n            }\r\n            for (var i in lib.skill) {\r\n               if (lib.skill[i].chooseButton && lib.skill[i].enable) {\r\n                  skillinfo[i] = lib.skill[i].chooseButton;\r\n               }\r\n            }\r\n            skills.skillinfo = skillinfo;\r\n            if (player) {\r\n               skills.stat = player.getStat();\r\n            }\r\n            return skills;\r\n         },\r\n         /**\r\n          * 通过随机数生成Id\r\n          * @returns {!number} ID\r\n          */\r\n         id: function () {\r\n            return (Math.floor(1000000 + 9000000 * Math.random())).toString() + (10 + lib.status.globalId++);\r\n         },\r\n         zhu: function (player, skill, unseen) {\r\n            if (typeof player == 'string') {\r\n               skill = player;\r\n               player = null;\r\n            }\r\n            var mode = get.mode();\r\n            if (mode == 'identity') {\r\n               if (_status.mode == 'purple') {\r\n                  if (!player) return null;\r\n                  var zhu = game[player.identity.slice(0, 1) + 'Zhu'];\r\n                  if (!zhu) return null;\r\n                  if (skill && !zhu.hasSkill(skill)) return null;\r\n                  return zhu;\r\n               }\r\n               if (!game.zhu) return null;\r\n               if (skill && !game.zhu.hasSkill(skill)) return null;\r\n               if (game.zhu.isZhu) return game.zhu;\r\n            }\r\n            else if (mode == 'versus' && (_status.mode == 'four' || _status.mode == 'guandu')) {\r\n               for (var i = 0; i < game.players.length; i++) {\r\n                  if (game.players[i].isZhu) {\r\n                     if (skill && !(game.players[i].hasSkill(skill))) continue;\r\n                     if (!player) return game.players[i];\r\n                     if (player.side == game.players[i].side) {\r\n                        return game.players[i];\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n            else if (mode == 'guozhan') {\r\n               for (var i = 0; i < game.players.length; i++) {\r\n                  if (get.is.jun(game.players[i]) && !game.players[i].isUnseen()) {\r\n                     if (skill && !game.players[i].hasSkill(skill)) continue;\r\n                     if (!player) return game.players[i];\r\n                     if (player.identity == game.players[i].identity) {\r\n                        return game.players[i];\r\n                     }\r\n                     else if (unseen && player._group == game.players[i].identity) {\r\n                        return game.players[i];\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n            return null;\r\n         },\r\n         config: function (item, mode) {\r\n            mode = mode || lib.config.mode;\r\n            if (!lib.config.mode_config[mode]) return;\r\n            return lib.config.mode_config[mode][item];\r\n         },\r\n         coinCoeff: function (list) {\r\n            var num = 0;\r\n            for (var i = 0; i < list.length; i++) {\r\n               var rank = get.rank(list[i]);\r\n               switch (rank) {\r\n                  case 'sp': return 0.1;\r\n                  case 's': num += 0.4; break;\r\n                  case 'ap': num += 0.6; break;\r\n                  case 'a': num += 0.8; break;\r\n                  case 'am': num += 0.95; break;\r\n                  case 'bp': num += 1.05; break;\r\n                  case 'b': num += 1.2; break;\r\n                  case 'bm': num += 1.4; break;\r\n                  case 'c': num += 1.6; break;\r\n                  case 'd': num += 1.8; break;\r\n               }\r\n            }\r\n            return num / list.length;\r\n         },\r\n         rank: function (name, num) {\r\n            if (typeof name == 'object' && name.name) {\r\n               name = name.name;\r\n            }\r\n            if (num == true) num = 9;\r\n            if (typeof num != 'number') num = false;\r\n            if (name == _status.lord) return num ? Math.round(7 * (num - 1) / 8 + 1) : 'ap';\r\n            var rank = lib.rank;\r\n            if (lib.characterPack.clubs[name] || lib.characterPack.vtuber[name] || lib.characterPack.yuzu[name] || lib.characterPack.hololive[name] || lib.characterPack.nijisanji[name]) {\r\n               var skills;\r\n               if (lib.character[name]) {\r\n                  skills = lib.character[name][3];\r\n               }\r\n               else {\r\n                  var tmpinfo = get.character(name);\r\n                  if (tmpinfo) {\r\n                     skills = tmpinfo[3];\r\n                  }\r\n                  else {\r\n                     skills = [];\r\n                  }\r\n               }\r\n               for (var i = 0; i < skills.length; i++) {\r\n                  if (skills[i].alter && !lib.config.vintageSkills.contains(skills[i])) {\r\n                     name = lib.rank.a[0]; break;\r\n                  }\r\n               }\r\n            }\r\n            if (rank.s.contains(name)) return num ? Math.round(8 * (num - 1) / 8 + 1) : 's';\r\n            if (rank.ap.contains(name)) return num ? Math.round(7 * (num - 1) / 8 + 1) : 'ap';\r\n            if (rank.a.contains(name)) return num ? Math.round(6 * (num - 1) / 8 + 1) : 'a';\r\n            if (rank.am.contains(name)) return num ? Math.round(5 * (num - 1) / 8 + 1) : 'am';\r\n            if (rank.bp.contains(name)) return num ? Math.round(4 * (num - 1) / 8 + 1) : 'bp';\r\n            if (rank.b.contains(name)) return num ? Math.round(3 * (num - 1) / 8 + 1) : 'b';\r\n            if (rank.bm.contains(name)) return num ? Math.round(2 * (num - 1) / 8 + 1) : 'bm';\r\n            if (rank.c.contains(name)) return num ? Math.round(1 * (num - 1) / 8 + 1) : 'c';\r\n            if (rank.d.contains(name)) return num ? Math.round(0 * (num - 1) / 8 + 1) : 'd';\r\n            if (lib.character[name] && lib.character[name][4]) {\r\n               if (lib.character[name][4].contains('boss') ||\r\n                  lib.character[name][4].contains('bossallowed') ||\r\n                  lib.character[name][4].contains('hiddenboss')) {\r\n                  return num ? Math.round(9 * (num - 1) / 8 + 1) : 'sp';\r\n               }\r\n            }\r\n            return num ? Math.round(9 * (num - 1) / 8 + 1) : 'x';\r\n         },\r\n         skillRank: function (skill, type, grouped) {\r\n            var info = lib.skill[skill];\r\n            var player = _status.event.skillRankPlayer || _status.event.player;\r\n            if (!info) return 0;\r\n            if (info.ai) {\r\n               if (info.ai.halfneg) return 0;\r\n               if (typeof info.ai.combo == 'string' && player && !player.hasSkill(info.ai.combo)) {\r\n                  return 0;\r\n               }\r\n               if (info.ai.neg) return -1;\r\n            }\r\n            var num = 1;\r\n            var threaten = 1;\r\n            if (info.ai && info.ai.threaten) {\r\n               if (typeof info.ai.threaten == 'number') {\r\n                  threaten = info.ai.threaten;\r\n               }\r\n               else if (typeof info.ai.threaten == 'function' && player) {\r\n                  threaten = info.ai.threaten(player, player);\r\n               }\r\n            }\r\n            if (type == 'in') {\r\n               if (info.enable == 'phaseUse') num += 0.5;\r\n               if (info.trigger && info.trigger.player) {\r\n                  var list = Array.isArray(info.trigger.player) ? info.trigger.player : [info.trigger.player];\r\n                  var add = false;\r\n                  for (var i of list) {\r\n                     for (var j of lib.phaseName) {\r\n                        if (i.indexOf[j] == 0) {\r\n                           num += 0.5;\r\n                           add = true;\r\n                           break;\r\n                        }\r\n                     }\r\n                     if (add) break;\r\n                  }\r\n               }\r\n               if (info.trigger && ((typeof info.trigger.player == 'string' && info.trigger.player.indexOf('use') == 0) || info.trigger.source)) {\r\n                  num += 0.3;\r\n               }\r\n               if (num > 1 && threaten > 1) {\r\n                  num += Math.sqrt(threaten) - 1;\r\n               }\r\n            }\r\n            else if (type == 'out') {\r\n               if (threaten < 1) {\r\n                  num = 1 / Math.sqrt(threaten);\r\n               }\r\n               if (info.trigger && (info.trigger.global || info.trigger.target || (typeof info.trigger.player == 'string' &&\r\n                  (info.trigger.player.indexOf('damage') == 0 || info.trigger.player.indexOf('lose') == 0)))) num += 0.1;\r\n               if (info.ai) {\r\n                  if (info.ai.maixie || info.ai.maixie_hp || info.ai.maixie_defend) {\r\n                     num += 0.5;\r\n                  }\r\n                  if (info.ai.nolose || info.ai.noh || info.ai.noe || info.ai.nodiscard) {\r\n                     num += 0.3;\r\n                  }\r\n               }\r\n            }\r\n            if (!grouped) {\r\n               var groups = game.expandSkills([skill]);\r\n               groups.remove(skill);\r\n               var ggt = [];\r\n               for (var i = 0; i < groups.length; i++) {\r\n                  var gi = get.skillRank(groups[i], type, true);\r\n                  if (gi < 0) {\r\n                     num -= 0.5;\r\n                  }\r\n                  else if (gi > 1) {\r\n                     ggt.push(gi);\r\n                  }\r\n               }\r\n               if (ggt.length) {\r\n                  num += Math.max.apply(this, ggt) - 1 + ggt.length / 20;\r\n               }\r\n            }\r\n            return num;\r\n         },\r\n         targetsInfo: function (targets) {\r\n            var info = [];\r\n            for (var i = 0; i < targets.length; i++) {\r\n               info.push(targets[i].dataset.position);\r\n            }\r\n            return info;\r\n         },\r\n         infoTargets: function (info) {\r\n            var targets = [];\r\n            for (var i = 0; i < info.length; i++) {\r\n               targets.push(game.playerMap[info[i]]);\r\n            }\r\n            return targets;\r\n         },\r\n         cardInfo: function (card) {\r\n            if (card.specialEffects) return [card.suit, card.number, card.name, card.nature, card.tags, card.specialEffects];\r\n            else return [card.suit, card.number, card.name, card.nature, card.tags];\r\n         },\r\n         cardsInfo: function (cards) {\r\n            var info = [];\r\n            for (var i = 0; i < cards.length; i++) {\r\n               info.push(get.cardInfo(cards[i]));\r\n            }\r\n            return info;\r\n         },\r\n         infoCard: function (info) {\r\n            var card = ui.create.card();\r\n            if (info[0]) {\r\n               card.init(info);\r\n            }\r\n            return card;\r\n         },\r\n         infoCards: function (info) {\r\n            var cards = [];\r\n            for (var i = 0; i < info.length; i++) {\r\n               cards.push(get.infoCard(info[i]));\r\n            }\r\n            return cards;\r\n         },\r\n         cardInfoOL: function (card) {\r\n            return '_noname_card:' + JSON.stringify([card.cardid, card.suit, card.number, card.name, card.nature, card.tags, card.specialEffects]);\r\n         },\r\n         infoCardOL: function (info) {\r\n            if (!lib.cardOL) return info;\r\n            var card;\r\n            try {\r\n               var info = JSON.parse(info.slice(13));\r\n               var id = info.shift();\r\n               if (!id) {\r\n                  card = ui.create.card();\r\n                  if (info && info[2]) card.init(info);\r\n               }\r\n               else if (lib.cardOL[id]) {\r\n                  if (lib.cardOL[id].name != info[2]) {\r\n                     if (info && info[2]) lib.cardOL[id].init(info);\r\n                  }\r\n                  if (lib.cardOL[id].specialEffects != info[5]) {\r\n                     if (info && info[2]) lib.cardOL[id].init(info);\r\n                  }\r\n                  card = lib.cardOL[id];\r\n               }\r\n               else if (game.online) {\r\n                  card = ui.create.card();\r\n                  card.cardid = id;\r\n                  if (info && info[2]) card.init(info);\r\n                  lib.cardOL[id] = card;\r\n               }\r\n            }\r\n            catch (e) {\r\n               console.log(e);\r\n            }\r\n            return card || info;\r\n         },\r\n         cardsInfoOL: function (cards) {\r\n            var info = [];\r\n            for (var i = 0; i < cards.length; i++) {\r\n               info.push(get.cardInfoOL(cards[i]));\r\n            }\r\n            return info;\r\n         },\r\n         infoCardsOL: function (info) {\r\n            var cards = [];\r\n            for (var i = 0; i < info.length; i++) {\r\n               cards.push(get.infoCardOL(info[i]));\r\n            }\r\n            return cards;\r\n         },\r\n         playerInfoOL: function (player) {\r\n            return '_noname_player:' + player.playerid;\r\n         },\r\n         infoPlayerOL: function (info) {\r\n            if (!lib.playerOL) return info\r\n            return lib.playerOL[info.slice(15)] || info;\r\n         },\r\n         playersInfoOL: function (players) {\r\n            var info = [];\r\n            for (var i = 0; i < players.length; i++) {\r\n               info.push(get.playerInfoOL(players[i]));\r\n            }\r\n            return info;\r\n         },\r\n         infoPlayersOL: function (info) {\r\n            var players = [];\r\n            for (var i = 0; i < info.length; i++) {\r\n               players.push(get.infoPlayerOL(info[i]));\r\n            }\r\n            return players;\r\n         },\r\n         funcInfoOL: function (func) {\r\n            if (typeof func == 'function') {\r\n               if (func._filter_args) {\r\n                  return `_noname_func:${JSON.stringify(get.stringifiedResult(func._filter_args, 3))}`;\r\n               }\r\n               let str = func.toString()\r\n               return `_noname_func:${str.slice(str.indexOf('('))}`;\r\n            }\r\n            return '';\r\n         },\r\n         infoFuncOL: function (info) {\r\n            var func;\r\n            try {\r\n               eval(`func=(function${info.slice(13)});`);\r\n            }\r\n            catch (e) {\r\n               return function () { };\r\n            }\r\n            if (Array.isArray(func)) {\r\n               func = get.filter.apply(this, get.parsedResult(func));\r\n            }\r\n            return func;\r\n         },\r\n         eventInfoOL: function (item, level) {\r\n            if (Object.prototype.toString.call(item) == '[object Object]') {\r\n               var item2 = {};\r\n               for (var i in item) {\r\n                  if (i == '_trigger') {\r\n                     if (level !== false) item2[i] = get.eventInfoOL(item[i], false);\r\n                  }\r\n                  else if (lib.element.event[i] || i == 'content' || get.itemtype(item[i]) == 'event') continue;\r\n                  else item2[i] = get.stringifiedResult(item[i], level - 1);\r\n               }\r\n               return '_noname_event:' + JSON.stringify(item2);\r\n            }\r\n            else {\r\n               return '';\r\n            }\r\n         },\r\n         infoEventOL: function (item) {\r\n            var evt;\r\n            try {\r\n               evt = JSON.parse(item.slice(14));\r\n               for (var i in evt) {\r\n                  evt[i] = get.parsedResult(evt[i]);\r\n               }\r\n               for (var i in lib.element.event) evt[i] = lib.element.event[i];\r\n            }\r\n            catch (e) {\r\n               console.log(e);\r\n            }\r\n            return evt || item;\r\n         },\r\n         stringifiedResult: function (item, level) {\r\n            if (!item) return item;\r\n            if (typeof item == 'function') {\r\n               return get.funcInfoOL(item);\r\n            }\r\n            else if (typeof item == 'object') {\r\n               switch (get.itemtype(item)) {\r\n                  case 'card': return get.cardInfoOL(item);\r\n                  case 'cards': return get.cardsInfoOL(item);\r\n                  case 'player': return get.playerInfoOL(item);\r\n                  case 'players': return get.playersInfoOL(item);\r\n                  case 'event': return get.eventInfoOL(item);\r\n                  default:\r\n                     if (typeof level != 'number') {\r\n                        level = 5;\r\n                     }\r\n                     if (Array.isArray(item)) {\r\n                        if (level == 0) {\r\n                           return [];\r\n                        }\r\n                        var item2 = [];\r\n                        for (var i = 0; i < item.length; i++) {\r\n                           item2.push(get.stringifiedResult(item[i], level - 1));\r\n                        }\r\n                        return item2;\r\n                     }\r\n                     else if (Object.prototype.toString.call(item) == '[object Object]') {\r\n                        if (level == 0) {\r\n                           return {};\r\n                        }\r\n                        var item2 = {};\r\n                        for (var i in item) {\r\n                           item2[i] = get.stringifiedResult(item[i], level - 1);\r\n                        }\r\n                        return item2;\r\n                     }\r\n                     else {\r\n                        return {};\r\n                     }\r\n               }\r\n            }\r\n            else if (item === Infinity) {\r\n               return '_noname_infinity';\r\n            }\r\n            else {\r\n               return item;\r\n            }\r\n         },\r\n         parsedResult: function (item) {\r\n            if (!item) return item;\r\n            if (typeof item == 'string') {\r\n               if (item.indexOf('_noname_func:') == 0) {\r\n                  return get.infoFuncOL(item);\r\n               }\r\n               else if (item.indexOf('_noname_card:') == 0) {\r\n                  return get.infoCardOL(item);\r\n               }\r\n               else if (item.indexOf('_noname_player:') == 0) {\r\n                  return get.infoPlayerOL(item);\r\n               }\r\n               else if (item.indexOf('_noname_event:') == 0) {\r\n                  return get.infoEventOL(item);\r\n               }\r\n               else if (item == '_noname_infinity') {\r\n                  return Infinity;\r\n               }\r\n               else {\r\n                  return item;\r\n               }\r\n            }\r\n            else if (Array.isArray(item)) {\r\n               var item2 = [];\r\n               for (var i = 0; i < item.length; i++) {\r\n                  item2.push(get.parsedResult(item[i]));\r\n               }\r\n               return item2;\r\n            }\r\n            else if (typeof item == 'object') {\r\n               var item2 = {};\r\n               for (var i in item) {\r\n                  item2[i] = get.parsedResult(item[i]);\r\n               }\r\n               return item2;\r\n            }\r\n            else {\r\n               return item;\r\n            }\r\n         },\r\n         /**\r\n          * 字符串垂直化\r\n          * 实际是通过加`<br>`标签实现垂直化\r\n          * @function\r\n          * @param {?string} 原字符串\r\n          * @param {?boolean} sp 'SP'字符是否连接，如果为true，表示'S'和'P'在同一行，否则分割\r\n          * @returns {!string} 垂直化后的字符串\r\n          * @example\r\n          * get.verticalStr('Hello sP')\r\n          * //result:\r\n          * //\"H<br>E<br>L<br>L<br>O<br> <br>S<br>P\"\r\n          * get.verticalStr('Hello sP', true)\r\n          * //result:\r\n          * //\"H<br>E<br>L<br>L<br>O<br> <br>SP\"\r\n          * get.verticalStr('`He`llo sP')\r\n          * //result:\r\n          * //\"HEL<br>L<br>O<br> <br>S<br>P\"\r\n          */\r\n         verticalStr: function (str, sp) {\r\n            if (typeof str != 'string') return '';\r\n            str = str.toUpperCase();\r\n            var str2 = '';\r\n            var nobreak = false;\r\n            for (var i = 0; i < str.length; i++) {\r\n               if (str[i] == '`') {\r\n                  nobreak = !nobreak; continue;\r\n               }\r\n               if (str.slice(i, i + 4) == '<BR>') { i += 3; continue; }\r\n               str2 += str[i];\r\n               if (nobreak) continue;\r\n               if (sp && str[i] == 'S' && str[i + 1] == 'P') continue;\r\n               if (/[0-9]/.test(str[i]) && /[0-9]/.test(str[i + 1])) continue;\r\n               if (i < str.length - 1) {\r\n                  str2 += '<br>';\r\n               }\r\n            }\r\n            return str2;\r\n         },\r\n         numStr: function (num, method) {\r\n            if (num == Infinity) {\r\n               if (method == 'card') return get.selectableCards().length + ui.selected.cards.length;\r\n               if (method == 'target') return get.selectableTargets().length + ui.selected.targets.length;\r\n               return '∞';\r\n            }\r\n            return num.toString();\r\n         },\r\n         rawName: function (str) {\r\n            if (lib.translate[str + '_ab']) return lib.translate[str + '_ab'];\r\n            var str2 = lib.translate[str];\r\n            if (!str2) return '';\r\n            if (str2.indexOf('SP') == 0) {\r\n               str2 = str2.slice(2);\r\n            }\r\n            else if (str2.indexOf('TW') == 0) {\r\n               str2 = str2.slice(2);\r\n            }\r\n            else if (str2.indexOf('OL') == 0) {\r\n               str2 = str2.slice(2);\r\n            }\r\n            else if (str2.indexOf('JSP') == 0) {\r\n               str2 = str2.slice(3);\r\n            }\r\n            else if (str2.indexOf('☆SP') == 0) {\r\n               str2 = str2.slice(3);\r\n            }\r\n            else if (str2.indexOf('手杀') == 0) {\r\n               str2 = str2.slice(2);\r\n            }\r\n            else if (str2.indexOf('界') == 0 && lib.characterPack.refresh && lib.characterPack.refresh[str]) {\r\n               str2 = str2.slice(1);\r\n            }\r\n            else if (str2.indexOf('旧') == 0 && (lib.characterPack.old || lib.characterPack.mobile) && (lib.characterPack.old[str] || lib.characterPack.mobile[str])) {\r\n               str2 = str2.slice(1);\r\n            }\r\n            else if (str2.indexOf('新·') == 0 && str.indexOf('re_') == 0) {\r\n               str2 = str2.slice(2);\r\n            }\r\n            else if (str2.indexOf('新') == 0 && (str.indexOf('re_') == 0 || str.indexOf('new_') == 0)) {\r\n               str2 = str2.slice(1);\r\n            }\r\n            return str2;\r\n         },\r\n         rawName2: function (str) {\r\n            if (lib.translate[str + '_ab']) return lib.translate[str + '_ab'];\r\n            var str2 = lib.translate[str];\r\n            if (!str2) return '';\r\n            if (str2.indexOf('SP') == 0) {\r\n               str2 = str2.slice(2);\r\n            }\r\n            else if (str2.indexOf('TW') == 0) {\r\n               str2 = str2.slice(2);\r\n            }\r\n            else if (str2.indexOf('OL') == 0) {\r\n               str2 = str2.slice(2);\r\n            }\r\n            else if (str2.indexOf('JSP') == 0) {\r\n               str2 = str2.slice(3);\r\n            }\r\n            else if (str2.indexOf('☆SP') == 0) {\r\n               str2 = str2.slice(3);\r\n            }\r\n            else if (str2.indexOf('手杀') == 0) {\r\n               str2 = str2.slice(2);\r\n            }\r\n            else if (str2.indexOf('新·') == 0 && str.indexOf('re_') == 0) {\r\n               str2 = str2.slice(2);\r\n            }\r\n            return str2;\r\n         },\r\n         slimName: function (str) {\r\n            var str2 = lib.translate[str];\r\n            if (lib.translate[str + '_ab']) str2 = lib.translate[str + '_ab'];\r\n            if (!str2) return '';\r\n            if (str2.indexOf('SP') == 0) {\r\n               str2 = str2.slice(2);\r\n            }\r\n            else if (str2.indexOf('TW') == 0) {\r\n               str2 = str2.slice(2);\r\n            }\r\n            else if (str2.indexOf('OL') == 0) {\r\n               str2 = str2.slice(2);\r\n            }\r\n            else if (str2.indexOf('JSP') == 0) {\r\n               str2 = str2.slice(3);\r\n            }\r\n            else if (str2.indexOf('☆SP') == 0) {\r\n               str2 = str2.slice(3);\r\n            }\r\n            else if (str2.indexOf('手杀') == 0) {\r\n               str2 = str2.slice(2);\r\n            }\r\n            else if (str2.indexOf('新·') == 0 && str.indexOf('re_') == 0) {\r\n               str2 = str2.slice(2);\r\n            }\r\n            else if (str2.indexOf('皇·') == 0 && str.indexOf('sp_') == 0) {\r\n               str2 = str2.replace('皇·', '皇');\r\n            }\r\n            else if (str2.indexOf('海·') == 0 && str.indexOf('sea_') == 0) {\r\n               str2 = str2.replace('海·', '海');\r\n            }\r\n            else if (str2.indexOf('国战') == 0 && lib.config.mode == 'guozhan' && str.indexOf('gz_') == 0) {\r\n               str2 = str2.slice(2);\r\n            }\r\n            return get.verticalStr(str2, true);\r\n         },\r\n         time: function () {\r\n            if (lib.status.dateDelaying) {\r\n               return lib.getUTC(lib.status.dateDelaying) - lib.getUTC(lib.status.date) - lib.status.dateDelayed;\r\n            }\r\n            else {\r\n               return lib.getUTC(new Date()) - lib.getUTC(lib.status.date) - lib.status.dateDelayed;\r\n            }\r\n         },\r\n         /**\r\n          * 返回当前的datetime(`new Date().getTime()`)\r\n          * @returns {number} datetime\r\n          */\r\n         utc: function () {\r\n            return (new Date()).getTime();\r\n         },\r\n         evtDistance: function (e1, e2) {\r\n            var dx = (e1.clientX - e2.clientX) / game.documentZoom;\r\n            var dy = (e1.clientY - e2.clientY) / game.documentZoom;\r\n            return Math.sqrt(dx * dx + dy * dy);\r\n         },\r\n         xyDistance: function (from, to) {\r\n            return Math.sqrt((from[0] - to[0]) * (from[0] - to[0]) + (from[1] - to[1]) * (from[1] - to[1]));\r\n         },\r\n         /**\r\n          * 判断对象物品类型(字符串(区域名|属性名)，玩家及玩家组，卡牌及卡牌组，选择范围，元素坐标，按钮，弹窗，事件)\r\n          * @param {Object} obj 要判断物品类型的对象\r\n          * @returns {?string} 对象的物品类型\r\n          */\r\n         itemtype: function (obj) {\r\n            var i, j;\r\n            if (typeof obj == 'string') {\r\n               if (obj.length <= 4) {\r\n                  var bool = true;\r\n                  for (i = 0; i < obj.length; i++) {\r\n                     if (/h|e|j|s/.test(obj[i]) == false) {\r\n                        bool = false; break;\r\n                     }\r\n                  }\r\n                  if (bool) return 'position';\r\n               }\r\n               if (lib.nature.contains(obj)) return 'nature';\r\n            }\r\n            if (Array.isArray(obj) && obj.length) {\r\n               var isPlayers = true;\r\n               for (i = 0; i < obj.length; i++) {\r\n                  if (get.itemtype(obj[i]) != 'player') { isPlayers = false; break; }\r\n               }\r\n               if (isPlayers) return 'players';\r\n\r\n               var isCards = true;\r\n               for (i = 0; i < obj.length; i++) {\r\n                  if (get.itemtype(obj[i]) != 'card') { isCards = false; break; }\r\n               }\r\n               if (isCards) return 'cards';\r\n\r\n               if (obj.length == 2) {\r\n                  if (typeof obj[0] == 'number' && typeof obj[1] == 'number') {\r\n                     if (obj[0] <= obj[1] || obj[1] == -1) return 'select';\r\n                  }\r\n               }\r\n\r\n               if (obj.length == 4) {\r\n                  var isPosition = true;\r\n                  for (i = 0; i < obj.length; i++) {\r\n                     if (typeof obj[i] != 'number') { isPosition = false; break; }\r\n                  }\r\n                  if (isPosition) return 'divposition';\r\n               }\r\n            }\r\n            if (get.objtype(obj) == 'div') {\r\n               if (obj.classList.contains('button')) return 'button';\r\n               if (obj.classList.contains('card')) return 'card';\r\n               if (obj.classList.contains('player')) return 'player';\r\n               if (obj.classList.contains('dialog')) return 'dialog';\r\n            }\r\n            if (get.is.object(obj)) {\r\n               if (obj.isMine == lib.element.event.isMine) return 'event';\r\n            }\r\n         },\r\n         equipNum: function (card) {\r\n            if (get.type(card) == 'equip') {\r\n               return parseInt(get.subtype(card)[5]);\r\n            }\r\n            return 0;\r\n         },\r\n         /**\r\n          * 判断对象类型(数组，Object对象，Div元素，Table元素，TableRow元素，TableCell元素，Body元素)\r\n          * @param {Object} obj 要判断类型的对象\r\n          * @returns {?string} 对象的类型\r\n          */\r\n         objtype: function (obj) {\r\n            if (Object.prototype.toString.call(obj) === '[object Array]') return 'array';\r\n            if (Object.prototype.toString.call(obj) === '[object Object]') return 'object';\r\n            if (Object.prototype.toString.call(obj) === '[object HTMLDivElement]') return 'div';\r\n            if (Object.prototype.toString.call(obj) === '[object HTMLTableElement]') return 'table';\r\n            if (Object.prototype.toString.call(obj) === '[object HTMLTableRowElement]') return 'tr';\r\n            if (Object.prototype.toString.call(obj) === '[object HTMLTableCellElement]') return 'td';\r\n            if (Object.prototype.toString.call(obj) === '[object HTMLBodyElement]') return 'td';\r\n         },\r\n         type: function (obj, method, player) {\r\n            if (typeof obj == 'string') obj = { name: obj };\r\n            if (typeof obj != 'object') return;\r\n            var name = get.name(obj, player);\r\n            if (!lib.card[name]) return;\r\n            if (method == 'trick' && lib.card[name].type == 'delay') return 'trick';\r\n            return lib.card[name].type;\r\n         },\r\n         type2: function (card, player) {\r\n            return get.type(card, 'trick', player);\r\n         },\r\n         //新增函数\r\n         type3: function (cards, method, player) {\r\n            if (get.itemtype(cards) != 'cards') return;\r\n            var types = [];\r\n            for (let i of cards) {\r\n               types.add(get.type(i, method, player));\r\n            }\r\n            return types;\r\n         },\r\n         subtype: function (obj) {\r\n            if (typeof obj == 'string') obj = { name: obj };\r\n            if (typeof obj != 'object') return;\r\n            if (!lib.card[obj.name]) return;\r\n            return lib.card[obj.name].subtype;\r\n         },\r\n         equiptype: function (card, player) {\r\n            var subtype = get.subtype(card, player);\r\n            if (subtype.indexOf('equip') == 0) return parseInt(subtype[5]);\r\n            return 0;\r\n         },\r\n         /**\r\n          * 返回手牌牌名\r\n          * @name get.name\r\n          * @function\r\n          * @param {!GameCores.GameObjects.Card} card 卡牌对象\r\n          * @param {boolean} [isCheckMod=true] 是否检测被动技，如果为true，手牌持有者有被动技**cardname**改变牌名，则返回改变后的牌名；如果为false，直接返回牌名\r\n          * @returns {?string} 牌名\r\n          */\r\n         /**\r\n          * 返回游戏牌对象的牌名\r\n          * @name get.name\r\n          * @function\r\n          * @variation 2\r\n          * @param {!GameCores.GameObjects.Card} card 卡牌对象\r\n          * @param {(GameCores.GameObjects.Player|false)} player 如果为角色对象，当角色有被动技**cardname**改变牌名，返回改变后的牌名；如果为false，直接返回牌名\r\n          * @returns {string} 牌名\r\n          */\r\n         name: function (card, player) {\r\n            if (get.itemtype(player) == 'player' || (player !== false && get.position(card) == 'h')) {\r\n               var owner = player || get.owner(card);\r\n               if (owner) {\r\n                  return game.checkMod(card, owner, card.name, 'cardname', owner);\r\n               }\r\n            }\r\n            return card.name;\r\n         },\r\n         suit: function (card, player) {\r\n            if (get.itemtype(card) == 'cards') {\r\n               if (card.length == 1) return get.suit(card[0], player);\r\n               return 'none';\r\n               //var suit=get.suit(card[0])\r\n               //for(var i=1;i<card.length;i++){\r\n               //    if(get.suit(card[i])!=suit) return 'none';\r\n               //}\r\n               //return suit;\r\n            }\r\n            else if (get.itemtype(card.cards) == 'cards' && card.suit != 'none' && !lib.suit.contains(card.suit)) {\r\n               return get.suit(card.cards, player);\r\n            }\r\n            else {\r\n               var owner = player || get.owner(card);\r\n               if (owner) {\r\n                  return game.checkMod(card, card.suit, 'suit', owner);\r\n               }\r\n               return card.suit;\r\n            }\r\n         },\r\n         suit3: function (cards, player) {\r\n            if (get.itemtype(cards) != 'cards') return [];\r\n            var suits = [];\r\n            for (var i of cards) {\r\n               suits.add(get.suit(i, player));\r\n            }\r\n            return suits;\r\n         },\r\n         color: function (card, player) {\r\n            if (_status.event.name == 'judge' && card.color) return card.color;\r\n            if (get.itemtype(card) == 'cards') {\r\n               var color = get.color(card[0], player)\r\n               for (var i = 1; i < card.length; i++) {\r\n                  if (get.color(card[i], player) != color) return 'none';\r\n               }\r\n               return color;\r\n            }\r\n            else if (get.itemtype(card.cards) == 'cards' && card.suit != 'none' && !lib.suit.contains(card.suit)) {\r\n               return get.color(card.cards, player);\r\n            }\r\n            else {\r\n               //柚子：已修改\r\n               var color = 'none'\r\n               if (get.suit(card, player) == 'spade' || get.suit(card, player) == 'club') color = 'black';\r\n               if (get.suit(card, player) == 'heart' || get.suit(card, player) == 'diamond') color = 'red';\r\n               var owner = player || get.owner(card);\r\n               if (owner) {\r\n                  return game.checkMod(card, owner, color, 'color', owner);\r\n               }\r\n               return color;\r\n            }\r\n         },\r\n         color3: function (cards, player) {\r\n            if (get.itemtype(cards) != 'cards') return;\r\n            var colors = [];\r\n            for (var i of cards) {\r\n               colors.add(get.color(i, player));\r\n            }\r\n            return colors;\r\n         },\r\n         number: function (card, player) {\r\n            //柚子：已修改\r\n            var number = null;\r\n            if (card.number && typeof card.number == 'number') number = card.number;\r\n            else if (card.cards && card.cards.length == 1) number = get.number(card.cards[0]);\r\n            if (number != null && get.itemtype(player) == 'player' || (player !== false && get.position(card) == 'h')) {\r\n               var owner = player || get.owner(card);\r\n               if (owner) {\r\n                  return game.checkMod(card, owner, number, 'number', owner);\r\n               }\r\n            }\r\n            return number;\r\n         },\r\n         /**\r\n          * 一个角色查看一张牌的属性，并返回结果；\r\n          * 如果角色有被动技`cardnature`，属性为改变后的值\r\n          * @param {!GameCores.GameObjects.Card} card 被查看的牌\r\n          * @param {(GameCores.GameObjects.Player|false|undefined)} [player] 要查看的角色，如果未指定，使用被查看牌的所属角色，如果所属角色未定义或这个参数为false，直接返回牌的属性；\r\n          * @returns {string}\r\n          */\r\n         nature: function (card, player) {\r\n            if (get.itemtype(player) == 'player' || player !== false) {\r\n               var owner = get.owner(card);\r\n               if (owner) {\r\n                  return game.checkMod(card, owner, card.nature, 'cardnature', owner);\r\n               }\r\n            }\r\n            return card.nature;\r\n         },\r\n         /**\r\n          * 从牌堆顶抽取指定数量的游戏牌\r\n          * 如果牌堆没有牌，游戏直接平局\r\n          * @param {number} num 要抽的牌数\r\n          * @returns {!Array<GameCores.GameObjects.Card>}\r\n          */\r\n         cards: function (num) {\r\n            if (_status.waitingForCards) {\r\n               ui.create.cards.apply(ui.create, _status.waitingForCards);\r\n               delete _status.waitingForCards;\r\n            }\r\n            var list = [];\r\n            var card = false;\r\n            if (typeof num != 'number') num = 1;\r\n            if (num == 0) { card = true; num = 1; }\r\n            if (num < 0) num = 1;\r\n            while (num--) {\r\n               if (ui.cardPile.hasChildNodes() == false) {\r\n                  if (_status.maxShuffle != undefined) {\r\n                     if (_status.maxShuffle == 0) {\r\n                        if (_status.maxShuffleCheck) {\r\n                           game.over(_status.maxShuffleCheck());\r\n                        }\r\n                        else {\r\n                           game.over('平局');\r\n                        }\r\n                        return [];\r\n                     }\r\n                     _status.maxShuffle--;\r\n                  }\r\n                  game.shuffleNumber++;\r\n                  var cards = [], i;\r\n                  for (var i = 0; i < lib.onwash.length; i++) {\r\n                     if (lib.onwash[i]() == 'remove') {\r\n                        lib.onwash.splice(i--, 1);\r\n                     }\r\n                  }\r\n                  if (_status.discarded) {\r\n                     _status.discarded.length = 0;\r\n                  }\r\n                  for (i = 0; i < ui.discardPile.childNodes.length; i++) {\r\n                     var currentcard = ui.discardPile.childNodes[i];\r\n                     currentcard.vanishtag.length = 0;\r\n                     if (get.info(currentcard).vanish || currentcard.storage.vanish) {\r\n                        currentcard.remove();\r\n                        continue;\r\n                     }\r\n                     cards.push(currentcard);\r\n                  }\r\n                  cards.randomSort();\r\n                  for (var i = 0; i < cards.length; i++) {\r\n                     ui.cardPile.appendChild(cards[i]);\r\n                  }\r\n               }\r\n               if (ui.cardPile.hasChildNodes() == false) {\r\n                  game.over('平局');\r\n                  return [];\r\n               }\r\n               var cardx = ui.cardPile.removeChild(ui.cardPile.firstChild);\r\n               cardx.original = 'c';\r\n               list.push(cardx);\r\n            }\r\n            game.updateRoundNumber();\r\n            if (card) return list[0];\r\n            return list;\r\n         },\r\n         /**\r\n          * 返回`info.judge`，如果这张牌可视为其他牌(`viewAs`)，返回视为牌的`info.judge`\r\n          * @param {GameCores.GameObjects.Card} card 游戏牌，除牌名外其他属性和函数可以为空\r\n          * @returns {string}\r\n          */\r\n         judge: function (card) {\r\n            if (card.viewAs) return lib.card[card.viewAs].judge;\r\n            return get.info(card).judge;\r\n         },\r\n         /**\r\n          * 返回两个角色之间的距离；\r\n          * 如果目标角色就是参考角色，即这个角色到自己的距离，不计算任何技能和装备效果，直接返回0；\r\n          * 除此之外，根据`method`参数返回距离，详情见下表:\r\n          * `method`参数表:\r\n          * **Chess Mode:**\r\n          * \r\n          * |method|type|\r\n          * |:----:|:--:|\r\n          * |undefined|计算距离，此距离计算被动技和装备的效果|\r\n          * |raw, pure, absolute|原距离，不计算被动技和装备的效果|\r\n          * **Stone Mode:**\r\n          * \r\n          * |method|type|\r\n          * |:----:|:--:|\r\n          * |undefined|计算距离，此距离计算被动技和装备的效果|\r\n          * |raw, pure, absolute|原距离，1|\r\n          * **Others:**\r\n          * \r\n          * |method|type|\r\n          * |:----:|:--:|\r\n          * |undefined|计算距离，此距离计算[^被动技]和装备的效果|\r\n          * |raw, pure|原距离，不计算被动技和装备的效果|\r\n          * |absolute|右手(逆时针)距离，不计算被动技和装备的效果|\r\n          * |attack|攻击距离，此距离计算被动技和装备的效果|\r\n          * **原距离** 一名角色与其他角色的距离最小为1；如果是到自己的距离，为0\r\n          * **被动技** 如果参考角色`from`有被动技**globalFrom**，计算被动技效果，然后如果目标角色`to`有被动技**globalTo**，计算被动技效果，结果作为计算距离；之后如果参考角色`from`有被动技**attackFrom**, 目标角色`to`有被动技**attackTo**，同理，继续依次计算`from`和`to`的被动技效果，结果作为攻击距离；不计算被动技时，攻击距离等于计算距离；被动技效果计算完成后，继续计算角色的装备效果(如果有装备)\r\n          * @param {!GameCores.GameObjects.Player} from 参考角色\r\n          * @param {!GameCores.GameObjects.Player} to 目标角色\r\n          * @param {?string} method 见method参数表\r\n          * @returns {number} 如果`from`或`to`不在游戏中或未指定，返回`Infinity`；如果`from==to`，返回0\r\n          */\r\n         distance: function (from, to, method) {\r\n            if (from == to) return 0;\r\n            if (!game.players.contains(from) && !game.dead.contains(from)) return Infinity;\r\n            if (!game.players.contains(to) && !game.dead.contains(to)) return Infinity;\r\n            var player = from, m, n = 1, i;\r\n            var fxy, txy;\r\n            if (game.chess) {\r\n               fxy = from.getXY();\r\n               txy = to.getXY();\r\n               n = Math.abs(fxy[0] - txy[0]) + Math.abs(fxy[1] - txy[1]);\r\n               if (method == 'raw' || method == 'pure' || method == 'absolute') return n;\r\n            }\r\n            else if (to.isMin(true) || from.isMin(true)) {\r\n               if (method == 'raw' || method == 'pure' || method == 'absolute') return n;\r\n            }\r\n            else {\r\n               var length = game.players.length;\r\n               var totalPopulation = game.players.length + game.dead.length + 1;\r\n               for (var iwhile = 0; iwhile < totalPopulation; iwhile++) {\r\n                  if (player.nextSeat != to) {\r\n                     player = player.nextSeat;\r\n                     if (player.isAlive() && !player.isOut() && !player.hasSkill('undist') && !player.isMin(true)) n++;\r\n                  }\r\n                  else {\r\n                     break;\r\n                  }\r\n               }\r\n               for (i = 0; i < game.players.length; i++) {\r\n                  if (game.players[i].isOut() || game.players[i].hasSkill('undist') || game.players[i].isMin(true)) length--;\r\n               }\r\n               if (method == 'absolute') return n;\r\n               if (from.isDead()) length++;\r\n               if (to.isDead()) length++;\r\n               var left = from.hasSkillTag('left_hand');\r\n               var right = from.hasSkillTag('right_hand');\r\n               if (left === right) n = Math.min(n, length - n);\r\n               else if (left == true) n = length - n;\r\n               if (method == 'raw' || method == 'pure') return n;\r\n            }\r\n\r\n            n = game.checkMod(from, to, n, 'globalFrom', from);\r\n            n = game.checkMod(from, to, n, 'globalTo', to);\r\n            m = n;\r\n            m = game.checkMod(from, to, m, 'attackFrom', from);\r\n            m = game.checkMod(from, to, m, 'attackTo', to);\r\n            var equips1 = from.getCards('e', function (card) {\r\n               return !ui.selected.cards || !ui.selected.cards.contains(card);\r\n            }), equips2 = to.getCards('e', function (card) {\r\n               return !ui.selected.cards || !ui.selected.cards.contains(card);\r\n            });\r\n            for (i = 0; i < equips1.length; i++) {\r\n               var info = get.info(equips1[i]).distance;\r\n               if (!info) continue;\r\n               if (info.globalFrom) {\r\n                  m += info.globalFrom;\r\n                  n += info.globalFrom;\r\n               }\r\n               if (info.attackFrom) {\r\n                  m += info.attackFrom;\r\n               }\r\n            }\r\n            for (i = 0; i < equips2.length; i++) {\r\n               var info = get.info(equips2[i]).distance;\r\n               if (!info) continue;\r\n               if (info.globalTo) {\r\n                  m += info.globalTo;\r\n                  n += info.globalTo;\r\n               }\r\n               if (info.attaclTo) {//[recommend][bug] use attackTo instead of attaclTo\r\n                  m += info.attaclTo;\r\n               }\r\n            }\r\n            if (method == 'attack') return m;\r\n            return n;\r\n         },\r\n         /**\r\n          * 返回技能模板\r\n          * @name get.info\r\n          * @function\r\n          * @param {?string} item 技能ID，如果未定义，返回undefined\r\n          * @returns {?GameCores.GameObjects.SkillInfo} 技能模板\r\n          */\r\n         /**\r\n          * 获取游戏牌模板\r\n          * @name get.info\r\n          * @function\r\n          * @variation 2\r\n          * @param {!GameCores.GameObjects.Card} card 游戏牌对象，除了牌名(`card.name`)外，其他属性或函数可以为空\r\n          * @param {(GameCores.GameObjects.Player|boolean|undefined)} option 将根据`option`获取游戏牌牌名，然后根据牌名获取模板。详见{@link game.name}，{@link game.name(2)}\r\n          * @returns {?GameCores.GameObjects.CardInfo} 游戏牌模板\r\n          */\r\n         info: function (item, player) {\r\n            if (typeof item == 'string') {\r\n               return lib.skill[item];\r\n            }\r\n            if (typeof item == 'object') {\r\n               var name = item.name;\r\n               if (player !== false) name = get.name(item, player);\r\n               return lib.card[name];\r\n            }\r\n         },\r\n         /**\r\n          * 将选择范围格式化为`[(number), (number)]`再返回\r\n          * @param {(number|Array<number>|function():Array<number>)} select 如果为数值，返回`[select, select]`；如果为数组且为`[(number), (number)]`的形式，返回`select`；如果为函数，将函数的返回值作为此函数的参数迭代，然后将结果返回；其他情况，返回`[1, 1]`\r\n          * @returns {Array<number>} 一个`[(number), (number)]`形式的数组\r\n          */\r\n         select: function (select) {\r\n            if (typeof select == 'number') return [select, select];\r\n            if (get.itemtype(select) == 'select') return select;\r\n            if (typeof select == 'function') return get.select(select());\r\n            return [1, 1]\r\n         },\r\n         /**\r\n          * 返回本机角色当前选择的一张牌，或将本机角色当前选择的牌视为一张牌返回；\r\n          * 如果`get.info(_status.event.skill).viewAs`存在，然后将当前选择的牌视为一张`viewAs8`返回；如果`viewAs`为函数，且`viewAs(ui.selected.cards, _status.event.player)`有返回值(`card`)，将当前选择的牌视为一张`card`返回；\r\n          * 除此之外，如果`_status.event._get_card`存在，返回`_status.event._get_card`\r\n          * @param {?boolean} [original] 如果为true，返回`ui.selected.cards[0]`；如果为false或未指定，将当前选择的牌视为一张`ui.selected.cards[0]`返回\r\n          * @returns {?GameCores.GameObjects.Card} 如果当前没有选择的牌，返回undefined\r\n          */\r\n         card: function (original) {\r\n            if (_status.event.skill) {\r\n               var card = get.info(_status.event.skill).viewAs;\r\n               if (typeof card == 'function') card = card(ui.selected.cards, _status.event.player);\r\n               if (card) {\r\n                  return get.autoViewAs(card, ui.selected.cards, _status.event.player);\r\n               }\r\n            }\r\n            if (_status.event._get_card) {\r\n               return _status.event._get_card;\r\n            }\r\n            var card = ui.selected.cards[0];\r\n            if (original) return card;\r\n            if (card) {\r\n               card = get.autoViewAs(card, ui.selected.cards, _status.event.player);\r\n            }\r\n            return card;\r\n         },\r\n         /**\r\n          * 返回当前事件角色\r\n          * @returns {GameCores.GameObjects.Player}\r\n          */\r\n         player: function () {\r\n            return _status.event.player;\r\n         },\r\n         /**\r\n          * 返回一个角色数组\r\n          * @param {*} sort \r\n          * @param {*} dead \r\n          * @param {*} out \r\n          * @returns {Array<GameCores.GameObjects.Player>}\r\n          */\r\n         //TODO\r\n         players: function (sort, dead, out) {\r\n            var players = game.players.slice(0);\r\n            if (sort != false) {\r\n               if (typeof sort == 'function') {\r\n                  players.sort(sort);\r\n               }\r\n               else {\r\n                  if (get.itemtype(sort) != 'player') lib.tempSortSeat = _status.event.player;\r\n                  else lib.tempSortSeat = sort;\r\n                  players.sort(lib.sort.seat);\r\n                  delete lib.tempSortSeat;\r\n               }\r\n            }\r\n            if (dead) players = players.concat(game.dead);\r\n            if (!out) {\r\n               for (var i = 0; i < players.length; i++) {\r\n                  if (players[i].isOut()) players.splice(i--, 1);\r\n               }\r\n            }\r\n            return players;\r\n         },\r\n         /**\r\n          * 返回(角色座次|游戏牌所在区域)\r\n          * @param {*} card \r\n          * @param {*} ordering \r\n          * @returns {(number|'h'|'e'|'j'|'o'|'s'|'c'|'d'|null)}\r\n          */\r\n         //TODO\r\n         position: function (card, ordering) {\r\n            if (get.itemtype(card) == 'player') return parseInt(card.dataset.position);\r\n            if (card.timeout && card.destiny) {\r\n               if (card.destiny.classList.contains('equips')) return 'e';\r\n               if (card.destiny.classList.contains('judges')) return 'j';\r\n               if (card.destiny.classList.contains('handcards')) return card.classList.contains('glows') ? 's' : 'h';\r\n               if (card.destiny.id == 'cardPile') return 'c';\r\n               if (card.destiny.id == 'discardPile') return 'd';\r\n               if (card.destiny.id == 'special') return 's';\r\n               if (card.destiny.id == 'ordering') return ordering ? 'o' : 'd';\r\n               return null;\r\n            }\r\n            if (!card.parentNode) return;\r\n            if (card.parentNode.classList.contains('equips')) return 'e';\r\n            if (card.parentNode.classList.contains('judges')) return 'j';\r\n            if (card.parentNode.classList.contains('handcards')) return card.classList.contains('glows') ? 's' : 'h';\r\n            if (card.parentNode.id == 'cardPile') return 'c';\r\n            if (card.parentNode.id == 'discardPile') return 'd';\r\n            if (card.parentNode.id == 'special') return 's';\r\n            if (card.parentNode.id == 'ordering') return ordering ? 'o' : 'd';\r\n            return null;\r\n         },\r\n         skillTranslation: function (str, player) {\r\n            var str2, str3;\r\n            if (str.indexOf('re_') == 0) {\r\n               str2 = str.slice(3);\r\n               if (str2) {\r\n                  if (lib.translate[str] == lib.translate[str2]) {\r\n                     if (player.hasSkill(str2)) {\r\n                        return '新·' + lib.translate[str];\r\n                     }\r\n                  }\r\n                  str3 = 'mark_' + str2;\r\n                  if (lib.translate[str3] && lib.translate[str] == lib.translate[str3]) {\r\n                     if (player.hasSkill(str3)) {\r\n                        return '新·' + lib.translate[str];\r\n                     }\r\n\r\n                  }\r\n               }\r\n            }\r\n            if (str.indexOf('re') == 0) {\r\n               str2 = str.slice(2);\r\n               if (str2) {\r\n                  if (lib.translate[str] == lib.translate[str2]) {\r\n                     if (player.hasSkill(str2)) {\r\n                        return '界' + lib.translate[str];\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n            else if (str.indexOf('xin') == 0) {\r\n               str2 = str.slice(3);\r\n               if (str2) {\r\n                  if (lib.translate[str] == lib.translate[str2]) {\r\n                     if (player.hasSkill(str2)) {\r\n                        return '新' + lib.translate[str];\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n            return get.translation(str);\r\n         },\r\n         interoperableText(name, player) {\r\n            var _a, _b;\r\n            let str = lib.translate[name];\r\n            if (lib.skill[name] && lib.translate[name + '_info']) {\r\n               str = get.skillInfoTranslation(name, player);\r\n               let info = lib.skill[name];\r\n               let iSkill = [(_a = info.ai) === null || _a === void 0 ? void 0 : _a.combo, info.derivation, info.involve].vkflat();\r\n               iSkill = [...new Set(iSkill)];\r\n               for (let i of iSkill) {\r\n                  let tra = get.translation(i);\r\n                  if (tra.indexOf('(') > 0)\r\n                     tra = tra.substring(0, tra.indexOf('('));\r\n                  let reg = new RegExp(`『(${tra})』`, 'g');\r\n                  str = str.replace(reg, `<span class=\"iText\" data-introLink=\"${i}\">\r\n                              <svg width=\"${tra.length * 1.1 + 2}em\" height=\"1.3em\" style=\"vertical-align: bottom\">\r\n                                  <text x=\"0\" y=\"80%\" fill=\"white\">『$1』</text>\r\n                                  <rect width=\"100%\" height=\"100%\" class=\"iRec\"/>\r\n                              </svg></span>`);\r\n               }\r\n            }\r\n            (_b = ui.interoperableText) !== null && _b !== void 0 ? _b : (ui.interoperableText = [\r\n               lib.init.sheet(`\r\n                              .iText{\r\n                                  position: relative;\r\n                                  cursor: pointer;\r\n                                  font-style: italic;\r\n                                  line-height: 1em;\r\n                              }\r\n                          `), lib.init.sheet(`\r\n                              .iRec{\r\n                                  fill:transparent;\r\n                                  stroke:aqua;\r\n                                  stroke-width: 6px;\r\n                                  stroke-dasharray: 100 500;\r\n                                  stroke-dashoffset: 230;\r\n                                  transition: 1.2s;\r\n                              }\r\n                          `), lib.init.sheet(`\r\n                              .iText:hover .iRec{\r\n                                  stroke-width: 4px;\r\n                                  stroke-dasharray: 600;\r\n                                  stroke-dashoffset: 0;\r\n                              }\r\n                          `)]);\r\n            return str;\r\n         },\r\n         skillInfoTranslation(name, player) {\r\n            let str = lib.translate[name + '_info'];\r\n            if (player && lib.dynamicTranslate[name])\r\n               str = lib.dynamicTranslate[name](player, name);\r\n            if (!str)\r\n               return '';\r\n            str = str\r\n               .replace(/(.*?)(出牌阶段限一次|出牌阶段|准备阶段|每回合限一次|每回合每项限一次|每回合限X次|一轮开始时)，/g, '$1<font style=\"color:#ccc;font-weight: bold\">$2</font>，')\r\n               .replace(/(锁定技) /g, '<font color=#f77>$1 </font>')\r\n               .replace(/(阵法技) /g, '<font color=#fe2>$1 </font>')\r\n               .replace(/(轮次技) /g, '<font color=#fc2>$1 </font>')\r\n               .replace(/(转换技) /g, '<font color=#8ae>$1 </font>')\r\n               .replace(/(限定技) /g, '<font color=#baf>$1 </font>')\r\n               .replace(/(使命技) /g, '<font color=#bf9>$1 </font>')\r\n               .replace(/(觉醒技) /g, '<font color=#fcd>$1 </font>')\r\n               .replace(/(主公技) /g, '<font color=#ff4>$1 </font>');\r\n            return str;\r\n         },\r\n         translation: function (str, arg) {\r\n            if (str && typeof str == 'object' && (str.name || str._tempTranslate)) {\r\n               if (str._tempTranslate) return str._tempTranslate;\r\n               var str2;\r\n               if (arg == 'viewAs' && str.viewAs) {\r\n                  str2 = get.translation(str.viewAs);\r\n               }\r\n               else {\r\n                  str2 = get.translation(str.name);\r\n               }\r\n               if (str2.length == 1) {\r\n                  if (str.nature == 'fire') {\r\n                     str2 = '火' + str2;\r\n                  }\r\n                  else if (str.nature == 'thunder') {\r\n                     str2 = '雷' + str2;\r\n                  }\r\n                  else if (str.nature == 'kami') {\r\n                     str2 = '神' + str2;\r\n                  }\r\n                  else if (str.nature == 'ocean') {\r\n                     str2 = '海' + str2;\r\n                  }\r\n                  else if (str.nature == 'ice') {\r\n                     str2 = '冰' + str2;\r\n                  }\r\n                  else if (str.nature == 'yami') {\r\n                     str2 = '暗' + str2;\r\n                  }\r\n               } else if (str.nature && str.nature.length) {\r\n                  if (str.nature == 'fire') {\r\n                     str2 = str2.replace(str2.charAt(0), '火');\r\n                  }\r\n                  else if (str.nature == 'thunder') {\r\n                     str2 = str2.replace(str2.charAt(0), '雷');\r\n                  }\r\n                  else if (str.nature == 'kami') {\r\n                     str2 = str2.replace(str2.charAt(0), '神');\r\n                  }\r\n                  else if (str.nature == 'ocean') {\r\n                     str2 = str2.replace(str2.charAt(0), '海');\r\n                  }\r\n                  else if (str.nature == 'ice') {\r\n                     str2 = str2.replace(str2.charAt(0), '冰');\r\n                  }\r\n                  else if (str.nature == 'yami') {\r\n                     str2 = str2.replace(str2.charAt(0), '暗');\r\n                  }\r\n               }\r\n               if (get.itemtype(str) == 'card' || str.isCard) {\r\n                  if (_status.cardtag && str.cardid) {\r\n                     var tagstr = '';\r\n                     for (var i in _status.cardtag) {\r\n                        if (_status.cardtag[i].contains(str.cardid)) {\r\n                           tagstr += lib.translate[i + '_tag'];\r\n                        }\r\n                     }\r\n                     if (tagstr) {\r\n                        str2 += '·' + tagstr;\r\n                     }\r\n                  }\r\n                  if (str.suit && str.number) {\r\n                     var cardnum = str.number || '';\r\n                     if ([1, 11, 12, 13, 14].contains(cardnum)) {\r\n                        cardnum = { '1': 'A', '11': 'J', '12': 'Q', '13': 'K', '14': '★' }[cardnum]\r\n                     }\r\n                     if (arg == 'viewAs' && str.viewAs != str.name && str.viewAs) {\r\n                        str2 += '（' + get.translation(str) + '）';\r\n                     }\r\n                     else {\r\n                        str2 += '【' + get.translation(str.suit) + cardnum + '】';\r\n                        // var len=str2.length-1;\r\n                        // str2=str2.slice(0,len)+'<span style=\"letter-spacing: -2px\">'+str2[len]+'·</span>'+get.translation(str.suit)+str.number;\r\n                     }\r\n                  }\r\n               }\r\n               return str2;\r\n            }\r\n            if (Array.isArray(str)) {\r\n               var str2 = get.translation(str[0], arg);\r\n               for (var i = 1; i < str.length; i++) {\r\n                  str2 += '、' + get.translation(str[i], arg);\r\n               }\r\n               return str2;\r\n            }\r\n            if (arg == 'skill') {\r\n               if (lib.translate[str + '_ab']) return lib.translate[str + '_ab'];\r\n               if (lib.translate[str]) return lib.translate[str].slice(0, 2);\r\n               return str;\r\n            }\r\n            else if (arg == 'info') {\r\n               if (lib.translate[str + '_info']) return lib.translate[str + '_info'];\r\n               var str2 = str.slice(0, str.length - 1);\r\n               if (lib.translate[str2 + '_info']) return lib.translate[str2 + '_info'];\r\n               if (str.lastIndexOf('_') > 0) {\r\n                  str2 = str.slice(0, str.lastIndexOf('_'));\r\n                  if (lib.translate[str2 + '_info']) return lib.translate[str2 + '_info'];\r\n               }\r\n               str2 = str.slice(0, str.length - 2);\r\n               if (lib.translate[str2 + '_info']) return lib.translate[str2 + '_info'];\r\n               if (lib.skill[str] && lib.skill[str].prompt) return lib.skill[str].prompt;\r\n            }\r\n            if (lib.translate[str]) {\r\n               return lib.translate[str];\r\n            }\r\n            if (typeof str == 'string') {\r\n               return str;\r\n            }\r\n            if (typeof str == 'number' || typeof str == 'boolean') {\r\n               return str.toString();\r\n            }\r\n            if (str && str.toString) {\r\n               return str.toString();\r\n            }\r\n            return '';\r\n         },\r\n         strNumber: function (num) {\r\n            switch (num) {\r\n               case 1: return 'A';\r\n               case 11: return 'J';\r\n               case 12: return 'Q';\r\n               case 13: return 'K';\r\n               case 14: return '★';\r\n               default: return num.toString();\r\n            }\r\n         },\r\n         cnNumber: function (num, two) {\r\n            if (num == Infinity) return '∞';\r\n            if (isNaN(num)) return '';\r\n            if (typeof num != 'number') return num;\r\n            if (num < 0 || num > 99) return num;\r\n            if (num <= 10) {\r\n               switch (num) {\r\n                  case 0: return '〇';\r\n                  case 1: return '一';\r\n                  case 2: return two ? '二' : '两';\r\n                  case 3: return '三';\r\n                  case 4: return '四';\r\n                  case 5: return '五';\r\n                  case 6: return '六';\r\n                  case 7: return '七';\r\n                  case 8: return '八';\r\n                  case 9: return '九';\r\n                  case 10: return '十';\r\n               }\r\n            }\r\n            if (num < 20) {\r\n               return '十' + get.cnNumber(num - 10, true);\r\n            }\r\n            var x = Math.floor(num / 10);\r\n            return get.cnNumber(x, true) + '十' + (num > 10 * x ? get.cnNumber(num - 10 * x, true) : '');\r\n         },\r\n         selectableButtons: function (sort) {\r\n            if (!_status.event.player) return [];\r\n            var buttons = _status.event.dialog.buttons;\r\n            var selectable = [];\r\n            for (var i = 0; i < buttons.length; i++) {\r\n               if (buttons[i].classList.contains('selectable') &&\r\n                  buttons[i].classList.contains('selected') == false) {\r\n                  selectable.push(buttons[i]);\r\n               }\r\n            }\r\n            if (sort) {\r\n               selectable.sort(sort);\r\n            }\r\n            return selectable;\r\n         },\r\n         selectableCards: function (sort) {\r\n            if (!_status.event.player) return [];\r\n            var cards = _status.event.player.getCards('hes');\r\n            var selectable = [];\r\n            for (var i = 0; i < cards.length; i++) {\r\n               if (cards[i].classList.contains('selectable') &&\r\n                  cards[i].classList.contains('selected') == false) {\r\n                  selectable.push(cards[i]);\r\n               }\r\n            }\r\n            if (sort) {\r\n               selectable.sort(sort);\r\n            }\r\n            return selectable;\r\n         },\r\n         skills: function () {\r\n            var skills = [];\r\n            if (ui.skills) {\r\n               skills = skills.concat(ui.skills.skills);\r\n            }\r\n            if (ui.skills2) {\r\n               skills = skills.concat(ui.skills2.skills);\r\n            }\r\n            if (ui.skills3) {\r\n               skills = skills.concat(ui.skills3.skills);\r\n            }\r\n            return skills;\r\n         },\r\n         /**\r\n          * 返回本角色可获得的技能；\r\n          * @param {?Function} func 筛选条件\r\n          * @param {?HTMLDivElement} player 可选\r\n          * @returns {!Array<string>}\r\n          */\r\n         gainableSkills: function (func, player) {\r\n            var list = [];\r\n            for (var i in lib.character) {\r\n               if (lib.filter.characterDisabled(i)) continue;\r\n               if (lib.filter.characterDisabled2(i)) continue;\r\n               if (lib.character[i][4]) {\r\n                  if (lib.character[i][4].contains('boss')) continue;\r\n                  if (lib.character[i][4].contains('hiddenboss')) continue;\r\n                  if (lib.character[i][4].contains('minskin')) continue;\r\n                  if (lib.character[i][4].contains('unseen')) continue;\r\n               }\r\n               for (var j = 0; j < lib.character[i][3].length; j++) {\r\n                  var skill = lib.character[i][3][j];\r\n                  var info = lib.skill[skill];\r\n                  if (lib.filter.skillDisabled(skill)) continue;\r\n                  if (func && !func(info, skill, i)) continue;\r\n                  if (player && player.hasSkill && info.ai && info.ai.combo && !player.hasSkill(info.ai.combo)) continue;\r\n                  list.add(skill);\r\n               }\r\n            }\r\n            return list;\r\n         },\r\n         /**\r\n          * 返回目标角色可被获得的技能；\r\n          * @param {!string} name 角色名\r\n          * @param {?Function} func 筛选条件\r\n          * @returns {!Array<string>}\r\n          */\r\n         gainableSkillsName: function (name, func) {\r\n            var list = [];\r\n            if (name && lib.character[name]) {\r\n               if (lib.character[name][4]) {\r\n                  if (lib.character[name][4].contains('boss')) return list;\r\n                  if (lib.character[name][4].contains('hiddenboss')) return list;\r\n                  if (lib.character[name][4].contains('minskin')) return list;\r\n                  if (lib.character[name][4].contains('unseen')) return list;\r\n               }\r\n               for (var j = 0; j < lib.character[name][3].length; j++) {\r\n                  var skill = lib.character[name][3][j];\r\n                  var info = lib.skill[skill];\r\n                  if (lib.filter.skillDisabled(skill)) continue;\r\n                  if (func && !func(info, skill, name)) continue;\r\n                  list.add(skill);\r\n               }\r\n            }\r\n            return list;\r\n         },\r\n         /**\r\n          * 返回可获得的武将牌；\r\n          * @param {?Function} func 筛选条件\r\n          * @returns {!Array<string>}\r\n          */\r\n         gainableCharacters: function (func) {\r\n            var list = [];\r\n            for (var i in lib.character) {\r\n               var info = lib.character[i];\r\n               if (!info) continue;\r\n               if (typeof func == 'function' && !func(info, i)) continue;\r\n               if (lib.filter.characterDisabled(i)) continue;\r\n               if (lib.filter.characterDisabled2(i)) continue;\r\n               list.push(i);\r\n            }\r\n            if (func === true) {\r\n               var players = game.players.concat(game.dead);\r\n               for (var i = 0; i < players.length; i++) {\r\n                  list.remove(players[i].name);\r\n                  list.remove(players[i].name1);\r\n                  list.remove(players[i].name2);\r\n               }\r\n            }\r\n            return list;\r\n         },\r\n         selectableTargets: function (sort) {\r\n            var selectable = [];\r\n            var players = game.players.slice(0);\r\n            if (_status.event.deadTarget) players.addArray(game.dead);\r\n            for (var i = 0; i < players.length; i++) {\r\n               if (players[i].classList.contains('selectable') &&\r\n                  players[i].classList.contains('selected') == false) {\r\n                  selectable.push(players[i]);\r\n               }\r\n            }\r\n            selectable.randomSort();\r\n            if (sort) {\r\n               selectable.sort(sort);\r\n            }\r\n            return selectable;\r\n         },\r\n         //检查卡牌是否符合要求的快捷方法(要求满足全部条件，无条件时默认满足)\r\n         filter: function (filter, i) {\r\n            if (typeof filter == 'function') return filter;\r\n            if (i == undefined) i = 0;\r\n            var result = function () {\r\n               if (filter == arguments[i]) return true;\r\n               for (var j in filter) {\r\n                  if (filter.hasOwnProperty(j)) {\r\n                     if (get.itemtype(arguments[i]) == 'card') {\r\n                        if (j == 'name') {\r\n                           if (typeof filter[j] == 'object') {\r\n                              if (filter[j].contains(get.name(arguments[i])) == false) return false;\r\n                           }\r\n                           else if (typeof filter[j] == 'string') {\r\n                              if (get.name(arguments[i]) != filter[j]) return false;\r\n                           }\r\n                        }\r\n                        else if (j == 'type') {\r\n                           if (typeof filter[j] == 'object') {\r\n                              if (filter[j].contains(get.type(arguments[i])) == false) return false;\r\n                           }\r\n                           else if (typeof filter[j] == 'string') {\r\n                              if (get.type(arguments[i]) != filter[j]) return false;\r\n                           }\r\n                        }\r\n                        else if (j == 'subtype') {\r\n                           if (typeof filter[j] == 'object') {\r\n                              if (filter[j].contains(get.subtype(arguments[i])) == false) return false;\r\n                           }\r\n                           else if (typeof filter[j] == 'string') {\r\n                              if (get.subtype(arguments[i]) != filter[j]) return false;\r\n                           }\r\n                        }\r\n                        else if (['color', 'suit', 'number'].contains(j)) {\r\n                           if (typeof filter[j] == 'object') {\r\n                              if (filter[j].contains(get[j](arguments[i])) == false) return false;\r\n                           }\r\n                           else if (typeof filter[j] == 'string') {\r\n                              if (get[j](arguments[i]) != filter[j]) return false;\r\n                           }\r\n                        }\r\n                        else if (typeof filter[j] == 'object') {\r\n                           if (filter[j].contains(arguments[i][j]) == false) return false;\r\n                        }\r\n                        else if (typeof filter[j] == 'string') {\r\n                           if (typeof get[j] == 'function') {\r\n                              if (get[j](arguments[i]) != filter[j]) return false;\r\n                           }\r\n                           else if (arguments[i][j] != filter[j]) return false;\r\n                        }\r\n                     }\r\n                     else {\r\n                        if (arguments[i][j] != filter[j]) return false;\r\n                     }\r\n                  }\r\n               }\r\n               return true;\r\n            }\r\n            result._filter_args = [filter, i];\r\n            return result;\r\n         },\r\n         cardCount: function (card, player) {\r\n            var num;\r\n            if (card == true) {\r\n               num = 0;\r\n               var stat = player.getStat('card');\r\n               for (var i in stat) {\r\n                  if (typeof stat[i] == 'number') num += stat[i];\r\n               }\r\n               return num;\r\n            }\r\n            if (player == undefined) player = _status.event.player;\r\n            if (typeof card == 'object') {\r\n               card = card.name;\r\n            }\r\n            num = player.getStat('card')[card];\r\n            if (num == undefined) return 0;\r\n            return num;\r\n         },\r\n         skillCount: function (skill, player) {\r\n            if (player == undefined) player = _status.event.player;\r\n            var num = player.getStat('skill')[skill];\r\n            if (num == undefined) return 0;\r\n            return num;\r\n         },\r\n         owner: function (card, method) {\r\n            var list = game.players.concat(game.dead);\r\n            for (var i = 0; i < list.length; i++) {\r\n               if (list[i].getCards('hej').contains(card)) return list[i];\r\n               if (list[i].judging[0] == card && method != 'judge') return list[i];\r\n            }\r\n            //for(var i=0;i<game.players.length;i++){\r\n            //    if(game.players[i].using&&game.players[i].using.contains(card)) return game.players[i];\r\n            //}\r\n         },\r\n         noSelected: function () {\r\n            return (ui.selected.buttons.length + ui.selected.cards.length + ui.selected.targets.length == 0)\r\n         },\r\n         population: function (identity) {\r\n            if (identity == undefined) return game.players.length + game.dead.length;\r\n            var i;\r\n            var num = 0;\r\n            for (i = 0; i < game.players.length; i++) {\r\n               if (game.players[i].identity == identity) num++;\r\n            }\r\n            return num;\r\n         },\r\n         totalPopulation: function (identity) {\r\n            if (identity == undefined) return game.players.length + game.dead.length;\r\n            var i, players = game.players.concat(game.dead);\r\n            var num = 0;\r\n            for (i = 0; i < players.length; i++) {\r\n               if (players[i].identity == identity) num++;\r\n            }\r\n            return num;\r\n         },\r\n         //标记\r\n         cardtag: function (item, tag) {\r\n            if (item.cardid && (get.itemtype(item) == 'card' || !item.cards || !item.cards.length || item.name == item.cards[0].name) && _status.cardtag && _status.cardtag[tag] && _status.cardtag[tag].contains(item.cardid)) {\r\n               return true;\r\n            }\r\n            if (item.cardtags && item.cardtags.contains(tag)) return true;\r\n            return false;\r\n         },\r\n         tag: function (item, tag, item2) {\r\n            var result;\r\n            if (get.info(item) && get.info(item).ai && get.info(item).ai.tag) {\r\n               result = get.info(item).ai.tag[tag];\r\n            }\r\n            if (typeof result == 'function') return result(item, item2);\r\n            return result;\r\n         },\r\n         sortCard: function (sort) {\r\n            var func;\r\n            if (sort == 'type_sort') {\r\n               func = function (card) {\r\n                  var type = get.type(card);\r\n                  var subtype = get.subtype(card);\r\n                  if (lib.cardType[subtype]) {\r\n                     return lib.cardType[subtype];\r\n                  }\r\n                  if (lib.cardType[type]) {\r\n                     return lib.cardType[type];\r\n                  }\r\n                  switch (type) {\r\n                     case 'basic': return 2;\r\n                     case 'chess': return 1.5;\r\n                     case 'trick': return -1;\r\n                     case 'delay': return -2;\r\n                     case 'equip': return -3;\r\n                     default: return -4;\r\n                  }\r\n               }\r\n            }\r\n            else if (sort == 'suit_sort') {\r\n               func = function (card) {\r\n                  if (get.suit(card) == 'heart') return 2;\r\n                  if (get.suit(card) == 'diamond') return 1;\r\n                  if (get.suit(card) == 'spade') return -1;\r\n                  if (get.suit(card) == 'club') return -2;\r\n               }\r\n            }\r\n            else if (sort == 'number_sort') {\r\n               func = function (card) {\r\n                  return get.number(card) - 7 + 0.5;\r\n               }\r\n            }\r\n            return func;\r\n         },\r\n         difficulty: function () {\r\n            switch (get.config('difficulty')) {\r\n               case 'easy': return 1;\r\n               case 'normal': return 2;\r\n               case 'hard': return 3;\r\n               default: return 1;\r\n            }\r\n         },\r\n         cardPile: function (name, create) {\r\n            var filter = function (card) {\r\n               if (typeof name == 'string') {\r\n                  if (card.name == name) {\r\n                     return true;\r\n                  }\r\n               }\r\n               else if (typeof name == 'function') {\r\n                  if (name(card)) {\r\n                     return true;\r\n                  }\r\n               }\r\n               return false;\r\n            };\r\n            if (create != 'discardPile') {\r\n               for (var i = 0; i < ui.cardPile.childNodes.length; i++) {\r\n                  if (filter(ui.cardPile.childNodes[i])) {\r\n                     return ui.cardPile.childNodes[i];\r\n                  }\r\n               }\r\n            }\r\n            if (create != 'cardPile') {\r\n               for (var i = 0; i < ui.discardPile.childNodes.length; i++) {\r\n                  if (filter(ui.discardPile.childNodes[i])) {\r\n                     return ui.discardPile.childNodes[i];\r\n                  }\r\n               }\r\n            }\r\n            if (create == 'field') {\r\n               var found = null;\r\n               game.findPlayer(function (current) {\r\n                  var ej = current.getCards('ej');\r\n                  for (var i = 0; i < ej.length; i++) {\r\n                     if (filter(ej[i])) {\r\n                        found = ej[i];\r\n                        return true;\r\n                     }\r\n                  }\r\n               });\r\n               return found;\r\n            }\r\n            if (create && !['cardPile', 'discardPile', 'field'].contains(create)) {\r\n               return game.createCard(name);\r\n            }\r\n            return null;\r\n         },\r\n         cardPile2: function (name) {\r\n            return get.cardPile(name, 'cardPile');\r\n         },\r\n         discardPile: function (name) {\r\n            return get.cardPile(name, 'discardPile');\r\n         },\r\n         aiStrategy: function () {\r\n            switch (get.config('ai_strategy')) {\r\n               case 'ai_strategy_1': return 1;\r\n               case 'ai_strategy_2': return 2;\r\n               case 'ai_strategy_3': return 3;\r\n               case 'ai_strategy_4': return 4;\r\n               case 'ai_strategy_5': return 5;\r\n               case 'ai_strategy_6': return 6;\r\n               default: return 1;\r\n            }\r\n         },\r\n         skillintro: function (name, learn, learn2) {\r\n            var str = '';\r\n            var infoitem = lib.character[name];\r\n            if (!infoitem) {\r\n               for (var itemx in lib.characterPack) {\r\n                  if (lib.characterPack[itemx][name]) {\r\n                     infoitem = lib.characterPack[itemx][name]; break;\r\n                  }\r\n               }\r\n            }\r\n            var skills = infoitem[3];\r\n            var opacity;\r\n            for (var i = 0; i < skills.length; i++) {\r\n               if (lib.translate[skills[i]] && lib.translate[skills[i] + '_info'] && lib.skill[skills[i]]) {\r\n                  if (learn && lib.skill[skills[i]].unique && (learn2 || !lib.skill[skills[i]].gainable)) {\r\n                     opacity = 'opacity:0.5';\r\n                  }\r\n                  else {\r\n                     opacity = '';\r\n                  }\r\n                  var skilltrans = get.translation(skills[i]).slice(0, 2);\r\n                  str += '<div class=\"skill\" style=\"' + opacity +\r\n                     '\">' + skilltrans + '</div><div style=\"' + opacity + '\">' +\r\n                     get.skillInfoTranslation(skills[i]) + '</div><div style=\"display:block;height:10px\"></div>';\r\n               }\r\n            }\r\n            return str;\r\n         },\r\n         intro: function (name) {\r\n            var info = lib.character[name];\r\n            var str = '性别：' + get.translation(info[0]) + '<br/>';\r\n            str += '势力：' + get.translation(info[1]) + '<br/>';\r\n            str += '体力：' + get.translation(info[2]) + '<br/>';\r\n            str += '技能：';\r\n            if (info[3].length) {\r\n               str += get.translation(info[3][0]);\r\n               for (var i = 1; i < info[3].length; i++) {\r\n                  str += '、' + get.translation(info[3][i]);\r\n               }\r\n            }\r\n            return str;\r\n         },\r\n         storageintro: function (type, content, player, dialog, skill) {\r\n            switch (type) {\r\n               case 'mark': {\r\n                  if (content > 0) {\r\n                     return '共有' + content + '个标记';\r\n                  }\r\n                  return false;\r\n               }\r\n               case 'turn': {\r\n                  if (content > 0) {\r\n                     return '剩余' + content + '个回合';\r\n                  }\r\n                  return false;\r\n               }\r\n               case 'time': {\r\n                  if (content > 0) {\r\n                     return '剩余' + content + '次';\r\n                  }\r\n                  return false;\r\n               }\r\n               case 'limited': {\r\n                  if (content) {\r\n                     return '已发动';\r\n                  }\r\n                  return '未发动';\r\n               }\r\n               case 'info': {\r\n                  return lib.translate[skill + '_info'];\r\n               }\r\n               case 'cardCount': {\r\n                  if (typeof content == 'object' && typeof content.length == 'number') {\r\n                     return '共有' + get.cnNumber(content.length) + '张牌';\r\n                  }\r\n                  return false;\r\n               }\r\n               case 'card': case 'cards': {\r\n                  if (get.itemtype(content) == 'card') {\r\n                     content = [content];\r\n                  }\r\n                  if (dialog && get.itemtype(content) == 'cards') {\r\n                     dialog.addAuto(content);\r\n                  }\r\n                  else {\r\n                     if (content && content.length) {\r\n                        return get.translation(content);\r\n                     }\r\n                  }\r\n                  if (Array.isArray(content) && !content.length) {\r\n                     return '没有卡牌';\r\n                  }\r\n                  return false;\r\n               }\r\n               case 'player': case 'players': {\r\n                  if (get.itemtype(content) == 'player') {\r\n                     content = [content];\r\n                  }\r\n                  if (dialog && get.itemtype(content) == 'players') {\r\n                     dialog.addAuto(content);\r\n                     return false;\r\n                  }\r\n                  else {\r\n                     if (content && content.length) {\r\n                        return get.translation(content);\r\n                     }\r\n                     return false;\r\n                  }\r\n               }\r\n               case 'character': case 'characters': {\r\n                  if (typeof content == 'string') {\r\n                     content = [content];\r\n                  }\r\n                  if (dialog && Array.isArray(content)) {\r\n                     dialog.addAuto([content, 'character']);\r\n                     return false;\r\n                  }\r\n                  else {\r\n                     if (content && content.length) {\r\n                        return get.translation(content);\r\n                     }\r\n                     return false;\r\n                  }\r\n               }\r\n               default: {\r\n                  if (typeof type == 'string') {\r\n                     type = type.replace(/#/g, content);\r\n                     type = type.replace(/&/g, get.cnNumber(content));\r\n                     type = type.replace(/\\$/g, get.translation(content));\r\n                     return type;\r\n                  }\r\n                  else if (typeof type == 'function') {\r\n                     return type(content, player, skill);\r\n                  }\r\n                  return false;\r\n               }\r\n            }\r\n         },\r\n         /**\r\n          * 生成(触屏: 长按[, 点击])|(鼠标: 悬浮, 右击[, 点击])弹窗\r\n          * @name get.nodeintro\r\n          * @function\r\n          * @param {!HTMLDivElement} node 要弹窗的节点\r\n          * @returns {!HTMLDivElement} 返回生成的弹窗\r\n          * @see {@link lib.setIntro}\r\n          */\r\n         nodeintro: function (node, simple, evt) {\r\n            var uiintro = ui.create.dialog('hidden', 'notouchscroll');\r\n            if (node.classList.contains('player') && !node.name) {\r\n               return uiintro;\r\n            }\r\n            var i, translation, intro, str;\r\n            if (node._nointro) return;\r\n            if (typeof node._customintro == 'function') {\r\n               if (node._customintro(uiintro) === false) return;\r\n            }\r\n            else if (Array.isArray(node._customintro)) {\r\n               var caption = node._customintro[0];\r\n               var content = node._customintro[1];\r\n               if (typeof caption == 'function') {\r\n                  caption = caption(node);\r\n               }\r\n               if (typeof content == 'function') {\r\n                  content = content(node);\r\n               }\r\n               uiintro.add(caption);\r\n               uiintro.add('<div class=\"text center\" style=\"padding-bottom:5px\">' + content + '</div>');\r\n            }\r\n            else if (node.classList.contains('player') || node.linkplayer) {\r\n               if (node.linkplayer) {\r\n                  node = node.link;\r\n               }\r\n               var capt = get.translation(node.name);\r\n               if ((lib.character[node.name] && lib.character[node.name][1]) || lib.group.contains(node.group)) {\r\n                  capt += '&nbsp;&nbsp;' + (lib.group.contains(node.group) ? (lib.translate[node.group + '2'] ? get.translation(node.group + '2') : get.translation(node.group)) : lib.translate[lib.character[node.name][1]]);\r\n               }\r\n               uiintro.add(capt);\r\n\r\n               if (lib.characterTitle[node.name]) {\r\n                  uiintro.addText(get.colorspan(lib.characterTitle[node.name]));\r\n               }\r\n\r\n               if (true) {\r\n                  var hs = node.getCards('h');\r\n                  if (hs.length) {\r\n                     var ms = [];\r\n                     if (node.isUnderControl() || (!game.observe && game.me && game.me.hasSkillTag('viewHandcard', null, node, true))) {\r\n                        ms.addArray(hs);\r\n                     }\r\n                     for (var i = 0; i < hs.length; i++) {\r\n                        if (hs[i].hasGaintag('ming_')) ms.add(hs[i]);\r\n                        if (hs[i].hasGaintag('an_')) ms.remove(ms[i]);\r\n                     }\r\n                     if (ms.length) {\r\n                        uiintro.add('<div class=\"text center\">手牌</div>');\r\n                        uiintro.addSmall(ms);\r\n                     }\r\n                  }\r\n               }\r\n\r\n               var skills = node.getSkills(null, null, false).slice(0);\r\n               var skills2 = game.filterSkills(skills, node);\r\n               if (node == game.me && node.hiddenSkills.length) {\r\n                  skills.addArray(node.hiddenSkills);\r\n               }\r\n               for (let i in node.disabledSkills) {\r\n                  if (node.disabledSkills[i].length == 1 &&\r\n                     node.disabledSkills[i][0] == i + '_awake' &&\r\n                     !node.hiddenSkills.contains(i)) {\r\n                     skills.add(i);\r\n                  }\r\n               }\r\n               for (let i = 0; i < skills.length; i++) {\r\n                  if (lib.skill[skills[i]] && (lib.skill[skills[i]].nopop || lib.skill[skills[i]].equipSkill)) continue;\r\n                  if (lib.translate[skills[i] + '_info']) {\r\n                     translation = lib.translate[skills[i] + '_ab'] || get.translation(skills[i]).slice(0, 5);\r\n                     let info = get.interoperableText(skills[i], node)\r\n                     if (node.forbiddenSkills[skills[i]]) {\r\n                        let forbidstr = '<div style=\"opacity:0.5\"><div class=\"skill\">' + translation + '</div><div' + ((translation.length > 3) ? ' class=\"skilltext\"' : '') + '>';\r\n                        if (node.forbiddenSkills[skills[i]].length) {\r\n                           forbidstr += '（与' + get.translation(node.forbiddenSkills[skills[i]]) + '冲突）<br>';\r\n                        }\r\n                        else {\r\n                           forbidstr += '（双将禁用）<br>';\r\n                        }\r\n                        forbidstr += info + '</div></div>'\r\n                        uiintro.add(forbidstr);\r\n                     }\r\n                     else if (!skills2.contains(skills[i])) {\r\n                        uiintro.add(`<div style=\"opacity:0.5\"><div class=\"skill\">${translation}</div><div${(translation.length > 3) ? ' class=\"skilltext\"' : ''}>${info}</div></div>`);\r\n                     }\r\n                     else if (lib.skill[skills[i]].temp || !node.skills.contains(skills[i]) || lib.skill[skills[i]].thundertext) {\r\n                        if (lib.skill[skills[i]].frequent || lib.skill[skills[i]].subfrequent) {\r\n                           uiintro.add(`<div><div class=\"skill thundertext thunderauto\">${translation}</div><div${(translation.length > 3) ? ' class=\"skilltext thundertext thunderauto\"' : ' class=\"thundertext thunderauto\"'}>${info}<br><div class=\"underlinenode on gray\" style=\"position:relative;padding-left:0;padding-top:7px\">自动发动</div></div></div>`);\r\n                           let underlinenode = uiintro.content.lastChild.querySelector('.underlinenode');\r\n                           if (lib.skill[skills[i]].frequent) {\r\n                              if (lib.config.autoskilllist.contains(skills[i])) {\r\n                                 underlinenode.classList.remove('on');\r\n                              }\r\n                           }\r\n                           if (lib.skill[skills[i]].subfrequent) {\r\n                              for (let j = 0; j < lib.skill[skills[i]].subfrequent.length; j++) {\r\n                                 if (lib.config.autoskilllist.contains(skills[i] + '_' + lib.skill[skills[i]].subfrequent[j])) {\r\n                                    underlinenode.classList.remove('on');\r\n                                 }\r\n                              }\r\n                           }\r\n                           if (lib.config.autoskilllist.contains(skills[i])) {\r\n                              underlinenode.classList.remove('on');\r\n                           }\r\n                           underlinenode.link = skills[i];\r\n                           underlinenode.listen(ui.click.autoskill2);\r\n                        }\r\n                        else {\r\n                           uiintro.add(`<div><div class=\"skill thundertext thunderauto\">${translation}</div><div${(translation.length > 3) ? ' class=\"skilltext thundertext thunderauto\"' : ' class=\"thundertext thunderauto\"'}>${info}</div></div>`);\r\n                        }\r\n                     }\r\n                     else if (lib.skill[skills[i]].frequent || lib.skill[skills[i]].subfrequent) {\r\n                        uiintro.add(`<div><div class=\"skill\">${translation}</div><div${(translation.length > 3) ? ' class=\"skilltext\"' : ''}>${info}<br><div class=\"underlinenode on gray\" style=\"position:relative;padding-left:0;padding-top:7px\">自动发动</div></div></div>`);\r\n                        let underlinenode = uiintro.content.lastChild.querySelector('.underlinenode');\r\n                        if (lib.skill[skills[i]].frequent) {\r\n                           if (lib.config.autoskilllist.contains(skills[i])) {\r\n                              underlinenode.classList.remove('on');\r\n                           }\r\n                        }\r\n                        if (lib.skill[skills[i]].subfrequent) {\r\n                           for (let j = 0; j < lib.skill[skills[i]].subfrequent.length; j++) {\r\n                              if (lib.config.autoskilllist.contains(skills[i] + '_' + lib.skill[skills[i]].subfrequent[j])) {\r\n                                 underlinenode.classList.remove('on');\r\n                              }\r\n                           }\r\n                        }\r\n                        if (lib.config.autoskilllist.contains(skills[i])) {\r\n                           underlinenode.classList.remove('on');\r\n                        }\r\n                        underlinenode.link = skills[i];\r\n                        underlinenode.listen(ui.click.autoskill2);\r\n                     }\r\n                     else if (lib.skill[skills[i]].clickable && node.isIn() && node.isUnderControl(true)) {\r\n                        if (lib.skill[skills[i]].clickChange) {\r\n                           var intronode = uiintro.add(`<div><div class=\"skill\">${translation}</div><div${(translation.length > 3) ? ' class=\"skilltext\"' : ''}>${info}<br><div class=\"menubutton skillbutton\" style=\"position:relative;margin-top:5px\">点击${lib.skill[skills[i]].clickChange}</div></div></div>`).querySelector('.skillbutton');\r\n                           if (!_status.gameStarted || (lib.skill[skills[i]].clickableFilter && !lib.skill[skills[i]].clickableFilter(node))) {\r\n                              intronode.innerHTML = lib.discoloration1 + '已' + lib.skill[skills[i]].clickChange;\r\n                              intronode.classList.add('hrefnode');\r\n                              intronode.style.opacity = 0.8;\r\n                           }\r\n                           intronode.link = node;\r\n                           intronode.func = lib.skill[skills[i]].clickable;\r\n                           intronode.classList.add('pointerdiv');\r\n                           intronode.listen(ui.click.skillbutton);\r\n                        }\r\n                        else {\r\n                           var intronode = uiintro.add(`<div><div class=\"skill\">${translation}</div><div${(translation.length > 3) ? ' class=\"skilltext\"' : ''}>${info}<br><div class=\"menubutton skillbutton\" style=\"position:relative;margin-top:5px\">点击发动</div></div></div>`).querySelector('.skillbutton');\r\n                           if (!_status.gameStarted || (lib.skill[skills[i]].clickableFilter && !lib.skill[skills[i]].clickableFilter(node))) {\r\n                              intronode.classList.add('disabled');\r\n                              intronode.style.opacity = 0.5;\r\n                           }\r\n                           else {\r\n                              intronode.link = node;\r\n                              intronode.func = lib.skill[skills[i]].clickable;\r\n                              intronode.classList.add('pointerdiv');\r\n                              intronode.listen(ui.click.skillbutton);\r\n                           }\r\n                        }\r\n                     }\r\n                     else if (lib.skill[skills[i]].nobracket) {\r\n                        uiintro.add(`<div><div class=\"skilln\">${get.translation(skills[i])}</div><div${(get.translation(skills[i]).length > 3) ? ' class=\"skilltext\"' : ''}>${info}</div></div>`);\r\n                     }\r\n                     else {\r\n                        uiintro.add(`<div><div class=\"skill\">${translation}</div><div${(translation.length > 3) ? ' class=\"skilltext\"' : ''}>${info}</div></div>`);\r\n                     }\r\n                     if (lib.translate[skills[i] + '_append']) {\r\n                        uiintro._place_text = uiintro.add('<div class=\"text\">' + lib.translate[skills[i] + '_append'] + '</div>')\r\n                     }\r\n                     for (let v of uiintro.getElementsByTagName('span')) {\r\n                        v.link = v.dataset.introlink\r\n                        if (v.classList.contains('iText')) lib.setIntro(v)\r\n                     }\r\n                  }\r\n               }\r\n               // if(get.is.phoneLayout()){\r\n               //     var storage=node.storage;\r\n               //     for(i in storage){\r\n               //                  if(get.info(i)&&get.info(i).intro){\r\n               //                               intro=get.info(i).intro;\r\n               //                               if(node.getSkills().concat(lib.skill.global).contains(i)==false&&!intro.show) continue;\r\n               //                               var name=intro.name?intro.name:get.translation(i);\r\n               //                               if(typeof name=='function'){\r\n               //                                            name=name(storage[i],node);\r\n               //                               }\r\n               //                               translation='<div><div class=\"skill\">『'+name.slice(0,2)+'』</div><div>';\r\n               //                               var stint=get.storageintro(intro.content,storage[i],node,null,i);\r\n               //                               if(stint){\r\n               //                                            translation+=stint+'</div></div>';\r\n               //                                            uiintro.add(translation);\r\n               //                               }\r\n               //                  }\r\n               //     }\r\n               // }\r\n\r\n               if (lib.config.right_range && _status.gameStarted) {\r\n                  uiintro.add(ui.create.div('.placeholder'));\r\n                  var table, tr, td;\r\n                  table = document.createElement('table');\r\n                  tr = document.createElement('tr');\r\n                  table.appendChild(tr);\r\n                  td = document.createElement('td');\r\n                  td.innerHTML = '距离';\r\n                  tr.appendChild(td);\r\n                  td = document.createElement('td');\r\n                  td.innerHTML = game.chess ? '道具' : '手牌';\r\n                  tr.appendChild(td);\r\n                  td = document.createElement('td');\r\n                  td.innerHTML = '行动';\r\n                  tr.appendChild(td);\r\n                  td = document.createElement('td');\r\n                  td.innerHTML = game.chess ? '职业' : '伤害';\r\n                  tr.appendChild(td);\r\n\r\n                  tr = document.createElement('tr');\r\n                  table.appendChild(tr);\r\n                  td = document.createElement('td');\r\n                  if (node == game.me || !game.me || !game.me.isIn()) {\r\n                     td.innerHTML = '-';\r\n                  }\r\n                  else {\r\n                     var dist1 = get.numStr(Math.max(1, game.me.distanceTo(node)));\r\n                     var dist2 = get.numStr(Math.max(1, node.distanceTo(game.me)));\r\n                     if (dist1 == dist2) {\r\n                        td.innerHTML = dist1;\r\n                     }\r\n                     else {\r\n                        td.innerHTML = dist1 + '/' + dist2;\r\n                     }\r\n                  }\r\n                  tr.appendChild(td);\r\n                  td = document.createElement('td');\r\n                  td.innerHTML = node.countCards('h');\r\n                  tr.appendChild(td);\r\n                  td = document.createElement('td');\r\n                  td.innerHTML = node.phaseNumber;\r\n                  tr.appendChild(td);\r\n                  td = document.createElement('td');\r\n                  if (game.chess) {\r\n                     if (node.storage.curClass) td.innerHTML = get.translation(node.storage.curClass);\r\n                     else td.innerHTML = '-';\r\n                  } else {\r\n                     (function () {\r\n                        num = 0;\r\n                        for (var j = 0; j < node.stat.length; j++) {\r\n                           if (typeof node.stat[j].damage == 'number') num += node.stat[j].damage;\r\n                        }\r\n                        td.innerHTML = num;\r\n                     }());\r\n                  }\r\n                  tr.appendChild(td);\r\n                  table.style.width = 'calc(100% - 20px)';\r\n                  table.style.marginLeft = '10px';\r\n\r\n                  uiintro.content.appendChild(table);\r\n                  if (!lib.config.show_favourite) {\r\n                     table.style.paddingBottom = '5px'\r\n                  }\r\n               }\r\n               if (!simple || get.is.phoneLayout()) {\r\n                  let es = node.getCards('e');\r\n                  for (let i = 0; i < es.length; i++) {\r\n                     if (es[i].viewAs && es[i].originalName && es[i].originalName != es[i].name) {\r\n                        uiintro.add('<div><div class=\"equip\">' + es[i].outerHTML + '</div><div>' + lib.translate[es[i].viewAs] + '：' + lib.translate[es[i].viewAs + '_info'] + '</div></div>');\r\n                     }\r\n                     else {\r\n                        uiintro.add('<div><div class=\"equip\">' + es[i].outerHTML + '</div><div>' + lib.translate[es[i].name + '_info'] + '</div></div>');\r\n                     }\r\n                     uiintro.content.lastChild.querySelector('.equip>.card').style.transform = '';\r\n                  }\r\n                  let js = node.getCards('j');\r\n                  for (let i = 0; i < js.length; i++) {\r\n                     if (js[i].viewAs && js[i].viewAs != js[i].name) {\r\n                        uiintro.add('<div><div class=\"equip\">' + js[i].outerHTML + '</div><div>' + lib.translate[js[i].viewAs] + '：' + lib.translate[js[i].viewAs + '_info'] + '</div></div>');\r\n                     }\r\n                     else {\r\n                        uiintro.add('<div><div class=\"equip\">' + js[i].outerHTML + '</div><div>' + lib.translate[js[i].name + '_info'] + '</div></div>');\r\n                     }\r\n                     uiintro.content.lastChild.querySelector('.equip>.card').style.transform = '';\r\n                  }\r\n                  if (get.is.phoneLayout()) {\r\n                     let markCoutainer = ui.create.div('.mark-container.marks');\r\n                     for (let i in node.marks) {\r\n                        let nodemark = node.marks[i].cloneNode(true);\r\n                        nodemark.classList.add('pointerdiv');\r\n                        nodemark.link = node.marks[i];\r\n                        nodemark.style.transform = '';\r\n                        markCoutainer.appendChild(nodemark);\r\n                        nodemark.listen(function () {\r\n                           uiintro.noresume = true;\r\n                           let rect = this.link.getBoundingClientRect();\r\n                           ui.click.intro.call(this.link, {\r\n                              clientX: rect.left + rect.width,\r\n                              clientY: rect.top + rect.height / 2,\r\n                           });\r\n                           if (lib.config.touchscreen) {\r\n                              uiintro._close();\r\n                           }\r\n                        });\r\n                     }\r\n                     if (markCoutainer.childElementCount) {\r\n                        uiintro.addText('标记');\r\n                        uiintro.add(markCoutainer);\r\n                     }\r\n                  }\r\n               }\r\n               if (!game.observe && _status.gameStarted && game.me && node != game.me) {\r\n                  ui.throwEmotion = [];\r\n                  uiintro.addText('发送交互表情');\r\n                  var click = function () {\r\n                     if (_status.dragged) return;\r\n                     if (_status.justdragged) return;\r\n                     if (_status.throwEmotionWait) return;\r\n                     var emotion = this.link;\r\n                     if (game.online) {\r\n                        game.send('throwEmotion', node, emotion);\r\n                     }\r\n                     else game.me.throwEmotion(node, emotion);\r\n                     uiintro._close();\r\n                     _status.throwEmotionWait = true;\r\n                     setTimeout(function () {\r\n                        _status.throwEmotionWait = false;\r\n                        if (ui.throwEmotion) {\r\n                           for (var i of ui.throwEmotion) i.classList.remove('exclude');\r\n                        }\r\n                     }, (emotion == 'flower' || emotion == 'egg') ? 5000 : 10000)\r\n                  };\r\n                  var td;\r\n                  var table = document.createElement('div');\r\n                  table.classList.add('add-setting');\r\n                  table.style.margin = '0';\r\n                  table.style.width = '100%';\r\n                  table.style.position = 'relative';\r\n                  var listi = ['flower', 'egg', 'wine', 'shoe'];\r\n                  for (var i = 0; i < listi.length; i++) {\r\n                     td = ui.create.div('.menubutton.reduce_radius.pointerdiv.tdnode');\r\n                     ui.throwEmotion.add(td);\r\n                     if (_status.throwEmotionWait) td.classList.add('exclude');\r\n                     td.link = listi[i];\r\n                     table.appendChild(td);\r\n                     td.innerHTML = '<span>' + get.translation(listi[i]) + '</span>';\r\n                     td.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', click);\r\n                  }\r\n                  uiintro.content.appendChild(table);\r\n                  table = document.createElement('div');\r\n                  table.classList.add('add-setting');\r\n                  table.style.margin = '0';\r\n                  table.style.width = '100%';\r\n                  table.style.position = 'relative';\r\n                  var listi = ['yuxisx', 'shoukao', 'sc', 'ship'];\r\n                  for (var i = 0; i < listi.length; i++) {\r\n                     td = ui.create.div('.menubutton.reduce_radius.pointerdiv.tdnode');\r\n                     ui.throwEmotion.add(td);\r\n                     if (_status.throwEmotionWait) td.classList.add('exclude');\r\n                     td.link = listi[i];\r\n                     table.appendChild(td);\r\n                     td.innerHTML = '<span>' + get.translation(listi[i]) + '</span>';\r\n                     td.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', click);\r\n                  }\r\n                  uiintro.content.appendChild(table);\r\n               }\r\n               var modepack = lib.characterPack['mode_' + get.mode()];\r\n               if (lib.config.show_favourite && lib.character[node.name] && game.players.contains(node) &&\r\n                  (!modepack || !modepack[node.name]) && (!simple || get.is.phoneLayout())) {\r\n                  var addFavourite = ui.create.div('.text.center.pointerdiv');\r\n                  addFavourite.link = node.link;\r\n                  if (lib.config.favouriteCharacter.contains(node.name)) {\r\n                     addFavourite.innerHTML = '移除收藏';\r\n                  }\r\n                  else {\r\n                     addFavourite.innerHTML = '添加收藏';\r\n                  }\r\n                  addFavourite.listen(ui.click.favouriteCharacter)\r\n                  uiintro.add(addFavourite);\r\n               }\r\n               if (!simple || get.is.phoneLayout()) {\r\n                  if ((lib.config.change_skin || lib.skin) && !node.isUnseen()) {\r\n                     var num = 1;\r\n                     var introadded = false;\r\n                     var createButtons = function (num, avatar2) {\r\n                        if (!introadded) {\r\n                           introadded = true;\r\n                           uiintro.add('<div class=\"text center\">更改皮肤</div>');\r\n                        }\r\n                        var buttons = ui.create.div('.buttons.smallzoom.scrollbuttons');\r\n                        lib.setMousewheel(buttons);\r\n                        var nameskin = (avatar2 ? node.name2 : node.name1);\r\n                        var nameskin2 = nameskin;\r\n                        var gzbool = false;\r\n                        if (nameskin.indexOf('gz_shibing') == 0) {\r\n                           nameskin = nameskin.slice(3, 11);\r\n                        }\r\n                        else if (nameskin.indexOf('gz_') == 0) {\r\n                           nameskin = nameskin.slice(3);\r\n                           gzbool = true;\r\n                        }\r\n                        for (var i = 0; i <= num; i++) {\r\n                           var button = ui.create.div('.button.character.pointerdiv', buttons, function () {\r\n                              if (this._link) {\r\n                                 if (avatar2) {\r\n                                    lib.config.skin[nameskin] = this._link;\r\n                                    node.node.avatar2.style.backgroundImage = this.style.backgroundImage;\r\n                                 }\r\n                                 else {\r\n                                    lib.config.skin[nameskin] = this._link;\r\n                                    node.node.avatar.style.backgroundImage = this.style.backgroundImage;\r\n                                 }\r\n                              }\r\n                              else {\r\n                                 delete lib.config.skin[nameskin];\r\n                                 if (avatar2) {\r\n                                    if (gzbool && lib.character[nameskin2][4].contains('gzskin') && lib.config.mode_config.guozhan.guozhanSkin) node.node.avatar2.setBackground(nameskin2, 'character');\r\n                                    else node.node.avatar2.setBackground(nameskin, 'character');\r\n                                 }\r\n                                 else {\r\n                                    if (gzbool && lib.character[nameskin2][4].contains('gzskin') && lib.config.mode_config.guozhan.guozhanSkin) node.node.avatar.setBackground(nameskin2, 'character');\r\n                                    else node.node.avatar.setBackground(nameskin, 'character');\r\n                                 }\r\n                              }\r\n                              game.saveConfig('skin', lib.config.skin);\r\n                           });\r\n                           button._link = i;\r\n                           if (i) {\r\n                              button.setBackgroundImage('image/skin/' + nameskin + '/' + i + '.jpg');\r\n                           }\r\n                           else {\r\n                              if (gzbool && lib.character[nameskin2][4].contains('gzskin') && lib.config.mode_config.guozhan.guozhanSkin) button.setBackground(nameskin2, 'character', 'noskin');\r\n                              else button.setBackground(nameskin, 'character', 'noskin');\r\n                           }\r\n                        }\r\n                        uiintro.add(buttons);\r\n                     };\r\n                     var loadImage = function (avatar2) {\r\n                        var img = new Image();\r\n                        img.onload = function () {\r\n                           num++;\r\n                           loadImage(avatar2);\r\n                        }\r\n                        img.onerror = function () {\r\n                           num--;\r\n                           if (num) {\r\n                              createButtons(num, avatar2);\r\n                           }\r\n                           if (!avatar2) {\r\n                              if (!node.classList.contains('unseen2') && node.name2) {\r\n                                 num = 1;\r\n                                 loadImage(true);\r\n                              }\r\n                           }\r\n                        }\r\n                        var nameskin = (avatar2 ? node.name2 : node.name1);\r\n                        var nameskin2 = nameskin;\r\n                        var gzbool = false;\r\n                        if (nameskin.indexOf('gz_shibing') == 0) {\r\n                           nameskin = nameskin.slice(3, 11);\r\n                        }\r\n                        else if (nameskin.indexOf('gz_') == 0) {\r\n                           nameskin = nameskin.slice(3);\r\n                           gzbool = true;\r\n                        }\r\n                        img.src = lib.assetURL + 'image/skin/' + nameskin + '/' + num + '.jpg';\r\n                     }\r\n                     if (lib.config.change_skin) {\r\n                        if (!node.isUnseen(0)) {\r\n                           loadImage();\r\n                        }\r\n                        else if (node.name2) {\r\n                           loadImage(true);\r\n                        }\r\n                     }\r\n                     else {\r\n                        setTimeout(function () {\r\n                           var nameskin1 = node.name1;\r\n                           var nameskin2 = node.name2;\r\n                           if (nameskin1 && nameskin1.indexOf('gz_') == 0) {\r\n                              nameskin1 = nameskin1.slice(3);\r\n                           }\r\n                           if (nameskin2 && nameskin2.indexOf('gz_') == 0) {\r\n                              nameskin2 = nameskin2.slice(3);\r\n                           }\r\n                           if (!node.isUnseen(0) && lib.skin[nameskin1]) {\r\n                              createButtons(lib.skin[nameskin1]);\r\n                           }\r\n                           if (!node.isUnseen(1) && lib.skin[nameskin2]) {\r\n                              createButtons(lib.skin[nameskin2], true);\r\n                           }\r\n                        });\r\n                     }\r\n                  }\r\n               }\r\n\r\n               uiintro.add(ui.create.div('.placeholder.slim'));\r\n            }\r\n            else if (node.classList.contains('mark') && node.info &&\r\n               node.parentNode && node.parentNode.parentNode && node.parentNode.parentNode.classList.contains('player')) {\r\n               var info = node.info;\r\n               var player = node.parentNode.parentNode;\r\n               if (info.name) {\r\n                  if (typeof info.name == 'function') {\r\n                     var named = info.name(player.storage[node.skill], player);\r\n                     if (named) {\r\n                        uiintro.add(named);\r\n                     }\r\n                  }\r\n                  else {\r\n                     uiintro.add(info.name);\r\n                  }\r\n               }\r\n               else if (info.name !== false) {\r\n                  uiintro.add(get.translation(node.skill));\r\n               }\r\n               if (typeof info.id == 'string' && info.id.indexOf('subplayer') == 0 &&\r\n                  player.isUnderControl(true) && player.storage[info.id] && !_status.video) {\r\n                  var storage = player.storage[info.id];\r\n                  uiintro.addText('当前体力：' + storage.hp + '/' + storage.maxHp);\r\n                  if (storage.hs.length) {\r\n                     uiintro.addText('手牌区');\r\n                     uiintro.addSmall(storage.hs);\r\n                  }\r\n                  if (storage.es.length) {\r\n                     uiintro.addText('装备区');\r\n                     uiintro.addSmall(storage.es);\r\n                  }\r\n               }\r\n               if (typeof info.mark == 'function') {\r\n                  var stint = info.mark(uiintro, player.storage[node.skill], player);\r\n                  if (stint) {\r\n                     var placetext = uiintro.add('<div class=\"text\" style=\"display:inline\">' + stint + '</div>');\r\n                     if (stint.indexOf('<div class=\"equip\"') != 0) {\r\n                        uiintro._place_text = placetext;\r\n                     }\r\n                     // if(stint.length<=100){\r\n                     //     uiintro.add('<div class=\"text center\">'+stint+'</div>');\r\n                     // }\r\n                     // else{\r\n                     //     uiintro.add('<div class=\"text\">'+stint+'</div>');\r\n                     // }\r\n                  }\r\n               }\r\n               else {\r\n                  var stint = get.storageintro(info.content, player.storage[node.skill], player, uiintro, node.skill);\r\n                  if (stint) {\r\n                     if (stint[0] == '@') {\r\n                        uiintro.add('<div class=\"caption\">' + stint.slice(1) + '</div>');\r\n                     }\r\n                     else {\r\n                        var placetext = uiintro.add('<div class=\"text\" style=\"display:inline\">' + stint + '</div>');\r\n                        if (stint.indexOf('<div class=\"equip\"') != 0) {\r\n                           uiintro._place_text = placetext;\r\n                        }\r\n                     }\r\n                     // else if(stint.length<=100){\r\n                     //     uiintro.add('<div class=\"text center\">'+stint+'</div>');\r\n                     // }\r\n                     // else{\r\n                     //     uiintro.add('<div class=\"text\">'+stint+'</div>');\r\n                     // }\r\n                  }\r\n               }\r\n               uiintro.add(ui.create.div('.placeholder.slim'));\r\n            }\r\n            else if (node.classList.contains('card')) {\r\n               //卡牌长按介绍\r\n               if (ui.arena.classList.contains('observe') && node.parentNode.classList.contains('handcards')) {\r\n                  return;\r\n               }\r\n               var name = node.name;\r\n               if (node.parentNode.cardMod) {\r\n                  var moded = false;\r\n                  for (var i in node.parentNode.cardMod) {\r\n                     var item = node.parentNode.cardMod[i](node);\r\n                     if (Array.isArray(item)) {\r\n                        moded = true;\r\n                        uiintro.add(item[0]);\r\n                        uiintro._place_text = uiintro.add('<div class=\"text\" style=\"display:inline\">' + item[1] + '</div>');\r\n                     }\r\n                  }\r\n                  if (moded) return uiintro;\r\n               }\r\n               if (node.link && node.link.name && lib.card[node.link.name]) {\r\n                  name = node.link.name;\r\n               }\r\n               if ((get.position(node) == 'j' || get.position(node) == 'e') && node.viewAs && (node.viewAs != name || node.originalName != name)) {\r\n                  uiintro.add(get.translation(node.viewAs));\r\n                  console.log(node.originalName)\r\n                  uiintro.add('<div class=\"text center\">（' + get.translation(get.translation(node.originalName || node)) + '）</div>');\r\n                  // uiintro.add(get.translation(node.viewAs)+'<br><div class=\"text center\" style=\"padding-top:5px;\">（'+get.translation(node)+'）</div>');\r\n                  uiintro.nosub = true;\r\n                  name = node.viewAs;\r\n               }\r\n               else {\r\n                  uiintro.add(get.translation(node));\r\n               }\r\n               if (node._banning) {\r\n                  var clickBanned = function () {\r\n                     var banned = lib.config[this.bannedname] || [];\r\n                     if (banned.contains(name)) {\r\n                        banned.remove(name);\r\n                     }\r\n                     else {\r\n                        banned.push(name);\r\n                     }\r\n                     game.saveConfig(this.bannedname, banned);\r\n                     this.classList.toggle('on');\r\n                     if (node.updateBanned) {\r\n                        node.updateBanned();\r\n                     }\r\n                  };\r\n                  var modeorder = lib.config.modeorder || [];\r\n                  for (var i in lib.mode) {\r\n                     modeorder.add(i);\r\n                  }\r\n                  var list = [];\r\n                  uiintro.contentContainer.listen(function (e) {\r\n                     ui.click.touchpop();\r\n                     e.stopPropagation();\r\n                  });\r\n                  for (var i = 0; i < modeorder.length; i++) {\r\n                     if (node._banning == 'online') {\r\n                        if (!lib.mode[modeorder[i]].connect) continue;\r\n                     }\r\n                     else if (modeorder[i] == 'connect' || modeorder[i] == 'brawl') {\r\n                        continue;\r\n                     }\r\n                     if (lib.config.all.mode.contains(modeorder[i])) {\r\n                        list.push(modeorder[i]);\r\n                     }\r\n                  }\r\n                  var page = ui.create.div('.menu-buttons.configpopped', uiintro.content);\r\n                  var banall = false;\r\n                  for (var i = 0; i < list.length; i++) {\r\n                     var cfg = ui.create.div('.config', lib.translate[list[i]] + '模式', page);\r\n                     cfg.classList.add('toggle');\r\n                     if (node._banning == 'offline') {\r\n                        cfg.bannedname = list[i] + '_bannedcards';\r\n                     }\r\n                     else {\r\n                        cfg.bannedname = 'connect_' + list[i] + '_bannedcards';\r\n                     }\r\n                     cfg.listen(clickBanned);\r\n                     ui.create.div(ui.create.div(cfg));\r\n                     var banned = lib.config[cfg.bannedname] || [];\r\n                     if (!banned.contains(name)) {\r\n                        cfg.classList.add('on');\r\n                        banall = true;\r\n                     }\r\n                  }\r\n                  ui.create.div('.menubutton.pointerdiv', banall ? '全部禁用' : '全部启用', uiintro.content, function () {\r\n                     if (this.innerHTML == '全部禁用') {\r\n                        for (var i = 0; i < page.childElementCount; i++) {\r\n                           if (page.childNodes[i].bannedname && page.childNodes[i].classList.contains('on')) {\r\n                              clickBanned.call(page.childNodes[i]);\r\n                           }\r\n                        }\r\n                        this.innerHTML = '全部启用';\r\n                     }\r\n                     else {\r\n                        for (var i = 0; i < page.childElementCount; i++) {\r\n                           if (page.childNodes[i].bannedname && !page.childNodes[i].classList.contains('on')) {\r\n                              clickBanned.call(page.childNodes[i]);\r\n                           }\r\n                        }\r\n                        this.innerHTML = '全部禁用';\r\n                     }\r\n                  }).style.marginTop = '-10px';\r\n                  ui.create.div('.placeholder.slim', uiintro.content);\r\n               }\r\n               else {\r\n                  if (lib.translate[name + '_info']) {\r\n                     if (!uiintro.nosub) {\r\n                        if (get.subtype(node) == 'equip1') {\r\n                           var added = false;\r\n                           if (lib.card[node.name] && lib.card[node.name].distance) {\r\n                              var dist = lib.card[node.name].distance;\r\n                              if (dist.attackFrom) {\r\n                                 added = true;\r\n                                 uiintro.add('<div class=\"text center\">攻击范围：' + (-dist.attackFrom + 1) + '</div>');\r\n                              }\r\n                           }\r\n                           if (!added) {\r\n                              uiintro.add('<div class=\"text center\">攻击范围：1</div>');\r\n                           }\r\n                        }\r\n                        else if (get.subtype(node)) {\r\n                           uiintro.add('<div class=\"text center\">' + get.translation(get.subtype(node)) + '</div>');\r\n                        }\r\n                        else if (lib.card[name] && lib.card[name].addinfomenu) {\r\n                           uiintro.add('<div class=\"text center\">' + lib.card[name].addinfomenu + '</div>');\r\n                        }\r\n                        else if (lib.card[name] && lib.card[name].derivation) {\r\n                           if (typeof lib.card[name].derivation == 'string') {\r\n                              uiintro.add('<div class=\"text center\">来源：' + get.translation(lib.card[name].derivation) + '</div>');\r\n                           }\r\n                           else if (lib.card[name].derivationpack) {\r\n                              uiintro.add('<div class=\"text center\">来源：' + get.translation(lib.card[name].derivationpack + '_card_config') + '</div>');\r\n                           }\r\n                        }\r\n                        else {\r\n                           if (lib.card[name].unique) {\r\n                              uiintro.add('<div class=\"text center\">特殊' + get.translation(lib.card[name].type) + '牌</div>');\r\n                           }\r\n                           else {\r\n                              if (lib.card[name].type && lib.translate[lib.card[name].type]) uiintro.add('<div class=\"text center\">' + get.translation(lib.card[name].type) + '牌</div>');\r\n                           }\r\n                        }\r\n                        if (lib.card[name].unique && lib.card[name].type == 'equip') {\r\n                           if (lib.cardPile.guozhan && lib.cardPack.guozhan.contains(name)) {\r\n                              uiintro.add('<div class=\"text center\">专属装备</div>').style.marginTop = '-5px';\r\n                           }\r\n                           else {\r\n                              uiintro.add('<div class=\"text center\">特殊装备</div>').style.marginTop = '-5px';\r\n                           }\r\n                        }\r\n                     }\r\n                     if (lib.translate[name + '_info']) {\r\n                        var placetext = uiintro.add('<div class=\"text\" style=\"display:inline\">' + lib.translate[name + '_info'] + '</div>');\r\n                        if (lib.translate[name + '_info'].indexOf('<div class=\"equip\"') != 0) {\r\n                           uiintro._place_text = placetext;\r\n                        }\r\n                     }\r\n                     if (lib.card[name].materials) {\r\n                        if (lib.card[name].materials_prompt) uiintro.add('<div class=\"text\" style=\"font-family: yuanli\">★升阶：' + lib.card[name].materials_prompt + '</div>');\r\n                        else if (typeof lib.card[name].materials == 'function') uiintro.add('<div class=\"text\" style=\"font-family: yuanli\">★升阶：' + lib.card[name].materials_prompt(node.link || node) + '</div>');\r\n                        else if (Array.isArray(lib.card[name].materials)) uiintro.add('<div class=\"text\" style=\"font-family: yuanli\">★升阶：' + get.translation(lib.card[name].materials) + '</div>');\r\n                        else uiintro.add('<div class=\"text\" style=\"font-family: yuanli\">★升阶卡牌</div>');\r\n                     }\r\n                     if (lib.card[name].yingbian_prompt && get.is.yingbian(node.link || node)) {\r\n                        if (typeof lib.card[name].yingbian_prompt == 'function') uiintro.add('<div class=\"text\" style=\"font-family: yuanli\">应变：' + lib.card[name].yingbian_prompt(node.link || node) + '</div>');\r\n                        else uiintro.add('<div class=\"text\" style=\"font-family: yuanli\">应变：' + lib.card[name].yingbian_prompt + '</div>');\r\n                     }\r\n                     if (node.nature == 'ocean') {\r\n                        uiintro.add('<div class=\"text\" style=\"font-family: yuanli;zoom: 0.8\">' + '<span class=\"bluetext\">海洋</span>' + '：海洋属性的牌被使用时，若此牌没有「伤害」标签且目标没有护甲，则令目标获得1点护甲；有护甲的角色受到海洋伤害时，此伤害+1且不产生传递' + '</div>');\r\n                     }\r\n                     if (node.nature == 'yami') {\r\n                        uiintro.add('<div class=\"text\" style=\"font-family: yuanli;zoom: 0.8\">' + '<span class=\"legendtext\">暗影</span>' + '：暗影属性的牌可以在其他角色的结束阶段对其使用；暗影属性的牌被使用时，若目标手牌数多于使用者，则其不能响应此牌且此牌造成的伤害不产生传递' + '</div>');\r\n                     }\r\n                     if (lib.translate[name + '_append']) {\r\n                        uiintro.add('<div class=\"text\" style=\"display:inline\">' + lib.translate[name + '_append'] + '</div>');\r\n                     }\r\n                  }\r\n                  uiintro.add(ui.create.div('.placeholder.slim'));\r\n               }\r\n            }\r\n            else if (node.classList.contains('character')) {\r\n               var character = node.link;\r\n               if (lib.character[node.link] && lib.character[node.link][1]) {\r\n                  var group = get.is.double(node.link, true);\r\n                  if (group) {\r\n                     var str = get.translation(character) + '&nbsp;&nbsp;';\r\n                     for (var i = 0; i < group.length; i++) {\r\n                        str += get.translation(group[i]);\r\n                        if (i < group.length - 1) str += '/';\r\n                     }\r\n                     uiintro.add(str);\r\n                  }\r\n                  else uiintro.add(get.translation(character) + '&nbsp;&nbsp;' + lib.translate[lib.character[node.link][1]] || lib.character[node.link][1]);\r\n               }\r\n               else {\r\n                  uiintro.add(get.translation(character));\r\n               }\r\n\r\n               if (lib.characterTitle[node.link]) {\r\n                  uiintro.addText(get.colorspan(lib.characterTitle[node.link]));\r\n               }\r\n\r\n               if (node._banning) {\r\n                  var clickBanned = function () {\r\n                     var banned = lib.config[this.bannedname] || [];\r\n                     if (banned.contains(character)) {\r\n                        banned.remove(character);\r\n                     }\r\n                     else {\r\n                        banned.push(character);\r\n                     }\r\n                     game.saveConfig(this.bannedname, banned);\r\n                     this.classList.toggle('on');\r\n                     if (node.updateBanned) {\r\n                        node.updateBanned();\r\n                     }\r\n                  };\r\n                  var modeorder = lib.config.modeorder || [];\r\n                  for (var i in lib.mode) {\r\n                     modeorder.add(i);\r\n                  }\r\n                  var list = [];\r\n                  uiintro.contentContainer.listen(function (e) {\r\n                     ui.click.touchpop();\r\n                     e.stopPropagation();\r\n                  });\r\n                  for (var i = 0; i < modeorder.length; i++) {\r\n                     if (node._banning == 'online') {\r\n                        if (!lib.mode[modeorder[i]].connect) continue;\r\n                        if (!lib.config['connect_' + modeorder[i] + '_banned']) {\r\n                           lib.config['connect_' + modeorder[i] + '_banned'] = [];\r\n                        }\r\n                     }\r\n                     else if (modeorder[i] == 'connect' || modeorder[i] == 'brawl') {\r\n                        continue;\r\n                     }\r\n                     if (lib.config.all.mode.contains(modeorder[i])) {\r\n                        list.push(modeorder[i]);\r\n                     }\r\n                  }\r\n                  var page = ui.create.div('.menu-buttons.configpopped', uiintro.content);\r\n                  var banall = false;\r\n                  for (var i = 0; i < list.length; i++) {\r\n                     var cfg = ui.create.div('.config', lib.translate[list[i]] + '模式', page);\r\n                     cfg.classList.add('toggle');\r\n                     if (node._banning == 'offline') {\r\n                        cfg.bannedname = list[i] + '_banned';\r\n                     }\r\n                     else {\r\n                        cfg.bannedname = 'connect_' + list[i] + '_banned';\r\n                     }\r\n                     cfg.listen(clickBanned);\r\n                     ui.create.div(ui.create.div(cfg));\r\n                     var banned = lib.config[cfg.bannedname] || [];\r\n                     if (!banned.contains(character)) {\r\n                        cfg.classList.add('on');\r\n                        banall = true;\r\n                     }\r\n                  }\r\n                  if (node._banning == 'offline') {\r\n                     var cfg = ui.create.div('.config', '随机选将可用', page);\r\n                     cfg.classList.add('toggle');\r\n                     cfg.listen(function () {\r\n                        this.classList.toggle('on');\r\n                        if (this.classList.contains('on')) {\r\n                           lib.config.forbidai_user.remove(character);\r\n                        }\r\n                        else {\r\n                           lib.config.forbidai_user.add(character);\r\n                        }\r\n                        game.saveConfig('forbidai_user', lib.config.forbidai_user);\r\n                     });\r\n                     ui.create.div(ui.create.div(cfg));\r\n                     if (!lib.config.forbidai_user.contains(character)) {\r\n                        cfg.classList.add('on');\r\n                     }\r\n                  }\r\n                  ui.create.div('.menubutton.pointerdiv', banall ? '全部禁用' : '全部启用', uiintro.content, function () {\r\n                     if (this.innerHTML == '全部禁用') {\r\n                        for (var i = 0; i < page.childElementCount; i++) {\r\n                           if (page.childNodes[i].bannedname && page.childNodes[i].classList.contains('on')) {\r\n                              clickBanned.call(page.childNodes[i]);\r\n                           }\r\n                        }\r\n                        this.innerHTML = '全部启用';\r\n                     }\r\n                     else {\r\n                        for (var i = 0; i < page.childElementCount; i++) {\r\n                           if (page.childNodes[i].bannedname && !page.childNodes[i].classList.contains('on')) {\r\n                              clickBanned.call(page.childNodes[i]);\r\n                           }\r\n                        }\r\n                        this.innerHTML = '全部禁用';\r\n                     }\r\n                  }).style.marginTop = '-10px';\r\n                  ui.create.div('.placeholder.slim', uiintro.content);\r\n               }\r\n               else {\r\n                  var infoitem = lib.character[character];\r\n                  if (!infoitem) {\r\n                     for (var itemx in lib.characterPack) {\r\n                        if (lib.characterPack[itemx][character]) {\r\n                           infoitem = lib.characterPack[itemx][character]; break;\r\n                        }\r\n                     }\r\n                  }\r\n                  var skills = infoitem[3];\r\n                  for (i = 0; i < skills.length; i++) {\r\n                     if (lib.translate[skills[i] + '_info']) {\r\n                        translation = lib.translate[skills[i] + '_ab'] || get.translation(skills[i]).slice(0, 5);\r\n                        let info = get.interoperableText(skills[i])\r\n                        if (lib.skill[skills[i]] && lib.skill[skills[i]].nobracket) {\r\n                           uiintro.add('<div><div class=\"skilln\">' + get.translation(skills[i]) + '</div><div' + ((get.translation(skills[i]).length > 3) ? ' class=\"skilltext\"' : '') + '>' + info + '</div></div>');\r\n                        }\r\n                        else {\r\n                           uiintro.add('<div><div class=\"skill\">' + translation + '</div><div' + ((translation.length > 3) ? ' class=\"skilltext\"' : '') + '>' + info + '</div></div>');\r\n                        }\r\n                        if (lib.translate[skills[i] + '_append']) {\r\n                           uiintro._place_text = uiintro.add('<div class=\"text\">' + lib.translate[skills[i] + '_append'] + '</div>')\r\n                        }\r\n                        for (let v of uiintro.getElementsByTagName('span')) {\r\n                           v.link = v.dataset.introlink\r\n                           if (v.classList.contains('iText')) lib.setIntro(v)\r\n                        }\r\n                     }\r\n                  }\r\n                  var modepack = lib.characterPack['mode_' + get.mode()];\r\n                  if (lib.config.show_favourite &&\r\n                     lib.character[node.link] && (!modepack || !modepack[node.link]) && (!simple || get.is.phoneLayout())) {\r\n                     var addFavourite = ui.create.div('.text.center.pointerdiv');\r\n                     addFavourite.link = node.link;\r\n                     addFavourite.style.marginBottom = '15px';\r\n                     if (lib.config.favouriteCharacter.contains(node.link)) {\r\n                        addFavourite.innerHTML = '移除收藏';\r\n                     }\r\n                     else {\r\n                        addFavourite.innerHTML = '添加收藏';\r\n                     }\r\n                     addFavourite.listen(ui.click.favouriteCharacter)\r\n                     uiintro.add(addFavourite);\r\n                  }\r\n                  else {\r\n                     uiintro.add(ui.create.div('.placeholder.slim'));\r\n                  }\r\n                  var addskin = false;\r\n                  if (node.parentNode.classList.contains('menu-buttons')) {\r\n                     addskin = !lib.config.show_charactercard;\r\n                  }\r\n                  else {\r\n                     addskin = lib.config.change_skin || lib.skin;\r\n                  }\r\n                  if (addskin && (!simple || get.is.phoneLayout())) {\r\n                     var num = 1;\r\n                     var introadded = false;\r\n                     var nameskin = node.link;\r\n                     var nameskin2 = nameskin;\r\n                     var gzbool = false;\r\n                     if (nameskin.indexOf('gz_shibing') == 0) {\r\n                        nameskin = nameskin.slice(3, 11);\r\n                     }\r\n                     else if (nameskin.indexOf('gz_') == 0) {\r\n                        nameskin = nameskin.slice(3);\r\n                        gzbool = true;\r\n                     }\r\n                     var createButtons = function (num) {\r\n                        if (!num) return;\r\n                        if (!introadded) {\r\n                           introadded = true;\r\n                           uiintro.add('<div class=\"text center\">更改皮肤</div>');\r\n                        }\r\n                        var buttons = ui.create.div('.buttons.smallzoom.scrollbuttons');\r\n                        lib.setMousewheel(buttons);\r\n                        for (var i = 0; i <= num; i++) {\r\n                           var button = ui.create.div('.button.character.pointerdiv', buttons, function () {\r\n                              if (this._link) {\r\n                                 lib.config.skin[nameskin] = this._link;\r\n                                 node.style.backgroundImage = this.style.backgroundImage;\r\n                                 game.saveConfig('skin', lib.config.skin);\r\n                              }\r\n                              else {\r\n                                 delete lib.config.skin[nameskin];\r\n                                 if (gzbool && lib.character[nameskin2][4].contains('gzskin') && lib.config.mode_config.guozhan.guozhanSkin) node.setBackground(nameskin2, 'character');\r\n                                 else node.setBackground(nameskin, 'character');\r\n                                 game.saveConfig('skin', lib.config.skin);\r\n                              }\r\n                           });\r\n                           button._link = i;\r\n                           if (i) {\r\n                              button.setBackgroundImage('image/skin/' + nameskin + '/' + i + '.jpg');\r\n                           }\r\n                           else {\r\n                              if (gzbool && lib.character[nameskin2][4].contains('gzskin') && lib.config.mode_config.guozhan.guozhanSkin) button.setBackground(nameskin2, 'character', 'noskin');\r\n                              else button.setBackground(nameskin, 'character', 'noskin');\r\n                           }\r\n                        }\r\n                        uiintro.add(buttons);\r\n                     };\r\n                     var loadImage = function () {\r\n                        var img = new Image();\r\n                        img.onload = function () {\r\n                           num++;\r\n                           loadImage();\r\n                        }\r\n                        img.onerror = function () {\r\n                           num--;\r\n                           createButtons(num);\r\n                        }\r\n                        img.src = lib.assetURL + 'image/skin/' + nameskin + '/' + num + '.jpg';\r\n                     }\r\n                     if (lib.config.change_skin) {\r\n                        loadImage();\r\n                     }\r\n                     else {\r\n                        setTimeout(function () {\r\n                           createButtons(lib.skin[nameskin]);\r\n                        });\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n            else if (node.classList.contains('iText')) {\r\n               if (node.curUiintro) node.curUiintro.close();\r\n               let name = node.link;\r\n               if (lib.translate[name + '_info']) {\r\n                  node.curUiintro = uiintro\r\n                  translation = lib.translate[name + '_ab'] || get.translation(name).slice(0, 5);\r\n                  if (lib.skill[name] && lib.skill[name].nobracket) {\r\n                     uiintro.add('<div><div class=\"skilln\">' + get.translation(name) + '</div><div' + ((get.translation(name).length > 3) ? ' class=\"skilltext\"' : '') + '>' + get.skillInfoTranslation(name) + '</div></div>');\r\n                  }\r\n                  else {\r\n                     uiintro.add('<div><div class=\"skill\">' + translation + '</div><div' + ((translation.length > 3) ? ' class=\"skilltext\"' : '') + '>' + get.skillInfoTranslation(name) + '</div></div>');\r\n                  }\r\n                  if (lib.translate[name + '_append']) {\r\n                     uiintro._place_text = uiintro.add('<div class=\"text\">' + lib.translate[name + '_append'] + '</div>')\r\n                  }\r\n               }\r\n            }\r\n            else if (node.classList.contains('equips') && ui.arena.classList.contains('selecting')) {\r\n               (function () {\r\n                  uiintro.add('选择装备');\r\n                  uiintro.addSmall(Array.from(node.childNodes), true);\r\n                  uiintro.clickintro = true;\r\n                  ui.control.hide();\r\n                  uiintro._onclose = function () {\r\n                     ui.control.show();\r\n                  }\r\n                  var confirmbutton;\r\n                  for (var i = 0; i < uiintro.buttons.length; i++) {\r\n                     var button = uiintro.buttons[i];\r\n                     button.classList.add('pointerdiv');\r\n                     if (button.link.classList.contains('selected')) {\r\n                        button.classList.add('selected');\r\n                     }\r\n                     button.listen(function (e) {\r\n                        ui.click.card.call(this.link, 'popequip');\r\n                        ui.click.window.call(ui.window, e);\r\n                        if (this.link.classList.contains('selected')) {\r\n                           this.classList.add('selected');\r\n                        }\r\n                        else {\r\n                           this.classList.remove('selected');\r\n                        }\r\n                        if (ui.confirm && ui.confirm.str && ui.confirm.str.indexOf('o') != -1) {\r\n                           confirmbutton.classList.remove('disabled');\r\n                        }\r\n                        else {\r\n                           confirmbutton.classList.add('disabled');\r\n                        }\r\n                     });\r\n                  }\r\n                  var buttoncontainer = uiintro.add(ui.create.div());\r\n                  buttoncontainer.style.display = 'block';\r\n                  confirmbutton = ui.create.div('.menubutton.large.pointerdiv', '确定', function () {\r\n                     if (ui.confirm && ui.confirm.str && ui.confirm.str.indexOf('o') != -1) {\r\n                        uiintro._clickintro();\r\n                        ui.click.ok(ui.confirm.firstChild);\r\n                     }\r\n                  }, buttoncontainer);\r\n                  confirmbutton.style.position = 'relative';\r\n                  setTimeout(function () {\r\n                     if (ui.confirm && ui.confirm.str && ui.confirm.str.indexOf('o') != -1) {\r\n                        confirmbutton.classList.remove('disabled');\r\n                     }\r\n                     else {\r\n                        confirmbutton.classList.add('disabled');\r\n                     }\r\n                  }, 300);\r\n               }());\r\n            }\r\n            else if (node.classList.contains('identity') && node.dataset.career) {\r\n               var career = node.dataset.career;\r\n               uiintro.add(get.translation(career));\r\n               uiintro.add('<div class=\"text center\" style=\"padding-bottom:5px\">' + lib.translate['_' + career + '_skill_info'] + '</div>');\r\n            }\r\n            else if (node.classList.contains('skillbar')) {\r\n               if (node == ui.friendBar) {\r\n                  uiintro.add('友方怒气值');\r\n                  uiintro.add('<div class=\"text center\" style=\"padding-bottom:5px\">' + _status.friendRage + '/100</div>');\r\n               }\r\n               else if (node == ui.enemyBar) {\r\n                  uiintro.add('敌方怒气值');\r\n                  uiintro.add('<div class=\"text center\" style=\"padding-bottom:5px\">' + _status.enemyRage + '/100</div>');\r\n               }\r\n            }\r\n            else if (node.parentNode == ui.historybar) {\r\n               if (node.dead) {\r\n                  if (!node.source || node.source == node.player) {\r\n                     uiintro.add('<div class=\"text center\">' + get.translation(node.player) + '阵亡</div>');\r\n                     uiintro.addSmall([node.player]);\r\n                  }\r\n                  else {\r\n                     uiintro.add('<div class=\"text center\">' + get.translation(node.player) + '被' + get.translation(node.source) + '杀害</div>');\r\n                     uiintro.addSmall([node.source]);\r\n                  }\r\n               }\r\n               if (node.skill) {\r\n                  uiintro.add('<div class=\"text center\">' + get.translation(node.skill, 'skill') + '</div>');\r\n                  uiintro._place_text = uiintro.add('<div class=\"text\" style=\"display:inline\">' + get.translation(node.skill, 'info') + '</div>');\r\n               }\r\n               if (node.targets && get.itemtype(node.targets) == 'players') {\r\n                  uiintro.add('<div class=\"text center\">目标</div>');\r\n                  uiintro.addSmall(node.targets);\r\n               }\r\n               if (node.players && node.players.length > 1) {\r\n                  uiintro.add('<div class=\"text center\">使用者</div>');\r\n                  uiintro.addSmall(node.players);\r\n               }\r\n               if (node.cards && node.cards.length) {\r\n                  uiintro.add('<div class=\"text center\">卡牌</div>');\r\n                  uiintro.addSmall(node.cards);\r\n               }\r\n               for (var i = 0; i < node.added.length; i++) {\r\n                  uiintro.add(node.added[i]);\r\n               }\r\n               if (node.added.length) {\r\n                  uiintro.add(ui.create.div('.placeholder.slim'));\r\n               }\r\n               if (uiintro.content.firstChild) {\r\n                  uiintro.content.firstChild.style.paddingTop = '3px';\r\n               }\r\n            }\r\n            if (lib.config.touchscreen) {\r\n               lib.setScroll(uiintro.contentContainer);\r\n            }\r\n            return uiintro;\r\n         },\r\n         linkintro: function (dialog, content, player) {\r\n            dialog.content.firstChild.remove();\r\n            dialog.add('<div class=\"text center\">已横置</div>');\r\n            var list = [];\r\n            for (var i = 0; i < game.players.length; i++) {\r\n               if (game.players[i].isLinked() && game.players[i].name && game.players[i].name.indexOf('unknown') != 0) {\r\n                  list.push(game.players[i]);\r\n               }\r\n            }\r\n            if (list.length) {\r\n               dialog.add(list, true, true);\r\n            }\r\n         },\r\n         groups: function () {\r\n            return [...lib.group].remove('shen');\r\n         },\r\n         types: function () {\r\n            var types = [];\r\n            for (var i in lib.card) {\r\n               if (lib.card[i].mode && lib.card[i].mode.contains(lib.config.mode) == false) continue;\r\n               if (lib.card[i].forbid && lib.card[i].forbid.contains(lib.config.mode)) continue;\r\n               if (lib.card[i].type) {\r\n                  if (lib.card[i].type == 'delay') types.add('trick');\r\n                  else types.add(lib.card[i].type);\r\n               }\r\n            }\r\n            return types;\r\n         },\r\n         links: function (buttons) {\r\n            var links = [];\r\n            for (var i = 0; i < buttons.length; i++) {\r\n               if (buttons[i].link != undefined) links.push(buttons[i].link);\r\n            }\r\n            return links;\r\n         },\r\n         /**\r\n          * 返回目标对一个角色$P$的嘲讽值$threaten$，即这个角色对目标的仇恨度，该值越高越容易被攻击，这个值与目标角色$T$有嘲讽值`info.ai.threaten`的技能$S_n$，以及目标角色的血量$h$和手牌数量$c$有关，计算公式如下:\r\n          * <p>\r\n          * \\begin{align*}\r\n          * {threaten} & = \\alpha{F(h,c)}\\\\\r\n          * \\alpha & = \\left\\{\\begin{aligned}&1,\\,n = 0\\\\\r\n          * &\\prod_{i=1}^{n-1}{f(S_i)},\\,n \\geq 1\\\\\r\n          * \\end{aligned}\\right.\\\\\r\n          * {f(x)} & = \\left\\{\\begin{aligned}{S_i.ai.threaten},\\,\\textrm{threaten是number类型}\\\\\r\n          * S_i.ai.threaten(P, T),\\,\\textrm{threaten为function类型}\r\n          * \\end{aligned}\\right.\\\\\r\n          * {F(x, y)} & = \\left\\{\\begin{aligned}&1,\\,\\textrm{不计算血量和手牌的影响}\\\\\r\n          * &g(x)g(y),\\,\\textrm{计算血量和手牌的影响}\\\\\r\n          * \\end{aligned}\\right.\\\\\r\n          * {g(x)} & = \\left\\{\\begin{aligned}&1.5,\\,x = 0\\\\\r\n          * &1.2,\\,x = 1\\\\\r\n          * &1,\\,x \\not = 0 \\land x \\not = 1\r\n          * \\end{aligned}\\right.\r\n          * \\end{align*}\r\n          * </p>\r\n          * @param {?GameCores.GameObjects.Player} [player] 角色，如果未指定，使用当前事件角色；如果为false，角色为空，忽略此参数\r\n          * @param {GameCores.GameObjects.Player} [target] 目标，如果未指定，使用`player`\r\n          * @param {?boolean} [hp] 目标角色的血量和手牌数量是否影响嘲讽值，如果为true，会返回计算影响后的嘲讽值；如果为false或未指定，不影响结果\r\n          * @returns {number}\r\n          */\r\n         threaten: function (target, player, hp) {\r\n            var threaten = 1;\r\n            var skills = target.getSkills();\r\n            if (!player && player !== false) {\r\n               player = _status.event.player;\r\n            }\r\n            for (var i = 0; i < skills.length; i++) {\r\n               var info = get.info(skills[i]);\r\n               if (info && info.ai && info.ai.threaten) {\r\n                  if (typeof info.ai.threaten == 'function' && player) {\r\n                     var tmp = info.ai.threaten(player, target);\r\n                     if (typeof tmp == 'number') {\r\n                        threaten *= tmp;\r\n                     }\r\n                  }\r\n                  else if (typeof info.ai.threaten == 'number') {\r\n                     threaten *= info.ai.threaten;\r\n                  }\r\n               }\r\n            }\r\n            if (hp) {\r\n               switch (target.hp) {\r\n                  case 0: threaten *= 1.5; break;\r\n                  case 1: threaten *= 1.2; break;\r\n               }\r\n               switch (target.countCards('h')) {\r\n                  case 0: threaten *= 1.5; break;\r\n                  case 1: threaten *= 1.2; break;\r\n               }\r\n            }\r\n            return threaten;\r\n         },\r\n         /**\r\n          * 返回一个角色状态值$condition$，这个值受角色血量$h$、手牌数量$H$、装备收益$E_n$影响，计算公式如下:\r\n          * <p>\r\n          * \\begin{align*}\r\n          * {condition} & = \\left\\{\\begin{aligned}\r\n          * & {h}+\\frac{H}{2},\\,n=0 \\\\\r\n          * & {h}+\\frac{H}{2}+\\sum_{i=0}^{n-1}{M(E_i)},\\,n\\geq1\r\n          * \\end{aligned}\\right.\\\\\r\n          * {M(x)} & = \\left\\{\\begin{aligned}\r\n          * & 0.8,\\,x\\geq7\\\\\r\n          * & 0.5,\\,x\\geq5\\\\\r\n          * & 0.2,\\,x\\geq3\\\\\r\n          * & 0,\\,x<3\r\n          * \\end{aligned}\\right.\\\\\r\n          * E_n & = {get.equipValueNumber(equips[n])}\\\\\r\n          * {equips} & = {player.getCards('e')}\r\n          * \\end{align*}\r\n          * </p>\r\n          * @param {GameCores.GameObjects.Player} player 要计算的角色\r\n          * @returns {number}\r\n          * @see {@link get.equipValueNumber}\r\n          */\r\n         condition: function (player) {\r\n            var num = player.hp;\r\n            if (num > 4) {\r\n               num = 4 + Math.sqrt(num - 4);\r\n            }\r\n            else {\r\n               if (player.isHealthy()) {\r\n                  if (player.hp == 3) {\r\n                     num += 0.5;\r\n                  }\r\n                  else if (player.hp < 3) {\r\n                     num++;\r\n                  }\r\n               }\r\n            }\r\n            num += player.countCards('h') / 2;\r\n            var es = player.getCards('e');\r\n            for (var i = 0; i < es.length; i++) {\r\n               var val = get.equipValueNumber(es[i]);\r\n               if (val >= 7) num += 0.8;\r\n               if (val >= 5) num += 0.5;\r\n               if (val >= 3) num += 0.2;\r\n            }\r\n            return num;\r\n         },\r\n         /**\r\n          * 返回一个角色对目标角色的态度值，正值为友方，负值为敌方；\r\n          * 如果这个角色处于混乱状态，则对友方的态度变负、对敌方的态度变正，态度值为原来的相反数；\r\n          * 此后，\r\n          * 如果目标角色处于混乱状态，当态度值为正值时，返回0；当态度值为正值，目标角色的身份为主公时返回1\r\n          * @param {!GameCores.GameObjects.Player} from 参考角色，如果未指定，会返回0\r\n          * @param {!GameCores.GameObjects.Player} to 目标角色，如果未指定，会返回0\r\n          * @returns {number}\r\n          */\r\n         attitude: function (from, to) {\r\n            if (!from || !to) return 0;\r\n            from = from._trueMe || from;\r\n            arguments[0] = from;\r\n            var att = get.rawAttitude.apply(this, arguments);\r\n            if (from.isMad()) att = -att;\r\n            if (to.isMad() && att > 0) {\r\n               if (to.identity == 'zhu') {\r\n                  att = 1;\r\n               }\r\n               else {\r\n                  att = 0;\r\n               }\r\n            }\r\n            if (!_status.tempnofake) {\r\n               _status.tempnofake = true;\r\n               if (from.ai.modAttitudeFrom) {\r\n                  att = from.ai.modAttitudeFrom(from, to, att);\r\n               }\r\n               if (to.ai.modAttitudeTo) {\r\n                  att = to.ai.modAttitudeTo(from, to, att);\r\n               }\r\n               delete _status.tempnofake;\r\n            }\r\n            return att;\r\n         },\r\n         /**\r\n          * 返回态度值的符号\r\n          * @param {...any} args 此函数的参数会作为{@link get.attitude}的参数调用\r\n          * @returns {number} (-1|0|1)\r\n          */\r\n         sgnAttitude: function () {\r\n            return get.sgn(get.attitude.apply(this, arguments));\r\n         },\r\n         /**\r\n          * 返回牌的留牌收益(`info.ai.useful`|`info.ai.basic.useful`)，留牌收益低的牌，在弃牌时会被丢弃，而留牌收益高的则会保留；\r\n          * 如果`card._modUseful`存在，则返回`card._modUseful()`；\r\n          * 如果`useful`是函数，则留牌收益值为`useful(card, cardIndex)`，`cardIndex`为`card`在当前事件角色`player`手牌中同名(`card.name`)牌数组中的索引，如果(当前事件没有角色|没有找到此牌)，`cardIndex`为0\r\n          * @param {!GameCores.GameObjects.Card} card 游戏牌对象\r\n          * @returns {number} 如果是判定区的牌，返回-1；如果 `useful`未定义，此函数返回-1(`useful`默认为-1)\r\n          */\r\n         useful: function (card, player) {\r\n            if (get.position(card) == 'j') return -1;\r\n            if (get.position(card) == 'e') return get.equipValue(card);\r\n            if (card._modUseful) {\r\n               return card._modUseful();\r\n            }\r\n            var i = 0;\r\n            player = player || _status.event.player;\r\n            if (player) {\r\n               i = player.getCards('h', card.name).indexOf(card);\r\n               if (i < 0) i = 0;\r\n            }\r\n            var aii = get.info(card).ai;\r\n            var useful;\r\n            if (aii && aii.useful) useful = aii.useful;\r\n            else if (aii && aii.basic) useful = aii.basic.useful;\r\n            var result;\r\n            if (useful == undefined) result = -1;\r\n            else if (typeof useful == 'function') {\r\n               result = useful(card, i);\r\n            }\r\n            else if (typeof useful == 'number') result = useful;\r\n            else if (i < useful.length) {\r\n               result = useful[i];\r\n            }\r\n            else result = useful[useful.length - 1];\r\n            result = game.checkMod(player, card, result, 'aiUseful', player);\r\n            return result;\r\n         },\r\n         /**\r\n          * 返回牌的留牌收益，但是此函数返回的留牌收益为原留牌收益的相反数\r\n          * @param {!GameCores.GameObjects.Card} card 游戏牌对象\r\n          * @returns {!number}\r\n          */\r\n         unuseful: function (card) {\r\n            return -get.useful(card);\r\n         },\r\n         /**\r\n          * 返回牌的留牌收益，但是此函数返回的留牌收益为`10 - oriUseful`，oriUseful为原留牌收益\r\n          * @param {!GameCores.GameObjects.Card} card 游戏牌对象\r\n          * @returns {!number}\r\n          */\r\n         unuseful2: function (card) {\r\n            return 10 - get.useful(card);\r\n         },\r\n         /**\r\n          * 返回牌的留牌收益，但是此函数返回的留牌收益为`10 - oriUseful`，oriUseful为原留牌收益；\r\n          * 一种特别的情况是，游戏牌的牌名(card.name)为'du'，此时返回20\r\n          * @param {!GameCores.GameObjects.Card} card 游戏牌对象\r\n          * @returns {!number}\r\n          */\r\n         unuseful3: function (card) {\r\n            if (card.name == 'du') return 20;\r\n            return 10 - get.useful(card);\r\n         },\r\n         /**\r\n          * 返回一个角色$P$当前使用一组游戏牌$C_n$的收益值$value$，受`method`$m$影响，计算公式:\r\n          * <p>\r\n          * \\begin{align*}\r\n          * {value} & = \\frac{\\sum_{i=0}^{n-1}F(C_i)}{\\sqrt{n}}\\\\\r\n          * {F(x)} & = {get.value(x, P, m)}\r\n          * \\end{align*}\r\n          * </p>\r\n          * @name get.value\r\n          * @function\r\n          * @param {!Array<GameCores.GameObjects.Card>} cards 游戏牌数组。**注意**：一种特别的情况是，此数组为空数组，此时收益值为`0/0`，即`NaN`值\r\n          * @param {?GameCores.GameObjects.Player} [player] 角色，如果未指定，使用当前事件角色\r\n          * @param {?string} [method] 'raw'\r\n          * @returns {number}\r\n          */\r\n         /**\r\n          * 返回一个角色当前使用一张游戏牌的收益值(`info.ai.value`|`info.ai.basic.value`)；\r\n          * 如果`card._modValue`存在，则返回`card._modValue(player, method)`；\r\n          * 除此之外：\r\n          * 如果`value`是函数，则收益值为`value(card, player, cardIndex, method)`，`cardIndex`为`card`在角色`player`手牌中同名(`card.name`)牌数组中的索引，如果`card`不在其中，返回同名牌数组的长度\r\n          * 如果此角色有被动技**aiValue**，则返回改变后的收益值\r\n          * @name get.value\r\n          * @function\r\n          * @variation 2\r\n          * @param {(!GameCores.GameObjects.Card)} card 游戏牌对象\r\n          * @param {?GameCores.GameObjects.Player} [player] 角色，如果未指定，使用当前事件角色\r\n          * @param {?string} [method] 'raw'\r\n          * @returns {number}\r\n          */\r\n         value: function (card, player, method) {\r\n            var result = 0;\r\n            var value;\r\n            if (Array.isArray(card)) {\r\n               value = 0;\r\n               for (var i = 0; i < card.length; i++) {\r\n                  value += get.value(card[i], player, method);\r\n               }\r\n               return value / Math.sqrt(card.length);\r\n            }\r\n            if (card._modValue) {\r\n               return card._modValue(player, method);\r\n            }\r\n            var aii = get.info(card).ai;\r\n            if (aii && aii.value) value = aii.value;\r\n            else if (aii && aii.basic) value = aii.basic.value;\r\n            if (player == undefined || get.itemtype(player) != 'player') player = _status.event.player;\r\n            var geti = function () {\r\n               var num = 0, i;\r\n               var cards = player.getCards('hs', card.name);\r\n               if (cards.contains(card)) {\r\n                  return cards.indexOf(card);\r\n               }\r\n               return cards.length;\r\n            };\r\n            if (typeof value == 'function') {\r\n               result = value(card, player, geti(), method);\r\n            }\r\n            if (typeof value == 'number') result = value;\r\n            if (Array.isArray(value)) {\r\n               if (method == 'raw') result = value[0];//??\r\n               var num = geti();\r\n               if (num < value.length) result = value[num];\r\n               else result = value[value.length - 1];\r\n            }\r\n            result = game.checkMod(player, card, result, 'aiValue', player);\r\n            return result;\r\n         },\r\n         /**\r\n          * 返回装备收益，如果**原装备收益大于0而且不需要弃牌**的时候，就不用装备(除非装备牌有tag`valueswap`)，返回0值；\r\n          * 此函数返回的装备收益$equipValue$正比于新装备的装备收益$v$与原装备$v_{0}$的差值，\r\n          * 其计算公式如下:\r\n          * $${equipValue}=\\frac{max(0, {v}-{v_{0}})}{5}$$\r\n          * @param {GameCores.GameObjects.Player} player [never used]牌的使用者\r\n          * @param {GameCores.GameOjbects.Player} target 装备牌的角色\r\n          * @param {!string} name 装备牌牌名，如果当前没有选择的牌或那个牌的牌名与此牌名不同，使用`{name:name}`\r\n          * @returns {number}\r\n          */\r\n         equipResult: function (player, target, name) {\r\n            var card = get.card();\r\n            if (!card || card.name != name) {\r\n               card = { name: name };\r\n            }\r\n            var value1 = get.equipValue(card, target);\r\n            var value2 = 0;\r\n            var current = target.getEquip(card);\r\n            if (current && current != card) {\r\n               value2 = get.equipValue(current, target);\r\n               if (value2 > 0 && !target.needsToDiscard() && !get.tag(card, 'valueswap')) {\r\n                  return 0;\r\n               }\r\n            }\r\n            return Math.max(0, value1 - value2) / 5;\r\n         },\r\n         /**\r\n          * 返回游戏牌的装备收益(`info.ai.equipValue`|`info.ai.basic.equipValue`)；\r\n          * 如果装备收益未定义，返回0值；\r\n          * 如果`equipValue`是函数，则装备收益为`equipValue(card, player, null, 'raw2')`，其中`player`为装备的目标角色，`card`与`player`不会为空值\r\n          * @param {!GameCores.GameObjects.Card} card 游戏牌对象，除了牌名外其他属性或函数可以为空\r\n          * @param {?GameCores.GameObjects.Player} [player] 装备的目标角色，如果未指定，使用游戏牌`card`的所属角色，如果`card`没有所属角色，使用当前事件角色\r\n          * @returns {!number}\r\n          */\r\n         equipValue: function (card, player) {\r\n            if (player == undefined || get.itemtype(player) != 'player') player = get.owner(card);\r\n            if (player == undefined || get.itemtype(player) != 'player') player = _status.event.player;\r\n            var info = get.info(card);\r\n            if (!info.ai) return 0;\r\n            var value = info.ai.equipValue;\r\n            if (value == undefined) {\r\n               if (info.ai.basic && info.ai.basic.equipValue != undefined) {\r\n                  value = info.ai.basic.equipValue;\r\n               }\r\n               else return 0;\r\n            }\r\n            if (typeof value == 'number') return value;\r\n            if (typeof value == 'function') return value(card, player, null, 'raw2');\r\n            return 0;\r\n         },\r\n         /**\r\n          * 返回游戏牌的装备收益(`info.ai.equipValue`|`info.ai.basic.equipValue`)；\r\n          * 如果装备收益未定义或者`equipValue`不是'number'类型，返回0值\r\n          * @param {!GameCores.GameObjects.Card} card 游戏牌对象，除了牌名外其他属性或函数可以为空\r\n          * @returns {number}\r\n          */\r\n         equipValueNumber: function (card) {\r\n            var info = get.info(card);\r\n            if (info.ai) {\r\n               if (typeof info.ai.equipValue == 'number') return info.ai.equipValue;\r\n               if (info.ai.basic && typeof info.ai.basic.equipValue == 'number') return info.ai.basic.equipValue;\r\n            }\r\n            return 0;\r\n         },\r\n         /**\r\n          * 返回一个角色使用一张游戏牌的收益值，但是此函数返回的收益值是计算收益值的相反数\r\n          * @param {GameCores.GameObjects.Card} card 游戏牌对象\r\n          * @param {GameCores.GameObjects.Player} player 角色\r\n          * @returns {number}\r\n          */\r\n         disvalue: function (card, player) {\r\n            return -get.value(card, player);\r\n         },\r\n         /**\r\n          * 返回一个角色使用一张游戏牌的收益值，但是此函数返回的收益值是原收益值的相反数\r\n          * @param {GameCores.GameObjects.Card} card 游戏牌对象\r\n          * @param {GameCores.GameObjects.Player} player 角色\r\n          * @returns {number}\r\n          */\r\n         disvalue2: function (card, player) {\r\n            return -get.value(card, player, 'raw');\r\n         },\r\n         /**\r\n          * 返回目标对一个角色的使用某个技能的嘲讽值(对应技能的`info.ai.threaten`)，即这个角色对目标的仇恨度，该值越高越容易被攻击；\r\n          * 如果`threaten`是函数，则嘲讽值为函数的返回值；\r\n          * 该函数会以`order(player, target)`调用`threaten`\r\n          * @param {!string} skill 技能名\r\n          * @param {?GameCores.GameObjects.Player} [player] 角色，如果未指定，使用当前事件角色\r\n          * @param {GameCores.GameObjects.Player} [target] 目标，如果未指定，使用`player`\r\n          * @returns {number} 如果没有找到技能，返回1；如果 `info.ai.threaten`未定义，此函数返回1(`threaten`默认为1)\r\n          */\r\n         skillthreaten: function (skill, player, target) {\r\n            if (!lib.skill[skill]) return 1;\r\n            if (!lib.skill[skill].ai) return 1;\r\n            var threaten = lib.skill[skill].ai.threaten;\r\n            if (typeof threaten == 'number') return threaten;\r\n            if (typeof threaten == 'function') {\r\n               player = player || _status.event.player;\r\n               target = target || player;\r\n               return threaten(player, target);\r\n            }\r\n            return 1;\r\n         },\r\n         /**\r\n          * 返回(技能使用|游戏牌发动)的优先级(`info.ai.order`|`info.ai.basic.order`)；\r\n          * 如果`order`是函数，则优先级为函数的返回值；\r\n          * 该函数会以`order(item, _status.event.player)`调用`order`，`_status.event.player`为当前事件角色；\r\n          * 如果当前事件角色有被动技**aiOrder**，则返回改变后的优先级\r\n          * @param {(string|GameCores.GameObjects.Card)} item 技能名或游戏牌对象，游戏牌对象除牌名外其他属性或函数可以为空\r\n          * @returns {!number} 如果`{@link get.info() get.info(item)}`返回undefined，此函数返回-1；如果`info.ai.order`或`info.ai.basic.order`未定义，此函数返回-1\r\n          */\r\n         order: function (item) {\r\n            var info = get.info(item);\r\n            if (!info) return -1;\r\n            var aii = info.ai;\r\n            var order;\r\n            if (aii && aii.order) order = aii.order;\r\n            else if (aii && aii.basic) order = aii.basic.order;\r\n            if (order == undefined) return -1;\r\n            var num = order;\r\n            if (typeof (order) == 'function') {\r\n               num = order(item, _status.event.player);\r\n            }\r\n            if (typeof item == 'object' && _status.event.player) {\r\n               var player = _status.event.player;\r\n               num = game.checkMod(player, item, num, 'aiOrder', player);\r\n            }\r\n            return num;\r\n         },\r\n         /**\r\n          * 返回`get.info(item).ai.result`的浅拷贝对象，如果`ai.result`是函数，返回`get.info(item).ai.result(item)`\r\n          * @private\r\n          * @param {GameCores.GameObjects.Card} item \r\n          * @param {?} skill \r\n          * @returns {!Object}\r\n          */\r\n         result: function (item, skill) {\r\n            var result;\r\n            var info = get.info(item);\r\n            if (info.ai) result = get.copy(info.ai.result);\r\n            if (typeof (result) == 'function') result = result(item);\r\n            if (!result) result = {};\r\n            if (skill) {\r\n               var info2 = get.info(skill);\r\n               if (info2.ai) {\r\n                  info2 = info2.ai.result;\r\n                  for (var i in info2) {\r\n                     result[i] = info2[i];\r\n                  }\r\n               }\r\n            }\r\n            return result;\r\n         },\r\n         /**\r\n          * 返回源对目标使用一张游戏牌的效果值\r\n          * @param {GameCores.GameObjects.Player} target 目标\r\n          * @param {*} card \r\n          * @param {?GameCores.GameObjects.Player} [player] 源，如果未指定，使用当前事件角色\r\n          * @param {?GameCores.GameObjects.Player} player2 观察者\r\n          * @param {?boolean} [isLink] \r\n          * @returns {number}\r\n          */\r\n         effect_use: function (target, card, player, player2, isLink) {\r\n            var Evt = _status.event;\r\n            var eventskill = null;\r\n            if (player == undefined) player = _status.event.player;\r\n            if (typeof card != 'string' && (typeof card != 'object' || !card.name)) {\r\n               var skillinfo = get.info(Evt.skill);\r\n               if (Evt.skill && skillinfo.viewAs == undefined) card = _status.event.skill;\r\n               else {\r\n                  card = get.card();\r\n                  if (skillinfo && skillinfo.viewAs && card.name === skillinfo.viewAs.name) {\r\n                     eventskill = Evt.skill;\r\n                  }\r\n               }\r\n            }\r\n            var info = get.info(card);\r\n            if (typeof card == 'object' && info && info.changeTarget) {\r\n               var targets = [target];\r\n               info.changeTarget(player, targets);\r\n               var eff = 0;\r\n               for (var i of targets) {\r\n                  eff += get.effect(i, card, player, player2, isLink);\r\n               }\r\n               return eff;\r\n            }\r\n            var result = get.result(card, eventskill);\r\n            var result1 = result.player_use || result.player, result2 = result.target_use || result.target;\r\n            if (typeof result1 == 'function') result1 = result1(player, target, card, isLink);\r\n            if (typeof result2 == 'function') result2 = result2(player, target, card, isLink);\r\n\r\n            if (typeof result1 != 'number') result1 = 0;\r\n            if (typeof result2 != 'number') result2 = 0;\r\n            var temp1, temp2, temp3, temp01 = 0, temp02 = 0, threaten = 1;\r\n            var skills1 = player.getSkills().concat(lib.skill.global);\r\n            game.expandSkills(skills1);\r\n            var zerotarget = false, zeroplayer = false;\r\n            for (var i = 0; i < skills1.length; i++) {\r\n               temp1 = get.info(skills1[i]).ai;\r\n               if (temp1 && typeof temp1.effect == 'object' && typeof temp1.effect.player_use == 'function') {\r\n                  temp1 = temp1.effect.player_use(card, player, target, result1, isLink);\r\n               }\r\n               else if (temp1 && typeof temp1.effect == 'object' && typeof temp1.effect.player == 'function') {\r\n                  temp1 = temp1.effect.player(card, player, target, result1, isLink);\r\n               }\r\n               else temp1 = undefined;\r\n               if (typeof temp1 == 'object') {\r\n                  if (temp1.length == 2 || temp1.length == 4) {\r\n                     result1 *= temp1[0];\r\n                     temp01 += temp1[1];\r\n                  }\r\n                  if (temp1.length == 4) {\r\n                     result2 *= temp1[2];\r\n                     temp02 += temp1[3];\r\n                  }\r\n               }\r\n               else if (typeof temp1 == 'number') {\r\n                  result1 *= temp1;\r\n               }\r\n               else if (temp1 == 'zeroplayer') {\r\n                  zeroplayer = true;\r\n               }\r\n               else if (temp1 == 'zerotarget') {\r\n                  zerotarget = true;\r\n               }\r\n               else if (temp1 == 'zeroplayertarget') {\r\n                  zeroplayer = true;\r\n                  zerotarget = true;\r\n               }\r\n            }\r\n            if (target) {\r\n               var skills2 = target.getSkills().concat(lib.skill.global);\r\n               game.expandSkills(skills2);\r\n               for (var i = 0; i < skills2.length; i++) {\r\n                  temp2 = get.info(skills2[i]).ai;\r\n                  if (temp2 && temp2.threaten) temp3 = temp2.threaten;\r\n                  else temp3 = undefined;\r\n                  if (temp2 && typeof temp2.effect == 'function') {\r\n                     if (!player.hasSkillTag('ignoreSkill', true, {\r\n                        card: card,\r\n                        target: target,\r\n                        skill: skills2[i],\r\n                        isLink: isLink,\r\n                     })) temp2 = temp2.effect(card, player, target, result2, isLink);\r\n                     else temp2 = undefined;\r\n                  }\r\n                  else if (temp2 && typeof temp2.effect == 'object' && typeof temp2.effect.target_use == 'function') {\r\n                     if (!player.hasSkillTag('ignoreSkill', true, {\r\n                        card: card,\r\n                        target: target,\r\n                        skill: skills2[i],\r\n                        isLink: isLink,\r\n                     })) temp2 = temp2.effect.target_use(card, player, target, result2, isLink);\r\n                     else temp2 = undefined;\r\n                  }\r\n                  else if (temp2 && typeof temp2.effect == 'object' && typeof temp2.effect.target == 'function') {\r\n                     if (!player.hasSkillTag('ignoreSkill', true, {\r\n                        card: card,\r\n                        target: target,\r\n                        skill: skills2[i],\r\n                        isLink: isLink,\r\n                     })) temp2 = temp2.effect.target(card, player, target, result2, isLink);\r\n                     else temp2 = undefined;\r\n                  }\r\n                  else temp2 = undefined;\r\n                  if (typeof temp2 == 'object') {\r\n                     if (temp2.length == 2 || temp2.length == 4) {\r\n                        result2 *= temp2[0];\r\n                        temp02 += temp2[1];\r\n                     }\r\n                     if (temp2.length == 4) {\r\n                        result1 *= temp2[2];\r\n                        temp01 += temp2[3];\r\n                     }\r\n                  }\r\n                  else if (typeof temp2 == 'number') {\r\n                     result2 *= temp2;\r\n                  }\r\n                  else if (temp2 == 'zeroplayer') {\r\n                     zeroplayer = true;\r\n                  }\r\n                  else if (temp2 == 'zerotarget') {\r\n                     zerotarget = true;\r\n                  }\r\n                  else if (temp2 == 'zeroplayertarget') {\r\n                     zeroplayer = true;\r\n                     zerotarget = true;\r\n                  }\r\n                  if (typeof temp3 == 'function' && temp3(player, target) != undefined) {\r\n                     threaten *= temp3(player, target);\r\n                  }\r\n                  else if (typeof temp3 == 'object') {\r\n                     if (typeof temp3.target == 'number') {\r\n                        threaten *= temp3;\r\n                     }\r\n                     else if (typeof temp3.target == 'function' && temp3(player, target) != undefined) {\r\n                        threaten *= temp3(player, target);\r\n                     }\r\n                  }\r\n                  else if (typeof temp3 == 'number') {\r\n                     threaten *= temp3;\r\n                  }\r\n               }\r\n               result2 += temp02;\r\n               result1 += temp01;\r\n               if (get.attitude(player, target) < 0) {\r\n                  result2 *= Math.sqrt(threaten);\r\n               }\r\n               else {\r\n                  result2 *= Math.sqrt(Math.sqrt(threaten));\r\n               }\r\n               if (target.hp == 1) result2 *= 2.5;\r\n               if (target.hp == 2) result2 *= 1.8;\r\n               if (target.countCards('h') == 0) {\r\n                  if (get.tag(card, 'respondSha') || get.tag(card, 'respondShan')) {\r\n                     result2 *= 1.7;\r\n                  }\r\n                  else {\r\n                     result2 *= 1.5;\r\n                  }\r\n               }\r\n               if (target.countCards('h') == 1) result2 *= 1.3;\r\n               if (target.countCards('h') == 2) result2 *= 1.1;\r\n               if (target.countCards('h') > 3) result2 *= 0.5;\r\n               if (target.hp == 4) result2 *= 0.9;\r\n               if (target.hp == 5) result2 *= 0.8;\r\n               if (target.hp > 5) result2 *= 0.6;\r\n            }\r\n            else {\r\n               result2 += temp02;\r\n               result1 += temp01;\r\n            }\r\n            if (zeroplayer) result1 = 0;\r\n            if (zerotarget) result2 = 0;\r\n            var final = 0;\r\n            if (player2) {\r\n               final = (result1 * get.attitude(player2, player) + (target ? result2 * get.attitude(player2, target) : 0));\r\n            }\r\n            else final = (result1 * get.attitude(player, player) + (target ? result2 * get.attitude(player, target) : 0));\r\n            if (!isLink && get.tag(card, 'natureDamage') && !zerotarget) {\r\n               var info = get.info(card);\r\n               if (!info || !info.ai || !info.ai.canLink) {\r\n                  if (target.isLinked()) game.countPlayer(function (current) {\r\n                     if (current != target && current.isLinked()) final += get.effect(current, card, player, player2, true);\r\n                  });\r\n               }\r\n               else if (info.ai.canLink(player, target, card)) {\r\n                  game.countPlayer(function (current) {\r\n                     if (current != target && current.isLinked()) final += get.effect(current, card, player, player2, true);\r\n                  });\r\n               }\r\n            }\r\n            return final;\r\n         },\r\n         /**\r\n          * 返回一个角色对目标(使用一张游戏牌|造成伤害|回复血量)的效果值\r\n          * @param {?GameCores.GameObjects.Player} target 目标\r\n          * @param {!GameCores.GameObjects.Card} card 游戏牌对象，除了牌名，其他属性或函数可以为空\r\n          * @param {?string} [card.name] 牌名，如果未指定，`card`使用`_status.event.skill`\r\n          * @param {?GameCores.GameObjects.Player} [player] 角色，如果未指定，使用当前事件角色\r\n          * @param {?GameCores.GameObjects.Player} player2 观察者\r\n          * @param {?boolean} [isLink] 是否计算被链接的角色，如果为true，不计算；如果为false或未指定，对效果值$effect$，被链接的角色$P_n$(包括`target`)，游戏牌$C$，角色$P2$，观察者$O$，计算公式：${effect}=\\sum_{i=0}^{n-1}{get.effect(P_i, C, P2, O, true)})$。\r\n          * @returns {number}\r\n          */\r\n         effect: function (target, card, player, player2, isLink) {\r\n            var Evt = _status.event;\r\n            var eventskill = null;\r\n            if (player == undefined) player = _status.event.player;\r\n            if (typeof card != 'string' && (typeof card != 'object' || !card.name)) {\r\n               var skillinfo = get.info(Evt.skill);\r\n               if (Evt.skill && skillinfo.viewAs == undefined) card = _status.event.skill;\r\n               else {\r\n                  card = get.card();\r\n                  if (skillinfo && skillinfo.viewAs && card.name === skillinfo.viewAs.name) {\r\n                     eventskill = Evt.skill;\r\n                  }\r\n               }\r\n            }\r\n            var result = get.result(card, eventskill);\r\n            var result1 = result.player, result2 = result.target;\r\n            if (typeof result1 == 'function') result1 = result1(player, target, card, isLink);\r\n            if (typeof result2 == 'function') result2 = result2(player, target, card, isLink);\r\n\r\n            if (typeof result1 != 'number') result1 = 0;\r\n            if (typeof result2 != 'number') result2 = 0;\r\n            var temp1, temp2, temp3, temp01 = 0, temp02 = 0, threaten = 1;\r\n            var skills1 = player.getSkills().concat(lib.skill.global);\r\n            game.expandSkills(skills1);\r\n            var zerotarget = false, zeroplayer = false;\r\n            for (var i = 0; i < skills1.length; i++) {\r\n               temp1 = get.info(skills1[i]).ai;\r\n               if (temp1 && typeof temp1.effect == 'object' && typeof temp1.effect.player == 'function') {\r\n                  temp1 = temp1.effect.player(card, player, target, result1, isLink);\r\n               }\r\n               else temp1 = undefined;\r\n               if (typeof temp1 == 'object') {\r\n                  if (temp1.length == 2 || temp1.length == 4) {\r\n                     result1 *= temp1[0];\r\n                     temp01 += temp1[1];\r\n                  }\r\n                  if (temp1.length == 4) {\r\n                     result2 *= temp1[2];\r\n                     temp02 += temp1[3];\r\n                  }\r\n               }\r\n               else if (typeof temp1 == 'number') {\r\n                  result1 *= temp1;\r\n               }\r\n               else if (temp1 == 'zeroplayer') {\r\n                  zeroplayer = true;\r\n               }\r\n               else if (temp1 == 'zerotarget') {\r\n                  zerotarget = true;\r\n               }\r\n               else if (temp1 == 'zeroplayertarget') {\r\n                  zeroplayer = true;\r\n                  zerotarget = true;\r\n               }\r\n            }\r\n            if (target) {\r\n               var skills2 = target.getSkills().concat(lib.skill.global);\r\n               game.expandSkills(skills2);\r\n               for (var i = 0; i < skills2.length; i++) {\r\n                  temp2 = get.info(skills2[i]).ai;\r\n                  if (temp2 && temp2.threaten) temp3 = temp2.threaten;\r\n                  else temp3 = undefined;\r\n                  if (temp2 && typeof temp2.effect == 'function') {\r\n                     if (!player.hasSkillTag('ignoreSkill', true, {\r\n                        card: card,\r\n                        target: target,\r\n                        skill: skills2[i],\r\n                        isLink: isLink,\r\n                     })) temp2 = temp2.effect(card, player, target, result2, isLink);\r\n                     else temp2 = undefined;\r\n                  }\r\n                  else if (temp2 && typeof temp2.effect == 'object' && typeof temp2.effect.target == 'function') {\r\n                     if (!player.hasSkillTag('ignoreSkill', true, {\r\n                        card: card,\r\n                        target: target,\r\n                        skill: skills2[i],\r\n                        isLink: isLink,\r\n                     })) temp2 = temp2.effect.target(card, player, target, result2, isLink);\r\n                     else temp2 = undefined;\r\n                  }\r\n                  else temp2 = undefined;\r\n                  if (typeof temp2 == 'object') {\r\n                     if (temp2.length == 2 || temp2.length == 4) {\r\n                        result2 *= temp2[0];\r\n                        temp02 += temp2[1];\r\n                     }\r\n                     if (temp2.length == 4) {\r\n                        result1 *= temp2[2];\r\n                        temp01 += temp2[3];\r\n                     }\r\n                  }\r\n                  else if (typeof temp2 == 'number') {\r\n                     result2 *= temp2;\r\n                  }\r\n                  else if (temp2 == 'zeroplayer') {\r\n                     zeroplayer = true;\r\n                  }\r\n                  else if (temp2 == 'zerotarget') {\r\n                     zerotarget = true;\r\n                  }\r\n                  else if (temp2 == 'zeroplayertarget') {\r\n                     zeroplayer = true;\r\n                     zerotarget = true;\r\n                  }\r\n                  if (typeof temp3 == 'function' && temp3(player, target) != undefined) {\r\n                     threaten *= temp3(player, target);\r\n                  }\r\n                  else if (typeof temp3 == 'object') {\r\n                     if (typeof temp3.target == 'number') {\r\n                        threaten *= temp3;\r\n                     }\r\n                     else if (typeof temp3.target == 'function' && temp3(player, target) != undefined) {\r\n                        threaten *= temp3(player, target);\r\n                     }\r\n                  }\r\n                  else if (typeof temp3 == 'number') {\r\n                     threaten *= temp3;\r\n                  }\r\n               }\r\n               result2 += temp02;\r\n               result1 += temp01;\r\n               if (get.attitude(player, target) < 0) {\r\n                  result2 *= Math.sqrt(threaten);\r\n               }\r\n               else {\r\n                  result2 *= Math.sqrt(Math.sqrt(threaten));\r\n               }\r\n               // *** continue here ***\r\n               if (target.hp == 1) result2 *= 2.5;\r\n               if (target.hp == 2) result2 *= 1.8;\r\n               if (target.countCards('h') == 0) {\r\n                  if (get.tag(card, 'respondSha') || get.tag(card, 'respondShan')) {\r\n                     result2 *= 1.7;\r\n                  }\r\n                  else {\r\n                     result2 *= 1.5;\r\n                  }\r\n               }\r\n               if (target.countCards('h') == 1) result2 *= 1.3;\r\n               if (target.countCards('h') == 2) result2 *= 1.1;\r\n               if (target.countCards('h') > 3) result2 *= 0.5;\r\n               if (target.hp == 4) result2 *= 0.9;\r\n               if (target.hp == 5) result2 *= 0.8;\r\n               if (target.hp > 5) result2 *= 0.6;\r\n               // if(get.attitude(player,target)<0){\r\n               //     result2*=threaten;\r\n               // }\r\n               // else{\r\n               //     result2*=Math.sqrt(threaten);\r\n               // }\r\n               // if(target.hp<=1) result2*=2;\r\n               // if(target.hp==2) result2*=1.1;\r\n               // if(target.countCards('h')==0){\r\n               //     result2*=1.1;\r\n               //     if(get.tag(card,'respondSha')||get.tag(card,'respondShan')) result2*=1.4;\r\n               // }\r\n               // if(target.countCards('h')==1) result2*=1.05;\r\n               // if(target.countCards('h')==2) result2*=1.02;\r\n               // if(target.countCards('h')>3) result2*=0.9;\r\n               // if(target.hp==4) result2*=0.9;\r\n               // if(target.hp==5) result2*=0.8;\r\n               // if(target.hp>5) result2*=0.6;\r\n            }\r\n            else {\r\n               result2 += temp02;\r\n               result1 += temp01;\r\n            }\r\n            if (zeroplayer) result1 = 0;\r\n            if (zerotarget) result2 = 0;\r\n            var final = 0;\r\n            if (player2) {\r\n               final = (result1 * get.attitude(player2, player) + (target ? result2 * get.attitude(player2, target) : 0));\r\n            }\r\n            else final = (result1 * get.attitude(player, player) + (target ? result2 * get.attitude(player, target) : 0));\r\n            if (!isLink && get.tag(card, 'natureDamage') && !zerotarget) {\r\n               var info = get.info(card);\r\n               if (!info || !info.ai || !info.ai.canLink) {\r\n                  if (target.isLinked()) game.countPlayer(function (current) {\r\n                     if (current != target && current.isLinked()) final += get.effect(current, card, player, player2, true);\r\n                  });\r\n               }\r\n               else if (info.ai.canLink(player, target, card)) {\r\n                  game.countPlayer(function (current) {\r\n                     if (current != target && current.isLinked()) final += get.effect(current, card, player, player2, true);\r\n                  });\r\n               }\r\n            }\r\n            return final;\r\n         },\r\n         /**\r\n          * 返回源对目标进行伤害的效果值\r\n          * @param {GameCores.GameObjects.Player} target 目标\r\n          * @param {?GameCores.GameObjects.Player} [player] 源，如果未指定，使用`target`\r\n          * @param {?GameCores.GameObjects.Player} [viewer] 观察者，用于判断最后的效果是正效果(对观察者或其方有益)还是负效果(对观察者敌方有益)；如果未指定，使用`target`\r\n          * @param {?string} [nature] 伤害属性，如果未指定，则非属性伤害\r\n          * @returns {number}\r\n          */\r\n         damageEffect: function (target, player, viewer, nature) {\r\n            if (!player) {\r\n               player = target;\r\n            }\r\n            if (!viewer) {\r\n               viewer = target;\r\n            }\r\n            var name = 'damage';\r\n            if (nature == 'fire') {\r\n               name = 'firedamage';\r\n            }\r\n            else if (nature == 'thunder') {\r\n               name = 'thunderdamage';\r\n            }\r\n            else if (nature == 'ocean') {\r\n               name = 'oceandamage';\r\n            }\r\n            else if (nature == 'ice') {\r\n               name = 'icedamage';\r\n            }\r\n            else if (nature == 'yami') {\r\n               name = 'yamidamage';\r\n            }\r\n            var eff = get.effect(target, { name: name }, player, viewer);\r\n            if (eff > 0 && target.hujia > 0) return 0;\r\n            return eff;\r\n         },\r\n         /**\r\n          * 返回源对目标回复血量的效果值，如果目标当前没有损失血量，返回0值(无效果)\r\n          * @param {GameCores.GameObjects.Player} target 目标\r\n          * @param {?GameCores.GameObjects.Player} [player] 源，如果未指定，使用`target`\r\n          * @param {?GameCores.GameObjects.Player} [viewer] 观察者，用于判断最后的效果是正效果(对观察者或其方有益)还是负效果(对观察者敌方有益)；如果未指定，使用`target`\r\n          * @returns {number}\r\n          */\r\n         recoverEffect: function (target, player, viewer) {\r\n            if (target.hp == target.maxHp) return 0;\r\n            if (!player) {\r\n               player = target;\r\n            }\r\n            if (!viewer) {\r\n               viewer = target;\r\n            }\r\n            return get.effect(target, { name: 'recover' }, player, viewer);\r\n         },\r\n         /**\r\n          * 返回按钮绑定(手牌|装备区|判定区|正在判定的)卡牌所属的角色使用此牌的收益\r\n          * 如果是其他区域的牌，返回当前事件的角色使用此牌的收益，**这个时候**，此函数假定当前事件的角色(`_status.event.player`)存在，所以如果当前事件的角色未定义或者为空，此函数会报错\r\n          * @param {HTMLDivElement} button 按钮，返回此按钮的收益\r\n          * @returns {number}\r\n          */\r\n         buttonValue: function (button) {\r\n            var card = button.link;\r\n            var player = get.owner(card);\r\n            if (!player) player = _status.event.player;\r\n            if (player.getCards('j').contains(card)) {\r\n               var efff = get.effect(player, {\r\n                  name: card.viewAs || card.name,\r\n                  cards: [card],\r\n               }, player, player);\r\n               if (efff > 0) return 0.5;\r\n               if (efff == 0) return 0;\r\n               return -1.5;\r\n            }\r\n            if (player.getCards('e').contains(card)) {\r\n               var evalue = get.value(card, player);\r\n               if (player.hasSkillTag('noe')) {\r\n                  if (evalue >= 7) {\r\n                     return evalue / 6;\r\n                  }\r\n                  return evalue / 10;\r\n               }\r\n               return evalue / 3;\r\n            }\r\n            if (player.hasSkillTag('noh')) return 0.1;\r\n            var nh = player.countCards('h');\r\n            switch (nh) {\r\n               case 1: return 2;\r\n               case 2: return 1.6;\r\n               case 3: return 1;\r\n               case 4: return 0.8;\r\n               case 5: return 0.6;\r\n               default: return 0.4;\r\n            }\r\n         },\r\n         /**\r\n          * 返回当前事件角色对一个角色的态度值\r\n          * @param {GameCores.GameObjects.Player} to 一个角色，返回对该角色的态度值\r\n          * @param {number}\r\n          */\r\n         attitude2: function (to) {\r\n            return get.attitude(_status.event.player, to);\r\n         },\r\n      }\r\n   }\r\n}\n\n//# sourceURL=webpack:///./game/get.js?")},"./game/lib.js":function(module,__unused_webpack_exports,__webpack_require__){eval("module.exports = {\r\n  libFun: (vkCore) => {\r\n    let { game, ui, get, ai, lib, _status } = vkCore\r\n    return {\r\n      figure: '<span style=\"font-family: LuoLiTi2;color: #dbb\">',\r\n      figurer: (text) => ` ${lib.figure}${text}</span> `,\r\n      spanClass: (str, classes) => {\r\n        return `<span class=\"${classes}\">${str}</span>`\r\n      },\r\n      discoloration1: \"<samp id='渐变'><font face='yuanli'><style>#渐变{animation:change 0.8s linear 0s infinite;}@keyframes change{0% {color:#FF0000;}20%{color:#F0A00F;}50% {color:#F000FF;}80%{color: #F0A00F;}100%{color:#FF0000;}}</style>\",\r\n\r\n      changeLog: [],\r\n      updates: [],\r\n      canvasUpdates: [],\r\n      video: [],\r\n      skilllist: [],\r\n      connectBanned: [],\r\n      characterIntro: {},\r\n      characterTitle: {},\r\n      characterPack: {},\r\n      characterFilter: {},\r\n      characterSort: {},\r\n      characterReplace: {},\r\n      dynamicTranslate: {},\r\n      cardPack: {},\r\n      onresize: [],\r\n      onphase: [],\r\n      onwash: [],\r\n      onover: [],\r\n      ondb: [],\r\n      ondb2: [],\r\n      chatHistory: [],\r\n      animate: {\r\n        skill: {},\r\n        card: {},\r\n      },\r\n      arenaReady: [],\r\n      onfree: [],\r\n      inpile: [],\r\n      extensions: [],\r\n      extensionPack: {},\r\n      cardType: {},\r\n      hook: { globaltrigger: {}, globalskill: {} },\r\n      hookmap: {},\r\n      imported: {},\r\n      layoutfixed: ['chess', 'tafang', 'stone'],//??\r\n      /**\r\n       * 角色选择弹窗中的特殊选项\r\n       * ['收藏', '最近']\r\n       * @name lib.characterDialogGroup\r\n       * @see {@link ui.create.characterDialog}\r\n       */\r\n      characterDialogGroup: {\r\n        '收藏': function (name, capt) {\r\n          return lib.config.favouriteCharacter.contains(name) ? capt : null;\r\n        },\r\n        '最近': function (name, capt) {\r\n          var list = get.config('recentCharacter') || [];\r\n          return list.contains(name) ? capt : null;\r\n        }\r\n      },\r\n      /**\r\n       * 监听节点动画结束\r\n       * @param {HTMLDivELement} node 节点\r\n       */\r\n      listenEnd: function (node) {\r\n        if (!node._listeningEnd) {\r\n          node._listeningEnd = true;\r\n          node.listenTransition(function () {\r\n            delete node._listeningEnd;\r\n            if (node._onEndMoveDelete) {\r\n              node.moveDelete(node._onEndMoveDelete);\r\n            }\r\n            else if (node._onEndDelete) {\r\n              node.delete();\r\n            }\r\n            node._transitionEnded = true;\r\n          });\r\n        }\r\n      },\r\n      /**\r\n       * 游戏模式菜单\r\n       * @name configMenu.mode\r\n       * @type {!Object}\r\n       */\r\n      mode: {\r\n        //引导\r\n        yindao: {\r\n          name: '引导',\r\n          config: {\r\n            update: function (config, map) {\r\n            },\r\n          }\r\n        },\r\n        // richer: {\r\n        //     name: '大富翁',\r\n        //     connect: {\r\n        //         connect_player_number: {\r\n        //             name: '游戏人数',\r\n        //             init: '6',\r\n        //             item: {\r\n        //                 '2': '两人',\r\n        //                 '3': '三人',\r\n        //                 '4': '四人',\r\n        //                 '5': '五人',\r\n        //                 '6': '六人',\r\n        //             },\r\n        //             frequent: true,\r\n        //             restart: true,\r\n        //         },\r\n        //         update: function (config, map) {\r\n        //         },\r\n        //         connect_show_range: {\r\n        //             name: '显示卡牌范围',\r\n        //             init: true,\r\n        //         },\r\n        //         // connect_show_distance:{\r\n        //         // \tname:'显示距离',\r\n        //         // \tinit:true,\r\n        //         // },\r\n        //         connect_chessscroll_speed: {\r\n        //             name: '边缘滚动速度',\r\n        //             init: '20',\r\n        //             intro: '鼠标移至屏幕边缘时自动滚屏',\r\n        //             item: {\r\n        //                 '0': '不滚动',\r\n        //                 '10': '10格/秒',\r\n        //                 '20': '20格/秒',\r\n        //                 '30': '30格/秒',\r\n        //             }\r\n        //         },\r\n        //     },\r\n        //     config: {\r\n        //         player_number: {\r\n        //             name: '游戏人数',\r\n        //             init: '6',\r\n        //             item: {\r\n        //                 '2': '两人',\r\n        //                 '3': '三人',\r\n        //                 '4': '四人',\r\n        //                 '5': '五人',\r\n        //                 '6': '六人',\r\n        //             },\r\n        //             frequent: true,\r\n        //             restart: true,\r\n        //         },\r\n        //         update: function (config, map) {\r\n        //             switch (config.player_number) {\r\n        //                 case 4:\r\n        //                 case 6: {\r\n        //                     map.team_number.show();\r\n        //                     break;\r\n        //                 }\r\n        //                 default: {\r\n        //                     map.team_number.hide();\r\n        //                     break;\r\n        //                 }\r\n\r\n        //             }\r\n        //         },\r\n        //         show_range: {\r\n        //             name: '显示卡牌范围',\r\n        //             init: true,\r\n        //         },\r\n        //         team_number: {\r\n        //             name: '每队人数',\r\n        //             init: '1',\r\n        //             item: {\r\n        //                 '1': '单人',\r\n        //                 '2': '两人',\r\n        //             },\r\n        //             frequent: true,\r\n        //             restart: true,\r\n        //         },\r\n        //         chessscroll_speed: {\r\n        //             name: '边缘滚动速度',\r\n        //             init: '20',\r\n        //             intro: '鼠标移至屏幕边缘时自动滚屏',\r\n        //             item: {\r\n        //                 '0': '不滚动',\r\n        //                 '10': '10格/秒',\r\n        //                 '20': '20格/秒',\r\n        //                 '30': '30格/秒',\r\n        //             }\r\n        //         },\r\n        //     }\r\n        // },\r\n        identity: {\r\n          name: '身份',\r\n          connect: {\r\n            update: function (config, map) {\r\n              if (config.connect_identity_mode == 'zhong') {\r\n                map.connect_change_choice.hide();\r\n                map.choice_ex.hide();\r\n                map.connect_player_number.hide();\r\n                map.connect_enhance_zhu.hide();\r\n                map.connect_double_nei.hide();\r\n                map.connect_zhong_card.show();\r\n                map.connect_special_identity.hide();\r\n                map.connect_double_character.show();\r\n              }\r\n              else if (config.connect_identity_mode == 'purple') {\r\n                map.connect_change_choice.hide();\r\n                map.choice_ex.hide();\r\n                map.connect_player_number.hide();\r\n                map.connect_enhance_zhu.hide();\r\n                map.connect_double_nei.hide();\r\n                map.connect_zhong_card.hide();\r\n                map.connect_special_identity.hide();\r\n                map.connect_double_character.hide();\r\n              }\r\n              else {\r\n                map.connect_change_choice.show();\r\n                map.choice_ex.show();\r\n                map.connect_double_character.show();\r\n                map.connect_player_number.show();\r\n                map.connect_enhance_zhu.show();\r\n                if (config.connect_player_number != '2') {\r\n                  map.connect_double_nei.show();\r\n                }\r\n                else {\r\n                  map.connect_double_nei.hide();\r\n                }\r\n                map.connect_zhong_card.hide();\r\n\r\n                if (config.connect_player_number == '8') {\r\n                  map.connect_special_identity.show();\r\n                }\r\n                else {\r\n                  map.connect_special_identity.hide();\r\n                }\r\n              }\r\n            },\r\n            connect_identity_mode: {\r\n              name: '游戏模式',\r\n              init: 'normal',\r\n              item: {\r\n                normal: '标准',\r\n                zhong: '明忠',\r\n                purple: '3v3v2',\r\n              },\r\n              restart: true,\r\n              frequent: true,\r\n              intro: '明忠模式和3v3v2模式详见帮助'\r\n            },\r\n            connect_player_number: {\r\n              name: '游戏人数',\r\n              init: '8',\r\n              item: {\r\n                '2': '两人',\r\n                '3': '三人',\r\n                '4': '四人',\r\n                '5': '五人',\r\n                '6': '六人',\r\n                '7': '七人',\r\n                '8': '八人'\r\n              },\r\n              frequent: true,\r\n              restart: true,\r\n            },\r\n            connect_zhong_card: {\r\n              name: '明忠卡牌替换',\r\n              init: true,\r\n              frequent: true,\r\n              restart: true\r\n            },\r\n            connect_double_nei: {\r\n              name: '双内奸',\r\n              init: false,\r\n              restart: true,\r\n              // frequent:true,\r\n              intro: '开启后游戏中将有两个内奸（内奸胜利条件仍为主内1v1时击杀主公）'\r\n            },\r\n            connect_double_character: {\r\n              name: '双将模式',\r\n              init: false,\r\n              frequent: true,\r\n              restart: true,\r\n            },\r\n            connect_change_card: {\r\n              name: '启用手气卡',\r\n              init: false,\r\n              frequent: true,\r\n              restart: true,\r\n            },\r\n            connect_change_choice: {\r\n              name: '点将模式',\r\n              init: false,\r\n              frequent: true,\r\n              restart: true,\r\n            },\r\n            connect_special_identity: {\r\n              name: '特殊身份',\r\n              init: false,\r\n              restart: true,\r\n              frequent: true,\r\n              intro: '开启后游戏中将增加军师、大将、贼首三个身份'\r\n            },\r\n            // connect_ban_weak:{\r\n            //     name:'屏蔽弱将',\r\n            //     init:true,\r\n            //     restart:true,\r\n            // },\r\n            // connect_ban_strong:{\r\n            //     name:'屏蔽强将',\r\n            //     init:false,\r\n            //     restart:true,\r\n            // },\r\n            connect_enhance_zhu: {\r\n              name: '加强主公',\r\n              init: false,\r\n              restart: true,\r\n              intro: '为主公增加一个额外技能'\r\n            },\r\n            choice_ex: {\r\n              name: '额外选将框',\r\n              init: '0',\r\n              restart: true,\r\n              item: {\r\n                '0': '〇',\r\n                '1': '一',\r\n                '2': '二',\r\n                '3': '三',\r\n                '4': '四',\r\n                '5': '五',\r\n              },\r\n              intro: '为所有玩家分配额外选将框'\r\n            },\r\n            card_remark: {\r\n              name: '装备回调',\r\n              init: false,\r\n              frequent: true,\r\n              restart: true,\r\n              intro: '将军争和基础包的装备牌回调至《三国杀》原版'\r\n            }\r\n          },\r\n          config: {\r\n            update: function (config, map) {\r\n              if (config.identity_mode == 'zhong') {\r\n                map.player_number.hide();\r\n                map.enhance_zhu.hide();\r\n                map.double_nei.hide();\r\n                map.auto_identity.hide();\r\n                map.choice_ex.hide();\r\n                map.choice_zhu.hide();\r\n                map.choice_zhong.hide();\r\n                map.choice_nei.hide();\r\n                map.choice_fan.hide();\r\n                map.ban_identity.hide();\r\n                map.ban_identity2.hide();\r\n                map.ban_identity3.hide();\r\n                map.zhong_card.show();\r\n                map.special_identity.hide();\r\n                map.choose_group.show();\r\n                map.change_choice.show();\r\n                map.auto_mark_identity.show();\r\n                map.double_character.show();\r\n                map.free_choose.show();\r\n                map.change_identity.show();\r\n                if (config.double_character) {\r\n                  map.double_hp.show();\r\n                }\r\n                else {\r\n                  map.double_hp.hide();\r\n                }\r\n                map.continue_game.show();\r\n              }\r\n              else if (config.identity_mode == 'purple') {\r\n                map.player_number.hide();\r\n                map.enhance_zhu.hide();\r\n                map.double_nei.hide();\r\n                map.auto_identity.hide();\r\n                map.choice_ex.hide();\r\n                map.choice_zhu.hide();\r\n                map.choice_zhong.hide();\r\n                map.choice_nei.hide();\r\n                map.choice_fan.hide();\r\n                map.ban_identity.hide();\r\n                map.ban_identity2.hide();\r\n                map.ban_identity3.hide();\r\n                map.zhong_card.hide();\r\n                map.special_identity.hide();\r\n                map.double_character.hide();\r\n                map.double_hp.hide();\r\n                map.choose_group.hide();\r\n                map.auto_mark_identity.hide();\r\n                map.change_choice.hide();\r\n                map.free_choose.hide();\r\n                map.change_identity.hide();\r\n                map.continue_game.hide();\r\n              }\r\n              else {\r\n                map.continue_game.show();\r\n                map.player_number.show();\r\n                map.enhance_zhu.show();\r\n                map.auto_identity.show();\r\n                if (config.player_number != '2') {\r\n                  map.double_nei.show();\r\n                }\r\n                else {\r\n                  map.double_nei.hide();\r\n                }\r\n                map.choice_ex.show();\r\n                map.choice_zhu.show();\r\n                map.choice_zhong.show();\r\n                map.choice_nei.show();\r\n                map.choice_fan.show();\r\n                map.ban_identity.show();\r\n                if (config.ban_identity == 'off') {\r\n                  map.ban_identity2.hide();\r\n                }\r\n                else {\r\n                  map.ban_identity2.show();\r\n                }\r\n                if (config.ban_identity == 'off' || config.ban_identity2 == 'off') {\r\n                  map.ban_identity3.hide();\r\n                }\r\n                else {\r\n                  map.ban_identity3.show();\r\n                }\r\n                map.zhong_card.hide();\r\n                map.choose_group.show();\r\n                map.auto_mark_identity.show();\r\n                map.change_choice.show();\r\n                map.free_choose.show();\r\n                map.change_identity.show();\r\n                if (config.player_number == '8') {\r\n                  map.special_identity.show();\r\n                }\r\n                else {\r\n                  map.special_identity.hide();\r\n                }\r\n                map.double_character.show();\r\n                if (config.double_character) {\r\n                  map.double_hp.show();\r\n                }\r\n                else {\r\n                  map.double_hp.hide();\r\n                }\r\n              }\r\n            },\r\n            identity_mode: {\r\n              name: '游戏模式',\r\n              init: 'normal',\r\n              item: {\r\n                normal: '标准',\r\n                zhong: '明忠',\r\n                purple: '3v3v2',\r\n              },\r\n              restart: true,\r\n              frequent: true,\r\n              intro: '明忠模式详见帮助'\r\n            },\r\n            player_number: {\r\n              name: '游戏人数',\r\n              init: '3',\r\n              item: {\r\n                '2': '两人',\r\n                '3': '三人',\r\n                '4': '四人',\r\n                '5': '五人',\r\n                '6': '六人',\r\n                '7': '七人',\r\n                '8': '八人'\r\n              },\r\n              frequent: true,\r\n              restart: true,\r\n            },\r\n            double_nei: {\r\n              name: '双内奸',\r\n              init: false,\r\n              restart: true,\r\n              frequent: true,\r\n              intro: '开启后游戏中将有两个内奸（内奸胜利条件仍为主内1v1时击杀主公）'\r\n            },\r\n            choose_group: {\r\n              name: '神武将选择势力',\r\n              init: true,\r\n              restart: true,\r\n              frequent: true,\r\n              intro: '若开启此选项，选择神武将的玩家需在亮出自己的武将牌之前为自己选择一个势力。'\r\n            },\r\n            nei_fullscreenpop: {\r\n              name: '主内单挑特效',\r\n              intro: '在进入主内单挑时，弹出全屏文字特效',\r\n              init: true,\r\n              unfrequent: true,\r\n            },\r\n            double_character: {\r\n              name: '双将模式',\r\n              init: false,\r\n              frequent: true,\r\n              restart: true,\r\n            },\r\n            special_identity: {\r\n              name: '特殊身份',\r\n              init: false,\r\n              restart: true,\r\n              frequent: true,\r\n              intro: '开启后游戏中将增加军师、大将、贼首三个身份'\r\n            },\r\n            zhong_card: {\r\n              name: '明忠卡牌替换',\r\n              init: true,\r\n              frequent: true,\r\n              restart: true\r\n            },\r\n            double_hp: {\r\n              name: '双将体力上限',\r\n              init: 'pingjun',\r\n              item: {\r\n                hejiansan: '和减三',\r\n                pingjun: '平均值',\r\n                zuidazhi: '最大值',\r\n                zuixiaozhi: '最小值',\r\n                zonghe: '相加',\r\n              },\r\n              restart: true,\r\n            },\r\n            auto_identity: {\r\n              name: '自动显示身份',\r\n              item: {\r\n                off: '关闭',\r\n                one: '一轮',\r\n                two: '两轮',\r\n                three: '三轮',\r\n                always: '始终'\r\n              },\r\n              init: 'off',\r\n              onclick: function (bool) {\r\n                game.saveConfig('auto_identity', bool, this._link.config.mode);\r\n                if (get.config('identity_mode') == 'zhong') return;\r\n                var num;\r\n                switch (bool) {\r\n                  case '一轮': num = 1; break;\r\n                  case '两轮': num = 2; break;\r\n                  case '三轮': num = 3; break;\r\n                  default: num = 0; break;\r\n                }\r\n                if (num && !_status.identityShown && game.phaseNumber > game.players.length * num && game.showIdentity) {\r\n                  _status.identityShown = true;\r\n                  game.showIdentity(false);\r\n                }\r\n              },\r\n              intro: '游戏进行若干轮将自动显示所有角色的身份',\r\n            },\r\n            auto_mark_identity: {\r\n              name: '自动标记身份',\r\n              init: true,\r\n              intro: '根据角色的出牌行为自动标记可能的身份',\r\n            },\r\n            // ban_weak:{\r\n            //     name:'屏蔽弱将',\r\n            //     init:true,\r\n            //     restart:true,\r\n            // },\r\n            // ban_strong:{\r\n            //     name:'屏蔽强将',\r\n            //     init:false,\r\n            //     restart:true,\r\n            // },\r\n            enhance_zhu: {\r\n              name: '加强主公',\r\n              init: false,\r\n              restart: true,\r\n              intro: '为主公增加一个额外技能'\r\n            },\r\n            free_choose: {\r\n              name: '自由选将',\r\n              init: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('free_choose', bool, this._link.config.mode);\r\n                if (!_status.event.getParent().showConfig && !_status.event.showConfig) return;\r\n                if (!ui.cheat2 && get.config('free_choose')) ui.create.cheat2();\r\n                else if (ui.cheat2 && !get.config('free_choose')) {\r\n                  ui.cheat2.close();\r\n                  delete ui.cheat2;\r\n                }\r\n              }\r\n            },\r\n            change_identity: {\r\n              name: '自由选择身份和座位',\r\n              init: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('change_identity', bool, this._link.config.mode);\r\n                if (!_status.event.getParent().showConfig && !_status.event.showConfig) return;\r\n                var dialog;\r\n                if (ui.cheat2 && ui.cheat2.backup) dialog = ui.cheat2.backup;\r\n                else dialog = _status.event.dialog;\r\n                if (!_status.brawl || !_status.brawl.noAddSetting) {\r\n                  if (!dialog.querySelector('table') && get.config('change_identity')) _status.event.getParent().addSetting(dialog);\r\n                  else _status.event.getParent().removeSetting(dialog);\r\n                }\r\n                ui.update();\r\n              }\r\n            },\r\n            change_choice: {\r\n              name: '开启换将卡',\r\n              init: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('change_choice', bool, this._link.config.mode);\r\n                if (!_status.event.getParent().showConfig && !_status.event.showConfig) return;\r\n                if (!ui.cheat && get.config('change_choice')) ui.create.cheat();\r\n                else if (ui.cheat && !get.config('change_choice')) {\r\n                  ui.cheat.close();\r\n                  delete ui.cheat;\r\n                }\r\n              }\r\n            },\r\n            change_card: {\r\n              name: '开启手气卡',\r\n              init: 'disabled',\r\n              item: {\r\n                disabled: '禁用',\r\n                once: '一次',\r\n                twice: '两次',\r\n                unlimited: '无限',\r\n              },\r\n            },\r\n            continue_game: {\r\n              name: '显示再战',\r\n              init: false,\r\n              onclick: function (bool) {\r\n                game.saveConfig('continue_game', bool, this._link.config.mode);\r\n                if (get.config('continue_game')) {\r\n                  if (!ui.continue_game && _status.over && !_status.brawl && !game.no_continue_game) {\r\n                    ui.continue_game = ui.create.control('再战', game.reloadCurrent);\r\n                  }\r\n                }\r\n                else if (ui.continue_game) {\r\n                  ui.continue_game.close();\r\n                  delete ui.continue_game;\r\n                }\r\n              },\r\n              intro: '游戏结束后可选择用相同的武将再进行一局游戏'\r\n            },\r\n            dierestart: {\r\n              name: '死亡后显示重来',\r\n              init: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('dierestart', bool, this._link.config.mode);\r\n                if (get.config('dierestart')) {\r\n                  if (!ui.restart && game.me.isDead() && !_status.connectMode) {\r\n                    ui.restart = ui.create.control('restart', game.reload);\r\n                  }\r\n                }\r\n                else if (ui.restart) {\r\n                  ui.restart.close();\r\n                  delete ui.restart;\r\n                }\r\n              }\r\n            },\r\n            revive: {\r\n              name: '死亡后显示复活',\r\n              init: false,\r\n              onclick: function (bool) {\r\n                game.saveConfig('revive', bool, this._link.config.mode);\r\n                if (get.config('revive')) {\r\n                  if (!ui.revive && game.me.isDead()) {\r\n                    ui.revive = ui.create.control('revive', ui.click.dierevive);\r\n                  }\r\n                }\r\n                else if (ui.revive) {\r\n                  ui.revive.close();\r\n                  delete ui.revive;\r\n                }\r\n              }\r\n            },\r\n            ban_identity: {\r\n              name: '屏蔽身份',\r\n              init: 'off',\r\n              item: {\r\n                off: '关闭',\r\n                zhu: '主公',\r\n                zhong: '忠臣',\r\n                nei: '内奸',\r\n                fan: '反贼',\r\n              },\r\n            },\r\n            ban_identity2: {\r\n              name: '屏蔽身份2',\r\n              init: 'off',\r\n              item: {\r\n                off: '关闭',\r\n                zhu: '主公',\r\n                zhong: '忠臣',\r\n                nei: '内奸',\r\n                fan: '反贼',\r\n              },\r\n            },\r\n            ban_identity3: {\r\n              name: '屏蔽身份3',\r\n              init: 'off',\r\n              item: {\r\n                off: '关闭',\r\n                zhu: '主公',\r\n                zhong: '忠臣',\r\n                nei: '内奸',\r\n                fan: '反贼',\r\n              },\r\n            },\r\n            ai_strategy: {\r\n              name: '内奸策略',\r\n              init: 'ai_strategy_1',\r\n              item: {\r\n                ai_strategy_1: '均衡',\r\n                ai_strategy_2: '偏反',\r\n                ai_strategy_3: '偏忠',\r\n                ai_strategy_4: '酱油',\r\n                ai_strategy_5: '天使',\r\n                ai_strategy_6: '仇主',\r\n              },\r\n              intro: '设置内奸对主忠反的态度'\r\n            },\r\n            difficulty: {\r\n              name: 'AI对人类态度',\r\n              init: 'normal',\r\n              item: {\r\n                easy: '友好',\r\n                normal: '一般',\r\n                hard: '仇视',\r\n              },\r\n            },\r\n            choice_ex: {\r\n              name: '额外选将框',\r\n              init: '0',\r\n              restart: true,\r\n              item: {\r\n                '0': '关闭',\r\n                '1': '一',\r\n                '2': '二',\r\n                '4': '四',\r\n                '6': '六',\r\n                '8': '八',\r\n              },\r\n              intro: '为所有玩家分配额外选将框'\r\n            },\r\n            choice_zhu: {\r\n              name: '主公候选武将数',\r\n              init: '3',\r\n              restart: true,\r\n              item: {\r\n                '3': '三',\r\n                '4': '四',\r\n                '5': '五',\r\n                '6': '六',\r\n                '8': '八',\r\n                '10': '十',\r\n              },\r\n            },\r\n            choice_zhong: {\r\n              name: '忠臣候选武将数',\r\n              init: '4',\r\n              restart: true,\r\n              item: {\r\n                '3': '三',\r\n                '4': '四',\r\n                '5': '五',\r\n                '6': '六',\r\n                '8': '八',\r\n                '10': '十',\r\n              },\r\n            },\r\n            choice_nei: {\r\n              name: '内奸候选武将数',\r\n              init: '5',\r\n              restart: true,\r\n              item: {\r\n                '3': '三',\r\n                '4': '四',\r\n                '5': '五',\r\n                '6': '六',\r\n                '8': '八',\r\n                '10': '十',\r\n              },\r\n            },\r\n            choice_fan: {\r\n              name: '反贼候选武将数',\r\n              init: '3',\r\n              restart: true,\r\n              item: {\r\n                '3': '三',\r\n                '4': '四',\r\n                '5': '五',\r\n                '6': '六',\r\n                '8': '八',\r\n                '10': '十',\r\n              },\r\n            },\r\n            card_remark: {\r\n              name: '装备回调',\r\n              init: false,\r\n              frequent: true,\r\n              restart: true,\r\n              intro: '将军争和基础包的装备牌回调至《三国杀》原版'\r\n            }\r\n          }\r\n        },\r\n        guozhan: {\r\n          name: '国战',\r\n          connect: {\r\n            update: function (config, map) {\r\n              if (config.connect_onlyguozhan) {\r\n                map.connect_junzhu.show();\r\n              }\r\n              else {\r\n                map.connect_junzhu.hide();\r\n              }\r\n            },\r\n            connect_guozhan_mode: {\r\n              name: '游戏模式',\r\n              init: 'normal',\r\n              item: {\r\n                normal: '势备',\r\n                yingbian: '应变',\r\n                old: '怀旧',\r\n              },\r\n              frequent: true,\r\n              restart: true,\r\n              intro: '<li>势备：默认模式，使用线下《君临天下·势备篇》的牌堆进行游戏。<br><li>应变：使用OL的应变国战牌堆进行游戏。<br><li>怀旧：使用传统国战的牌堆进行游戏。',\r\n            },\r\n            connect_player_number: {\r\n              name: '游戏人数',\r\n              init: '8',\r\n              item: {\r\n                '3': '三人',\r\n                '4': '四人',\r\n                '5': '五人',\r\n                '6': '六人',\r\n                '7': '七人',\r\n                '8': '八人'\r\n              },\r\n              frequent: true,\r\n              restart: true,\r\n            },\r\n            connect_initshow_draw: {\r\n              name: '首亮奖励',\r\n              item: {\r\n                'off': '关闭',\r\n                'draw': '摸牌',\r\n                'mark': '标记',\r\n              },\r\n              init: 'mark',\r\n              frequent: true,\r\n              intro: '第一个明置武将牌的角色可获得首亮奖励'\r\n            },\r\n            connect_aozhan: {\r\n              name: '鏖战模式',\r\n              init: true,\r\n              intro: '若开启此选项，则将在游戏中引入“鏖战模式”的规则：<br>当游戏中仅剩四名或更少角色时（七人以下游戏时改为三名或更少），若此时全场没有超过一名势力相同的角色，则从一个新的回合开始，游戏进入鏖战模式直至游戏结束。<br>◇在鏖战模式下，【桃】只能当做【杀】或【闪】使用或打出，不能用来回复体力。<br>注：进入鏖战模式后，即使之后有两名或者更多势力相同的角色出现，仍然不会取消鏖战模式。',\r\n              frequent: true,\r\n              restart: true,\r\n            },\r\n            connect_viewnext: {\r\n              name: '观看下家副将',\r\n              init: false,\r\n              intro: '若开启此选项，所有的玩家将在挑选武将后，分发起始手牌之前，分别观看自己下家的副将。',\r\n            },\r\n            connect_zhulian: {\r\n              name: '珠联璧合',\r\n              init: true,\r\n              // frequent:true,\r\n              intro: '主将和副将都明置后，若为特定组合，可获得【珠联璧合】标记'\r\n            },\r\n            connect_junzhu: {\r\n              name: '替换君主',\r\n              init: true,\r\n              // frequent:true,\r\n              restart: true,\r\n              intro: '若开启此选项，玩家的第一个回合开始时，若其主武将牌有对应的君主武将牌，则其可以将此武将牌替换为对应的君主武将牌，然后重新调整体力上限。若玩家的体力上限因此增大，则玩家回复等量的体力。'\r\n            },\r\n            connect_change_card: {\r\n              name: '启用手气卡',\r\n              init: false,\r\n              frequent: true,\r\n              restart: true,\r\n            },\r\n            card_remark: {\r\n              name: '装备回调',\r\n              init: false,\r\n              frequent: true,\r\n              restart: true,\r\n              intro: '将军争和基础包的装备牌回调至《三国杀》原版'\r\n            }\r\n            // connect_ban_weak:{\r\n            //     name:'屏蔽弱将',\r\n            //     init:false,\r\n            //     restart:true,\r\n            // },\r\n            // connect_ban_strong:{\r\n            //     name:'屏蔽强将',\r\n            //     init:false,\r\n            //     restart:true,\r\n            // },\r\n          },\r\n          config: {\r\n            update: function (config, map) {\r\n              if (config.onlyguozhan) {\r\n                map.junzhu.show();\r\n              }\r\n              else {\r\n                map.junzhu.hide();\r\n              }\r\n            },\r\n            guozhan_mode: {\r\n              name: '游戏模式',\r\n              init: 'normal',\r\n              item: {\r\n                normal: '势备',\r\n                yingbian: '应变',\r\n                old: '怀旧',\r\n                free: '自由',\r\n              },\r\n              frequent: true,\r\n              restart: true,\r\n              intro: '<li>势备：默认模式，使用线下《君临天下·势备篇》的牌堆进行游戏。<br><li>应变：使用OL的应变国战牌堆进行游戏。<br><li>怀旧：使用传统国战的牌堆进行游戏。<br><li>自由：使用玩家的自定义牌堆进行游戏。',\r\n            },\r\n            player_number: {\r\n              name: '游戏人数',\r\n              init: '8',\r\n              item: {\r\n                '3': '三人',\r\n                '4': '四人',\r\n                '5': '五人',\r\n                '6': '六人',\r\n                '7': '七人',\r\n                '8': '八人'\r\n              },\r\n              frequent: true,\r\n              restart: true,\r\n            },\r\n            initshow_draw: {\r\n              name: '首亮奖励',\r\n              item: {\r\n                'off': '关闭',\r\n                'draw': '摸牌',\r\n                'mark': '标记',\r\n              },\r\n              init: 'mark',\r\n              frequent: true,\r\n              intro: '第一个明置身份牌的角色可获得摸牌奖励'\r\n            },\r\n            aozhan: {\r\n              name: '鏖战模式',\r\n              init: true,\r\n              frequent: true,\r\n              restart: true,\r\n              intro: '若开启此选项，则将在游戏中引入“鏖战模式”的规则：<br>当游戏中仅剩四名或更少角色时（七人以下游戏时改为三名或更少），若此时全场没有超过一名势力相同的角色，则从一个新的回合开始，游戏进入鏖战模式直至游戏结束。<br>◇在鏖战模式下，【桃】只能当做【杀】或【闪】使用或打出，不能用来回复体力。<br>注：进入鏖战模式后，即使之后有两名或者更多势力相同的角色出现，仍然不会取消鏖战模式。',\r\n            },\r\n            viewnext: {\r\n              name: '观看下家副将',\r\n              init: false,\r\n              intro: '若开启此选项，所有的玩家将在挑选武将后，分发起始手牌之前，分别观看自己下家的副将。',\r\n            },\r\n            aozhan_bgm: {\r\n              name: '鏖战背景音乐',\r\n              item: {\r\n                disabled: '不启用',\r\n                online: 'Online',\r\n                rewrite: 'Rewrite',\r\n                chaoming: '潮鸣',\r\n              },\r\n              init: 'rewrite',\r\n              onclick: function (item) {\r\n                game.saveConfig('aozhan_bgm', item, this._link.config.mode);\r\n                if (_status._aozhan == true) game.playBackgroundMusic();\r\n              },\r\n            },\r\n            zhulian: {\r\n              name: '珠联璧合',\r\n              init: true,\r\n              // frequent:true,\r\n              intro: '主将和副将都明置后，若为特定组合，可获得【珠联璧合】标记'\r\n            },\r\n            changeViceType: {\r\n              name: '副将变更方式',\r\n              init: 'default',\r\n              item: {\r\n                default: '发现式',\r\n                online: '随机式',\r\n              },\r\n              frequent: true,\r\n              restart: true,\r\n            },\r\n            onlyguozhan: {\r\n              name: '使用国战武将',\r\n              init: true,\r\n              frequent: true,\r\n              restart: true,\r\n              intro: '开启武将技能将替换为国战版本并禁用非国战武将'\r\n            },\r\n            guozhanSkin: {\r\n              name: '使用国战皮肤',\r\n              init: true,\r\n              frequent: true,\r\n              restart: true,\r\n              intro: '开启此选项后，将会把有国战专属皮肤的武将替换为国战皮肤'\r\n            },\r\n            junzhu: {\r\n              name: '替换君主',\r\n              init: true,\r\n              // frequent:true,\r\n              restart: true,\r\n              intro: '若开启此选项，玩家的第一个回合开始时，若其主武将牌有对应的君主武将牌，则其可以将此武将牌替换为对应的君主武将牌，然后重新调整体力上限。若玩家的体力上限因此增大，则玩家回复等量的体力。'\r\n            },\r\n            double_hp: {\r\n              name: '双将体力上限',\r\n              init: 'pingjun',\r\n              item: {\r\n                hejiansan: '和减三',\r\n                pingjun: '平均值',\r\n                zuidazhi: '最大值',\r\n                zuixiaozhi: '最小值',\r\n                zonghe: '相加',\r\n              },\r\n              restart: true,\r\n            },\r\n            // ban_weak:{\r\n            //     name:'屏蔽弱将',\r\n            //     init:true,\r\n            //     restart:true,\r\n            // },\r\n            // ban_strong:{\r\n            //     name:'屏蔽强将',\r\n            //     init:false,\r\n            //     restart:true,\r\n            // },\r\n            free_choose: {\r\n              name: '自由选将',\r\n              init: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('free_choose', bool, this._link.config.mode);\r\n                if (!_status.event.getParent().showConfig && !_status.event.showConfig) return;\r\n                if (!ui.cheat2 && get.config('free_choose')) ui.create.cheat2();\r\n                else if (ui.cheat2 && !get.config('free_choose')) {\r\n                  ui.cheat2.close();\r\n                  delete ui.cheat2;\r\n                }\r\n              }\r\n            },\r\n            onlyguozhanexpand: {\r\n              name: '默认展开自由选将',\r\n              init: false,\r\n              restart: true,\r\n              intro: '开启后自由选将对话框将默认显示全部武将'\r\n            },\r\n            change_identity: {\r\n              name: '自由选择座位',\r\n              init: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('change_identity', bool, this._link.config.mode);\r\n                if (!_status.event.getParent().showConfig && !_status.event.showConfig) return;\r\n                var dialog;\r\n                if (ui.cheat2 && ui.cheat2.backup) dialog = ui.cheat2.backup;\r\n                else dialog = _status.event.dialog;\r\n                if (!_status.brawl || !_status.brawl.noAddSetting) {\r\n                  if (!dialog.querySelector('table') && get.config('change_identity')) _status.event.getParent().addSetting(dialog);\r\n                  else _status.event.getParent().removeSetting(dialog);\r\n                }\r\n                ui.update();\r\n              }\r\n            },\r\n            change_choice: {\r\n              name: '开启换将卡',\r\n              init: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('change_choice', bool, this._link.config.mode);\r\n                if (!_status.event.getParent().showConfig && !_status.event.showConfig) return;\r\n                if (!ui.cheat && get.config('change_choice')) ui.create.cheat();\r\n                else if (ui.cheat && !get.config('change_choice')) {\r\n                  ui.cheat.close();\r\n                  delete ui.cheat;\r\n                }\r\n              }\r\n            },\r\n            change_card: {\r\n              name: '开启手气卡',\r\n              init: 'disabled',\r\n              item: {\r\n                disabled: '禁用',\r\n                once: '一次',\r\n                twice: '两次',\r\n                unlimited: '无限',\r\n              }\r\n            },\r\n            continue_game: {\r\n              name: '显示再战',\r\n              init: true,\r\n              intro: '游戏结束后可选择用相同的武将再进行一局游戏',\r\n              onclick: function (bool) {\r\n                game.saveConfig('continue_game', bool, this._link.config.mode);\r\n                if (get.config('continue_game')) {\r\n                  if (!ui.continue_game && _status.over && !_status.brawl && !game.no_continue_game) {\r\n                    ui.continue_game = ui.create.control('再战', game.reloadCurrent);\r\n                  }\r\n                }\r\n                else if (ui.continue_game) {\r\n                  ui.continue_game.close();\r\n                  delete ui.continue_game;\r\n                }\r\n              }\r\n            },\r\n            dierestart: {\r\n              name: '死亡后显示重来',\r\n              init: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('dierestart', bool, this._link.config.mode);\r\n                if (get.config('dierestart')) {\r\n                  if (!ui.restart && game.me.isDead() && !_status.connectMode) {\r\n                    ui.restart = ui.create.control('restart', game.reload);\r\n                  }\r\n                }\r\n                else if (ui.restart) {\r\n                  ui.restart.close();\r\n                  delete ui.restart;\r\n                }\r\n              }\r\n            },\r\n            revive: {\r\n              name: '死亡后显示复活',\r\n              init: false,\r\n              onclick: function (bool) {\r\n                game.saveConfig('revive', bool, this._link.config.mode);\r\n                if (get.config('revive')) {\r\n                  if (!ui.revive && game.me.isDead()) {\r\n                    ui.revive = ui.create.control('revive', ui.click.dierevive);\r\n                  }\r\n                }\r\n                else if (ui.revive) {\r\n                  ui.revive.close();\r\n                  delete ui.revive;\r\n                }\r\n              }\r\n            },\r\n            difficulty: {\r\n              name: 'AI对人类态度',\r\n              init: 'normal',\r\n              item: {\r\n                easy: '友好',\r\n                normal: '一般',\r\n                hard: '仇视',\r\n              }\r\n            },\r\n            choice_num: {\r\n              name: '候选武将数',\r\n              init: '7',\r\n              restart: true,\r\n              item: {\r\n                '5': '五',\r\n                '6': '六',\r\n                '7': '七',\r\n                '8': '八',\r\n                '9': '九',\r\n                '10': '十',\r\n              }\r\n            },\r\n            card_remark: {\r\n              name: '装备回调',\r\n              init: false,\r\n              frequent: true,\r\n              restart: true,\r\n              intro: '将军争和基础包的装备牌回调至《三国杀》原版'\r\n            }\r\n          }\r\n        },\r\n        versus: {\r\n          name: '对决',\r\n          connect: {\r\n            update: function (config, map) {\r\n              if (config.connect_versus_mode == '1v1') {\r\n                map.connect_choice_num.show();\r\n                map.connect_replace_number.show();\r\n              }\r\n              else {\r\n                map.connect_choice_num.hide();\r\n                map.connect_replace_number.hide();\r\n              }\r\n              if (config.connect_versus_mode == '2v2' || config.connect_versus_mode == '3v3') {\r\n                map.connect_replace_handcard.show();\r\n              }\r\n              else {\r\n                map.connect_replace_handcard.hide();\r\n              }\r\n            },\r\n            connect_versus_mode: {\r\n              name: '游戏模式',\r\n              init: '1v1',\r\n              item: {\r\n                '1v1': '1v1',\r\n                '2v2': '2v2',\r\n                '3v3': '3v3',\r\n                '4v4': '4v4',\r\n                //'guandu':'官渡',\r\n              },\r\n              frequent: true\r\n            },\r\n            connect_replace_handcard: {\r\n              name: '四号位保护',\r\n              init: true,\r\n              frequent: true,\r\n              intro: '最后行动的角色起始手牌数+1'\r\n            },\r\n            connect_choice_num: {\r\n              name: '侯选武将数',\r\n              init: '20',\r\n              frequent: true,\r\n              item: {\r\n                '12': '12人',\r\n                '16': '16人',\r\n                '20': '20人',\r\n                '24': '24人',\r\n                '40': '40人',\r\n              }\r\n            },\r\n            connect_replace_number: {\r\n              name: '替补人数',\r\n              init: '2',\r\n              frequent: true,\r\n              item: {\r\n                '0': '无',\r\n                '1': '1人',\r\n                '2': '2人',\r\n                '3': '3人',\r\n                '4': '4人',\r\n                '5': '5人',\r\n              }\r\n            },\r\n            // connect_ban_weak:{\r\n            //     name:'屏蔽弱将',\r\n            //     init:true,\r\n            //     restart:true,\r\n            // },\r\n            // connect_ban_strong:{\r\n            //     name:'屏蔽强将',\r\n            //     init:false,\r\n            //     restart:true,\r\n            // },\r\n          },\r\n          config: {\r\n            update: function (config, map) {\r\n              if (config.versus_mode == 'four') {\r\n                map.change_choice.hide();\r\n                map.ladder.show();\r\n                if (config.ladder) {\r\n                  map.ladder_monthly.show();\r\n                  map.ladder_reset.show();\r\n                }\r\n                else {\r\n                  map.ladder_monthly.hide();\r\n                  map.ladder_reset.hide();\r\n                }\r\n                map.enable_all.show();\r\n                map.enable_all_cards_four.show();\r\n                map.four_assign.show();\r\n                map.four_phaseswap.show();\r\n                map.expand_dialog.show();\r\n                map.fouralign.show();\r\n              }\r\n              else {\r\n                map.change_choice.show();\r\n                map.ladder.hide();\r\n                map.ladder_monthly.hide();\r\n                map.ladder_reset.hide();\r\n                map.enable_all.hide();\r\n                map.enable_all_cards_four.hide();\r\n                map.four_assign.hide();\r\n                map.four_phaseswap.hide();\r\n                map.expand_dialog.hide();\r\n                map.fouralign.hide();\r\n              }\r\n              if (config.versus_mode == 'three' || config.versus_mode == 'one') {\r\n                map.enable_all_three.show();\r\n                map.enable_all_cards.show();\r\n              }\r\n              else {\r\n                map.enable_all_three.hide();\r\n                map.enable_all_cards.hide();\r\n              }\r\n              if (config.versus_mode == 'jiange' || config.versus_mode == 'two' || config.versus_mode == 'endless' ||\r\n                config.versus_mode == 'three' || config.versus_mode == 'one' || config.versus_mode == 'siguo') {\r\n                map.free_choose.show();\r\n              }\r\n              else {\r\n                map.free_choose.hide();\r\n              }\r\n              if (config.versus_mode == 'jiange') {\r\n                map.double_character_jiange.show();\r\n              }\r\n              else {\r\n                map.double_character_jiange.hide();\r\n              }\r\n              if (config.versus_mode == 'two') {\r\n                map.replace_handcard_two.show();\r\n                map.replace_character_two.show();\r\n                map.two_assign.show();\r\n                map.two_phaseswap.show();\r\n              }\r\n              else {\r\n                map.replace_handcard_two.hide();\r\n                map.replace_character_two.hide();\r\n                map.two_assign.hide();\r\n                map.two_phaseswap.hide();\r\n              }\r\n              if (config.versus_mode == 'two' || config.versus_mode == 'siguo' || config.versus_mode == 'four') {\r\n                if (config.versus_mode == 'four' && (config.four_assign || config.four_phaseswap)) {\r\n                  map.change_identity.hide();\r\n                }\r\n                else {\r\n                  map.change_identity.show();\r\n                }\r\n              }\r\n              else {\r\n                map.change_identity.hide();\r\n              }\r\n              if (config.versus_mode == 'siguo') {\r\n                map.siguo_character.show();\r\n              }\r\n              else {\r\n                map.siguo_character.hide();\r\n              }\r\n            },\r\n            versus_mode: {\r\n              name: '游戏模式',\r\n              init: 'four',\r\n              item: {\r\n                four: '对抗',\r\n                three: '统率',\r\n                two: '欢乐',\r\n                //guandu:'官渡',\r\n                jiange: '战场',\r\n                siguo: '四国',\r\n                standard: '自由'\r\n                // endless:'无尽',\r\n                // triple:'血战',\r\n                // one:'<span style=\"display:inline-block;width:100%;text-align:center\">1v1</span>',\r\n              },\r\n              restart: true,\r\n              frequent: true,\r\n            },\r\n            ladder: {\r\n              name: '天梯模式',\r\n              init: true,\r\n              frequent: true,\r\n              restart: true\r\n            },\r\n            ladder_monthly: {\r\n              name: '每月重置天梯',\r\n              init: true,\r\n              frequent: true,\r\n            },\r\n            enable_all: {\r\n              name: '启用全部武将',\r\n              init: false,\r\n              frequent: true,\r\n              restart: true,\r\n            },\r\n            enable_all_cards_four: {\r\n              name: '启用全部卡牌',\r\n              init: false,\r\n              frequent: true,\r\n              restart: true,\r\n            },\r\n            enable_all_three: {\r\n              name: '启用全部武将',\r\n              init: false,\r\n              frequent: true,\r\n              restart: true,\r\n            },\r\n            enable_all_cards: {\r\n              name: '启用全部卡牌',\r\n              init: false,\r\n              frequent: true,\r\n              restart: true,\r\n            },\r\n            four_assign: {\r\n              name: '代替队友选将',\r\n              init: false,\r\n              restart: true,\r\n            },\r\n            four_phaseswap: {\r\n              name: '代替队友行动',\r\n              init: false,\r\n              restart: true,\r\n            },\r\n            two_assign: {\r\n              name: '代替队友选将',\r\n              init: false,\r\n              restart: true,\r\n            },\r\n            two_phaseswap: {\r\n              name: '代替队友行动',\r\n              init: false,\r\n              restart: true,\r\n            },\r\n            free_choose: {\r\n              name: '自由选将',\r\n              init: true,\r\n              frequent: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('free_choose', bool, this._link.config.mode);\r\n                if (!ui.create.cheat2) return;\r\n                if (!_status.event.getParent().showConfig && !_status.event.showConfig) return;\r\n                if (!ui.cheat2 && get.config('free_choose')) ui.create.cheat2();\r\n                else if (ui.cheat2 && !get.config('free_choose')) {\r\n                  ui.cheat2.close();\r\n                  delete ui.cheat2;\r\n                }\r\n              }\r\n            },\r\n            fouralign: {\r\n              name: '自由选择阵型',\r\n              init: false\r\n            },\r\n            change_identity: {\r\n              name: '自由选择座位',\r\n              init: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('change_identity', bool, this._link.config.mode);\r\n                if (!_status.event.getParent().showConfig && !_status.event.showConfig) return;\r\n                if (_status.mode == 'four') {\r\n                  if (get.config('four_assign') || get.config('four_phaseswap')) return;\r\n                  if (bool) {\r\n                    if (_status.event.parent.addSetting) {\r\n                      _status.event.parent.addSetting();\r\n                    }\r\n                  }\r\n                  else {\r\n                    var seats = _status.event.parent.seatsbutton;\r\n                    if (seats) {\r\n                      while (seats.length) {\r\n                        seats.shift().remove();\r\n                      }\r\n                      delete _status.event.parent.seatsbutton;\r\n                    }\r\n                  }\r\n                }\r\n                else {\r\n                  var dialog;\r\n                  if (ui.cheat2 && ui.cheat2.backup) dialog = ui.cheat2.backup;\r\n                  else dialog = _status.event.dialog;\r\n                  if (!_status.brawl || !_status.brawl.noAddSetting) {\r\n                    if (!dialog.querySelector('table') && get.config('change_identity')) _status.event.getParent().addSetting(dialog);\r\n                    else _status.event.getParent().removeSetting(dialog);\r\n                  }\r\n                  ui.update();\r\n                }\r\n              }\r\n            },\r\n            change_choice: {\r\n              name: '开启换将卡',\r\n              init: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('change_choice', bool, this._link.config.mode);\r\n                if (!_status.event.getParent().showConfig && !_status.event.showConfig) return;\r\n                if (!ui.cheat && get.config('change_choice')) ui.create.cheat();\r\n                else if (ui.cheat && !get.config('change_choice')) {\r\n                  ui.cheat.close();\r\n                  delete ui.cheat;\r\n                }\r\n              },\r\n              frequent: true,\r\n            },\r\n            double_character_jiange: {\r\n              name: '双将模式',\r\n              init: false,\r\n              frequent: true,\r\n            },\r\n            replace_handcard_two: {\r\n              name: '四号位保护',\r\n              init: true,\r\n              frequent: true,\r\n              intro: '最后行动的角色起始手牌+1'\r\n            },\r\n            replace_character_two: {\r\n              name: '替补模式',\r\n              init: false,\r\n              frequent: true,\r\n              intro: '每个额外选择一名武将，死亡后用该武将代替重新上场，替补武将用完时失败'\r\n            },\r\n            expand_dialog: {\r\n              name: '默认展开选将框',\r\n              intro: '选将框打开时直接显示全部武将（可能使游戏在开始时卡顿）',\r\n              init: false,\r\n            },\r\n            siguo_character: {\r\n              name: '专属武将出场率',\r\n              init: 'increase',\r\n              item: {\r\n                increase: '大概率',\r\n                normal: '默认概率',\r\n                off: '不出现',\r\n              },\r\n              frequent: true\r\n            },\r\n            // ban_weak:{\r\n            //     name:'屏蔽弱将',\r\n            //     init:true,\r\n            //     restart:true,\r\n            // },\r\n            // ban_strong:{\r\n            //     name:'屏蔽强将',\r\n            //     init:false,\r\n            //     restart:true\r\n            // },\r\n            ladder_reset: {\r\n              name: '重置天梯数据',\r\n              onclick: function () {\r\n                var node = this;\r\n                if (node._clearing) {\r\n                  game.save('ladder', {\r\n                    current: 900,\r\n                    top: 900,\r\n                    month: (new Date()).getMonth()\r\n                  });\r\n                  ui.ladder.innerHTML = '卫士五';\r\n                  clearTimeout(node._clearing);\r\n                  node.firstChild.innerHTML = '重置天梯数据';\r\n                  delete node._clearing;\r\n                  return;\r\n                }\r\n                node.firstChild.innerHTML = '单击以确认 (3)';\r\n                node._clearing = setTimeout(function () {\r\n                  node.firstChild.innerHTML = '单击以确认 (2)';\r\n                  node._clearing = setTimeout(function () {\r\n                    node.firstChild.innerHTML = '单击以确认 (1)';\r\n                    node._clearing = setTimeout(function () {\r\n                      node.firstChild.innerHTML = '重置天梯数据';\r\n                      delete node._clearing;\r\n                    }, 1000);\r\n                  }, 1000);\r\n                }, 1000);\r\n              },\r\n              clear: true,\r\n            },\r\n          }\r\n        },\r\n        connect: {\r\n          name: '联机',\r\n          config: {\r\n            connect_nickname: {\r\n              name: '联机昵称',\r\n              input: true,\r\n              frequent: true,\r\n            },\r\n            connect_avatar: {\r\n              name: '联机头像',\r\n              init: 'KizunaAI',\r\n              item: {},\r\n              frequent: true,\r\n              onclick: function (item) {\r\n                game.saveConfig('connect_avatar', item);\r\n                game.saveConfig('connect_avatar', item, 'connect');\r\n              }\r\n            },\r\n            hall_ip: {\r\n              name: '联机大厅',\r\n              input: true,\r\n              frequent: true,\r\n            },\r\n            hall_button: {\r\n              name: '联机大厅按钮',\r\n              init: true,\r\n              frequent: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('hall_button', bool, 'connect');\r\n                if (ui.hall_button) {\r\n                  if (bool) {\r\n                    ui.hall_button.style.display = '';\r\n                  }\r\n                  else {\r\n                    ui.hall_button.style.display = 'none';\r\n                  }\r\n                }\r\n              }\r\n            },\r\n          }\r\n        },\r\n        boss: {\r\n          name: '挑战',\r\n          config: {\r\n            free_choose: {\r\n              name: '自由选将',\r\n              init: true,\r\n              frequent: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('free_choose', bool, this._link.config.mode);\r\n                if (!_status.event.getParent().showConfig && !_status.event.showConfig) return;\r\n                if (!ui.cheat2 && get.config('free_choose')) ui.create.cheat2();\r\n                else if (ui.cheat2 && !get.config('free_choose')) {\r\n                  ui.cheat2.close();\r\n                  delete ui.cheat2;\r\n                }\r\n              }\r\n            },\r\n            change_choice: {\r\n              name: '开启换将卡',\r\n              init: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('change_choice', bool, this._link.config.mode);\r\n                if (!_status.event.getParent().showConfig && !_status.event.showConfig) return;\r\n                if (!ui.cheat && get.config('change_choice')) ui.create.cheat();\r\n                else if (ui.cheat && !get.config('change_choice')) {\r\n                  ui.cheat.close();\r\n                  delete ui.cheat;\r\n                }\r\n              },\r\n              frequent: true,\r\n            },\r\n            single_control: {\r\n              name: '单人控制',\r\n              init: true,\r\n              frequent: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('single_control', bool, this._link.config.mode);\r\n                if (ui.single_swap && game.me != game.boss) {\r\n                  if (bool) {\r\n                    ui.single_swap.style.display = 'none';\r\n                  }\r\n                  else {\r\n                    ui.single_swap.style.display = '';\r\n                  }\r\n                }\r\n              },\r\n              intro: '只控制一名角色，其他角色由AI控制'\r\n            },\r\n            // ban_weak:{\r\n            //     name:'屏蔽弱将',\r\n            //     init:true,\r\n            //     restart:true,\r\n            // },\r\n            // ban_strong:{\r\n            //     name:'屏蔽强将',\r\n            //     init:false,\r\n            //     restart:true,\r\n            // },\r\n          }\r\n        },\r\n        doudizhu: {\r\n          name: '斗地主',\r\n          connect: {\r\n            update: function (config, map) {\r\n              if (config.connect_doudizhu_mode == 'online') {\r\n                map.connect_change_card.hide();\r\n              }\r\n              else {\r\n                map.connect_change_card.show();\r\n              }\r\n              if (config.connect_doudizhu_mode != 'normal') {\r\n                map.connect_double_character.hide();\r\n              }\r\n              else {\r\n                map.connect_double_character.show();\r\n              }\r\n            },\r\n            connect_doudizhu_mode: {\r\n              name: '游戏模式',\r\n              init: 'normal',\r\n              item: {\r\n                normal: '休闲',\r\n                kaihei: '开黑',\r\n                huanle: '欢乐',\r\n                binglin: '兵临',\r\n                online: '智斗',\r\n              },\r\n              restart: true,\r\n              frequent: true,\r\n            },\r\n            connect_double_character: {\r\n              name: '双将模式',\r\n              init: false,\r\n              frequent: true,\r\n              restart: true,\r\n            },\r\n            connect_change_card: {\r\n              name: '启用手气卡',\r\n              init: false,\r\n              frequent: true,\r\n              restart: true,\r\n            },\r\n          },\r\n          config: {\r\n            update: function (config, map) {\r\n              if (config.doudizhu_mode == 'online') {\r\n                map.change_card.hide();\r\n              }\r\n              else {\r\n                map.change_card.show();\r\n              }\r\n              if (config.doudizhu_mode != 'normal') {\r\n                map.double_character.hide();\r\n                map.free_choose.hide();\r\n                map.change_identity.hide();\r\n                map.change_choice.hide();\r\n                map.continue_game.hide();\r\n                map.dierestart.hide();\r\n                map.choice_zhu.hide();\r\n                map.choice_fan.hide();\r\n                map.revive.hide();\r\n              }\r\n              else {\r\n                map.double_character.show();\r\n                map.free_choose.show();\r\n                map.change_identity.show();\r\n                map.change_choice.show();\r\n                map.continue_game.show();\r\n                map.dierestart.show();\r\n                map.choice_zhu.show();\r\n                map.choice_fan.show();\r\n                map.revive.show();\r\n              }\r\n              if (config.double_character && config.doudizhu_mode == 'normal') {\r\n                map.double_hp.show();\r\n              }\r\n              else {\r\n                map.double_hp.hide();\r\n              }\r\n            },\r\n            doudizhu_mode: {\r\n              name: '游戏模式',\r\n              init: 'normal',\r\n              item: {\r\n                normal: '休闲',\r\n                kaihei: '开黑',\r\n                huanle: '欢乐',\r\n                binglin: '兵临',\r\n                online: '智斗',\r\n              },\r\n              restart: true,\r\n              frequent: true,\r\n            },\r\n            double_character: {\r\n              name: '双将模式',\r\n              init: false,\r\n              frequent: true,\r\n              restart: true,\r\n            },\r\n            double_hp: {\r\n              name: '双将体力上限',\r\n              init: 'pingjun',\r\n              item: {\r\n                hejiansan: '和减三',\r\n                pingjun: '平均值',\r\n                zuidazhi: '最大值',\r\n                zuixiaozhi: '最小值',\r\n                zonghe: '相加',\r\n              },\r\n              restart: true,\r\n            },\r\n            free_choose: {\r\n              name: '自由选将',\r\n              init: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('free_choose', bool, this._link.config.mode);\r\n                if (!_status.event.getParent().showConfig && !_status.event.showConfig) return;\r\n                if (!ui.cheat2 && get.config('free_choose')) ui.create.cheat2();\r\n                else if (ui.cheat2 && !get.config('free_choose')) {\r\n                  ui.cheat2.close();\r\n                  delete ui.cheat2;\r\n                }\r\n              }\r\n            },\r\n            change_identity: {\r\n              name: '自由选择身份和座位',\r\n              init: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('change_identity', bool, this._link.config.mode);\r\n                if (!_status.event.getParent().showConfig && !_status.event.showConfig) return;\r\n                var dialog;\r\n                if (ui.cheat2 && ui.cheat2.backup) dialog = ui.cheat2.backup;\r\n                else dialog = _status.event.dialog;\r\n                if (!_status.brawl || !_status.brawl.noAddSetting) {\r\n                  if (!dialog.querySelector('table') && get.config('change_identity')) _status.event.getParent().addSetting(dialog);\r\n                  else _status.event.getParent().removeSetting(dialog);\r\n                }\r\n                ui.update();\r\n              }\r\n            },\r\n            change_choice: {\r\n              name: '开启换将卡',\r\n              init: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('change_choice', bool, this._link.config.mode);\r\n                if (!_status.event.getParent().showConfig && !_status.event.showConfig) return;\r\n                if (!ui.cheat && get.config('change_choice')) ui.create.cheat();\r\n                else if (ui.cheat && !get.config('change_choice')) {\r\n                  ui.cheat.close();\r\n                  delete ui.cheat;\r\n                }\r\n              }\r\n            },\r\n            change_card: {\r\n              name: '开启手气卡',\r\n              init: 'disabled',\r\n              item: {\r\n                disabled: '禁用',\r\n                once: '一次',\r\n                twice: '两次',\r\n                unlimited: '无限',\r\n              },\r\n            },\r\n            continue_game: {\r\n              name: '显示再战',\r\n              init: false,\r\n              onclick: function (bool) {\r\n                game.saveConfig('continue_game', bool, this._link.config.mode);\r\n                if (get.config('continue_game')) {\r\n                  if (!ui.continue_game && _status.over && !_status.brawl && !game.no_continue_game) {\r\n                    ui.continue_game = ui.create.control('再战', game.reloadCurrent);\r\n                  }\r\n                }\r\n                else if (ui.continue_game) {\r\n                  ui.continue_game.close();\r\n                  delete ui.continue_game;\r\n                }\r\n              },\r\n              intro: '游戏结束后可选择用相同的武将再进行一局游戏'\r\n            },\r\n            dierestart: {\r\n              name: '死亡后显示重来',\r\n              init: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('dierestart', bool, this._link.config.mode);\r\n                if (get.config('dierestart')) {\r\n                  if (!ui.restart && game.me.isDead() && !_status.connectMode) {\r\n                    ui.restart = ui.create.control('restart', game.reload);\r\n                  }\r\n                }\r\n                else if (ui.restart) {\r\n                  ui.restart.close();\r\n                  delete ui.restart;\r\n                }\r\n              }\r\n            },\r\n            revive: {\r\n              name: '死亡后显示复活',\r\n              init: false,\r\n              onclick: function (bool) {\r\n                game.saveConfig('revive', bool, this._link.config.mode);\r\n                if (get.config('revive')) {\r\n                  if (!ui.revive && game.me.isDead()) {\r\n                    ui.revive = ui.create.control('revive', ui.click.dierevive);\r\n                  }\r\n                }\r\n                else if (ui.revive) {\r\n                  ui.revive.close();\r\n                  delete ui.revive;\r\n                }\r\n              }\r\n            },\r\n            choice_zhu: {\r\n              name: '地主候选武将数',\r\n              init: '3',\r\n              restart: true,\r\n              item: {\r\n                '3': '三',\r\n                '4': '四',\r\n                '5': '五',\r\n                '6': '六',\r\n                '8': '八',\r\n                '10': '十',\r\n              },\r\n            },\r\n            choice_fan: {\r\n              name: '农民候选武将数',\r\n              init: '3',\r\n              restart: true,\r\n              item: {\r\n                '3': '三',\r\n                '4': '四',\r\n                '5': '五',\r\n                '6': '六',\r\n                '8': '八',\r\n                '10': '十',\r\n              },\r\n            },\r\n          }\r\n        },\r\n        longlaoguan: {\r\n          name: '龙牢关',\r\n          connect: {\r\n            update: function (config, map) { },\r\n            connect_change_card: {\r\n              name: '启用手气卡',\r\n              init: false,\r\n              frequent: true,\r\n              restart: true,\r\n            },\r\n          },\r\n          config: {\r\n            update: function (config, map) {\r\n              if (config.double_character) {\r\n                map.double_hp.show();\r\n              }\r\n              else {\r\n                map.double_hp.hide();\r\n              }\r\n            },\r\n            double_character: {\r\n              name: '双将模式',\r\n              init: false,\r\n              frequent: true,\r\n              restart: true,\r\n            },\r\n            double_hp: {\r\n              name: '双将体力上限',\r\n              init: 'pingjun',\r\n              item: {\r\n                hejiansan: '和减三',\r\n                pingjun: '平均值',\r\n                zuidazhi: '最大值',\r\n                zuixiaozhi: '最小值',\r\n                zonghe: '相加',\r\n              },\r\n              restart: true,\r\n            },\r\n            free_choose: {\r\n              name: '自由选将',\r\n              init: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('free_choose', bool, this._link.config.mode);\r\n                if (!_status.event.getParent().showConfig && !_status.event.showConfig) return;\r\n                if (!ui.cheat2 && get.config('free_choose')) ui.create.cheat2();\r\n                else if (ui.cheat2 && !get.config('free_choose')) {\r\n                  ui.cheat2.close();\r\n                  delete ui.cheat2;\r\n                }\r\n              }\r\n            },\r\n            change_identity: {\r\n              name: '自由选择身份和座位',\r\n              init: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('change_identity', bool, this._link.config.mode);\r\n                if (!_status.event.getParent().showConfig && !_status.event.showConfig) return;\r\n                var dialog;\r\n                if (ui.cheat2 && ui.cheat2.backup) dialog = ui.cheat2.backup;\r\n                else dialog = _status.event.dialog;\r\n                if (!_status.brawl || !_status.brawl.noAddSetting) {\r\n                  if (!dialog.querySelector('table') && get.config('change_identity')) _status.event.getParent().addSetting(dialog);\r\n                  else _status.event.getParent().removeSetting(dialog);\r\n                }\r\n                ui.update();\r\n              }\r\n            },\r\n            change_choice: {\r\n              name: '开启换将卡',\r\n              init: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('change_choice', bool, this._link.config.mode);\r\n                if (!_status.event.getParent().showConfig && !_status.event.showConfig) return;\r\n                if (!ui.cheat && get.config('change_choice')) ui.create.cheat();\r\n                else if (ui.cheat && !get.config('change_choice')) {\r\n                  ui.cheat.close();\r\n                  delete ui.cheat;\r\n                }\r\n              }\r\n            },\r\n            change_card: {\r\n              name: '开启手气卡',\r\n              init: 'disabled',\r\n              item: {\r\n                disabled: '禁用',\r\n                once: '一次',\r\n                twice: '两次',\r\n                unlimited: '无限',\r\n              },\r\n            },\r\n            continue_game: {\r\n              name: '显示再战',\r\n              init: false,\r\n              onclick: function (bool) {\r\n                game.saveConfig('continue_game', bool, this._link.config.mode);\r\n                if (get.config('continue_game')) {\r\n                  if (!ui.continue_game && _status.over && !_status.brawl) {\r\n                    ui.continue_game = ui.create.control('再战', game.reloadCurrent);\r\n                  }\r\n                }\r\n                else if (ui.continue_game) {\r\n                  ui.continue_game.close();\r\n                  delete ui.continue_game;\r\n                }\r\n              },\r\n              intro: '游戏结束后可选择用相同的武将再进行一局游戏'\r\n            },\r\n            dierestart: {\r\n              name: '死亡后显示重来',\r\n              init: true,\r\n              onclick: function (bool) {\r\n                game.saveConfig('dierestart', bool, this._link.config.mode);\r\n                if (get.config('dierestart')) {\r\n                  if (!ui.restart && game.me.isDead() && !_status.connectMode) {\r\n                    ui.restart = ui.create.control('restart', game.reload);\r\n                  }\r\n                }\r\n                else if (ui.restart) {\r\n                  ui.restart.close();\r\n                  delete ui.restart;\r\n                }\r\n              }\r\n            },\r\n            revive: {\r\n              name: '死亡后显示复活',\r\n              init: false,\r\n              onclick: function (bool) {\r\n                game.saveConfig('revive', bool, this._link.config.mode);\r\n                if (get.config('revive')) {\r\n                  if (!ui.revive && game.me.isDead()) {\r\n                    ui.revive = ui.create.control('revive', ui.click.dierevive);\r\n                  }\r\n                }\r\n                else if (ui.revive) {\r\n                  ui.revive.close();\r\n                  delete ui.revive;\r\n                }\r\n              }\r\n            },\r\n            choice_zhu: {\r\n              name: '龙皇候选武将数',\r\n              init: '1',\r\n              restart: true,\r\n              item: {\r\n                '1': '一',\r\n              },\r\n            },\r\n            choice_fan: {\r\n              name: '反抗军候选武将数',\r\n              init: '5',\r\n              restart: true,\r\n              item: {\r\n                '3': '三',\r\n                '4': '四',\r\n                '5': '五',\r\n                '6': '六',\r\n                '8': '八',\r\n                '10': '十',\r\n              },\r\n            },\r\n          }\r\n        },\r\n        single: {\r\n          name: '单挑',\r\n          connect: {\r\n            connect_single_mode: {\r\n              name: '游戏模式',\r\n              init: 'dianjiang',\r\n              item: {\r\n                dianjiang: '点将单挑',\r\n                // normal:'新1v1',\r\n                // changban:'血战长坂坡',\r\n              },\r\n              restart: true,\r\n              frequent: true,\r\n            },\r\n            connect_enable_jin: {\r\n              name: '启用晋势力武将',\r\n              init: false,\r\n              restart: true,\r\n              frequent: true,\r\n            },\r\n            update: function (config, map) {\r\n              if (config.connect_single_mode != 'normal') {\r\n                map.connect_enable_jin.hide();\r\n              }\r\n              else {\r\n                map.connect_enable_jin.show();\r\n              }\r\n            },\r\n          },\r\n          config: {\r\n            single_mode: {\r\n              name: '游戏模式',\r\n              init: 'dianjiang',\r\n              item: {\r\n                dianjiang: '点将单挑',\r\n                // normal:'新1v1',\r\n                // changban:'血战长坂坡',\r\n              },\r\n              restart: true,\r\n              frequent: true,\r\n            },\r\n            enable_jin: {\r\n              name: '启用晋势力武将',\r\n              init: false,\r\n              restart: true,\r\n              frequent: true,\r\n            },\r\n            update: function (config, map) {\r\n              if (config.single_mode != 'normal') {\r\n                map.enable_jin.hide();\r\n              }\r\n              else {\r\n                map.enable_jin.show();\r\n              }\r\n            },\r\n          }\r\n        },\r\n        brawl: {\r\n          name: '乱斗',\r\n          config: {\r\n            huanhuazhizhan: {\r\n              name: '幻化之战',\r\n              init: true,\r\n              frequent: true\r\n            },\r\n            qunxionggeju: {\r\n              name: '群雄割据',\r\n              init: true,\r\n              frequent: true\r\n            },\r\n            duzhansanguo: {\r\n              name: '毒战三国',\r\n              init: true,\r\n              frequent: true\r\n            },\r\n            daoshiyueying: {\r\n              name: '导师爱璃',\r\n              init: true,\r\n              frequent: true\r\n            },\r\n            weiwoduzun: {\r\n              name: '唯我独尊',\r\n              init: true,\r\n              frequent: true\r\n            },\r\n            tongxingzhizheng: {\r\n              name: '同姓之争',\r\n              init: true,\r\n              frequent: true\r\n            },\r\n            jiazuzhizheng: {\r\n              name: '家族之争',\r\n              init: true,\r\n              frequent: true\r\n            },\r\n            // tongqueduopao:{\r\n            // \tname:'铜雀夺袍',\r\n            // \tinit:true,\r\n            // \tfrequent:true\r\n            // },\r\n            tongjiangmoshi: {\r\n              name: '同将模式',\r\n              init: true,\r\n              frequent: true\r\n            },\r\n            // baiyidujiang:{\r\n            // \tname:'白衣渡江',\r\n            // \tinit:true,\r\n            // \tfrequent:true\r\n            // },\r\n            qianlidanji: {\r\n              name: '千里单骑',\r\n              init: true,\r\n              frequent: true\r\n            },\r\n            // liangjunduilei:{\r\n            // \tname:'两军对垒',\r\n            // \tinit:true,\r\n            // \tfrequent:true\r\n            // },\r\n            scene: {\r\n              name: '创建场景',\r\n              init: true,\r\n              frequent: true\r\n            }\r\n          }\r\n        },\r\n      },\r\n      /**\r\n       * lib状态，储存如delayed、videoId等动态数据\r\n       * @type {!Object}\r\n       */\r\n      status: {\r\n        running: false,\r\n        canvas: false,\r\n        time: 0,\r\n        reload: 0,\r\n        delayed: 0,\r\n        frameId: 0,\r\n        videoId: 0,\r\n        globalId: 0,\r\n      },\r\n      /**\r\n       * 帮助菜单\r\n       * @type {!Object}\r\n       */\r\n      help: {\r\n        'FAQ': '<ul><li>Q：关于家长麦技能中的“除外”，有详细的说明吗？<li>A：你不执行奖惩，不能发动技能或使用牌，不能指定目标或被选择为目标（令角色解除除外状态除外）；计算有关全场角色的数据时，不计算你的存在：当你于回合内被除外时，结束你的回合（若当前有卡牌正在结算，则结算后再结束你的回合）。<br>' +\r\n          '<li>Q：若角色有出牌阶段限制次数的技能，则其会因额外的出牌阶段多次发动此技能吗？<li>A：是的，但是一般情况仅限于主动释放的技能（比如下地的『引流』和MEA的『掠财』）。若不做特殊说明，额外出牌阶段结束时，角色回合内的技能使用次数均会清空，而卡牌使用次数不变。<br>' +\r\n          '<li>Q：夜雾和lulu的技能改变出牌效果时，影响牌的使用次数吗？<li>A：不影响，牌的使用次数始终在牌使用或打出时计入。特别的，lulu的技能可以改变牌名，有可能影响牌的后续结算；而夜雾的技能不改变牌名，（虽然效果已经变化）与原牌名关联的效果不会受影响（如【初始服】之于【杀】【万箭】【南蛮】）<br>',\r\n\r\n        '游戏操作': '<ul><li>长按/鼠标悬停/右键单击显示信息<li>触屏模式中，双指点击切换暂停；下划显示菜单，上划切换托管<li>键盘快捷键<br>' +\r\n          '<table><tr><td>A<td>切换托管<tr><td>W<td>切换不询问无懈<tr><td>空格<td>暂停</table><li>编辑牌堆<br>在卡牌包中修改牌堆后，将自动创建一个临时牌堆，在所有模式中共用，当保存当前牌堆后，临时牌堆被清除。每个模式可设置不同的已保存牌堆，设置的牌堆优先级大于临时牌堆</ul>',\r\n        // '游戏命令':'<div style=\"margin:10px\">变量名</div><ul style=\"margin-top:0\"><li>场上角色<br>game.players<li>阵亡角色<br>game.dead'+\r\n        // '<li>玩家<br>game.me<li>玩家的上/下家<br>game.me.previous/next'+\r\n        // '<li>玩家的上/下家（含阵亡）<br>game.me.previousSeat/<br>nextSeat'+\r\n        // '<li>牌堆<br>ui.cardPile<li>弃牌堆<br>ui.discardPile</ul>'+\r\n        // '<div style=\"margin:10px\">角色属性</div><ul style=\"margin-top:0\"><li>体力值<br>player.hp'+\r\n        // '<li>体力上限<br>player.maxHp<li>身份<br>player.identity<li>手牌<br>player.getCards(\"h\")<li>装备牌<br>player.getCards(\"e\")<li>判定牌<br>player.getCards(\"j\")'+\r\n        // '<li>是否存活/横置/翻面<br>player.isAlive()/<br>isLinked()/<br>isTurnedOver()</ul>'+\r\n        // '<div style=\"margin:10px\">角色操作</div><ul style=\"margin-top:0\"><li>受到伤害<br>player.damage(source,<br>num)'+\r\n        // '<li>回复体力<br>player.recover(num)<li>摸牌<br>player.draw(num)<li>获得牌<br>player.gain(cards)<li>弃牌<br>player.discard(cards)'+\r\n        // '<li>使用卡牌<br>player.useCard(card,<br>targets)<li>死亡<br>player.die()<li>复活<br>player.revive(hp)</ul>'+\r\n        // '<div style=\"margin:10px\">游戏操作</div><ul style=\"margin-top:0\"><li>在命令框中输出结果<br>game.print(str)<li>清除命令框中的内容<br>cls<li>上一条/下一条输入的内容<br>up/down<li>游戏结束<br>game.over(bool)'+\r\n        // '<li>角色资料<br>lib.character<li>卡牌资料<br>lib.card</ul>',\r\n        '游戏名词': '<ul><li>智囊：无名杀默认为过河拆桥/无懈可击/无中生有/洞烛先机。牌堆中没有的智囊牌会被过滤。可在卡牌设置中自行增减。若没有可用的智囊，则改为随机选取的三种锦囊牌的牌名。' +\r\n          '<li>仁库：部分武将使用的游戏外共通区域。至多包含六张牌。当有新牌注入后，若牌数超过上限，则将最早进入仁库的溢出牌置入弃牌堆。' +\r\n          '<li>护甲：和体力类似，每点护甲可抵挡一点伤害，但不影响手牌上限。' +\r\n          '<li>随从：通过技能获得，拥有独立的技能、手牌区和装备区（共享判定区），出场时替代主武将的位置；随从死亡时自动切换回主武将。' +\r\n          '<li>发现：从三张随机亮出的牌中选择一张，若无特殊说明，则获得此牌。' +\r\n          '<li>蓄力技：发动时可以增大黄色的数字。若如此做，红色数字于技能的结算过程中改为原来的两倍。'\r\n      },\r\n      /**\r\n       * 设置(触屏: 长按[, 点击])|(鼠标: 悬浮, 右击[, 点击])弹窗\r\n       * @name lib.setIntro\r\n       * @param {!HTMLDivElement} node 要弹窗的节点\r\n       * @param {?function} func 用于自定义弹窗的回调函数\r\n       * @param {?boolean} left 如果为true，点击事件也能触发弹窗\r\n       * @see {@link get.nodeintro}\r\n       */\r\n      setIntro: function (node, func, left) {\r\n        if (lib.config.touchscreen) {\r\n          if (left) {\r\n            node.listen(ui.click.touchintro);\r\n          }\r\n          else {\r\n            lib.setLongPress(node, ui.click.intro);\r\n          }\r\n        }\r\n        else {\r\n          if (left) {\r\n            node.listen(ui.click.intro);\r\n          }\r\n          if (lib.config.hover_all) {\r\n            lib.setHover(node, ui.click.hoverplayer);\r\n          }\r\n          if (lib.config.right_info) {\r\n            node.oncontextmenu = ui.click.rightplayer;\r\n          }\r\n        }\r\n        // if(!left){\r\n        //     lib.setPressure(node,ui.click.rightpressure);\r\n        // }\r\n        if (func) {\r\n          node._customintro = func;\r\n        }\r\n      },\r\n      // setPressure:function(node,func){\r\n      //     if(window.Pressure){\r\n      //         window.Pressure.set(node,{change: func}, {polyfill: false});\r\n      //     }\r\n      // },\r\n      setPopped: function (node, func, width, height, forceclick, paused2) {\r\n        node._poppedfunc = func;\r\n        node._poppedwidth = width;\r\n        node._poppedheight = height;\r\n        if (forceclick) {\r\n          node.forceclick = true;\r\n        }\r\n        if (lib.config.touchscreen || forceclick) {\r\n          node.listen(ui.click.hoverpopped);\r\n        }\r\n        else {\r\n          node.addEventListener('mouseenter', ui.click.hoverpopped);\r\n          // node.addEventListener('mouseleave',ui.click.hoverpopped_leave);\r\n        }\r\n        if (paused2) {\r\n          node._paused2 = true;\r\n        }\r\n      },\r\n      placePoppedDialog: function (dialog, e) {\r\n        if (dialog._place_text) {\r\n          if (dialog._place_text.firstChild.offsetWidth >= 190 ||\r\n            dialog._place_text.firstChild.offsetHeight >= 30) {\r\n            dialog._place_text.style.textAlign = 'left';\r\n            dialog._place_text.style.marginLeft = '14px';\r\n          }\r\n        }\r\n        if (e.touches && e.touches[0]) {\r\n          e = e.touches[0];\r\n        }\r\n        var height = Math.min(ui.window.offsetHeight - 20, dialog.content.scrollHeight);\r\n        if (dialog._mod_height) {\r\n          height += dialog._mod_height;\r\n        }\r\n        dialog.style.height = height + 'px';\r\n        if (e.clientX / game.documentZoom < ui.window.offsetWidth / 2) {\r\n          dialog.style.left = (e.clientX / game.documentZoom + 10) + 'px';\r\n        }\r\n        else {\r\n          dialog.style.left = (e.clientX / game.documentZoom - dialog.offsetWidth - 10) + 'px';\r\n        }\r\n        var idealtop = (e.clientY || 0) / game.documentZoom - dialog.offsetHeight / 2;\r\n        if (typeof idealtop != 'number' || isNaN(idealtop) || idealtop <= 5) {\r\n          idealtop = 5;\r\n        }\r\n        else if (idealtop + dialog.offsetHeight + 10 > ui.window.offsetHeight) {\r\n          idealtop = ui.window.offsetHeight - 10 - dialog.offsetHeight;\r\n        }\r\n        dialog.style.top = idealtop + 'px';\r\n      },\r\n      /**\r\n       * @callback lib.setHover~callback\r\n       * @param {MouseEvent} e MouseEvent on mouse move\r\n       * @returns {*}TODO\r\n       */\r\n      /**\r\n       * 设置悬浮\r\n       * 监听悬停事件\r\n       * @function\r\n       * @param {!HTMLElement} node\r\n       * @param {?lib.setHover~callback} func 回调函数\r\n       * @param {?number} hoveration 悬停的时间，如果为null，使用默认悬停事件 {@link GameConfig}\r\n       * @param {?number} width 弹窗宽度，为null时不设置\r\n       * @returns {!HTMLElement}\r\n       */\r\n      setHover: function (node, func, hoveration, width) {\r\n        node._hoverfunc = func;\r\n        if (typeof hoveration == 'number') {\r\n          node._hoveration = hoveration;\r\n        }\r\n        if (typeof width == 'number') {\r\n          node._hoverwidth = width\r\n        }\r\n        node.addEventListener('mouseenter', ui.click.mouseenter);\r\n        node.addEventListener('mouseleave', ui.click.mouseleave);\r\n        node.addEventListener('mousedown', ui.click.mousedown);\r\n        node.addEventListener('mousemove', ui.click.mousemove);\r\n        return node;\r\n      },\r\n      /**\r\n       * 设置滚轮\r\n       * 为节点监听滚动事件\r\n       * @function\r\n       * @param {!HTMLElement} node 要监听滚动事件的节点\r\n       * @returns {!HTMLElement}\r\n       */\r\n      setScroll: function (node) {\r\n        node.ontouchstart = ui.click.touchStart;\r\n        node.ontouchmove = ui.click.touchScroll;\r\n        node.style.WebkitOverflowScrolling = 'touch';\r\n        return node;\r\n      },\r\n      /**\r\n       * 设置鼠标滚轮（用于切换皮肤菜单）\r\n       * 为节点监听鼠标滚轮事件\r\n       * @function\r\n       * @param {!HTMLElement} node 要监听鼠标滚轮事件的节点\r\n       * @returns {!HTMLElement}\r\n       */\r\n      setMousewheel: function (node) {\r\n        if (lib.config.mousewheel) node.onmousewheel = ui.click.mousewheel;\r\n      },\r\n      /**\r\n       * 设置长按\r\n       * 监听长按事件\r\n       * @param {!HTMLElement} node 要监听长按事件的节点\r\n       * @param {?function} func 回调事件\r\n       * @returns {!HTMLElement}\r\n       */\r\n      setLongPress: function (node, func) {\r\n        node.addEventListener('touchstart', ui.click.longpressdown);\r\n        node.addEventListener('touchend', ui.click.longpresscancel);\r\n        node._longpresscallback = func;\r\n        return node;\r\n      },\r\n      /**\r\n       * 更新`ui.canvas`\r\n       * @param {!number} time 当前时间\r\n       * @returns {(undefined|false)} 如果没有需要更新的`<canvas>`返回false\r\n       */\r\n      updateCanvas: function (time) {\r\n        if (lib.canvasUpdates.length === 0) {\r\n          lib.status.canvas = false;\r\n          return false;\r\n        }\r\n        ui.canvas.width = ui.arena.offsetWidth;\r\n        ui.canvas.height = ui.arena.offsetHeight;\r\n        var ctx = ui.ctx;\r\n        ctx.shadowBlur = 5;\r\n        ctx.shadowColor = 'rgba(0,0,0,0.3)';\r\n        ctx.strokeStyle = 'white';\r\n        // ctx.lineCap='round';\r\n        ctx.lineWidth = 3;\r\n        ctx.save();\r\n        for (var i = 0; i < lib.canvasUpdates.length; i++) {\r\n          ctx.restore();\r\n          ctx.save();\r\n          var update = lib.canvasUpdates[i];\r\n          if (!update.starttime) {\r\n            update.starttime = time;\r\n          }\r\n          if (update(time - update.starttime, ctx) === false) {\r\n            lib.canvasUpdates.splice(i--, 1);\r\n          }\r\n        }\r\n      },\r\n      /**\r\n       * 一个启动函数，其中循环更新`lib.updates`直至没有需要更新的函数\r\n       * @param {!number} time 当前时间\r\n       */\r\n      run: function (time) {\r\n        lib.status.time = time;\r\n        for (var i = 0; i < lib.updates.length; i++) {\r\n          if (!lib.updates[i].hasOwnProperty('_time')) {\r\n            lib.updates[i]._time = time;\r\n          }\r\n          if (lib.updates[i](time - lib.updates[i]._time - lib.status.delayed) === false) {\r\n            lib.updates.splice(i--, 1);\r\n          }\r\n        }\r\n        if (lib.updates.length) {\r\n          lib.status.frameId = requestAnimationFrame(lib.run);\r\n        }\r\n        else {\r\n          lib.status.time = 0;\r\n          lib.status.delayed = 0;\r\n        }\r\n      },\r\n      /**\r\n       * 将date转化为对应的datetime并返回转化后的datetime\r\n       * [recommend] 移到{@link get}中\r\n       * @function\r\n       * @param {Date} date\r\n       * @returns {number} datetime\r\n       * @see {@link get.utc}\r\n       */\r\n      getUTC: function (date) {\r\n        return date.getTime();\r\n      },\r\n      /**\r\n       * 保存录像\r\n       */\r\n      saveVideo: function () {\r\n        if (_status.videoToSave) {\r\n          game.export(lib.init.encode(JSON.stringify(_status.videoToSave)),\r\n            '无名杀 - 录像 - ' + _status.videoToSave.name[0] + ' - ' + _status.videoToSave.name[1]);\r\n        }\r\n      },\r\n      /**\r\n       * 初始化\r\n       * @namespace\r\n       */\r\n      init: {\r\n        /**\r\n         * 初始化游戏，向HTMLDivElement和Array的原型链上添加一批方法（比如delete和addArray）\r\n         * 入口函数\r\n         * @function\r\n         */\r\n        init: function () {\r\n          //part: `lib.configprefix` 初始化\r\n          //如果是从PC端（node.js）载入，额外需要`__dirname`的各级文件夹首字母来拼接\r\n          //例如：`__dirname` 为 `'F:\\\\vtb\\\\test\\\\src'`，则`lib.configprefix`为`'noname_0.9_Fvts_'|'vtuberkill_1.9_Fvts_'`\r\n          //BUG: [PC win10] 路径使用`\\`时，只获取了盘符\r\n          if (typeof global !== 'undefined' && __dirname.length) {\r\n            let dirsplit = __dirname.split('/');\r\n            for (let i = 0; i < dirsplit.length; i++) {\r\n              if (dirsplit[i]) {\r\n                let c = dirsplit[i][0];\r\n                lib.configprefix += /[A-Z]|[a-z]/.test(c) ? c : '_';\r\n              }\r\n            }\r\n            lib.configprefix += '_';\r\n          }\r\n          window.resetGameTimeout = setTimeout(lib.init.reset, parseInt(localStorage.getItem(lib.configprefix + 'loadtime')) || 5000);\r\n          //part: `cordovaLoadTimeout`的创建，在 ../app/redirect.js\r\n          if (window.cordovaLoadTimeout) {\r\n            clearTimeout(window.cordovaLoadTimeout);\r\n            delete window.cordovaLoadTimeout;\r\n          }\r\n          //part: 从html中，删除首次启动使用的样式（css）\r\n          let links = document.head.querySelectorAll('link');\r\n          for (let i = 0; i < links.length; i++) {\r\n            if (links[i].href.indexOf('app/color.css') != -1) {\r\n              links[i].remove();\r\n              break;\r\n            }\r\n          }\r\n          //part: 如果是phantom，则禁用indexedDB\r\n          let index = window.location.href.indexOf('index.html?server=');\r\n          if (index != -1) {\r\n            /**\r\n             * 服务器ID\r\n             * @type {string}\r\n             * @global\r\n             */\r\n            window.isNonameServer = window.location.href.slice(index + 18);\r\n            /**\r\n             * 禁用indexedDB，为真值时禁用\r\n             * @type {boolean}\r\n             * @global\r\n             */\r\n            window.nodb = true;\r\n          }\r\n          else {\r\n            //??\r\n            index = localStorage.getItem(lib.configprefix + 'asserver');\r\n            if (index) {\r\n              window.isNonameServer = index;\r\n              window.isNonameServerIp = lib.hallURL;\r\n            }\r\n          }\r\n          //part: 设置背景图\r\n          var htmlbg = localStorage.getItem(lib.configprefix + 'background');\r\n          if (htmlbg) {\r\n            if (htmlbg[0] == '[') {\r\n              try {\r\n                htmlbg = JSON.parse(htmlbg);\r\n                htmlbg = htmlbg[get.rand(htmlbg.length)];\r\n                if (htmlbg.indexOf('custom_') == 0) {\r\n                  throw ('err');\r\n                }\r\n                _status.htmlbg = htmlbg;\r\n              }\r\n              catch (e) {\r\n                htmlbg = null;\r\n              }\r\n            }\r\n            if (htmlbg) {\r\n              if (htmlbg.indexOf('svg_') == 0) {\r\n                document.documentElement.style.backgroundImage = 'url(\"' + lib.assetURL + 'image/background/' + htmlbg.slice(4) + '.svg\")';\r\n              }\r\n              else {\r\n                document.documentElement.style.backgroundImage = 'url(\"' + lib.assetURL + 'image/background/' + htmlbg + '.jpg\")';\r\n                document.documentElement.style.backgroundSize = 'cover';\r\n                document.documentElement.style.backgroundPosition = '50% 50%';\r\n              }\r\n            }\r\n          }\r\n          //part: get, ui, ai, game 引用到 lib对象\r\n          lib.get = get;\r\n          lib.ui = ui;\r\n          lib.ai = ai;\r\n          lib.game = game;\r\n          //part: 拓展 HTMLDivElement.\r\n          /**\r\n           * 本元素播放动画\r\n           * @function HTMLDivElement#animate\r\n           * @param {string} name - 动画名称\r\n           * @param {number} [time=1000] - 动画持续时间（ms）\r\n           * @returns {HTMLDivElement} this self\r\n           */\r\n          {\r\n            HTMLDivElement.prototype.animate = function (name, time) {\r\n              var that;\r\n              if (get.is.mobileMe(this) && name == 'target') {\r\n                that = ui.mebg;\r\n              }\r\n              else {\r\n                that = this;\r\n              }\r\n              that.classList.add(name);\r\n              setTimeout(function () {\r\n                that.classList.remove(name);\r\n              }, time || 1000);\r\n              return this;\r\n            };\r\n            /**\r\n             * 隐藏本元素及其子元素\r\n             * @function HTMLDivElement#hide\r\n             * @returns {HTMLDivElement} this self\r\n             */\r\n            HTMLDivElement.prototype.hide = function () {\r\n              this.classList.add('hidden');\r\n              return this;\r\n            };\r\n            /**\r\n             * 本元素取消焦点\r\n             * @function HTMLDivElement#unfocus\r\n             * @returns {HTMLDivElement} this self\r\n             */\r\n            HTMLDivElement.prototype.unfocus = function () {\r\n              if (lib.config.transparent_dialog) this.classList.add('transparent');\r\n              return this;\r\n            };\r\n            /**\r\n             * 本元素重获焦点\r\n             * @function HTMLDivElement#refocus\r\n             * @returns {HTMLDivElement} this self\r\n             */\r\n            HTMLDivElement.prototype.refocus = function () {\r\n              this.classList.remove('transparent');\r\n              return this;\r\n            };\r\n            /**\r\n             * 本元素取消隐藏\r\n             * @function HTMLDivElement#show\r\n             * @returns {HTMLDivElement} this self\r\n             */\r\n            HTMLDivElement.prototype.show = function () {\r\n              this.classList.remove('hidden');\r\n              return this;\r\n            };\r\n            /**\r\n             * @callback HTMLDivElement~deleteCallback\r\n             * @see {@link HTMLDivElement#delete}\r\n             */\r\n            /**\r\n             * 延时从所属DOM树移除本元素\r\n             * @function HTMLDivElement#delete\r\n             * @param {number} time - 延迟时间（ms）\r\n             * @param {HTMLDivElement~deleteCallback} callback - 移除后回调函数\r\n             * @returns {HTMLDivElement} this self\r\n             */\r\n            HTMLDivElement.prototype.delete = function (time, callback) {\r\n              if (this.timeout) {\r\n                clearTimeout(this.timeout);\r\n                delete this.timeout;\r\n              }\r\n              if (!this._listeningEnd || this._transitionEnded) {\r\n                if (typeof time != 'number') time = 500;\r\n                this.classList.add('removing');\r\n                var that = this;\r\n                this.timeout = setTimeout(function () {\r\n                  that.remove();\r\n                  that.classList.remove('removing');\r\n                  if (typeof callback == 'function') {\r\n                    callback();\r\n                  }\r\n                }, time);\r\n              }\r\n              else {\r\n                this._onEndDelete = true;\r\n              }\r\n              return this;\r\n            };\r\n            /**\r\n             * 移动本元素(牌)\r\n             * @function HTMLDivElement#goto\r\n             * @param {*} position - 位置\r\n             * @param {number} time - 持续时间\r\n             * @returns {HTMLDivElement} this self\r\n             */\r\n            HTMLDivElement.prototype.goto = function (position, time) {\r\n              if (this.timeout) {\r\n                clearTimeout(this.timeout);\r\n                delete this.timeout;\r\n              }\r\n\r\n              if (typeof time != 'number') time = 500;\r\n              this.classList.add('removing');\r\n\r\n              var that = this;\r\n              this.timeout = setTimeout(function () {\r\n                if (!that.destroyed) {\r\n                  position.appendChild(that);\r\n                }\r\n                that.classList.remove('removing');\r\n                delete that.destiny;\r\n              }, time);\r\n              this.destiny = position;\r\n              return this;\r\n            };\r\n            /**\r\n             * 强制取消移动，固定在当前位置\r\n             * @function HTMLDivElement#fix\r\n             * @returns {HTMLDivElement} this self\r\n             */\r\n            HTMLDivElement.prototype.fix = function () {\r\n              clearTimeout(this.timeout);\r\n              delete this.timeout;\r\n              delete this.destiny;\r\n              this.classList.remove('removing');\r\n              return this;\r\n            };\r\n            /**\r\n             * 设置背景图片，当name为虚值或为空白字符串时，使用原背景。\r\n             * 对应路径：`image/${type?type+'/':''}${type?subfolder+'/':''}${name}${ext}`\r\n             * @function HTMLDivElement#setBackground\r\n             * @param {string} [name] - 图片名（无后缀）\r\n             * @param {string} [type] - 类型对应路径\r\n             * @param {string} [ext='.jpg'] - 图片后缀\r\n             * @param {string} [subfolder='default'] - 类型文件夹下的子路径，仅在参数`type`指定值时有效\r\n             * @returns {?HTMLDivElement} this self\r\n             */\r\n            HTMLDivElement.prototype.setBackground = function (name, type, ext, subfolder) {\r\n              if (!name) return;\r\n              var src;\r\n              if (ext == 'noskin') {\r\n                ext = '.jpg';\r\n              }\r\n              ext = ext || '.jpg';\r\n              subfolder = subfolder || 'default'\r\n              if (type) {\r\n                var dbimage = null, extimage = null, modeimage = null;\r\n                var nameinfo;\r\n                var gzbool = false;\r\n                var mode = get.mode();\r\n                if (type == 'character') {\r\n                  if (lib.characterPack['mode_' + mode] && lib.characterPack['mode_' + mode][name]) {\r\n                    if (mode == 'guozhan') {\r\n                      nameinfo = lib.character[name];\r\n                      if (name.indexOf('gz_shibing') == 0) {\r\n                        name = name.slice(3, 11);\r\n                      }\r\n                      else {\r\n                        if (lib.config.mode_config.guozhan.guozhanSkin && lib.character[name] && lib.character[name][4].contains('gzskin')) gzbool = true;\r\n                        name = name.slice(3);\r\n                      }\r\n                    }\r\n                    else {\r\n                      modeimage = mode;\r\n                    }\r\n                  }\r\n                  else if (lib.character[name]) {\r\n                    nameinfo = lib.character[name];\r\n                  }\r\n                  else if (name.indexOf('::') != -1) {\r\n                    name = name.split('::');\r\n                    modeimage = name[0];\r\n                    name = name[1];\r\n                  }\r\n                }\r\n                if (!modeimage && nameinfo && nameinfo[4]) {\r\n                  for (var i = 0; i < nameinfo[4].length; i++) {\r\n                    if (nameinfo[4][i].indexOf('ext:') == 0) {\r\n                      extimage = nameinfo[4][i]; break;\r\n                    }\r\n                    else if (nameinfo[4][i].indexOf('db:') == 0) {\r\n                      dbimage = nameinfo[4][i]; break;\r\n                    }\r\n                    else if (nameinfo[4][i].indexOf('mode:') == 0) {\r\n                      modeimage = nameinfo[4][i].slice(5); break;\r\n                    }\r\n                    else if (nameinfo[4][i].indexOf('character:') == 0) {\r\n                      name = nameinfo[4][i].slice(10); break;\r\n                    }\r\n                  }\r\n                }\r\n                if (extimage) {\r\n                  src = extimage.replace(/ext:/, 'extension/');\r\n                }\r\n                else if (dbimage) {\r\n                  this.setBackgroundDB(dbimage.slice(3));\r\n                  return this;\r\n                }\r\n                else if (modeimage) {\r\n                  src = 'image/mode/' + modeimage + '/character/' + name + ext;\r\n                }\r\n                else if (type == 'character' && lib.config.skin[name] && arguments[2] != 'noskin') {\r\n                  src = 'image/skin/' + name + '/' + lib.config.skin[name] + ext;\r\n                }\r\n                else {\r\n                  if (type == 'character') {\r\n                    src = 'image/character/' + (gzbool ? 'gz_' : '') + name + ext;\r\n                  }\r\n                  else {\r\n                    src = 'image/' + type + '/' + subfolder + '/' + name + ext;\r\n                  }\r\n                }\r\n              }\r\n              else {\r\n                src = 'image/' + name + ext;\r\n              }\r\n              this.setBackgroundImage(src);\r\n              this.style.backgroundSize = \"cover\";\r\n              return this;\r\n            };\r\n            /**\r\n             * 设置本元素的背景图片为数据库中的图片\r\n             * @function HTMLDivElement#setBackgroundDB\r\n             * @param {string} img - 图片对应的键值\r\n             */\r\n            HTMLDivElement.prototype.setBackgroundDB = function (img) {\r\n              var node = this;\r\n              game.getDB('image', img, function (src) {\r\n                node.style.backgroundImage = \"url('\" + src + \"')\";\r\n                node.style.backgroundSize = \"cover\";\r\n              });\r\n            };\r\n            /**\r\n             * 设置本元素的背景图片\r\n             * @function HTMLDivElement#setBackgroundImage\r\n             * @param {string} img - 图片相对{@link lib.assetURL|assertURL}路径\r\n             */\r\n            HTMLDivElement.prototype.setBackgroundImage = function (img) {\r\n              this.style.backgroundImage = 'url(\"' + lib.assetURL + img + '\")';\r\n            },\r\n              /**\r\n               * {@link HTMLDivElement#listen|listen}（click）的回调函数\r\n               * @callback HTMLDivElement#listen~listenCallback\r\n               * @param {(MouseEvent|TouchEvent)} e - 触发事件\r\n               */\r\n              /**\r\n               * 监听点击事件\r\n               * @function HTMLDivElement#listen\r\n               * @param {HTMLDivElement#listen~listenCallback} func - 点击回调函数\r\n               * @returns {HTMLDivElement} this self\r\n               */\r\n              HTMLDivElement.prototype.listen = function (func) {\r\n                if (lib.config.touchscreen) {\r\n                  this.addEventListener('touchend', function (e) {\r\n                    if (!_status.dragged) {\r\n                      func.call(this, e);\r\n                    }\r\n                  });\r\n                  var fallback = function (e) {\r\n                    if (!_status.touchconfirmed) {\r\n                      func.call(this, e);\r\n                    }\r\n                    else {\r\n                      this.removeEventListener('click', fallback);\r\n                    }\r\n                  }\r\n                  this.addEventListener('click', fallback);\r\n                }\r\n                else {\r\n                  this.addEventListener('click', func);\r\n                }\r\n                return this;\r\n              };\r\n            /**\r\n             * @callback HTMLDivElement#listenTransition~callback\r\n             * @see {@link HTMLDivElement#listenTransition}\r\n             */\r\n            /**\r\n             * 延时触发回调函数，同时监听本元素变换动画，如果变换结束则立即触发回调函数\r\n             * @function HTMLDivElement#listenTransition\r\n             * @param {HTMLDivElement#listenTransition~callback} func - 回调函数\r\n             * @param {number} [time=1000] - 延迟时间\r\n             * @returns {!number} timeoutID \r\n             */\r\n            HTMLDivElement.prototype.listenTransition = function (func, time) {\r\n              var that = this;\r\n              var done = false;\r\n              var callback = function () {\r\n                if (!done) {\r\n                  func.call(that);\r\n                  done = true;\r\n                }\r\n              };\r\n              this.addEventListener('webkitTransitionEnd', callback);\r\n              return setTimeout(callback, time || 1000);\r\n            };\r\n            /**\r\n             * 设置本元素位置\r\n             * ```JavaScript\r\n             * top = calc(`offsets[0]`%+`offsets[1]`px)\r\n             * left = calc(`offsets[2]`%+`offsets[3]`px)\r\n             * ```\r\n             * @function HTMLDivElement#setPosition\r\n             * @param {!number[]} offsets - 偏移量数组（长度必须为4）。\r\n             * @returns {HTMLDivElement} this self\r\n             */\r\n            /**\r\n             * 设置本元素位置\r\n             * ```JavaScript\r\n             * top  = calc(`top_pc`%+`top_px`px)\r\n             * left = calc(`lft_pc`%+`lft_px`px)\r\n             * ```\r\n             * @function HTMLDivElement#setPosition\r\n             * @variation 2\r\n             * @param {number} top_pc\r\n             * @param {number} top_px\r\n             * @param {number} lft_pc\r\n             * @param {number} lft_px\r\n             * @returns {HTMLDivElement} this self\r\n             */\r\n            HTMLDivElement.prototype.setPosition = function () {\r\n              var position;\r\n              if (arguments.length == 4) {\r\n                position = [];\r\n                for (var i = 0; i < arguments.length; i++) position.push(arguments[i]);\r\n              }\r\n              else if (arguments.length == 1 && Array.isArray(arguments[0]) && arguments[0].length == 4) {\r\n                position = arguments[0];\r\n              }\r\n              else {\r\n                return this;\r\n              }\r\n              var top = 'calc(' + position[0] + '% ';\r\n              if (position[1] > 0) top += '+ ' + position[1] + 'px)';\r\n              else top += '- ' + Math.abs(position[1]) + 'px)';\r\n              var left = 'calc(' + position[2] + '% ';\r\n              if (position[3] > 0) left += '+ ' + position[3] + 'px)';\r\n              else left += '- ' + Math.abs(position[3]) + 'px)';\r\n              this.style.top = top;\r\n              this.style.left = left;\r\n              return this;\r\n            };\r\n            /**\r\n             * 设置本元素css样式\r\n             * @function HTMLDivElement#css\r\n             * @param {Object} style - style\r\n             * @param {string} [style.innerHTML] - 设置本元素内部HTML\r\n             * @param {...string} [style.cssProperty] - 设置任意数量的css属性。{@link https://developer.mozilla.org/en-US/docs/Web/CSS/Reference|cssProperty}\r\n             * @returns {HTMLDivElement} this self\r\n             */\r\n            HTMLDivElement.prototype.css = function (style) {\r\n              for (var i in style) {\r\n                if (i == 'innerHTML') {\r\n                  this.innerHTML = style[i];\r\n                }\r\n                else {\r\n                  this.style[i] = style[i];\r\n                }\r\n              }\r\n              return this;\r\n            };\r\n            /**\r\n             * 获取Table[row][col]对应的元素\r\n             * @deprecated <span style=\"color:red;\">[never use]</span> 实现有问题\r\n             * @function HTMLTableElement#get\r\n             * @param {!number} row - 行元素数组索引\r\n             * @param {!number} col - 列元素数组索引\r\n             * @returns {HTMLTableCellElement} 要索引的标题/单元格元素\r\n             */\r\n            HTMLTableElement.prototype.get = function (row, col) {\r\n              if (row < this.childNodes.length) {\r\n                return this.childNodes[row].childNodes[col];\r\n              }\r\n            };\r\n          }\r\n          {\r\n            //part: 拓展数组\r\n            /**\r\n             * 统计数组中元素`item`出现的数量\r\n             * @function Array#numOf\r\n             * @param {*} item - 要统计的元素\r\n             * @returns {!number} 统计结果（非负）\r\n             */\r\n            Array.prototype.numOf = function (item) {\r\n              var num = 0;\r\n              for (var i = 0; i < this.length; i++) {\r\n                if (this[i] == item) num++;\r\n              }\r\n              return num;\r\n            };\r\n            //数组降维替代方案\r\n            Array.prototype.vkflat = function (depth = 1) {\r\n              const result = [];\r\n              // 开始递归\r\n              (function flat(arr, depth) {\r\n                arr.forEach((item) => {\r\n                  if (Array.isArray(item) && depth > 0) {\r\n                    // 递归数组\r\n                    flat(item, depth - 1)\r\n                  } else {\r\n                    result.push(item)\r\n                  }\r\n                })\r\n              })(this, depth)\r\n              return result;\r\n            };\r\n            /**\r\n             * 创建一个新的数组（浅复制），包含原数组中匹配卡牌位置的卡牌对象\r\n             * @function Array#filterInD\r\n             * @param {CardPosition[]} [pos='o'] - 卡牌位置字符串，匹配其中任意位置\r\n             * @returns {!Array} 新的数组，如果没有匹配位置的卡牌，返回空数组\r\n             */\r\n            Array.prototype.filterInD = function (pos) {\r\n              if (!pos) pos = 'o';\r\n              var list = [];\r\n              for (var i = 0; i < this.length; i++) {\r\n                if (pos.indexOf(get.position(this[i], true)) != -1) list.push(this[i]);\r\n              }\r\n              return list;\r\n            };\r\n            /**\r\n             * 定位元素，等同于{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf|Array.prototype.indexOf()}\r\n             * @function Array#find\r\n             * @param {*} item - 要在数组中定位的元素\r\n             * @returns {!number} 数组中元素的第一个索引；如果没有找到返回-1\r\n             */\r\n            Array.prototype.find = function (item) {\r\n              return this.indexOf(item);\r\n            };\r\n            /**\r\n             * 查找元素是否存在，等同于{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf|Array.prototype.indexOf(item)!=-1}\r\n             * @function Array#contains\r\n             * @param {any} item - 要在数组中查找的元素\r\n             * @returns {boolean} 存在返回`true`，不存在返回`false`\r\n             */\r\n            Array.prototype.contains = function (item) {\r\n              return this.indexOf(item) != -1;\r\n            };\r\n            /**\r\n             * 向原数组不重复地添加任意数量的元素；但是不保证，添加前，原数组中的元素是否唯一\r\n             * @function Array#add\r\n             * @param {...any} elements - 要添加的任意数量的元素\r\n             * @returns {Array} this self\r\n             */\r\n            Array.prototype.add = function () {\r\n              for (var i = 0; i < arguments.length; i++) {\r\n                if (this.contains(arguments[i])) {\r\n                  return false;\r\n                }\r\n                this.push(arguments[i]);\r\n              }\r\n              return this;\r\n            };\r\n            /**\r\n             * 将数组中的元素不重复地添加（{@link Array#add}）到原数组中\r\n             * @deprecated [since ES 2015] 使用ES2015 Spread语法（详见{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax|Spread syntax}）\r\n             * @function Array#addArray\r\n             * @param {!Array} arr - 要添加的数组\r\n             * @returns {Array} this self\r\n             */\r\n            Array.prototype.addArray = function (arr) {\r\n              for (var i = 0; i < arr.length; i++) {\r\n                this.add(arr[i]);\r\n              }\r\n              return this;\r\n            };\r\n            /**\r\n             * 删除元素，如果原数组中可以找到要删除的元素，就会移除该元素；如果原数组有多个元素与要删除的元素等值（==），仅删除第一个\r\n             * <ul>\r\n             *   <li>注意，该函数要删除的元素不能是数组类型，因为数组类型会被当做要删除元素组成的数组</li>\r\n             * </ul>\r\n             * @function Array#remove\r\n             * @deprecated [performance warning] 该函数内部通过迭代删除每个元素，每多一个要删除的元素，就会多一次迭代\r\n             * @param {(*|Array)} item - 要删除的元素；要删除元素的（一维|二维|多维）数组\r\n             * @returns {?Array} this self；如果`item`是数组，返回undefined\r\n             */\r\n            Array.prototype.remove = function (item) {\r\n              if (Array.isArray(item)) {\r\n                for (var i = 0; i < item.length; i++) this.remove(item[i]);\r\n                return;\r\n              }\r\n              var pos = this.find(item);\r\n              if (pos == -1) {\r\n                return false;\r\n              }\r\n              this.splice(pos, 1);\r\n              return this;\r\n            };\r\n            /**\r\n             * 删除元素，如果原数组中可以找到要删除的元素，就会移除该元素；如果原数组有多个元素与要删除的元素等值（==），仅删除第一个\r\n             * <ul>\r\n             *   <li>注意，该函数要删除的元素不能是数组类型，因为数组类型会被当做要删除元素组成的数组</li>\r\n             *   <li>对`arr`中的每个元素会调用{@link Array#remove|Array.prototype.remove}</li>\r\n             * </ul>\r\n             * @function Array#removeArray\r\n             * @deprecated [performance warning] {@link Array#remove}\r\n             * @param {!Array} arr - 要删除元素的数组\r\n             * @returns {Array} this self\r\n             */\r\n            Array.prototype.removeArray = function (arr) {\r\n              for (var i = 0; i < arr.length; i++) {\r\n                this.remove(arr[i]);\r\n              }\r\n              return this;\r\n            };\r\n            /**\r\n             * 从原数组中随机取出一个元素\r\n             * @function Array#randomGet\r\n             * @param {...any} elements - 任意元素，不包含在随机选择的元素中；实质对`elements`中的每个元素调用了{@link Array#remove|Array.prototype.remove}\r\n             * @returns {any} 取出的元素\r\n             */\r\n            Array.prototype.randomGet = function () {\r\n              var arr = this.slice(0);\r\n              for (var i = 0; i < arguments.length; i++) arr.remove(arguments[i]);\r\n              return arr[Math.floor(Math.random() * arr.length)];\r\n            };\r\n            /**\r\n             * 返回一个新的数组，随机删除指定数量的元素\r\n             * @function Array#randomRemove\r\n             * @deprecated [performance warning] 该函数内部通过迭代删除每个元素，每多一个要删除的元素，就会多一次迭代\r\n             * @param {number} [num=undefined] - 要删除的元素数量；默认移除一个\r\n             * @returns {(Array|any)} 被删除元素的数组；当无参调用该函数时，返回被删除的元素而非数组\r\n             */\r\n            Array.prototype.randomRemove = function (num) {\r\n              if (typeof num == 'number') {\r\n                var list = [];\r\n                for (var i = 0; i < num; i++) {\r\n                  if (this.length) {\r\n                    list.push(this.randomRemove());\r\n                  }\r\n                  else {\r\n                    break;\r\n                  }\r\n                }\r\n                return list;\r\n              }\r\n              else {\r\n                return this.splice(Math.floor(Math.random() * this.length), 1)[0];\r\n              }\r\n            };\r\n            /**\r\n             * 对原数组随机排序\r\n             * @function Array#randomSort\r\n             * @returns {Array} this self\r\n             */\r\n            Array.prototype.randomSort = function () {\r\n              var list = [];\r\n              while (this.length) {\r\n                list.push(this.randomRemove());\r\n              }\r\n              for (var i = 0; i < list.length; i++) {\r\n                this.push(list[i]);\r\n              }\r\n              return this;\r\n            };\r\n            /**\r\n             * 从原数组中随机取出指定数量的元素\r\n             * @function Array#randomGet\r\n             * @param {...any} elements - 任意元素，不包含在随机选择的元素中；实质对`elements`中的每个元素调用了{@link Array#remove|Array.prototype.remove}\r\n             * @returns {!Array<any>} 随机取出的元素数组\r\n             */\r\n            Array.prototype.randomGets = function (num) {\r\n              if (num > this.length) {\r\n                num = this.length;\r\n              }\r\n              var arr = this.slice(0);\r\n              var list = [];\r\n              for (var i = 0; i < num; i++) {\r\n                list.push(arr.splice(Math.floor(Math.random() * arr.length), 1)[0]);\r\n              }\r\n              return list;\r\n            };\r\n            /**\r\n             * 角色数组排序；以给定角色/当前事件角色为参考，对角色数组排序。- TODO\r\n             * @function Array#sortBySeat\r\n             * @param {GameCores.GameObjects.Player} target 给定的参考角色\r\n             * @returns {Array} this self\r\n             */\r\n            Array.prototype.sortBySeat = function (target) {\r\n              lib.tempSortSeat = target;\r\n              this.sort(lib.sort.seat);\r\n              delete lib.tempSortSeat;\r\n              return this;\r\n            };\r\n            if (!Array.from) {\r\n              /**\r\n               * 由参数数组生成新的数组（浅复制）\r\n               * @function Array#from\r\n               * @param {...any} args - 参数数组\r\n               * @returns {!Array} 生成的数组；如果`args`为虚值或为空则返回空数组\r\n               */\r\n              Array.from = function (args) {\r\n                var list = [];\r\n                if (args && args.length) {\r\n                  for (var i = 0; i < args.length; i++) {\r\n                    list.push(args[i]);\r\n                  }\r\n                }\r\n                return list;\r\n              }\r\n            }\r\n          }\r\n          {\r\n            //part: 设置全局window.onkeydown, window.onload, window.onerror，直到关闭网页（退出游戏）\r\n            /**\r\n             * 监听键盘按下事件\r\n             * @function\r\n             * @global\r\n             * @param {KeyboardEvent} e - 键盘事件\r\n             * @listens KeyboardEvent\r\n             */\r\n            window.onkeydown = function (e) {\r\n              if (!ui.menuContainer || !ui.menuContainer.classList.contains('hidden')) {\r\n                if (e.keyCode == 116 || ((e.ctrlKey || e.metaKey) && e.keyCode == 82)) {\r\n                  if (e.shiftKey) {\r\n                    if (confirm('是否重置游戏？')) {\r\n                      var noname_inited = localStorage.getItem('noname_inited');\r\n                      var onlineKey = localStorage.getItem(lib.configprefix + 'key');\r\n                      localStorage.clear();\r\n                      if (noname_inited) {\r\n                        localStorage.setItem('noname_inited', noname_inited);\r\n                      }\r\n                      if (onlineKey) {\r\n                        localStorage.setItem(lib.configprefix + 'key', onlineKey);\r\n                      }\r\n                      if (indexedDB) indexedDB.deleteDatabase(lib.configprefix + 'data');\r\n                      game.reload();\r\n                      return;\r\n                    }\r\n                  }\r\n                  else {\r\n                    game.reload();\r\n                  }\r\n                }\r\n                else if (e.keyCode == 83 && (e.ctrlKey || e.metaKey)) {\r\n                  if (window.saveNonameInput) {\r\n                    window.saveNonameInput();\r\n                  }\r\n                  e.preventDefault();\r\n                  e.stopPropagation();\r\n                  return false;\r\n                }\r\n                else if (e.keyCode == 74 && (e.ctrlKey || e.metaKey) && lib.node) {\r\n                  lib.node.debug();\r\n                }\r\n              }\r\n              else {\r\n                game.closePopped();\r\n                var dialogs = document.querySelectorAll('#window>.dialog.popped:not(.static)');\r\n                for (var i = 0; i < dialogs.length; i++) {\r\n                  dialogs[i].delete();\r\n                }\r\n                if (e.keyCode == 32) {\r\n                  var node = ui.window.querySelector('pausedbg');\r\n                  if (node) {\r\n                    node.click();\r\n                  }\r\n                  else {\r\n                    ui.click.pause();\r\n                  }\r\n                }\r\n                else if (e.keyCode == 65) {\r\n                  if (ui.auto) ui.auto.click();\r\n                }\r\n                else if (e.keyCode == 87) {\r\n                  if (ui.wuxie && ui.wuxie.style.display != 'none') {\r\n                    ui.wuxie.classList.toggle('glow')\r\n                  }\r\n                  else if (ui.tempnowuxie) {\r\n                    ui.tempnowuxie.classList.toggle('glow')\r\n                  }\r\n                }\r\n                else if (e.keyCode == 116 || ((e.ctrlKey || e.metaKey) && e.keyCode == 82)) {\r\n                  if (e.shiftKey) {\r\n                    if (confirm('是否重置游戏？')) {\r\n                      var noname_inited = localStorage.getItem('noname_inited');\r\n                      var onlineKey = localStorage.getItem(lib.configprefix + 'key');\r\n                      localStorage.clear();\r\n                      if (noname_inited) {\r\n                        localStorage.setItem('noname_inited', noname_inited);\r\n                      }\r\n                      if (onlineKey) {\r\n                        localStorage.setItem(lib.configprefix + 'key', onlineKey);\r\n                      }\r\n                      if (indexedDB) indexedDB.deleteDatabase(lib.configprefix + 'data');\r\n                      game.reload();\r\n                      return;\r\n                    }\r\n                  }\r\n                  else {\r\n                    game.reload();\r\n                  }\r\n                }\r\n                else if (e.keyCode == 83 && (e.ctrlKey || e.metaKey)) {\r\n                  e.preventDefault();\r\n                  e.stopPropagation();\r\n                  return false;\r\n                }\r\n                else if (e.keyCode == 74 && (e.ctrlKey || e.metaKey) && lib.node) {\r\n                  lib.node.debug();\r\n                }\r\n                // else if(e.keyCode==27){\r\n                //     if(!ui.arena.classList.contains('paused')) ui.click.config();\r\n                // }\r\n              }\r\n            };\r\n            /**\r\n             * window加载结束时调用\r\n             * @function\r\n             * @global\r\n             */\r\n            window.onload = function () {\r\n              if (lib.device) {\r\n                var script = document.createElement('script');\r\n                script.src = 'cordova.js';\r\n                document.body.appendChild(script);\r\n                document.addEventListener('deviceready', function () {\r\n                  if (lib.init.cordovaReady) {\r\n                    lib.init.cordovaReady();\r\n                    delete lib.init.cordovaReady;\r\n                  }\r\n                });\r\n              }\r\n              if (_status.packLoaded) {\r\n                delete _status.packLoaded;\r\n                lib.init.onload();\r\n              }\r\n              else {\r\n                /**\r\n                 * 当onload调用先于包的加载时，标志onload已经运行完毕，直至包全部加载完毕则删除该标志\r\n                 * @private\r\n                 * @default\r\n                 */\r\n                _status.windowLoaded = true;\r\n              }\r\n            };\r\n            /**\r\n             * 触发错误时调用\r\n             * @function\r\n             * @global\r\n             * @param {string} msg - 错误信息\r\n             * @param {string} src - 引发错误的脚本URL\r\n             * @param {string} line - 引发错误的行号\r\n             * @param {string} column - 发生错误的行的列号\r\n             * @param {Error} err - 错误对象\r\n             */\r\n            window.onerror = function (msg, src, line, column, err) {\r\n              var str = msg;\r\n              if (window._status && _status.event) {\r\n                var evt = _status.event;\r\n                str += ('\\n' + evt.name + ': ' + evt.step);\r\n                if (evt.parent) str += '\\n' + evt.parent.name + ': ' + evt.parent.step;\r\n                if (evt.parent && evt.parent.parent) str += '\\n' + evt.parent.parent.name + ': ' + evt.parent.parent.step;\r\n                if (evt.player || evt.target || evt.source || evt.skill || evt.card) {\r\n                  str += '\\n-------------'\r\n                }\r\n                if (evt.player) {\r\n                  str += '\\nplayer: ' + evt.player.name;\r\n                }\r\n                if (evt.target) {\r\n                  str += '\\ntarget: ' + evt.target.name;\r\n                }\r\n                if (evt.source) {\r\n                  str += '\\nsource: ' + evt.source.name;\r\n                }\r\n                if (evt.skill) {\r\n                  str += '\\nskill: ' + evt.skill.name;\r\n                }\r\n                if (evt.card) {\r\n                  str += '\\ncard: ' + evt.card.name;\r\n                }\r\n              }\r\n              str += '\\n-------------';\r\n              str += '\\n' + line;\r\n              str += '\\n' + column;\r\n              if (err && err.stack) str += '\\n' + err.stack;\r\n              alert(str);\r\n              window.ea = Array.from(arguments);\r\n              window.em = msg;\r\n              window.el = line;\r\n              window.ec = column;\r\n              window.eo = err;\r\n              game.print(msg);\r\n              game.print(line);\r\n              game.print(column);\r\n              game.print(err.stack);\r\n              if (!lib.config.errstop) {\r\n                _status.withError = true;\r\n                game.loop();\r\n              }\r\n            };\r\n          }\r\n          //part: 更新内容，window.nogame_update，创建于config.js\r\n          if (window.noname_update) {\r\n            lib.version = window.noname_update.version;\r\n            lib.changeLog = window.noname_update.changeLog;\r\n            if (window.noname_update.players) {\r\n              lib.changeLog.push('players://' + JSON.stringify(window.noname_update.players));\r\n            }\r\n            if (window.noname_update.cards) {\r\n              lib.changeLog.push('cards://' + JSON.stringify(window.noname_update.cards));\r\n            }\r\n            delete window.noname_update;\r\n          }\r\n          //part: 如果是移动端，设置移动设备信息lib.device, 资源根路径lib.assetURL\r\n          var noname_inited = localStorage.getItem('noname_inited');\r\n          if (noname_inited && noname_inited !== 'nodejs') {\r\n            var ua = navigator.userAgent.toLowerCase();\r\n            if (ua.indexOf('android') != -1) {\r\n              lib.device = 'android';\r\n            }\r\n            else if (ua.indexOf('iphone') != -1 || ua.indexOf('ipad') != -1) {\r\n              lib.device = 'ios';\r\n            }\r\n            lib.assetURL = noname_inited;\r\n          }\r\n          //part: flag变量，标志`ui.css`是否加载完成，完成时设置为true；如果其他UI和config数据加载完成时`ui.css`未加载完毕，寄存config数据于`config3`，并在css加载完成时调用\r\n          var config3 = null;\r\n          var proceed = function (config2) {\r\n            //[recommend] 移到`init`函数结尾更好，`proceed`函数更整洁\r\n            if (config3 === null) {\r\n              config3 = config2;\r\n              return;\r\n            }\r\n            //part: 如果`config2.mode`存在，则直接进入游戏的`config2.mode`；模式初始化`lib.config.mode_config`\r\n            if (config2.mode) lib.config.mode = config2.mode;\r\n            if (lib.config.mode_config[lib.config.mode] == undefined) lib.config.mode_config[lib.config.mode] = {};\r\n            for (let i in lib.config.mode_config.global) {\r\n              if (lib.config.mode_config[lib.config.mode][i] == undefined) {\r\n                lib.config.mode_config[lib.config.mode][i] = lib.config.mode_config.global[i];\r\n              }\r\n            }\r\n            //part: defaultcharacters\r\n            if (lib.config.characters) {\r\n              lib.config.defaultcharacters = lib.config.characters.slice(0);\r\n            }\r\n            //part: defaultcards\r\n            if (lib.config.cards) {\r\n              lib.config.defaultcards = lib.config.cards.slice(0);\r\n            }\r\n            //part: 从`config2`加载`lib.config`和`lib.mode_config`的数据\r\n            for (let i in config2) {\r\n              if (i.indexOf('_mode_config') != -1) {\r\n                var thismode = i.substr(i.indexOf('_mode_config') + 13);\r\n                if (!lib.config.mode_config[thismode]) {\r\n                  lib.config.mode_config[thismode] = {};\r\n                }\r\n                lib.config.mode_config[thismode][i.substr(0, i.indexOf('_mode_config'))] = config2[i];\r\n              }\r\n              else {\r\n                lib.config[i] = config2[i];\r\n              }\r\n            }\r\n            //part: 从`lib.config.translate`拷贝到`lib.translate`\r\n            for (let i in lib.config.translate) {\r\n              lib.translate[i] = lib.config.translate[i];\r\n            }\r\n\r\n            lib.config.all.characters = [];\r\n            lib.config.all.cards = [];\r\n            lib.config.all.plays = [];\r\n            lib.config.all.mode = [];\r\n            //part: 如果测试模式已开启，重置资源列表\r\n            if (lib.config.debug) {\r\n              lib.init.js(lib.assetURL + 'game', 'asset', function () {\r\n                lib.skin = window.vk_skin_list;\r\n                delete window.vk_skin_list;\r\n                delete window.vk_asset_list;\r\n              });\r\n            }\r\n\r\n            if (window.isNonameServer) {\r\n              lib.config.mode = 'connect';\r\n            }\r\n            //part: `window.vk_package`，创建于package.js\r\n            var pack = window.vk_package;\r\n            delete window.vk_package;\r\n            for (let i in pack.character) {\r\n              if (lib.config.hiddenCharacterPack.indexOf(i) == -1) {\r\n                lib.config.all.characters.push(i);\r\n                lib.translate[i + '_character_config'] = pack.character[i];\r\n              }\r\n            }\r\n            for (let i in pack.card) {\r\n              if (lib.config.hiddenCardPack.indexOf(i) == -1) {\r\n                lib.config.all.cards.push(i);\r\n                lib.translate[i + '_card_config'] = pack.card[i];\r\n              }\r\n            }\r\n            for (let i in pack.play) {\r\n              lib.config.all.plays.push(i);\r\n              lib.translate[i + '_play_config'] = pack.play[i];\r\n            }\r\n            for (let i in pack.submode) {\r\n              for (let j in pack.submode[i]) {\r\n                lib.translate[i + '|' + j] = pack.submode[i][j];\r\n              }\r\n            }\r\n\r\n            if (!lib.config.gameRecord) {\r\n              lib.config.gameRecord = {};\r\n            }\r\n            for (let i in pack.mode) {\r\n              if (lib.config.hiddenModePack.indexOf(i) == -1) {\r\n                lib.config.all.mode.push(i);\r\n                lib.translate[i] = pack.mode[i];\r\n                if (!lib.config.gameRecord[i]) {\r\n                  lib.config.gameRecord[i] = { data: {} };\r\n                }\r\n              }\r\n            }\r\n            //??\r\n            if (lib.config.all.mode.length == 0) {\r\n              lib.config.all.mode.push('identity');\r\n              lib.translate.identity = '身份';\r\n              if (!lib.config.gameRecord.identity) {\r\n                lib.config.gameRecord.identity = { data: {} };\r\n              }\r\n            }\r\n            {\r\n              if (pack.background) {\r\n                for (let i in pack.background) {\r\n                  if (lib.config.hiddenBackgroundPack.contains(i)) continue;\r\n                  lib.configMenu.appearence.config.image_background.item[i] = pack.background[i];\r\n                }\r\n                for (let i = 0; i < lib.config.customBackgroundPack.length; i++) {\r\n                  var link = lib.config.customBackgroundPack[i];\r\n                  lib.configMenu.appearence.config.image_background.item[link] = link.slice(link.indexOf('_') + 1);\r\n                }\r\n                lib.configMenu.appearence.config.image_background.item.default = '默认';\r\n              }\r\n              if (pack.music) {\r\n                if (lib.device || typeof window.require == 'function') {\r\n                  lib.configMenu.audio.config.background_music.item.music_custom = '自定义音乐';\r\n                }\r\n                lib.config.all.background_music = ['music_danji'];\r\n                for (let i in pack.music) {\r\n                  lib.config.all.background_music.push(i);\r\n                  lib.configMenu.audio.config.background_music.item[i] = pack.music[i];\r\n                }\r\n                if (lib.config.customBackgroundMusic) {\r\n                  for (let i in lib.config.customBackgroundMusic) {\r\n                    lib.config.all.background_music.push(i);\r\n                    lib.configMenu.audio.config.background_music.item[i] = lib.config.customBackgroundMusic[i];\r\n                  }\r\n                }\r\n                lib.configMenu.audio.config.background_music.item.music_random = '随机播放';\r\n                lib.configMenu.audio.config.background_music.item.music_off = '关闭';\r\n              }\r\n              if (pack.theme) {\r\n                for (let i in pack.theme) {\r\n                  lib.configMenu.appearence.config.theme.item[i] = pack.theme[i];\r\n                }\r\n              }\r\n              if (lib.config.extension_sources) {\r\n                for (let i in lib.config.extension_sources) {\r\n                  lib.configMenu.general.config.extension_source.item[i] = i;\r\n                }\r\n              }\r\n\r\n              if (pack.font) {\r\n                ui.css.fontsheet = lib.init.sheet();\r\n                for (let i in pack.font) {\r\n                  lib.configMenu.appearence.config.name_font.item[i] = pack.font[i];\r\n                  lib.configMenu.appearence.config.identity_font.item[i] = pack.font[i];\r\n                  lib.configMenu.appearence.config.cardtext_font.item[i] = pack.font[i];\r\n                  lib.configMenu.appearence.config.global_font.item[i] = pack.font[i];\r\n                  ui.css.fontsheet.sheet.insertRule(\"@font-face {font-family: '\" + i + \"';src: url('\" + lib.assetURL + \"font/\" + i + \".ttf');}\", 0);\r\n                }\r\n                lib.configMenu.appearence.config.cardtext_font.item.default = '默认';\r\n                lib.configMenu.appearence.config.global_font.item.default = '默认';\r\n              }\r\n            }\r\n            //part: touch, layout, scroll config\r\n            var ua = navigator.userAgent.toLowerCase();\r\n            if ('ontouchstart' in document) {\r\n              //移动端\r\n              if (!lib.config.totouched) {\r\n                game.saveConfig('totouched', true);\r\n                if (lib.device) {\r\n                  //移动端通过客户端访问\r\n                  game.saveConfig('low_performance', true);\r\n                  game.saveConfig('confirm_exit', true);\r\n                  game.saveConfig('touchscreen', true);\r\n                  game.saveConfig('fold_mode', false);\r\n                  if (ua.indexOf('ipad') == -1) {\r\n                    game.saveConfig('phonelayout', true);\r\n                  }\r\n                  else if (lib.device == 'ios') {\r\n                    game.saveConfig('show_statusbar_ios', 'overlay');\r\n                  }\r\n                }\r\n                else if (confirm('是否切换到触屏模式？（触屏模式可提高触屏设备的响应速度，但无法使用鼠标）')) {\r\n                  //移动端通过网页访问\r\n                  game.saveConfig('touchscreen', true);\r\n                  if (ua.indexOf('iphone') != -1 || ua.indexOf('android') != -1) {\r\n                    game.saveConfig('phonelayout', true);\r\n                  }\r\n\r\n                  game.reload();\r\n                }\r\n              }\r\n            }\r\n            else if (lib.config.touchscreen) {//非移动端，如果触屏模式开启，就设置关闭\r\n              game.saveConfig('touchscreen', false);\r\n            }\r\n\r\n            if (!lib.config.toscrolled && ua.indexOf('macintosh') != -1) {\r\n              game.saveConfig('toscrolled', true);\r\n              game.saveConfig('mousewheel', false);\r\n            }\r\n            //part: 是否打开开始界面\r\n            var show_splash = lib.config.show_splash;\r\n            if (show_splash == 'off') {\r\n              show_splash = false;\r\n            }\r\n            else if (show_splash == 'init') {\r\n              if (localStorage.getItem('show_splash_off')) {\r\n                show_splash = false;\r\n              }\r\n            }\r\n            localStorage.removeItem('show_splash_off');\r\n            //part: extension list\r\n            //??\r\n            //[never executed]\r\n            var extensionlist = [];\r\n            if (!localStorage.getItem(lib.configprefix + 'disable_extension')) {\r\n              if (lib.config.extensions && lib.config.extensions.length) {\r\n                window.resetExtension = function () {\r\n                  for (let i = 0; i < lib.config.extensions.length; i++) {\r\n                    game.saveConfig('extension_' + lib.config.extensions[i] + '_enable', false);\r\n                  }\r\n                  localStorage.setItem(lib.configprefix + 'disable_extension', true);\r\n                }\r\n              }\r\n              for (let i = 0; i < lib.config.plays.length; i++) {\r\n                if (lib.config.all.plays.indexOf(lib.config.plays[i]) != -1) {\r\n                  extensionlist.push(lib.config.plays[i]);\r\n                }\r\n              }\r\n              for (let i = 0; i < lib.config.extensions.length; i++) {\r\n                var extcontent = localStorage.getItem(lib.configprefix + 'extension_' + lib.config.extensions[i]);\r\n                if (extcontent) {\r\n                  _status.evaluatingExtension = true;\r\n                  try {\r\n                    eval(extcontent);\r\n                  }\r\n                  catch (e) {\r\n                    console.log(e);\r\n                  }\r\n                  _status.evaluatingExtension = false;\r\n                }\r\n                else if (lib.config.mode != 'connect' || (!localStorage.getItem(lib.configprefix + 'directstart') && show_splash)) {\r\n                  extensionlist.push(lib.config.extensions[i]);\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (lib.config.mode != 'connect' || (!localStorage.getItem(lib.configprefix + 'directstart') && show_splash)) {\r\n                for (let i = 0; i < lib.config.extensions.length; i++) {\r\n                  game.import('extension', { name: lib.config.extensions[i] });\r\n                }\r\n              }\r\n            }\r\n            //用于加载包的函数\r\n            let loadPack = function () {\r\n              let toLoad = 4;\r\n              let packLoaded = function () {\r\n                toLoad--;\r\n                if (toLoad == 0) {\r\n                  if (_status.windowLoaded) {\r\n                    delete _status.windowLoaded;\r\n                    lib.init.onload();\r\n                  }\r\n                  else {\r\n                    /**\r\n                     * 当包加载完毕先于window.onload时，标志包已经加载完毕，直至onload加载完毕则删除该标志\r\n                     * @private\r\n                     * @default\r\n                     */\r\n                    _status.packLoaded = true;\r\n                  }\r\n                }\r\n              };\r\n              if (localStorage.getItem(lib.configprefix + 'playback')) {\r\n                toLoad++;\r\n                lib.init.js(lib.assetURL + 'mode', lib.config.mode, packLoaded, packLoaded);\r\n              }\r\n              else if ((localStorage.getItem(lib.configprefix + 'directstart') || !show_splash) &&\r\n                lib.config.all.mode.indexOf(lib.config.mode) != -1) {\r\n                toLoad++;\r\n                lib.init.js(lib.assetURL + 'mode', lib.config.mode, packLoaded, packLoaded);\r\n              }\r\n              lib.init.js(lib.assetURL + 'dist', ['card', 'character', 'sp', 'rank'], packLoaded, packLoaded);\r\n            };\r\n            //part: 检查layout并设置`game.layout = layout`\r\n            let layout = lib.config.layout;\r\n            if (lib.layoutfixed.indexOf(lib.config.mode) !== -1) {\r\n              layout = 'mobile';\r\n            }\r\n            if (layout == 'phone') {\r\n              layout = 'mobile';\r\n              game.saveConfig('layout', 'mobile');\r\n              game.saveConfig('phonelayout', true);\r\n            }\r\n            game.layout = layout;\r\n            //part: 随机选取背景或选择_status.htmlbg作为背景图像\r\n            if (lib.config.image_background_random) {\r\n              if (_status.htmlbg) {\r\n                game.saveConfig('image_background', _status.htmlbg);\r\n              }\r\n              else {\r\n                console.log(lib.configMenu.appearence.config.image_background.item)\r\n                let list = [];\r\n                for (let i in lib.configMenu.appearence.config.image_background.item) {\r\n                  if (i == 'default') continue;\r\n                  list.push(i);\r\n                }\r\n                game.saveConfig('image_background', list.randomGet(lib.config.image_background));\r\n              }\r\n              lib.init.background();\r\n            }\r\n            delete _status.htmlbg;\r\n            //part: game to window.game\r\n            window.game = game;\r\n            //part: 加载js(卡牌, 角色, 模式拓展等)以及css(UI布局, 样式)\r\n            let styleToLoad = 6;\r\n            let styleLoaded = function () {\r\n              styleToLoad--;\r\n              if (styleToLoad == 0) {\r\n                if (extensionlist.length && (lib.config.mode != 'connect' || show_splash)) {\r\n                  let extToLoad = extensionlist.length;\r\n                  let extLoaded = function () {\r\n                    extToLoad--;\r\n                    if (extToLoad == 0) {\r\n                      loadPack();\r\n                    }\r\n                  }\r\n                  for (let i = 0; i < extensionlist.length; i++) {\r\n                    lib.init.js(lib.assetURL + 'extension/' + extensionlist[i], 'extension', extLoaded, (function (i) {\r\n                      return function () {\r\n                        game.removeExtension(i);\r\n                        extToLoad--;\r\n                        if (extToLoad == 0) {\r\n                          loadPack();\r\n                        }\r\n                      }\r\n                    }(extensionlist[i])));\r\n                  }\r\n                }\r\n                else {\r\n                  loadPack();\r\n                }\r\n              }\r\n            };\r\n            //css.layout\r\n            if (lib.config.layout != 'default') {\r\n              ui.css.layout = lib.init.css(lib.assetURL + 'layout/' + layout, 'layout', styleLoaded);\r\n            }\r\n            else {\r\n              ui.css.layout = lib.init.css();\r\n              styleToLoad--;\r\n            }\r\n            //css.phone\r\n            if (get.is.phoneLayout()) {\r\n              ui.css.phone = lib.init.css(lib.assetURL + 'layout/default', 'phone', styleLoaded);\r\n            }\r\n            else {\r\n              ui.css.phone = lib.init.css();\r\n              styleToLoad--;\r\n            }\r\n            //css.theme\r\n            ui.css.theme = lib.init.css(lib.assetURL + 'theme/' + lib.config.theme, 'style', styleLoaded);\r\n            //css.card_style\r\n            ui.css.card_style = lib.init.css(lib.assetURL + 'theme/style/card', lib.config.card_style, styleLoaded);\r\n            //css_cardpack_style\r\n            ui.css.cardback_style = lib.init.css(lib.assetURL + 'theme/style/cardback', lib.config.cardback_style, styleLoaded);\r\n            //css.hp_style\r\n            ui.css.hp_style = lib.init.css(lib.assetURL + 'theme/style/hp', lib.config.hp_style, styleLoaded);\r\n            //part: 通过配置创建`<link>`, 设置角色牌的背景、边框、边饰、文本样式\r\n            if (lib.config.player_style && lib.config.player_style != 'default' && lib.config.player_style != 'custom') {\r\n              let str = '';\r\n              switch (lib.config.player_style) {\r\n                case 'wood': str = 'url(\"' + lib.assetURL + 'theme/woodden/wood.jpg\")'; break;\r\n                case 'music': str = 'linear-gradient(#4b4b4b, #464646)'; break;\r\n                case 'simple': str = 'linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4))'; break;\r\n              }\r\n              ui.css.player_stylesheet = lib.init.sheet('#window .player{background-image:' + str + '}');\r\n            }\r\n            if (lib.config.border_style && lib.config.border_style != 'default' && lib.config.border_style != 'custom' && lib.config.border_style != 'auto') {\r\n              ui.css.border_stylesheet = lib.init.sheet();\r\n              let bstyle = lib.config.border_style;\r\n              if (bstyle.indexOf('dragon_') == 0) {\r\n                bstyle = bstyle.slice(7);\r\n              }\r\n              ui.css.border_stylesheet.sheet.insertRule('#window .player>.framebg,#window #arena.long.mobile:not(.fewplayer) .player[data-position=\"0\"]>.framebg{display:block;background-image:url(\"' + lib.assetURL + 'theme/style/player/' + bstyle + '1.png\")}', 0);\r\n              ui.css.border_stylesheet.sheet.insertRule('#window #arena.long:not(.fewplayer) .player>.framebg, #arena.oldlayout .player>.framebg{background-image:url(\"' + lib.assetURL + 'theme/style/player/' + bstyle + '3.png\")}', 0);\r\n              ui.css.border_stylesheet.sheet.insertRule('.player>.count{z-index: 3 !important;border-radius: 2px !important;text-align: center !important;}', 0);\r\n            }\r\n            if (lib.config.control_style && lib.config.control_style != 'default' && lib.config.control_style != 'custom') {\r\n              let str = '';\r\n              switch (lib.config.control_style) {\r\n                case 'wood': str = 'url(\"' + lib.assetURL + 'theme/woodden/wood.jpg\")'; break;\r\n                case 'music': str = 'linear-gradient(#4b4b4b, #464646);color:white;text-shadow:black 0 0 2px'; break;\r\n                case 'simple': str = 'linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4));color:white;text-shadow:black 0 0 2px'; break;\r\n              }\r\n              if (lib.config.control_style == 'wood') {\r\n                ui.css.control_stylesheet = lib.init.sheet('#window .control,#window .menubutton,#window #system>div>div,#window #system>div>.pressdown2{background-image:' + str + '}');\r\n              }\r\n              else {\r\n                ui.css.control_stylesheet = lib.init.sheet('#window .control,.menubutton:not(.active):not(.highlight):not(.red):not(.blue),#window #system>div>div{background-image:' + str + '}');\r\n              }\r\n            }\r\n            if (lib.config.menu_style && lib.config.menu_style != 'default' && lib.config.menu_style != 'custom') {\r\n              let str = '';\r\n              switch (lib.config.menu_style) {\r\n                case 'wood': str = 'url(\"' + lib.assetURL + 'theme/woodden/wood2.png\")'; break;\r\n                case 'music': str = 'linear-gradient(#4b4b4b, #464646);color:white;text-shadow:black 0 0 2px'; break;\r\n                case 'simple': str = 'linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4));color:white;text-shadow:black 0 0 2px'; break;\r\n              }\r\n              ui.css.menu_stylesheet = lib.init.sheet('html #window>.dialog.popped,html .menu,html .menubg{background-image:' + str + '}');\r\n            }\r\n            //part: ??\r\n            lib.config.duration = 500;\r\n            //part: add mouse/touch Evt listeners to document.\r\n            if (!lib.config.touchscreen) {\r\n              document.addEventListener('mousewheel', ui.click.windowmousewheel, { passive: true });\r\n              document.addEventListener('mousemove', ui.click.windowmousemove);\r\n              document.addEventListener('mousedown', ui.click.windowmousedown);\r\n              document.addEventListener('mouseup', ui.click.windowmouseup);\r\n              document.addEventListener('contextmenu', ui.click.right);\r\n            }\r\n            else {\r\n              document.addEventListener('touchstart', ui.click.touchconfirm);\r\n              document.addEventListener('touchstart', ui.click.windowtouchstart);\r\n              document.addEventListener('touchend', ui.click.windowtouchend);\r\n              document.addEventListener('touchmove', ui.click.windowtouchmove);\r\n            }\r\n          };\r\n          var proceed2 = function () {\r\n            if (config3) {\r\n              proceed(config3);\r\n            }\r\n            else {\r\n              config3 = true;\r\n            }\r\n          };\r\n          //part: 初始化ui.css.menu和ui.css.default样式\r\n          ui.css = {\r\n            menu: lib.init.css(lib.assetURL + 'layout/default', 'menu', function () {\r\n              ui.css.default = lib.init.css(lib.assetURL + 'layout/default', 'layout');\r\n              proceed2();\r\n            })\r\n          };\r\n          //part: config for different type of devices(PC, mobile devices).\r\n          if (lib.device) {\r\n            //移动端，window加载完成时被调用\r\n            lib.init.cordovaReady = function () {\r\n              if (lib.device == 'android') {\r\n                document.addEventListener(\"pause\", function () {\r\n                  if (!_status.paused2 && (typeof _status.event.isMine == 'function' && !_status.event.isMine())) {\r\n                    ui.click.pause();\r\n                  }\r\n                  if (ui.backgroundMusic) {\r\n                    ui.backgroundMusic.pause();\r\n                  }\r\n                });\r\n                document.addEventListener(\"resume\", function () {\r\n                  if (ui.backgroundMusic) {\r\n                    ui.backgroundMusic.play();\r\n                  }\r\n                });\r\n                document.addEventListener(\"backbutton\", function () {\r\n                  if (ui.arena && ui.arena.classList.contains('menupaused')) {\r\n                    if (window.saveNonameInput) {\r\n                      window.saveNonameInput();\r\n                    }\r\n                    else {\r\n                      ui.click.configMenu();\r\n                    }\r\n                  }\r\n                  else if (lib.config.confirm_exit) {\r\n                    navigator.notification.confirm(\r\n                      '是否退出游戏？',\r\n                      function (index) {\r\n                        switch (index) {\r\n                          case 2: game.saveConfig('null'); game.reload(); break;\r\n                          case 3: navigator.app.exitApp(); break;\r\n                        }\r\n                      },\r\n                      '确认退出',\r\n                      ['取消', '重新开始', '退出']\r\n                    );\r\n                  }\r\n                  else {\r\n                    navigator.app.exitApp();\r\n                  }\r\n                });\r\n              }\r\n              game.download = function (url, folder, onsuccess, onerror, dev, onprogress) {\r\n                if (url.indexOf('http') != 0) {\r\n                  url = get.url(dev) + url;\r\n                }\r\n                var fileTransfer = new FileTransfer();\r\n                folder = lib.assetURL + folder;\r\n                if (onprogress) {\r\n                  fileTransfer.onprogress = function (progressEvent) {\r\n                    onprogress(progressEvent.loaded, progressEvent.total);\r\n                  };\r\n                }\r\n                lib.config.brokenFile.add(folder);\r\n                game.saveConfigValue('brokenFile');\r\n                fileTransfer.download(encodeURI(url), encodeURI(folder), function () {\r\n                  lib.config.brokenFile.remove(folder);\r\n                  game.saveConfigValue('brokenFile');\r\n                  if (onsuccess) {\r\n                    onsuccess();\r\n                  }\r\n                }, onerror);\r\n              };\r\n              game.readFile = function (filename, callback, onerror) {\r\n                window.resolveLocalFileSystemURL(lib.assetURL, function (entry) {\r\n                  entry.getFile(filename, {}, function (fileEntry) {\r\n                    fileEntry.file(function (fileToLoad) {\r\n                      var fileReader = new FileReader();\r\n                      fileReader.onload = function (e) {\r\n                        callback(e.target.result);\r\n                      };\r\n                      fileReader.readAsArrayBuffer(fileToLoad);\r\n                    }, onerror);\r\n                  }, onerror);\r\n                }, onerror);\r\n              };\r\n              game.writeFile = function (data, path, name, callback) {\r\n                game.ensureDirectory(path, function () { });\r\n                if (Object.prototype.toString.call(data) == '[object File]') {\r\n                  var fileReader = new FileReader();\r\n                  fileReader.onload = function (e) {\r\n                    game.writeFile(e.target.result, path, name, callback);\r\n                  };\r\n                  fileReader.readAsArrayBuffer(data);\r\n                }\r\n                else {\r\n                  window.resolveLocalFileSystemURL(lib.assetURL + path, function (entry) {\r\n                    entry.getFile(name, { create: true }, function (fileEntry) {\r\n                      fileEntry.createWriter(function (fileWriter) {\r\n                        fileWriter.onwriteend = callback;\r\n                        fileWriter.write(data);\r\n                      });\r\n                    });\r\n                  });\r\n                }\r\n              };\r\n              game.removeFile = function (dir, callback) {\r\n                window.resolveLocalFileSystemURL(lib.assetURL, function (entry) {\r\n                  entry.getFile(dir, {}, function (fileEntry) {\r\n                    fileEntry.remove();\r\n                    if (callback) {\r\n                      callback();\r\n                    }\r\n                  });\r\n                });\r\n              };\r\n              game.getFileList = function (dir, callback) {\r\n                var files = [], folders = [];\r\n                window.resolveLocalFileSystemURL(lib.assetURL + dir, function (entry) {\r\n                  var dirReader = entry.createReader();\r\n                  var entries = [];\r\n                  var readEntries = function () {\r\n                    dirReader.readEntries(function (results) {\r\n                      if (!results.length) {\r\n                        entries.sort();\r\n                        for (var i = 0; i < entries.length; i++) {\r\n                          if (entries[i].isDirectory) {\r\n                            folders.push(entries[i].name);\r\n                          }\r\n                          else {\r\n                            files.push(entries[i].name);\r\n                          }\r\n                        }\r\n                        callback(folders, files);\r\n                      }\r\n                      else {\r\n                        entries = entries.concat(Array.from(results));\r\n                        readEntries();\r\n                      }\r\n                    });\r\n                  };\r\n                  readEntries();\r\n                });\r\n              };\r\n              game.ensureDirectory = function (list, callback, file) {\r\n                var directorylist;\r\n                var num = 0;\r\n                if (file) {\r\n                  num = 1;\r\n                }\r\n                if (typeof list == 'string') {\r\n                  directorylist = [list];\r\n                }\r\n                else {\r\n                  var directorylist = list.slice(0);\r\n                }\r\n                window.resolveLocalFileSystemURL(lib.assetURL, function (rootEntry) {\r\n                  var access = function (entry, dir, callback) {\r\n                    if (dir.length <= num) {\r\n                      callback();\r\n                    }\r\n                    else {\r\n                      var str = dir.shift();\r\n                      entry.getDirectory(str, { create: false }, function (entry) {\r\n                        access(entry, dir, callback);\r\n                      }, function () {\r\n                        entry.getDirectory(str, { create: true }, function (entry) {\r\n                          access(entry, dir, callback);\r\n                        });\r\n                      });\r\n                    }\r\n                  }\r\n                  var createDirectory = function () {\r\n                    if (directorylist.length) {\r\n                      access(rootEntry, directorylist.shift().split('/'), createDirectory);\r\n                    }\r\n                    else {\r\n                      callback();\r\n                    }\r\n                  };\r\n                  createDirectory();\r\n                });\r\n              }\r\n              if (ui.updateUpdate) {\r\n                ui.updateUpdate();\r\n              }\r\n              var showbar = function () {\r\n                if (window.StatusBar) {\r\n                  if (lib.device == 'android') {\r\n                    if (lib.config.show_statusbar_android) {\r\n                      window.StatusBar.overlaysWebView(false);\r\n                      window.StatusBar.backgroundColorByName('black');\r\n                      window.StatusBar.show();\r\n                    }\r\n                  }\r\n                  else if (lib.device == 'ios') {\r\n                    if (lib.config.show_statusbar_ios != 'off' && lib.config.show_statusbar_ios != 'auto') {\r\n                      if (lib.config.show_statusbar_ios == 'default') {\r\n                        window.StatusBar.overlaysWebView(false);\r\n                      }\r\n                      else {\r\n                        window.StatusBar.overlaysWebView(true);\r\n                      }\r\n                      window.StatusBar.backgroundColorByName('black');\r\n                      window.StatusBar.show();\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              if (lib.arenaReady) {\r\n                lib.arenaReady.push(showbar);\r\n              }\r\n              else {\r\n                showbar();\r\n              }\r\n            }\r\n          }\r\n          else if (typeof window.require == 'function') {\r\n            //part: PC端\r\n            lib.node = {\r\n              fs: __webpack_require__(/*! fs */ \"fs\"),\r\n              debug: function () {\r\n                (__webpack_require__(/*! electron */ \"../../node_modules/electron/index.js\").remote.getCurrentWindow)().toggleDevTools();\r\n              }\r\n            };\r\n            game.download = function (url, folder, onsuccess, onerror, dev, onprogress) {\r\n              if (url.indexOf('http') != 0) {\r\n                url = get.url(dev) + url;\r\n              }\r\n              game.ensureDirectory(folder, function () {\r\n                try {\r\n                  var file = lib.node.fs.createWriteStream(__dirname + '/' + folder);\r\n                }\r\n                catch (e) {\r\n                  onerror();\r\n                }\r\n                lib.config.brokenFile.add(folder);\r\n                game.saveConfigValue('brokenFile');\r\n                if (!lib.node.http) lib.node.http = __webpack_require__(/*! http */ \"http\");\r\n                if (!lib.node.https) lib.node.https = __webpack_require__(/*! https */ \"https\");\r\n                var opts = (__webpack_require__(/*! url */ \"url\").parse)(encodeURI(url));\r\n                opts.headers = { 'User-Agent': 'AppleWebkit' };\r\n                var request = (url.indexOf('https') == 0 ? lib.node.https : lib.node.http).get(opts, function (response) {\r\n                  var stream = response.pipe(file);\r\n                  stream.on('finish', function () {\r\n                    lib.config.brokenFile.remove(folder);\r\n                    game.saveConfigValue('brokenFile');\r\n                    if (onsuccess) {\r\n                      onsuccess();\r\n                    }\r\n                  });\r\n                  stream.on('error', onerror);\r\n                  if (onprogress) {\r\n                    var streamInterval = setInterval(function () {\r\n                      if (stream.closed) {\r\n                        clearInterval(streamInterval);\r\n                      }\r\n                      else {\r\n                        onprogress(stream.bytesWritten);\r\n                      }\r\n                    }, 200);\r\n                  }\r\n                });\r\n              }, true);\r\n            };\r\n            game.readFile = function (filename, callback, onerror) {\r\n              lib.node.fs.readFile(__dirname + '/' + filename, function (err, data) {\r\n                if (err) {\r\n                  onerror(err);\r\n                }\r\n                else {\r\n                  callback(data);\r\n                }\r\n              });\r\n            };\r\n            game.writeFile = function (data, path, name, callback) {\r\n              game.ensureDirectory(path, function () { });\r\n              if (Object.prototype.toString.call(data) == '[object File]') {\r\n                var fileReader = new FileReader();\r\n                fileReader.onload = function (e) {\r\n                  game.writeFile(e.target.result, path, name, callback);\r\n                };\r\n                fileReader.readAsArrayBuffer(data);\r\n              }\r\n              else {\r\n                get.zip(function (zip) {\r\n                  zip.file('i', data);\r\n                  lib.node.fs.writeFile(__dirname + '/' + path + '/' + name, zip.files.i.asNodeBuffer(), null, callback);\r\n                });\r\n              }\r\n            };\r\n            game.removeFile = function (filename, callback) {\r\n              lib.node.fs.unlink(__dirname + '/' + filename, callback || function () { });\r\n            };\r\n            game.getFileList = function (dir, callback) {\r\n              var files = [], folders = [];\r\n              dir = __dirname + '/' + dir;\r\n              lib.node.fs.readdir(dir, function (err, filelist) {\r\n                for (var i = 0; i < filelist.length; i++) {\r\n                  if (filelist[i][0] != '.' && filelist[i][0] != '_') {\r\n                    if (lib.node.fs.statSync(dir + '/' + filelist[i]).isDirectory()) {\r\n                      folders.push(filelist[i]);\r\n                    }\r\n                    else {\r\n                      files.push(filelist[i]);\r\n                    }\r\n                  }\r\n                }\r\n                callback(folders, files);\r\n              });\r\n            };\r\n            game.ensureDirectory = function (list, callback, file) {\r\n              var directorylist;\r\n              var num = 0;\r\n              if (file) {\r\n                num = 1;\r\n              }\r\n              if (typeof list == 'string') {\r\n                directorylist = [list];\r\n              }\r\n              else {\r\n                var directorylist = list.slice(0);\r\n              }\r\n              var access = function (str, dir, callback) {\r\n                if (dir.length <= num) {\r\n                  callback();\r\n                }\r\n                else {\r\n                  str += '/' + dir.shift();\r\n                  lib.node.fs.access(__dirname + str, function (e) {\r\n                    if (e) {\r\n                      try {\r\n                        lib.node.fs.mkdir(__dirname + str, function () {\r\n                          access(str, dir, callback);\r\n                        });\r\n                      }\r\n                      catch (e) {\r\n                        console.log(e);\r\n                      }\r\n                    }\r\n                    else {\r\n                      access(str, dir, callback);\r\n                    }\r\n                  });\r\n                }\r\n              }\r\n              var createDirectory = function () {\r\n                if (directorylist.length) {\r\n                  access('', directorylist.shift().split('/'), createDirectory);\r\n                }\r\n                else {\r\n                  callback();\r\n                }\r\n              };\r\n              createDirectory();\r\n            };\r\n            if (ui.updateUpdate) {\r\n              ui.updateUpdate();\r\n            }\r\n          }\r\n          else {\r\n            //part: 网页端\r\n            window.onbeforeunload = function () {\r\n              if (lib.config.confirm_exit && !_status.reloading) {\r\n                return '是否离开游戏？'\r\n              }\r\n              else {\r\n                return null;\r\n              }\r\n            }\r\n          }\r\n          //part: 游戏设置信息，window.config，创建于config.js\r\n          lib.config = window.config;\r\n          //part: 联机部分的设置\r\n          lib.configOL = {};\r\n          delete window.config;\r\n          var config2;\r\n          if (localStorage.getItem(lib.configprefix + 'nodb')) {\r\n            window.nodb = true;\r\n          }\r\n          //part: 持久化数据\r\n          //`config2` 在这里从indexedDB/localStorage加载config数据，存入`config2`；`config2`，可能是`{}`，`false`或者读取到的config对象\r\n          //如果config加载完成时，`ui.css`未加载完成，则暂存`config2`于`config3`中，等到完成再调用`proceed`\r\n          if (window.indexedDB && !window.nodb) {\r\n            //part: indexedDB\r\n            var request = window.indexedDB.open(lib.configprefix + 'data', 4);\r\n            request.onupgradeneeded = function (e) {\r\n              var db = e.target.result;\r\n              if (!db.objectStoreNames.contains('video')) {\r\n                db.createObjectStore('video', { keyPath: 'time' });\r\n              }\r\n              if (!db.objectStoreNames.contains('image')) {\r\n                db.createObjectStore('image');\r\n              }\r\n              if (!db.objectStoreNames.contains('audio')) {\r\n                db.createObjectStore('audio');\r\n              }\r\n              if (!db.objectStoreNames.contains('config')) {\r\n                db.createObjectStore('config');\r\n              }\r\n              if (!db.objectStoreNames.contains('data')) {\r\n                db.createObjectStore('data');\r\n              }\r\n            };\r\n            request.onsuccess = function (e) {\r\n              lib.db = e.target.result;\r\n              //part: indexedDB 读取config对象\r\n              game.getDB('config', null, function (obj) {\r\n                if (!obj.storageImported) {\r\n                  try {\r\n                    config2 = JSON.parse(localStorage.getItem(lib.configprefix + 'config'));\r\n                    if (!config2 || typeof config2 != 'object') throw 'err'\r\n                  }\r\n                  catch (err) {\r\n                    config2 = {};\r\n                  }\r\n                  for (var i in config2) {\r\n                    game.saveConfig(i, config2[i]);\r\n                  }\r\n                  for (var i in lib.mode) {\r\n                    try {\r\n                      config2 = JSON.parse(localStorage.getItem(lib.configprefix + i));\r\n                      if (!config2 || typeof config2 != 'object' || get.is.empty(config2)) throw 'err'\r\n                    }\r\n                    catch (err) {\r\n                      config2 = false;\r\n                    }\r\n                    localStorage.removeItem(lib.configprefix + i);\r\n                    if (config2) {\r\n                      game.putDB('data', i, config2);\r\n                    }\r\n                  }\r\n                  game.saveConfig('storageImported', true);\r\n                  //init background\r\n                  lib.init.background();\r\n                  localStorage.removeItem(lib.configprefix + 'config');\r\n                }\r\n                else {\r\n                  config2 = obj;\r\n                }\r\n                proceed(config2);\r\n              });\r\n            }\r\n          }\r\n          else {\r\n            //part: localStorage\r\n            try {\r\n              config2 = JSON.parse(localStorage.getItem(lib.configprefix + 'config'));\r\n              if (!config2 || typeof config2 != 'object') throw 'err'\r\n            }\r\n            catch (err) {\r\n              config2 = {};\r\n              localStorage.setItem(lib.configprefix + 'config', JSON.stringify({}));\r\n            }\r\n            proceed(config2);\r\n          }\r\n        },\r\n        /**\r\n         * 重置游戏\r\n         * 在游戏初始载入过程中超时的回调函数，发出弹窗询问是否重置（重启）游戏。\r\n         * @function\r\n         */\r\n        reset: function () {\r\n          if (window.inSplash) return;\r\n          if (window.resetExtension) {\r\n            if (confirm('游戏似乎未正常载入，是否禁用扩展并重新打开？')) {\r\n              window.resetExtension();\r\n              window.location.reload();\r\n            }\r\n          }\r\n          else {\r\n            if (lib.device) {\r\n              if (navigator.notification) {\r\n                navigator.notification.confirm(\r\n                  '游戏似乎未正常载入，是否重置游戏？',\r\n                  function (index) {\r\n                    if (index == 2) {\r\n                      localStorage.removeItem('noname_inited');\r\n                      window.location.reload();\r\n                    }\r\n                    else if (index == 3) {\r\n                      var noname_inited = localStorage.getItem('noname_inited');\r\n                      var onlineKey = localStorage.getItem(lib.configprefix + 'key');\r\n                      localStorage.clear();\r\n                      if (noname_inited) {\r\n                        localStorage.setItem('noname_inited', noname_inited);\r\n                      }\r\n                      if (onlineKey) {\r\n                        localStorage.setItem(lib.configprefix + 'key', onlineKey);\r\n                      }\r\n                      if (indexedDB) indexedDB.deleteDatabase(lib.configprefix + 'data');\r\n                      setTimeout(function () {\r\n                        window.location.reload();\r\n                      }, 200);\r\n                    }\r\n                  },\r\n                  '确认退出',\r\n                  ['取消', '重新下载', '重置设置']\r\n                );\r\n              }\r\n              else {\r\n                if (confirm('游戏似乎未正常载入，是否重置游戏？')) {\r\n                  localStorage.removeItem('noname_inited');\r\n                  window.location.reload();\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (confirm('游戏似乎未正常载入，是否重置游戏？')) {\r\n                var onlineKey = localStorage.getItem(lib.configprefix + 'key');\r\n                localStorage.clear();\r\n                if (onlineKey) {\r\n                  localStorage.setItem(lib.configprefix + 'key', onlineKey);\r\n                }\r\n                if (indexedDB) indexedDB.deleteDatabase(lib.configprefix + 'data');\r\n                setTimeout(function () {\r\n                  window.location.reload();\r\n                }, 200);\r\n              }\r\n            }\r\n          }\r\n        },\r\n        /**\r\n         * 游戏初始载入成功时被调用，加载游戏样式数据，并载入开始界面。\r\n         * @function\r\n         */\r\n        onload: function () {\r\n          ui.updated();\r\n          /**\r\n           * 文档缩放比例\r\n           * @type {number}\r\n           */\r\n          game.documentZoom = game.deviceZoom;\r\n          if (game.documentZoom != 1) {\r\n            ui.updatez();\r\n          }\r\n          {\r\n            ui.background = ui.create.div('.background');\r\n            ui.background.style.backgroundSize = \"cover\";\r\n            ui.background.style.backgroundPosition = '50% 50%';\r\n            if (lib.config.image_background && lib.config.image_background != 'default' && lib.config.image_background.indexOf('custom_') != 0) {\r\n              if (lib.config.image_background.indexOf('svg_') == 0) {\r\n                ui.background.setBackgroundImage('image/background/' + lib.config.image_background.slice(4) + '.svg');\r\n              }\r\n              else {\r\n                ui.background.setBackgroundImage('image/background/' + lib.config.image_background + '.jpg');\r\n\r\n                ui.backgroundSVG = ui.create.div('.background', ui.background);\r\n                ui.backgroundSVG.setBackgroundImage('image/background/' + 'simple1_bg' + '.svg');\r\n                ui.backgroundSVG.style.opacity = '.3';\r\n              }\r\n              if (lib.config.image_background_blur) {\r\n                ui.background.style.filter = 'blur(8px)';\r\n                ui.background.style.webkitFilter = 'blur(8px)';\r\n                ui.background.style.transform = 'scale(1.05)';\r\n              }\r\n            }\r\n            document.documentElement.style.backgroundImage = '';\r\n            document.documentElement.style.backgroundSize = '';\r\n            document.documentElement.style.backgroundPosition = '';\r\n            document.body.insertBefore(ui.background, document.body.firstChild);\r\n            document.body.onresize = ui.updatexr;\r\n            if (lib.config.touchscreen) {\r\n              document.body.addEventListener('touchstart', function (e) {\r\n                this.startX = e.touches[0].clientX / game.documentZoom;\r\n                this.startY = e.touches[0].clientY / game.documentZoom;\r\n                _status.dragged = false;\r\n              });\r\n              document.body.addEventListener('touchmove', function (e) {\r\n                if (_status.dragged) return;\r\n                if (Math.abs(e.touches[0].clientX / game.documentZoom - this.startX) > 10 ||\r\n                  Math.abs(e.touches[0].clientY / game.documentZoom - this.startY) > 10) {\r\n                  _status.dragged = true;\r\n                }\r\n              });\r\n            }\r\n          }\r\n          {\r\n            if (lib.config.image_background.indexOf('custom_') == 0) {\r\n              ui.background.style.backgroundImage = \"none\";\r\n              game.getDB('image', lib.config.image_background, function (fileToLoad) {\r\n                if (!fileToLoad) return;\r\n                var fileReader = new FileReader();\r\n                fileReader.onload = function (fileLoadedEvent) {\r\n                  var data = fileLoadedEvent.target.result;\r\n                  ui.background.style.backgroundImage = 'url(' + data + ')';\r\n                  if (lib.config.image_background_blur) {\r\n                    ui.background.style.filter = 'blur(8px)';\r\n                    ui.background.style.webkitFilter = 'blur(8px)';\r\n                    ui.background.style.transform = 'scale(1.05)';\r\n                  }\r\n                };\r\n                fileReader.readAsDataURL(fileToLoad);\r\n              });\r\n            }\r\n            if (lib.config.card_style == 'custom') {\r\n              game.getDB('image', 'card_style', function (fileToLoad) {\r\n                if (!fileToLoad) return;\r\n                var fileReader = new FileReader();\r\n                fileReader.onload = function (fileLoadedEvent) {\r\n                  if (ui.css.card_stylesheet) {\r\n                    ui.css.card_stylesheet.remove();\r\n                  }\r\n                  ui.css.card_stylesheet = lib.init.sheet('.card:not(*:empty){background-image:url(' + fileLoadedEvent.target.result + ')}');\r\n                };\r\n                fileReader.readAsDataURL(fileToLoad);\r\n              });\r\n            }\r\n            if (lib.config.cardback_style == 'custom') {\r\n              game.getDB('image', 'cardback_style', function (fileToLoad) {\r\n                if (!fileToLoad) return;\r\n                var fileReader = new FileReader();\r\n                fileReader.onload = function (fileLoadedEvent) {\r\n                  if (ui.css.cardback_stylesheet) {\r\n                    ui.css.cardback_stylesheet.remove();\r\n                  }\r\n                  ui.css.cardback_stylesheet = lib.init.sheet('.card:empty,.card.infohidden{background-image:url(' + fileLoadedEvent.target.result + ')}');\r\n                };\r\n                fileReader.readAsDataURL(fileToLoad);\r\n              });\r\n              game.getDB('image', 'cardback_style2', function (fileToLoad) {\r\n                if (!fileToLoad) return;\r\n                var fileReader = new FileReader();\r\n                fileReader.onload = function (fileLoadedEvent) {\r\n                  if (ui.css.cardback_stylesheet2) {\r\n                    ui.css.cardback_stylesheet2.remove();\r\n                  }\r\n                  ui.css.cardback_stylesheet2 = lib.init.sheet('.card.infohidden:not(.infoflip){background-image:url(' + fileLoadedEvent.target.result + ')}');\r\n                };\r\n                fileReader.readAsDataURL(fileToLoad);\r\n              });\r\n            }\r\n            if (lib.config.hp_style == 'custom') {\r\n              game.getDB('image', 'hp_style1', function (fileToLoad) {\r\n                if (!fileToLoad) return;\r\n                var fileReader = new FileReader();\r\n                fileReader.onload = function (fileLoadedEvent) {\r\n                  if (ui.css.hp_stylesheet1) {\r\n                    ui.css.hp_stylesheet1.remove();\r\n                  }\r\n                  ui.css.hp_stylesheet1 = lib.init.sheet('.hp:not(.text):not(.actcount)[data-condition=\"high\"]>div:not(.lost){background-image:url(' + fileLoadedEvent.target.result + ')}');\r\n                };\r\n                fileReader.readAsDataURL(fileToLoad);\r\n              });\r\n              game.getDB('image', 'hp_style2', function (fileToLoad) {\r\n                if (!fileToLoad) return;\r\n                var fileReader = new FileReader();\r\n                fileReader.onload = function (fileLoadedEvent) {\r\n                  if (ui.css.hp_stylesheet2) {\r\n                    ui.css.hp_stylesheet2.remove();\r\n                  }\r\n                  ui.css.hp_stylesheet2 = lib.init.sheet('.hp:not(.text):not(.actcount)[data-condition=\"mid\"]>div:not(.lost){background-image:url(' + fileLoadedEvent.target.result + ')}');\r\n                };\r\n                fileReader.readAsDataURL(fileToLoad);\r\n              });\r\n              game.getDB('image', 'hp_style3', function (fileToLoad) {\r\n                if (!fileToLoad) return;\r\n                var fileReader = new FileReader();\r\n                fileReader.onload = function (fileLoadedEvent) {\r\n                  if (ui.css.hp_stylesheet3) {\r\n                    ui.css.hp_stylesheet3.remove();\r\n                  }\r\n                  ui.css.hp_stylesheet3 = lib.init.sheet('.hp:not(.text):not(.actcount)[data-condition=\"low\"]>div:not(.lost){background-image:url(' + fileLoadedEvent.target.result + ')}');\r\n                };\r\n                fileReader.readAsDataURL(fileToLoad);\r\n              });\r\n              game.getDB('image', 'hp_style4', function (fileToLoad) {\r\n                if (!fileToLoad) return;\r\n                var fileReader = new FileReader();\r\n                fileReader.onload = function (fileLoadedEvent) {\r\n                  if (ui.css.hp_stylesheet4) {\r\n                    ui.css.hp_stylesheet4.remove();\r\n                  }\r\n                  ui.css.hp_stylesheet4 = lib.init.sheet('.hp:not(.text):not(.actcount)>.lost{background-image:url(' + fileLoadedEvent.target.result + ')}');\r\n                };\r\n                fileReader.readAsDataURL(fileToLoad);\r\n              });\r\n            }\r\n            if (lib.config.player_style == 'custom') {\r\n              ui.css.player_stylesheet = lib.init.sheet('#window .player{background-image:none;background-size:100% 100%;}');\r\n              game.getDB('image', 'player_style', function (fileToLoad) {\r\n                if (!fileToLoad) return;\r\n                var fileReader = new FileReader();\r\n                fileReader.onload = function (fileLoadedEvent) {\r\n                  if (ui.css.player_stylesheet) {\r\n                    ui.css.player_stylesheet.remove();\r\n                  }\r\n                  ui.css.player_stylesheet = lib.init.sheet('#window .player{background-image:url(\"' + fileLoadedEvent.target.result + '\");background-size:100% 100%;}');\r\n                };\r\n                fileReader.readAsDataURL(fileToLoad);\r\n              });\r\n            }\r\n            if (lib.config.border_style == 'custom') {\r\n              game.getDB('image', 'border_style', function (fileToLoad) {\r\n                if (!fileToLoad) return;\r\n                var fileReader = new FileReader();\r\n                fileReader.onload = function (fileLoadedEvent) {\r\n                  if (ui.css.border_stylesheet) {\r\n                    ui.css.border_stylesheet.remove();\r\n                  }\r\n                  ui.css.border_stylesheet = lib.init.sheet();\r\n                  ui.css.border_stylesheet.sheet.insertRule('#window .player>.framebg{display:block;background-image:url(\"' + fileLoadedEvent.target.result + '\")}', 0);\r\n                  ui.css.border_stylesheet.sheet.insertRule('.player>.count{z-index: 3 !important;border-radius: 2px !important;text-align: center !important;}', 0);\r\n                };\r\n                fileReader.readAsDataURL(fileToLoad);\r\n              });\r\n            }\r\n            if (lib.config.control_style == 'custom') {\r\n              game.getDB('image', 'control_style', function (fileToLoad) {\r\n                if (!fileToLoad) return;\r\n                var fileReader = new FileReader();\r\n                fileReader.onload = function (fileLoadedEvent) {\r\n                  if (ui.css.control_stylesheet) {\r\n                    ui.css.control_stylesheet.remove();\r\n                  }\r\n                  ui.css.control_stylesheet = lib.init.sheet('#window .control,.menubutton:not(.active):not(.highlight):not(.red):not(.blue),#window #system>div>div{background-image:url(\"' + fileLoadedEvent.target.result + '\")}');\r\n                };\r\n                fileReader.readAsDataURL(fileToLoad);\r\n              });\r\n            }\r\n            if (lib.config.menu_style == 'custom') {\r\n              game.getDB('image', 'menu_style', function (fileToLoad) {\r\n                if (!fileToLoad) return;\r\n                var fileReader = new FileReader();\r\n                fileReader.onload = function (fileLoadedEvent) {\r\n                  if (ui.css.menu_stylesheet) {\r\n                    ui.css.menu_stylesheet.remove();\r\n                  }\r\n                  ui.css.menu_stylesheet = lib.init.sheet('html #window>.dialog.popped,html .menu,html .menubg{background-image:url(\"' + fileLoadedEvent.target.result + '\");background-size:cover}');\r\n                };\r\n                fileReader.readAsDataURL(fileToLoad);\r\n              });\r\n            }\r\n          }\r\n\r\n\r\n          var proceed2 = function () {\r\n            var mode = lib.imported.mode;\r\n            var card = lib.imported.card;\r\n            var character = lib.imported.character;\r\n            var play = lib.imported.play;\r\n            delete window.game;\r\n            var i, j, k;\r\n            for (i in mode[lib.config.mode].element) {\r\n              if (!lib.element[i]) lib.element[i] = [];\r\n              for (j in mode[lib.config.mode].element[i]) {\r\n                if (j == 'init') {\r\n                  if (!lib.element[i].inits) lib.element[i].inits = [];\r\n                  lib.element[i].inits.push(mode[lib.config.mode].element[i][j]);\r\n                }\r\n                else {\r\n                  lib.element[i][j] = mode[lib.config.mode].element[i][j];\r\n                }\r\n              }\r\n            }\r\n            for (i in mode[lib.config.mode].ai) {\r\n              if (typeof mode[lib.config.mode].ai[i] == 'object') {\r\n                if (ai[i] == undefined) ai[i] = {};\r\n                for (j in mode[lib.config.mode].ai[i]) {\r\n                  ai[i][j] = mode[lib.config.mode].ai[i][j];\r\n                }\r\n              }\r\n              else {\r\n                ai[i] = mode[lib.config.mode].ai[i];\r\n              }\r\n            }\r\n            for (i in mode[lib.config.mode].ui) {\r\n              if (typeof mode[lib.config.mode].ui[i] == 'object') {\r\n                if (ui[i] == undefined) ui[i] = {};\r\n                for (j in mode[lib.config.mode].ui[i]) {\r\n                  ui[i][j] = mode[lib.config.mode].ui[i][j];\r\n                }\r\n              }\r\n              else {\r\n                ui[i] = mode[lib.config.mode].ui[i];\r\n              }\r\n            }\r\n            for (i in mode[lib.config.mode].game) {\r\n              game[i] = mode[lib.config.mode].game[i];\r\n            }\r\n            for (i in mode[lib.config.mode].get) {\r\n              get[i] = mode[lib.config.mode].get[i];\r\n            }\r\n            lib.init.start = mode[lib.config.mode].start;\r\n            lib.init.startBefore = mode[lib.config.mode].startBefore;\r\n            if (game.onwash) {\r\n              lib.onwash.push(game.onwash);\r\n              delete game.onwash;\r\n            }\r\n            if (game.onover) {\r\n              lib.onover.push(game.onover);\r\n              delete game.onover;\r\n            }\r\n            lib.config.banned = lib.config[lib.config.mode + '_banned'] || [];\r\n            lib.config.bannedcards = lib.config[lib.config.mode + '_bannedcards'] || [];\r\n\r\n            lib.rank = window.vtuberkill_character_rank;\r\n            delete window.vtuberkill_character_rank;\r\n            for (i in mode[lib.config.mode]) {\r\n              if (i == 'element') continue;\r\n              if (i == 'game') continue;\r\n              if (i == 'ai') continue;\r\n              if (i == 'ui') continue;\r\n              if (i == 'get') continue;\r\n              if (i == 'config') continue;\r\n              if (i == 'onreinit') continue;\r\n              if (i == 'start') continue;\r\n              if (i == 'startBefore') continue;\r\n              if (lib[i] == undefined) lib[i] = (Array.isArray(mode[lib.config.mode][i])) ? [] : {};\r\n              for (j in mode[lib.config.mode][i]) {\r\n                lib[i][j] = mode[lib.config.mode][i][j];\r\n              }\r\n            }\r\n            if (typeof mode[lib.config.mode].init == 'function') {\r\n              mode[lib.config.mode].init();\r\n            }\r\n\r\n            var connectCharacterPack = [];\r\n            var connectCardPack = [];\r\n            for (i in character) {\r\n              if (character[i].character) {\r\n                lib.characterPack[i] = character[i].character\r\n              }\r\n              for (j in character[i]) {\r\n                if (j == 'mode' || j == 'forbid') continue;\r\n                if (j == 'connect') {\r\n                  connectCharacterPack.push(i);\r\n                  continue;\r\n                }\r\n                if (j == 'character' && !lib.config.characters.contains(i) && lib.config.mode != 'connect') {\r\n                  if (lib.config.mode == 'chess' && get.config('chess_mode') == 'leader' && get.config('chess_leader_allcharacter')) {\r\n                    for (k in character[i][j]) {\r\n                      lib.hiddenCharacters.push(k);\r\n                    }\r\n                  }\r\n                  else if (lib.config.mode != 'boss' || i != 'boss') {\r\n                    continue;\r\n                  }\r\n                }\r\n                if (Array.isArray(lib[j]) && Array.isArray(character[i][j])) {\r\n                  lib[j].addArray(character[i][j]);\r\n                  continue;\r\n                }\r\n                for (k in character[i][j]) {\r\n                  if (j == 'character') {\r\n                    if (!character[i][j][k][4]) {\r\n                      character[i][j][k][4] = [];\r\n                    }\r\n                    if (character[i][j][k][4].contains('boss') ||\r\n                      character[i][j][k][4].contains('hiddenboss')) {\r\n                      lib.config.forbidai.add(k);\r\n                    }\r\n                    if (lib.config.forbidai_user && lib.config.forbidai_user.contains(k)) {\r\n                      lib.config.forbidai.add(k);\r\n                    }\r\n                    for (var l = 0; l < character[i][j][k][3].length; l++) {\r\n                      lib.skilllist.add(character[i][j][k][3][l]);\r\n                    }\r\n                  }\r\n                  if (j == 'skill' && k[0] == '_' && (lib.config.mode != 'connect' ? (!lib.config.characters.contains(i)) : (!character[i].connect))) {\r\n                    continue;\r\n                  }\r\n                  if (j == 'translate' && k == i) {\r\n                    lib[j][k + '_character_config'] = character[i][j][k];\r\n                  }\r\n                  else {\r\n                    if (lib[j][k] == undefined) {\r\n                      if (j == 'skill' && !character[i][j][k].forceLoad && lib.config.mode == 'connect' && !character[i].connect) {\r\n                        lib[j][k] = {\r\n                          nopop: character[i][j][k].nopop,\r\n                          derivation: character[i][j][k].derivation\r\n                        };\r\n                      }\r\n                      else {\r\n                        lib[j][k] = character[i][j][k];\r\n                      }\r\n                      if (j == 'card' && lib[j][k].derivation) {\r\n                        if (!lib.cardPack.mode_derivation) {\r\n                          lib.cardPack.mode_derivation = [k];\r\n                        }\r\n                        else {\r\n                          lib.cardPack.mode_derivation.push(k);\r\n                        }\r\n                      }\r\n                    }\r\n                    else if (Array.isArray(lib[j][k]) && Array.isArray(character[i][j][k])) {\r\n                      lib[j][k].addArray(character[i][j][k]);\r\n                    }\r\n                    else {\r\n                      console.log('dublicate ' + j + ' in character ' + i + ':\\n' + k + '\\n' + ': ' + lib[j][k] + '\\n' + character[i][j][k]);\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            var connect_avatar_list = [];\r\n            for (var i in lib.character) {\r\n              connect_avatar_list.push(i);\r\n            }\r\n            connect_avatar_list.sort(lib.sort.capt);\r\n            for (var i = 0; i < connect_avatar_list.length; i++) {\r\n              var ia = connect_avatar_list[i];\r\n              lib.mode.connect.config.connect_avatar.item[ia] = lib.translate[ia];\r\n            }\r\n            if (lib.config.mode != 'connect') {\r\n              var pilecfg = lib.config.customcardpile[get.config('cardpilename') || '当前牌堆'];\r\n              if (pilecfg) {\r\n                lib.config.bannedpile = get.copy(pilecfg[0] || {});\r\n                lib.config.addedpile = get.copy(pilecfg[1] || {});\r\n              }\r\n              else {\r\n                lib.config.bannedpile = {};\r\n                lib.config.addedpile = {};\r\n              }\r\n            }\r\n            else {\r\n              lib.cardPackList = {};\r\n            }\r\n            for (i in card) {\r\n              lib.cardPack[i] = [];\r\n              if (card[i].card) {\r\n                for (var j in card[i].card) {\r\n                  if (!card[i].card[j].hidden && card[i].translate[j + '_info']) {\r\n                    lib.cardPack[i].push(j);\r\n                  }\r\n                }\r\n              }\r\n              for (j in card[i]) {\r\n                if (j == 'mode' || j == 'forbid') continue;\r\n                if (j == 'connect') {\r\n                  connectCardPack.push(i);\r\n                  continue;\r\n                }\r\n                if (j == 'list') {\r\n                  if (lib.config.mode == 'connect') {\r\n                    lib.cardPackList[i] = card[i][j];\r\n                  }\r\n                  else {\r\n                    if (lib.config.cards.contains(i)) {\r\n                      var pile;\r\n                      if (typeof card[i][j] == 'function') {\r\n                        pile = card[i][j]();\r\n                      }\r\n                      else {\r\n                        pile = card[i][j];\r\n                      }\r\n                      lib.cardPile[i] = pile.slice(0);\r\n                      if (lib.config.bannedpile[i]) {\r\n                        for (var k = 0; k < lib.config.bannedpile[i].length; k++) {\r\n                          pile[lib.config.bannedpile[i][k]] = null;\r\n                        }\r\n                      }\r\n                      for (var k = 0; k < pile.length; k++) {\r\n                        if (!pile[k]) {\r\n                          pile.splice(k--, 1);\r\n                        }\r\n                      }\r\n                      if (lib.config.addedpile[i]) {\r\n                        for (var k = 0; k < lib.config.addedpile[i].length; k++) {\r\n                          pile.push(lib.config.addedpile[i][k]);\r\n                        }\r\n                      }\r\n                      lib.card.list = lib.card.list.concat(pile);\r\n                    }\r\n                  }\r\n                }\r\n                else {\r\n                  for (k in card[i][j]) {\r\n                    if (j == 'skill' && k[0] == '_' && !card[i][j][k].forceLoad && (lib.config.mode != 'connect' ? (!lib.config.cards.contains(i)) : (!card[i].connect))) {\r\n                      continue;\r\n                    }\r\n                    if (j == 'translate' && k == i) {\r\n                      lib[j][k + '_card_config'] = card[i][j][k];\r\n                    }\r\n                    else {\r\n                      if (lib[j][k] == undefined) {\r\n                        if (j == 'skill' && !card[i][j][k].forceLoad && lib.config.mode == 'connect' && !card[i].connect) {\r\n                          lib[j][k] = {\r\n                            nopop: card[i][j][k].nopop,\r\n                            derivation: card[i][j][k].derivation\r\n                          };\r\n                        }\r\n                        else {\r\n                          lib[j][k] = card[i][j][k];\r\n                        }\r\n                      }\r\n                      else console.log('dublicate ' + j + ' in card ' + i + ':\\n' + k + '\\n' + lib[j][k] + '\\n' + card[i][j][k]);\r\n                      if (j == 'card' && lib[j][k].derivation) {\r\n                        if (!lib.cardPack.mode_derivation) {\r\n                          lib.cardPack.mode_derivation = [k];\r\n                        }\r\n                        else {\r\n                          lib.cardPack.mode_derivation.push(k);\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            if (lib.cardPack.mode_derivation) {\r\n              for (var i = 0; i < lib.cardPack.mode_derivation.length; i++) {\r\n                if (typeof lib.card[lib.cardPack.mode_derivation[i]].derivation == 'string' && !lib.character[lib.card[lib.cardPack.mode_derivation[i]].derivation]) {\r\n                  lib.cardPack.mode_derivation.splice(i--, 1);\r\n                }\r\n                else if (typeof lib.card[lib.cardPack.mode_derivation[i]].derivationpack == 'string' && !lib.config.cards.contains(lib.card[lib.cardPack.mode_derivation[i]].derivationpack)) {\r\n                  lib.cardPack.mode_derivation.splice(i--, 1);\r\n                }\r\n              }\r\n              if (lib.cardPack.mode_derivation.length == 0) {\r\n                delete lib.cardPack.mode_derivation;\r\n              }\r\n            }\r\n            if (lib.config.mode != 'connect') {\r\n              for (i in play) {\r\n                if (lib.config.hiddenPlayPack.contains(i)) continue;\r\n                if (play[i].forbid && play[i].forbid.contains(lib.config.mode)) continue;\r\n                if (play[i].mode && play[i].mode.contains(lib.config.mode) == false) continue;\r\n                for (j in play[i].element) {\r\n                  if (!lib.element[j]) lib.element[j] = [];\r\n                  for (k in play[i].element[j]) {\r\n                    if (k == 'init') {\r\n                      if (!lib.element[j].inits) lib.element[j].inits = [];\r\n                      lib.element[j].inits.push(play[i].element[j][k]);\r\n                    }\r\n                    else {\r\n                      lib.element[j][k] = play[i].element[j][k];\r\n                    }\r\n                  }\r\n                }\r\n                for (j in play[i].ui) {\r\n                  if (typeof play[i].ui[j] == 'object') {\r\n                    if (ui[j] == undefined) ui[j] = {};\r\n                    for (k in play[i].ui[j]) {\r\n                      ui[j][k] = play[i].ui[j][k];\r\n                    }\r\n                  }\r\n                  else {\r\n                    ui[j] = play[i].ui[j];\r\n                  }\r\n                }\r\n                for (j in play[i].game) {\r\n                  game[j] = play[i].game[j];\r\n                }\r\n                for (j in play[i].get) {\r\n                  get[j] = play[i].get[j];\r\n                }\r\n                for (j in play[i]) {\r\n                  if (j == 'mode' || j == 'forbid' || j == 'init' || j == 'element' ||\r\n                    j == 'game' || j == 'get' || j == 'ui' || j == 'arenaReady') continue;\r\n                  for (k in play[i][j]) {\r\n                    if (j == 'translate' && k == i) {\r\n                      // lib[j][k+'_play_config']=play[i][j][k];\r\n                    }\r\n                    else {\r\n                      if (lib[j][k] != undefined) {\r\n                        console.log('dublicate ' + j + ' in play ' + i + ':\\n' + k + '\\n' + ': ' + lib[j][k] + '\\n' + play[i][j][k]);\r\n                      }\r\n                      lib[j][k] = play[i][j][k];\r\n                    }\r\n                  }\r\n                }\r\n                if (typeof play[i].init == 'function') play[i].init();\r\n                if (typeof play[i].arenaReady == 'function') lib.arenaReady.push(play[i].arenaReady);\r\n              }\r\n            }\r\n\r\n            lib.connectCharacterPack = [];\r\n            lib.connectCardPack = [];\r\n            for (var i = 0; i < lib.config.all.characters.length; i++) {\r\n              var packname = lib.config.all.characters[i];\r\n              if (connectCharacterPack.contains(packname)) {\r\n                lib.connectCharacterPack.push(packname)\r\n              }\r\n            }\r\n            for (var i = 0; i < lib.config.all.cards.length; i++) {\r\n              var packname = lib.config.all.cards[i];\r\n              if (connectCardPack.contains(packname)) {\r\n                lib.connectCardPack.push(packname)\r\n              }\r\n            }\r\n            if (lib.config.mode != 'connect') {\r\n              for (i = 0; i < lib.card.list.length; i++) {\r\n                if (lib.card.list[i][2] == 'huosha') {\r\n                  lib.card.list[i] = lib.card.list[i].slice(0);\r\n                  lib.card.list[i][2] = 'sha';\r\n                  lib.card.list[i][3] = 'fire';\r\n                }\r\n                else if (lib.card.list[i][2] == 'leisha') {\r\n                  lib.card.list[i] = lib.card.list[i].slice(0);\r\n                  lib.card.list[i][2] = 'sha';\r\n                  lib.card.list[i][3] = 'thunder';\r\n                }\r\n                else if (lib.card.list[i][2] == 'haisha') {\r\n                  lib.card.list[i] = lib.card.list[i].slice(0);\r\n                  lib.card.list[i][2] = 'sha';\r\n                  lib.card.list[i][3] = 'ocean';\r\n                }\r\n                else if (lib.card.list[i][2] == 'yamisha') {\r\n                  lib.card.list[i] = lib.card.list[i].slice(0);\r\n                  lib.card.list[i][2] = 'sha';\r\n                  lib.card.list[i][3] = 'yami';\r\n                }\r\n                if (lib.card.list[i][2] == 'haitao') {\r\n                  lib.card.list[i] = lib.card.list[i].slice(0);\r\n                  lib.card.list[i][2] = 'tao';\r\n                  lib.card.list[i][3] = 'ocean';\r\n                }\r\n                if (lib.card.list[i][2] == 'haijiu') {\r\n                  lib.card.list[i] = lib.card.list[i].slice(0);\r\n                  lib.card.list[i][2] = 'jiu';\r\n                  lib.card.list[i][3] = 'ocean';\r\n                }\r\n                if (!lib.card[lib.card.list[i][2]]) {\r\n                  lib.card.list.splice(i, 1); i--;\r\n                }\r\n                else if (lib.card[lib.card.list[i][2]].mode &&\r\n                  lib.card[lib.card.list[i][2]].mode.contains(lib.config.mode) == false) {\r\n                  lib.card.list.splice(i, 1); i--;\r\n                }\r\n              }\r\n            }\r\n\r\n            if (lib.config.mode == 'connect') {\r\n              _status.connectMode = true;\r\n            }\r\n            if (window.isNonameServer) {\r\n              lib.cheat.i();\r\n            }\r\n            else if (lib.config.dev && (!_status.connectMode || lib.config.debug)) {\r\n              lib.cheat.i();\r\n            }\r\n            lib.config.sort_card = get.sortCard(lib.config.sort);\r\n            delete lib.imported.character;\r\n            delete lib.imported.card;\r\n            delete lib.imported.mode;\r\n            delete lib.imported.play;\r\n            for (var i in lib.init) {\r\n              if (i.indexOf('setMode_') == 0) {\r\n                delete lib.init[i];\r\n              }\r\n            }\r\n            if (!_status.connectMode) {\r\n              for (var i = 0; i < lib.extensions.length; i++) {\r\n                try {\r\n                  _status.extension = lib.extensions[i][0];\r\n                  _status.evaluatingExtension = lib.extensions[i][3];\r\n                  lib.extensions[i][1](lib.extensions[i][2], lib.extensions[i][4]);\r\n                  if (lib.extensions[i][4]) {\r\n                    if (lib.extensions[i][4].character) {\r\n                      for (var j in lib.extensions[i][4].character.character) {\r\n                        game.addCharacterPack(get.copy(lib.extensions[i][4].character));\r\n                        break;\r\n                      }\r\n                    }\r\n                    if (lib.extensions[i][4].card) {\r\n                      for (var j in lib.extensions[i][4].card.card) {\r\n                        game.addCardPack(get.copy(lib.extensions[i][4].card));\r\n                        break;\r\n                      }\r\n                    }\r\n                    if (lib.extensions[i][4].skill) {\r\n                      for (var j in lib.extensions[i][4].skill.skill) {\r\n                        game.addSkill(j, lib.extensions[i][4].skill.skill[j],\r\n                          lib.extensions[i][4].skill.translate[j], lib.extensions[i][4].skill.translate[j + '_info']);\r\n                      }\r\n                    }\r\n                  }\r\n                  delete _status.extension;\r\n                  delete _status.evaluatingExtension;\r\n                }\r\n                catch (e) {\r\n                  console.log(e);\r\n                }\r\n              }\r\n            }\r\n            delete lib.extensions;\r\n\r\n            if (lib.init.startBefore) {\r\n              lib.init.startBefore();\r\n              delete lib.init.startBefore;\r\n            }\r\n            ui.create.arena();\r\n            game.createEvent('game', false).setContent(lib.init.start);\r\n            if (lib.mode[lib.config.mode] && lib.mode[lib.config.mode].fromextension) {\r\n              var startstr = mode[lib.config.mode].start.toString();\r\n              if (startstr.indexOf('onfree') == -1) {\r\n                setTimeout(lib.init.onfree, 500);\r\n              }\r\n            }\r\n            delete lib.init.start;\r\n            game.loop();\r\n          }\r\n          var proceed = function () {\r\n            if (!lib.db) {\r\n              try {\r\n                lib.storage = JSON.parse(localStorage.getItem(lib.configprefix + lib.config.mode));\r\n                if (typeof lib.storage != 'object') throw ('err');\r\n                if (lib.storage == null) throw ('err');\r\n              }\r\n              catch (err) {\r\n                lib.storage = {};\r\n                localStorage.setItem(lib.configprefix + lib.config.mode, \"{}\");\r\n              }\r\n              proceed2();\r\n            }\r\n            else {\r\n              game.getDB('data', lib.config.mode, function (obj) {\r\n                lib.storage = obj || {};\r\n                proceed2();\r\n              });\r\n            }\r\n          };\r\n          if (!lib.imported.mode || !lib.imported.mode[lib.config.mode]) {\r\n            window.inSplash = true;\r\n            clearTimeout(window.resetGameTimeout);\r\n            delete window.resetGameTimeout;\r\n            var clickedNode = false;\r\n            var clickNode = function () {\r\n              if (clickedNode) return;\r\n              this.classList.add('clicked');\r\n              clickedNode = true;\r\n              lib.config.mode = this.link;\r\n              game.saveConfig('mode', this.link);\r\n              if (this.link == 'connect') {\r\n                localStorage.setItem(lib.configprefix + 'directstart', true);\r\n                game.reload();\r\n              }\r\n              else {\r\n                if (game.layout != 'mobile' && lib.layoutfixed.indexOf(lib.config.mode) !== -1) {\r\n                  game.layout = 'mobile';\r\n                  ui.css.layout.href = lib.assetURL + 'layout/' + game.layout + '/layout.css';\r\n                }\r\n                else if (game.layout == 'mobile' && lib.config.layout != 'mobile' && lib.layoutfixed.indexOf(lib.config.mode) === -1) {\r\n                  game.layout = lib.config.layout;\r\n                  if (game.layout == 'default') {\r\n                    ui.css.layout.href = '';\r\n                  }\r\n                  else {\r\n                    ui.css.layout.href = lib.assetURL + 'layout/' + game.layout + '/layout.css';\r\n                  }\r\n                }\r\n                splash.delete(1000);\r\n                delete window.inSplash;\r\n                window.resetGameTimeout = setTimeout(lib.init.reset, 5000);\r\n\r\n                this.listenTransition(function () {\r\n                  lib.init.js(lib.assetURL + 'mode', lib.config.mode, proceed);\r\n                }, 500);\r\n              }\r\n            }\r\n            var downNode = function () {\r\n              this.classList.add('glow');\r\n            }\r\n            var upNode = function () {\r\n              this.classList.remove('glow');\r\n            }\r\n            var splash = ui.create.div('#splash', document.body);\r\n            if (lib.config.touchscreen) {\r\n              splash.classList.add('touch');\r\n              lib.setScroll(splash);\r\n            }\r\n            if (lib.config.player_border != 'wide') {\r\n              splash.classList.add('slim');\r\n            }\r\n            splash.dataset.radius_size = lib.config.radius_size;\r\n            for (var i = 0; i < lib.config.all.mode.length; i++) {\r\n              var node = ui.create.div('.hidden', splash, clickNode);\r\n              node.link = lib.config.all.mode[i];\r\n              ui.create.div(node, '.splashtext', get.verticalStr(get.translation(lib.config.all.mode[i])));\r\n              if (lib.config.all.stockmode.indexOf(lib.config.all.mode[i]) != -1) {\r\n                ui.create.div(node, '.avatar').setBackgroundImage('image/splash/' + lib.config.all.mode[i] + '.jpg');\r\n              }\r\n              else {\r\n                var avatarnode = ui.create.div(node, '.avatar');\r\n                var avatarbg = lib.mode[lib.config.all.mode[i]].splash;\r\n                if (avatarbg.indexOf('ext:') == 0) {\r\n                  avatarnode.setBackgroundImage(avatarbg.replace(/ext:/, 'extension/'));\r\n                }\r\n                else {\r\n                  avatarnode.setBackgroundDB(avatarbg);\r\n                }\r\n              }\r\n              if (!lib.config.touchscreen) {\r\n                node.addEventListener('mousedown', downNode);\r\n                node.addEventListener('mouseup', upNode);\r\n                node.addEventListener('mouseleave', upNode);\r\n              }\r\n              setTimeout((function (node) {\r\n                return function () {\r\n                  node.show();\r\n                }\r\n              }(node)), i * 100);\r\n            }\r\n            if (lib.config.mousewheel) {\r\n              splash.onmousewheel = ui.click.mousewheel;\r\n            }\r\n          }\r\n          else {\r\n            proceed();\r\n          }\r\n          localStorage.removeItem(lib.configprefix + 'directstart');\r\n          delete lib.init.init;//??\r\n        },\r\n        startOnline: [function () {\r\n          Evt._resultid = null;\r\n          Evt._result = null;\r\n          game.pause();\r\n        },\r\n        function () {\r\n          if (result) {\r\n            if (Evt._resultid) {\r\n              result.id = Evt._resultid;\r\n            }\r\n            game.send('result', result);\r\n          }\r\n          Evt.goto(0);\r\n        }],\r\n        /**\r\n         * 闲时执行，一般选择角色后开始执行这个方法\r\n         * @function\r\n         */\r\n        onfree: function () {\r\n          if (lib.onfree) {\r\n            clearTimeout(window.resetGameTimeout);\r\n            delete window.resetGameTimeout;\r\n            if (!game.syncMenu) {\r\n              delete window.resetExtension;\r\n              localStorage.removeItem(lib.configprefix + 'disable_extension');\r\n            }\r\n\r\n            if (game.removeFile && lib.config.brokenFile.length) {\r\n              while (lib.config.brokenFile.length) {\r\n                game.removeFile(lib.config.brokenFile.shift());\r\n              }\r\n              game.saveConfigValue('brokenFile');\r\n            }\r\n\r\n            var onfree = lib.onfree;\r\n            delete lib.onfree;\r\n            var loop = function () {\r\n              if (onfree.length) {\r\n                (onfree.shift())();\r\n                setTimeout(loop, 100);\r\n              }\r\n            };\r\n            setTimeout(loop, 500);\r\n          }\r\n        },\r\n        connection: function (ws) {\r\n          var client = {\r\n            ws: ws,\r\n            id: ws.wsid || get.id(),\r\n            closed: false\r\n          };\r\n          lib.node.clients.push(client);\r\n          for (var i in lib.element.client) {\r\n            client[i] = lib.element.client[i];\r\n          }\r\n          if (window.isNonameServer) {\r\n            document.querySelector('#server_count').innerHTML = lib.node.clients.length;\r\n          }\r\n          ws.on('message', function (messagestr) {\r\n            var message;\r\n            try {\r\n              message = JSON.parse(messagestr);\r\n              if (!Array.isArray(message) ||\r\n                typeof lib.message.server[message[0]] !== 'function') {\r\n                throw ('err');\r\n              }\r\n              for (var i = 1; i < message.length; i++) {\r\n                message[i] = get.parsedResult(message[i]);\r\n              }\r\n            }\r\n            catch (e) {\r\n              console.log(e);\r\n              console.log('invalid message: ' + messagestr);\r\n              return;\r\n            }\r\n            lib.message.server[message.shift()].apply(client, message);\r\n          });\r\n          ws.on('close', function () {\r\n            client.close();\r\n          });\r\n          client.send('opened');\r\n        },\r\n        /**\r\n         * 创建（并插入文档）新的`<style>`\r\n         * @function\r\n         * @param {...string} rules css rules\r\n         * @returns {!HTMLStyleElement} 新的`<style>`\r\n         */\r\n        sheet: function () {\r\n          var style = document.createElement('style');\r\n          document.head.appendChild(style);\r\n          for (var i = 0; i < arguments.length; i++) {\r\n            if (typeof arguments[i] == 'string') {\r\n              style.sheet.insertRule(arguments[i], 0);\r\n            }\r\n          }\r\n          return style;\r\n        },\r\n        /**\r\n         * 读取一个css文件\r\n         * 于文档中创建（并插入文档中）新的`<link>`，如果设置路径则先加载再返回，否则直接返回空`<link>`\r\n         * @function lib.init.css\r\n         * @param {string} [path=null] 要加载的css文件所在目录, 如果为null，不设置生成的`<link>`的href值\r\n         * @param {string} file 文件名（不包括拓展名），自动添加后缀.css；如果path为null，则被忽略\r\n         * @param {function():void} [before] 可选，onload回调函数，在新`<link>`加载完成时被调用\r\n         */\r\n        /**\r\n         * 读取一个css文件\r\n         * 于文档中创建（并插入文档中）新的`<link>`，如果设置路径则先加载再返回，否则直接返回空`<link>`\r\n         * @function lib.init.css\r\n         * @variation 2\r\n         * @param {string} [path=null] 要加载的css文件所在目录, 如果为null，不设置生成的`<link>`的href值\r\n         * @param {string} file 文件名（不包括拓展名），自动添加后缀.css；如果path为null，则被忽略\r\n         * @param {HTMLLinkElement} [before] 可选，一个{@link HTMLLinkElement}对象，新`<link>`会插入到`before`前\r\n         * @returns {HTMLLinkElement} 新的`<link>`\r\n         */\r\n        css: function (path, file, before) {\r\n          var style = document.createElement(\"link\");\r\n          style.rel = \"stylesheet\";\r\n          if (path) {\r\n            style.href = path + '/' + file + \".css\";\r\n          }\r\n          if (typeof before == 'function') {\r\n            style.addEventListener('load', before);\r\n            document.head.appendChild(style);\r\n          }\r\n          else if (before) {\r\n            document.head.insertBefore(style, before);\r\n          }\r\n          else {\r\n            document.head.appendChild(style);\r\n          }\r\n          return style;\r\n        },\r\n        /**\r\n         * 读取一个js文件\r\n         * 于文档中创建新的`<script>`对象\r\n         * @function lib.init.js\r\n         * @param {!string} dir 要加载的js文件所在目录, 如果为null，不设置生成的`<link>`的href值\r\n         * @param {!string} file 文件名（不包括拓展名），自动添加后缀.js；如果path为null，则被忽略\r\n         * @param {function():void} [onload] 可选，onload回调函数\r\n         * @param {function():void} [onerror] 可选，onerror回调函数 \r\n         * @returns {!HTMLScriptElement} 新的`<script>`\r\n         */\r\n        /**\r\n         * 读取一个js文件\r\n         * 于文档中创建新的`<script>`对象\r\n         * @function lib.init.js\r\n         * @variation 2\r\n         * @param {!string} path 要加载的js文件所在路径, 如果为null，不设置生成的`<link>`的href值\r\n         * @param {null} file 文件名（无拓展名），自动添加后缀.js\r\n         * @param {function():void} [onload] 可选，onload回调函数\r\n         * @param {function():void} [onerror] 可选，onerror回调函数 \r\n         * @returns {!HTMLScriptElement} 新的`<script>`\r\n         */\r\n        /**\r\n         * 读取一个js文件\r\n         * 于文档中创建一组新的`<script>`对象\r\n         * @function lib.init.js\r\n         * @variation 3\r\n         * @param {!string} path 要加载的js文件所在路径, 如果为null，不设置生成的`<link>`的href值\r\n         * @param {Array<string>} files 文件名数组\r\n         * @param {?function():void} [onload] 可选，onload回调函数，对每个新的`<script>`调用\r\n         * @param {?function():void} [onerror] 可选，onerror回调函数，对每个新的`<script>`调度\r\n         */\r\n        js: function (path, file, onload, onerror) {\r\n          if (path[path.length - 1] == '/') {\r\n            path = path.slice(0, path.length - 1);\r\n          }\r\n          //??\r\n          if (path == lib.assetURL + 'mode' && lib.config.all.stockmode.indexOf(file) == -1) {\r\n            lib.init['setMode_' + file]();\r\n            onload();\r\n            return;\r\n          }\r\n          if (Array.isArray(file)) {\r\n            for (var i = 0; i < file.length; i++) {\r\n              lib.init.js(path, file[i], onload, onerror);\r\n            }\r\n          }\r\n          else {\r\n            var script = document.createElement('script');\r\n            if (!file) {\r\n              script.src = path;\r\n            }\r\n            else {\r\n              script.src = path + '/' + file + \".js\";\r\n            }\r\n            if (path.indexOf('http') == 0) {\r\n              script.src += '?rand=' + get.id();\r\n              script.addEventListener('load', function () {\r\n                script.remove();\r\n              });\r\n            }\r\n            document.head.appendChild(script);\r\n            if (typeof onload == 'function') {\r\n              script.addEventListener('load', onload);\r\n              script.addEventListener('error', onerror);\r\n            }\r\n            return script;\r\n          }\r\n        },\r\n        req: function (str, onload, onerror, master) {\r\n          var sScriptURL;\r\n          if (str.indexOf('http') == 0) {\r\n            sScriptURL = str;\r\n          }\r\n          else {\r\n            var url = get.url(master);\r\n            if (url[url.length - 1] != '/') {\r\n              url += '/';\r\n            }\r\n            sScriptURL = url + str;\r\n          }\r\n          var oReq = new XMLHttpRequest();\r\n          if (onload) oReq.addEventListener(\"load\", onload);\r\n          if (onerror) oReq.addEventListener(\"error\", onerror);\r\n          oReq.open(\"GET\", sScriptURL);\r\n          oReq.send();\r\n        },\r\n        /**\r\n         * 读取一个json文件\r\n         * @function\r\n         * @param {!string} url url路径\r\n         * @param {function(Object):void} onload 成功时的回调函数\r\n         * @param {function():void} onerror 失败时回调函数\r\n         */\r\n        json: function (url, onload, onerror) {\r\n          var oReq = new XMLHttpRequest();\r\n          if (onload) oReq.addEventListener(\"load\", function () {\r\n            var result;\r\n            try {\r\n              result = JSON.parse(this.responseText);\r\n              if (!result) {\r\n                throw ('err');\r\n              }\r\n            }\r\n            catch (e) {\r\n              onerror();\r\n              return;\r\n            }\r\n            onload(result);\r\n          });\r\n          if (onerror) oReq.addEventListener(\"error\", onerror);\r\n          oReq.open(\"GET\", url);\r\n          oReq.send();\r\n        },\r\n        /**\r\n         * 初始化角色字体样式和边缘样式\r\n         * @function\r\n         */\r\n        cssstyles: function () {\r\n          if (ui.css.styles) {\r\n            ui.css.styles.remove();\r\n          }\r\n          ui.css.styles = lib.init.sheet();\r\n          ui.css.styles.sheet.insertRule('#arena .player>.name,#arena .button.character>.name {font-family: ' + (lib.config.name_font || 'xinwei') + ',xinwei}', 0);\r\n          ui.css.styles.sheet.insertRule('#arena .player .identity>div {font-family: ' + (lib.config.identity_font || 'huangcao') + ',xinwei}', 0);\r\n          ui.css.styles.sheet.insertRule('.button.character.newstyle>.identity {font-family: ' + (lib.config.identity_font || 'huangcao') + ',xinwei}', 0);\r\n          if (lib.config.cardtext_font && lib.config.cardtext_font != 'default') {\r\n            ui.css.styles.sheet.insertRule('.card div:not(.info):not(.background) {font-family: ' + lib.config.cardtext_font + ';}', 0);\r\n          }\r\n          if (lib.config.global_font && lib.config.global_font != 'default') {\r\n            ui.css.styles.sheet.insertRule('#window {font-family: ' + lib.config.global_font + ',xinwei}', 0);\r\n            ui.css.styles.sheet.insertRule('#window #control{font-family: STHeiti,SimHei,Microsoft JhengHei,Microsoft YaHei,WenQuanYi Micro Hei,Helvetica,Arial,sans-serif}', 0);\r\n          }\r\n          switch (lib.config.glow_phase) {\r\n            case 'yellow': ui.css.styles.sheet.insertRule('#arena .player:not(.selectable):not(.selected).glow_phase {box-shadow: rgba(0, 0, 0, 0.3) 0 0 0 1px, rgb(217, 152, 62) 0 0 15px, rgb(217, 152, 62) 0 0 15px !important;}', 0); break;\r\n            case 'green': ui.css.styles.sheet.insertRule('#arena .player:not(.selectable):not(.selected).glow_phase {box-shadow: rgba(0, 0, 0, 0.3) 0 0 0 1px, rgba(10, 155, 67, 1) 0 0 15px, rgba(10, 155, 67, 1) 0 0 15px !important;}', 0); break;\r\n            case 'purple': ui.css.styles.sheet.insertRule('#arena .player:not(.selectable):not(.selected).glow_phase {box-shadow: rgba(0, 0, 0, 0.3) 0 0 0 1px, rgb(189, 62, 170) 0 0 15px, rgb(189, 62, 170) 0 0 15px !important;}', 0); break;\r\n          }\r\n        },\r\n        /**\r\n         * 初始化布局\r\n         * @function\r\n         * @param {string} layout 布局类型\r\n         * @param {boolean} nosave 是否保存\r\n         */\r\n        layout: function (layout, nosave) {\r\n          if (!nosave) game.saveConfig('layout', layout);\r\n          game.layout = layout;\r\n          ui.arena.hide();\r\n          setTimeout(function () {\r\n            if (game.layout == 'default') {\r\n              ui.css.layout.href = '';\r\n            }\r\n            else {\r\n              ui.css.layout.href = lib.assetURL + 'layout/' + game.layout + '/layout.css';\r\n            }\r\n            if (game.layout == 'mobile' || game.layout == 'long') {\r\n              ui.arena.classList.add('mobile');\r\n            }\r\n            else {\r\n              ui.arena.classList.remove('mobile');\r\n            }\r\n            if (game.layout == 'mobile' || game.layout == 'long' || game.layout == 'long2' || game.layout == 'nova') {\r\n              if (game.me && game.me.node.handcards2.childNodes.length) {\r\n                while (game.me.node.handcards2.childNodes.length) {\r\n                  game.me.node.handcards1.appendChild(game.me.node.handcards2.firstChild);\r\n                }\r\n              }\r\n            }\r\n            if (game.layout == 'default') {\r\n              ui.arena.classList.add('oldlayout');\r\n            }\r\n            else {\r\n              ui.arena.classList.remove('oldlayout');\r\n            }\r\n            if (lib.config.cardshape == 'oblong' && (game.layout == 'long' || game.layout == 'mobile' || game.layout == 'long2' || game.layout == 'nova')) {\r\n              ui.arena.classList.add('oblongcard');\r\n              ui.window.classList.add('oblongcard');\r\n            }\r\n            else {\r\n              ui.arena.classList.remove('oblongcard');\r\n              ui.window.classList.remove('oblongcard');\r\n            }\r\n            if (lib.config.textequip == 'text' && (game.layout == 'long' || game.layout == 'mobile')) {\r\n              ui.arena.classList.add('textequip');\r\n            }\r\n            else {\r\n              ui.arena.classList.remove('textequip');\r\n            }\r\n            if (get.is.phoneLayout()) {\r\n              ui.css.phone.href = lib.assetURL + 'layout/default/phone.css';\r\n              ui.arena.classList.add('phone');\r\n            }\r\n            else {\r\n              ui.css.phone.href = '';\r\n              ui.arena.classList.remove('phone');\r\n            }\r\n            for (var i = 0; i < game.players.length; i++) {\r\n              if (get.is.linked2(game.players[i])) {\r\n                if (game.players[i].classList.contains('linked')) {\r\n                  game.players[i].classList.remove('linked');\r\n                  game.players[i].classList.add('linked2');\r\n                }\r\n              }\r\n              else {\r\n                if (game.players[i].classList.contains('linked2')) {\r\n                  game.players[i].classList.remove('linked2');\r\n                  game.players[i].classList.add('linked');\r\n                }\r\n              }\r\n            }\r\n            if (game.layout == 'long' || game.layout == 'long2') {\r\n              ui.arena.classList.add('long');\r\n            }\r\n            else {\r\n              ui.arena.classList.remove('long');\r\n            }\r\n            if (lib.config.player_border != 'wide' || game.layout == 'long' || game.layout == 'long2') {\r\n              ui.arena.classList.add('slim_player');\r\n            }\r\n            else {\r\n              ui.arena.classList.remove('slim_player');\r\n            }\r\n            if (lib.config.player_border == 'normal' && lib.config.mode != 'brawl' && (game.layout == 'long' || game.layout == 'long2')) {\r\n              ui.arena.classList.add('lslim_player');\r\n            }\r\n            else {\r\n              ui.arena.classList.remove('lslim_player');\r\n            }\r\n            if (lib.config.player_border == 'slim') {\r\n              ui.arena.classList.add('uslim_player');\r\n            }\r\n            else {\r\n              ui.arena.classList.remove('uslim_player');\r\n            }\r\n            if (lib.config.player_border == 'narrow') {\r\n              ui.arena.classList.add('mslim_player');\r\n            }\r\n            else {\r\n              ui.arena.classList.remove('mslim_player');\r\n            }\r\n            ui.updatej();\r\n            ui.updatem();\r\n            setTimeout(function () {\r\n              ui.arena.show();\r\n              if (game.me) game.me.update();\r\n              setTimeout(function () {\r\n                ui.updatex();\r\n              }, 500);\r\n              setTimeout(function () {\r\n                ui.updatec();\r\n              }, 1000);\r\n            }, 100);\r\n          }, 500);\r\n        },\r\n        /**\r\n         * 保存当前的背景图片\r\n         * @function\r\n         */\r\n        background: function () {\r\n          if (lib.config.image_background_random) {\r\n            var list = [];\r\n            for (var i in lib.configMenu.appearence.config.image_background.item) {\r\n              if (i == 'default') continue;\r\n              list.push(i);\r\n            }\r\n            list.remove(lib.config.image_background);\r\n            localStorage.setItem(lib.configprefix + 'background', JSON.stringify(list));\r\n          }\r\n          else if (lib.config.image_background && lib.config.image_background != 'default' && lib.config.image_background.indexOf('custom_') != 0) {\r\n            localStorage.setItem(lib.configprefix + 'background', lib.config.image_background);\r\n          }\r\n          else if (lib.config.image_background == 'default' && lib.config.theme == 'simple') {\r\n            localStorage.setItem(lib.configprefix + 'background', 'ol_bg');\r\n          }\r\n          else {\r\n            localStorage.removeItem(lib.configprefix + 'background');\r\n          }\r\n        },\r\n        parsex: function (func) {\r\n          var k;\r\n          var str = '(';\r\n          str += func.toString();\r\n          if (str.indexOf('step 0') == -1) {\r\n            str = str.replace(/\\{/, '{{if(Evt.step==1) {Evt.finish();return;}');\r\n          }\r\n          else {\r\n            for (k = 1; k < 99; k++) {\r\n              if (str.indexOf('step ' + k) == -1) break;\r\n              str = str.replace(new RegExp(\"'step \" + k + \"'\", 'g'), \"break;case \" + k + \":\");\r\n              str = str.replace(new RegExp('\"step ' + k + '\"', 'g'), \"break;case \" + k + \":\");\r\n            }\r\n            str = str.replace(/'step 0'|\"step 0\"/, 'if(Evt.step==' + k + ') {Evt.finish();return;}switch(step){case 0:');\r\n          }\r\n          str += '})';\r\n          return str;\r\n        },\r\n        parse: function (func) {\r\n          let str = ''\r\n          if (Array.isArray(func)) {\r\n            str += `if(Evt.step==${func.length}) {Evt.finish();return;}switch(step){`\r\n            for (let i = 0; i < func.length; i++) {\r\n              let f = func[i].toString().replace(/galgame\\./g, 'game.galgame.').replace(/event/g, 'Evt').replace(/([\\.\\w])Evt/g, '$1event')\r\n              str += `case ${i}:${f.slice(f.indexOf('{'))}break;`\r\n            }\r\n            str += `}`\r\n          }\r\n          else {\r\n            str += func.toString();\r\n            //galgame调整\r\n            // str = str.replace(/(?<!\\.)galgame(?=\\.)/g, 'game.galgame').replace(/(?<![\\.'])event(?!:)/g, 'Evt');\r\n            str = str.replace(/galgame\\./g, 'game.galgame.').replace(/event/g, 'Evt').replace(/event/g, 'Evt').replace(/([\\.\\w])Evt/g, '$1event');\r\n            str = str.slice(str.indexOf('{') + 1);\r\n            if (str.indexOf('step 0') == -1) {\r\n              str = `{if(Evt.step==1) {Evt.finish();return;}${str}`;\r\n            }\r\n            else {\r\n              // str = str.replace(/['\"]step ([1-9]\\d*)['\"]/g, `break;case $1:`);\r\n              for (var k = 1; k < 99; k++) {\r\n                if (str.indexOf('step ' + k) == -1) break;\r\n                str = str.replace(new RegExp(`'step ${k}'`, 'g'), `break;case ${k}:`);\r\n                str = str.replace(new RegExp(`\"step ${k}\"`, 'g'), `break;case ${k}:`);\r\n              }\r\n              str = str.replace(/'step 0'|\"step 0\"/, `if(Evt.step==${k}) {Evt.finish();return;}switch(step){case 0:`);\r\n            }\r\n          }\r\n          return (new Function('Evt', 'step', 'source', 'player', 'target', 'targets',\r\n            'card', 'cards', 'skill', 'forced', 'num', 'trigger', 'result',\r\n            '_status', 'lib', 'game', 'ui', 'get', 'ai', str));\r\n        },\r\n        /**\r\n         * 执行一个，或一组无参函数，并返回结果；如果是`{a:function(){}, b:function(){}}`的形式，返回`{a: any, b: any}`作为结果\r\n         * @function\r\n         * @param {(function():any|Object<string, function():any>)} func 要执行的函数/函数组\r\n         * @returns {(any|Object<string, any>)}\r\n         */\r\n        eval: function (func) {\r\n          if (typeof func == 'function') {\r\n            return eval('(' + func.toString() + ')');\r\n          }\r\n          else if (typeof func == 'object') {\r\n            for (var i in func) {\r\n              if (func.hasOwnProperty(i)) {\r\n                func[i] = lib.init.eval(func[i]);\r\n              }\r\n            }\r\n          }\r\n          return func;\r\n        },\r\n        /**\r\n         * 加密文本\r\n         * @function\r\n         * @param {string} strUni 原文本\r\n         * @returns 加密文本\r\n         */\r\n        encode: function (strUni) {\r\n          var strUtf = strUni.replace(\r\n            /[\\u0080-\\u07ff]/g, function (c) {\r\n              var cc = c.charCodeAt(0);\r\n              return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\r\n            });\r\n          strUtf = strUtf.replace(\r\n            /[\\u0800-\\uffff]/g, function (c) {\r\n              var cc = c.charCodeAt(0);\r\n              return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\r\n            });\r\n          return btoa(strUtf);\r\n        },\r\n        /**\r\n         * 解密\r\n         * @function\r\n         * @param {string} str 加密文本\r\n         * @returns {string} 原文本\r\n         */\r\n        decode: function (str) {\r\n          var strUtf = atob(str);\r\n          var strUni = strUtf.replace(\r\n            /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g, function (c) {\r\n              var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\r\n              return String.fromCharCode(cc);\r\n            });\r\n          strUni = strUni.replace(\r\n            /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g, function (c) {\r\n              var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\r\n              return String.fromCharCode(cc);\r\n            });\r\n          return strUni;\r\n        },\r\n        /**\r\n         * js对象转为json字符串\r\n         * @function\r\n         * @returns {!string} \r\n         */\r\n        stringify: function (obj) {\r\n          var str = '{'\r\n          for (var i in obj) {\r\n            str += '\"' + i + '\":'\r\n            if (Object.prototype.toString.call(obj[i]) == '[object Object]') {\r\n              str += lib.init.stringify(obj[i]);\r\n            }\r\n            else if (typeof obj[i] == 'function') {\r\n              str += obj[i].toString();\r\n            }\r\n            else {\r\n              str += JSON.stringify(obj[i]);\r\n            }\r\n            str += ','\r\n          }\r\n          str += '}';\r\n          return str;\r\n        },\r\n        /**\r\n         * 技能对象转为json字符串\r\n         * @function\r\n         * @returns {!string} \r\n         */\r\n        stringifySkill: function (obj) {\r\n          var str = '';\r\n          for (var i in obj) {\r\n            str += i + ':'\r\n            if (Object.prototype.toString.call(obj[i]) == '[object Object]') {\r\n              str += '{\\n' + lib.init.stringifySkill(obj[i]) + '}';\r\n            }\r\n            else if (typeof obj[i] == 'function') {\r\n              str += obj[i].toString().replace(/\\t/g, '');\r\n            }\r\n            else {\r\n              str += JSON.stringify(obj[i]);\r\n            }\r\n            str += ',\\n'\r\n          }\r\n          return str;\r\n        }\r\n      },\r\n      /**\r\n       * 测试用作弊方法\r\n       * @name cheat\r\n       */\r\n      cheat: {\r\n        i: function () {\r\n          window.cheat = lib.cheat;\r\n          window.game = game;\r\n          window.ui = ui;\r\n          window.get = get;\r\n          window.ai = ai;\r\n          window.lib = lib;\r\n          window._status = _status;\r\n        },\r\n        dy: function () {\r\n          var next = game.me.next;\r\n          for (var i = 0; i < 10; i++) {\r\n            if (next.identity != 'zhu') {\r\n              break;\r\n            }\r\n            next = next.next;\r\n          }\r\n          next.die();\r\n        },\r\n        x: function () {\r\n          var gl = function (dir, callback) {\r\n            var files = [], folders = [];\r\n            dir = '/Users/widget/Documents/extension/' + dir;\r\n            lib.node.fs.readdir(dir, function (err, filelist) {\r\n              for (var i = 0; i < filelist.length; i++) {\r\n                if (filelist[i][0] != '.' && filelist[i][0] != '_') {\r\n                  if (lib.node.fs.statSync(dir + '/' + filelist[i]).isDirectory()) {\r\n                    folders.push(filelist[i]);\r\n                  }\r\n                  else {\r\n                    files.push(filelist[i]);\r\n                  }\r\n                }\r\n              }\r\n              callback(folders, files);\r\n            });\r\n          }\r\n          var args = Array.from(arguments);\r\n          for (var i = 0; i < args.length; i++) {\r\n            args[i] = args[i][0];\r\n          }\r\n          gl('', function (list) {\r\n            if (args.length) {\r\n              for (var i = 0; i < list.length; i++) {\r\n                if (!args.contains(list[i][0])) {\r\n                  list.splice(i--, 1);\r\n                }\r\n              }\r\n            }\r\n            if (list.length) {\r\n              for (var i = 0; i < list.length; i++) {\r\n                (function (str) {\r\n                  gl(str, function (folders, files) {\r\n                    if (files.length > 1) {\r\n                      for (var i = 0; i < files.length; i++) {\r\n                        if (files[i].indexOf('extension.js') != -1) {\r\n                          files.splice(i--, 1);\r\n                        }\r\n                        else {\r\n                          if (i % 5 == 0) {\r\n                            str += '\\n\\t\\t\\t';\r\n                          }\r\n                          str += '\"' + files[i] + '\",';\r\n                        }\r\n                      }\r\n                      console.log(str.slice(0, str.length - 1));\r\n                    }\r\n                  });\r\n                }(list[i]));\r\n              }\r\n            }\r\n          });\r\n        },\r\n        cfg: function () {\r\n          var mode = lib.config.all.mode.slice(0);\r\n          mode.remove('connect');\r\n          mode.remove('brawl');\r\n          var banned = ['shen_guanyu', 'shen_caocao', 'caopi', 're_daqiao', 'caorui',\r\n            'daqiao', 'lingcao', 'liuzan', 'lusu', 'luxun', 'yanwen', 'zhouyu', 'ns_wangyue', 'gw_yenaifa',\r\n            'old_caozhen', 'swd_jiangziya', 'xuhuang', 'maliang', 'guojia', 'simayi', 'swd_kangnalishi', 'hs_siwangzhiyi', 'hs_nozdormu', 'old_zhuzhi'];\r\n          var bannedcards = ['zengbin'];\r\n          var favs = [\"hs_tuoqi\", \"hs_siwangxianzhi\", \"hs_xukongzhiying\", \"hs_hsjiasha\", \"gjqt_xieyi\", \"gjqt_yunwuyue\", \"gjqt_beiluo\",\r\n            \"gjqt_cenying\", \"shen_lvmeng\", \"shen_zhaoyun\", \"shen_zhugeliang\", \"ow_ana\", \"chenlin\", \"ns_guanlu\", \"hs_guldan\", \"swd_guyue\",\r\n            \"pal_jiangyunfan\", \"mtg_jiesi\", \"swd_lanyin\", \"pal_liumengli\", \"swd_muyun\", \"pal_nangonghuang\", \"swd_muyue\", \"pal_murongziying\",\r\n            \"swd_qiner\", \"pal_shenqishuang\", \"hs_taisi\", \"wangji\", \"pal_xingxuan\", \"xunyou\", \"hs_yelise\", \"pal_yuejinzhao\", \"pal_yueqi\",\r\n            \"gjqt_yuewuyi\", \"swd_yuxiaoxue\", \"ow_zhaliya\", \"zhangchunhua\", \"hs_zhihuanhua\", \"swd_zhiyin\", \"old_zhonghui\", \"gjqt_bailitusu\",\r\n            \"hs_barnes\", \"ow_dva\", \"swd_hengai\", \"pal_jushifang\", \"hs_kazhakusi\", \"hs_lafamu\", \"ow_liekong\", \"hs_lreno\", \"pal_mingxiu\",\r\n            \"swd_murongshi\", \"gw_oudimu\", \"gjqt_ouyangshaogong\", \"hs_pyros\", \"qinmi\", \"gw_sanhanya\", \"hs_selajin\", \"swd_shuwaner\",\r\n            \"swd_situqiang\", \"hs_xialikeer\", \"pal_xuejian\", \"swd_yuchiyanhong\", \"swd_yuwentuo\", \"swd_zhaoyun\", \"zhugeliang\", \"gw_aigeleisi\",\r\n            \"gw_aimin\", \"gjqt_aruan\", \"hs_aya\", \"swd_cheyun\", \"swd_chenjingchou\", \"gw_diandian\", \"swd_huzhongxian\", \"hs_jinglinglong\",\r\n            \"hs_kaituozhe\", \"hs_kalimosi\", \"gw_linjing\", \"ow_luxiao\", \"re_luxun\", \"hs_morgl\", \"swd_sikongyu\", \"hs_sthrall\", \"sunquan\",\r\n            \"sunshangxiang\", \"gw_yioufeisisp\", \"gw_yisilinni\", \"hs_yogg\", \"hs_ysera\", \"pal_yuntianhe\", \"zhugejin\", \"zhugeke\", \"gw_zhuoertan\",\r\n            \"hs_anduin\", \"swd_anka\", \"ow_banzang\", \"ow_chanyata\", \"diaochan\", \"swd_duguningke\", \"sp_diaochan\", \"hetaihou\", \"ns_huamulan\",\r\n            \"swd_huanglei\", \"swd_huanyuanzhi\", \"re_huatuo\", \"gw_huoge\", \"pal_jiangcheng\", \"yj_jushou\", \"swd_kendi\", \"yxs_libai\",\r\n            \"mtg_lilianna\", \"xin_liru\", \"liuxie\", \"pal_lixiaoyao\", \"pal_longkui\", \"ns_nanhua\", \"swd_qi\", \"swd_septem\", \"gw_shasixiwusi\",\r\n            \"ow_tianshi\", \"swd_weida\", \"gjqt_xiayize\", \"swd_xiyan\", \"hs_xsylvanas\", \"hs_yelinlonghou\", \"ow_yuanshi\", \"zuoci\"];\r\n          var vintage = ['tianjian', 'shuiyun', 'zhuyue', 'zhimeng', 'poyun', 'qianfang', 'xfenxin', 'danqing', 'ywuhun', 'tianwu', 'xuelu',\r\n            'shahun', 'yuling', 'duhun', 'liaoyuan', 'touxi', 'wangchen', 'poyue', 'kunlunjing', 'huanhun', 'yunchou', 'tuzhen', 'cyqiaoxie',\r\n            'mufeng', 'duanyi', 'guozao', 'yaotong', 'pozhen', 'tanlin', 'susheng', 'jikong', 'shouyin', 'jilve', 'hxunzhi', 'huodan', 'shanxian',\r\n            'ziyu', 'kuoyin', 'feiren', 'zihui', 'jidong', 'baoxue', 'aqianghua', 'maoding', 'bfengshi', 'zhongdun', 'pingzhang', 'maichong',\r\n            'guozai', 'jingxiang', 'yuelu', 'liechao', 'fengnu', 'hanshuang', 'enze', 'malymowang', 'xshixin', 'qingzun'];\r\n          var favmodes = [\"versus|three\", \"versus|four\", \"versus|two\", \"chess|combat\"];\r\n          for (var i = 0; i < mode.length; i++) {\r\n            game.saveConfig(mode[i] + '_banned', banned);\r\n            game.saveConfig(mode[i] + '_bannedcards', bannedcards);\r\n          }\r\n          var characters = lib.config.all.characters.slice(0);\r\n          characters.remove('standard');\r\n          characters.remove('old');\r\n          game.saveConfig('vintageSkills', vintage);\r\n          game.saveConfig('favouriteCharacter', favs);\r\n          game.saveConfig('favouriteMode', favmodes);\r\n          game.saveConfig('theme', 'simple');\r\n          game.saveConfig('player_border', 'slim');\r\n          game.saveConfig('cards', lib.config.all.cards);\r\n          game.saveConfig('characters', characters);\r\n          game.saveConfig('change_skin', false);\r\n          game.saveConfig('show_splash', 'off');\r\n          game.saveConfig('show_favourite', false);\r\n          game.saveConfig('animation', false);\r\n          game.saveConfig('hover_all', false);\r\n          game.saveConfig('asset_version', 'v1.9');\r\n          // game.saveConfig('characters',lib.config.all.characters);\r\n          // game.saveConfig('cards',lib.config.all.cards);\r\n          game.saveConfig('plays', ['cardpile']);\r\n          game.saveConfig('skip_shan', false);\r\n          game.saveConfig('tao_enemy', true);\r\n          game.saveConfig('layout', 'long2');\r\n          game.saveConfig('hp_style', 'ol');\r\n          game.saveConfig('background_music', 'music_off');\r\n          game.saveConfig('background_audio', false);\r\n          game.saveConfig('background_speak', false);\r\n          game.saveConfig('show_volumn', false);\r\n          game.saveConfig('show_replay', true);\r\n          game.saveConfig('autostyle', true);\r\n          game.saveConfig('debug', true);\r\n          game.saveConfig('dev', true);\r\n          if (!lib.device) {\r\n            game.saveConfig('sync_speed', false);\r\n          }\r\n          game.reload();\r\n        },\r\n        o: function () {\r\n          ui.arena.classList.remove('observe');\r\n        },\r\n        pt: function () {\r\n          var list = Array.from(arguments);\r\n          while (list.length) {\r\n            var card = cheat.gn(list.pop());\r\n            if (card) ui.cardPile.insertBefore(card, ui.cardPile.firstChild);\r\n          }\r\n        },\r\n        q: function () {\r\n          // if(lib.config.layout!='mobile') lib.init.layout('mobile');\r\n          if (arguments.length == 0) {\r\n            var style = ui.css.card_style;\r\n            if (lib.config.card_style != 'simple') {\r\n              lib.config.card_style = 'simple';\r\n              ui.css.card_style = lib.init.css(lib.assetURL + 'theme/style/card', 'simple');\r\n            }\r\n            else {\r\n              lib.config.card_style = 'default';\r\n              ui.css.card_style = lib.init.css(lib.assetURL + 'theme/style/card', 'default');\r\n            }\r\n            style.remove();\r\n          }\r\n          else {\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              cheat.g(arguments[i]);\r\n            }\r\n          }\r\n          ui.arena.classList.remove('selecting');\r\n          ui.arena.classList.remove('tempnoe');\r\n        },\r\n        p: function (name, i, skin) {\r\n          var list = ['swd', 'hs', 'pal', 'gjqt', 'ow', 'gw'];\r\n          if (!lib.character[name]) {\r\n            for (var j = 0; j < list.length; j++) {\r\n              if (lib.character[list[j] + '_' + name]) {\r\n                name = list[j] + '_' + name; break;\r\n              }\r\n            }\r\n          }\r\n          if (skin) {\r\n            lib.config.skin[name] = skin\r\n          }\r\n          var target;\r\n          if (typeof i == 'number') {\r\n            target = game.players[i];\r\n          }\r\n          else {\r\n            target = game.me.next;\r\n          }\r\n          if (!lib.character[name]) {\r\n            target.node.avatar.setBackground(name, 'character');\r\n            target.node.avatar.show();\r\n          }\r\n          else {\r\n            target.init(name);\r\n          }\r\n          if (i === true) {\r\n            if (lib.config.layout == 'long2') {\r\n              lib.init.layout('mobile');\r\n            }\r\n            else {\r\n              lib.init.layout('long2');\r\n            }\r\n          }\r\n        },\r\n        e: function () {\r\n          var cards = [], target;\r\n          for (var i = 0; i < arguments.length; i++) {\r\n            if (get.itemtype(arguments[i]) == 'player') {\r\n              target = arguments[i];\r\n            }\r\n            else {\r\n              cards.push(game.createCard(arguments[i]));\r\n            }\r\n          }\r\n          if (!cards.length) {\r\n            cards.push(game.createCard('qilin'));\r\n            cards.push(game.createCard('bagua'));\r\n            cards.push(game.createCard('dilu'));\r\n            cards.push(game.createCard('chitu'));\r\n            cards.push(game.createCard('muniu'));\r\n          }\r\n          target = target || game.me;\r\n          for (var i = 0; i < cards.length; i++) {\r\n            var card = target.getEquip(cards[i]);\r\n            if (card) {\r\n              card.discard();\r\n              target.removeEquipTrigger(card);\r\n            }\r\n            target.$equip(cards[i]);\r\n          }\r\n        },\r\n        c: function () {\r\n          // (function () {\r\n          //     var a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0;\r\n          //     var sa = 0, sb = 0, sc = 0, sd = 0, se = 0, sf = 0, sg = 0, sh = 0, si = 0, sj = 0, sk = 0, sl = 0, sm = 0;\r\n          //     for (var i in lib.character) {\r\n          //         switch (lib.character[i][1]) {\r\n          //             case 'wei': a++; if (lib.config.banned.contains(i)) sa++; break;\r\n          //             case 'shu': b++; if (lib.config.banned.contains(i)) sb++; break;\r\n          //             case 'wu': c++; if (lib.config.banned.contains(i)) sc++; break;\r\n          //             case 'qun': d++; if (lib.config.banned.contains(i)) sd++; break;\r\n          //             case 'western': e++; if (lib.config.banned.contains(i)) se++; break;\r\n          //             case 'key': f++; if (lib.config.banned.contains(i)) sf++; break;\r\n          //             case 'holo': g++; if (lib.config.banned.contains(i)) sg++; break;\r\n          //             case 'nijisanji': h++; if (lib.config.banned.contains(i)) sh++; break;\r\n          //             case 'VirtuaReal': i++; if (lib.config.banned.contains(i)) si++; break;\r\n          //             case 'HappyElements': i++; if (lib.config.banned.contains(i)) si++; break;\r\n          //             case 'upd8': j++; if (lib.config.banned.contains(i)) sj++; break;\r\n          //             case 'dotlive': k++; if (lib.config.banned.contains(i)) sk++; break;\r\n          //             case 'eilene': l++; if (lib.config.banned.contains(i)) sl++; break;\r\n          //             case 'paryi': m++; if (lib.config.banned.contains(i)) sm++; break;\r\n          //             case 'kagura': n++; if (lib.config.banned.contains(i)) sn++; break;\r\n          //             case 'nanashi': o++; if (lib.config.banned.contains(i)) so++; break;\r\n          //             case 'psp': p++; if (lib.config.banned.contains(i)) sp++; break;\r\n          //             case 'asoul': q++; if (lib.config.banned.contains(i)) sq++; break;\r\n          //             case 'nori': r++; if (lib.config.banned.contains(i)) sr++; break;\r\n          //             case 'vwp': s++; if (lib.config.banned.contains(i)) ss++; break;\r\n          //             case 'vshojo': t++; if (lib.config.banned.contains(i)) st++; break;\r\n          //             case 'xuyan': u++; if (lib.config.banned.contains(i)) su++; break;\r\n          //             case 'chaos': v++; if (lib.config.banned.contains(i)) sv++; break;\r\n          //             case 'xuefeng': w++; if (lib.config.banned.contains(i)) sw++; break;\r\n          //             case 'ego': w++; if (lib.config.banned.contains(i)) sw++; break;\r\n          //             case 'Tencent': w++; if (lib.config.banned.contains(i)) sw++; break;\r\n          //         }\r\n          //     }\r\n          //     console.log('魏：' + (a - sa) + '/' + a);\r\n          //     console.log('蜀：' + (b - sb) + '/' + b);\r\n          //     console.log('吴：' + (c - sc) + '/' + c);\r\n          //     console.log('群：' + (d - sd) + '/' + d);\r\n          //     console.log('西：' + (e - se) + '/' + e);\r\n          //     console.log('键：' + (f - sf) + '/' + f);\r\n          //     console.log('杏：' + (g - sg) + '/' + g);\r\n          //     console.log('虹：' + (h - sh) + '/' + h);\r\n          //     console.log('U：' + (j - sj) + '/' + j);\r\n          //     console.log('点：' + (k - sk) + '/' + k);\r\n          //     console.log('已启用：' + ((a + b + c + d + e + f + g + h + i + j + k + l + m) - (sa + sb + sc + sd + se + sf + sg + sh + hi + sj + sk + sl + sm)) + '/' + (a + b + c + d + e + f + g + h + i + j + k + l + m));\r\n          // }());\r\n          (function () {\r\n            var a = 0, b = 0, c = 0, d = 0;\r\n            var aa = 0, bb = 0, cc = 0, dd = 0;\r\n            var sa = 0, sb = 0, sc = 0, sd = 0;\r\n            var sha = 0, shan = 0, tao = 0, jiu = 0, wuxie = 0, heisha = 0, hongsha = 0;\r\n            var num = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };\r\n            for (var i in lib.card) {\r\n              if (get.objtype(lib.card[i]) == 'object' && lib.translate[i + '_info']) {\r\n                switch (lib.card[i].type) {\r\n                  case 'basic': a++; break;\r\n                  case 'trick': b++; break;\r\n                  case 'equip': c++; break;\r\n                  default: d++; break;\r\n                }\r\n              }\r\n            }\r\n            for (var i = 0; i < lib.card.list.length; i++) {\r\n              if (typeof lib.card[lib.card.list[i][2]] == 'object') {\r\n                switch (lib.card[lib.card.list[i][2]].type) {\r\n                  case 'basic': aa++; break;\r\n                  case 'trick': case 'delay': bb++; break;\r\n                  case 'equip': cc++; break;\r\n                  default: dd++; break;\r\n                }\r\n                switch (lib.card.list[i][0]) {\r\n                  case 'heart': sa++; break;\r\n                  case 'diamond': sb++; break;\r\n                  case 'club': sc++; break;\r\n                  case 'spade': sd++; break;\r\n                }\r\n                if (lib.card.list[i][2] == 'sha') {\r\n                  sha++;\r\n                  if (lib.card.list[i][0] == 'club' || lib.card.list[i][0] == 'spade') {\r\n                    heisha++;\r\n                  }\r\n                  else {\r\n                    hongsha++;\r\n                  }\r\n                }\r\n                if (lib.card.list[i][2] == 'shan') {\r\n                  shan++;\r\n                }\r\n                if (lib.card.list[i][2] == 'tao') {\r\n                  tao++;\r\n                }\r\n                if (lib.card.list[i][2] == 'jiu') {\r\n                  jiu++;\r\n                }\r\n                if (lib.card.list[i][2] == 'wuxie') {\r\n                  wuxie++;\r\n                }\r\n                num[lib.card.list[i][1]]++;\r\n              }\r\n            }\r\n            var str = '基本牌' + aa + '； ' + '锦囊牌' + bb + '； ' + '装备牌' + cc + '； ' + '其它牌' + dd\r\n            console.log(str);\r\n            str = '红桃牌' + sa + '； ' + '方片牌' + sb + '； ' + '梅花牌' + sc + '； ' + '黑桃牌' + sd\r\n            console.log(str);\r\n            str = '杀' + sha + '； ' + '黑杀' + heisha + '； ' + '红杀' + hongsha + '； ' + '闪' + shan + '； ' + '桃' + tao + '； ' + '酒' + jiu + '； ' + '无懈' + wuxie\r\n            console.log(str);\r\n            if (arguments[1]) {\r\n              for (var i = 1; i <= 13; i++) {\r\n                if (i < 10) {\r\n                  console.log(i + ' ', num[i]);\r\n                }\r\n                else {\r\n                  console.log(i, num[i]);\r\n                }\r\n              }\r\n            }\r\n            var arr = [];\r\n            for (var i = 1; i <= 13; i++) {\r\n              arr.push(num[i]);\r\n            }\r\n            console.log((a + b + c + d) + '/' + (aa + bb + cc + dd), ...arr)\r\n          }());\r\n        },\r\n        id: function () {\r\n          game.showIdentity();\r\n        },\r\n        b: function () {\r\n          if (!ui.dialog || !ui.dialog.buttons) return;\r\n          for (var i = 0; i < Math.min(arguments.length, ui.dialog.buttons.length); i++) {\r\n            ui.dialog.buttons[i].link = arguments[i];\r\n          }\r\n        },\r\n        uy: function (me) {\r\n          if (me) {\r\n            game.me.useCard({ name: 'spell_yexinglanghun' }, game.me);\r\n          }\r\n          else {\r\n            var enemy = game.me.getEnemy();\r\n            enemy.useCard({ name: 'spell_yexinglanghun' }, enemy);\r\n          }\r\n        },\r\n        gs: function (name, act) {\r\n          var card = game.createCard('spell_' + (name || 'yexinglanghun'));\r\n          game.me.node.handcards1.appendChild(card);\r\n          if (!act) {\r\n            game.me.actused = -99;\r\n          }\r\n          ui.updatehl();\r\n          delete _status.event._cardChoice;\r\n          delete _status.event._targetChoice;\r\n          delete _status.event._skillChoice;\r\n          setTimeout(game.check, 300);\r\n        },\r\n        gc: function (name, act) {\r\n          var card = game.createCard('stone_' + (name || 'falifulong') + '_stonecharacter');\r\n          game.me.node.handcards1.appendChild(card);\r\n          if (!act) {\r\n            game.me.actused = -99;\r\n          }\r\n          ui.updatehl();\r\n          delete _status.event._cardChoice;\r\n          delete _status.event._targetChoice;\r\n          delete _status.event._skillChoice;\r\n          setTimeout(game.check, 300);\r\n        },\r\n        a: function (bool) {\r\n          if (lib.config.test_game) {\r\n            game.saveConfig('test_game');\r\n          }\r\n          else {\r\n            if (bool) {\r\n              if (typeof bool === 'string') {\r\n                game.saveConfig('test_game', bool);\r\n              }\r\n              else {\r\n                game.saveConfig('test_game', '_');\r\n              }\r\n            }\r\n            else {\r\n              game.saveConfig('test_game', true);\r\n            }\r\n          }\r\n          game.reload();\r\n        },\r\n        as: function () {\r\n          ui.window.classList.remove('testing');\r\n          var bg = ui.window.querySelector('.pausedbg');\r\n          if (bg) {\r\n            bg.remove();\r\n          }\r\n        },\r\n        uj: function () {\r\n          cheat.e('qilin');\r\n          game.me.next.useCard({ name: 'jiedao' }, [game.me, game.me.previous]);\r\n        },\r\n        u: function () {\r\n          var card = { name: 'sha' }, source = game.me.next, targets = [];\r\n          for (var i = 0; i < arguments.length; i++) {\r\n            if (get.itemtype(arguments[i]) == 'player') {\r\n              source = arguments[i];\r\n            }\r\n            else if (Array.isArray(arguments[i])) {\r\n              targets = arguments[i];\r\n            }\r\n            else if (typeof arguments[i] == 'object' && arguments[i]) {\r\n              card = arguments[i];\r\n            }\r\n            else if (typeof arguments[i] == 'string') {\r\n              card = { name: arguments[i] }\r\n            }\r\n          }\r\n          if (!targets.length) targets.push(game.me);\r\n          source.useCard(game.createCard(card.name, card.suit, card.number, card.nature), targets);\r\n        },\r\n        r: function (bool) {\r\n          var list = ['s', 'ap', 'a', 'am', 'bp', 'b', 'bm', 'c', 'd'];\r\n          var str = '';\r\n          for (var i = 0; i < list.length; i++) {\r\n            if (str) str += ' 、 ';\r\n            str += list[i] + '-' + lib.rank[list[i]].length;\r\n          }\r\n          console.log(str);\r\n          for (var i in lib.characterPack) {\r\n            if (!bool && lib.config.all.sgscharacters.contains(i)) continue;\r\n            var map = {};\r\n            var str = '';\r\n            for (var j in lib.characterPack[i]) {\r\n              var rank = get.rank(j);\r\n              if (!map[rank]) {\r\n                map[rank] = 1;\r\n              }\r\n              else {\r\n                map[rank]++;\r\n              }\r\n            }\r\n            for (var j = 0; j < list.length; j++) {\r\n              if (map[list[j]]) {\r\n                if (str) str += ' 、 ';\r\n                str += list[j] + '-' + map[list[j]];\r\n              }\r\n            }\r\n            if (str) {\r\n              console.log(lib.translate[i + '_character_config'] + '：' + str);\r\n            }\r\n          }\r\n\r\n          var list = lib.rank.s.concat(lib.rank.ap).concat(lib.rank.a).concat(lib.rank.am).\r\n            concat(lib.rank.bp).concat(lib.rank.b).concat(lib.rank.bm).concat(lib.rank.c).concat(lib.rank.d);\r\n          for (var i in lib.character) {\r\n            if (lib.config.forbidai.contains(i)) continue;\r\n            if (i.indexOf('boss_') != 0 && i.indexOf('tafang_') != 0 && !list.contains(i)) console.log(get.translation(i), i);\r\n          }\r\n        },\r\n        h: function (player) {\r\n          console.log(get.translation(player.getCards('h')));\r\n        },\r\n        g: function () {\r\n          for (var i = 0; i < arguments.length; i++) {\r\n            if (i > 0 && typeof arguments[i] == 'number') {\r\n              for (var j = 0; j < arguments[i] - 1; j++) {\r\n                cheat.gx(arguments[i - 1]);\r\n              }\r\n            }\r\n            else {\r\n              cheat.gx(arguments[i]);\r\n            }\r\n          }\r\n        },\r\n        ga: function (type) {\r\n          for (var i in lib.card) {\r\n            if (lib.card[i].type == type || lib.card[i].subtype == type) {\r\n              cheat.g(i);\r\n            }\r\n          }\r\n        },\r\n        gg: function () {\r\n          for (var i = 0; i < game.players.length; i++) {\r\n            for (var j = 0; j < arguments.length; j++) {\r\n              cheat.gx(arguments[j], game.players[i]);\r\n            }\r\n          }\r\n        },\r\n        gx: function (name, target) {\r\n          target = target || game.me;\r\n          var card = cheat.gn(name);\r\n          if (!card) return;\r\n          target.node.handcards1.appendChild(card);\r\n          delete _status.event._cardChoice;\r\n          delete _status.event._targetChoice;\r\n          delete _status.event._skillChoice;\r\n          game.check();\r\n          target.update();\r\n          ui.updatehl();\r\n        },\r\n        gn: function (name) {\r\n          var nature = null;\r\n          var suit = null;\r\n          var suits = ['club', 'spade', 'diamond', 'heart'];\r\n          for (var i = 0; i < suits.length; i++) {\r\n            if (name.indexOf(suits[i]) == 0) {\r\n              suit = suits[i];\r\n              name = name.slice(suits[i].length);\r\n              break;\r\n            }\r\n          }\r\n          if (name.indexOf('red') == 0) {\r\n            name = name.slice(3);\r\n            suit = ['diamond', 'heart'].randomGet();\r\n          }\r\n          if (name.indexOf('black') == 0) {\r\n            name = name.slice(5);\r\n            suit = ['spade', 'club'].randomGet();\r\n          }\r\n\r\n          if (name == 'huosha') {\r\n            name = 'sha';\r\n            nature = 'fire';\r\n          }\r\n          else if (name == 'leisha') {\r\n            name = 'sha';\r\n            nature = 'thunder';\r\n          }\r\n          else if (name == 'haisha') {\r\n            name = 'sha';\r\n            nature = 'ocean';\r\n          }\r\n          else if (name == 'yamisha') {\r\n            name = 'sha';\r\n            nature = 'yami';\r\n          }\r\n          else if (name == 'haitao') {\r\n            name = 'tao';\r\n            nature = 'ocean';\r\n          }\r\n          if (!lib.card[name]) {\r\n            return null;\r\n          }\r\n          return game.createCard(name, suit, null, nature);\r\n        },\r\n        ge: function (target) {\r\n          if (target) {\r\n            cheat.gx('zhuge', target);\r\n            cheat.gx('qinglong', target);\r\n            cheat.gx('bagua', target);\r\n            cheat.gx('dilu', target);\r\n            cheat.gx('chitu', target);\r\n            cheat.gx('muniu', target);\r\n          }\r\n          else {\r\n            cheat.g('zhuge');\r\n            cheat.g('qinglong');\r\n            cheat.g('bagua');\r\n            cheat.g('dilu');\r\n            cheat.g('chitu');\r\n            cheat.g('muniu');\r\n          }\r\n        },\r\n        gj: function () {\r\n          cheat.g('shandian');\r\n          cheat.g('huoshan');\r\n          cheat.g('hongshui');\r\n          cheat.g('lebu');\r\n          cheat.g('bingliang');\r\n          cheat.g('guiyoujie');\r\n        },\r\n        gf: function () {\r\n          for (var i in lib.card) {\r\n            if (lib.card[i].type == 'food') {\r\n              cheat.g(i);\r\n            }\r\n          }\r\n        },\r\n        d: function (num, target) {\r\n          if (num == undefined) num = 1;\r\n          var cards = get.cards(num);\r\n          for (var i = 0; i < num; i++) {\r\n            var card = cards[i];\r\n            game.me.node.handcards1.appendChild(card);\r\n            delete _status.event._cardChoice;\r\n            delete _status.event._targetChoice;\r\n            delete _status.event._skillChoice;\r\n            game.check();\r\n            game.me.update();\r\n            ui.updatehl();\r\n          }\r\n        },\r\n        s: function () {\r\n          for (var i = 0; i < arguments.length; i++) {\r\n            game.me.addSkill(arguments[i], true);\r\n          }\r\n          delete _status.event._cardChoice;\r\n          delete _status.event._targetChoice;\r\n          delete _status.event._skillChoice;\r\n          game.check();\r\n        },\r\n        t: function (num) {\r\n          if (game.players.contains(num)) {\r\n            num = game.players.indexOf(num);\r\n          }\r\n          if (num == undefined) {\r\n            for (var i = 0; i < game.players.length; i++) cheat.t(i);\r\n            return;\r\n          }\r\n          var player = game.players[num];\r\n          var cards = player.getCards('hej');\r\n          for (var i = 0; i < cards.length; i++) {\r\n            cards[i].discard();\r\n          }\r\n          player.removeEquipTrigger();\r\n          player.update();\r\n        },\r\n        to: function () {\r\n          for (var i = 0; i < game.players.length; i++) {\r\n            if (game.players[i] != game.me) {\r\n              cheat.t(i);\r\n            }\r\n          }\r\n        },\r\n        tm: function () {\r\n          for (var i = 0; i < game.players.length; i++) {\r\n            if (game.players[i] == game.me) {\r\n              cheat.t(i);\r\n            }\r\n          }\r\n        },\r\n        k: function (i) {\r\n          if (i == undefined) i = 1;\r\n          game.players[i].hp = 1;\r\n          cheat.t(i);\r\n          cheat.g('juedou');\r\n        },\r\n        z: function (name) {\r\n          switch (name) {\r\n            case 'cc': name = 're_caocao'; break;\r\n            case 'lb': name = 're_liubei'; break;\r\n            case 'sq': name = 'sunquan'; break;\r\n            case 'dz': name = 'dongzhuo'; break;\r\n            case 'ys': name = 're_yuanshao'; break;\r\n            case 'zj': name = 'sp_zhangjiao'; break;\r\n            case 'ls': name = 'liushan'; break;\r\n            case 'sc': name = 'sunce'; break;\r\n            case 'cp': name = 'caopi'; break;\r\n            case 'cr': name = 'caorui'; break;\r\n            case 'sx': name = 'sunxiu'; break;\r\n            case 'lc': name = 'liuchen'; break;\r\n            case 'sh': name = 'sunhao'; break;\r\n          }\r\n          game.zhu.init(name);\r\n          game.zhu.maxHp++;\r\n          game.zhu.hp++;\r\n          game.zhu.update();\r\n        },\r\n      },\r\n      /**\r\n       * 游戏基础对象和状态机\r\n       * @name element\r\n       * @namespace\r\n       * @see {@link content}\r\n       * @see {@link lib.element.player}\r\n       * @see {@link lib.element.card}\r\n       */\r\n      element: {\r\n        /**\r\n         * 内容方法，setContent所调用的方法，即事件的具体内容\r\n         * 状态机\r\n         * @name content\r\n         * @namespace\r\n         * @global\r\n         */\r\n        content: {\r\n          resetRound: function () {\r\n            var skill = Evt.resetSkill || Evt.name.slice(0, Evt.name.indexOf('_roundcount'));\r\n            if (!player || !lib.skill[skill]) return;\r\n            var roundname = skill + '_roundcount';\r\n            if (player.storage[roundname] > 0) {\r\n              player.storage[roundname]--\r\n            }\r\n            if (player.storage[roundname] > 0) {\r\n              player.updateMarks();\r\n            }\r\n            else {\r\n              player.unmarkSkill(roundname);\r\n            }\r\n          },\r\n          //崭新出炉\r\n          chooseShengjie: [function () {\r\n            var list = [];\r\n            if (!lib.cardPack.mode_derivation || !lib.cardPack.mode_derivation.length) Evt.finish();\r\n            for (var i = 0; i < lib.cardPack.mode_derivation.length; i++) {\r\n              var info = lib.card[lib.cardPack.mode_derivation[i]];\r\n              if (info && info.materials && (typeof info.materials == 'function' || Array.isArray(info.materials))) list.push(lib.cardPack.mode_derivation[i]);\r\n            }\r\n            if (Evt.filterProduct) list = list.filter(Evt.filterProduct);\r\n            Evt.list = list;\r\n          }, function () {\r\n            var next = player.chooseButton([Evt.prompt, [Evt.list, 'vcard'], '素材区', [Evt.materials, 'card'], 'hidden'], Evt.forced);\r\n            next.set('filterButton', function (button) {\r\n              var ub = ui.selected.buttons;\r\n              if (get.itemtype(button.link) == 'card') {\r\n                if (!ub.length) return false;\r\n                var card = button.link;\r\n                var scards = ub.slice(1).map(function (scard) {\r\n                  return scard.link;\r\n                });\r\n                var product = ub[0].link[2];\r\n                scards = scards.filter(function (scard) {\r\n                  return get.itemtype(scard) == 'card';\r\n                });\r\n                if (_status.event.filterMaterial && !_status.event.filterMaterial(button.link, scards)) return false;\r\n                var filter = get.info({ name: product }).materials;\r\n                if (Array.isArray(filter)) {\r\n                  if (filter.length > scards.length) {\r\n                    var mate = filter.slice(0);\r\n                    var smate = [];\r\n                    for (var j = 0; j < mate.length; j++) {\r\n                      for (var k of scards) {\r\n                        if (!smate.contains(k)) {\r\n                          if (get.is.filterCardBy(k, mate[j])) {\r\n                            smate.push(k)\r\n                            mate.splice(j--, 1);\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                    for (var j = 0; j < mate.length; j++) {\r\n                      if (get.is.filterCardBy(card, mate[j])) {\r\n                        return true\r\n                      }\r\n                    }\r\n\r\n                  }\r\n                  return false;\r\n                }\r\n                return true;\r\n              }\r\n              if (ub.length) return false;\r\n              return true;\r\n            });\r\n            next.set('selectButton', function () {\r\n              var ub = ui.selected.buttons;\r\n              if (ub.length) {\r\n                var scards = ub.slice(1).map(function (scard) {\r\n                  return scard.link;\r\n                });\r\n                var product = ub[0].link[2];\r\n                var filter = get.info({ name: product }).materials;\r\n                if (Array.isArray(filter)) {\r\n                  if (filter.length == scards.length) {\r\n                    var mate = filter.slice(0);\r\n                    for (var j = 0; j < mate.length; j++) {\r\n                      for (var k of scards) {\r\n                        if (get.is.filterCardBy(k, mate[j])) {\r\n                          mate.splice(j--, 1);\r\n                        }\r\n                      }\r\n                    }\r\n                    if (mate.length == 0) return ub.length;\r\n                  }\r\n                }\r\n              }\r\n              return [ub.length + 1, ub.length + 2];\r\n            });\r\n            next.set('filterMaterial', Evt.filterMaterial);\r\n          }, function () {\r\n            if (result.bool) {\r\n              var cards = result.links.slice(1);\r\n              var star = game.createCard2(result.links[0][2], get.suit3(cards).randomGet(), 14);\r\n              Evt.result = {\r\n                bool: true,\r\n                cards: cards,\r\n                materials: cards,\r\n                star: star,\r\n              };\r\n            }\r\n            else Evt.result = { bool: false };\r\n          }],\r\n          emptyEvent: function () {\r\n            Evt.trigger(Evt.name);\r\n          },\r\n          showCharacter: [function () {\r\n            Evt.trigger('showCharacterEnd');\r\n          }, function () {\r\n            Evt.trigger('showCharacterAfter');\r\n            if (get.mode() == 'identity' && player.isZhu) Evt.trigger('zhuUpdate');\r\n          }],\r\n          removeCharacter: function () {\r\n            player.$removeCharacter(Evt.num);\r\n          },\r\n          chooseUseTarget: [function () {\r\n            if (get.is.object(card) && !Evt.viewAs) card.isCard = true;\r\n            if (cards && get.itemtype(card) != 'card') {\r\n              card = get.copy(card);\r\n              card.cards = cards.slice(0);\r\n              Evt.card = card;\r\n            }\r\n            if (!lib.filter.cardEnabled(card, player) || (Evt.addCount !== false && !lib.filter.cardUsable(card, player))) {\r\n              Evt.result = { bool: false };\r\n              Evt.finish();\r\n              return;\r\n            }\r\n            var info = get.info(card);\r\n            var range;\r\n            if (!info.notarget) {\r\n              var select = get.copy(info.selectTarget);\r\n              if (select == undefined) {\r\n                range = [1, 1];\r\n              }\r\n              else if (typeof select == 'number') range = [select, select];\r\n              else if (get.itemtype(select) == 'select') range = select;\r\n              else if (typeof select == 'function') range = select(card, player);\r\n              game.checkMod(card, player, range, 'selectTarget', player);\r\n            }\r\n            if (info.notarget || range[1] == -1) {\r\n              if (!info.notarget && range[1] == -1) {\r\n                for (var i = 0; i < targets.length; i++) {\r\n                  if (!player.canUse(card, targets[i], Evt.nodistance ? false : null, Evt.addCount === false ? null : true)) {\r\n                    targets.splice(i--, 1);\r\n                  }\r\n                }\r\n                if (targets.length) {\r\n                  Evt.targets2 = targets;\r\n                }\r\n                else {\r\n                  Evt.finish();\r\n                  return;\r\n                }\r\n              }\r\n              else Evt.targets2 = [];\r\n              if (Evt.forced) {\r\n                Evt._result = { bool: true };\r\n              }\r\n              else {\r\n                var next = player.chooseBool();\r\n                next.set('prompt', Evt.prompt || ('是否' + (Evt.targets2.length ? '对' : '') + get.translation(Evt.targets2) + '使用' + get.translation(card) + '?'));\r\n                if (Evt.hsskill) next.setHiddenSkill(Evt.hsskill);\r\n                if (Evt.prompt2) next.set('prompt2', Evt.prompt2);\r\n                next.ai = function () {\r\n                  var eff = 0;\r\n                  for (var i = 0; i < Evt.targets2.length; i++) {\r\n                    eff += get.effect(Evt.targets2[i], card, player, player);\r\n                  }\r\n                  return eff > 0;\r\n                };\r\n              }\r\n            }\r\n            else {\r\n              var next = player.chooseTarget();\r\n              next.set('_get_card', card);\r\n              next.set('filterTarget', function (card, player, target) {\r\n                if (!_status.event.targets.contains(target)) return false;\r\n                if (!_status.event.nodistance && !lib.filter.targetInRange(card, player, target)) return false;\r\n                return lib.filter.targetEnabledx(card, player, target);\r\n              });\r\n              next.set('ai', Evt.ai || get.effect_use);\r\n              next.set('selectTarget', Evt.selectTarget || lib.filter.selectTarget);\r\n              if (Evt.nodistance) next.set('nodistance', true);\r\n              if (Evt.forced) next.set('forced', true);\r\n              if (Evt.addCount !== false) next.set('addCount_extra', true);\r\n              next.set('targets', targets);\r\n              next.set('prompt', Evt.prompt || ('选择' + get.translation(card) + '的目标'));\r\n              if (Evt.prompt2) next.set('prompt2', Evt.prompt2);\r\n              if (Evt.hsskill) next.setHiddenSkill(Evt.hsskill);\r\n            }\r\n          }, function () {\r\n            if (result.bool) {\r\n              Evt.result = {\r\n                bool: true,\r\n                targets: Evt.targets2 || result.targets,\r\n              };\r\n              var next = player.useCard(card, Evt.targets2 || result.targets);\r\n              next.oncard = Evt.oncard;\r\n              if (cards) next.cards = cards.slice(0);\r\n              if (Evt.nopopup) next.nopopup = true;\r\n              if (Evt.animate === false) next.animate = false;\r\n              if (Evt.throw === false) next.throw = false;\r\n              if (Evt.addCount === false) next.addCount = false;\r\n              if (Evt.noTargetDelay) next.targetDelay = false;\r\n              if (Evt.nodelayx) next.delayx = false;\r\n              if (Evt.logSkill) {\r\n                if (typeof Evt.logSkill == 'string') {\r\n                  next.skill = Evt.logSkill;\r\n                }\r\n                else if (Array.isArray(Evt.logSkill)) {\r\n                  player.logSkill.apply(player, Evt.logSkill);\r\n                }\r\n              }\r\n            }\r\n            else Evt.result = { bool: false };\r\n          }],\r\n          chooseToDuiben: [function () {\r\n            game.log(player, '对', target, '发起了', '#y对策');\r\n            if (_status.connectMode) {\r\n              player.chooseButtonOL([\r\n                [player, ['对策：请选择一种防御对策', [[['', '', 'db_def2'], ['', '', 'db_def1']], 'vcard']], true],\r\n                [target, ['对策：请选择一种进攻之策', [[['', '', 'db_atk1'], ['', '', 'db_atk2']], 'vcard']], true]\r\n              ], function () { }, function () { return 1 + Math.random() }).set('switchToAuto', function () {\r\n                _status.event.result = 'ai';\r\n              }).set('processAI', function () {\r\n                var buttons = _status.event.dialog.buttons;\r\n                return {\r\n                  bool: true,\r\n                  links: [buttons.randomGet().link],\r\n                }\r\n              });\r\n            }\r\n          }, function () {\r\n            if (_status.connectMode) {\r\n              Evt.mes = result[player.playerid].links[0][2];\r\n              Evt.tes = result[target.playerid].links[0][2];\r\n              Evt.goto(4);\r\n            }\r\n            else {\r\n              player.chooseButton(['对策：请选择一种防御对策', [[['', '', 'db_def2'], ['', '', 'db_def1']], 'vcard']], true).ai = function () { return 1 + Math.random() };\r\n            }\r\n          }, function () {\r\n            Evt.mes = result.links[0][2];\r\n            target.chooseButton(['对策：请选择一种进攻之策', [[['', '', 'db_atk1'], ['', '', 'db_atk2']], 'vcard']], true).ai = function () { return 1 + Math.random() };\r\n          }, function () {\r\n            Evt.tes = result.links[0][2];\r\n          }, function () {\r\n            game.broadcast(function () {\r\n              ui.arena.classList.add('thrownhighlight');\r\n            });\r\n            ui.arena.classList.add('thrownhighlight');\r\n            game.addVideo('thrownhighlight1');\r\n            target.$compare(game.createCard(Evt.tes, '', ''), player, game.createCard(Evt.mes, '', ''));\r\n            game.log(target, '选择的进攻之策为', '#g' + get.translation(Evt.tes));\r\n            game.log(player, '选择的防御对策为', '#g' + get.translation(Evt.mes));\r\n            game.delay(0, 1500);\r\n          }, function () {\r\n            var mes = Evt.mes.slice(6);\r\n            var tes = Evt.tes.slice(6);\r\n            var str;\r\n            if (mes == tes) {\r\n              str = get.translation(player) + '对策成功';\r\n              player.popup('胜', 'wood');\r\n              target.popup('负', 'fire');\r\n              game.log(player, '#g胜');\r\n              Evt.result = { bool: true };\r\n            }\r\n            else {\r\n              str = get.translation(player) + '对策失败';\r\n              target.popup('胜', 'wood');\r\n              player.popup('负', 'fire');\r\n              game.log(target, '#g胜');\r\n              Evt.result = { bool: false };\r\n            }\r\n            game.broadcastAll(function (str) {\r\n              var dialog = ui.create.dialog(str);\r\n              dialog.classList.add('center');\r\n              setTimeout(function () {\r\n                dialog.close();\r\n              }, 1000);\r\n            }, str);\r\n            game.delay(2);\r\n          }, function () {\r\n            game.broadcastAll(function () {\r\n              ui.arena.classList.remove('thrownhighlight');\r\n            });\r\n            game.addVideo('thrownhighlight2');\r\n            if (Evt.clear !== false) {\r\n              game.broadcastAll(ui.clear);\r\n            }\r\n          }],\r\n          chooseToPSS: [function () {\r\n            game.log(player, '对', target, '发起了猜拳');\r\n            if (_status.connectMode) {\r\n              player.chooseButtonOL([\r\n                [player, ['猜拳：请选择一种手势', [[['', '', 'pss_stone'], ['', '', 'pss_scissor'], ['', '', 'pss_paper']], 'vcard']], true],\r\n                [target, ['猜拳：请选择一种手势', [[['', '', 'pss_stone'], ['', '', 'pss_scissor'], ['', '', 'pss_paper']], 'vcard']], true]\r\n              ], function () { }, function () { return 1 + Math.random() }).set('switchToAuto', function () {\r\n                _status.event.result = 'ai';\r\n              }).set('processAI', function () {\r\n                var buttons = _status.event.dialog.buttons;\r\n                return {\r\n                  bool: true,\r\n                  links: [buttons.randomGet().link],\r\n                }\r\n              });\r\n            }\r\n          }, function () {\r\n            if (_status.connectMode) {\r\n              Evt.mes = result[player.playerid].links[0][2];\r\n              Evt.tes = result[target.playerid].links[0][2];\r\n              Evt.goto(4);\r\n            }\r\n            else {\r\n              player.chooseButton(['猜拳：请选择一种手势', [[['', '', 'pss_stone'], ['', '', 'pss_scissor'], ['', '', 'pss_paper']], 'vcard']], true).ai = function () { return 1 + Math.random() };\r\n            }\r\n          }, function () {\r\n            Evt.mes = result.links[0][2];\r\n            target.chooseButton(['猜拳：请选择一种手势', [[['', '', 'pss_stone'], ['', '', 'pss_scissor'], ['', '', 'pss_paper']], 'vcard']], true).ai = function () { return 1 + Math.random() };\r\n          }, function () {\r\n            Evt.tes = result.links[0][2];\r\n          }, function () {\r\n            game.broadcast(function () {\r\n              ui.arena.classList.add('thrownhighlight');\r\n            });\r\n            ui.arena.classList.add('thrownhighlight');\r\n            game.addVideo('thrownhighlight1');\r\n            player.$compare(game.createCard(Evt.mes, '', ''), target, game.createCard(Evt.tes, '', ''));\r\n            game.log(player, '选择的手势为', '#g' + get.translation(Evt.mes));\r\n            game.log(target, '选择的手势为', '#g' + get.translation(Evt.tes));\r\n            game.delay(0, 1500);\r\n          }, function () {\r\n            var mes = Evt.mes.slice(4);\r\n            var tes = Evt.tes.slice(4);\r\n            var str;\r\n            if (mes == tes) {\r\n              str = '二人平局';\r\n              player.popup('平', 'metal');\r\n              target.popup('平', 'metal');\r\n              game.log('猜拳的结果为', '#g平局');\r\n              Evt.result = { tie: true };\r\n            }\r\n            else {\r\n              if ({ paper: 'stone', scissor: 'paper', stone: 'scissor' }[mes] == tes) {\r\n                str = get.translation(player) + '胜利';\r\n                player.popup('胜', 'wood');\r\n                target.popup('负', 'fire');\r\n                game.log(player, '#g胜');\r\n                Evt.result = { bool: true, winner: mes };\r\n              }\r\n              else {\r\n                str = get.translation(target) + '胜利';\r\n                target.popup('胜', 'wood');\r\n                player.popup('负', 'fire');\r\n                game.log(target, '#g胜');\r\n                Evt.result = { bool: false, winner: tes };\r\n              }\r\n            }\r\n            game.broadcastAll(function (str) {\r\n              var dialog = ui.create.dialog(str);\r\n              dialog.classList.add('center');\r\n              setTimeout(function () {\r\n                dialog.close();\r\n              }, 1000);\r\n            }, str);\r\n            game.delay(2);\r\n          }, function () {\r\n            game.broadcastAll(function () {\r\n              ui.arena.classList.remove('thrownhighlight');\r\n            });\r\n            game.addVideo('thrownhighlight2');\r\n            if (Evt.clear !== false) {\r\n              game.broadcastAll(ui.clear);\r\n            }\r\n          }],\r\n          cardsDiscard: function () {\r\n            game.getGlobalHistory().cardMove.push(Evt);\r\n            for (var i = 0; i < cards.length; i++) {\r\n              cards[i].discard();\r\n            }\r\n          },\r\n          orderingDiscard: function () {\r\n            var cards = Evt.relatedEvent.orderingCards;\r\n            for (var i = 0; i < cards.length; i++) {\r\n              if (get.position(cards[i], true) != 'o') cards.splice(i--, 1);\r\n            }\r\n            if (cards.length) game.cardsDiscard(cards);\r\n          },\r\n          cardsGotoOrdering: function () {\r\n            game.getGlobalHistory().cardMove.push(Evt);\r\n            for (var i = 0; i < cards.length; i++) {\r\n              cards[i].fix();\r\n              ui.ordering.appendChild(cards[i]);\r\n            }\r\n            var evt = Evt.relatedEvent || Evt.getParent();\r\n            if (!evt.orderingCards) evt.orderingCards = [];\r\n            if (!Evt.noOrdering && !Evt.cardsOrdered) {\r\n              Evt.cardsOrdered = true;\r\n              var next = game.createEvent('orderingDiscard', false, evt.getParent());\r\n              next.relatedEvent = evt;\r\n              next.setContent('orderingDiscard');\r\n            }\r\n            if (!Evt.noOrdering) evt.orderingCards.addArray(cards);\r\n          },\r\n          cardsGotoSpecial: function () {\r\n            game.getGlobalHistory().cardMove.push(Evt);\r\n            for (var i = 0; i < cards.length; i++) {\r\n              cards[i].fix();\r\n              ui.special.appendChild(cards[i]);\r\n            }\r\n            if (Evt.notrigger !== true) Evt.trigger('addCardToStorage');\r\n          },\r\n          chooseToEnable: [function () {\r\n            var list = [];\r\n            for (var i = 1; i < 6; i++) {\r\n              if (!player.isDisabled(i)) continue;\r\n              list.push('equip' + i);\r\n            }\r\n            if (!list.length) Evt.finish();\r\n            else {\r\n              Evt.list = list;\r\n              var next = player.chooseControl(list);\r\n              next.set('prompt', '请选择恢复一个装备栏');\r\n              if (!Evt.ai) Evt.ai = function (Evt, player, list) {\r\n                return list.randomGet();\r\n              }\r\n              Evt.ai = Evt.ai(Evt.getParent(), player, list);\r\n              next.ai = function () {\r\n                return Evt.ai;\r\n              };\r\n            }\r\n          }, function () {\r\n            Evt.result = { control: result.control };\r\n            player.enableEquip(result.control);\r\n          }],\r\n          chooseToDisable: [function () {\r\n            var list = [];\r\n            for (var i = 1; i < 7; i++) {\r\n              if ((i == 3 || i == 4) && Evt.horse) continue;\r\n              if (i == 6 && !Evt.horse) continue;\r\n              if (player.isDisabled(i)) continue;\r\n              list.push('equip' + i);\r\n            }\r\n            if (!list.length) Evt.finish();\r\n            else {\r\n              Evt.list = list;\r\n              var next = player.chooseControl(list);\r\n              next.set('prompt', '请选择废除一个装备栏');\r\n              if (!Evt.ai) Evt.ai = function (Evt, player, list) {\r\n                return list.randomGet();\r\n              }\r\n              Evt.ai = Evt.ai(Evt.getParent(), player, list);\r\n              next.ai = function () {\r\n                return Evt.ai;\r\n              };\r\n            }\r\n          }, function () {\r\n            Evt.result = { control: result.control };\r\n            if (result.control == 'equip6') {\r\n              player.disableEquip(3);\r\n              player.disableEquip(4);\r\n            }\r\n            else player.disableEquip(result.control);\r\n          }],\r\n          swapEquip: [() => {\r\n            game.log(player, '和', target, '交换了装备区中的牌')\r\n            var e1 = player.getCards('e');\r\n            var todis1 = [];\r\n            for (var i = 0; i < e1.length; i++) {\r\n              if (target.isDisabled(get.subtype(e1[i]))) todis1.push(e1[i]);\r\n            }\r\n            player.discard(todis1);\r\n            var e2 = target.getCards('e');\r\n            var todis2 = [];\r\n            for (var i = 0; i < e2.length; i++) {\r\n              if (player.isDisabled(get.subtype(e2[i]))) todis2.push(e2[i]);\r\n            }\r\n            target.discard(todis2);\r\n          }, () => {\r\n            Evt.cards = [player.getCards('e'), target.getCards('e')];\r\n            player.lose(Evt.cards[0], ui.ordering, 'visible');\r\n            target.lose(Evt.cards[1], ui.ordering, 'visible');\r\n            if (Evt.cards[0].length) player.$give(Evt.cards[0], target, false);\r\n            if (Evt.cards[1].length) target.$give(Evt.cards[1], player, false);\r\n          }, () => {\r\n            for (var i = 0; i < Evt.cards[1].length; i++) {\r\n              player.equip(Evt.cards[1][i]);\r\n            }\r\n            for (var i = 0; i < Evt.cards[0].length; i++) {\r\n              target.equip(Evt.cards[0][i]);\r\n            }\r\n          }],\r\n          disableEquip: function () {\r\n            if (!player.isDisabled(Evt.pos)) {\r\n              var cards = player.getCards('e', function (card) {\r\n                var subtype = get.subtype(card);\r\n                if (subtype == Evt.pos) return true;\r\n                if (subtype == 'equip6' && ['equip3', 'equip4'].contains(Evt.pos)) return true;\r\n                return false;\r\n              });\r\n              if (cards.length) player.discard(cards).delay = false;\r\n              game.log(player, '废除了', get.translation(Evt.pos), '栏');\r\n              player.$disableEquip(Evt.pos);\r\n            }\r\n          },\r\n          enableEquip: function () {\r\n            if (player.isDisabled(Evt.pos)) {\r\n              player.syncStorage('_disableEquip');\r\n              game.log(player, '恢复了', get.translation(Evt.pos), '栏');\r\n              player.$enableEquip(Evt.pos);\r\n            };\r\n          },\r\n          disableJudge: [function () {\r\n            game.log(player, '废除了判定区');\r\n            var js = player.getCards('j');\r\n            if (js.length) player.discard(js);\r\n            player.storage._disableJudge = true;\r\n            //player.markSkill('_disableJudge');},function(){\r\n            game.broadcastAll(function (player, card) {\r\n              player.$disableJudge();\r\n            }, player);\r\n          }],\r\n          enableJudge: function () {\r\n            if (!player.storage._disableJudge) return;\r\n            game.log(player, '恢复了判定区');\r\n            game.broadcastAll(function (player) {\r\n              player.$enableJudge();\r\n            }, player);\r\n          },\r\n          /*----分界线----*/\r\n          phasing: [function () {\r\n            while (ui.dialogs.length) {\r\n              ui.dialogs[0].close();\r\n            }\r\n            if (!player.noPhaseDelay && lib.config.show_phase_prompt) {\r\n              player.popup('回合开始');\r\n            }\r\n            if (lib.config.glow_phase) {\r\n              if (_status.currentPhase) {\r\n                _status.currentPhase.classList.remove('glow_phase');\r\n                game.broadcast(function (player) {\r\n                  player.classList.remove('glow_phase');\r\n                }, _status.currentPhase);\r\n              }\r\n              player.classList.add('glow_phase');\r\n              game.broadcast(function (player) {\r\n                player.classList.add('glow_phase');\r\n              }, player);\r\n            }\r\n            _status.currentPhase = player;\r\n            _status.discarded = [];\r\n            game.phaseNumber++;\r\n            player.phaseNumber++;\r\n            game.syncState();\r\n            game.addVideo('phaseChange', player);\r\n            if (game.phaseNumber == 1 && lib.configOL.observe) {\r\n              lib.configOL.observeReady = true;\r\n              game.send('server', 'config', lib.configOL);\r\n            }\r\n            game.log();\r\n            game.log(player, '的回合开始');\r\n            player._noVibrate = true;\r\n            if (get.config('identity_mode') != 'zhong' && get.config('identity_mode') != 'purple' && !_status.connectMode) {\r\n              var num;\r\n              switch (get.config('auto_identity')) {\r\n                case 'one': num = 1; break;\r\n                case 'two': num = 2; break;\r\n                case 'three': num = 3; break;\r\n                case 'always': num = -1; break;\r\n                default: num = 0; break;\r\n              }\r\n              if (num && !_status.identityShown && game.phaseNumber > game.players.length * num && game.showIdentity) {\r\n                if (!_status.video) player.popup('显示身份');\r\n                _status.identityShown = true;\r\n                game.showIdentity(false);\r\n              }\r\n            }\r\n            player.ai.tempIgnore = [];\r\n            _status.globalHistory.push({\r\n              cardMove: [],\r\n              custom: [],\r\n            });\r\n            game.countPlayer2(function (current) {\r\n              current.actionHistory.push(JSON.parse(JSON.stringify({ ...lib.historyRecorder })));\r\n              current.stat.push({ card: {}, skill: {} });\r\n              if (Evt.parent._roundStart) {\r\n                current.getHistory().isRound = true;\r\n                current.getStat().isRound = true;\r\n              }\r\n            });\r\n            player.getHistory().isMe = true;\r\n            player.getStat().isMe = true;\r\n            if (Evt.parent._roundStart) {\r\n              game.getGlobalHistory().isRound = true;\r\n            }\r\n            if (ui.land && ui.land.player == player) {\r\n              game.addVideo('destroyLand');\r\n              ui.land.destroy();\r\n            }\r\n          }, function () {\r\n            Evt.trigger('phaseBeginStart');\r\n          }],\r\n          /**\r\n           * 更换随从\r\n           * @name content.toggleSubPlayer\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          toggleSubPlayer: [function () {\r\n            var list = Evt.list || player.storage.subplayer.skills.slice(0);\r\n            list.remove(player.storage.subplayer.name2);\r\n            Evt.list = list;\r\n            if (!Evt.directresult) {\r\n              if (list.length > 1) {\r\n                var dialog = ui.create.dialog('更换一个随从', 'hidden');\r\n                dialog.add([list, 'character']);\r\n                player.chooseButton(dialog, true);\r\n              }\r\n              else if (list.length == 1) {\r\n                Evt.directresult = list[0];\r\n              }\r\n              else {\r\n                Evt.finish();\r\n              }\r\n            }\r\n            else {\r\n              if (!list.contains(Evt.directresult)) {\r\n                Evt.finish();\r\n              }\r\n            }\r\n          }, function () {\r\n            if (!Evt.directresult) {\r\n              if (result && result.bool && result.links[0]) {\r\n                Evt.directresult = result.links[0];\r\n              }\r\n              else {\r\n                Evt.finish();\r\n                return;\r\n              }\r\n            }\r\n            if (player.storage.subplayer) {\r\n              var current = player.storage.subplayer.name2;\r\n              if (Evt.directresult == current) {\r\n                Evt.finish();\r\n                return;\r\n              }\r\n              player.storage[current].hp = player.hp;\r\n              player.storage[current].maxHp = player.maxHp;\r\n              player.storage[current].hs = player.getCards('h');\r\n              player.storage[current].es = player.getCards('e');\r\n              player.lose(player.getCards('he'), ui.special)._triggered = null;\r\n\r\n              var cfg = player.storage[Evt.directresult];\r\n              player.storage.subplayer.name2 = Evt.directresult;\r\n              player.reinit(current, Evt.directresult, [\r\n                cfg.hp,\r\n                cfg.maxHp\r\n              ]);\r\n              if (cfg.hs.length) player.directgain(cfg.hs);\r\n              if (cfg.es.length) player.directequip(cfg.es);\r\n            }\r\n          }],\r\n          /**\r\n           * 结束调遣随从\r\n           * @name content.callSubPlayer\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          exitSubPlayer: [function () {\r\n            if (player.storage.subplayer) {\r\n              var current = player.storage.subplayer.name2;\r\n              if (Evt.remove) {\r\n                player.lose(player.getCards('he'), ui.discardPile)._triggered = null;\r\n              }\r\n              else {\r\n                player.storage[current].hp = player.hp;\r\n                player.storage[current].maxHp = player.maxHp;\r\n                player.storage[current].hs = player.getCards('h');\r\n                player.storage[current].es = player.getCards('e');\r\n                player.lose(player.getCards('he'), ui.special)._triggered = null;\r\n              }\r\n              player.reinit(current, player.storage.subplayer.name, [\r\n                player.storage.subplayer.hp,\r\n                player.storage.subplayer.maxHp\r\n              ]);\r\n              player.update();\r\n              if (Evt.remove) {\r\n                if (player.storage[current].onremove) {\r\n                  player.storage[current].onremove(player);\r\n                }\r\n                delete player.storage[current];\r\n                player.storage.subplayer.skills.remove(current);\r\n                game.log(player, '牺牲了随从', '#g' + current);\r\n              }\r\n              else {\r\n                game.log(player, '收回了随从', '#g' + current);\r\n              }\r\n              player.addSkill(player.storage.subplayer.skills);\r\n            }\r\n          }, function () {\r\n            if (player.storage.subplayer) {\r\n              player.directgain(player.storage.subplayer.hs);\r\n              player.directequip(player.storage.subplayer.es);\r\n            }\r\n            player.removeSkill('subplayer');\r\n          }, function () {\r\n            if (Evt.remove) {\r\n              Evt.trigger('subPlayerDie');\r\n            }\r\n          }],\r\n          /**\r\n           * 调遣随从\r\n           * @name content.callSubPlayer\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          callSubPlayer: [function () {\r\n            var list = player.getSubPlayers(Evt.tag);\r\n            Evt.list = list;\r\n            if (!Evt.directresult) {\r\n              if (list.length > 1) {\r\n                var dialog = ui.create.dialog('调遣一个随从', 'hidden');\r\n                dialog.add([list, 'character']);\r\n                player.chooseButton(dialog, true);\r\n              }\r\n              else if (list.length == 1) {\r\n                Evt.directresult = list[0];\r\n              }\r\n              else {\r\n                Evt.finish();\r\n              }\r\n            }\r\n            else {\r\n              if (!list.contains(Evt.directresult)) {\r\n                Evt.finish();\r\n              }\r\n            }\r\n          }, function () {\r\n            if (!Evt.directresult) {\r\n              if (result && result.bool && result.links[0]) {\r\n                Evt.directresult = result.links[0];\r\n              }\r\n              else {\r\n                Evt.finish();\r\n                return;\r\n              }\r\n            }\r\n            if (Evt.directresult) {\r\n              var cfg = player.storage[Evt.directresult];\r\n              var source = cfg.source || player.name;\r\n              var name = Evt.directresult;\r\n              game.log(player, '调遣了随从', '#g' + name);\r\n              player.storage.subplayer = {\r\n                name: source,\r\n                name2: Evt.directresult,\r\n                hp: player.hp,\r\n                maxHp: player.maxHp,\r\n                skills: Evt.list.slice(0),\r\n                hs: player.getCards('h'),\r\n                es: player.getCards('e'),\r\n                intro2: cfg.intro2\r\n              }\r\n              player.removeSkill(Evt.list);\r\n              player.reinit(source, name, [cfg.hp, cfg.maxHp]);\r\n              player.addSkill('subplayer');\r\n              player.lose(player.getCards('he'), ui.special)._triggered = null;\r\n              if (cfg.hs.length) player.directgain(cfg.hs);\r\n              if (cfg.es.length) player.directequip(cfg.es);\r\n            }\r\n          }, function () {\r\n            game.delay();\r\n          }],\r\n          /**\r\n           * 反转结算顺序\r\n           * @name content.reverseOrder\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          reverseOrder: [() => {\r\n            game.delay();\r\n          }, () => {\r\n            var choice;\r\n            if (get.tag(card, 'multineg')) {\r\n              choice = (player.previous.side == player.side) ? '逆时针' : '顺时针';\r\n            }\r\n            else {\r\n              choice = (player.next.side == player.side) ? '逆时针' : '顺时针';\r\n            }\r\n            player.chooseControl('顺时针', '逆时针', function (Evt, player) {\r\n              return _status.event.choice || '逆时针';\r\n            }).set('prompt', '选择' + get.translation(card) + '的结算方向').set('choice', choice).set('forceDie', true);\r\n          }, () => {\r\n            if (result && result.control == '顺时针') {\r\n              var evt = Evt.getParent();\r\n              evt.fixedSeat = true;\r\n              evt.targets.sortBySeat();\r\n              evt.targets.reverse();\r\n              if (evt.targets[evt.targets.length - 1] == player) {\r\n                evt.targets.unshift(evt.targets.pop());\r\n              }\r\n            }\r\n          }],\r\n          /**\r\n           * 使用判定牌\r\n           * @name content.addJudgeCard\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          addJudgeCard: function () {\r\n            if (lib.filter.judge(card, player, target) && cards.length && get.position(cards[0], true) == 'o') target.addJudge(card, cards);\r\n          },\r\n          /**\r\n           * 使用装备牌\r\n           * @name content.equipCard\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          equipCard: function () {\r\n            if (cards.length && get.position(cards[0], true) == 'o') target.equip(card, cards[0]);\r\n          },\r\n          /**\r\n           * 游戏开始前分牌\r\n           * @name content.gameDraw\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          gameDraw: [() => {\r\n            if (_status.brawl && _status.brawl.noGameDraw) {\r\n              Evt.finish();\r\n              return;\r\n            }\r\n            var end = player;\r\n            var numx = num;\r\n            do {\r\n              if (typeof num == 'function') {\r\n                numx = num(player);\r\n              }\r\n              if (player.getTopCards) player.directgain(player.getTopCards(numx));\r\n              else player.directgain(get.cards(numx));\r\n              if (player.singleHp === true && get.mode() != 'guozhan' && (lib.config.mode != 'doudizhu' || _status.mode != 'online')) {\r\n                player.doubleDraw();\r\n              }\r\n              player = player.next;\r\n            }\r\n            while (player != end);\r\n            Evt.changeCard = get.config('change_card');\r\n            if (_status.connectMode || (lib.config.mode == 'doudizhu' && _status.mode == 'online') || lib.config.mode != 'identity' && lib.config.mode != 'guozhan' && lib.config.mode != 'doudizhu' && lib.config.mode != 'longlaoguan') {\r\n              Evt.changeCard = 'disabled';\r\n            }\r\n          }, () => {\r\n            if (Evt.changeCard != 'disabled' && !_status.auto) {\r\n              Evt.dialog = ui.create.dialog('是否使用手气卡？');\r\n              ui.create.confirm('oc');\r\n              Evt.custom.replace.confirm = function (bool) {\r\n                _status.event.bool = bool;\r\n                game.resume();\r\n              }\r\n            }\r\n            else {\r\n              Evt.finish();\r\n            }\r\n          }, () => {\r\n            if (Evt.changeCard == 'once') {\r\n              Evt.changeCard = 'disabled';\r\n            }\r\n            else if (Evt.changeCard == 'twice') {\r\n              Evt.changeCard = 'once';\r\n            }\r\n            else if (Evt.changeCard == 'disabled') {\r\n              Evt.bool = false;\r\n              return;\r\n            }\r\n            _status.imchoosing = true;\r\n            Evt.switchToAuto = function () {\r\n              _status.event.bool = false;\r\n              game.resume();\r\n            }\r\n            game.pause();\r\n          }, () => {\r\n            _status.imchoosing = false;\r\n            if (Evt.bool) {\r\n              if (game.changeCoin) {\r\n                game.changeCoin(-3);\r\n              }\r\n              var hs = game.me.getCards('h');\r\n              game.addVideo('lose', game.me, [get.cardsInfo(hs), [], [], []]);\r\n              for (var i = 0; i < hs.length; i++) {\r\n                hs[i].discard(false);\r\n              }\r\n              game.me.directgain(get.cards(hs.length));\r\n              var ss = game.me.getCards('s');\r\n              game.addVideo('lose', game.me, [get.cardsInfo(ss), [], [], []]);\r\n              for (var i = 0; i < ss.length; i++) {\r\n                ss[i].discard(false);\r\n              }\r\n              game.me.directgains(get.cards(ss.length));\r\n              Evt.goto(2);\r\n            }\r\n            else {\r\n              if (Evt.dialog) Evt.dialog.close();\r\n              if (ui.confirm) ui.confirm.close();\r\n              Evt.finish();\r\n            }\r\n          }],\r\n          /**\r\n           * 阶段循环\r\n           * @name content.phaseLoop\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          phaseLoop: [() => {\r\n            for (var i = 0; i < lib.onphase.length; i++) {\r\n              lib.onphase[i]();\r\n            }\r\n            player.phase();\r\n          }, () => {\r\n            if (!game.players.contains(Evt.player.next)) {\r\n              Evt.player = game.findNext(Evt.player.next);\r\n            }\r\n            else {\r\n              Evt.player = Evt.player.next;\r\n            }\r\n            Evt.goto(0);\r\n          }],\r\n          /**\r\n           * 加载包\r\n           * @name content.loadPackage\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Array<Object>} Evt.packages 包名数组，用于加载\r\n           * @property {string} Evt.packages[].0 包目录，相对`lib.assetURL`路径\r\n           * @property {string} Evt.packages[].1 包名\r\n           */\r\n          loadPackage: [function () {\r\n            if (Evt.packages.length) {\r\n              window.game = game;\r\n              var pack = Evt.packages.shift().split('/');\r\n              lib.init.js(lib.assetURL + pack[0], pack[1], game.resume);\r\n              game.pause();\r\n            }\r\n            else {\r\n              Evt.finish();\r\n            }\r\n          }, function () {\r\n            if (!lib.config.dev) delete window.game;\r\n            var character = lib.imported.character;\r\n            var card = lib.imported.card;\r\n            var i, j, k;\r\n            for (i in character) {\r\n              if (character[i].character) {\r\n                lib.characterPack[i] = character[i].character;\r\n              }\r\n              if (character[i].forbid && character[i].forbid.contains(lib.config.mode)) continue;\r\n              if (character[i].mode && character[i].mode.contains(lib.config.mode) == false) continue;\r\n\r\n              if (Array.isArray(lib[j]) && Array.isArray(character[i][j])) {\r\n                lib[j].addArray(character[i][j]);\r\n                continue;\r\n              }\r\n              for (j in character[i]) {\r\n                if (j == 'mode' || j == 'forbid' || j == 'characterSort') continue;\r\n                for (k in character[i][j]) {\r\n                  if (j == 'character') {\r\n                    if (!character[i][j][k][4]) {\r\n                      character[i][j][k][4] = [];\r\n                    }\r\n                    if (character[i][j][k][4].contains('boss') ||\r\n                      character[i][j][k][4].contains('hiddenboss')) {\r\n                      lib.config.forbidai.add(k);\r\n                    }\r\n                    if (lib.config.forbidai_user && lib.config.forbidai_user.contains(k)) {\r\n                      lib.config.forbidai.add(k);\r\n                    }\r\n                    for (var l = 0; l < character[i][j][k][3].length; l++) {\r\n                      lib.skilllist.add(character[i][j][k][3][l]);\r\n                    }\r\n                  }\r\n                  if (j == 'translate' && k == i) {\r\n                    lib[j][k + '_character_config'] = character[i][j][k];\r\n                  }\r\n                  else {\r\n                    if (lib[j][k] == undefined) {\r\n                      lib[j][k] = character[i][j][k];\r\n                    }\r\n                    else if (Array.isArray(lib[j][k]) && Array.isArray(character[i][j][k])) {\r\n                      lib[j][k].addArray(character[i][j][k]);\r\n                    }\r\n                    else {\r\n                      console.log('dublicate ' + j + ' in character ' + i + ':\\n' + k + '\\n' + ': ' + lib[j][k] + '\\n' + character[i][j][k]);\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            for (i in card) {\r\n              lib.cardPack[i] = [];\r\n              if (card[i].card) {\r\n                for (var j in card[i].card) {\r\n                  if (!card[i].card[j].hidden && card[i].translate[j + '_info']) {\r\n                    lib.cardPack[i].push(j);\r\n                  }\r\n                }\r\n              }\r\n              for (j in card[i]) {\r\n                if (j == 'mode' || j == 'forbid') continue;\r\n                if (j == 'list') continue;\r\n                for (k in card[i][j]) {\r\n                  if (j == 'skill' && k[0] == '_' && !lib.config.cards.contains(i)) {\r\n                    continue;\r\n                  }\r\n                  if (j == 'translate' && k == i) {\r\n                    lib[j][k + '_card_config'] = card[i][j][k];\r\n                  }\r\n                  else {\r\n                    if (lib[j][k] == undefined) lib[j][k] = card[i][j][k];\r\n                    else console.log('dublicate ' + j + ' in card ' + i + ':\\n' + k + '\\n' + lib[j][k] + '\\n' + card[i][j][k]);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            Evt.goto(0);\r\n          }],\r\n          /**\r\n           * 加载模组\r\n           * @name content.loadMode\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!string} Evt.mode 要加载的mode名\r\n           * @property {?Object} Evt.result 如果加载成功返回加载的模组，如果失败则返回未指定(undefined)结果\r\n           */\r\n          loadMode: [function () {\r\n            window.game = game;\r\n            lib.init.js(lib.assetURL + 'mode', Evt.mode, game.resume);\r\n            game.pause();\r\n          }, function () {\r\n            if (!lib.config.dev) delete window.game;\r\n            Evt.result = lib.imported.mode[Evt.mode];\r\n            delete lib.imported.mode[Evt.mode];\r\n          }],\r\n          /**\r\n           * 强制结束\r\n           * @name content.forceOver\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {?string} Evt.bool 是否调用{@link game.over}，如果为'noover'，则不调用\r\n           * @property {?function():void} [Evt.callback] 回调函数，在事件结束前调用\r\n           */\r\n          forceOver: [function () {\r\n            while (ui.controls.length) {\r\n              ui.controls[0].close();\r\n            }\r\n            while (ui.dialogs.length) {\r\n              ui.dialogs[0].close();\r\n            }\r\n          }, function () {\r\n            if (Evt.bool != 'noover') {\r\n              game.over(Evt.bool);\r\n            }\r\n            if (Evt.callback) {\r\n              Evt.callback();\r\n            }\r\n          }],\r\n          /**\r\n           * 事件触发调度状态机\r\n           * @name content.arrangeTrigger\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          arrangeTrigger: [function () {\r\n            Evt.filter1 = function (info) {\r\n              if (info[1].isDead() && !lib.skill[info[0]].forceDie) return false;\r\n              return lib.filter.filterTrigger(trigger, info[1], Evt.triggername, info[0]);\r\n            }\r\n            Evt.filter2 = function (info2) {\r\n              var info = lib.skill[info2[0]];\r\n              if (!lib.translate[info2[0]] || info.popup === false || info.silent) return false;\r\n              return true;\r\n            }\r\n            Evt.filter3 = function (info, info2) {\r\n              return Evt.filter2(info2) && Evt.filter1(info2) && info2[1] == info[1] && info[2] == info2[2] && (lib.skill.global.contains(info2[0]) || info[1].hasSkill(info2[0], true));\r\n            }\r\n          }, function () {\r\n            if (trigger.filterStop && trigger.filterStop()) {\r\n              Evt.finish();\r\n            }\r\n            else if (Evt.list.length) {\r\n              var info = Evt.list.shift();\r\n              game.createTrigger(Evt.triggername, info[0], info[1], trigger);\r\n              Evt.redo();\r\n            }\r\n          }, function () {\r\n            if (!Evt.map.length) {\r\n              if (Evt.list2.length) {\r\n                var info = Evt.list2.shift();\r\n                game.createTrigger(Evt.triggername, info[0], info[1], trigger);\r\n                Evt.redo();\r\n              }\r\n              else {\r\n                if (trigger._triggering == this) {\r\n                  delete trigger._triggering;\r\n                }\r\n                Evt.finish();\r\n                return;\r\n              }\r\n            };\r\n            Evt.doing = Evt.map.shift();\r\n          }, function () {\r\n            Evt.num = 0;\r\n            var bool = false;\r\n            var list = Evt.doing.list;\r\n            for (var i = 0; i < list.length; i++) {\r\n              if (Evt.filter1(list[i])) {\r\n                Evt.num = i;\r\n                bool = true;\r\n                break;\r\n              }\r\n            }\r\n            if (!bool) { Evt.goto(2); return; }\r\n            var priority = list[Evt.num][2];\r\n            for (var i = 0; i < Evt.num; i++) {\r\n              if (Evt.doing.list[i][2] > priority) {\r\n                Evt.doing.list.splice(i--, 1);\r\n                Evt.num--;\r\n              }\r\n            }\r\n            Evt.choice = [];\r\n            if (Evt.num < Evt.doing.list.length - 1 && Evt.filter2(Evt.doing.list[Evt.num])) {\r\n              var current = Evt.doing.list[Evt.num];\r\n              Evt.choice.push(current);\r\n              for (var i = Evt.num + 1; i < Evt.doing.list.length; i++) {\r\n                if (Evt.filter3(current, Evt.doing.list[i])) Evt.choice.push(Evt.doing.list[i]);\r\n              }\r\n            }\r\n            if (Evt.choice.length < 2) Evt.goto(6);\r\n          }, function () {\r\n            var controls = [];\r\n            Evt.current = Evt.choice[0][1]\r\n            for (var i = 0; i < Evt.choice.length; i++) {\r\n              controls.push(Evt.choice[i][0]);\r\n            }\r\n            Evt.current.chooseControl(controls).set('prompt', '选择下一个触发的技能').set('forceDie', true).set('arrangeSkill', true);\r\n          }, function () {\r\n            if (result.control) {\r\n              for (var i = 0; i < Evt.doing.list.length; i++) {\r\n                if (Evt.doing.list[i][0] == result.control && Evt.doing.list[i][1] == Evt.current) {\r\n                  Evt.num = i; break;\r\n                }\r\n              }\r\n            }\r\n          }, function () {\r\n            var info = Evt.doing.list[Evt.num];\r\n            if (info) {\r\n              Evt.doing.list2.push(info);\r\n              Evt.doing.list.splice(Evt.num, 1);\r\n              game.createTrigger(Evt.triggername, info[0], info[1], trigger);\r\n            }\r\n          }, function () {\r\n            if (trigger.filterStop && trigger.filterStop()) {\r\n              Evt.finish();\r\n            }\r\n            else Evt.goto(Evt.doing.list.length ? 3 : 2);\r\n          }],\r\n          /**\r\n           * 检测时机并让玩家选择是否发动触发类技能\r\n           * 创建触发器\r\n           * @name content.createTrigger\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          createTrigger: [() => {\r\n            if (lib.filter.filterTrigger(trigger, player, Evt.triggername, Evt.skill)) {\r\n              var fullskills = game.expandSkills(player.getSkills().concat(lib.skill.global));\r\n              if (!fullskills.contains(Evt.skill)) {\r\n                var info = get.info(Evt.skill);\r\n                var hidden = player.hiddenSkills.slice(0);\r\n                game.expandSkills(hidden);\r\n                if (hidden.contains(Evt.skill)) {\r\n                  if (!info.silent && player.hasSkillTag('nomingzhi', false, null, true)) {\r\n                    Evt.finish();\r\n                  }\r\n                  else if (!info.direct) {\r\n                    Evt.trigger('triggerHidden');\r\n                  }\r\n                  else {\r\n                    Evt.skillHidden = true;\r\n                  }\r\n                }\r\n                else {\r\n                  var keep = false;\r\n                  for (var i in player.additionalSkills) {\r\n                    if (i.indexOf('hidden:') == 0 && game.expandSkills(player.additionalSkills[i]).contains(Evt.skill)) {\r\n                      keep = true; break;\r\n                    }\r\n                  }\r\n                  if (!keep) {\r\n                    Evt.finish();\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              Evt.finish();\r\n            }\r\n          }, () => {\r\n            if (Evt.cancelled) {\r\n              Evt.finish();\r\n              return;\r\n            }\r\n            var info = get.info(Evt.skill);\r\n            if (!Evt.revealed && !info.forced) {\r\n              var checkFrequent = function (info) {\r\n                if (player.hasSkillTag('nofrequent', false, Evt.skill)) return false;\r\n                if (typeof info.frequent == 'boolean') return info.frequent;\r\n                if (typeof info.frequent == 'function') return info.frequent(trigger, player);\r\n                if (info.frequent == 'check' && typeof info.check == 'function') return info.check(trigger, player);\r\n                return false;\r\n              }\r\n              if (info.direct && player.isUnderControl()) {\r\n                game.swapPlayerAuto(player);\r\n                Evt._result = { bool: true };\r\n                Evt._direct = true;\r\n              }\r\n              else if (info.direct) {\r\n                Evt._result = { bool: true };\r\n                Evt._direct = true;\r\n              }\r\n              else if (info.direct && player.isOnline()) {\r\n                Evt._result = { bool: true };\r\n                Evt._direct = true;\r\n              }\r\n              else {\r\n                if (checkFrequent(info)) {\r\n                  Evt.frequentSkill = true;\r\n                }\r\n                var str;\r\n                var check = info.check;\r\n                if (info.prompt) str = info.prompt;\r\n                else {\r\n                  if (typeof info.logTarget == 'string') {\r\n                    str = get.prompt(Evt.skill, trigger[info.logTarget], player);\r\n                  }\r\n                  else if (typeof info.logTarget == 'function') {\r\n                    str = get.prompt(Evt.skill, info.logTarget(trigger, player), player);\r\n                  }\r\n                  else {\r\n                    str = get.prompt(Evt.skill, null, player);\r\n                  }\r\n                }\r\n                if (typeof str == 'function') { str = str(trigger, player) }\r\n                var next = player.chooseBool(str);\r\n                if (Evt.frequentSkill) next.set('frequentSkill', Evt.skill);\r\n                next.set('forceDie', true);\r\n                next.ai = function () {\r\n                  return !check || check(trigger, player);\r\n                };\r\n                if (typeof info.prompt2 == 'function') {\r\n                  next.set('prompt2', info.prompt2(trigger, player));\r\n                }\r\n                else if (typeof info.prompt2 == 'string') {\r\n                  next.set('prompt2', info.prompt2);\r\n                }\r\n                else if (info.prompt2 != false) {\r\n                  if (lib.dynamicTranslate[Evt.skill] || lib.translate[Evt.skill + '_info'])\r\n                    next.set('prompt2', get.skillInfoTranslation(Evt.skill, player));\r\n                }\r\n                if (trigger.skillwarn) {\r\n                  if (next.prompt2) {\r\n                    next.set('prompt2', '<span class=\"thundertext\">' + trigger.skillwarn + '。</span>' + next.prompt2);\r\n                  }\r\n                  else {\r\n                    next.set('prompt2', trigger.skillwarn);\r\n                  }\r\n                }\r\n\r\n                if (info.addDialog) {\r\n                  var createDialog = [str, 'small'];\r\n                  if (next.prompt2) createDialog.push(next.prompt2);\r\n                  createDialog.push(info.addDialog(trigger, player));\r\n                  next.set('createDialog', createDialog);\r\n                }\r\n              }\r\n            }\r\n          }, () => {\r\n            var info = get.info(Evt.skill);\r\n            if (result && result.bool != false) {\r\n              var autodelay = info.autodelay;\r\n              if (typeof autodelay == 'function') {\r\n                autodelay = autodelay(trigger, player);\r\n              }\r\n              if (autodelay && (info.forced || !Evt.isMine())) {\r\n                if (typeof autodelay == 'number') {\r\n                  game.delayx(autodelay);\r\n                }\r\n                else {\r\n                  game.delayx();\r\n                }\r\n              }\r\n            }\r\n          }, () => {\r\n            var info = get.info(Evt.skill);\r\n            if (result && result.bool == false) {\r\n              if (info.oncancel) info.oncancel(trigger, player);\r\n              Evt.finish();\r\n              return;\r\n            }\r\n            var next = game.createEvent(Evt.skill);\r\n            if (typeof info.usable == 'number') {\r\n              player.addSkill('counttrigger');\r\n              if (!player.storage.counttrigger) {\r\n                player.storage.counttrigger = {};\r\n              }\r\n              if (!player.storage.counttrigger[Evt.skill]) {\r\n                player.storage.counttrigger[Evt.skill] = 1;\r\n              }\r\n              else {\r\n                player.storage.counttrigger[Evt.skill]++;\r\n              }\r\n            }\r\n            next.player = player;\r\n            next._trigger = trigger;\r\n            next.triggername = Evt.triggername;\r\n            next.setContent(info.content);\r\n            next.skillHidden = Evt.skillHidden;\r\n            if (info.forceDie) next.forceDie = true;\r\n            if (info.popup != false && !info.direct) {\r\n              if (info.popup) {\r\n                player.popup(info.popup);\r\n                game.log(player, '发动了', '#p『' + get.skillTranslation(Evt.skill, player) + '』');\r\n              }\r\n              else {\r\n                if (info.logTarget && info.logLine !== false) {\r\n                  if (typeof info.logTarget == 'string') {\r\n                    player.logSkill(Evt.skill, trigger[info.logTarget], info.line);\r\n                  }\r\n                  else if (typeof info.logTarget == 'function') {\r\n                    player.logSkill(Evt.skill, info.logTarget(trigger, player), info.line);\r\n                  }\r\n                }\r\n                else {\r\n                  player.logSkill(Evt.skill, false, info.line);\r\n                }\r\n              }\r\n            }\r\n          }, () => {\r\n            if (player._hookTrigger) {\r\n              for (var i = 0; i < player._hookTrigger.length; i++) {\r\n                var info = lib.skill[player._hookTrigger[i]].hookTrigger;\r\n                if (info) {\r\n                  if (info.after && info.after(Evt, player, Evt.triggername)) {\r\n                    Evt.trigger('triggerAfter');\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }],\r\n          /**\r\n           * Play video\r\n           * @name content.playVideoContent\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          playVideoContent: [function () {\r\n            game.delay(0, 500);\r\n          }, function () {\r\n            if (!game.chess) {\r\n              ui.control.innerHTML = '';\r\n              var nodes = [];\r\n              for (var i = 0; i < ui.arena.childNodes.length; i++) {\r\n                nodes.push(ui.arena.childNodes[i]);\r\n              }\r\n              for (var i = 0; i < nodes.length; i++) {\r\n                if (nodes[i] == ui.canvas) continue;\r\n                if (nodes[i] == ui.control) continue;\r\n                if (nodes[i] == ui.mebg) continue;\r\n                if (nodes[i] == ui.me) continue;\r\n                if (nodes[i] == ui.roundmenu) continue;\r\n                nodes[i].remove();\r\n              }\r\n              ui.sidebar.innerHTML = '';\r\n              ui.cardPile.innerHTML = '';\r\n              ui.discardPile.innerHTML = '';\r\n              ui.special.innerHTML = '';\r\n              ui.ordering.innerHTML = '';\r\n            }\r\n            ui.system.firstChild.innerHTML = '';\r\n            ui.system.lastChild.innerHTML = '';\r\n            ui.system.firstChild.appendChild(ui.config2);\r\n            if (ui.updateVideoMenu) {\r\n              ui.updateVideoMenu();\r\n            }\r\n            _status.videoDuration = 1;\r\n            ui.create.system('返回', function () {\r\n              var mode = localStorage.getItem(lib.configprefix + 'playbackmode');\r\n              if (mode) {\r\n                game.saveConfig('mode', mode);\r\n              }\r\n              game.reload();\r\n            });\r\n            ui.create.system('重播', function () {\r\n              _status.replayvideo = true;\r\n              game.playVideo(_status.playback, lib.config.mode);\r\n            });\r\n            ui.create.system('暂停', ui.click.pause, true).id = 'pausebutton';\r\n            var slow = ui.create.system('减速', function () {\r\n              _status.videoDuration *= 1.5;\r\n              updateDuration();\r\n            }, true);\r\n            var fast = ui.create.system('加速', function () {\r\n              _status.videoDuration /= 1.5;\r\n              updateDuration();\r\n            }, true);\r\n            var updateDuration = function () {\r\n              if (_status.videoDuration > 1) {\r\n                slow.classList.add('glow');\r\n              }\r\n              else {\r\n                slow.classList.remove('glow');\r\n              }\r\n              if (_status.videoDuration < 1) {\r\n                fast.classList.add('glow');\r\n              }\r\n              else {\r\n                fast.classList.remove('glow');\r\n              }\r\n            }\r\n            ui.system.style.display = '';\r\n            ui.refresh(ui.system);\r\n            ui.system.show();\r\n            ui.window.show();\r\n            if (lib.config.mode != 'versus' && lib.config.mode != 'boss') {\r\n              ui.arena.style.display = '';\r\n              ui.refresh(ui.arena);\r\n              ui.arena.show();\r\n            }\r\n            if (!game.chess) {\r\n              game.playerMap = {};\r\n            }\r\n            game.finishCards();\r\n          }, function () {\r\n            if (Evt.video.length) {\r\n              var content = Evt.video.shift();\r\n              // console.log(content);\r\n              if (content.type == 'delay') {\r\n                game.delay(content.content);\r\n              }\r\n              else if (content.type == 'play') {\r\n                window.play = {};\r\n                if (!Evt.playtoload) {\r\n                  Evt.playtoload = 1;\r\n                }\r\n                else {\r\n                  Evt.playtoload++;\r\n                }\r\n                var script = lib.init.js(lib.assetURL + 'play', content.name);\r\n                script.addEventListener('load', function () {\r\n                  var play = window.play[content.name]\r\n                  if (play && play.video) {\r\n                    play.video(content.init);\r\n                  }\r\n                  Evt.playtoload--;\r\n                  if (Evt.playtoload == 0) {\r\n                    delete window.play;\r\n                  }\r\n                });\r\n              }\r\n              else if (typeof content.player == 'string' && game.playerMap[content.player] &&\r\n                game.playerMap[content.player].classList &&\r\n                !game.playerMap[content.player].classList.contains('obstacle')) {\r\n                game.videoContent[content.type](game.playerMap[content.player], content.content);\r\n              }\r\n              else {\r\n                game.videoContent[content.type](content.content);\r\n              }\r\n              if (Evt.video.length) {\r\n                game.delay(0, _status.videoDuration * Math.min(2000, Evt.video[0].delay));\r\n              }\r\n              Evt.redo();\r\n            }\r\n            else {\r\n              _status.over = true;\r\n              ui.system.lastChild.hide();\r\n              setTimeout(function () {\r\n                ui.system.lastChild.innerHTML = '';\r\n              }, 500);\r\n            }\r\n          }],\r\n          /**\r\n           * wait for player\r\n           * @name content.waitForPlayer\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          waitForPlayer: [function () {\r\n            ui.auto.hide();\r\n            ui.pause.hide();\r\n\r\n            game.createServer();\r\n            if (!lib.translate.zhu) {\r\n              lib.translate.zhu = '主';\r\n            }\r\n            if (Evt.func) {\r\n              Evt.func();\r\n            }\r\n            if (!lib.configOL.number) {\r\n              lib.configOL.number = parseInt(lib.configOL.player_number);\r\n            }\r\n            if (game.onlineroom) {\r\n              game.send('server', 'config', lib.configOL);\r\n            }\r\n\r\n            ui.create.connectPlayers(game.ip);\r\n            if (!window.isNonameServer) {\r\n              var me = game.connectPlayers[0];\r\n              me.setIdentity('zhu');\r\n              me.initOL(get.connectNickname(), lib.config.connect_avatar);\r\n              me.playerid = '1';\r\n              game.onlinezhu = '1';\r\n            }\r\n            _status.waitingForPlayer = true;\r\n            if (window.isNonameServer) {\r\n              document.querySelector('#server_status').innerHTML = '等待中';\r\n            }\r\n            game.pause();\r\n          }, function () {\r\n            _status.waitingForPlayer = false;\r\n            lib.configOL.gameStarted = true;\r\n            if (window.isNonameServer) {\r\n              document.querySelector('#server_status').innerHTML = '游戏中';\r\n            }\r\n            if (game.onlineroom) {\r\n              game.send('server', 'config', lib.configOL);\r\n            }\r\n            for (var i = 0; i < game.connectPlayers.length; i++) {\r\n              game.connectPlayers[i].delete();\r\n            }\r\n            delete game.connectPlayers;\r\n            if (ui.roomInfo) {\r\n              ui.roomInfo.remove();\r\n              delete ui.roomInfo;\r\n            }\r\n            if (ui.exitroom) {\r\n              ui.exitroom.remove();\r\n              delete ui.exitroom;\r\n            }\r\n            game.broadcast('gameStart');\r\n            game.delay(2);\r\n            ui.auto.show();\r\n            ui.pause.show();\r\n            if (lib.config.show_cardpile) {\r\n              ui.cardPileButton.style.display = '';\r\n            }\r\n          }],\r\n          /**\r\n           * 置换手牌(单机)\r\n           * @name content.replaceHandcards\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          replaceHandcards: [function () {\r\n            if (Evt.players.contains(game.me)) {\r\n              game.me.chooseBool('是否置换手牌？');\r\n            }\r\n            else {\r\n              Evt.finish();\r\n            }\r\n          }, function () {\r\n            if (result && result.bool) {\r\n              var hs = game.me.getCards('h')\r\n              for (var i = 0; i < hs.length; i++) {\r\n                hs[i].discard(false);\r\n              }\r\n              game.me.directgain(get.cards(hs.length));\r\n            }\r\n          }],\r\n          /**\r\n           * 置换手牌[support online]\r\n           * @name content.replaceHandcards\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          replaceHandcardsOL: [function () {\r\n            var send = function () {\r\n              game.me.chooseBool('是否置换手牌？');\r\n              game.resume();\r\n            };\r\n            var sendback = function (result, player) {\r\n              if (result && result.bool) {\r\n                var hs = player.getCards('h')\r\n                game.broadcastAll(function (player, hs) {\r\n                  game.addVideo('lose', player, [get.cardsInfo(hs), [], [], []]);\r\n                  for (var i = 0; i < hs.length; i++) {\r\n                    hs[i].discard(false);\r\n                  }\r\n                }, player, hs);\r\n                player.directgain(get.cards(hs.length));\r\n              }\r\n            };\r\n            for (var i = 0; i < Evt.players.length; i++) {\r\n              if (Evt.players[i].isOnline()) {\r\n                Evt.withol = true;\r\n                Evt.players[i].send(send);\r\n                Evt.players[i].wait(sendback);\r\n              }\r\n              else if (Evt.players[i] == game.me) {\r\n                Evt.withme = true;\r\n                game.me.chooseBool('是否置换手牌？');\r\n                game.me.wait(sendback);\r\n              }\r\n            }\r\n          }, function () {\r\n            if (Evt.withme) {\r\n              game.me.unwait(result);\r\n            }\r\n          }, function () {\r\n            if (Evt.withol && !Evt.resultOL) {\r\n              game.pause();\r\n            }\r\n          }],\r\n          /**\r\n           * 一个完整的回合\r\n           * @name content.phase\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          phase: [() => {\r\n            if (!Evt.stageList || !Evt.stageList.length) Evt.stageList = lib.phaseName;\r\n            Evt.stepNum = 0;\r\n          }, () => {\r\n            if (typeof player[Evt.stageList[Evt.stepNum]] == 'function') player[Evt.stageList[Evt.stepNum]]();\r\n          }, () => {\r\n            if (Evt.stageList[Evt.stepNum] == 'phaseDraw') {\r\n              if (!player.noPhaseDelay) {\r\n                if (player == game.me) {\r\n                  game.delay();\r\n                }\r\n                else {\r\n                  game.delayx();\r\n                }\r\n              }\r\n            }\r\n            if (Evt.stageList[Evt.stepNum] == 'phaseUse') {\r\n              game.broadcastAll(function () {\r\n                if (ui.tempnowuxie) {\r\n                  ui.tempnowuxie.close();\r\n                  delete ui.tempnowuxie;\r\n                }\r\n              });\r\n            }\r\n            if (Evt.stageList[Evt.stepNum] == 'phaseDiscard') {\r\n              if (!player.noPhaseDelay) game.delayx();\r\n              delete player._noSkill;\r\n            }\r\n          }, () => {\r\n            Evt.trigger('phaseNext');\r\n            if (Evt.stageList[++Evt.stepNum]) {\r\n              Evt.trigger('stepNext');\r\n\r\n              Evt.goto(1);\r\n            }\r\n          }],\r\n          /**\r\n           * 判定阶段\r\n           * @name content.phaseJudge\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          phaseJudge: [() => {\r\n            Evt.cards = player.getCards('j');\r\n            if (!Evt.cards.length) Evt.finish();\r\n          }, () => {\r\n            if (cards.length && player.getCards('j').contains(cards[0])) {\r\n              Evt.card = cards.shift();\r\n              if (Evt.card.classList.contains('removing')) {\r\n                Evt.card.remove();\r\n                delete Evt.card;\r\n                Evt.redo();\r\n              }\r\n              else if (Evt.card.classList.contains('feichu')) {\r\n                Evt.finish();\r\n                return;\r\n              }\r\n              else {\r\n                player.lose(Evt.card, 'visible', ui.ordering);\r\n                player.$phaseJudge(Evt.card);\r\n                Evt.cancelled = false;\r\n                Evt.trigger('phaseJudge');\r\n                var name = Evt.card.viewAs || Evt.card.name;\r\n                player.popup(name, 'thunder');\r\n                if (!lib.card[name].effect) {\r\n                  game.delay();\r\n                  Evt.redo();\r\n                }\r\n                else if (!lib.card[name].judge) {\r\n                  game.delay();\r\n                  Evt.nojudge = true;\r\n                }\r\n              }\r\n            }\r\n            else Evt.finish();\r\n          }, () => {\r\n            if (!Evt.cancelled && !Evt.nojudge) player.judge(Evt.card).set('type', 'phase');\r\n          }, () => {\r\n            var name = Evt.card.viewAs || Evt.card.name;\r\n            if (Evt.cancelled && !Evt.direct) {\r\n              if (lib.card[name].cancel) {\r\n                var next = game.createEvent(name + 'Cancel');\r\n                next.setContent(lib.card[name].cancel);\r\n                next.card = Evt.card;\r\n                next.cards = [Evt.card];\r\n                next.player = player;\r\n              }\r\n            }\r\n            else {\r\n              var next = game.createEvent(name);\r\n              next.setContent(lib.card[name].effect);\r\n              next._result = result;\r\n              next.card = Evt.card;\r\n              next.cards = [Evt.card];\r\n              next.player = player;\r\n            }\r\n            ui.clear();\r\n            Evt.goto(1);\r\n          }],\r\n          /**\r\n           * 摸牌阶段\r\n           * @name content.phaseDraw\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          phaseDraw: [() => {\r\n            Evt.trigger(\"phaseDrawBegin1\");\r\n          }, () => {\r\n            Evt.trigger(\"phaseDrawBegin2\");\r\n          }, () => {\r\n            if (game.modPhaseDraw) {\r\n              game.modPhaseDraw(player, Evt.num);\r\n            }\r\n            else {\r\n              if (Evt.num > 0) {\r\n                var num = Evt.num;\r\n                if (Evt.attachDraw) {\r\n                  for (var i = 0; i < Evt.attachDraw.length; i++) {\r\n                    ui.cardPile.insertBefore(Evt.attachDraw[i], ui.cardPile.firstChild);\r\n                  }\r\n                  num += Evt.attachDraw.length;\r\n                }\r\n                var next = player.draw(num);\r\n                if (Evt.attachDraw) {\r\n                  next.minnum = Evt.attachDraw.length;\r\n                }\r\n              }\r\n            }\r\n          }, () => {\r\n            if (Array.isArray(result)) {\r\n              Evt.cards = result;\r\n            }\r\n          }],\r\n          /**\r\n           * 出牌阶段\r\n           * @name content.phaseUse\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          phaseUse: [() => {\r\n            ;\r\n            var next = player.chooseToUse();\r\n            if (!lib.config.show_phaseuse_prompt) {\r\n              next.set('prompt', false);\r\n            }\r\n            next.set('type', 'phase');\r\n          }, () => {\r\n            if (result.bool && !Evt.skipped) {\r\n              Evt.goto(0);\r\n            }\r\n            game.broadcastAll(function () {\r\n              if (ui.tempnowuxie) {\r\n                ui.tempnowuxie.close();\r\n                delete ui.tempnowuxie;\r\n              }\r\n            });\r\n          }, () => {\r\n            var stat = player.getStat();\r\n            for (var i in stat.skill) {\r\n              var bool = false;\r\n              var info = lib.skill[i];\r\n              if (!info) continue;\r\n              if (info.enable != undefined) {\r\n                if (typeof info.enable == 'string' && info.enable == 'phaseUse') bool = true;\r\n                else if (typeof info.enable == 'object' && info.enable.contains('phaseUse')) bool = true;\r\n              }\r\n              if (bool) stat.skill[i] = 0;\r\n            }\r\n            for (var i in stat.card) {\r\n              var bool = false;\r\n              var info = lib.card[i];\r\n              if (!info) continue;\r\n              if (info.updateUsable == 'phaseUse') stat.card[i] = 0;\r\n            }\r\n          }],\r\n          /**\r\n           * 弃牌阶段\r\n           * @name content.phaseDiscard\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          phaseDiscard: [() => {\r\n            if (!Evt.num) Evt.num = player.needsToDiscard();\r\n            if (Evt.num <= 0) Evt.finish();\r\n            else {\r\n              if (lib.config.show_phase_prompt) {\r\n                player.popup('弃牌阶段');\r\n              }\r\n            }\r\n            Evt.trigger('phaseDiscard');\r\n          }, () => {\r\n            player.chooseToDiscard(num, true);\r\n          }, () => {\r\n            Evt.cards = result.cards;\r\n          }],\r\n          /**\r\n           * 选择以使用(牌|技能)\r\n           * @name content.chooseToUse\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Object} Evt.result 返回选择结果给父事件\r\n           */\r\n          chooseToUse: [() => {\r\n            if (Evt.responded) return;\r\n            if (game.modeSwapPlayer && !_status.auto && player.isUnderControl() && !lib.filter.wuxieSwap(Evt)) {\r\n              game.modeSwapPlayer(player);\r\n            }\r\n            var skills = player.getSkills(true);\r\n            game.expandSkills(skills);\r\n            for (var i = 0; i < skills.length; i++) {\r\n              var info = lib.skill[skills[i]];\r\n              if (info && info.onChooseToUse) {\r\n                info.onChooseToUse(Evt);\r\n              }\r\n            }\r\n            _status.noclearcountdown = true;\r\n            if (Evt.type == 'phase') {\r\n              if (Evt.isMine()) {\r\n                if (lib.config.mode == 'richer' && lib.skill._chessmove.filter(true, player) && player.getStat().skill && !player.getStat().skill._chessmove) {\r\n                  Evt.endButton = ui.create.control('请进行移动', 'stayleft', function () { });\r\n                }\r\n                else {\r\n                  Evt.endButton = ui.create.control('结束回合', 'stayleft', function () {\r\n                    if (_status.event.skill) {\r\n                      ui.click.cancel();\r\n                    }\r\n                    ui.click.cancel();\r\n                  });\r\n                }\r\n                Evt.fakeforce = true;\r\n              }\r\n              else {\r\n                if (Evt.endButton) {\r\n                  Evt.endButton.close();\r\n                  delete Evt.endButton;\r\n                }\r\n                Evt.fakeforce = false;\r\n              }\r\n            }\r\n            if (Evt.player.isUnderControl() && !_status.auto) {\r\n              Evt.result = {\r\n                bool: false\r\n              }\r\n              return;\r\n            }\r\n            else if (Evt.isMine()) {\r\n              if (Evt.hsskill && !Evt.forced && _status.prehidden_skills.contains(Evt.hsskill)) {\r\n                ui.click.cancel();\r\n                return;\r\n              }\r\n              if (Evt.type == 'wuxie') {\r\n                if (ui.tempnowuxie) {\r\n                  var triggerevent = Evt.getTrigger();\r\n                  if (triggerevent && triggerevent.targets && triggerevent.num == triggerevent.targets.length - 1) {\r\n                    ui.tempnowuxie.close();\r\n                  }\r\n                }\r\n                if (lib.filter.wuxieSwap(Evt)) {\r\n                  Evt.result = {\r\n                    bool: false\r\n                  }\r\n                  return;\r\n                }\r\n              }\r\n              var ok = game.check();\r\n              if (!ok || !lib.config.auto_confirm) {\r\n                game.pause();\r\n                if (lib.config.enable_vibrate && player._noVibrate) {\r\n                  delete player._noVibrate;\r\n                  game.vibrate();\r\n                }\r\n              }\r\n              if (!ok) {\r\n                if (typeof Evt.prompt == 'string') {\r\n                  if (Evt.openskilldialog) {\r\n                    Evt.skillDialog = ui.create.dialog(Evt.openskilldialog);\r\n                    delete Evt.openskilldialog;\r\n                    Evt.dialog = Evt.prompt;\r\n                  }\r\n                  else {\r\n                    Evt.dialog = ui.create.dialog(Evt.prompt);\r\n                    if (Evt.prompt2) {\r\n                      Evt.dialog.addText(Evt.prompt2);\r\n                    }\r\n                  }\r\n                }\r\n                else if (Evt.prompt == 'function') {\r\n                  Evt.dialog = ui.create.dialog(Evt.prompt(Evt));\r\n                }\r\n                else if (Evt.prompt == undefined) {\r\n                  var str;\r\n                  if (typeof Evt.filterCard == 'object') {\r\n                    var filter = Evt.filterCard;\r\n                    str = '请使用' + get.cnNumber(Evt.selectCard[0]) + '张'\r\n                    if (filter.name) {\r\n                      str += get.translation(filter.name);\r\n                    }\r\n                    else {\r\n                      str += '牌';\r\n                    }\r\n                  }\r\n                  else {\r\n                    str = '请选择要使用的牌';\r\n                  }\r\n                  if (Evt.openskilldialog) {\r\n                    Evt.skillDialog = ui.create.dialog(Evt.openskilldialog);\r\n                    delete Evt.openskilldialog;\r\n                    Evt.dialog = str;\r\n                  }\r\n                  else if (typeof Evt.skillDialog != 'string') {\r\n                    Evt.dialog = ui.create.dialog(str);\r\n                  }\r\n                  else {\r\n                    Evt.dialog = str;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            else if (Evt.isOnline()) {\r\n              Evt.send();\r\n            }\r\n            else {\r\n              Evt.result = 'ai';\r\n            }\r\n          }, () => {\r\n            if (Evt.result == 'ai') {\r\n              var ok = game.check();\r\n              if (ok) {\r\n                ui.click.ok();\r\n              }\r\n              else if (ai.basic.chooseCard(Evt.ai1)) {\r\n                if (ai.basic.chooseTarget(Evt.ai2)) {\r\n                  ui.click.ok();\r\n                  Evt._aiexcludeclear = true;\r\n                }\r\n                else {\r\n                  if (!Evt.norestore) {\r\n                    if (Evt.skill) {\r\n                      var skill = Evt.skill;\r\n                      ui.click.cancel();\r\n                      Evt._aiexclude.add(skill);\r\n                      var info = get.info(skill);\r\n                      if (info.sourceSkill) {\r\n                        Evt._aiexclude.add(info.sourceSkill);\r\n                      }\r\n                    }\r\n                    else {\r\n                      get.card(true).aiexclude();\r\n                      game.uncheck();\r\n                    }\r\n                    Evt.redo();\r\n                    game.resume();\r\n                  }\r\n                  else {\r\n                    ui.click.cancel();\r\n                  }\r\n                }\r\n              }\r\n              else if (Evt.skill && !Evt.norestore) {\r\n                var skill = Evt.skill;\r\n                ui.click.cancel();\r\n                Evt._aiexclude.add(skill);\r\n                var info = get.info(skill);\r\n                if (info.sourceSkill) {\r\n                  Evt._aiexclude.add(info.sourceSkill);\r\n                }\r\n                Evt.redo();\r\n                game.resume();\r\n              }\r\n              else {\r\n                ui.click.cancel();\r\n              }\r\n              if (Evt.aidelay && Evt.result && Evt.result.bool) {\r\n                game.delayx();\r\n              }\r\n            }\r\n          }, () => {\r\n            if (Evt.endButton) {\r\n              Evt.endButton.close();\r\n              delete Evt.endButton;\r\n            }\r\n            Evt.resume();\r\n            if (Evt.result) {\r\n              if (Evt.result.skill) {\r\n                var info = get.info(Evt.result.skill);\r\n                if (info && info.chooseButton) {\r\n                  if (Evt.dialog && typeof Evt.dialog == 'object') Evt.dialog.close();\r\n                  var dialog = info.chooseButton.dialog(Evt, player);\r\n                  if (info.chooseButton.chooseControl) {\r\n                    var next = player.chooseControl(info.chooseButton.chooseControl(Evt, player));\r\n                    next.dialog = dialog;\r\n                    next.set('ai', info.chooseButton.check || function () { return 0; });\r\n                  }\r\n                  else {\r\n                    var next = player.chooseButton(dialog);\r\n                    next.set('ai', info.chooseButton.check || function () { return 1; });\r\n                    next.set('filterButton', info.chooseButton.filter || function () { return true; });\r\n                    next.set('selectButton', info.chooseButton.select || 1);\r\n                  }\r\n                  Evt.buttoned = Evt.result.skill;\r\n                }\r\n                else if (info && info.precontent && !game.online && !Evt.nouse) {\r\n                  var next = game.createEvent('pre_' + Evt.result.skill);\r\n                  next.setContent(info.precontent);\r\n                  next.set('result', Evt.result);\r\n                  next.set('player', player);\r\n                }\r\n              }\r\n            }\r\n          }, () => {\r\n            if (Evt.buttoned) {\r\n              if (result.bool || result.control && result.control != 'cancel2') {\r\n                var info = get.info(Evt.buttoned).chooseButton;\r\n                lib.skill[Evt.buttoned + '_backup'] = info.backup(info.chooseControl ? result : result.links, player);\r\n                lib.skill[Evt.buttoned + '_backup'].sourceSkill = Evt.buttoned;\r\n                if (game.online) {\r\n                  Evt._sendskill = [Evt.buttoned + '_backup', lib.skill[Evt.buttoned + '_backup']];\r\n                }\r\n                Evt.backup(Evt.buttoned + '_backup');\r\n                if (info.prompt) {\r\n                  Evt.openskilldialog = info.prompt(info.chooseControl ? result : result.links, player);\r\n                }\r\n              }\r\n              else {\r\n                ui.control.animate('nozoom', 100);\r\n                Evt._aiexclude.add(Evt.buttoned);\r\n              }\r\n              Evt.goto(0);\r\n              delete Evt.buttoned;\r\n            }\r\n          }, () => {\r\n            if (Evt._aiexcludeclear) {\r\n              delete Evt._aiexcludeclear;\r\n              Evt._aiexclude.length = 0;\r\n            }\r\n            delete _status.noclearcountdown;\r\n            if (Evt.skillDialog && get.objtype(Evt.skillDialog) == 'div') {\r\n              Evt.skillDialog.close();\r\n            }\r\n            if (Evt.result && Evt.result.bool && !game.online && !Evt.nouse) {\r\n              player.useResult(Evt.result, Evt);\r\n            }\r\n            else if (Evt._sendskill) {\r\n              Evt.result._sendskill = Evt._sendskill;\r\n            }\r\n            if (Evt.dialog && typeof Evt.dialog == 'object') Evt.dialog.close();\r\n            if (!_status.noclearcountdown) {\r\n              game.stopCountChoose();\r\n            }\r\n          }, () => {\r\n            if (Evt._result && Evt.result) {\r\n              Evt.result.result = Evt._result;\r\n            }\r\n          }],\r\n          /**\r\n           * 选择以响应(牌|技能)\r\n           * @name content.chooseToUse\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Object} Evt.result 返回选择结果给父事件\r\n           */\r\n          chooseToRespond: [() => {\r\n            if (Evt.responded) {\r\n              delete Evt.dialog;\r\n              return;\r\n            }\r\n            var skills = player.getSkills(true);\r\n            game.expandSkills(skills);\r\n            for (var i = 0; i < skills.length; i++) {\r\n              var info = lib.skill[skills[i]];\r\n              if (info && info.onChooseToRespond) {\r\n                info.onChooseToRespond(Evt);\r\n              }\r\n            }\r\n            _status.noclearcountdown = true;\r\n            if (!_status.connectMode && lib.config.skip_shan && Evt.autochoose && Evt.autochoose()) {\r\n              Evt.result = { bool: false };\r\n            }\r\n            else {\r\n              if (game.modeSwapPlayer && !_status.auto && player.isUnderControl()) {\r\n                game.modeSwapPlayer(player);\r\n              }\r\n              if (Evt.isMine()) {\r\n                if (Evt.hsskill && !Evt.forced && _status.prehidden_skills.contains(Evt.hsskill)) {\r\n                  ui.click.cancel();\r\n                  return;\r\n                }\r\n                var ok = game.check();\r\n                if (!ok) {\r\n                  game.pause();\r\n                  if (Evt.openskilldialog) {\r\n                    Evt.skillDialog = ui.create.dialog(Evt.openskilldialog);\r\n                    delete Evt.openskilldialog;\r\n                    Evt.dialog = Evt.prompt;\r\n                  }\r\n                  else {\r\n                    if (Evt.prompt) Evt.dialog = ui.create.dialog(Evt.prompt);\r\n                    if (Evt.prompt2) Evt.dialog.addText(Evt.prompt2);\r\n                  }\r\n                }\r\n              }\r\n              else if (Evt.isOnline()) {\r\n                Evt.send();\r\n              }\r\n              else {\r\n                Evt.result = 'ai';\r\n              }\r\n            }\r\n          }, () => {\r\n            if (Evt.result == 'ai') {\r\n              var ok = game.check();\r\n              if (ok) {\r\n                ui.click.ok();\r\n              }\r\n              else if (ai.basic.chooseCard(Evt.ai)) {\r\n                ui.click.ok();\r\n                Evt._aiexcludeclear = true;\r\n              }\r\n              else if (Evt.skill && !Evt.norestore) {\r\n                var skill = Evt.skill;\r\n                ui.click.cancel();\r\n                Evt._aiexclude.add(skill);\r\n                var info = get.info(skill);\r\n                if (info.sourceSkill) {\r\n                  Evt._aiexclude.add(info.sourceSkill);\r\n                }\r\n                Evt.redo();\r\n                game.resume();\r\n              }\r\n              else {\r\n                ui.click.cancel();\r\n              }\r\n              if (Evt.aidelay && Evt.result && Evt.result.bool) {\r\n                game.delayx();\r\n              }\r\n            }\r\n          }, () => {\r\n            Evt.resume();\r\n            if (Evt.result) {\r\n              if (Evt.result.skill) {\r\n                var info = get.info(Evt.result.skill);\r\n                if (info && info.chooseButton) {\r\n                  if (Evt.dialog && typeof Evt.dialog == 'object') Evt.dialog.close();\r\n                  var dialog = info.chooseButton.dialog(Evt, player);\r\n                  if (info.chooseButton.chooseControl) {\r\n                    var next = player.chooseControl(info.chooseButton.chooseControl(Evt, player));\r\n                    next.dialog = dialog;\r\n                    next.set('ai', info.chooseButton.check || function () { return 0; });\r\n                  }\r\n                  else {\r\n                    var next = player.chooseButton(dialog);\r\n                    next.set('ai', info.chooseButton.check || function () { return 1; });\r\n                    next.set('filterButton', info.chooseButton.filter || function () { return true; });\r\n                    next.set('selectButton', info.chooseButton.select || 1);\r\n                  }\r\n                  Evt.buttoned = Evt.result.skill;\r\n                }\r\n                else if (info && info.precontent && !game.online) {\r\n                  var next = game.createEvent('pre_' + Evt.result.skill);\r\n                  next.setContent(info.precontent);\r\n                  next.set('result', Evt.result);\r\n                  next.set('player', player);\r\n                }\r\n              }\r\n            }\r\n          }, () => {\r\n            if (Evt.buttoned) {\r\n              if (result.bool || result.control && result.control != 'cancel2') {\r\n                var info = get.info(Evt.buttoned).chooseButton;\r\n                lib.skill[Evt.buttoned + '_backup'] = info.backup(info.chooseControl ? result : result.links, player);\r\n                lib.skill[Evt.buttoned + '_backup'].sourceSkill = Evt.buttoned;\r\n                if (game.online) {\r\n                  Evt._sendskill = [Evt.buttoned + '_backup', lib.skill[Evt.buttoned + '_backup']];\r\n                }\r\n                Evt.backup(Evt.buttoned + '_backup');\r\n                if (info.prompt) {\r\n                  Evt.openskilldialog = info.prompt(info.chooseControl ? result : result.links, player);\r\n                }\r\n              }\r\n              else {\r\n                ui.control.animate('nozoom', 100);\r\n                Evt._aiexclude.add(Evt.buttoned);\r\n              }\r\n              Evt.goto(0);\r\n              delete Evt.buttoned;\r\n            }\r\n          }, () => {\r\n            delete _status.noclearcountdown;\r\n            if (Evt.skillDialog && get.objtype(Evt.skillDialog) == 'div') {\r\n              Evt.skillDialog.close();\r\n            }\r\n            if (Evt.result.bool && !game.online) {\r\n              if (Evt.result._sendskill) {\r\n                lib.skill[Evt.result._sendskill[0]] = Evt.result._sendskill[1];\r\n              }\r\n              var info = get.info(Evt.result.skill);\r\n              if (Evt.onresult) {\r\n                Evt.onresult(Evt.result);\r\n              }\r\n              if (Evt.result.skill) {\r\n                if (info.direct && !info.clearTime) {\r\n                  _status.noclearcountdown = true;\r\n                }\r\n              }\r\n              if (Evt.logSkill) {\r\n                if (typeof Evt.logSkill == 'string') {\r\n                  player.logSkill(Evt.logSkill);\r\n                }\r\n                else if (Array.isArray(Evt.logSkill)) {\r\n                  player.logSkill.apply(player, Evt.logSkill);\r\n                }\r\n              }\r\n              if (!Evt.result.card && Evt.result.skill) {\r\n                Evt.result.used = Evt.result.skill;\r\n                player.useSkill(Evt.result.skill, Evt.result.cards, Evt.result.targets);\r\n              }\r\n              else {\r\n                if (info && info.prerespond) {\r\n                  info.prerespond(Evt.result, player);\r\n                }\r\n                var next = player.respond(Evt.result.cards, Evt.result.card, Evt.animate, Evt.result.skill, Evt.source);\r\n                if (Evt.result.noanimate) next.animate = false;\r\n                if (Evt.parent.card && Evt.parent.type == 'card') {\r\n                  next.set('respondTo', [Evt.parent.player, Evt.parent.card]);\r\n                }\r\n                if (Evt.noOrdering) next.noOrdering = true;\r\n              }\r\n            }\r\n            else if (Evt._sendskill) {\r\n              Evt.result._sendskill = Evt._sendskill;\r\n            }\r\n            if (Evt.dialog && Evt.dialog.close) Evt.dialog.close();\r\n            if (!_status.noclearcountdown) {\r\n              game.stopCountChoose();\r\n            }\r\n          }],\r\n          /**\r\n           * 选择以弃置牌\r\n           * @name content.chooseToDiscard\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Object} Evt.result 返回选择结果给父事件\r\n           */\r\n          chooseToDiscard: [() => {\r\n            if (Evt.autochoose()) {\r\n              Evt.result = {\r\n                bool: true,\r\n                autochoose: true,\r\n                cards: player.getCards(Evt.position),\r\n                rawcards: player.getCards(Evt.position),\r\n              }\r\n              for (var i = 0; i < Evt.result.cards.length; i++) {\r\n                if (!lib.filter.cardDiscardable(Evt.result.cards[i], player, Evt)) {\r\n                  Evt.result.cards.splice(i--, 1);\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              // &&!lib.filter.wuxieSwap(trigger)\r\n              if (game.modeSwapPlayer && !_status.auto && player.isUnderControl()) {\r\n                game.modeSwapPlayer(player);\r\n              }\r\n              Evt.rangecards = player.getCards(Evt.position);\r\n              for (var i = 0; i < Evt.rangecards.length; i++) {\r\n                if (lib.filter.cardDiscardable(Evt.rangecards[i], player, Evt)) {\r\n                  Evt.rangecards.splice(i--, 1);\r\n                }\r\n                else {\r\n                  Evt.rangecards[i].uncheck('chooseToDiscard');\r\n                }\r\n              }\r\n              var range = get.select(Evt.selectCard);\r\n              game.check();\r\n              if (Evt.isMine()) {\r\n                if (Evt.hsskill && !Evt.forced && _status.prehidden_skills.contains(Evt.hsskill)) {\r\n                  ui.click.cancel();\r\n                  return;\r\n                }\r\n                game.pause();\r\n                if (range[1] > 1 && typeof Evt.selectCard != 'function') {\r\n                  Evt.promptdiscard = ui.create.control('提示', function () {\r\n                    ai.basic.chooseCard(Evt.ai);\r\n                    if (_status.event.custom.add.card) {\r\n                      _status.event.custom.add.card();\r\n                    }\r\n                    for (var i = 0; i < ui.selected.cards.length; i++) {\r\n                      ui.selected.cards[i].updateTransform(true);\r\n                    }\r\n                  });\r\n                }\r\n                if (Array.isArray(Evt.dialog)) {\r\n                  Evt.dialog = ui.create.dialog.apply(this, Evt.dialog);\r\n                  Evt.dialog.open();\r\n                  Evt.dialog.classList.add('noselect');\r\n                }\r\n                else if (Evt.prompt != false) {\r\n                  var str;\r\n                  if (typeof (Evt.prompt) == 'string') str = Evt.prompt;\r\n                  else {\r\n                    str = '请弃置';\r\n                    if (range[0] == range[1]) str += get.cnNumber(range[0]);\r\n                    else if (range[1] == Infinity) str += '至少' + get.cnNumber(range[0]);\r\n                    else str += get.cnNumber(range[0]) + '至' + get.cnNumber(range[1]);\r\n                    str += '张';\r\n                    if (Evt.position == 'h' || Evt.position == undefined) str += '手';\r\n                    if (Evt.position == 'e') str += '装备';\r\n                    str += '牌';\r\n                  }\r\n                  Evt.dialog = ui.create.dialog(str);\r\n                  if (Evt.prompt2) {\r\n                    Evt.dialog.addText(Evt.prompt2, Evt.prompt2.length <= 20);\r\n                  }\r\n                  if (Array.isArray(Evt.selectCard)) {\r\n                    Evt.promptbar = Evt.dialog.add('0/' + get.numStr(Evt.selectCard[1], 'card'));\r\n                    Evt.custom.add.card = function () {\r\n                      _status.event.promptbar.innerHTML =\r\n                        ui.selected.cards.length + '/' + get.numStr(_status.event.selectCard[1], 'card');\r\n                    }\r\n                  }\r\n                }\r\n                else if (get.itemtype(Evt.dialog) == 'dialog') {\r\n                  Evt.dialog.style.display = '';\r\n                  Evt.dialog.open();\r\n                }\r\n              }\r\n              else if (Evt.isOnline()) {\r\n                Evt.send();\r\n              }\r\n              else {\r\n                Evt.result = 'ai';\r\n              }\r\n            }\r\n          }, () => {\r\n            if (Evt.result == 'ai') {\r\n              game.check();\r\n              if (ai.basic.chooseCard(Evt.ai) || forced) {\r\n                ui.click.ok();\r\n              }\r\n              else if (Evt.skill) {\r\n                var skill = Evt.skill;\r\n                ui.click.cancel();\r\n                Evt._aiexclude.add(skill);\r\n                Evt.redo();\r\n                game.resume();\r\n              }\r\n              else {\r\n                ui.click.cancel();\r\n              }\r\n            }\r\n            if (Evt.rangecards) {\r\n              for (var i = 0; i < Evt.rangecards.length; i++) {\r\n                Evt.rangecards[i].recheck('chooseToDiscard');\r\n              }\r\n            }\r\n          }, () => {\r\n            Evt.resume();\r\n            if (Evt.promptdiscard) {\r\n              Evt.promptdiscard.close();\r\n            }\r\n          }, () => {\r\n            if (Evt.result.bool && Evt.result.cards && Evt.result.cards.length &&\r\n              !game.online && Evt.autodelay && !Evt.isMine()) {\r\n              if (typeof Evt.autodelay == 'number') {\r\n                game.delayx(Evt.autodelay);\r\n              }\r\n              else {\r\n                game.delayx();\r\n              }\r\n            }\r\n          }, () => {\r\n            if (Evt.logSkill && Evt.result.bool && !game.online) {\r\n              if (typeof Evt.logSkill == 'string') {\r\n                player.logSkill(Evt.logSkill);\r\n              }\r\n              else if (Array.isArray(Evt.logSkill)) {\r\n                player.logSkill.apply(player, Evt.logSkill);\r\n              }\r\n            }\r\n            if (!game.online) {\r\n              if (typeof Evt.delay == 'boolean') {\r\n                Evt.done = player.discard(Evt.result.cards).set('delay', Evt.delay);\r\n              }\r\n              else {\r\n                Evt.done = player.discard(Evt.result.cards);\r\n              }\r\n            }\r\n            if (Evt.dialog && Evt.dialog.close) Evt.dialog.close();\r\n          }],\r\n          /**\r\n           * 拼点失败\r\n           * @name content.chooseToCompareLose\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Object} Evt.result 返回选择结果给父事件\r\n           */\r\n          chooseToCompareLose: function () {\r\n            for (var i = 0; i < Evt.lose_list.length; i++) {\r\n              var next = Evt.lose_list[i][0].lose(Evt.lose_list[i][1], ui.ordering);\r\n              next.relatedEvent = Evt.getParent();\r\n              next.getlx = false;\r\n            }\r\n          },\r\n          /**\r\n           * 多人拼点\r\n           * @name content.chooseToCompareMultiple\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Object} Evt.result 返回选择结果给父事件\r\n           */\r\n          chooseToCompareMultiple: [() => {\r\n            if (player.countCards('h') == 0) {\r\n              Evt.result = { cancelled: true, bool: false }\r\n              Evt.finish();\r\n              return;\r\n            }\r\n            for (var i = 0; i < targets.length; i++) {\r\n              if (targets[i].countCards('h') == 0) {\r\n                Evt.result = { cancelled: true, bool: false }\r\n                Evt.finish();\r\n                return;\r\n              }\r\n            }\r\n            if (!Evt.multitarget) {\r\n              targets.sort(lib.sort.seat);\r\n            }\r\n            game.log(player, '对', targets, '发起拼点');\r\n          }, () => {\r\n            Evt._result = [];\r\n            Evt.list = targets.filter(function (current) {\r\n              return !Evt.fixedResult || !Evt.fixedResult[current.playerid];\r\n            });\r\n            if (Evt.list.length || !Evt.fixedResult || !Evt.fixedResult[player.playerid]) {\r\n              if (!Evt.fixedResult || !Evt.fixedResult[player.playerid]) Evt.list.unshift(player);\r\n              player.chooseCardOL(Evt.list, '请选择拼点牌', true).set('type', 'compare').set('ai', Evt.ai).set('source', player).aiCard = function (target) {\r\n                var hs = target.getCards('h');\r\n                var Evt = _status.event;\r\n                Evt.player = target;\r\n                hs.sort(function (a, b) {\r\n                  return Evt.ai(b) - Evt.ai(a);\r\n                });\r\n                delete Evt.player;\r\n                return { bool: true, cards: [hs[0]] };\r\n              };\r\n            }\r\n          }, () => {\r\n            var cards = [];\r\n            var lose_list = [];\r\n            if (Evt.fixedResult && Evt.fixedResult[player.playerid]) {\r\n              Evt.list.unshift(player);\r\n              result.unshift({ bool: true, cards: [Evt.fixedResult[player.playerid]] });\r\n              lose_list.push([player, [Evt.fixedResult[player.playerid]]]);\r\n            }\r\n            else {\r\n              if (result[0].skill && lib.skill[result[0].skill] && lib.skill[result[0].skill].onCompare) {\r\n                player.logSkill(result[0].skill);\r\n                result[0].cards = lib.skill[result[0].skill].onCompare(player)\r\n              }\r\n              else lose_list.push([player, result[0].cards]);\r\n            };\r\n            for (var j = 0; j < targets.length; j++) {\r\n              if (Evt.list.contains(targets[j])) {\r\n                var i = Evt.list.indexOf(targets[j]);\r\n                if (result[i].skill && lib.skill[result[i].skill] && lib.skill[result[i].skill].onCompare) {\r\n                  Evt.list[i].logSkill(result[i].skill);\r\n                  result[i].cards = lib.skill[result[i].skill].onCompare(Evt.list[i]);\r\n                }\r\n                else lose_list.push([targets[j], result[i].cards]);\r\n                cards.push(result[i].cards[0]);\r\n              }\r\n              else if (Evt.fixedResult && Evt.fixedResult[targets[j].playerid]) {\r\n                cards.push(Evt.fixedResult[targets[j].playerid]);\r\n                lose_list.push([targets[j], [Evt.fixedResult[targets[j].playerid]]]);\r\n              }\r\n            }\r\n            if (lose_list.length) {\r\n              game.loseAsync({\r\n                lose_list: lose_list,\r\n              }).setContent('chooseToCompareLose');\r\n            }\r\n            Evt.cardlist = cards;\r\n            Evt.cards = cards;\r\n            Evt.card1 = result[0].cards[0];\r\n            Evt.num1 = Evt.card1.number;\r\n            Evt.iwhile = 0;\r\n            Evt.result = {\r\n              player: Evt.card1,\r\n              targets: Evt.cardlist.slice(0),\r\n              num1: [],\r\n              num2: [],\r\n            };\r\n            game.log(player, '的拼点牌为', Evt.card1);\r\n          }, () => {\r\n            if (Evt.iwhile < targets.length) {\r\n              Evt.target = targets[Evt.iwhile];\r\n              Evt.target.animate('target');\r\n              player.animate('target');\r\n              Evt.card2 = Evt.cardlist[Evt.iwhile];\r\n              Evt.num2 = Evt.card2.number;\r\n              game.log(Evt.target, '的拼点牌为', Evt.card2);\r\n              player.line(Evt.target);\r\n              player.$compare(Evt.card1, Evt.target, Evt.card2);\r\n              Evt.trigger('compare');\r\n              game.delay(0, 1500);\r\n            }\r\n            else {\r\n              Evt.goto(7);\r\n            }\r\n          }, () => {\r\n            Evt.result.num1[Evt.iwhile] = Evt.num1;\r\n            Evt.result.num2[Evt.iwhile] = Evt.num2;\r\n            var str;\r\n            if (Evt.num1 > Evt.num2) {\r\n              Evt.result.winner = player;\r\n              Evt.result.loser = target;\r\n              str = get.translation(player) + '拼点成功';\r\n              player.popup('胜');\r\n              target.popup('负');\r\n            }\r\n            else {\r\n              str = get.translation(player) + '拼点失败';\r\n              if (Evt.num1 == Evt.num2) {\r\n                Evt.result.tie = true;\r\n                player.popup('平');\r\n                target.popup('平');\r\n              }\r\n              else {\r\n                Evt.result.winner = target;\r\n                Evt.result.loser = player;\r\n                player.popup('负');\r\n                target.popup('胜');\r\n              }\r\n            }\r\n            game.broadcastAll(function (str) {\r\n              var dialog = ui.create.dialog(str);\r\n              dialog.classList.add('center');\r\n              setTimeout(function () {\r\n                dialog.close();\r\n              }, 1000);\r\n            }, str);\r\n            game.delay(2);\r\n          }, () => {\r\n            if (Evt.callback) {\r\n              game.broadcastAll(function (card1, card2) {\r\n                if (card1.clone) card1.clone.style.opacity = 0.5;\r\n                if (card2.clone) card2.clone.style.opacity = 0.5;\r\n              }, Evt.card1, Evt.card2);\r\n              var next = game.createEvent('compareMultiple');\r\n              next.player = player;\r\n              next.target = Evt.target;\r\n              next.card1 = Evt.card1;\r\n              next.card2 = Evt.card2;\r\n              next.num1 = Evt.num1;\r\n              next.num2 = Evt.num2;\r\n              next.winner = Evt.result.winner;\r\n              next.setContent(Evt.callback);\r\n            }\r\n          }, () => {\r\n            game.broadcastAll(ui.clear);\r\n            Evt.iwhile++;\r\n            Evt.goto(3);\r\n          }, () => {\r\n            Evt.cards.add(Evt.card1);\r\n          }],\r\n          /**\r\n           * 两人拼点\r\n           * @name content.chooseToCompare\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Object} Evt.result 返回选择结果给父事件\r\n           */\r\n          chooseToCompare: [() => {\r\n            if (player.countCards('h') == 0 || target.countCards('h') == 0) {\r\n              Evt.result = { cancelled: true, bool: false }\r\n              Evt.finish();\r\n              return;\r\n            }\r\n            game.log(player, '对', target, '发起拼点');\r\n            Evt.lose_list = [];\r\n          }, () => {\r\n            var sendback = function () {\r\n              if (_status.event != Evt) {\r\n                return function () {\r\n                  Evt.resultOL = _status.event.resultOL;\r\n                };\r\n              }\r\n            };\r\n            if (Evt.fixedResult && Evt.fixedResult[player.playerid]) {\r\n              Evt.card1 = Evt.fixedResult[player.playerid];\r\n              Evt.lose_list.push([player, Evt.card1]);\r\n            }\r\n            else if (player.isOnline()) {\r\n              player.wait(sendback);\r\n              Evt.ol = true;\r\n              player.send(function (ai) {\r\n                game.me.chooseCard('请选择拼点牌', true).set('type', 'compare').set('glow_result', true).ai = ai;\r\n                game.resume();\r\n              }, Evt.ai);\r\n            }\r\n            else {\r\n              Evt.localPlayer = true;\r\n              player.chooseCard('请选择拼点牌', true).set('type', 'compare').set('glow_result', true).ai = Evt.ai;\r\n            }\r\n            if (Evt.fixedResult && Evt.fixedResult[target.playerid]) {\r\n              Evt.card2 = Evt.fixedResult[target.playerid];\r\n              Evt.lose_list.push([target, Evt.card2]);\r\n            }\r\n            else if (target.isOnline()) {\r\n              target.wait(sendback);\r\n              Evt.ol = true;\r\n              target.send(function (ai) {\r\n                game.me.chooseCard('请选择拼点牌', true).set('type', 'compare').set('glow_result', true).ai = ai;\r\n                game.resume();\r\n              }, Evt.ai);\r\n            }\r\n            else {\r\n              Evt.localTarget = true;\r\n            }\r\n          }, () => {\r\n            if (Evt.localPlayer) {\r\n              if (result.skill && lib.skill[result.skill] && lib.skill[result.skill].onCompare) {\r\n                result.cards = lib.skill[result.skill].onCompare(player);\r\n                player.logSkill(result.skill);\r\n              }\r\n              else Evt.lose_list.push([player, result.cards[0]]);\r\n              Evt.card1 = result.cards[0];\r\n            }\r\n            if (Evt.localTarget) {\r\n              target.chooseCard('请选择拼点牌', true).set('type', 'compare').set('glow_result', true).ai = Evt.ai;\r\n            }\r\n          }, () => {\r\n            if (Evt.localTarget) {\r\n              if (result.skill && lib.skill[result.skill] && lib.skill[result.skill].onCompare) {\r\n                target.logSkill(result.skill);\r\n                result.cards = lib.skill[result.skill].onCompare(target);\r\n              }\r\n              else Evt.lose_list.push([target, result.cards[0]]);\r\n              Evt.card2 = result.cards[0];\r\n            }\r\n            if (!Evt.resultOL && Evt.ol) {\r\n              game.pause();\r\n            }\r\n          }, () => {\r\n            try {\r\n              if (!Evt.card1) {\r\n                if (Evt.resultOL[player.playerid].skill && lib.skill[Evt.resultOL[player.playerid].skill] && lib.skill[Evt.resultOL[player.playerid].skill].onCompare) {\r\n                  player.logSkill(Evt.resultOL[player.playerid].skill);\r\n                  Evt.resultOL[player.playerid].cards = lib.skill[Evt.resultOL[player.playerid].skill].onCompare(player);\r\n                }\r\n                else Evt.lose_list.push([player, Evt.resultOL[player.playerid].cards[0]]);\r\n                Evt.card1 = Evt.resultOL[player.playerid].cards[0];\r\n              };\r\n              if (!Evt.card2) {\r\n                if (Evt.resultOL[target.playerid].skill && lib.skill[Evt.resultOL[target.playerid].skill] && lib.skill[Evt.resultOL[target.playerid].skill].onCompare) {\r\n                  target.logSkill(Evt.resultOL[target.playerid].skill);\r\n                  Evt.resultOL[target.playerid].cards = lib.skill[Evt.resultOL[target.playerid].skill].onCompare(player);\r\n                }\r\n                else Evt.lose_list.push([target, Evt.resultOL[target.playerid].cards[0]]);\r\n                Evt.card2 = Evt.resultOL[target.playerid].cards[0];\r\n              }\r\n              if (!Evt.card1 || !Evt.card2) {\r\n                throw ('err');\r\n              }\r\n            }\r\n            catch (e) {\r\n              console.log(e);\r\n              game.print(e);\r\n              Evt.finish();\r\n              return;\r\n            }\r\n            if (Evt.card2.number >= 10 || Evt.card2.number <= 4) {\r\n              if (target.countCards('h') > 2) {\r\n                Evt.addToAI = true;\r\n              }\r\n            }\r\n            if (Evt.lose_list.length) {\r\n              game.loseAsync({\r\n                lose_list: Evt.lose_list,\r\n              }).setContent('chooseToCompareLose');\r\n            }\r\n          }, () => {\r\n            game.broadcast(function () {\r\n              ui.arena.classList.add('thrownhighlight');\r\n            });\r\n            ui.arena.classList.add('thrownhighlight');\r\n            game.addVideo('thrownhighlight1');\r\n            player.$compare(Evt.card1, target, Evt.card2);\r\n            game.log(player, '的拼点牌为', Evt.card1);\r\n            game.log(target, '的拼点牌为', Evt.card2);\r\n            Evt.num1 = Evt.card1.number;\r\n            Evt.num2 = Evt.card2.number;\r\n            Evt.trigger('compare');\r\n            game.delay(0, 1500);\r\n          }, () => {\r\n            Evt.result = {\r\n              player: Evt.card1,\r\n              target: Evt.card2,\r\n              num1: Evt.num1,\r\n              num2: Evt.num2\r\n            }\r\n            var str;\r\n            if (Evt.num1 > Evt.num2) {\r\n              Evt.result.bool = true;\r\n              Evt.result.winner = player;\r\n              Evt.result.loser = target;\r\n              str = get.translation(player) + '拼点成功';\r\n              player.popup('胜');\r\n              target.popup('负');\r\n            }\r\n            else {\r\n              Evt.result.bool = false;\r\n              str = get.translation(player) + '拼点失败';\r\n              if (Evt.num1 == Evt.num2) {\r\n                Evt.result.tie = true;\r\n                player.popup('平');\r\n                target.popup('平');\r\n              }\r\n              else {\r\n                Evt.result.winner = target;\r\n                Evt.result.loser = player;\r\n                player.popup('负');\r\n                target.popup('胜');\r\n              }\r\n            }\r\n            game.broadcastAll(function (str) {\r\n              var dialog = ui.create.dialog(str);\r\n              dialog.classList.add('center');\r\n              setTimeout(function () {\r\n                dialog.close();\r\n              }, 1000);\r\n            }, str);\r\n            game.delay(2);\r\n          }, () => {\r\n            if (typeof Evt.target.ai.shown == 'number' && Evt.target.ai.shown <= 0.85 && Evt.addToAI) {\r\n              Evt.target.ai.shown += 0.1;\r\n            }\r\n            game.broadcastAll(function () {\r\n              ui.arena.classList.remove('thrownhighlight');\r\n            });\r\n            game.addVideo('thrownhighlight2');\r\n            if (Evt.clear !== false) {\r\n              game.broadcastAll(ui.clear);\r\n            }\r\n            if (typeof Evt.preserve == 'function') {\r\n              Evt.preserve = Evt.preserve(Evt.result);\r\n            }\r\n            else if (Evt.preserve == 'win') {\r\n              Evt.preserve = Evt.result.bool;\r\n            }\r\n            else if (Evt.preserve == 'lose') {\r\n              Evt.preserve = !Evt.result.bool;\r\n            }\r\n          }],\r\n          /**\r\n           * 选择以获得一项技能\r\n           * @name content.discoverSkill\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Object} Evt.result 返回选择结果给父事件\r\n           */\r\n          discoverSkill: [function () {\r\n            var num = Evt.num || 3;\r\n            var choice;\r\n            if (typeof Evt.list == 'string' || typeof Evt.list == 'function') {\r\n              choice = get.gainableSkills(Evt.list).randomGets(num);\r\n            }\r\n            else if (Array.isArray(Evt.list)) {\r\n              choice = Evt.list.randomGets(num);\r\n            }\r\n            else {\r\n              choice = Array.from(Evt.list).randomGets(num);\r\n            }\r\n            if (!choice.length) {\r\n              Evt.finish();\r\n              Evt.result = { bool: false };\r\n              return;\r\n            }\r\n            Evt.skillai = Evt.ai || function (list) {\r\n              return get.max(list, get.skillRank, 'item');\r\n            };\r\n            if (_status.connectMode) {\r\n              if (choice.length == 1) Evt._result = { control: list[0] };\r\n              else player.chooseControl(choice).set('prompt', '选择获得一个技能').set('forceDie', true).set('ai', function () {\r\n                return Evt.skillai(choice);\r\n              });\r\n            }\r\n            else if (Evt.isMine()) {\r\n              game.check();\r\n              game.pause();\r\n              Evt.dialog = ui.create.dialog('forcebutton');\r\n              Evt.dialog.add(Evt.prompt || '选择获得一项技能');\r\n              var clickItem = function () {\r\n                _status.event._result = this.link;\r\n                game.resume();\r\n              };\r\n              for (i = 0; i < choice.length; i++) {\r\n                if (lib.translate[choice[i] + '_info']) {\r\n                  var translation = get.translation(choice[i]);\r\n                  if (translation[0] == '新' && translation.length == 3) {\r\n                    translation = translation.slice(1, 3);\r\n                  }\r\n                  else {\r\n                    translation = translation.slice(0, 2);\r\n                  }\r\n                  var item = Evt.dialog.add('<div class=\"popup pointerdiv\" style=\"width:80%;display:inline-block\"><div class=\"skill\">' +\r\n                    translation + '</div><div>' + lib.translate[choice[i] + '_info'] + '</div></div>');\r\n                  item.firstChild.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', clickItem);\r\n                  item.firstChild.link = choice[i];\r\n                }\r\n              }\r\n              Evt.dialog.add(ui.create.div('.placeholder'));\r\n              Evt.switchToAuto = function () {\r\n                Evt._result = Evt.skillai(Evt.choice);\r\n                game.resume();\r\n              };\r\n              if (Evt.isMine() || Evt.dialogdisplay) {\r\n                Evt.dialog.style.display = '';\r\n                Evt.dialog.open();\r\n              }\r\n              game.countChoose();\r\n              Evt.choosing = true;\r\n            }\r\n            else if (Evt.isOnline()) {\r\n              Evt.send();\r\n            }\r\n            else {\r\n              Evt._result = Evt.skillai(choice);\r\n            }\r\n          }, function () {\r\n            if (_status.connectMode) {\r\n              Evt.result = { bool: true, skill: result.control };\r\n            } else {\r\n              if (Evt.dialog) {\r\n                Evt.dialog.close();\r\n              }\r\n              Evt.choosing = false;\r\n              Evt.result = { bool: true, skill: result };\r\n            }\r\n          }],\r\n          /**\r\n           * 选择以获得一项技能\r\n           * @name content.chooseSkill\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Object} Evt.result 返回选择结果给父事件\r\n           */\r\n          chooseSkill: [function () {\r\n            var list;\r\n            if (typeof Evt.target == 'string') {\r\n              list = get.gainableSkillsName(Evt.target, Evt.func);\r\n            }\r\n            else {\r\n              list = Evt.target.getGainableSkills(Evt.func);\r\n            }\r\n            if (!list.length) {\r\n              Evt.finish();\r\n              Evt.result = { bool: false };\r\n              return;\r\n            }\r\n            Evt.skillai = function (list) {\r\n              return get.max(list, get.skillRank, 'item');\r\n            };\r\n            if (Evt.isMine()) {\r\n              var dialog = ui.create.dialog('forcebutton');\r\n              dialog.add(Evt.prompt || '选择获得一项技能');\r\n              _status.event.list = list;\r\n              var clickItem = function () {\r\n                _status.event._result = this.link;\r\n                game.resume();\r\n              };\r\n              for (i = 0; i < list.length; i++) {\r\n                if (lib.translate[list[i] + '_info']) {\r\n                  var translation = get.translation(list[i]);\r\n                  if (translation[0] == '新' && translation.length == 3) {\r\n                    translation = translation.slice(1, 3);\r\n                  }\r\n                  else {\r\n                    translation = translation.slice(0, 2);\r\n                  }\r\n                  var item = dialog.add('<div class=\"popup pointerdiv\" style=\"width:80%;display:inline-block\"><div class=\"skill\">' +\r\n                    translation + '</div><div>' + lib.translate[list[i] + '_info'] + '</div></div>');\r\n                  item.firstChild.addEventListener('click', clickItem);\r\n                  item.firstChild.link = list[i];\r\n                }\r\n              }\r\n              dialog.add(ui.create.div('.placeholder'));\r\n              Evt.dialog = dialog;\r\n              Evt.switchToAuto = function () {\r\n                Evt._result = Evt.skillai(Evt.list);\r\n                game.resume();\r\n              };\r\n              _status.imchoosing = true;\r\n              game.pause();\r\n            }\r\n            else {\r\n              Evt._result = Evt.skillai(list);\r\n            }\r\n          }, function () {\r\n            _status.imchoosing = false;\r\n            if (Evt.dialog) {\r\n              Evt.dialog.close();\r\n            }\r\n            Evt.result = { bool: true, skill: result };\r\n          }],\r\n          /**\r\n           * 选择以(获得|使用)牌\r\n           * @name content.chooseSkill\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Object} Evt.result 返回选择结果给父事件\r\n           */\r\n          discoverCard: [function () {\r\n            var num = Evt.num || 3;\r\n            var choice;\r\n            if (typeof Evt.list == 'string' || typeof Evt.list == 'function') {\r\n              choice = get.inpile(Evt.list).randomGets(num);\r\n            }\r\n            else if (Array.isArray(Evt.list)) {\r\n              choice = Evt.list.randomGets(num);\r\n            }\r\n            else {\r\n              choice = Array.from(Evt.list).randomGets(num);\r\n            }\r\n            if (choice.length) {\r\n              var prompt = Evt.prompt;\r\n              if (!prompt) {\r\n                prompt = '选择一张牌';\r\n                if (Evt.use) {\r\n                  prompt += '使用之';\r\n                }\r\n                else if (!Evt.nogain) {\r\n                  prompt += '获得之';\r\n                }\r\n              }\r\n              if (typeof choice[0] === 'string') {\r\n                var next = player.chooseVCardButton(choice, prompt, Evt.forced);\r\n                if (Evt.ai) {\r\n                  next.set('ai', Evt.ai);\r\n                }\r\n              }\r\n              else if (get.itemtype(choice[0]) == 'card') {\r\n                var next = player.chooseCardButton(choice, prompt, Evt.forced);\r\n                if (Evt.ai) {\r\n                  next.set('ai', Evt.ai);\r\n                }\r\n              }\r\n              else {\r\n                Evt.finish();\r\n              }\r\n            }\r\n            else {\r\n              Evt.finish();\r\n            }\r\n          }, function () {\r\n            Evt.result = {\r\n              bool: result.bool,\r\n              card: null,\r\n              choice: null\r\n            };\r\n            if (result.bool && result.links.length) {\r\n              var link = result.links[0];\r\n              var togain = null;\r\n              if (get.itemtype(link) == 'card') {\r\n                Evt.result.card = link;\r\n                togain = link;\r\n              }\r\n              else if (Array.isArray(link)) {\r\n                Evt.result.choice = link[2];\r\n                togain = game.createCard(link[2]);\r\n              }\r\n              if (togain) {\r\n                if (Evt.use) {\r\n                  player.chooseUseTarget(togain);\r\n                }\r\n                else if (!Evt.nogain) {\r\n                  player.gain(togain, 'draw');\r\n                  game.log(player, '获得了一张牌');\r\n                }\r\n              }\r\n            }\r\n          }],\r\n          /**\r\n           * 选择项(按钮)\r\n           * @name content.chooseButton\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Object} Evt.result 返回选择结果给父事件\r\n           */\r\n          chooseButton: [() => {\r\n            if (typeof Evt.dialog == 'number') {\r\n              Evt.dialog = get.idDialog(Evt.dialog);\r\n            }\r\n            if (Evt.createDialog && !Evt.dialog) {\r\n              if (Array.isArray(Evt.createDialog)) {\r\n                Evt.createDialog.add('hidden');\r\n                Evt.dialog = ui.create.dialog.apply(this, Evt.createDialog);\r\n              }\r\n              Evt.closeDialog = true;\r\n            }\r\n            if (Evt.dialog == undefined) Evt.dialog = ui.dialog;\r\n            if (Evt.isMine() || Evt.dialogdisplay) {\r\n              Evt.dialog.style.display = '';\r\n              Evt.dialog.open();\r\n            }\r\n            game.check();\r\n            if (Evt.isMine()) {\r\n              if (Evt.hsskill && !Evt.forced && _status.prehidden_skills.contains(Evt.hsskill)) {\r\n                ui.click.cancel();\r\n                return;\r\n              }\r\n              game.pause();\r\n            }\r\n            else if (Evt.isOnline()) {\r\n              Evt.send();\r\n              delete Evt.callback;\r\n            }\r\n            else {\r\n              Evt.result = 'ai';\r\n            }\r\n            if (Evt.onfree) {\r\n              lib.init.onfree();\r\n            }\r\n          }, () => {\r\n            if (Evt.result == 'ai') {\r\n              if (Evt.processAI) {\r\n                Evt.result = Evt.processAI();\r\n              }\r\n              else {\r\n                game.check();\r\n                if (ai.basic.chooseButton(Evt.ai) || forced) ui.click.ok();\r\n                else ui.click.cancel();\r\n              }\r\n            }\r\n            if (Evt.closeDialog) {\r\n              Evt.dialog.close();\r\n            }\r\n            if (Evt.callback) {\r\n              Evt.callback(Evt.player, Evt.result);\r\n            }\r\n            Evt.resume();\r\n          }],\r\n          /**\r\n           * 多人选择牌\r\n           * @name content.chooseCardOL\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Object} Evt.result 返回选择结果给父事件\r\n           */\r\n          chooseCardOL: [function () {\r\n            Evt.targets = Evt.list.slice(0);\r\n            if (!_status.connectMode) {\r\n              Evt.result = [];\r\n              Evt.goto(7);\r\n            }\r\n            else {\r\n              for (var i = 0; i < Evt.list.length; i++) {\r\n                var target = Evt.list[i];\r\n                target.wait();\r\n                if (target.isOnline()) {\r\n                  target.send(function (args, set) {\r\n                    game.me.chooseCard.apply(game.me, args).set(set);\r\n                    game.resume();\r\n                  }, Evt._args, Evt._set);\r\n                  Evt.list.splice(i--, 1);\r\n                }\r\n                else if (target == game.me) {\r\n                  Evt.withme = true;\r\n                  Evt.list.splice(i--, 1);\r\n                }\r\n              }\r\n            }\r\n          }, function () {\r\n            if (Evt.list.length) {\r\n              Evt.target = Evt.list.shift();\r\n              Evt.target.chooseCard.apply(Evt.target, Evt._args).set(Evt._set);\r\n            }\r\n            else {\r\n              Evt.goto(3);\r\n            }\r\n          }, function () {\r\n            Evt.target.unwait(result);\r\n            Evt.goto(1);\r\n          }, function () {\r\n            if (Evt.withme) {\r\n              game.me.chooseCard.apply(game.me, Evt._args).set(Evt._set);\r\n            }\r\n            else {\r\n              Evt.goto(5);\r\n            }\r\n          }, function () {\r\n            game.me.unwait(result);\r\n          }, function () {\r\n            if (!Evt.resultOL) {\r\n              game.pause();\r\n            }\r\n          }, function () {\r\n            Evt.result = [];\r\n            for (var i = 0; i < Evt.targets.length; i++) {\r\n              Evt.result[i] = Evt.resultOL[Evt.targets[i].playerid] || {};\r\n              if (Evt.result[i] == 'ai' && Evt.aiCard) {\r\n                Evt.result[i] = Evt.aiCard(Evt.targets[i]);\r\n              }\r\n            }\r\n            Evt.finish();\r\n          }, function () {\r\n            if (Evt.list.length) {\r\n              Evt.target = Evt.list.shift();\r\n              Evt.target.chooseCard.apply(Evt.target, Evt._args).set(Evt._set);\r\n            }\r\n            else {\r\n              for (var i = 0; i < Evt.targets.length; i++) {\r\n                if (!Evt.result[i]) {\r\n                  Evt.result[i] = {};\r\n                }\r\n              }\r\n              Evt.finish();\r\n            }\r\n          }, function () {\r\n            Evt.result[Evt.targets.indexOf(Evt.target)] = result;\r\n            Evt.goto(7);\r\n          }],\r\n          /**\r\n           * 多人选择项(按钮)\r\n           * @name content.chooseButtonOL\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Object} Evt.result 返回选择结果给父事件\r\n           */\r\n          chooseButtonOL: [function () {\r\n            ui.arena.classList.add('markhidden');\r\n            for (var i = 0; i < Evt.list.length; i++) {\r\n              var current = Evt.list[i];\r\n              current[0].wait();\r\n              if (current[0].isOnline()) {\r\n                var target = current.shift();\r\n                target.send(function (args, callback, switchToAuto, processAI) {\r\n                  ui.arena.classList.add('markhidden');\r\n                  var next = game.me.chooseButton.apply(game.me, args);\r\n                  next.callback = callback;\r\n                  next.switchToAuto = switchToAuto;\r\n                  next.processAI = processAI;\r\n                  next.complexSelect = true;\r\n                  game.resume();\r\n                }, current, Evt.callback, Evt.switchToAuto, Evt.processAI);\r\n                target._choose_button_ol = current;\r\n                Evt.list.splice(i--, 1);\r\n              }\r\n              else if (current[0] == game.me) {\r\n                Evt.last = current;\r\n                Evt.last.shift();\r\n                Evt.list.splice(i--, 1);\r\n              }\r\n            }\r\n          }, function () {\r\n            if (Evt.list.length) {\r\n              var current = Evt.list.shift();\r\n              if (current.length)\r\n                Evt.target = current.shift();\r\n              else {\r\n                Evt.target = current;\r\n                current = null;\r\n              }\r\n              var next = Evt.target.chooseButton.apply(Evt.target, current);\r\n              next.callback = Evt.callback;\r\n              next.switchToAuto = Evt.switchToAuto;\r\n              next.processAI = Evt.processAI;\r\n            }\r\n            else {\r\n              Evt.goto(3);\r\n            }\r\n          }, function () {\r\n            Evt.target.unwait(result);\r\n            Evt.goto(1);\r\n          }, function () {\r\n            if (Evt.last) {\r\n              var next = game.me.chooseButton.apply(game.me, Evt.last);\r\n              next.callback = Evt.callback;\r\n              next.switchToAuto = Evt.switchToAuto;\r\n              next.processAI = Evt.processAI;\r\n            }\r\n            else {\r\n              Evt.goto(5);\r\n            }\r\n          }, function () {\r\n            game.me.unwait(result);\r\n          }, function () {\r\n            if (!Evt.resultOL) {\r\n              game.pause();\r\n            }\r\n          }, function () {\r\n            game.broadcastAll(function () {\r\n              ui.arena.classList.remove('markhidden');\r\n            });\r\n            Evt.result = Evt.resultOL;\r\n          }],\r\n          /**\r\n           * 选择牌\r\n           * @name content.chooseCard\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Object} Evt.result 返回选择结果给父事件\r\n           */\r\n          chooseCard: [() => {\r\n            if (Evt.directresult) {\r\n              Evt.result = {\r\n                buttons: [],\r\n                cards: Evt.directresult.slice(0),\r\n                targets: [],\r\n                confirm: 'ok',\r\n                bool: true,\r\n                links: []\r\n              };\r\n            }\r\n            else {\r\n              game.check();\r\n              if (Evt.isMine()) {\r\n                game.pause();\r\n                if (Evt.hsskill && !Evt.forced && _status.prehidden_skills.contains(Evt.hsskill)) {\r\n                  ui.click.cancel();\r\n                  return;\r\n                }\r\n                if (Evt.prompt != false) {\r\n                  var str;\r\n                  if (typeof Evt.prompt == 'string') str = Evt.prompt;\r\n                  else {\r\n                    str = '请选择'\r\n                    var range = get.select(Evt.selectCard);\r\n                    if (range[0] == range[1]) str += get.cnNumber(range[0]);\r\n                    else if (range[1] == Infinity) str += '至少' + get.cnNumber(range[0]);\r\n                    else str += get.cnNumber(range[0]) + '至' + get.cnNumber(range[1]);\r\n                    str += '张';\r\n                    if (Evt.position == 'h' || Evt.position == undefined) str += '手';\r\n                    if (Evt.position == 'e') str += '装备';\r\n                    str += '牌';\r\n                  }\r\n                  Evt.dialog = ui.create.dialog(str);\r\n                  if (Evt.prompt2) {\r\n                    Evt.dialog.addText(Evt.prompt2, Evt.prompt2.length <= 20);\r\n                  }\r\n                  if (Array.isArray(Evt.promptx)) {\r\n                    for (var i = 0; i < Evt.promptx.length; i++) {\r\n                      Evt.dialog.add(Evt.promptx[i]);\r\n                    }\r\n                  }\r\n                  if (Array.isArray(Evt.selectCard)) {\r\n                    Evt.promptbar = Evt.dialog.add('0/' + get.numStr(Evt.selectCard[1], 'card'));\r\n                    Evt.custom.add.card = function () {\r\n                      _status.event.promptbar.innerHTML =\r\n                        ui.selected.cards.length + '/' + get.numStr(_status.event.selectCard[1], 'card');\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              else if (Evt.isOnline()) {\r\n                Evt.send();\r\n              }\r\n              else {\r\n                Evt.result = 'ai';\r\n              }\r\n            }\r\n          }, () => {\r\n            if (Evt.result == 'ai') {\r\n              game.check();\r\n              if (ai.basic.chooseCard(Evt.ai) || forced) {\r\n                ui.click.ok();\r\n              }\r\n              else if (Evt.skill) {\r\n                var skill = Evt.skill;\r\n                ui.click.cancel();\r\n                Evt._aiexclude.add(skill);\r\n                Evt.redo();\r\n                game.resume();\r\n              }\r\n              else {\r\n                ui.click.cancel();\r\n              }\r\n            }\r\n          }, () => {\r\n            Evt.resume();\r\n            if (Evt.glow_result && Evt.result.cards && !Evt.directresult) {\r\n              for (var i = 0; i < Evt.result.cards.length; i++) {\r\n                Evt.result.cards[i].classList.add('glow');\r\n              }\r\n            }\r\n            if (Evt.dialog) Evt.dialog.close();\r\n          }],\r\n          /**\r\n           * 选择角色对象\r\n           * @name content.chooseTarget\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Object} Evt.result 返回选择结果给父事件\r\n           */\r\n          chooseTarget: [() => {\r\n            if (Evt.isMine()) {\r\n              if (Evt.hsskill && !Evt.forced && _status.prehidden_skills.contains(Evt.hsskill)) {\r\n                ui.click.cancel();\r\n                return;\r\n              }\r\n              game.check();\r\n              game.pause();\r\n              if (Evt.createDialog && !Evt.dialog && Array.isArray(Evt.createDialog)) {\r\n                Evt.dialog = ui.create.dialog.apply(this, Evt.createDialog);\r\n              }\r\n              else if (Evt.prompt != false) {\r\n                var str;\r\n                if (typeof Evt.prompt == 'string') str = Evt.prompt;\r\n                else {\r\n                  str = '请选择'\r\n                  var range = get.select(Evt.selectTarget);\r\n                  if (range[0] == range[1]) str += get.cnNumber(range[0]);\r\n                  else if (range[1] == Infinity) str += '至少' + get.cnNumber(range[0]);\r\n                  else str += get.cnNumber(range[0]) + '至' + get.cnNumber(range[1]);\r\n                  str += '个目标';\r\n                }\r\n                Evt.dialog = ui.create.dialog(str);\r\n                if (Evt.prompt2) {\r\n                  Evt.dialog.addText(Evt.prompt2, Evt.prompt2.length <= 20);\r\n                }\r\n                if (Evt.promptbar != 'none') {\r\n                  Evt.promptbar = Evt.dialog.add('0/' + get.numStr(get.select(Evt.selectTarget)[1], 'target'));\r\n                  Evt.custom.add.target = function () {\r\n                    _status.event.promptbar.innerHTML =\r\n                      ui.selected.targets.length + '/' + get.numStr(get.select(Evt.selectTarget)[1], 'target');\r\n                  }\r\n                }\r\n              }\r\n              else if (get.itemtype(Evt.dialog) == 'dialog') {\r\n                Evt.dialog.open();\r\n              }\r\n            }\r\n            else if (Evt.isOnline()) {\r\n              Evt.send();\r\n            }\r\n            else {\r\n              Evt.result = 'ai';\r\n            }\r\n          }, () => {\r\n            if (Evt.result == 'ai') {\r\n              game.check();\r\n              if (ai.basic.chooseTarget(Evt.ai) || forced) {\r\n                ui.click.ok();\r\n              }\r\n              else {\r\n                ui.click.cancel();\r\n              }\r\n            }\r\n            if (Evt.result.bool && Evt.animate !== false) {//play anim\r\n              for (var i = 0; i < Evt.result.targets.length; i++) {\r\n                Evt.result.targets[i].animate('target');\r\n              }\r\n            }\r\n            if (Evt.dialog) Evt.dialog.close();\r\n            Evt.resume();\r\n          }, () => {\r\n            if (Evt.onresult) {\r\n              Evt.onresult(Evt.result);\r\n            }\r\n            if (Evt.result.bool && Evt.autodelay && !Evt.isMine()) {\r\n              if (typeof Evt.autodelay == 'number') {\r\n                game.delayx(Evt.autodelay);\r\n              }\r\n              else {\r\n                game.delayx();\r\n              }\r\n            }\r\n          }],\r\n          /**\r\n           * 选择卡牌和目标角色\r\n           * @name content.chooseCardTarget\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Object} Evt.result 返回选择结果给父事件\r\n           */\r\n          chooseCardTarget: [() => {\r\n            if (Evt.isMine()) {\r\n              if (Evt.hsskill && !Evt.forced && _status.prehidden_skills.contains(Evt.hsskill)) {\r\n                ui.click.cancel();\r\n                return;\r\n              }\r\n              game.check();\r\n              game.pause();\r\n              if (Evt.prompt != false) {\r\n                Evt.dialog = ui.create.dialog(Evt.prompt || '请选择卡牌和目标');\r\n                if (Evt.prompt2) {\r\n                  Evt.dialog.addText(Evt.prompt2, Evt.prompt2.length <= 20);\r\n                }\r\n              }\r\n            }\r\n            else if (Evt.isOnline()) {\r\n              Evt.send();\r\n            }\r\n            else {\r\n              Evt.result = 'ai';\r\n            }\r\n          }, () => {\r\n            if (Evt.result == 'ai') {\r\n              game.check();\r\n              if (ai.basic.chooseCard(Evt.ai1)) {\r\n                if (ai.basic.chooseTarget(Evt.ai2)) {\r\n                  ui.click.ok();\r\n                  _status.event._aiexclude.length = 0;\r\n                }\r\n                else {\r\n                  get.card(true).aiexclude();\r\n                  game.uncheck();\r\n                  Evt.redo();\r\n                  game.resume();\r\n                }\r\n              }\r\n              else {\r\n                ui.click.cancel();\r\n              }\r\n            }\r\n          }, () => {\r\n            Evt.resume();\r\n            if (Evt.result.bool && Evt.animate !== false) {\r\n              for (var i = 0; i < Evt.result.targets.length; i++) {\r\n                Evt.result.targets[i].animate('target');\r\n              }\r\n            }\r\n            if (Evt.dialog) Evt.dialog.close();\r\n          }],\r\n          /**\r\n           * 选择项(列表项)\r\n           * @name content.chooseControl\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Object} Evt.result 返回选择结果给父事件\r\n           */\r\n          chooseControl: [() => {\r\n            if (Evt.controls.length == 0) {\r\n              if (Evt.sortcard) {\r\n                var sortnum = 2;\r\n                if (Evt.sorttop) {\r\n                  sortnum = 1;\r\n                }\r\n                for (var i = 0; i < Evt.sortcard.length + sortnum; i++) {\r\n                  Evt.controls.push(get.cnNumber(i, true));\r\n                }\r\n              }\r\n              else if (Evt.choiceList) {\r\n                for (var i = 0; i < Evt.choiceList.length; i++) {\r\n                  Evt.controls.push('选项' + get.cnNumber(i + 1, true));\r\n                }\r\n              }\r\n              else {\r\n                Evt.finish();\r\n                return;\r\n              }\r\n            }\r\n            else if (Evt.choiceList && Evt.controls.length == 1 && Evt.controls[0] == 'cancel2') {\r\n              Evt.controls.shift();\r\n              for (var i = 0; i < Evt.choiceList.length; i++) {\r\n                Evt.controls.push('选项' + get.cnNumber(i + 1, true));\r\n              }\r\n              Evt.controls.push('cancel2');\r\n            }\r\n            if (Evt.isMine()) {\r\n              if (Evt.arrangeSkill) {\r\n                var hidden = player.hiddenSkills.slice(0);\r\n                game.expandSkills(hidden);\r\n                if (hidden.length) {\r\n                  for (var i of Evt.controls) {\r\n                    if (_status.prehidden_skills.contains(i) && hidden.contains(i)) {\r\n                      Evt.result = {\r\n                        bool: true,\r\n                        control: i,\r\n                      }\r\n                      return;\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              else if (Evt.hsskill && _status.prehidden_skills.contains(Evt.hsskill) && Evt.controls.contains('cancel2')) {\r\n                Evt.result = {\r\n                  bool: true,\r\n                  control: 'cancel2',\r\n                }\r\n                return;\r\n              }\r\n              if (Evt.sortcard) {\r\n                var prompt = Evt.prompt || '选择一个位置';\r\n                if (Evt.tosort) {\r\n                  prompt += '放置' + get.translation(Evt.tosort);\r\n                }\r\n                Evt.dialog = ui.create.dialog(prompt, 'hidden');\r\n                if (Evt.sortcard && Evt.sortcard.length) {\r\n                  Evt.dialog.addSmall(Evt.sortcard);\r\n                }\r\n                else {\r\n                  Evt.dialog.buttons = [];\r\n                  Evt.dialog.add(ui.create.div('.buttons'));\r\n                }\r\n                var buttons = Evt.dialog.content.lastChild;\r\n                var sortnum = 2;\r\n                if (Evt.sorttop) {\r\n                  sortnum = 1;\r\n                }\r\n                for (var i = 0; i < Evt.dialog.buttons.length + sortnum; i++) {\r\n                  var item = ui.create.div('.button.card.pointerdiv.mebg');\r\n                  item.style.width = '50px';\r\n                  buttons.insertBefore(item, Evt.dialog.buttons[i]);\r\n                  item.innerHTML = '<div style=\"font-family: xinwei;font-size: 25px;height: 75px;line-height: 25px;top: 8px;left: 10px;width: 30px;\">第' + get.cnNumber(i + 1, true) + '张</div>';\r\n                  if (i == Evt.dialog.buttons.length + 1) {\r\n                    item.firstChild.innerHTML = '牌堆底';\r\n                  }\r\n                  item.link = get.cnNumber(i, true);\r\n                  item.listen(ui.click.dialogcontrol);\r\n                }\r\n\r\n                Evt.dialog.forcebutton = true;\r\n                Evt.dialog.classList.add('forcebutton');\r\n                Evt.dialog.open();\r\n              }\r\n              else if (Evt.dialogcontrol) {\r\n                Evt.dialog = ui.create.dialog(Evt.prompt || '选择一项', 'hidden');\r\n                for (var i = 0; i < Evt.controls.length; i++) {\r\n                  var item = Evt.dialog.add('<div class=\"popup text pointerdiv\" style=\"width:calc(100% - 10px);display:inline-block\">' + Evt.controls[i] + '</div>');\r\n                  item.firstChild.listen(ui.click.dialogcontrol);\r\n                  item.firstChild.link = Evt.controls[i];\r\n                }\r\n                Evt.dialog.forcebutton = true;\r\n                Evt.dialog.classList.add('forcebutton');\r\n                if (Evt.addDialog) {\r\n                  for (var i = 0; i < Evt.addDialog.length; i++) {\r\n                    if (get.itemtype(Evt.addDialog[i]) == 'cards') {\r\n                      Evt.dialog.addSmall(Evt.addDialog[i]);\r\n                    }\r\n                    else {\r\n                      Evt.dialog.add(Evt.addDialog[i]);\r\n                    }\r\n                  }\r\n                  Evt.dialog.add(ui.create.div('.placeholder.slim'));\r\n                }\r\n                Evt.dialog.open();\r\n              }\r\n              else {\r\n                if (Evt.seperate || lib.config.seperate_control) {\r\n                  Evt.controlbars = [];\r\n                  for (var i = 0; i < Evt.controls.length; i++) {\r\n                    Evt.controlbars.push(ui.create.control([Evt.controls[i]]));\r\n                  }\r\n                }\r\n                else {\r\n                  Evt.controlbar = ui.create.control(Evt.controls);\r\n                }\r\n                if (Evt.dialog) {\r\n                  if (Array.isArray(Evt.dialog)) {\r\n                    Evt.dialog = ui.create.dialog.apply(this, Evt.dialog);\r\n                  }\r\n                  Evt.dialog.open();\r\n                }\r\n                else if (Evt.choiceList) {\r\n                  Evt.dialog = ui.create.dialog(Evt.prompt || '选择一项', 'hidden');\r\n                  Evt.dialog.forcebutton = true;\r\n                  Evt.dialog.open();\r\n                  for (var i = 0; i < Evt.choiceList.length; i++) {\r\n                    Evt.dialog.add('<div class=\"popup text\" style=\"width:calc(100% - 10px);display:inline-block\">选项' +\r\n                      get.cnNumber(i + 1, true) + '：' + Evt.choiceList[i] + '</div>');\r\n                  }\r\n                }\r\n                else if (Evt.prompt) {\r\n                  Evt.dialog = ui.create.dialog(Evt.prompt);\r\n                  if (Evt.prompt2) {\r\n                    Evt.dialog.addText(Evt.prompt2, Evt.prompt2.length <= 20 || Evt.centerprompt2);\r\n                  }\r\n                }\r\n              }\r\n              game.pause();\r\n              game.countChoose();\r\n              Evt.choosing = true;\r\n            }\r\n            else if (Evt.isOnline()) {\r\n              Evt.send();\r\n            }\r\n            else {\r\n              Evt.result = 'ai';\r\n            }\r\n          }, () => {\r\n            if (Evt.result == 'ai') {\r\n              Evt.result = {};\r\n              if (Evt.ai) {\r\n                var result = Evt.ai(Evt.getParent(), player);\r\n                if (typeof result == 'number') Evt.result.control = Evt.controls[result];\r\n                else Evt.result.control = result;\r\n              }\r\n              else Evt.result.control = Evt.controls[Evt.choice];\r\n            }\r\n            Evt.result.index = Evt.controls.indexOf(Evt.result.control);\r\n            Evt.choosing = false;\r\n            _status.imchoosing = false;\r\n            if (Evt.dialog && Evt.dialog.close) Evt.dialog.close();\r\n            if (Evt.controlbar) Evt.controlbar.close();\r\n            if (Evt.controlbars) {\r\n              for (var i = 0; i < Evt.controlbars.length; i++) {\r\n                Evt.controlbars[i].close();\r\n              }\r\n            }\r\n            Evt.resume();\r\n          }],\r\n          /**\r\n           * 确认项(确认|取消)\r\n           * @name content.chooseBool\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Object} Evt.result 返回选择结果给父事件\r\n           */\r\n          chooseBool: [() => {\r\n            if (Evt.isMine()) {\r\n              if (Evt.frequentSkill && !lib.config.autoskilllist.contains(Evt.frequentSkill)) {\r\n                ui.click.ok();\r\n                return;\r\n              }\r\n              else if (Evt.hsskill && _status.prehidden_skills.contains(Evt.hsskill)) {\r\n                ui.click.cancel();\r\n                return;\r\n              }\r\n              ui.create.confirm('oc');\r\n              if (Evt.createDialog && !Evt.dialog) {\r\n                if (Array.isArray(Evt.createDialog)) {\r\n                  Evt.dialog = ui.create.dialog.apply(this, Evt.createDialog);\r\n                  if (Evt.dialogselectx) {\r\n                    for (var i = 0; i < Evt.dialog.buttons.length; i++) {\r\n                      Evt.dialog.buttons[i].classList.add('selectedx');\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              if (Evt.dialog) {\r\n                Evt.dialog.open();\r\n              }\r\n              else if (Evt.prompt) {\r\n                Evt.dialog = ui.create.dialog(Evt.prompt);\r\n                if (Evt.prompt2) {\r\n                  Evt.dialog.addText(Evt.prompt2, Evt.prompt2.length <= 20);\r\n                }\r\n              }\r\n              game.pause();\r\n              game.countChoose();\r\n              Evt.choosing = true;\r\n            }\r\n            else if (Evt.isOnline()) {\r\n              Evt.send();\r\n            }\r\n            else {\r\n              Evt.result = 'ai';\r\n            }\r\n          }, () => {\r\n            if (Evt.result == 'ai') {\r\n              if (Evt.ai) {\r\n                Evt.choice = Evt.ai(Evt.getParent(), player);\r\n              }\r\n              Evt.result = { bool: Evt.choice };\r\n            }\r\n            _status.imchoosing = false;\r\n            Evt.choosing = false;\r\n            if (Evt.dialog) Evt.dialog.close();\r\n            Evt.resume();\r\n          }],\r\n          /**\r\n           * 选择(摸牌|回血)\r\n           * @name content.chooseDrawRecover\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Object} Evt.result 返回选择结果给父事件\r\n           */\r\n          chooseDrawRecover: [function () {\r\n            if (player.isHealthy() && Evt.forced) {\r\n              player.draw(Evt.num1);\r\n              Evt.finish();\r\n              return;\r\n            }\r\n            var controls = ['draw_card'];\r\n            if (player.isDamaged()) {\r\n              Evt.num2 = Math.min(Evt.num2, player.maxHp - player.hp);\r\n              controls.push('recover_hp');\r\n            }\r\n            if (!Evt.forced) {\r\n              controls.push('cancel2');\r\n            }\r\n            var prompt = Evt.prompt;\r\n            if (!prompt) {\r\n              if (player.isHealthy()) {\r\n                prompt = '是否摸' + get.cnNumber(Evt.num1) + '张牌？';\r\n              }\r\n              else {\r\n                prompt = '摸' + get.cnNumber(Evt.num1) + '张牌或回复' + get.cnNumber(Evt.num2) + '点' + get.translation('hp');\r\n              }\r\n            }\r\n            var next = player.chooseControl(controls);\r\n            next.set('prompt', prompt);\r\n            if (Evt.hsskill) next.setHiddenSkill(Evt.hsskill);\r\n            if (Evt.ai) {\r\n              next.set('ai', Evt.ai);\r\n            }\r\n            else {\r\n              var choice;\r\n              if (player.isDamaged() && get.recoverEffect(player) > 0 && (\r\n                player.hp == 1 || player.needsToDiscard() ||\r\n                player.hasSkillTag('maixie_hp') || Evt.num2 > Evt.num1 ||\r\n                (Evt.num2 == Evt.num1 && player.needsToDiscard(1))\r\n              )) {\r\n                choice = 'recover_hp';\r\n              }\r\n              else {\r\n                choice = 'draw_card';\r\n              }\r\n              next.set('ai', function () {\r\n                return _status.event.choice;\r\n              });\r\n              next.set('choice', choice);\r\n            }\r\n          }, function () {\r\n            if (result.control != 'cancel2') {\r\n              if (Evt.logSkill) {\r\n                if (typeof Evt.logSkill == 'string') {\r\n                  player.logSkill(Evt.logSkill);\r\n                }\r\n                else if (Array.isArray(Evt.logSkill)) {\r\n                  player.logSkill.apply(player, Evt.logSkill);\r\n                }\r\n              }\r\n              if (result.control == 'draw_card') {\r\n                player.draw(Evt.num1);\r\n              }\r\n              else {\r\n                player.recover(Evt.num2);\r\n              }\r\n            }\r\n            Evt.result = result;\r\n          }],\r\n          /**\r\n           * 从目标角色选择牌\r\n           * @name content.choosePlayerCard\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Object} Evt.result 返回选择结果给父事件\r\n           */\r\n          choosePlayerCard: [() => {\r\n            if (!Evt.dialog) Evt.dialog = ui.create.dialog('hidden');\r\n            else if (!Evt.isMine) {\r\n              Evt.dialog.style.display = 'none';\r\n            }\r\n            if (Evt.prompt) {\r\n              Evt.dialog.add(Evt.prompt);\r\n            }\r\n            else {\r\n              Evt.dialog.add('选择' + get.translation(target) + '的一张牌');\r\n            }\r\n            if (Evt.prompt2) {\r\n              Evt.dialog.addText(Evt.prompt2);\r\n            }\r\n            var directh = (!lib.config.unauto_choose && !Evt.complexSelect);\r\n            directh = game.showPlayerCard(Evt, target, directh, null);\r\n            if (Evt.dialog.buttons.length == 0) {\r\n              Evt.finish();\r\n              return;\r\n            }\r\n            var cs = target.getCards(Evt.position);\r\n            var select = get.select(Evt.selectButton);\r\n            if (Evt.forced && select[0] >= cs.length) {\r\n              Evt.result = {\r\n                bool: true,\r\n                buttons: Evt.dialog.buttons,\r\n                links: cs\r\n              }\r\n            }\r\n            else if (Evt.forced && directh && !Evt.isOnline() && select[0] == select[1]) {\r\n              Evt.result = {\r\n                bool: true,\r\n                buttons: Evt.dialog.buttons.randomGets(select[0]),\r\n                links: []\r\n              }\r\n              for (var i = 0; i < Evt.result.buttons.length; i++) {\r\n                Evt.result.links[i] = Evt.result.buttons[i].link;\r\n              }\r\n            }\r\n            else {\r\n              if (Evt.isMine()) {\r\n                if (Evt.hsskill && !Evt.forced && _status.prehidden_skills.contains(Evt.hsskill)) {\r\n                  ui.click.cancel();\r\n                  return;\r\n                }\r\n                Evt.dialog.open();\r\n                game.check();\r\n                game.pause();\r\n              }\r\n              else if (Evt.isOnline()) {\r\n                Evt.send();\r\n              }\r\n              else {\r\n                Evt.result = 'ai';\r\n              }\r\n            }\r\n          }, () => {\r\n            if (Evt.result == 'ai') {\r\n              game.check();\r\n              if (ai.basic.chooseButton(Evt.ai) || forced) ui.click.ok();\r\n              else ui.click.cancel();\r\n            }\r\n            Evt.dialog.close();\r\n            if (Evt.result.links) {\r\n              Evt.result.cards = Evt.result.links.slice(0);\r\n            }\r\n            Evt.resume();\r\n          }],\r\n          /**\r\n           * 从目标角色选择牌弃置\r\n           * @name content.discardPlayerCard\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Object} Evt.result 返回选择结果给父事件\r\n           */\r\n          discardPlayerCard: [() => {\r\n            if (Evt.directresult) {\r\n              Evt.result = {\r\n                buttons: [],\r\n                cards: Evt.directresult.slice(0),\r\n                links: Evt.directresult.slice(0),\r\n                targets: [],\r\n                confirm: 'ok',\r\n                bool: true\r\n              };\r\n              Evt.cards = Evt.directresult.slice(0);\r\n              Evt.goto(2);\r\n              return;\r\n            }\r\n            if (!Evt.dialog) Evt.dialog = ui.create.dialog('hidden');\r\n            else if (!Evt.isMine) {\r\n              Evt.dialog.style.display = 'none';\r\n            }\r\n            if (Evt.prompt == undefined) {\r\n              var str = '弃置' + get.translation(target);\r\n              var range = get.select(Evt.selectButton);\r\n              if (range[0] == range[1]) str += get.cnNumber(range[0]);\r\n              else if (range[1] == Infinity) str += '至少' + get.cnNumber(range[0]);\r\n              else str += get.cnNumber(range[0]) + '至' + get.cnNumber(range[1]);\r\n              str += '张';\r\n              if (Evt.position == 'h' || Evt.position == undefined) str += '手';\r\n              if (Evt.position == 'e') str += '装备';\r\n              str += '牌';\r\n              Evt.prompt = str;\r\n            }\r\n            if (Evt.prompt) {\r\n              Evt.dialog.add(Evt.prompt);\r\n            }\r\n            if (Evt.prompt2) {\r\n              Evt.dialog.addText(Evt.prompt2);\r\n            }\r\n            var directh = (!lib.config.unauto_choose && !Evt.complexSelect);\r\n            directh = game.showPlayerCard(Evt, target, directh, 'canBeDiscarded');\r\n            if (Evt.dialog.buttons.length == 0) {\r\n              Evt.finish();\r\n              return;\r\n            }\r\n            var cs = target.getCards(Evt.position);\r\n            var select = get.select(Evt.selectButton);\r\n            if (Evt.forced && select[0] >= cs.length) {\r\n              Evt.result = {\r\n                bool: true,\r\n                buttons: Evt.dialog.buttons,\r\n                links: cs\r\n              }\r\n            }\r\n            else if (Evt.forced && directh && !Evt.isOnline() && select[0] == select[1]) {\r\n              Evt.result = {\r\n                bool: true,\r\n                buttons: Evt.dialog.buttons.randomGets(select[0]),\r\n                links: []\r\n              }\r\n              for (var i = 0; i < Evt.result.buttons.length; i++) {\r\n                Evt.result.links[i] = Evt.result.buttons[i].link;\r\n              }\r\n            }\r\n            else {\r\n              if (Evt.isMine()) {\r\n                Evt.dialog.open();\r\n                game.check();\r\n                game.pause();\r\n              }\r\n              else if (Evt.isOnline()) {\r\n                Evt.send();\r\n              }\r\n              else {\r\n                Evt.result = 'ai';\r\n              }\r\n            }\r\n          }, () => {\r\n            if (Evt.result == 'ai') {\r\n              game.check();\r\n              if (ai.basic.chooseButton(Evt.ai) || forced) ui.click.ok();\r\n              else ui.click.cancel();\r\n            }\r\n            Evt.dialog.close();\r\n          }, () => {\r\n            Evt.resume();\r\n            if (Evt.result.bool && Evt.result.links && !game.online) {\r\n              if (Evt.logSkill) {\r\n                if (typeof Evt.logSkill == 'string') {\r\n                  player.logSkill(Evt.logSkill);\r\n                }\r\n                else if (Array.isArray(Evt.logSkill)) {\r\n                  player.logSkill.apply(player, Evt.logSkill);\r\n                }\r\n              }\r\n              var cards = [];\r\n              for (var i = 0; i < Evt.result.links.length; i++) {\r\n                cards.push(Evt.result.links[i]);\r\n              }\r\n              Evt.result.cards = Evt.result.links.slice(0);\r\n              Evt.cards = cards;\r\n              Evt.trigger(\"rewriteDiscardResult\");\r\n            }\r\n          }, () => {\r\n            if (Evt.boolline) {\r\n              player.line(target, 'green');\r\n            }\r\n            if (!Evt.chooseonly) {\r\n              var next = target.discard(Evt.cards);\r\n              if (player != target) next.notBySelf = true;\r\n              Evt.done = next;\r\n              if (Evt.delay === false) {\r\n                next.set('delay', false);\r\n              }\r\n            }\r\n          }],\r\n          /**\r\n           * 从目标角色选择牌获得\r\n           * @name content.gainPlayerCard\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Object} Evt.result 返回选择结果给父事件\r\n           */\r\n          gainPlayerCard: [() => {\r\n            if (Evt.directresult) {\r\n              Evt.result = {\r\n                buttons: [],\r\n                cards: Evt.directresult.slice(0),\r\n                links: Evt.directresult.slice(0),\r\n                targets: [],\r\n                confirm: 'ok',\r\n                bool: true\r\n              };\r\n              Evt.cards = Evt.directresult.slice(0);\r\n              Evt.goto(2);\r\n              return;\r\n            }\r\n            if (!Evt.dialog) Evt.dialog = ui.create.dialog('hidden');\r\n            else if (!Evt.isMine) {\r\n              Evt.dialog.style.display = 'none';\r\n            }\r\n            if (Evt.prompt == undefined) {\r\n              var str = '获得' + get.translation(target);\r\n              var range = get.select(Evt.selectButton);\r\n              if (range[0] == range[1]) str += get.cnNumber(range[0]);\r\n              else if (range[1] == Infinity) str += '至少' + get.cnNumber(range[0]);\r\n              else str += get.cnNumber(range[0]) + '至' + get.cnNumber(range[1]);\r\n              str += '张';\r\n              if (Evt.position == 'h' || Evt.position == undefined) str += '手';\r\n              if (Evt.position == 'e') str += '装备';\r\n              str += '牌';\r\n              Evt.prompt = str;\r\n            }\r\n            if (Evt.prompt) {\r\n              Evt.dialog.add(Evt.prompt);\r\n            }\r\n            if (Evt.prompt2) {\r\n              Evt.dialog.addText(Evt.prompt2);\r\n            }\r\n            var directh = (!lib.config.unauto_choose && !Evt.complexSelect);\r\n            directh = game.showPlayerCard(Evt, target, directh, 'canBeGained');\r\n            if (Evt.dialog.buttons.length == 0) {\r\n              Evt.dialog.close();\r\n              Evt.finish();\r\n              return;\r\n            }\r\n            var cs = target.getCards(Evt.position);\r\n            var select = get.select(Evt.selectButton);\r\n            if (Evt.forced && select[0] >= cs.length) {\r\n              Evt.result = {\r\n                bool: true,\r\n                buttons: Evt.dialog.buttons,\r\n                links: cs\r\n              }\r\n            }\r\n            else if (Evt.forced && directh && !Evt.isOnline() && select[0] == select[1]) {\r\n              Evt.result = {\r\n                bool: true,\r\n                buttons: Evt.dialog.buttons.randomGets(select[0]),\r\n                links: []\r\n              }\r\n              for (var i = 0; i < Evt.result.buttons.length; i++) {\r\n                Evt.result.links[i] = Evt.result.buttons[i].link;\r\n              }\r\n            }\r\n            else {\r\n              if (Evt.isMine()) {\r\n                Evt.dialog.open();\r\n                game.check();\r\n                game.pause();\r\n              }\r\n              else if (Evt.isOnline()) {\r\n                Evt.send();\r\n              }\r\n              else {\r\n                Evt.result = 'ai';\r\n              }\r\n            }\r\n          }, () => {\r\n            if (Evt.result == 'ai') {\r\n              game.check();\r\n              if (ai.basic.chooseButton(Evt.ai) || forced) ui.click.ok();\r\n              else ui.click.cancel();\r\n            }\r\n            Evt.dialog.close();\r\n          }, () => {\r\n            Evt.resume();\r\n            if (game.online || !Evt.result.bool) {\r\n              Evt.finish();\r\n            }\r\n          }, () => {\r\n            if (Evt.logSkill && Evt.result.bool && !game.online) {\r\n              if (typeof Evt.logSkill == 'string') {\r\n                player.logSkill(Evt.logSkill);\r\n              }\r\n              else if (Array.isArray(Evt.logSkill)) {\r\n                player.logSkill.apply(player, Evt.logSkill);\r\n              }\r\n            }\r\n            var cards = [];\r\n            for (var i = 0; i < Evt.result.links.length; i++) {\r\n              cards.push(Evt.result.links[i]);\r\n            }\r\n            Evt.result.cards = Evt.result.links.slice(0);\r\n            Evt.cards = cards;\r\n            Evt.trigger(\"rewriteGainResult\");\r\n          }, () => {\r\n            if (Evt.boolline) {\r\n              player.line(target, 'green');\r\n            }\r\n            if (!Evt.chooseonly) {\r\n              if (Evt.delay !== false) {\r\n                var next = player.gain(Evt.cards, target, Evt.visibleMove ? 'give' : 'giveAuto', 'bySelf');\r\n                Evt.done = next;\r\n              }\r\n              else {\r\n                var next = player.gain(Evt.cards, target, 'bySelf');\r\n                Evt.done = next;\r\n                target[Evt.visibleMove ? '$give' : '$giveAuto'](cards, player);\r\n                if (Evt.visibleMove) next.visible = true;\r\n              }\r\n            }\r\n            else target[Evt.visibleMove ? '$give' : '$giveAuto'](cards, player);\r\n          }],\r\n          /**\r\n           * 展示角色手牌\r\n           * @name content.showHandcards\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          showHandcards: [() => {\r\n            if (player.countCards('h') == 0) {\r\n              Evt.finish();\r\n              return;\r\n            }\r\n            var cards = player.getCards('h');\r\n            var str = get.translation(player.name) + '的手牌';\r\n            if (typeof Evt.prompt == 'string') {\r\n              str = Evt.prompt;\r\n            }\r\n            Evt.dialog = ui.create.dialog(str, cards);\r\n            Evt.dialogid = lib.status.videoId++;\r\n            Evt.dialog.videoId = Evt.dialogid;\r\n            game.broadcast(function (str, cards, id) {\r\n              ui.create.dialog(str, cards).videoId = id;\r\n            }, str, cards, Evt.dialogid);\r\n            game.log(player, '展示了', cards);\r\n            game.addVideo('showCards', player, [str, get.cardsInfo(cards)]);\r\n            game.delayx(2);\r\n          }, () => {\r\n            game.broadcast('closeDialog', Evt.dialogid);\r\n            Evt.dialog.close();\r\n          }],\r\n          /**\r\n           * 展示角色的牌\r\n           * @name content.showHandcards\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          showCards: [() => {\r\n            if (get.itemtype(cards) != 'cards') {\r\n              Evt.finish();\r\n              return;\r\n            }\r\n            if (!Evt.str) {\r\n              Evt.str = get.translation(player.name) + '展示的牌';\r\n            }\r\n            Evt.dialog = ui.create.dialog(Evt.str, cards);\r\n            Evt.dialogid = lib.status.videoId++;\r\n            Evt.dialog.videoId = Evt.dialogid;\r\n\r\n            if (Evt.hiddencards) {\r\n              for (var i = 0; i < Evt.dialog.buttons.length; i++) {\r\n                if (Evt.hiddencards.contains(Evt.dialog.buttons[i].link)) {\r\n                  Evt.dialog.buttons[i].className = 'button card';\r\n                  Evt.dialog.buttons[i].innerHTML = '';\r\n                }\r\n              }\r\n            }\r\n            game.broadcast(function (str, cards, cards2, id) {\r\n              var dialog = ui.create.dialog(str, cards);\r\n              dialog.forcebutton = true;\r\n              dialog.videoId = id;\r\n              if (cards2) {\r\n                for (var i = 0; i < dialog.buttons.length; i++) {\r\n                  if (cards2.contains(dialog.buttons[i].link)) {\r\n                    dialog.buttons[i].className = 'button card';\r\n                    dialog.buttons[i].innerHTML = '';\r\n                  }\r\n                }\r\n              }\r\n            }, Evt.str, cards, Evt.hiddencards, Evt.dialogid);\r\n            if (Evt.hiddencards) {\r\n              var cards2 = cards.slice(0);\r\n              for (var i = 0; i < Evt.hiddencards.length; i++) {\r\n                cards2.remove(Evt.hiddencards[i]);\r\n              }\r\n              game.log(player, '展示了', cards2);\r\n            }\r\n            else {\r\n              game.log(player, '展示了', cards);\r\n            }\r\n            game.delayx(2);\r\n            game.addVideo('showCards', player, [Evt.str, get.cardsInfo(cards)]);\r\n          }, () => {\r\n            game.broadcast('closeDialog', Evt.dialogid);\r\n            Evt.dialog.close();\r\n          }],\r\n          /**\r\n           * 查看牌\r\n           * @name content.showHandcards\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          viewCards: [() => {\r\n            if (player == game.me) {\r\n              Evt.dialog = ui.create.dialog(Evt.str, Evt.cards);\r\n              if (Evt.isMine()) {\r\n                game.pause();\r\n                ui.create.confirm('o');\r\n                game.countChoose();\r\n                Evt.choosing = true;\r\n              }\r\n              else {\r\n                Evt.finish();\r\n                Evt.result = 'viewed';\r\n                setTimeout(function () {\r\n                  Evt.dialog.close();\r\n                }, 2 * lib.config.duration);\r\n                game.delayx(2);\r\n              }\r\n            }\r\n            else if (Evt.isOnline()) {\r\n              Evt.send();\r\n            }\r\n            else {\r\n              Evt.finish();\r\n            }\r\n          }, () => {\r\n            Evt.result = 'viewed';\r\n            _status.imchoosing = false;\r\n            Evt.choosing = false;\r\n            if (Evt.dialog) Evt.dialog.close();\r\n          }],\r\n          /**\r\n           * 移动牌位置\r\n           * @name content.moveCard\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Object} Evt.result 返回选择结果给父事件\r\n           */\r\n          moveCard: [function () {\r\n            if (!player.canMoveCard(null, Evt.nojudge, Evt.moveHandcard)) {\r\n              Evt.finish();\r\n              return;\r\n            }\r\n            var next = player.chooseTarget(2, function (card, player, target) {\r\n              if (_status.event.sourceFilterTarget && typeof _status.event.sourceFilterTarget == 'function') {\r\n                if (!_status.event.sourceFilterTarget(card, player, target)) return false;\r\n              }\r\n              if (ui.selected.targets.length) {\r\n                var from = ui.selected.targets[0];\r\n                if (_status.event.moveHandcard && from.countCards('h') > 0) return true;\r\n                var js = from.getCards('j');\r\n                for (var i = 0; i < js.length; i++) {\r\n                  if (_status.event.nojudge) break;\r\n                  if (target.canAddJudge(js[i])) return true;\r\n                }\r\n                if (target.isMin()) return false;\r\n                var es = from.getCards('e');\r\n                for (var i = 0; i < es.length; i++) {\r\n                  if (target.isEmpty(get.subtype(es[i]))) return true;\r\n                }\r\n                return false;\r\n              }\r\n              else {\r\n                var range = 'ej';\r\n                if (_status.event.nojudge) range = 'e';\r\n                if (_status.event.moveHandcard) range = 'h' + range;\r\n                return target.countCards(range) > 0;\r\n              }\r\n            });\r\n            next.set('nojudge', Evt.nojudge || false);\r\n            next.set('moveHandcard', Evt.moveHandcard || false);\r\n            next.set('sourceFilterTarget', Evt.sourceFilterTarget || false);\r\n            next.set('ai', Evt.ai || function (target) {\r\n              var player = _status.event.player;\r\n              var att = get.attitude(player, target);\r\n              var sgnatt = get.sgn(att);\r\n              if (ui.selected.targets.length == 0) {\r\n                if (att > 0) {\r\n                  if (!_status.event.nojudge && target.countCards('j', function (card) {\r\n                    return game.hasPlayer(function (current) {\r\n                      return current != target && current.canAddJudge(card) && get.attitude(player, current) < 0;\r\n                    })\r\n                  })) return 14;\r\n                  if (target.countCards('e', function (card) {\r\n                    return get.value(card, target) < 0 && game.hasPlayer(function (current) {\r\n                      return current != target && get.attitude(player, current) < 0 && current.isEmpty(get.subtype(card)) && get.effect(target, card, player, player) < 0;\r\n                    });\r\n                  }) > 0) return 9;\r\n                }\r\n                else if (att < 0) {\r\n                  if (game.hasPlayer(function (current) {\r\n                    if (current != target && get.attitude(player, current) > 0) {\r\n                      var es = target.getCards('e');\r\n                      for (var i = 0; i < es.length; i++) {\r\n                        if (get.value(es[i], target) > 0 && current.isEmpty(get.subtype(es[i])) && get.effect(current, es[i], player, player) > 0) return true;\r\n                      }\r\n                    }\r\n                  })) {\r\n                    return -att;\r\n                  }\r\n                }\r\n                return 0;\r\n              }\r\n              var es = ui.selected.targets[0].getCards('e');\r\n              var i;\r\n              var att2 = get.sgn(get.attitude(player, ui.selected.targets[0]));\r\n              for (i = 0; i < es.length; i++) {\r\n                if (sgnatt != 0 && att2 != 0 && sgnatt != att2 &&\r\n                  get.sgn(get.value(es[i], ui.selected.targets[0])) == -att2 &&\r\n                  get.sgn(get.effect(target, es[i], player, target)) == sgnatt &&\r\n                  target.isEmpty(get.subtype(es[i]))) {\r\n                  return Math.abs(att);\r\n                }\r\n              }\r\n              if (i == es.length && (_status.event.nojudge || !ui.selected.targets[0].countCards('j', function (card) {\r\n                return target.canAddJudge(card);\r\n              }) || att2 <= 0)) {\r\n                return 0;\r\n              }\r\n              return -att * att2;\r\n            });\r\n            next.set('multitarget', true);\r\n            next.set('targetprompt', _status.event.targetprompt || ['被移走', '移动目标']);\r\n            next.set('prompt', Evt.prompt || '移动场上的一张牌');\r\n            if (Evt.prompt2) next.set('prompt2', Evt.prompt2);\r\n            if (Evt.forced) next.set('forced', true);\r\n          }, function () {\r\n            Evt.result = result;\r\n            if (result.bool) {\r\n              player.line2(result.targets, 'green');\r\n              Evt.targets = result.targets;\r\n            }\r\n            else {\r\n              Evt.finish();\r\n            }\r\n          }, function () {\r\n            game.delay();\r\n          }, function () {\r\n            if (targets.length == 2) {\r\n              player.choosePlayerCard('hej', true, function (button) {\r\n                var player = _status.event.player;\r\n                var targets0 = _status.event.targets0;\r\n                var targets1 = _status.event.targets1;\r\n                if (get.attitude(player, targets0) > 0 && get.attitude(player, targets1) < 0) {\r\n                  if (get.position(button.link) == 'j') return 12;\r\n                  if (get.value(button.link, targets0) < 0 && get.effect(targets1, button.link, player, targets1) > 0) return 10;\r\n                  return 0;\r\n                }\r\n                else {\r\n                  if (get.position(button.link) == 'j') return -10;\r\n                  return get.value(button.link) * get.effect(targets1, button.link, player, targets1);\r\n                }\r\n              }, targets[0]).set('nojudge', Evt.nojudge || false).set('targets0', targets[0]).set('targets1', targets[1]).set('filterButton', function (button) {\r\n                var targets1 = _status.event.targets1;\r\n                if (get.position(button.link) == 'h') {\r\n                  if (!_status.event.moveHandcard) return false;\r\n                  return true;\r\n                }\r\n                if (get.position(button.link) == 'j') {\r\n                  if (_status.event.nojudge) return false;\r\n                  return targets1.canAddJudge(button.link);\r\n                }\r\n                else {\r\n                  return targets1.isEmpty(get.subtype(button.link));\r\n                }\r\n              }).set('moveHandcard', Evt.moveHandcard || false);\r\n            }\r\n            else {\r\n              Evt.finish();\r\n            }\r\n          }, function () {\r\n            if (result.bool && result.links.length) {\r\n              var link = result.links[0];\r\n              if (get.position(link) == 'e') {\r\n                Evt.targets[1].equip(link);\r\n              }\r\n              else if (get.position(link) == 'h') {\r\n                Evt.targets[0].give(link, Evt.targets[1], 'giveAuto');\r\n              }\r\n              else if (link.viewAs) {\r\n                Evt.targets[1].addJudge({ name: link.viewAs }, [link]);\r\n              }\r\n              else {\r\n                Evt.targets[1].addJudge(link);\r\n              }\r\n              if (get.position(link) != 'h') {\r\n                Evt.targets[0].$give(link, Evt.targets[1], false);\r\n                game.log(Evt.targets[0], '的', link, '被移动给了', Evt.targets[1]);\r\n              }\r\n              Evt.result.card = link;\r\n              Evt.result.position = get.position(link);\r\n              game.delay();\r\n            }\r\n          }],\r\n          /**\r\n           * 角色使用牌\r\n           * @name content.useCard\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {?Object} Evt.result 返回选择使用结果(如果有)给父事件\r\n           */\r\n          useCard: [() => {\r\n            if (!card) {\r\n              console.log('err: no card', get.translation(Evt.player));\r\n              Evt.finish();\r\n              return;\r\n            }\r\n            if (!get.info(card, false).noForceDie) Evt.forceDie = true;\r\n            var next = player.lose(cards, 'visible', ui.ordering).set('type', 'use');\r\n            var directDiscard = [];\r\n            for (var i = 0; i < cards.length; i++) {\r\n              if (!next.cards.contains(cards[i])) {\r\n                directDiscard.push(cards[i]);\r\n              }\r\n            }\r\n            if (directDiscard.length) game.cardsGotoOrdering(directDiscard);\r\n            //player.using=cards;\r\n            var cardaudio = true;\r\n            if (Evt.skill) {\r\n              if (lib.skill[Evt.skill].audio) {\r\n                cardaudio = false;\r\n              }\r\n              if (lib.skill[Evt.skill].log != false) {\r\n                player.logSkill(Evt.skill);\r\n              }\r\n              if (get.info(Evt.skill).popname) {\r\n                player.tryCardAnimate(card, Evt.card.name, 'metal', true);\r\n              }\r\n            }\r\n            else if (!Evt.nopopup) {\r\n              if (lib.translate[Evt.card.name + '_pop']) {\r\n                player.tryCardAnimate(card, lib.translate[Evt.card.name + '_pop'], 'metal');\r\n              }\r\n              else {\r\n                player.tryCardAnimate(card, Evt.card.name, 'metal');\r\n              }\r\n            }\r\n            if (Evt.audio === false) {\r\n              cardaudio = false;\r\n            }\r\n            if (cardaudio) {\r\n              game.broadcastAll(function (player, card) {\r\n                if (lib.config.background_audio) {\r\n                  if (get.type(card) == 'equip' && !lib.config.equip_audio) return;\r\n                  var sex = player.sex == 'female' ? 'female' : 'male';\r\n                  var audioinfo = lib.card[card.name].audio;\r\n                  // if(audioinfo||true){\r\n                  if (card.name == 'sha' && (card.nature == 'fire' || card.nature == 'thunder' || card.nature == 'ice' || card.nature == 'ocean')) {\r\n                    game.playAudio('card', sex, card.name + '_' + card.nature);\r\n                  }\r\n                  else {\r\n                    if (typeof audioinfo == 'string') {\r\n                      if (audioinfo.indexOf('ext:') == 0) game.playAudio('..', 'extension', audioinfo.slice(4), card.name + '_' + sex);\r\n                      else game.playAudio('card', sex, audioinfo);\r\n                    }\r\n                    else {\r\n                      game.playAudio('card', sex, card.name);\r\n                    }\r\n                  }\r\n                  // }\r\n                  // else if(get.type(card)!='equip'){\r\n                  //     game.playAudio('card/default');\r\n                  // }\r\n                }\r\n              }, player, card);\r\n            }\r\n            if (Evt.animate != false && Evt.line != false) {\r\n              if ((card.name == 'wuxie' || card.name == 'youdishenru') && Evt.getParent().source) {\r\n                var lining = Evt.getParent().sourcex || Evt.getParent().source2 || Evt.getParent().source;\r\n                if (lining == player && Evt.getParent().sourcex2) {\r\n                  lining = Evt.getParent().sourcex2;\r\n                }\r\n                if (Array.isArray(lining) && Evt.getTrigger().name == 'jiedao') {\r\n                  player.line(lining[0], 'green');\r\n                }\r\n                else {\r\n                  player.line(lining, 'green');\r\n                }\r\n              }\r\n              else {\r\n                var config = {};\r\n                if (card.nature == 'fire' ||\r\n                  (card.classList && card.classList.contains('fire'))) {\r\n                  config.color = 'fire';\r\n                }\r\n                else if (card.nature == 'thunder' ||\r\n                  (card.classList && card.classList.contains('thunder'))) {\r\n                  config.color = 'thunder';\r\n                }\r\n                else if (card.nature == 'ocean' ||\r\n                  (card.classList && card.classList.contains('ocean'))) {\r\n                  config.color = 'ocean';\r\n                }\r\n                else if (card.nature == 'yami' ||\r\n                  (card.classList && card.classList.contains('yami'))) {\r\n                  config.color = 'yami';\r\n                }\r\n                if (Evt.addedTarget) {\r\n                  player.line2(targets.concat(Evt.addedTargets), config);\r\n                }\r\n                else if (get.info(card, false).multitarget && targets.length > 1 && !get.info(card, false).multiline) {\r\n                  player.line2(targets, config);\r\n                }\r\n                else {\r\n                  player.line(targets, config);\r\n                }\r\n              }\r\n              if (Evt.throw !== false) player.$throw(cards);\r\n              if (lib.config.sync_speed && cards[0] && cards[0].clone) {\r\n                var waitingForTransition = get.time();\r\n                Evt.waitingForTransition = waitingForTransition;\r\n                cards[0].clone.listenTransition(function () {\r\n                  if (_status.waitingForTransition == waitingForTransition && _status.paused) {\r\n                    game.resume();\r\n                  }\r\n                  delete Evt.waitingForTransition;\r\n                });\r\n              }\r\n            }\r\n            Evt.id = get.id();\r\n            Evt.excluded = [];\r\n            Evt.directHit = [];\r\n            Evt.customArgs = { default: {} };\r\n            if (typeof Evt.baseDamage != 'number') Evt.baseDamage = get.info(card, false).baseDamage || 1;\r\n            if (Evt.oncard) {\r\n              Evt.oncard(Evt.card, Evt.player);\r\n            }\r\n            player.actionHistory[player.actionHistory.length - 1].useCard.push(Evt);\r\n            if (Evt.addCount !== false) {\r\n              if (player.stat[player.stat.length - 1].card[card.name] == undefined) {\r\n                player.stat[player.stat.length - 1].card[card.name] = 1;\r\n              }\r\n              else {\r\n                player.stat[player.stat.length - 1].card[card.name]++;\r\n              }\r\n              if (Evt.skill) {\r\n                if (player.stat[player.stat.length - 1].skill[Evt.skill] == undefined) {\r\n                  player.stat[player.stat.length - 1].skill[Evt.skill] = 1;\r\n                }\r\n                else {\r\n                  player.stat[player.stat.length - 1].skill[Evt.skill]++;\r\n                }\r\n                var sourceSkill = get.info(Evt.skill).sourceSkill;\r\n                if (sourceSkill) {\r\n                  if (player.stat[player.stat.length - 1].skill[sourceSkill] == undefined) {\r\n                    player.stat[player.stat.length - 1].skill[sourceSkill] = 1;\r\n                  }\r\n                  else {\r\n                    player.stat[player.stat.length - 1].skill[sourceSkill]++;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            if (targets.length) {\r\n              var str = (targets.length == 1 && targets[0] == player) ? '#b自己' : targets;\r\n              if (cards.length && !card.isCard) {\r\n                if (Evt.addedTarget) {\r\n                  game.log(player, '对', str, '使用了', card, '（', cards, '，指向', Evt.addedTargets, '）');\r\n                }\r\n                else {\r\n                  game.log(player, '对', str, '使用了', card, '（', cards, '）');\r\n                }\r\n              }\r\n              else {\r\n                if (Evt.addedTarget) {\r\n                  game.log(player, '对', str, '使用了', card, '（指向', Evt.addedTargets, '）');\r\n                }\r\n                else {\r\n                  game.log(player, '对', str, '使用了', card);\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (cards.length && !card.isCard) {\r\n                if (Evt.addedTarget) {\r\n                  game.log(player, '使用了', card, '（', cards, '，指向', Evt.addedTargets, '）');\r\n                }\r\n                else {\r\n                  game.log(player, '使用了', card, '（', cards, '）');\r\n                }\r\n              }\r\n              else {\r\n                if (Evt.addedTarget) {\r\n                  game.log(player, '使用了', card, '（指向', Evt.addedTargets, '）');\r\n                }\r\n                else {\r\n                  game.log(player, '使用了', card);\r\n                }\r\n              }\r\n            }\r\n            if (card.name == 'wuxie') {\r\n              game.logv(player, [card, cards], [Evt.getTrigger().card]);\r\n            }\r\n            else {\r\n              game.logv(player, [card, cards], targets);\r\n            }\r\n            Evt.trigger('useCard1');\r\n          }, () => {\r\n            Evt.trigger('useCard2');\r\n          }, () => {\r\n            Evt.trigger('useCard');\r\n            Evt._oncancel = function () {\r\n              game.broadcastAll(function (id) {\r\n                if (ui.tempnowuxie && ui.tempnowuxie._origin == id) {\r\n                  ui.tempnowuxie.close();\r\n                  delete ui.tempnowuxie;\r\n                }\r\n              }, Evt.id);\r\n            };\r\n          }, () => {\r\n            Evt.sortTarget = function (animate, sort) {\r\n              var info = get.info(card, false);\r\n              if (num == 0 && targets.length > 1) {\r\n                if (!info.multitarget) {\r\n                  if (!Evt.fixedSeat && !sort) {\r\n                    targets.sortBySeat(player);\r\n                  }\r\n                  if (animate) for (var i = 0; i < targets.length; i++) {\r\n                    targets[i].animate('target');\r\n                  }\r\n                }\r\n                else if (animate) {\r\n                  for (var i = 0; i < targets.length; i++) {\r\n                    targets[i].animate('target');\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            Evt.sortTarget();\r\n            Evt.getTriggerTarget = function (list1, list2) {\r\n              var listx = list1.slice(0).sortBySeat();\r\n              for (var i = 0; i < listx.length; i++) {\r\n                if (list2.numOf(listx[i]) < listx.numOf(listx[i])) return listx[i];\r\n              }\r\n              return null;\r\n            }\r\n            var info = get.info(card, false);\r\n            if (!info.nodelay && Evt.animate != false) {\r\n              if (Evt.delayx !== false) {\r\n                if (Evt.waitingForTransition) {\r\n                  _status.waitingForTransition = Evt.waitingForTransition;\r\n                  game.pause();\r\n                }\r\n                else {\r\n                  game.delayx();\r\n                }\r\n              }\r\n            }\r\n          }, () => {\r\n            if (Evt.all_excluded) return;\r\n            if (!Evt.triggeredTargets1) Evt.triggeredTargets1 = [];\r\n            var target = Evt.getTriggerTarget(targets, Evt.triggeredTargets1);\r\n            if (target) {\r\n              Evt.triggeredTargets1.push(target);\r\n              var next = game.createEvent('useCardToPlayer', false);\r\n              if (Evt.triggeredTargets1.length == 1) next.isFirstTarget = true;\r\n              next.setContent('emptyEvent');\r\n              next.targets = targets;\r\n              next.target = target;\r\n              next.card = card;\r\n              next.cards = cards;\r\n              next.player = player;\r\n              next.excluded = Evt.excluded;\r\n              next.directHit = Evt.directHit;\r\n              next.customArgs = Evt.customArgs;\r\n              if (Evt.forceDie) next.forceDie = true;\r\n              Evt.redo();\r\n            }\r\n          }, () => {\r\n            if (Evt.all_excluded) return;\r\n            if (!Evt.triggeredTargets2) Evt.triggeredTargets2 = [];\r\n            var target = Evt.getTriggerTarget(targets, Evt.triggeredTargets2);\r\n            if (target) {\r\n              Evt.triggeredTargets2.push(target);\r\n              var next = game.createEvent('useCardToTarget', false);\r\n              if (Evt.triggeredTargets2.length == 1) next.isFirstTarget = true;\r\n              next.setContent('emptyEvent');\r\n              next.targets = targets;\r\n              next.target = target;\r\n              next.card = card;\r\n              next.cards = cards;\r\n              next.player = player;\r\n              next.excluded = Evt.excluded;\r\n              next.directHit = Evt.directHit;\r\n              next.customArgs = Evt.customArgs;\r\n              if (Evt.forceDie) next.forceDie = true;\r\n              Evt.redo();\r\n            }\r\n          }, () => {\r\n            if (Evt.all_excluded) return;\r\n            if (!Evt.triggeredTargets3) Evt.triggeredTargets3 = [];\r\n            var target = Evt.getTriggerTarget(targets, Evt.triggeredTargets3);\r\n            if (target) {\r\n              Evt.triggeredTargets3.push(target);\r\n              var next = game.createEvent('useCardToPlayered', false);\r\n              if (Evt.triggeredTargets3.length == 1) next.isFirstTarget = true;\r\n              next.setContent('emptyEvent');\r\n              next.targets = targets;\r\n              next.target = target;\r\n              next.card = card;\r\n              next.cards = cards;\r\n              next.player = player;\r\n              next.excluded = Evt.excluded;\r\n              next.directHit = Evt.directHit;\r\n              next.customArgs = Evt.customArgs;\r\n              if (Evt.forceDie) next.forceDie = true;\r\n              Evt.redo();\r\n            }\r\n          }, () => {\r\n            if (Evt.all_excluded) return;\r\n            if (!Evt.triggeredTargets4) Evt.triggeredTargets4 = [];\r\n            var target = Evt.getTriggerTarget(targets, Evt.triggeredTargets4);\r\n            if (target) {\r\n              Evt.triggeredTargets4.push(target);\r\n              var next = game.createEvent('useCardToTargeted', false);\r\n              if (Evt.triggeredTargets4.length == 1) next.isFirstTarget = true;\r\n              next.setContent('emptyEvent');\r\n              next.targets = targets;\r\n              next.target = target;\r\n              next.card = card;\r\n              next.cards = cards;\r\n              next.player = player;\r\n              next.excluded = Evt.excluded;\r\n              next.directHit = Evt.directHit;\r\n              next.customArgs = Evt.customArgs;\r\n              if (Evt.forceDie) next.forceDie = true;\r\n              if (targets.length == Evt.triggeredTargets4.length) {\r\n                Evt.sortTarget();\r\n              }\r\n              Evt.redo();\r\n            }\r\n          }, () => {\r\n            var info = get.info(card, false);\r\n            if (info.contentBefore) {\r\n              var next = game.createEvent(card.name + 'ContentBefore');\r\n              next.setContent(info.contentBefore);\r\n              next.targets = targets;\r\n              next.card = card;\r\n              next.cards = cards;\r\n              next.player = player;\r\n              next.type = 'precard';\r\n              if (Evt.forceDie) next.forceDie = true;\r\n            }\r\n            else if (info.reverseOrder && get.is.versus() && targets.length > 1) {\r\n              var next = game.createEvent(card.name + 'ContentBefore');\r\n              next.setContent('reverseOrder');\r\n              next.targets = targets;\r\n              next.card = card;\r\n              next.cards = cards;\r\n              next.player = player;\r\n              next.type = 'precard';\r\n              if (Evt.forceDie) next.forceDie = true;\r\n            }\r\n          }, () => {\r\n            if (Evt.all_excluded) return;\r\n            var info = get.info(card, false);\r\n            if (num == 0 && targets.length > 1) {\r\n              Evt.sortTarget(true, true);\r\n            }\r\n            if (targets[num] && targets[num].isDead()) return;\r\n            if (targets[num] && targets[num].isOut()) return;\r\n            if (targets[num] && targets[num].removed) return;\r\n            if (targets[num] && info.ignoreTarget && info.ignoreTarget(card, player, targets[num])) return;\r\n            if (targets.length == 0 && !info.notarget) return;\r\n            if (targets[num] && Evt.excluded.contains(targets[num])) {\r\n              var next = game.createEvent('useCardToExcluded', false);\r\n              next.setContent('emptyEvent');\r\n              next.targets = targets;\r\n              next.target = targets[num];\r\n              next.num = num;\r\n              next.card = card;\r\n              next.cards = cards;\r\n              next.player = player;\r\n              return;\r\n            };\r\n            var next = game.createEvent(card.name);\r\n            next.setContent(info.content);\r\n            next.targets = targets;\r\n            next.card = card;\r\n            next.cards = cards;\r\n            next.player = player;\r\n            next.num = num;\r\n            next.type = 'card';\r\n            next.skill = Evt.skill;\r\n            next.multitarget = info.multitarget;\r\n            next.preResult = Evt.preResult;\r\n            next.baseDamage = Evt.baseDamage;\r\n            if (Evt.forceDie) next.forceDie = true;\r\n            if (Evt.addedTargets) {\r\n              next.addedTargets = Evt.addedTargets;\r\n              next.addedTarget = Evt.addedTarget;\r\n              next._targets = Evt._targets;\r\n            }\r\n            if (info.targetDelay === false) {\r\n              Evt.targetDelay = false;\r\n            }\r\n            next.target = targets[num];\r\n            for (var i in Evt.customArgs.default) next[i] = Evt.customArgs.default[i];\r\n            if (next.target && Evt.customArgs[next.target.playerid]) {\r\n              var customArgs = Evt.customArgs[next.target.playerid];\r\n              for (var i in customArgs) next[i] = customArgs[i];\r\n            }\r\n            if (next.target && Evt.directHit.contains(next.target)) next.directHit = true;\r\n            if (next.target && !info.multitarget) {\r\n              if (num == 0 && targets.length > 1) {\r\n                // var ttt=next.target;\r\n                // setTimeout(function(){ttt.animate('target');},0.5*lib.config.duration);\r\n              }\r\n              else {\r\n                next.target.animate('target');\r\n              }\r\n            }\r\n            if (!info.nodelay && num > 0) {\r\n              if (Evt.targetDelay !== false) {\r\n                game.delayx(0.5);\r\n              }\r\n            }\r\n          }, () => {\r\n            if (Evt.all_excluded) return;\r\n            if (!get.info(Evt.card, false).multitarget && num < targets.length - 1 && !Evt.cancelled) {\r\n              Evt.num++;\r\n              Evt.goto(9);\r\n            }\r\n          }, () => {\r\n            if (get.info(card, false).contentAfter) {\r\n              var next = game.createEvent(card.name + 'ContentAfter');\r\n              next.setContent(get.info(card, false).contentAfter);\r\n              next.targets = targets;\r\n              next.card = card;\r\n              next.cards = cards;\r\n              next.player = player;\r\n              next.preResult = Evt.preResult;\r\n              next.type = 'postcard';\r\n              if (Evt.forceDie) next.forceDie = true;\r\n            }\r\n          }, () => {\r\n            if (Evt.postAi) {\r\n              Evt.player.logAi(Evt.targets, Evt.card);\r\n            }\r\n            if (Evt._result) {\r\n              Evt.result = Evt._result;\r\n            }\r\n            //delete player.using;\r\n            if (document.getElementsByClassName('thrown').length) {\r\n              if (Evt.delayx !== false) game.delayx();\r\n            }\r\n            else {\r\n              Evt.finish();\r\n            }\r\n          }, () => {\r\n            Evt._oncancel();\r\n          }],\r\n          /**\r\n           * 角色使用技能\r\n           * @name content.useSkill\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          useSkill: [() => {\r\n            var info = get.info(Evt.skill);\r\n            if (!info.noForceDie) Evt.forceDie = true;\r\n            Evt._skill = Evt.skill;\r\n            game.trySkillAudio(Evt.skill, player);\r\n            var checkShow = player.checkShow(Evt.skill);\r\n            if (info.discard != false && info.lose != false && !info.viewAs) {\r\n              player.discard(cards).delay = false;\r\n              if (lib.config.low_performance) {\r\n                Evt.discardTransition = true;\r\n              }\r\n            }\r\n            else {\r\n              if (info.lose != false) {\r\n                if (info.losetrigger == false) {\r\n                  var losecard = player.lose(cards, ui.special)._triggered = null;\r\n                }\r\n                else {\r\n                  var losecard = player.lose(cards, ui.special);\r\n                  if (info.visible) losecard.visible = true;\r\n                  if (info.loseTo) losecard.position = ui[info.loseTo];\r\n                  if (info.insert) losecard.insert_card = true;\r\n                  if (losecard.position == ui.special && info.toStorage) losecard.toStorage = true;\r\n                }\r\n              }\r\n              if (!info.prepare && info.viewAs) {\r\n                player.$throw(cards);\r\n                if (losecard) losecard.visible = true;\r\n                if (lib.config.sync_speed && cards[0] && cards[0].clone) {\r\n                  var waitingForTransition = get.time();\r\n                  Evt.waitingForTransition = waitingForTransition;\r\n                  cards[0].clone.listenTransition(function () {\r\n                    if (_status.waitingForTransition == waitingForTransition && _status.paused) {\r\n                      game.resume();\r\n                    }\r\n                    delete Evt.waitingForTransition;\r\n                  });\r\n                }\r\n              }\r\n            }\r\n            if (info.line != false && targets.length) {\r\n              var config = {};\r\n              if (get.is.object(info.line)) config = info.line;\r\n              else if (info.line == 'fire') {\r\n                config.color = 'fire';\r\n              }\r\n              else if (info.line == 'thunder') {\r\n                config.color = 'thunder';\r\n              }\r\n              else if (info.line == 'ocean') {\r\n                config.color = 'ocean';\r\n              }\r\n              else if (info.line === undefined || info.line == 'green') {\r\n                config.color = 'green';\r\n              }\r\n              if (info.multitarget && !info.multiline && targets.length > 1) {\r\n                player.line2(targets, config);\r\n              }\r\n              else {\r\n                player.line(targets, config);\r\n              }\r\n            }\r\n            var str = '';\r\n            if (targets && targets.length && info.log != 'notarget') {\r\n              str += '对<span class=\"bluetext\">' + (targets[0] == player ? '自己' : get.translation(targets[0]));\r\n              for (var i = 1; i < targets.length; i++) {\r\n                str += '、' + (targets[i] == player ? '自己' : get.translation(targets[i]));\r\n              }\r\n              str += '</span>'\r\n            }\r\n            str += '发动了';\r\n            if (!info.direct) {\r\n              game.log(player, str, '#p『' + get.skillTranslation(skill, player) + '』');\r\n              if (info.logv !== false) game.logv(player, skill, targets);\r\n              player.trySkillAnimate(skill, skill, checkShow);\r\n            }\r\n            if (Evt.addCount != false) {\r\n              if (player.stat[player.stat.length - 1].skill[skill] == undefined) {\r\n                player.stat[player.stat.length - 1].skill[skill] = 1;\r\n              }\r\n              else {\r\n                player.stat[player.stat.length - 1].skill[skill]++;\r\n              }\r\n              var sourceSkill = get.info(skill).sourceSkill;\r\n              if (sourceSkill) {\r\n                if (player.stat[player.stat.length - 1].skill[sourceSkill] == undefined) {\r\n                  player.stat[player.stat.length - 1].skill[sourceSkill] = 1;\r\n                }\r\n                else {\r\n                  player.stat[player.stat.length - 1].skill[sourceSkill]++;\r\n                }\r\n              }\r\n            }\r\n            if (player.stat[player.stat.length - 1].allSkills == undefined) {\r\n              player.stat[player.stat.length - 1].allSkills = 1;\r\n            }\r\n            else {\r\n              player.stat[player.stat.length - 1].allSkills++;\r\n            }\r\n            if (info.prepare) {\r\n              switch (info.prepare) {\r\n                case 'give': if (losecard) losecard.visible = true; player.$give(cards, targets[0]); break;\r\n                case 'give2': player.$give(cards.length, targets[0]); break;\r\n                case 'throw': if (losecard) losecard.visible = true; player.$throw(cards); break;\r\n                case 'throw2': player.$throw(cards.length); break;\r\n                default: info.prepare(cards, player, targets);\r\n              }\r\n            }\r\n            if (info.round) {\r\n              var roundname = skill + '_roundcount';\r\n              player.storage[roundname] = info.round;\r\n              if (!player.hasSkill(roundname)) player.addSkill(roundname)\r\n              // player.storage[roundname] = game.roundNumber;\r\n              player.syncStorage(roundname);\r\n              player.markSkill(roundname);\r\n            }\r\n          }, () => {\r\n            var info = get.info(Evt.skill);\r\n            if (info && info.contentBefore) {\r\n              var next = game.createEvent(Evt.skill + 'ContentBefore');\r\n              next.setContent(info.contentBefore);\r\n              next.targets = targets;\r\n              next.cards = cards;\r\n              next.player = player;\r\n              if (Evt.forceDie) next.forceDie = true;\r\n            }\r\n          }, () => {\r\n            if (!Evt.skill) {\r\n              console.log('error: no skill', get.translation(Evt.player), Evt.player.getSkills());\r\n              if (Evt._skill) {\r\n                Evt.skill = Evt._skill;\r\n                console.log(Evt._skill);\r\n              }\r\n              else {\r\n                Evt.finish();\r\n                return;\r\n              }\r\n            }\r\n            var info = get.info(Evt.skill);\r\n            if (targets[num] && targets[num].isDead() ||\r\n              targets[num] && targets[num].isOut() ||\r\n              targets[num] && targets[num].removed) {\r\n              if (!info.multitarget && num < targets.length - 1) {\r\n                Evt.num++;\r\n                Evt.redo();\r\n              }\r\n              return;\r\n            }\r\n            var next = game.createEvent(Evt.skill);\r\n            next.setContent(info.content);\r\n            next.targets = targets;\r\n            next.cards = cards;\r\n            next.player = player;\r\n            next.num = num;\r\n            next.multitarget = info.multitarget;\r\n            if (num == 0 && next.targets.length > 1) {\r\n              if (!info.multitarget) {\r\n                lib.tempSortSeat = player;\r\n                targets.sort(lib.sort.seat);\r\n                delete lib.tempSortSeat;\r\n              }\r\n              for (var i = 0; i < targets.length; i++) {\r\n                targets[i].animate('target');\r\n              }\r\n            }\r\n            next.target = targets[num];\r\n            if (Evt.forceDie) next.forceDie = true;\r\n            if (next.target && !info.multitarget) {\r\n              if (num == 0 && targets.length > 1) {\r\n                // var ttt=next.target;\r\n                // setTimeout(function(){ttt.animate('target');},0.5*lib.config.duration);\r\n              }\r\n              else {\r\n                next.target.animate('target');\r\n              }\r\n            }\r\n            if (num == 0) {\r\n              if (typeof info.delay == 'number') game.delay(info.delay);\r\n              else if (info.delay !== false && info.delay !== 0) {\r\n                if (Evt.waitingForTransition) {\r\n                  _status.waitingForTransition = Evt.waitingForTransition;\r\n                  game.pause();\r\n                }\r\n                else {\r\n                  game.delayx()\r\n                }\r\n              }\r\n            }\r\n            else game.delayx(0.5);\r\n            if (!info.multitarget && num < targets.length - 1) {\r\n              Evt.num++;\r\n              Evt.redo();\r\n            }\r\n          }, () => {\r\n            var info = get.info(Evt.skill);\r\n            if (info && info.contentAfter) {\r\n              var next = game.createEvent(Evt.skill + 'ContentAfter');\r\n              next.setContent(info.contentAfter);\r\n              next.targets = targets;\r\n              next.cards = cards;\r\n              next.player = player;\r\n              if (Evt.forceDie) next.forceDie = true;\r\n            }\r\n          }, () => {\r\n            if (player.getStat().allSkills > 200) {\r\n              player._noSkill = true;\r\n              console.log(player.name, Evt.skill);\r\n            }\r\n            if (document.getElementsByClassName('thrown').length) {\r\n              if (Evt.skill && get.info(Evt.skill).delay !== false && get.info(Evt.skill).delay !== 0) game.delayx();\r\n            }\r\n            else {\r\n              Evt.finish();\r\n            }\r\n          }, () => {\r\n            ui.clear();\r\n          }],\r\n          /**\r\n           * 从(牌库|牌堆顶|牌堆底)摸牌\r\n           * @name content.useCard\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 当前事件\r\n           * @property {!Array<GameCores.GameObjects.Card>} Evt.result 返回摸到的牌数组\r\n           */\r\n          draw: function () {\r\n            // if(lib.config.background_audio){\r\n            //     game.playAudio('effect','draw');\r\n            // }\r\n            // game.broadcast(function(){\r\n            //     if(lib.config.background_audio){\r\n            //         game.playAudio('effect','draw');\r\n            //     }\r\n            // });\r\n            if (typeof Evt.minnum == 'number' && num < Evt.minnum) {\r\n              num = Evt.minnum;\r\n            }\r\n            if (Evt.drawDeck) {\r\n              if (Evt.drawDeck > num) {\r\n                Evt.drawDeck = num;\r\n              }\r\n              num -= Evt.drawDeck;\r\n            }\r\n            if (Evt.log != false) {\r\n              if (num > 0) {\r\n                if (Evt.bottom) game.log(player, '从牌堆底摸了' + get.cnNumber(num) + '张牌');\r\n                else game.log(player, '摸了' + get.cnNumber(num) + '张牌');\r\n              }\r\n              if (Evt.drawDeck) {\r\n                game.log(player, '从牌库中获得了' + get.cnNumber(Evt.drawDeck) + '张牌');\r\n              }\r\n            }\r\n            var cards;\r\n            if (num > 0) {\r\n              if (Evt.bottom) cards = get.bottomCards(num);\r\n              else if (player.getTopCards) cards = player.getTopCards(num);\r\n              else cards = get.cards(num);\r\n            }\r\n            else {\r\n              cards = [];\r\n            }\r\n            if (Evt.drawDeck) {\r\n              cards = cards.concat(player.getDeckCards(Evt.drawDeck));\r\n            }\r\n            if (Evt.animate != false) {\r\n              if (Evt.visible) {\r\n                var next = player.gain(cards, 'gain2');\r\n                if (Evt.bottom) game.log(player, '从牌堆底摸了' + get.cnNumber(num) + '张牌（', cards, '）');\r\n                else game.log(player, '摸了' + get.cnNumber(num) + '张牌（', cards, '）');\r\n              }\r\n              else {\r\n                var next = player.gain(cards, 'draw');\r\n              }\r\n            }\r\n            else {\r\n              var next = player.gain(cards);\r\n              if (Evt.$draw) {\r\n                player.$draw(cards.length);\r\n              }\r\n            }\r\n            if (Evt.gaintag) next.gaintag.addArray(Evt.gaintag);\r\n            Evt.result = cards;\r\n          },\r\n          /**\r\n           * 从(手牌区|装备区|武将牌上|判定区)弃置牌\r\n           * @name content.discard\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          discard: [() => {\r\n            game.log(player, '弃置了', cards);\r\n            Evt.done = player.lose(cards, Evt.position, 'visible').type = 'discard';\r\n          }, () => {\r\n            Evt.trigger('discard');\r\n          }],\r\n          /**\r\n           * 角色打出牌\r\n           * @name content.respond\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          respond: [function () {\r\n            var cardaudio = true;\r\n            if (Evt.skill) {\r\n              if (lib.skill[Evt.skill].audio) {\r\n                cardaudio = false;\r\n              }\r\n              player.logSkill(Evt.skill);\r\n              player.checkShow(Evt.skill, true);\r\n              if (lib.skill[Evt.skill].onrespond && !game.online) {\r\n                lib.skill[Evt.skill].onrespond(Evt, player);\r\n              }\r\n            }\r\n            else if (!Evt.nopopup) player.tryCardAnimate(card, card.name, 'wood');\r\n            if (cardaudio && Evt.getParent(3).name == 'useCard') {\r\n              game.broadcastAll(function (player, card) {\r\n                if (lib.config.background_audio) {\r\n                  var sex = player.sex == 'female' ? 'female' : 'male';\r\n                  var audioinfo = lib.card[card.name].audio;\r\n                  // if(audioinfo||true){\r\n                  if (typeof audioinfo == 'string' && audioinfo.indexOf('ext:') == 0) {\r\n                    game.playAudio('..', 'extension', audioinfo.slice(4), card.name + '_' + sex);\r\n                  }\r\n                  else {\r\n                    game.playAudio('card', sex, card.name);\r\n                  }\r\n                  // }\r\n                  // else{\r\n                  //     game.playAudio('card/default');\r\n                  // }\r\n                }\r\n              }, player, card);\r\n            }\r\n            if (cards.length && (cards.length > 1 || cards[0].name != card.name)) {\r\n              game.log(player, '打出了', card, '（', cards, '）');\r\n            }\r\n            else {\r\n              game.log(player, '打出了', card);\r\n            }\r\n            player.actionHistory[player.actionHistory.length - 1].respond.push(Evt);\r\n            var cards2 = cards.slice(0);\r\n            if (cards2.length) {\r\n              var next = player.lose(cards2, ui.ordering, 'visible');\r\n              if (Evt.noOrdering) next.noOrdering = true;\r\n              cards2.removeArray(next.cards);\r\n              if (cards2.length) {\r\n                var next2 = game.cardsGotoOrdering(cards2);\r\n                if (Evt.noOrdering) next2.noOrdering = true;\r\n              }\r\n            }\r\n            if (Evt.animate != false && Evt.throw !== false) {\r\n              for (var i = 0; i < cards.length; i++) {\r\n                player.$throw(cards[i]);\r\n                if (Evt.highlight) {\r\n                  cards[i].clone.classList.add('thrownhighlight');\r\n                  game.addVideo('highlightnode', player, get.cardInfo(cards[i]));\r\n                }\r\n              }\r\n              if (Evt.highlight) {\r\n                game.broadcast(function (cards) {\r\n                  for (var i = 0; i < cards.length; i++) {\r\n                    if (cards[i].clone) {\r\n                      cards[i].clone.classList.add('thrownhighlight');\r\n                    }\r\n                  }\r\n                }, cards);\r\n              }\r\n            }\r\n            Evt.trigger('respond');\r\n          }, function () {\r\n            game.delayx(0.5);\r\n          }],\r\n          /**\r\n           * 角色和目标交换(手)牌\r\n           * @name content.swapHandcards\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          swapHandcards: [function () {\r\n            Evt.cards1 = Evt.cards1 || player.getCards('h');\r\n            Evt.cards2 = Evt.cards2 || target.getCards('h');\r\n            game.loseAsync({\r\n              player: player,\r\n              target: target,\r\n              cards1: Evt.cards1,\r\n              cards2: Evt.cards2,\r\n            }).setContent('swapHandcardsx');\r\n          }, function () {\r\n            player.gain(Evt.cards2);\r\n            target.gain(Evt.cards1);\r\n          }],\r\n          swapHandcardsx: [function () {\r\n            player.$giveAuto(Evt.cards1, target);\r\n            target.$giveAuto(Evt.cards2, player);\r\n          }, function () {\r\n            Evt.cards = Evt.cards1;\r\n            var next = player.lose(Evt.cards, ui.ordering).getlx = false;\r\n            next.relatedEvent = Evt.getParent();\r\n            if (player == game.me) {\r\n              Evt.delayed = true;\r\n            }\r\n            else {\r\n              next.delay = false;\r\n            }\r\n          }, function () {\r\n            Evt.cards = Evt.cards2;\r\n            var next = target.lose(Evt.cards, ui.ordering).getlx = false;\r\n            next.relatedEvent = Evt.getParent();\r\n            if (target == game.me) {\r\n              Evt.delayed = true;\r\n            }\r\n            else {\r\n              next.delay = false;\r\n            }\r\n          }, function () {\r\n            if (!Evt.delayed) game.delay();\r\n          }],\r\n          /**\r\n           * 角色从每个目标获得一张牌\r\n           * @name content.gainMultiple\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          gainMultiple: [function () {\r\n            Evt.delayed = false;\r\n            Evt.num = 0;\r\n            Evt.cards = [];\r\n          }, function () {\r\n            player.gainPlayerCard(targets[num], Evt.position, true).set('boolline', false).set('delay', num == targets.length - 1);\r\n          }, function () {\r\n            if (result.bool) {\r\n              Evt.cards.addArray(result.cards);\r\n              if (num == targets.length - 1) Evt.delayed = true;\r\n            }\r\n            Evt.num++;\r\n            if (Evt.num < targets.length) {\r\n              Evt.goto(1);\r\n            }\r\n          }, function () {\r\n            if (!Evt.delayed) game.delay();\r\n          }],\r\n          /**\r\n           * 角色获得牌\r\n           * @name content.lose\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          gain: [() => {\r\n            if (cards) {\r\n              var map = {};\r\n              for (var i of cards) {\r\n                var owner = get.owner(i, 'judge');\r\n                if (owner && (owner != player || get.position(i) != 'h')) {\r\n                  var id = owner.playerid;\r\n                  if (!map[id]) map[id] = [];\r\n                  map[id].push(i);\r\n                }\r\n              }\r\n              for (var i in map) {\r\n                var owner = (_status.connectMode ? lib.playerOL : game.playerMap)[i];\r\n                var next = owner.lose(map[i], ui.special).set('type', 'gain').set('forceDie', true).set('getlx', false);\r\n                if (Evt.animate == 'give' || Evt.visible == true) next.visible = true;\r\n                Evt.relatedLose = next;\r\n              }\r\n            }\r\n            else {\r\n              Evt.finish();\r\n            }\r\n          }, () => {\r\n            for (var i = 0; i < cards.length; i++) {\r\n              if (cards[i].destroyed) {\r\n                if (player.hasSkill(cards[i].destroyed)) {\r\n                  delete cards[i].destroyed;\r\n                }\r\n                else {\r\n                  cards.splice(i--, 1);\r\n                }\r\n              }\r\n            }\r\n            if (cards.length == 0) {\r\n              Evt.finish();\r\n              return;\r\n            }\r\n            player.getHistory('gain').push(Evt);\r\n            //if(Evt.source&&Evt.delay!==false) game.delayx();}, () => {\r\n            if (player.getStat().gain == undefined) {\r\n              player.getStat().gain = cards.length;\r\n            }\r\n            else {\r\n              player.getStat().gain += cards.length;\r\n            }\r\n          }, () => {\r\n            var sort;\r\n            var frag1 = document.createDocumentFragment();\r\n            var frag2 = document.createDocumentFragment();\r\n            var hs = player.getCards('hs');\r\n            for (var i = 0; i < cards.length; i++) {\r\n              if (hs.contains(cards[i])) {\r\n                cards.splice(i--, 1);\r\n              }\r\n            }\r\n            for (var num = 0; num < cards.length; num++) {\r\n              sort = lib.config.sort_card(cards[num]);\r\n              if (lib.config.reverse_sort) sort = -sort;\r\n              cards[num].fix();\r\n              cards[num].style.transform = '';\r\n              cards[num].addGaintag(Evt.gaintag);\r\n              if (_status.discarded) {\r\n                _status.discarded.remove(cards[num]);\r\n              }\r\n              // cards[num].vanishtag.length=0;\r\n              for (var num2 = 0; num2 < cards[num].vanishtag.length; num2++) {\r\n                if (cards[num].vanishtag[num2][0] != '_') {\r\n                  cards[num].vanishtag.splice(num2--, 1);\r\n                }\r\n              }\r\n              if (player == game.me) {\r\n                cards[num].classList.add('drawinghidden');\r\n              }\r\n              if (get.is.singleHandcard() || sort > 1) frag1.appendChild(cards[num]);\r\n              else frag2.appendChild(cards[num]);\r\n            }\r\n            var addv = function () {\r\n              if (player == game.me) {\r\n                game.addVideo('gain12', player, [get.cardsInfo(frag1.childNodes), get.cardsInfo(frag2.childNodes), Evt.gaintag]);\r\n              }\r\n            };\r\n            var broadcast = function () {\r\n              game.broadcast(function (player, cards, num, gaintag) {\r\n                player.directgain(cards, null, gaintag);\r\n                _status.cardPileNum = num;\r\n              }, player, cards, ui.cardPile.childNodes.length, Evt.gaintag);\r\n            };\r\n            if (Evt.animate == 'draw') {\r\n              player.$draw(cards.length);\r\n              game.pause();\r\n              setTimeout(function () {\r\n                addv();\r\n                player.node.handcards1.insertBefore(frag1, player.node.handcards1.firstChild);\r\n                player.node.handcards2.insertBefore(frag2, player.node.handcards2.firstChild);\r\n                player.update();\r\n                if (player == game.me) ui.updatehl();\r\n                broadcast();\r\n                game.resume();\r\n              }, get.delayx(500, 500));\r\n            }\r\n            else if (Evt.animate == 'gain') {\r\n              player.$gain(cards);\r\n              game.pause();\r\n              setTimeout(function () {\r\n                addv();\r\n                player.node.handcards1.insertBefore(frag1, player.node.handcards1.firstChild);\r\n                player.node.handcards2.insertBefore(frag2, player.node.handcards2.firstChild);\r\n                player.update();\r\n                if (player == game.me) ui.updatehl();\r\n                broadcast();\r\n                game.resume();\r\n              }, get.delayx(700, 700));\r\n            }\r\n            else if (Evt.animate == 'gain2' || Evt.animate == 'draw2') {\r\n              var gain2t = 300;\r\n              if (player.$gain2(cards) && player == game.me) {\r\n                gain2t = 500;\r\n              }\r\n              game.pause();\r\n              setTimeout(function () {\r\n                addv();\r\n                player.node.handcards1.insertBefore(frag1, player.node.handcards1.firstChild);\r\n                player.node.handcards2.insertBefore(frag2, player.node.handcards2.firstChild);\r\n                player.update();\r\n                if (player == game.me) ui.updatehl();\r\n                broadcast();\r\n                game.resume();\r\n              }, get.delayx(gain2t, gain2t));\r\n            }\r\n            else if (Evt.source && (Evt.animate == 'give' || Evt.animate == 'giveAuto')) {\r\n              if (Evt.animate == 'give') Evt.source['$' + Evt.animate](cards, player);\r\n              else {\r\n                var givemap = { hs: [], ots: [] };\r\n                for (var i = 0; i < cards.length; i++) {\r\n                  givemap[Evt.relatedLose && Evt.relatedLose.hs && Evt.relatedLose.hs.contains(cards[i]) ? 'hs' : 'ots'].push(cards[i]);\r\n                }\r\n                if (givemap.hs.length) Evt.source.$giveAuto(givemap.hs, player);\r\n                if (givemap.ots.length) Evt.source.$give(givemap.ots, player);\r\n              }\r\n              game.pause();\r\n              setTimeout(function () {\r\n                addv();\r\n                player.node.handcards1.insertBefore(frag1, player.node.handcards1.firstChild);\r\n                player.node.handcards2.insertBefore(frag2, player.node.handcards2.firstChild);\r\n                player.update();\r\n                if (player == game.me) ui.updatehl();\r\n                broadcast();\r\n                game.resume();\r\n              }, get.delayx(500, 500));\r\n            }\r\n            else {\r\n              addv();\r\n              player.node.handcards1.insertBefore(frag1, player.node.handcards1.firstChild);\r\n              player.node.handcards2.insertBefore(frag2, player.node.handcards2.firstChild);\r\n              player.update();\r\n              if (player == game.me) ui.updatehl();\r\n              broadcast();\r\n              Evt.finish();\r\n            }\r\n            if (Evt.log) {\r\n              game.log(player, '获得了', cards);\r\n            }\r\n          }, () => {\r\n            game.delayx();\r\n          }],\r\n          /**\r\n           * 失去牌至(弃牌堆|牌堆)，或将牌移动至武将牌上(special arena)\r\n           * @name content.lose\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          lose: [() => {\r\n            var evt = Evt.getParent();\r\n            if (evt.name != 'discard' && Evt.type != 'discard') {\r\n              Evt.delay = false;\r\n              return;\r\n            }\r\n            if (evt.delay === false) Evt.delay = false;\r\n            if (evt.animate != false) {\r\n              evt.discardid = lib.status.videoId++;\r\n              game.broadcastAll(function (player, cards, id) {\r\n                player.$throw(cards, null, 'nobroadcast');\r\n                var cardnodes = [];\r\n                cardnodes._discardtime = get.time();\r\n                for (var i = 0; i < cards.length; i++) {\r\n                  if (cards[i].clone) {\r\n                    cardnodes.push(cards[i].clone);\r\n                  }\r\n                }\r\n                ui.todiscard[id] = cardnodes;\r\n              }, player, cards, evt.discardid);\r\n              if (lib.config.sync_speed && cards[0] && cards[0].clone) {\r\n                if (evt.delay != false) {\r\n                  var waitingForTransition = get.time();\r\n                  evt.waitingForTransition = waitingForTransition;\r\n                  cards[0].clone.listenTransition(function () {\r\n                    if (_status.waitingForTransition == waitingForTransition && _status.paused) {\r\n                      game.resume();\r\n                    }\r\n                    delete evt.waitingForTransition;\r\n                  });\r\n                }\r\n                else if (evt.getParent().discardTransition) {\r\n                  delete evt.getParent().discardTransition;\r\n                  var waitingForTransition = get.time();\r\n                  evt.getParent().waitingForTransition = waitingForTransition;\r\n                  cards[0].clone.listenTransition(function () {\r\n                    if (_status.waitingForTransition == waitingForTransition && _status.paused) {\r\n                      game.resume();\r\n                    }\r\n                    delete evt.getParent().waitingForTransition;\r\n                  });\r\n                }\r\n              }\r\n            }\r\n          }, () => {\r\n            Evt.gaintag_map = {};\r\n            var hs = [], es = [], js = [], ss = [];\r\n            if (Evt.insert_card && Evt.position == ui.cardPile) Evt.cards.reverse();\r\n            var hej = player.getCards('hejs');\r\n            Evt.stockcards = cards.slice(0);\r\n            for (var i = 0; i < cards.length; i++) {\r\n              if (cards[i].gaintag && cards[i].gaintag.length) {\r\n                Evt.gaintag_map[cards[i].cardid] = cards[i].gaintag.slice(0);\r\n                if (cards[i].hasGaintag('ming_')) Evt.gaintag_map[cards[i].cardid].push('ming_');\r\n                if (cards[i].hasGaintag('an_')) Evt.gaintag_map[cards[i].cardid].push('an_');\r\n                cards[i].removeGaintag(true);\r\n              }\r\n              if (!hej.contains(cards[i])) {\r\n                cards.splice(i--, 1);\r\n              }\r\n              else if (cards[i].parentNode) {\r\n                if (cards[i].parentNode.classList.contains('equips')) {\r\n                  cards[i].original = 'e';\r\n                  es.push(cards[i]);\r\n                }\r\n                else if (cards[i].parentNode.classList.contains('judges')) {\r\n                  cards[i].original = 'j';\r\n                  js.push(cards[i]);\r\n                }\r\n                else if (cards[i].parentNode.classList.contains('handcards')) {\r\n                  if (cards[i].classList.contains('glows')) {\r\n                    cards[i].original = 's';\r\n                    ss.push(cards[i]);\r\n                  }\r\n                  else {\r\n                    cards[i].original = 'h';\r\n                    hs.push(cards[i]);\r\n                  }\r\n                }\r\n                else {\r\n                  cards[i].original = null;\r\n                }\r\n              }\r\n\r\n              cards[i].style.transform += ' scale(0.2)';\r\n              cards[i].classList.remove('glow');\r\n              cards[i].classList.remove('glows');\r\n              cards[i].recheck();\r\n\r\n              var info = lib.card[cards[i].name];\r\n              if (info.destroy || cards[i]._destroy) {\r\n                cards[i].delete();\r\n                cards[i].destroyed = info.destroy || cards[i]._destroy;\r\n              }\r\n              else if (Evt.position) {\r\n                if (_status.discarded) {\r\n                  if (Evt.position == ui.discardPile) {\r\n                    _status.discarded.add(cards[i]);\r\n                  }\r\n                  else {\r\n                    _status.discarded.remove(cards[i]);\r\n                  }\r\n                }\r\n                if (Evt.insert_index) {\r\n                  Evt.position.insertBefore(cards[i], Evt.insert_index(Evt, cards[i]));\r\n                  cards[i].fix();\r\n                }\r\n                else if (Evt.insert_card) {\r\n                  Evt.position.insertBefore(cards[i], Evt.position.firstChild);\r\n                  cards[i].fix();\r\n                }\r\n                else if (Evt.position == ui.cardPile) {\r\n                  Evt.position.appendChild(cards[i]);\r\n                  cards[i].fix();\r\n                }\r\n                else cards[i].goto(Evt.position);\r\n              }\r\n              else {\r\n                cards[i].remove();\r\n              }\r\n              //if(ss.contains(cards[i])) cards.splice(i--,1);\r\n            }\r\n            if (player == game.me) ui.updatehl();\r\n            ui.updatej(player);\r\n            game.broadcast(function (player, cards, num) {\r\n              for (var i = 0; i < cards.length; i++) {\r\n                cards[i].classList.remove('glow');\r\n                cards[i].classList.remove('glows');\r\n                cards[i].fix();\r\n                cards[i].remove();\r\n              }\r\n              if (player == game.me) {\r\n                ui.updatehl();\r\n              }\r\n              ui.updatej(player);\r\n              _status.cardPileNum = num;\r\n            }, player, cards, ui.cardPile.childNodes.length);\r\n            game.addVideo('lose', player, [get.cardsInfo(hs), get.cardsInfo(es), get.cardsInfo(js), get.cardsInfo(ss)]);\r\n            Evt.cards2 = hs.concat(es);\r\n            player.getHistory('lose').push(Evt);\r\n            game.getGlobalHistory().cardMove.push(Evt);\r\n            player.update();\r\n            game.addVideo('loseAfter', player);\r\n            Evt.num = 0;\r\n            if (Evt.position == ui.ordering) {\r\n              var evt = Evt.relatedEvent || Evt.getParent();\r\n              if (!evt.orderingCards) evt.orderingCards = [];\r\n              if (!Evt.noOrdering && !Evt.cardsOrdered) {\r\n                Evt.cardsOrdered = true;\r\n                var next = game.createEvent('orderingDiscard', false, evt.getParent());\r\n                next.relatedEvent = evt;\r\n                next.setContent('orderingDiscard');\r\n              }\r\n              if (!Evt.noOrdering) {\r\n                evt.orderingCards.addArray(cards);\r\n                evt.orderingCards.addArray(ss);\r\n              }\r\n            }\r\n            else if (Evt.position == ui.cardPile) {\r\n              game.updateRoundNumber();\r\n            }\r\n            Evt.hs = hs;\r\n            Evt.es = es;\r\n            Evt.js = js;\r\n            Evt.ss = ss;\r\n          }, () => {\r\n            if (num < cards.length) {\r\n              let evt = Evt.getParent();\r\n              if (Evt.es.contains(cards[num])) {\r\n                Evt.moveEquip = false;\r\n                if ((evt.name == 'equip' && evt.cards.contains(cards[num]))\r\n                  || (Evt.getParent() && Evt.getParent().name != 'swapEquip')) Evt.moveEquip = true;\r\n                Evt.loseEquip = true;\r\n                player.removeEquipTrigger(cards[num], Evt.moveEquip);\r\n                var info = get.info(cards[num]);\r\n                if (info.onLose && (!info.filterLose || info.filterLose(cards[num], player))) {\r\n                  Evt.goto(3);\r\n                  return;\r\n                }\r\n              }\r\n              Evt.num++;\r\n              Evt.redo();\r\n            }\r\n            else {\r\n              if (Evt.loseEquip) {\r\n                player.addEquipTrigger();\r\n              }\r\n              Evt.goto(4);\r\n            }\r\n          }, () => {\r\n            var info = get.info(cards[num]);\r\n            if (info.loseDelay != false && (player.isAlive() || info.forceDie)) {\r\n              player.popup(cards[num].name);\r\n              game.delayx();\r\n            }\r\n            if (Array.isArray(info.onLose)) {\r\n              for (var i = 0; i < info.onLose.length; i++) {\r\n                var next = game.createEvent('lose_' + cards[num].name);\r\n                next.setContent(info.onLose[i]);\r\n                if (info.forceDie) next.forceDie = true;\r\n                next.player = player;\r\n                next.card = cards[num];\r\n              }\r\n            }\r\n            else {\r\n              var next = game.createEvent('lose_' + cards[num].name);\r\n              next.setContent(info.onLose);\r\n              next.player = player;\r\n              if (info.forceDie) next.forceDie = true;\r\n              next.card = cards[num];\r\n            }\r\n            Evt.num++;\r\n            Evt.goto(2);\r\n          }, () => {\r\n            var evt = Evt.getParent();\r\n            if (evt.name != 'discard' && Evt.type != 'discard') return;\r\n            if (evt.delay != false) {\r\n              if (evt.waitingForTransition) {\r\n                _status.waitingForTransition = evt.waitingForTransition;\r\n                game.pause();\r\n              }\r\n              else {\r\n                game.delayx();\r\n              }\r\n            }\r\n          }],\r\n          /**\r\n           * 令角色受到伤害\r\n           * @name content.damage\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          damage: [() => {\r\n            Evt.forceDie = true;\r\n            Evt.trigger('damageBegin1');\r\n          }, () => {\r\n            Evt.trigger('damageBegin2');\r\n          }, () => {\r\n            Evt.trigger('damageBegin3');\r\n          }, () => {\r\n            Evt.trigger('damageBegin4');\r\n          }, () => {\r\n            if (num > 0 && player.hujia && !player.hasSkillTag('nohujia') && !(source && source.hasSkillTag('overHujia', true, {\r\n              name: Evt.card ? Evt.card.name : null,\r\n              target: player,\r\n              card: Evt.card\r\n            }))) {\r\n              if (num >= player.hujia) {\r\n                Evt.hujia = player.hujia;\r\n                num -= player.hujia;\r\n              }\r\n              else {\r\n                Evt.hujia = num;\r\n                num = 0;\r\n              }\r\n              player.changeHujia(-Evt.hujia).type = 'damage';\r\n            }\r\n            Evt.num = num;\r\n            if (num <= 0) {\r\n              Evt.trigger('damageZero');\r\n              delete Evt.filterStop;\r\n              Evt.finish();\r\n              Evt._triggered = null;\r\n            }\r\n            if (num > 0) {\r\n              Evt.trigger('damageHit');\r\n            }\r\n          }, () => {\r\n            if (lib.config.background_audio) {\r\n              game.playAudio('effect', 'damage' + (num > 1 ? '2' : ''));\r\n            }\r\n            game.broadcast(function (num) {\r\n              if (lib.config.background_audio) {\r\n                game.playAudio('effect', 'damage' + (num > 1 ? '2' : ''));\r\n              }\r\n            }, num);\r\n            var str = '受到了';\r\n            if (source) str += '来自<span class=\"bluetext\">' + (source == player ? '自己' : get.translation(source)) + '</span>的';\r\n            str += get.cnNumber(num) + '点';\r\n            if (Evt.nature) str += get.translation(Evt.nature) + '属性';\r\n            str += '伤害';\r\n            game.log(player, str);\r\n            if (player.stat[player.stat.length - 1].damaged == undefined) {\r\n              player.stat[player.stat.length - 1].damaged = num;\r\n            }\r\n            else {\r\n              player.stat[player.stat.length - 1].damaged += num;\r\n            }\r\n            if (source) {\r\n              source.getHistory('sourceDamage').push(Evt);\r\n              if (source.stat[source.stat.length - 1].damage == undefined) {\r\n                source.stat[source.stat.length - 1].damage = num;\r\n              }\r\n              else {\r\n                source.stat[source.stat.length - 1].damage += num;\r\n              }\r\n            }\r\n            player.getHistory('damage').push(Evt);\r\n            if (Evt.notrigger) {\r\n              player.changeHp(-num, false)._triggered = null;\r\n            }\r\n            else {\r\n              player.changeHp(-num, false);\r\n            }\r\n            if (Evt.animate !== false) {\r\n              player.$damage(source);\r\n              game.broadcastAll(function (nature, player) {\r\n                if (lib.config.animation && !lib.config.low_performance) {\r\n                  if (nature == 'fire') {\r\n                    player.$fire();\r\n                  }\r\n                  else if (nature == 'thunder') {\r\n                    player.$thunder();\r\n                  }\r\n                }\r\n              }, Evt.nature, player);\r\n              player.$damagepop(-num, Evt.nature);\r\n            }\r\n            if (!Evt.notrigger) {\r\n              if (num == 0) {\r\n                Evt.trigger('damageZero');\r\n                Evt._triggered = null;\r\n              }\r\n              else {\r\n                Evt.trigger('damage');\r\n              }\r\n            }\r\n          }, () => {\r\n            if (player.hp <= 0 && player.isAlive()) {\r\n              game.delayx();\r\n              player.dying(Evt);\r\n            }\r\n            if (source && lib.config.border_style == 'auto') {\r\n              var dnum = 0;\r\n              for (var j = 0; j < source.stat.length; j++) {\r\n                if (source.stat[j].damage != undefined) dnum += source.stat[j].damage;\r\n              }\r\n              if (dnum >= 2) {\r\n                if (lib.config.autoborder_start == 'silver') {\r\n                  dnum += 4;\r\n                }\r\n                else if (lib.config.autoborder_start == 'gold') {\r\n                  dnum += 8;\r\n                }\r\n              }\r\n              if (lib.config.autoborder_count == 'damage') {\r\n                source.node.framebg.dataset.decoration = '';\r\n                if (dnum >= 10) {\r\n                  source.node.framebg.dataset.auto = 'gold';\r\n                  if (dnum >= 12) source.node.framebg.dataset.decoration = 'gold';\r\n                }\r\n                else if (dnum >= 6) {\r\n                  source.node.framebg.dataset.auto = 'silver';\r\n                  if (dnum >= 8) source.node.framebg.dataset.decoration = 'silver';\r\n                }\r\n                else if (dnum >= 2) {\r\n                  source.node.framebg.dataset.auto = 'bronze';\r\n                  if (dnum >= 4) source.node.framebg.dataset.decoration = 'bronze';\r\n                }\r\n                if (dnum >= 2) {\r\n                  source.classList.add('topcount');\r\n                }\r\n              }\r\n              else if (lib.config.autoborder_count == 'mix') {\r\n                source.node.framebg.dataset.decoration = '';\r\n                switch (source.node.framebg.dataset.auto) {\r\n                  case 'bronze': if (dnum >= 4) source.node.framebg.dataset.decoration = 'bronze'; break;\r\n                  case 'silver': if (dnum >= 8) source.node.framebg.dataset.decoration = 'silver'; break;\r\n                  case 'gold': if (dnum >= 12) source.node.framebg.dataset.decoration = 'gold'; break;\r\n                }\r\n              }\r\n            }\r\n          }, () => {\r\n            if (!Evt.notrigger) Evt.trigger('damageSource');\r\n          }],\r\n          /**\r\n           * 角色回复血量\r\n           * @name content.recover\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          recover: function () {\r\n            if (lib.config.background_audio) {\r\n              game.playAudio('effect', 'recover');\r\n            }\r\n            game.broadcast(function () {\r\n              if (lib.config.background_audio) {\r\n                game.playAudio('effect', 'recover');\r\n              }\r\n            });\r\n            if (num > player.maxHp - player.hp) {\r\n              num = player.maxHp - player.hp;\r\n              Evt.num = num;\r\n            }\r\n            if (num > 0) {\r\n              player.changeHp(num, false);\r\n              game.broadcastAll(function (player) {\r\n                if (lib.config.animation && !lib.config.low_performance) {\r\n                  player.$recover();\r\n                }\r\n              }, player);\r\n              player.$damagepop(num, 'wood');\r\n              game.log(player, '回复了' + get.cnNumber(num) + '点' + get.translation('hp'));\r\n              Evt.result = num;\r\n            }\r\n            player.getHistory('recover').push(Evt);\r\n          },\r\n          /**\r\n           * 令角色失去血量\r\n           * @name content.loseHp\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          loseHp: [() => {\r\n            if (lib.config.background_audio) {\r\n              game.playAudio('effect', 'loseHp');\r\n            }\r\n            game.broadcast(function () {\r\n              if (lib.config.background_audio) {\r\n                game.playAudio('effect', 'loseHp');\r\n              }\r\n            });\r\n            game.log(player, '失去了' + get.cnNumber(num) + '点' + get.translation('hp'))\r\n            player.changeHp(-num);\r\n          }, () => {\r\n            if (player.hp <= 0) {\r\n              game.delayx();\r\n              player.dying(Evt);\r\n            }\r\n          }],\r\n          /**\r\n           * 双将模式下，如果“双将体力设置”选择为“平均值”，因此向下取整体力的角色可以摸一张牌\r\n           * @name content.doubleDraw\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          doubleDraw: [() => {\r\n            player.chooseBool('你的主副将体力上限之和是奇数，是否摸一张牌？');\r\n          }, () => {\r\n            if (result.bool) {\r\n              player.draw();\r\n            }\r\n          }],\r\n          /**\r\n           * 令角色减少血量上限\r\n           * @name content.loseMaxHp\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          loseMaxHp: [() => {\r\n            game.log(player, '减少了' + get.cnNumber(num) + '点' + get.translation('hp') + '上限');\r\n            player.maxHp -= num;\r\n            Evt.loseHp = Math.max(0, player.hp - player.maxHp);\r\n            player.update();\r\n          }, () => {\r\n            if (player.maxHp <= 0) {\r\n              player.die(Evt);\r\n            }\r\n          }],\r\n          /**\r\n           * 令角色增加血量上限\r\n           * @name content.gainMaxHp\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          gainMaxHp: [() => {\r\n            game.log(player, '增加了' + get.cnNumber(num) + '点' + get.translation('hp') + '上限');\r\n            player.maxHp += num;\r\n            player.update();\r\n          }],\r\n          /**\r\n           * 令角色改变血量(不能超过上限)\r\n           * @name content.changeHp\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          changeHp: [function () {\r\n            Evt.trigger('changeHpBegin');\r\n          }, function () {\r\n            player.hp += num;\r\n            if (isNaN(player.hp)) player.hp = 0;\r\n            if (player.hp > player.maxHp) player.hp = player.maxHp;\r\n            player.update();\r\n            if (Evt.popup !== false) {\r\n              player.$damagepop(num, 'water');\r\n            }\r\n            //改变体力后立即刷新濒死列表\r\n            if (_status.dying.contains(player) && player.hp > 0) {\r\n              _status.dying.remove(player);\r\n              game.broadcast(function (list) {\r\n                _status.dying = list;\r\n              }, _status.dying);\r\n              var evt = Evt.getParent('_save');\r\n              if (evt && evt.finish) evt.finish();\r\n              evt = Evt.getParent('dying');\r\n              if (evt && evt.finish) evt.finish()\r\n            }\r\n            Evt.trigger('changeHp');\r\n          }],\r\n          /**\r\n           * 令角色获得/失去护甲\r\n           * @name content.changeHujia\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          changeHujia: function () {\r\n            if (lib.config.background_audio) {\r\n              game.playAudio('effect', 'hujia');\r\n            }\r\n            game.broadcast(function () {\r\n              if (lib.config.background_audio) {\r\n                game.playAudio('effect', 'hujia');\r\n              }\r\n            });\r\n            player.hujia += num;\r\n            player.$damagepop((num > 0 ? '+' + num : num), 'gray');\r\n            if (num > 0) {\r\n              game.log(player, '获得了' + get.cnNumber(num) + '点护甲');\r\n            } else if (num < 0) {\r\n              if (Evt.type == 'damage') game.log(player, '的护甲抵挡了' + get.cnNumber(-num) + '点伤害');\r\n              //else if(Evt.type=='lose')\tgame.log(player,'失去了'+get.cnNumber(-num)+'点护甲');\r\n              else game.log(player, '失去了' + get.cnNumber(-num) + '点护甲');\r\n            }\r\n            if (player.hujia < 0) {\r\n              player.hujia = 0;\r\n            }\r\n            player.update();\r\n          },\r\n          /**\r\n           * 角色濒死事件\r\n           * @name content.dying\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          dying: [() => {\r\n            Evt.forceDie = true;\r\n            if (player.isDying() || player.hp > 0) {\r\n              Evt.finish();\r\n              return;\r\n            }\r\n            _status.dying.unshift(player);\r\n            game.broadcast(function (list) {\r\n              _status.dying = list;\r\n            }, _status.dying);\r\n            Evt.trigger('dying');\r\n            game.log(player, '濒死');\r\n          }, () => {\r\n            delete Evt.filterStop;\r\n            if (player.hp > 0) {\r\n              _status.dying.remove(player);\r\n              game.broadcast(function (list) {\r\n                _status.dying = list;\r\n              }, _status.dying);\r\n              Evt.finish();\r\n            }\r\n            else if (!Evt.skipTao) {\r\n              var next = game.createEvent('_save');\r\n              var start = false;\r\n              var starts = [_status.currentPhase, Evt.source, Evt.player, game.me, game.players[0]];\r\n              for (var i = 0; i < starts.length; i++) {\r\n                if (get.itemtype(starts[i]) == 'player') {\r\n                  start = starts[i]; break;\r\n                }\r\n              }\r\n              next.player = start;\r\n              next._trigger = Evt;\r\n              next.triggername = '_save';\r\n              next.forceDie = true;\r\n              next.setContent(lib.skill._save.content);\r\n            }\r\n          }, () => {\r\n            _status.dying.remove(player);\r\n            game.broadcast(function (list) {\r\n              _status.dying = list;\r\n            }, _status.dying);\r\n            if (player.hp <= 0 && !player.nodying) player.die(Evt.reason);\r\n          }],\r\n          /**\r\n           * 角色死亡事件\r\n           * @name content.die\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          die: [() => {\r\n            Evt.forceDie = true;\r\n            if (_status.roundStart == player) {\r\n              _status.roundStart = player.next || player.getNext() || game.players[0];\r\n            }\r\n            if (ui.land && ui.land.player == player) {\r\n              game.addVideo('destroyLand');\r\n              ui.land.destroy();\r\n            }\r\n            var unseen = false;\r\n            if (player.classList.contains('unseen')) {\r\n              player.classList.remove('unseen');\r\n              unseen = true;\r\n            }\r\n            var logvid = game.logv(player, 'die', source);\r\n            Evt.logvid = logvid;\r\n            if (unseen) {\r\n              player.classList.add('unseen');\r\n            }\r\n            if (source) {\r\n              game.log(player, '被', source, '杀害');\r\n              if (source.stat[source.stat.length - 1].kill == undefined) {\r\n                source.stat[source.stat.length - 1].kill = 1;\r\n              }\r\n              else {\r\n                source.stat[source.stat.length - 1].kill++;\r\n              }\r\n            }\r\n            else {\r\n              game.log(player, '阵亡')\r\n            }\r\n\r\n\r\n            // player.removeEquipTrigger();\r\n\r\n            // for(var i in lib.skill.globalmap){\r\n            //     if(lib.skill.globalmap[i].contains(player)){\r\n            //                  lib.skill.globalmap[i].remove(player);\r\n            //                  if(lib.skill.globalmap[i].length==0&&!lib.skill[i].globalFixed){\r\n            //                               game.removeGlobalSkill(i);\r\n            //                  }\r\n            //     }\r\n            // }\r\n\r\n            game.broadcastAll(function (player) {\r\n              player.classList.add('dead');\r\n              player.removeLink();\r\n              player.classList.remove('turnedover');\r\n              player.classList.remove('out');\r\n              player.node.count.innerHTML = '0';\r\n              player.node.hp.hide();\r\n              player.node.equips.hide();\r\n              player.node.count.hide();\r\n              player.previous.next = player.next;\r\n              player.next.previous = player.previous;\r\n              game.players.remove(player);\r\n              game.dead.push(player);\r\n              _status.dying.remove(player);\r\n\r\n              if (lib.config.background_speak) {\r\n                if (lib.character[player.name] && lib.character[player.name][4].contains('die_audio')) {\r\n                  game.playAudio('die', player.name);\r\n                }\r\n                // else if(true){\r\n                else {\r\n                  game.playAudio('die', player.name, function () {\r\n                    game.playAudio('die', player.name.slice(player.name.indexOf('_') + 1));\r\n                  });\r\n                }\r\n              }\r\n            }, player);\r\n\r\n            game.addVideo('diex', player);\r\n            if (Evt.animate !== false) {\r\n              player.$die(source);\r\n            }\r\n            if (player.hp != 0) {\r\n              player.changeHp(0 - player.hp, false).forceDie = true;\r\n            }\r\n          }, () => {\r\n            if (player.dieAfter) player.dieAfter(source);\r\n          }, () => {\r\n            Evt.trigger('die');\r\n          }, () => {\r\n            if (player.isDead()) {\r\n              if (!game.reserveDead) {\r\n                for (var mark in player.marks) {\r\n                  player.unmarkSkill(mark);\r\n                }\r\n                while (player.node.marks.childNodes.length > 1) {\r\n                  player.node.marks.lastChild.remove();\r\n                }\r\n                game.broadcast(function (player) {\r\n                  while (player.node.marks.childNodes.length > 1) {\r\n                    player.node.marks.lastChild.remove();\r\n                  }\r\n                }, player);\r\n              }\r\n              for (var i in player.tempSkills) {\r\n                player.removeSkill(i);\r\n              }\r\n              var skills = player.getSkills();\r\n              for (var i = 0; i < skills.length; i++) {\r\n                if (lib.skill[skills[i]].temp) {\r\n                  player.removeSkill(skills[i]);\r\n                }\r\n              }\r\n              if (_status.characterlist) {\r\n                if (lib.character[player.name]) _status.characterlist.add(player.name);\r\n                if (lib.character[player.name1]) _status.characterlist.add(player.name1);\r\n                if (lib.character[player.name2]) _status.characterlist.add(player.name2);\r\n              }\r\n              Evt.cards = player.getCards('hejs');\r\n              if (Evt.cards.length) {\r\n                player.discard(Evt.cards).forceDie = true;\r\n                //player.$throw(Evt.cards,1000);\r\n              }\r\n            }\r\n          }, () => {\r\n            if (player.dieAfter2) player.dieAfter2(source);\r\n          }, () => {\r\n            game.broadcastAll(function (player) {\r\n              if (game.online && player == game.me && !_status.over && !game.controlOver && !ui.exit) {\r\n                if (lib.mode[lib.configOL.mode].config.dierestart) {\r\n                  ui.create.exit();\r\n                }\r\n              }\r\n            }, player);\r\n            if (!_status.connectMode && player == game.me && !_status.over && !game.controlOver) {\r\n              ui.control.show();\r\n              if (get.config('revive') && lib.mode[lib.config.mode].config.revive && !ui.revive) {\r\n                ui.revive = ui.create.control('revive', ui.click.dierevive);\r\n              }\r\n              if (get.config('continue_game') && !ui.continue_game && lib.mode[lib.config.mode].config.continue_game && !_status.brawl && !game.no_continue_game) {\r\n                ui.continue_game = ui.create.control('再战', game.reloadCurrent);\r\n              }\r\n              if (get.config('dierestart') && lib.mode[lib.config.mode].config.dierestart && !ui.restart) {\r\n                ui.restart = ui.create.control('restart', game.reload);\r\n              }\r\n            }\r\n\r\n            if (!_status.connectMode && player == game.me && !game.modeSwapPlayer) {\r\n              // _status.auto=false;\r\n              if (ui.auto) {\r\n                // ui.auto.classList.remove('glow');\r\n                ui.auto.hide();\r\n              }\r\n              if (ui.wuxie) ui.wuxie.hide();\r\n            }\r\n\r\n            if (typeof _status.coin == 'number' && source && !_status.auto) {\r\n              if (source == game.me || source.isUnderControl()) {\r\n                _status.coin += 10;\r\n              }\r\n            }\r\n            if (source && lib.config.border_style == 'auto' && (lib.config.autoborder_count == 'kill' || lib.config.autoborder_count == 'mix')) {\r\n              switch (source.node.framebg.dataset.auto) {\r\n                case 'gold': case 'silver': source.node.framebg.dataset.auto = 'gold'; break;\r\n                case 'bronze': source.node.framebg.dataset.auto = 'silver'; break;\r\n                default: source.node.framebg.dataset.auto = lib.config.autoborder_start || 'bronze';\r\n              }\r\n              if (lib.config.autoborder_count == 'kill') {\r\n                source.node.framebg.dataset.decoration = source.node.framebg.dataset.auto;\r\n              }\r\n              else {\r\n                var dnum = 0;\r\n                for (var j = 0; j < source.stat.length; j++) {\r\n                  if (source.stat[j].damage != undefined) dnum += source.stat[j].damage;\r\n                }\r\n                source.node.framebg.dataset.decoration = '';\r\n                switch (source.node.framebg.dataset.auto) {\r\n                  case 'bronze': if (dnum >= 4) source.node.framebg.dataset.decoration = 'bronze'; break;\r\n                  case 'silver': if (dnum >= 8) source.node.framebg.dataset.decoration = 'silver'; break;\r\n                  case 'gold': if (dnum >= 12) source.node.framebg.dataset.decoration = 'gold'; break;\r\n                }\r\n              }\r\n              source.classList.add('topcount');\r\n            }\r\n          }],\r\n          /**\r\n           * 角色使用装备牌\r\n           * @name content.equip\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          equip: [() => {\r\n            console.log(card, cards)\r\n            if (cards) {\r\n              var owner = get.owner(cards[0]);\r\n              if (owner) owner.lose(card, ui.special, 'visible').set('type', 'equip').set('getlx', false);\r\n            }\r\n          }, () => {\r\n            if (Evt.cancelled) {\r\n              Evt.finish();\r\n              return;\r\n            }\r\n            if (cards[0].destroyed) {\r\n              if (player.hasSkill(cards[0].destroyed)) {\r\n                delete cards[0].destroyed;\r\n              }\r\n              else {\r\n                Evt.finish();\r\n                return;\r\n              }\r\n            }\r\n            if (Evt.draw) {\r\n              game.delay(0, 300);\r\n              player.$draw(cards);\r\n            }\r\n            var viewAs = typeof card == 'string' ? card : card.name;\r\n            Evt.viewAs = viewAs;\r\n            if (!lib.card[viewAs]) {\r\n              cards[0].fix();\r\n              cards[0].style.transform = '';\r\n              cards[0].classList.remove('drawinghidden');\r\n              delete cards[0]._transform;\r\n              game.cardsDiscard(cards[0]);\r\n              Evt.finish();\r\n            }\r\n          }, () => {\r\n            game.broadcast(function (player, card, viewAs) {\r\n              if (card.clone && (card.clone.parentNode == player.parentNode || card.clone.parentNode == ui.arena)) {\r\n                card.clone.moveDelete(player);\r\n                game.addVideo('gain2', player, get.cardsInfo([card]));\r\n              }\r\n            }, player, cards[0], Evt.viewAs);\r\n            if (cards[0].clone && (cards[0].clone.parentNode == player.parentNode || cards[0].clone.parentNode == ui.arena)) {\r\n              cards[0].clone.moveDelete(player);\r\n              game.addVideo('gain2', player, get.cardsInfo(cards));\r\n            }\r\n            player.equiping = true;\r\n          }, () => {\r\n            var info = get.info(card, false);\r\n            var current = player.getCards('e', function (card) {\r\n              if (info.customSwap) return info.customSwap(card);\r\n              return get.subtype(card, false) == info.subtype;\r\n            });\r\n            if (current.length) {\r\n              player.lose(current, false, 'visible').set('type', 'equip').set('getlx', false);\r\n              if (info.loseThrow) {\r\n                player.$throw(current);\r\n              }\r\n              Evt.swapped = true;\r\n              Evt.redo();\r\n            }\r\n            if (get.itemtype(card) != 'card') {\r\n              if (typeof card == 'string') cards[0].viewAs = card;\r\n              else cards[0].viewAs = card.name;\r\n            }\r\n            else {\r\n              delete cards[0].viewAs;\r\n            }\r\n          }, () => {\r\n            if (player.isMin() || player.countCards('e', { subtype: get.subtype(Evt.viewAs) })) {\r\n              Evt.finish();\r\n              game.cardsDiscard(cards[0]);\r\n              delete player.equiping;\r\n              return;\r\n            }\r\n            if (lib.config.background_audio) {\r\n              game.playAudio('effect', get.subtype(Evt.viewAs));\r\n            }\r\n            game.broadcast(function (type) {\r\n              if (lib.config.background_audio) {\r\n                game.playAudio('effect', type);\r\n              }\r\n            }, get.subtype(cards[0].viewAs));\r\n            if (cards[0].viewAs && cards[0].viewAs != cards[0].name) {\r\n              player.$equip(cards[0], cards[0].viewAs);\r\n              game.addVideo('equip', player, get.cardInfo(cards[0].viewAs));\r\n              game.log(player, '装备了<span class=\"yellowtext\">' + get.translation(cards[0].viewAs) + '</span>（', cards[0], '）');\r\n            }\r\n            else if (cards[0].originalName && cards[0].originalName != cards[0].name) {\r\n              player.$equip(cards[0]);\r\n              game.addVideo('equip', player, get.cardInfo(cards[0]));\r\n              game.log(player, '装备了', cards[0], '（【' + get.translation(cards[0].originalName) + '】）');\r\n            }\r\n            else {\r\n              player.$equip(cards[0]);\r\n              game.addVideo('equip', player, get.cardInfo(card));\r\n              game.log(player, '装备了', card);\r\n            }\r\n          }, () => {\r\n            var info = get.info(card, false);\r\n            if (info.onEquip && (!info.filterEquip || info.filterEquip(card, player))) {\r\n              if (Array.isArray(info.onEquip)) {\r\n                for (var i = 0; i < info.onEquip.length; i++) {\r\n                  var next = game.createEvent('equip_' + card.name);\r\n                  next.setContent(info.onEquip[i]);\r\n                  next.player = player;\r\n                  next.card = card;\r\n                }\r\n              }\r\n              else {\r\n                var next = game.createEvent('equip_' + card.name);\r\n                next.setContent(info.onEquip);\r\n                next.player = player;\r\n                next.card = card;\r\n              }\r\n              if (info.equipDelay != 'false') game.delayx();\r\n            }\r\n            delete player.equiping;\r\n            if (Evt.delay) {\r\n              game.delayx();\r\n            }\r\n          }],\r\n          /**\r\n           * 角色添加判定牌\r\n           * @name content.addJudge\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          addJudge: [() => {\r\n            if (cards) {\r\n              var owner = get.owner(cards[0]);\r\n              if (owner) {\r\n                Evt.relatedLose = owner.lose(cards, 'visible').set('getlx', false);\r\n              }\r\n            }\r\n          }, () => {\r\n            if (cards[0].destroyed) {\r\n              if (player.hasSkill(cards[0].destroyed)) {\r\n                delete cards[0].destroyed;\r\n              }\r\n              else {\r\n                Evt.finish();\r\n                return;\r\n              }\r\n            }\r\n            cards[0].fix();\r\n            cards[0].style.transform = '';\r\n            cards[0].classList.remove('drawinghidden');\r\n            delete cards[0]._transform;\r\n            var viewAs = typeof card == 'string' ? card : card.name;\r\n            if (!lib.card[viewAs] || !lib.card[viewAs].effect) {\r\n              game.cardsDiscard(cards[0]);\r\n            }\r\n            else {\r\n              cards[0].style.transform = '';\r\n              cards[0].classList.add('drawinghidden');\r\n              player.node.judges.insertBefore(cards[0], player.node.judges.firstChild);\r\n              if (_status.discarded) {\r\n                _status.discarded.remove(cards[0]);\r\n              }\r\n              ui.updatej(player);\r\n              game.broadcast(function (player, card, viewAs) {\r\n                card.fix();\r\n                card.style.transform = '';\r\n                card.classList.add('drawinghidden');\r\n                card.viewAs = viewAs;\r\n                if (viewAs && viewAs != card.name && (card.classList.contains('fullskin') || card.classList.contains('fullborder'))) {\r\n                  card.classList.add('fakejudge');\r\n                  card.node.background.innerHTML = lib.translate[viewAs + '_bg'] || get.translation(viewAs)[0]\r\n                }\r\n                else {\r\n                  card.classList.remove('fakejudge');\r\n                }\r\n                player.node.judges.insertBefore(card, player.node.judges.firstChild);\r\n                ui.updatej(player);\r\n                if (card.clone && (card.clone.parentNode == player.parentNode || card.clone.parentNode == ui.arena)) {\r\n                  card.clone.moveDelete(player);\r\n                  game.addVideo('gain2', player, get.cardsInfo([card]));\r\n                }\r\n              }, player, cards[0], viewAs);\r\n              if (cards[0].clone && (cards[0].clone.parentNode == player.parentNode || cards[0].clone.parentNode == ui.arena)) {\r\n                cards[0].clone.moveDelete(player);\r\n                game.addVideo('gain2', player, get.cardsInfo(cards));\r\n              }\r\n              // player.$gain2(cards);\r\n              if (get.itemtype(card) != 'card') {\r\n                if (typeof card == 'string') cards[0].viewAs = card;\r\n                else cards[0].viewAs = card.name;\r\n              }\r\n              else {\r\n                delete cards[0].viewAs;\r\n              }\r\n              if (cards[0].viewAs && cards[0].viewAs != cards[0].name) {\r\n                if (cards[0].classList.contains('fullskin') || cards[0].classList.contains('fullborder')) {\r\n                  cards[0].classList.add('fakejudge');\r\n                  cards[0].node.background.innerHTML = lib.translate[cards[0].viewAs + '_bg'] || get.translation(cards[0].viewAs)[0];\r\n                }\r\n                //姑且改成了取单牌的形式，以后需要叠多张牌的时候再改回来\r\n                game.log(player, '被贴上了<span class=\"yellowtext\">' + get.translation(cards[0].viewAs) + '</span>（', cards[0], '）');\r\n              }\r\n              else {\r\n                cards[0].classList.remove('fakejudge');\r\n                game.log(player, '被贴上了', cards);\r\n              }\r\n              game.addVideo('addJudge', player, [get.cardInfo(cards[0]), cards[0].viewAs]);\r\n            }\r\n          }],\r\n          /**\r\n           * 角色进行判定\r\n           * @name content.judge\r\n           * @type {GameCores.Bases.StateMachine}\r\n           * @property {!Object} Evt 本事件\r\n           * @property {!Object} Evt.result 将判定牌信息返回给父事件\r\n           */\r\n          judge: [() => {\r\n            var judgestr = get.translation(player) + '的' + Evt.judgestr + '判定';\r\n            Evt.videoId = lib.status.videoId++;\r\n            var cardj = Evt.directresult;\r\n            if (!cardj) {\r\n              if (player.getTopCards) cardj = player.getTopCards()[0];\r\n              else cardj = get.cards()[0];\r\n            }\r\n            var nextj = game.cardsGotoOrdering(cardj);\r\n            if (Evt.position != ui.discardPile) nextj.noOrdering = true;\r\n            player.judging.unshift(cardj);\r\n            game.addVideo('judge1', player, [get.cardInfo(player.judging[0]), judgestr, Evt.videoId]);\r\n            game.broadcastAll(function (player, card, str, id, cardid) {\r\n              var Evt;\r\n              if (game.online) {\r\n                Evt = {};\r\n              }\r\n              else {\r\n                Evt = _status.event;\r\n              }\r\n              if (game.chess) {\r\n                Evt.node = card.copy('thrown', 'center', ui.arena).animate('start');\r\n              }\r\n              else {\r\n                Evt.node = player.$throwordered(card.copy(), true);\r\n              }\r\n              if (lib.cardOL) lib.cardOL[cardid] = Evt.node;\r\n              Evt.node.cardid = cardid;\r\n              Evt.node.classList.add('thrownhighlight');\r\n              ui.arena.classList.add('thrownhighlight');\r\n              Evt.dialog = ui.create.dialog(str);\r\n              Evt.dialog.classList.add('center');\r\n              Evt.dialog.videoId = id;\r\n            }, player, player.judging[0], judgestr, Evt.videoId, get.id());\r\n\r\n            game.log(player, '进行' + Evt.judgestr + '判定，亮出的判定牌为', player.judging[0]);\r\n            game.delay(2);\r\n            if (!Evt.noJudgeTrigger) Evt.trigger('judge');\r\n          }, () => {\r\n            Evt.result = {\r\n              card: player.judging[0],\r\n              name: player.judging[0].name,\r\n              number: get.number(player.judging[0]),\r\n              suit: get.suit(player.judging[0]),\r\n              color: get.color(player.judging[0]),\r\n              node: Evt.node,\r\n            };\r\n            if (Evt.fixedResult) {\r\n              for (var i in Evt.fixedResult) {\r\n                Evt.result[i] = Evt.fixedResult[i];\r\n              }\r\n            }\r\n            Evt.result.judge = Evt.judge(Evt.result);\r\n            if (Evt.result.judge > 0) Evt.result.bool = true;\r\n            else if (Evt.result.judge < 0) Evt.result.bool = false;\r\n            else Evt.result.bool = null;\r\n            player.judging.shift();\r\n            game.checkMod(player, Evt.result, 'judge', player);\r\n            if (Evt.result.bool == true) {\r\n              player.popup('洗具');\r\n            }\r\n            else if (Evt.result.bool == false) {\r\n              player.popup('杯具');\r\n            }\r\n            if (Evt.clearArena != false) {\r\n              game.broadcastAll(ui.clear);\r\n            }\r\n            game.broadcast(function (id) {\r\n              var dialog = get.idDialog(id);\r\n              if (dialog) {\r\n                dialog.close();\r\n              }\r\n              ui.arena.classList.remove('thrownhighlight');\r\n            }, Evt.videoId);\r\n            Evt.dialog.close();\r\n            game.addVideo('judge2', null, Evt.videoId);\r\n            ui.arena.classList.remove('thrownhighlight');\r\n            game.log(player, '的判定结果为', Evt.result.card);\r\n            if (Evt.callback) {\r\n              var next = game.createEvent('judgeCallback', false);\r\n              next.player = player;\r\n              next.card = Evt.result.card;\r\n              next.judgeResult = get.copy(Evt.result);\r\n              next.setContent(Evt.callback);\r\n            }\r\n            else {\r\n              if (!get.owner(Evt.result.card)) {\r\n                if (Evt.position != ui.discardPile) Evt.position.appendChild(Evt.result.card);\r\n              }\r\n            }\r\n          }],\r\n          /**\r\n           * 角色武将牌翻面\r\n           * @name content.turnOver\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          turnOver: function () {\r\n            game.log(player, '翻面');\r\n            player.classList.toggle('turnedover');\r\n            game.broadcast(function (player) {\r\n              player.classList.toggle('turnedover');\r\n            }, player);\r\n            game.addVideo('turnOver', player, player.classList.contains('turnedover'));\r\n          },\r\n          /**\r\n           * 角色连环/解除连环\r\n           * @name content.link\r\n           * @type {GameCores.Bases.StateMachine}\r\n           */\r\n          link: function () {\r\n            if (player.isLinked()) {\r\n              game.log(player, '解除连环');\r\n            }\r\n            else {\r\n              game.log(player, '被连环');\r\n            }\r\n            if (lib.config.background_audio) {\r\n              game.playAudio('effect', 'link');\r\n            }\r\n            game.broadcast(function () {\r\n              if (lib.config.background_audio) {\r\n                game.playAudio('effect', 'link');\r\n              }\r\n            });\r\n            player.classList.remove('target');\r\n            if (get.is.linked2(player)) {\r\n              player.classList.toggle('linked2');\r\n            }\r\n            else {\r\n              player.classList.toggle('linked');\r\n            }\r\n            ui.updatej(player);\r\n            ui.updatem(player);\r\n            game.broadcast(function (player, linked) {\r\n              player.classList.remove('target');\r\n              if (get.is.linked2(player)) {\r\n                if (linked) {\r\n                  player.classList.add('linked2');\r\n                }\r\n                else {\r\n                  player.classList.remove('linked2');\r\n                }\r\n              }\r\n              else {\r\n                if (linked) {\r\n                  player.classList.add('linked');\r\n                }\r\n                else {\r\n                  player.classList.remove('linked');\r\n                }\r\n              }\r\n              ui.updatej(player);\r\n              ui.updatem(player);\r\n            }, player, player.isLinked());\r\n            game.addVideo('link', player, player.isLinked());\r\n          },\r\n          chooseToGuanxing: [() => {\r\n            if (player.isUnderControl()) {\r\n              game.swapPlayerAuto(player);\r\n            }\r\n            var cards = get.cards(num);\r\n            Evt.cards = cards;\r\n            var switchToAuto = (Evt.ai || function () {\r\n              _status.imchoosing = false;\r\n              if (Evt.dialog) Evt.dialog.close();\r\n              if (Evt.control) Evt.control.close();\r\n              var top = [];\r\n              var bottom;\r\n              cards.sort(function (a, b) {\r\n                return get.value(b, player) - get.value(a, player);\r\n              });\r\n              while (cards.length) {\r\n                if (get.value(cards[0], player) <= 5) break;\r\n                top.unshift(cards.shift());\r\n              }\r\n              bottom = cards;\r\n              for (var i = 0; i < top.length; i++) {\r\n                ui.cardPile.insertBefore(top[i], ui.cardPile.firstChild);\r\n              }\r\n              for (i = 0; i < bottom.length; i++) {\r\n                ui.cardPile.appendChild(bottom[i]);\r\n              }\r\n              player.popup(get.cnNumber(top.length) + '上' + get.cnNumber(bottom.length) + '下');\r\n              game.log(player, '将' + get.cnNumber(top.length) + '张牌置于牌堆顶');\r\n              game.delay(2);\r\n            });\r\n            var chooseButton = function (player, cards) {\r\n              var Evt = _status.event;\r\n              player = player || Evt.player;\r\n              cards = cards || Evt.cards;\r\n              Evt.top = [];\r\n              Evt.bottom = [];\r\n              Evt.status = true;\r\n              Evt.dialog = ui.create.dialog('按顺序选择置于牌堆顶的牌（先选择的在上）', cards);\r\n              for (var i = 0; i < Evt.dialog.buttons.length; i++) {\r\n                Evt.dialog.buttons[i].classList.add('pointerdiv');\r\n              }\r\n              Evt.switchToAuto = function () {\r\n                Evt._result = 'ai';\r\n                Evt.dialog.close();\r\n                Evt.control.close();\r\n                _status.imchoosing = false;\r\n              },\r\n                Evt.control = ui.create.control('ok', 'pileTop', 'pileBottom', function (link) {\r\n                  var Evt = _status.event;\r\n                  if (link == 'ok') {\r\n                    Evt._result = {\r\n                      top: [],\r\n                      bottom: []\r\n                    }\r\n                    for (var i = 0; i < Evt.top.length; i++) {\r\n                      Evt._result.top.push(Evt.top[i].link);\r\n                    }\r\n                    for (var i = 0; i < Evt.bottom.length; i++) {\r\n                      Evt._result.bottom.push(Evt.bottom[i].link);\r\n                    }\r\n                    Evt.dialog.close();\r\n                    Evt.control.close();\r\n                    game.resume();\r\n                    _status.imchoosing = false;\r\n                  }\r\n                  else if (link == 'pileTop') {\r\n                    Evt.status = true;\r\n                    Evt.dialog.content.childNodes[0].innerHTML = '按顺序选择置于牌堆顶的牌';\r\n                  }\r\n                  else {\r\n                    Evt.status = false;\r\n                    Evt.dialog.content.childNodes[0].innerHTML = '按顺序选择置于牌堆底的牌';\r\n                  }\r\n                })\r\n              for (var i = 0; i < Evt.dialog.buttons.length; i++) {\r\n                Evt.dialog.buttons[i].classList.add('selectable');\r\n              }\r\n              Evt.custom.replace.button = function (link) {\r\n                var Evt = _status.event;\r\n                if (link.classList.contains('target')) {\r\n                  link.classList.remove('target');\r\n                  Evt.top.remove(link);\r\n                }\r\n                else if (link.classList.contains('glow')) {\r\n                  link.classList.remove('glow');\r\n                  Evt.bottom.remove(link);\r\n                }\r\n                else if (Evt.status) {\r\n                  link.classList.add('target');\r\n                  Evt.top.unshift(link);\r\n                }\r\n                else {\r\n                  link.classList.add('glow');\r\n                  Evt.bottom.push(link);\r\n                }\r\n              }\r\n              Evt.custom.replace.window = function () {\r\n                for (var i = 0; i < _status.event.dialog.buttons.length; i++) {\r\n                  _status.event.dialog.buttons[i].classList.remove('target');\r\n                  _status.event.dialog.buttons[i].classList.remove('glow');\r\n                  _status.event.top.length = 0;\r\n                  _status.event.bottom.length = 0;\r\n                }\r\n              }\r\n              game.pause();\r\n              game.countChoose();\r\n            };\r\n            Evt.switchToAuto = switchToAuto;\r\n            if (Evt.isMine()) {\r\n              chooseButton();\r\n            }\r\n            else if (Evt.isOnline()) {\r\n              Evt.player.send(chooseButton, Evt.player, Evt.cards);\r\n              Evt.player.wait();\r\n              game.pause();\r\n            }\r\n            else {\r\n              Evt.switchToAuto();\r\n              Evt.finish();\r\n            }\r\n          }, () => {\r\n            var result = Evt.result || result;\r\n            if (!result || result == 'ai') {\r\n              Evt.switchToAuto();\r\n            }\r\n            else {\r\n              var top = result.top || [];\r\n              var bottom = result.bottom || [];\r\n              for (var i = 0; i < top.length; i++) {\r\n                ui.cardPile.insertBefore(top[i], ui.cardPile.firstChild);\r\n              }\r\n              for (i = 0; i < Evt.cards.length; i++) {\r\n                if (!top.contains(Evt.cards[i]) && !bottom.contains(Evt.cards[i])) {\r\n                  ui.cardPile.appendChild(Evt.cards[i]);\r\n                }\r\n              }\r\n              for (i = 0; i < bottom.length; i++) {\r\n                ui.cardPile.appendChild(bottom[i]);\r\n              }\r\n              player.popup(get.cnNumber(top.length) + '上' + get.cnNumber(Evt.cards.length - top.length) + '下');\r\n              game.log(player, '将' + get.cnNumber(top.length) + '张牌置于牌堆顶');\r\n              game.updateRoundNumber();\r\n              game.delay(2);\r\n            }\r\n          }],\r\n        },\r\n        /**\r\n         * 玩家方法，.player节点共用的方法（比如展示牌【showCard】）\r\n         * 角色\r\n         * @namespace\r\n         * @mixin\r\n         */\r\n        player: {\r\n          /**\r\n           * 检测本角色武将牌周围是否有牌\r\n           */\r\n          hasCardAround: function () {\r\n            let cards = [];\r\n            let skills = this.getSkills(true, false, false);\r\n            game.expandSkills(skills);\r\n            for (let i of skills) {\r\n              if (lib.skill[i] && lib.skill[i].cardAround) {\r\n                let key = [];\r\n                let storage = this.getStorage(i);\r\n                let method = lib.skill[i].cardAround;\r\n                if (Array.isArray(method)) {\r\n                  for (let j of method) key = key.concat(storage[j]);\r\n                }\r\n                else if (typeof method == 'function') {\r\n                  key = key.concat(method(this));\r\n                }\r\n                else if (Array.isArray(storage)) key = key.concat(storage);\r\n                else key.push(storage);\r\n                cards.addArray(key);\r\n              }\r\n            }\r\n            if (cards.length) return cards;\r\n            return false;\r\n          },\r\n          isYingV: function () {\r\n            var info = lib.character[this.name || this.name1];\r\n            if (info && info[4]) {\r\n              if (info[4].contains('yingV')) return true;\r\n            }\r\n          },\r\n          isGuoV: function () {\r\n            var info = lib.character[this.name || this.name1];\r\n            if (info && info[4]) {\r\n              if (info[4].contains('guoV')) return true;\r\n            }\r\n          },\r\n          /**\r\n           * 将一张牌置入本角色的判定区\r\n           */\r\n          addToJudge: function (card, source) {\r\n            let cards = (get.itemtype(card) == 'card') ? [card] : card;\r\n            if (source) source.$give(cards, this, false);\r\n            if (get.type(cards[0]) == 'delay') this.addJudge(cards[0]);\r\n            else if (get.color(cards[0]) == 'red' && this.canAddJudge('lebu')) this.addJudge({ name: 'lebu' }, cards);\r\n            else if (get.color(cards[0]) == 'black' && this.canAddJudge('bingliang')) this.addJudge({ name: 'bingliang' }, cards);\r\n          },\r\n          /**\r\n           * 判断一张牌能否本角色的判定区\r\n           */\r\n          canAddToJudge: function (card) {\r\n            if (get.type(card) == 'delay') return this.canAddJudge(card);\r\n            if (this.canAddJudge('lebu') && get.color(card) == 'red') return true\r\n            if (this.canAddJudge('bingliang') && get.color(card) == 'black') return true\r\n            return false;\r\n          },\r\n          //自创函数(升阶相关)\r\n          chooseShengjie: function () {\r\n            let next = game.createEvent('chooseShengjie');\r\n            next.player = this;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (get.itemtype(arguments[i]) == 'cards') next.materials = arguments[i];\r\n              else if (typeof arguments[i] == 'boolean') next.forced = arguments[i];\r\n              else if (typeof arguments[i] == 'string') next.prompt = arguments[i];\r\n              else if (get.itemtype(arguments[i]) == 'select' || typeof arguments[i] == 'number') next.select = arguments[i];\r\n              else if (typeof arguments[i] == 'function') next.filterProduct = arguments[i];\r\n              else if (typeof arguments[i] == 'function') next.filterMaterial = arguments[i];\r\n            }\r\n            if (!this.canShengjie.apply(this, arguments)) return;\r\n            if (next.prompt == undefined) next.prompt = '请选择升阶获得的卡牌';\r\n            if (next.select == undefined) next.select = [1, Infinity];\r\n            next.setContent('chooseShengjie');\r\n            return next;\r\n          },\r\n          canShengjie: function () {\r\n            if (lib.configOL.protect_beginner) return false;\r\n            let list = [];\r\n            if (!lib.cardPack.mode_derivation || !lib.cardPack.mode_derivation.length) return false;\r\n            for (var i = 0; i < lib.cardPack.mode_derivation.length; i++) {\r\n              var info = lib.card[lib.cardPack.mode_derivation[i]];\r\n              if (info && info.materials && (typeof info.materials == 'function' || Array.isArray(info.materials))) list.push(lib.cardPack.mode_derivation[i]);\r\n            }\r\n            var materials, select, filterProduct, bool = false;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (get.itemtype(arguments[i]) == 'cards') materials = arguments[i];\r\n              else if (get.itemtype(arguments[i]) == 'select' || typeof arguments[i] == 'number') select = arguments[i];\r\n              else if (typeof arguments[i] == 'function') filterProduct = arguments[i];\r\n            }\r\n            if (filterProduct) list = list.filter(filterProduct);\r\n            if (!materials || !list.length) return false;\r\n            if (select == undefined) select = [1, Infinity];\r\n            var materialList = [];\r\n            var cards = materials.slice(0);\r\n            var l = cards.length;\r\n            var all = Math.pow(l, 2);\r\n            for (var i = 1; i < all; i++) {\r\n              var array = [];\r\n              for (var j = 0; j < l; j++) {\r\n                if (Math.floor((i % Math.pow(2, j + 1)) / Math.pow(2, j)) > 0) array.push(cards[j])\r\n              }\r\n              if ((get.itemtype(select) == 'select' && array.length >= select[0] && array.length <= select[1])\r\n                || (typeof select == 'number' && array.length == select)) materialList.push(array);\r\n            }\r\n            for (var j of materialList) {\r\n              for (var k of list) {\r\n                var filter = get.info({ name: k }).materials;\r\n                if (Array.isArray(filter) && filter.length == j.length) {\r\n                  var mate = filter.slice(0);\r\n                  for (var l = 0; l < mate.length; l++) {\r\n                    for (var card of j) {\r\n                      if (get.is.filterCardBy(card, mate[l])) {\r\n                        mate.splice(l--, 1);\r\n                      }\r\n                    }\r\n                  }\r\n                  if (mate.length == 0) {\r\n                    bool = true;\r\n                  }\r\n                }\r\n                if (typeof filter == 'function') {\r\n                  bool = filter(j);\r\n                }\r\n              }\r\n            }\r\n            return bool;\r\n          },\r\n          //新函数\r\n          /**\r\n           * 将技能移入本角色的封锁列表\r\n           */\r\n          addSkillBlocker: function (skill) {\r\n            if (!this.storage.skill_blocker) this.storage.skill_blocker = [];\r\n            this.storage.skill_blocker.push(skill);\r\n          },\r\n          /**\r\n           * 将技能移出本角色的封锁列表\r\n           */\r\n          removeSkillBlocker: function (skill) {\r\n            if (this.storage.skill_blocker) {\r\n              this.storage.skill_blocker.remove(skill);\r\n              if (!this.storage.skill_blocker.length) delete this.storage.skill_blocker;\r\n            }\r\n          },\r\n          /**\r\n           * 将本角色的卡牌移入(目标角色)特殊区\r\n           */\r\n          loseToSpecial: function (cards, tag, target) {\r\n            var next = game.loseAsync({\r\n              player: this,\r\n              cards: cards,\r\n              tag: tag,\r\n              toStorage: true,\r\n              target: target || this,\r\n            });\r\n            next.setContent([() => {\r\n              player.lose(cards, ui.special).set('getlx', false);\r\n            }, () => {\r\n              target.directgains(cards, null, Evt.tag)\r\n            }]);\r\n            return next;\r\n          },\r\n          /**\r\n           * 为本角色的手牌添加标签\r\n           */\r\n          addGaintag: function (cards, tag) {\r\n            if (get.itemtype(cards) == 'card') cards = [cards];\r\n            game.addVideo('addGaintag', this, [get.cardsInfo(cards), tag]);\r\n            game.broadcastAll(function (player, cards, tag) {\r\n              var hs = player.getCards('h');\r\n              for (var i of cards) {\r\n                if (hs.contains(i)) i.addGaintag(tag);\r\n              }\r\n            }, this, cards, tag);\r\n          },\r\n          /**\r\n           * 为本角色手牌移除标签\r\n           */\r\n          removeGaintag: function (tag, cards) {\r\n            game.addVideo('removeGaintag', this, tag);\r\n            game.broadcastAll(function (player, tag, cards) {\r\n              cards = cards || player.getCards('h');\r\n              for (var i of cards) i.removeGaintag(tag);\r\n            }, this, tag, cards);\r\n          },\r\n          /**\r\n           * 判断本角色能否在濒死求桃事件中救治目标角色\r\n           * @param {string} target 目标角色\r\n           * @returns {!boolean} 可以救治返回`true`，不可以返回`false`\r\n           */\r\n          canSave: function (target) {\r\n            var player = this;\r\n            if (player.hasSkillTag('save', true, target, true)) return true;\r\n            var name = {}, hs = player.getCards('hs');\r\n            for (var i of hs) name[get.name(i)] = true;\r\n            for (var i in lib.card) {\r\n              if (lib.card[i].savable && (lib.inpile.contains(i) || name[i])) {\r\n                if (lib.filter.cardSavable({ name: i }, player, target) && (_status.connectMode || player.hasUsableCard(i))) return true;\r\n              }\r\n            }\r\n            return false;\r\n          },\r\n          /**\r\n           * 展示本角色\r\n           * @param {(0|1|2)} num 0:展示主将; 1: 展示副将; 2: 全部展示\r\n           * @param {?boolean} [log] 如果为true或未指定，输出日志；如果为false，不输出日志\r\n           * @returns {GameCores.Bases.Event}\r\n           */\r\n          showCharacter: function (num, log) {\r\n            var toShow = [];\r\n            if ((num == 0 || num == 2) && this.isUnseen(0)) toShow.add(this.name1);\r\n            if ((num == 1 || num == 2) && this.isUnseen(1)) toShow.add(this.name2);\r\n            if (!toShow.length) return;\r\n            lib.element.player.$showCharacter.apply(this, arguments);\r\n            var next = game.createEvent('showCharacter', false);\r\n            next.player = this;\r\n            next.num = num;\r\n            next.toShow = toShow;\r\n            next._args = arguments;\r\n            next.setContent('showCharacter');\r\n            return next;\r\n          },\r\n          /**\r\n           * 展示本角色(无事件)\r\n           * @param {(0|1|2)} num 0:展示主将; 1: 展示副将; 2: 全部展示\r\n           * @param {?boolean} [log] 如果为true或未指定，输出日志；如果为false，不输出日志\r\n           */\r\n          $showCharacter: function (num, log) {\r\n            if (num == 0 && !this.isUnseen(0)) {\r\n              return;\r\n            }\r\n            if (num == 1 && (!this.name2 || !this.isUnseen(1))) {\r\n              return;\r\n            }\r\n            if (!this.isUnseen(2)) {\r\n              return;\r\n            }\r\n            game.addVideo('showCharacter', this, num);\r\n            var skills;\r\n            switch (num) {\r\n              case 0:\r\n                if (log !== false) game.log(this, '展示了主将', '#b' + this.name1);\r\n                this.name = this.name1;\r\n                skills = lib.character[this.name][3] || [];\r\n                this.sex = lib.character[this.name][0];\r\n                if (this.group == 'unknown') this.group = lib.character[this.name][1];\r\n                this.classList.remove('unseen');\r\n                break;\r\n              case 1:\r\n                if (log !== false) game.log(this, '展示了副将', '#b' + this.name2);\r\n                skills = lib.character[this.name2][3] || [];\r\n                if (this.sex == 'unknown') this.sex = lib.character[this.name2][0];\r\n                if (this.name.indexOf('unknown') == 0) this.name = this.name2;\r\n                this.classList.remove('unseen2');\r\n                break;\r\n              case 2:\r\n                if (log !== false) {\r\n                  if (this.name2) game.log(this, '展示了主将', '#b' + this.name1, '、副将', '#b' + this.name2);\r\n                  else game.log(this, '展示了主将', '#b' + this.name1);\r\n                }\r\n                this.name = this.name1;\r\n                var skills = (lib.character[this.name][3] || []);\r\n                if (this.name2) skills = skills.concat(lib.character[this.name2][3] || []);\r\n                this.sex = lib.character[this.name][0];\r\n                if (this.group == 'unknown') this.group = lib.character[this.name][1];\r\n                this.classList.remove('unseen');\r\n                this.classList.remove('unseen2');\r\n                break;\r\n            }\r\n            if (!this.isUnseen(2)) {\r\n              delete this.storage.nohp;\r\n              this.hp = this.storage.rawHp + this.maxHp - 1;\r\n              this.maxHp = this.storage.rawMaxHp + this.maxHp - 1;\r\n              this.node.hp.show();\r\n              this.update();\r\n            }\r\n            game.broadcast(function (player, name, sex, num, group) {\r\n              player.group = group;\r\n              player.name = name;\r\n              player.sex = sex;\r\n              switch (num) {\r\n                case 0: player.classList.remove('unseen'); break;\r\n                case 1: player.classList.remove('unseen2'); break;\r\n                case 2: player.classList.remove('unseen'); player.classList.remove('unseen2'); break;\r\n              }\r\n              if (!player.isUnseen(2)) {\r\n                delete player.storage.nohp;\r\n                player.node.hp.show();\r\n                player.update();\r\n              }\r\n            }, this, this.name, this.sex, num, this.group);\r\n            for (var i = 0; i < skills.length; i++) {\r\n              if (this.hiddenSkills.contains(skills[i])) {\r\n                this.hiddenSkills.remove(skills[i]);\r\n                this.addSkill(skills[i]);\r\n              }\r\n            }\r\n            this.checkConflict();\r\n          },\r\n          /**\r\n           * 观星\r\n           * 本角色观看牌堆顶的`num`张牌并将其以任意顺序置于牌堆顶或牌堆底\r\n           * @param {number} num\r\n           * @returns {GameCores.Bases.Event}\r\n           */\r\n          chooseToGuanxing: function (num) {\r\n            var next = game.createEvent('chooseToGuanxing');\r\n            next.num = num || 1;\r\n            next.player = this;\r\n            next.setContent('chooseToGuanxing');\r\n            return next;\r\n          },\r\n          /**\r\n           * 向其他角色发送互动表情(本机)\r\n           * @param {!GameCores.GameObjects.Player} 互动的对象\r\n           * @param {!string} emotion 表情\r\n           */\r\n          $throwEmotion: function (target, name) {\r\n            game.addVideo('throwEmotion', this, [target.dataset.position, name]);\r\n            var getLeft = function (player) {\r\n              if (player == game.me && !ui.fakeme && !ui.chess) return player.getLeft() + player.node.avatar.offsetWidth / 2;\r\n              return player.getLeft() + player.offsetWidth / 2;\r\n            }\r\n            var player = this;\r\n            var emotion = ui.create.div('', '<div style=\"text-align:center\"> <img src=\"' + lib.assetURL + 'image/emotion/throw_emotion/' + name + '1.png\"> </div>', game.chess ? ui.chess : ui.window);\r\n            emotion.style.width = '60px';\r\n            emotion.style.height = '60px';\r\n            var width = emotion.offsetWidth / 2;\r\n            var height = emotion.offsetHeight / 2;\r\n            if (game.chess) width += 60;\r\n            var left = getLeft(player) - width;\r\n            var top = player.getTop() + player.offsetHeight / 3 - height;\r\n            emotion.style.left = left + 'px';\r\n            emotion.style.top = top + 'px';\r\n            var left2 = getLeft(target) - width;\r\n            var top2 = target.getTop() + target.offsetHeight / 3 - height;\r\n            emotion.style['z-index'] = 10;\r\n            emotion.style.transform = 'translateY(' + (top2 - top) + 'px) translateX(' + (left2 - left) + 'px)';\r\n            if (lib.config.background_audio) game.playAudio('effect', 'throw_' + name + get.rand(1, 2));\r\n            setTimeout(function () {\r\n              emotion.innerHTML = ('<div style=\"text-align:center\"> <img src=\"' + lib.assetURL + 'image/emotion/throw_emotion/' + name + '2.png\"> </div>');\r\n              setTimeout(function () {\r\n                emotion.delete();\r\n              }, 1200);\r\n            }, 600);\r\n          },\r\n          /**\r\n           * 本角色尝试播放一个技能动画[support online]\r\n           * @param {string} name 技能名\r\n           * @param {string} popname 弹出的名称，如果`popname`等于`name`，使用`get.skillTranslation(name, this)`作为弹出的名称\r\n           * @param {?boolean} [checkShow]\r\n           */\r\n          trySkillAnimate: function (name, popname, checkShow) {\r\n            if (!game.online && lib.config.skill_animation_type != 'off' && lib.skill[name] && lib.skill[name].skillAnimation) {\r\n              if (lib.config.skill_animation_type == 'default') {\r\n                checkShow = checkShow || 'main';\r\n              }\r\n              else {\r\n                checkShow = false;\r\n              }\r\n              if (lib.skill[name].textAnimation) {\r\n                checkShow = false;\r\n              }\r\n              this.$skill(lib.skill[name].animationStr || lib.translate[name], lib.skill[name].skillAnimation, lib.skill[name].animationColor, checkShow);\r\n              return;\r\n            }\r\n            var player = this;\r\n            game.broadcast(function (player, name, popname) {\r\n              player.trySkillAnimate(name, popname);\r\n            }, player, name, popname);\r\n            if (lib.animate.skill[name]) lib.animate.skill[name].apply(this, arguments);\r\n            else {\r\n              if (popname != name) this.popup(popname, 'water', false);\r\n              else this.popup(get.skillTranslation(name, this), 'water', false);\r\n            }\r\n          },\r\n          /**\r\n           * 本角色尝试播放一个游戏牌动画[support online]\r\n           * @param {!GameCores.GameObjects.Card} card\r\n           * @param {string} name 游戏牌名\r\n           * @param {string} nature 属性\r\n           * @param {?string} [popname] 弹出的名称，如果未指定，使用`name`作为弹出的名称\r\n           */\r\n          tryCardAnimate: function (card, name, nature, popname) {\r\n            var player = this;\r\n            game.broadcast(function (player, card, name, nature, popname) {\r\n              player.tryCardAnimate(card, name, nature, popname);\r\n            }, player, card, name, nature, popname);\r\n            if (lib.animate.card[card.name]) lib.animate.card[card.name].apply(this, arguments);\r\n            else {\r\n              if (!lib.config.show_card_prompt) return;\r\n              if (get.type(card) == 'equip' && lib.config.hide_card_prompt_equip) return;\r\n              if (get.type(card) == 'basic' && lib.config.hide_card_prompt_basic) return;\r\n              if (popname) player.popup({ name: card.name, nature: card.nature }, nature, false);\r\n              else player.popup(name, nature, false);\r\n            }\r\n          },\r\n          hasUsableCard: function (name) {\r\n            var player = this;\r\n            if (player.countCards('hs', name)) return true;\r\n            var skills = player.getSkills(true).concat(lib.skill.global);\r\n            game.expandSkills(skills);\r\n            for (var i = 0; i < skills.length; i++) {\r\n              var ifo = get.info(skills[i]);\r\n              if (ifo.viewAs && typeof ifo.viewAs != 'function' && ifo.viewAs.name == name) {\r\n                if (!ifo.viewAsFilter || ifo.viewAsFilter(player)) {\r\n                  return true;\r\n                }\r\n              }\r\n              else {\r\n                var hiddenCard = get.info(skills[i]).hiddenCard;\r\n                if (typeof hiddenCard == 'function' && hiddenCard(player, name)) {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n          },\r\n          /**\r\n           * 判断目标角色是否在本角色的攻击范围内\r\n           * @param {string} to 目标角色\r\n           * @returns {!boolean} 在范围内返回`true`，在范围外返回`false`\r\n           */\r\n          inRange: function (to) {\r\n            var from = this;\r\n            if (from == to || from.hasSkill('undist') || to.hasSkill('undist')) return false;\r\n            if (!game.players.contains(from) && !game.dead.contains(from)) return false;\r\n            if (!game.players.contains(to) && !game.dead.contains(to)) return false;\r\n            var mod1 = game.checkMod(from, to, 'unchanged', 'inRange', from);\r\n            if (mod1 != 'unchanged') return mod1;\r\n            var mod2 = game.checkMod(from, to, 'unchanged', 'inRangeOf', to);\r\n            if (mod2 != 'unchanged') return mod2;\r\n            if (from.getAttackRange() < 1) return false;\r\n            var player = from, m, n = 1, i;\r\n            var fxy, txy;\r\n            if (game.chess) {\r\n              fxy = from.getXY();\r\n              txy = to.getXY();\r\n              n = Math.abs(fxy[0] - txy[0]) + Math.abs(fxy[1] - txy[1]);\r\n            }\r\n            else if (to.isMin(true) || from.isMin(true)) { }\r\n            else {\r\n              var length = game.players.length;\r\n              var totalPopulation = game.players.length + game.dead.length + 1;\r\n              for (var iwhile = 0; iwhile < totalPopulation; iwhile++) {\r\n                if (player.nextSeat != to) {\r\n                  player = player.nextSeat;\r\n                  if (player.isAlive() && !player.isOut() && !player.hasSkill('undist') && !player.isMin(true)) n++;\r\n                }\r\n                else {\r\n                  break;\r\n                }\r\n              }\r\n              for (i = 0; i < game.players.length; i++) {\r\n                if (game.players[i].isOut() || game.players[i].hasSkill('undist') || game.players[i].isMin(true)) length--;\r\n              }\r\n              if (from.isDead()) length++;\r\n              if (to.isDead()) length++;\r\n              var left = from.hasSkillTag('left_hand');\r\n              var right = from.hasSkillTag('right_hand');\r\n              if (left === right) n = Math.min(n, length - n);\r\n              else if (left == true) n = length - n;\r\n            }\r\n            n = game.checkMod(from, to, n, 'globalFrom', from);\r\n            n = game.checkMod(from, to, n, 'globalTo', to);\r\n            m = n;\r\n            m = game.checkMod(from, to, m, 'attackFrom', from);\r\n            m = game.checkMod(from, to, m, 'attackTo', to);\r\n            var equips1 = from.getCards('e', function (card) {\r\n              return !ui.selected.cards || !ui.selected.cards.contains(card);\r\n            }), equips2 = to.getCards('e', function (card) {\r\n              return !ui.selected.cards || !ui.selected.cards.contains(card);\r\n            });\r\n            for (i = 0; i < equips1.length; i++) {\r\n              var info = get.info(equips1[i]).distance;\r\n              if (!info) continue;\r\n              if (info.globalFrom) {\r\n                m += info.globalFrom;\r\n                n += info.globalFrom;\r\n              }\r\n              if (info.attackFrom) {\r\n                m += info.attackFrom;\r\n              }\r\n            }\r\n            for (i = 0; i < equips2.length; i++) {\r\n              var info = get.info(equips2[i]).distance;\r\n              if (!info) continue;\r\n              if (info.globalTo) {\r\n                m += info.globalTo;\r\n                n += info.globalTo;\r\n              }\r\n              if (info.attaclTo) {\r\n                m += info.attaclTo;\r\n              }\r\n            }\r\n            return m <= 1;\r\n          },\r\n          /**\r\n           * 判断本角色是否在目标角色的攻击范围内\r\n           * @param {string} source 目标角色\r\n           * @returns {!boolean} 在范围内返回`true`，在范围外返回`false`\r\n           */\r\n          inRangeOf: function (source) {\r\n            return source.inRange(this);\r\n          },\r\n          /**\r\n           * 获得本角色已损失的体力值\r\n           * @returns {!number} this.maxHp - Math.max(0, this.hp)\r\n           */\r\n          getDamagedHp: function () {\r\n            return this.maxHp - Math.max(0, this.hp);\r\n          },\r\n          changeGroup: function (group, log, broadcast) {\r\n            var player = this;\r\n            if (broadcast !== false) {\r\n              game.broadcast(function (player, group) {\r\n                player.group = group;\r\n                player.node.name.dataset.nature = get.groupnature(group);\r\n              }, player, group);\r\n            }\r\n            player.group = group;\r\n            player.node.name.dataset.nature = get.groupnature(group);\r\n            if (log !== false) game.log(this, '将势力变为了', '#y' + get.translation(group + 2));\r\n          },\r\n          chooseToDuiben: function (target) {\r\n            var next = game.createEvent('chooseToDuiben');\r\n            next.player = this;\r\n            next.target = target;\r\n            next.setContent('chooseToDuiben');\r\n            return next;\r\n          },\r\n          chooseToPSS: function (target) {\r\n            var next = game.createEvent('chooseToPSS');\r\n            next.player = this;\r\n            next.target = target;\r\n            next.setContent('chooseToPSS');\r\n            return next;\r\n          },\r\n          chooseToEnable: function () {\r\n            var next = game.createEvent('chooseToEnable');\r\n            next.player = this;\r\n            next.setContent('chooseToEnable');\r\n            return next;\r\n          },\r\n          chooseToDisable: function (horse) {\r\n            var next = game.createEvent('chooseToDisable');\r\n            next.player = this;\r\n            if (horse) next.horse = true;\r\n            next.setContent('chooseToDisable');\r\n            return next;\r\n          },\r\n          countDisabled: function () {\r\n            if (!this.storage.disableEquip) return 0;\r\n            return this.storage.disableEquip.length;\r\n          },\r\n          isPhaseUsing: function (notmeisok) {\r\n            if (!notmeisok && _status.currentPhase != this) return false;\r\n            return _status.event.name == 'phaseUse' || _status.event.getParent('phaseUse').name == 'phaseUse';\r\n          },\r\n          swapEquip: function (target, subtype) {\r\n            var next = game.createEvent('swapEquip');\r\n            next.player = this;\r\n            next.target = target;\r\n            next.subtype = subtype;\r\n            next.setContent('swapEquip');\r\n            return next;\r\n          },\r\n          canCompare: function (target) {\r\n            if (this == target) return false;\r\n            if (!this.countCards('h') || !target.countCards('h')) return false;\r\n            if (this.hasSkillTag('noCompareSource') || target.hasSkillTag('noCompareTarget')) return false;\r\n            return true;\r\n          },\r\n          disableEquip: function (pos) {\r\n            if (typeof pos == 'number') pos = 'equip' + pos;\r\n            var next = game.createEvent('disableEquip');\r\n            next.player = this;\r\n            next.pos = pos;\r\n            next.source = _status.event.player;\r\n            next.setContent('disableEquip');\r\n            return next;\r\n          },\r\n          $disableEquip: function (skill) {\r\n            game.broadcast(function (player, skill) {\r\n              player.$disableEquip(skill);\r\n            }, this, skill);\r\n            var player = this;\r\n            if (!player.storage.disableEquip) player.storage.disableEquip = [];\r\n            player.storage.disableEquip.add(skill);\r\n            player.storage.disableEquip.sort();\r\n            var pos = { equip1: '武器栏', equip2: '防具栏', equip3: '+1马栏', equip4: '-1马栏', equip5: '宝物栏' }[skill];\r\n            if (!pos) return;\r\n            var card = game.createCard('feichu_' + skill, pos, '');\r\n            card.fix();\r\n            card.style.transform = '';\r\n            card.classList.remove('drawinghidden');\r\n            card.classList.add('feichu');\r\n            delete card._transform;\r\n            var equipNum = get.equipNum(card);\r\n            var equipped = false;\r\n            for (var i = 0; i < player.node.equips.childNodes.length; i++) {\r\n              if (get.equipNum(player.node.equips.childNodes[i]) >= equipNum) {\r\n                player.node.equips.insertBefore(card, player.node.equips.childNodes[i]);\r\n                equipped = true;\r\n                break;\r\n              }\r\n            }\r\n            if (!equipped) {\r\n              player.node.equips.appendChild(card);\r\n              if (_status.discarded) {\r\n                _status.discarded.remove(card);\r\n              }\r\n            }\r\n            return player;\r\n          },\r\n          enableEquip: function (pos) {\r\n            if (typeof pos == 'number') pos = 'equip' + pos;\r\n            var next = game.createEvent('enableEquip');\r\n            next.player = this;\r\n            next.pos = pos;\r\n            next.source = _status.event.player;\r\n            next.setContent('enableEquip');\r\n            return next;\r\n          },\r\n          $enableEquip: function (skill) {\r\n            game.broadcast(function (player, skill) {\r\n              player.$enableEquip(skill);\r\n            }, this, skill);\r\n            var player = this;\r\n            if (player.storage.disableEquip) player.storage.disableEquip.remove(skill);\r\n            for (var i = 0; i < player.node.equips.childNodes.length; i++) {\r\n              if (player.node.equips.childNodes[i].name == 'feichu_' + skill) {\r\n                player.node.equips.removeChild(player.node.equips.childNodes[i]);\r\n                break;\r\n              }\r\n            }\r\n            return player;\r\n          },\r\n          isDisabled: function (arg) {\r\n            if (typeof arg == 'number') arg = 'equip' + arg;\r\n            if (arg == 'equip6' && this.storage.disableEquip && (this.storage.disableEquip.contains('equip3') || this.storage.disableEquip.contains('equip4'))) return true;\r\n            if (this.storage.disableEquip && this.storage.disableEquip.contains(arg)) return true;\r\n            return false;\r\n          },\r\n          isEmpty: function (num) {\r\n            if (num == 6 || num == 'equip6') {\r\n              if (!this.isEmpty(3) || !this.isEmpty(4)) return false;\r\n            }\r\n            else if ([3, 4, 'equip3', 'equip4'].contains(num)) {\r\n              if (this.getEquip(6)) return false;\r\n            }\r\n            return !this.isDisabled(num) && !this.getEquip(num);\r\n          },\r\n          $disableJudge: function () {\r\n            var player = this;\r\n            var card = game.createCard('disable_judge', '', '');\r\n            player.storage._disableJudge = true;\r\n            card.fix();\r\n            card.classList.add('feichu');\r\n            card.style.transform = '';\r\n            card.classList.add('drawinghidden');\r\n            player.node.judges.insertBefore(card, player.node.judges.firstChild);\r\n            ui.updatej(player);\r\n          },\r\n          $enableJudge: function () {\r\n            var player = this;\r\n            player.storage._disableJudge = false;\r\n            for (var i = 0; i < player.node.judges.childNodes.length; i++) {\r\n              if (player.node.judges.childNodes[i].name == 'disable_judge') {\r\n                player.node.judges.removeChild(player.node.judges.childNodes[i]);\r\n                break;\r\n              }\r\n            }\r\n          },\r\n          disableJudge: function () {\r\n            var next = game.createEvent('disableJudge');\r\n            next.player = this;\r\n            next.source = _status.event.player;\r\n            next.setContent('disableJudge');\r\n            return next;\r\n          },\r\n          enableJudge: function () {\r\n            var next = game.createEvent('enableJudge');\r\n            next.player = this;\r\n            next.source = _status.event.player;\r\n            next.setContent('enableJudge');\r\n            return next;\r\n          },\r\n          //原有函数\r\n          /**\r\n           * 角色初始化\r\n           * @param {?string} character 角色名，如果未指定，函数直接返回undefined\r\n           * @param {(string|false)} character2 如果为角色名，创建双将角色；如果为false，创建单将\r\n           * @param {!boolean} skill 如果为true，添加技能；如果为false，不添加角色技能；该参数在`character2`参数为false时无效\r\n           * @returns {GameCores.GameObjects.Card} 角色对象\r\n           */\r\n          init: function (character, character2, skill) {\r\n            if (typeof character == 'string' && !lib.character[character]) {\r\n              lib.character[character] = get.character(character);\r\n            }\r\n            if (typeof character2 == 'string' && !lib.character[character2]) {\r\n              lib.character[character2] = get.character(character2);\r\n            }\r\n            if (!lib.character[character]) return;\r\n            if (get.is.jun(character2)) {\r\n              var tmp = character;\r\n              character = character2;\r\n              character2 = tmp;\r\n            }\r\n            if (character2 == false) {\r\n              skill = false;\r\n              character2 = null;\r\n            }\r\n            var info = lib.character[character];\r\n            if (!info) {\r\n              info = ['', '', 1, [], []];\r\n            }\r\n            if (!info[4]) {\r\n              info[4] = [];\r\n            }\r\n            var skills = info[3].slice(0);\r\n            this.clearSkills(true);\r\n            this.classList.add('fullskin');\r\n            if (!game.minskin && get.is.newLayout() && !info[4].contains('minskin')) {\r\n              this.classList.remove('minskin');\r\n              this.node.avatar.setBackground(character, 'character');\r\n            }\r\n            else {\r\n              this.node.avatar.setBackground(character, 'character');\r\n              if (info[4].contains('minskin')) {\r\n                this.classList.add('minskin');\r\n              }\r\n              else if (game.minskin) {\r\n                this.classList.add('minskin');\r\n              }\r\n              else {\r\n                this.classList.remove('minskin');\r\n              }\r\n            }\r\n\r\n            var hp1 = get.infoHp(info[2]);\r\n            var maxHp1 = get.infoMaxHp(info[2]);\r\n\r\n            this.node.avatar.show();\r\n            this.node.count.show();\r\n            this.node.equips.show();\r\n            this.name = character;\r\n            this.name1 = character;\r\n            this.sex = info[0];\r\n            this.group = info[1];\r\n            this.hp = hp1;\r\n            this.maxHp = maxHp1;\r\n            this.hujia = 0;\r\n            this.node.intro.innerHTML = lib.config.intro;\r\n            this.node.name.dataset.nature = get.groupnature(this.group);\r\n            lib.setIntro(this);\r\n            this.node.name.innerHTML = get[get.slimName2 ? 'slimName2' : 'slimName'](character);\r\n            if (this.classList.contains('minskin') && this.node.name.querySelectorAll('br').length >= 4) {\r\n              this.node.name.classList.add('long');\r\n            }\r\n            if (info[4].contains('hiddenSkill') && !this.noclick) {\r\n              if (!this.hiddenSkills) this.hiddenSkills = [];\r\n              this.hiddenSkills.addArray(skills);\r\n              skills = [];\r\n              this.classList.add(_status.video ? 'unseen_v' : 'unseen');\r\n              this.name = 'unknown';\r\n              if (!this.node.name_seat && !_status.video) {\r\n                this.node.name_seat = ui.create.div('.name.name_seat', get.verticalStr(get.translation(this.name)), this);\r\n                this.node.name_seat.dataset.nature = get.groupnature(this.group);\r\n              }\r\n              this.sex = 'male';\r\n              //this.group='unknown';\r\n              this.storage.nohp = true;\r\n              skills.add('g_hidden_ai');\r\n            }\r\n            if (character2 && lib.character[character2]) {\r\n              var info2 = lib.character[character2];\r\n              if (!info2) {\r\n                info2 = ['', '', 1, [], []];\r\n              }\r\n              if (!info2[4]) {\r\n                info2[4] = [];\r\n              }\r\n              this.classList.add('fullskin2');\r\n              this.node.avatar2.setBackground(character2, 'character');\r\n\r\n              this.node.avatar2.show();\r\n              this.name2 = character2;\r\n              var hp2 = get.infoHp(info2[2]);\r\n              var maxHp2 = get.infoMaxHp(info2[2]);\r\n              var double_hp;\r\n              if (_status.connectMode || get.mode() == 'single') {\r\n                double_hp = 'pingjun';\r\n              }\r\n              else {\r\n                double_hp = get.config('double_hp');\r\n              }\r\n              switch (double_hp) {\r\n                case 'pingjun': {\r\n                  this.maxHp = Math.floor((maxHp1 + maxHp2) / 2);\r\n                  this.hp = Math.floor((hp1 + hp2) / 2);\r\n                  this.singleHp = ((maxHp1 + maxHp2) % 2 === 1);\r\n                  break;\r\n                }\r\n                case 'zuidazhi': {\r\n                  this.maxHp = Math.max(maxHp1, maxHp2);\r\n                  this.hp = Math.max(hp1, hp2);\r\n                  break;\r\n                }\r\n                case 'zuixiaozhi': {\r\n                  this.maxHp = Math.min(maxHp1, maxHp2);\r\n                  this.hp = Math.min(hp1, hp2);\r\n                  break;\r\n                }\r\n                case 'zonghe': {\r\n                  this.maxHp = maxHp1 + maxHp2;\r\n                  this.hp = hp1 + hp2;\r\n                  break;\r\n                }\r\n                default: {\r\n                  this.maxHp = maxHp1 + maxHp2 - 3;\r\n                  this.hp = hp1 + hp2 - 3;\r\n                };\r\n              }\r\n              this.node.count.classList.add('p2');\r\n              if (info2[4].contains('hiddenSkill') && !this.noclick) {\r\n                if (!this.hiddenSkills) this.hiddenSkills = [];\r\n                this.hiddenSkills.addArray(info2[3]);\r\n                this.classList.add(_status.video ? 'unseen2_v' : 'unseen2');\r\n                this.storage.nohp = true;\r\n                skills.add('g_hidden_ai');\r\n              }\r\n              else skills = skills.concat(info2[3]);\r\n\r\n              this.node.name2.innerHTML = get.slimName(character2);\r\n            }\r\n            if (this.storage.nohp) {\r\n              this.storage.rawHp = this.hp;\r\n              this.storage.rawMaxHp = this.maxHp;\r\n              this.hp = 1;\r\n              this.maxHp = 1;\r\n              this.node.hp.hide();\r\n            }\r\n            if (skill != false) {\r\n              for (var i = 0; i < skills.length; i++) {\r\n                this.addSkill(skills[i]);\r\n              }\r\n              this.checkConflict();\r\n            }\r\n            lib.group.add(this.group);\r\n            if (this.inits) {\r\n              for (var i = 0; i < lib.element.player.inits.length; i++) {\r\n                lib.element.player.inits[i](this);\r\n              }\r\n            }\r\n            if (this._inits) {\r\n              for (var i = 0; i < this._inits.length; i++) {\r\n                this._inits[i](this);\r\n              }\r\n            }\r\n            this.update();\r\n            return this;\r\n          },\r\n          /**\r\n           * 角色初始化[support online]\r\n           * @param {string} name 玩家名\r\n           * @param {string} character 角色名\r\n           */\r\n          initOL: function (name, character) {\r\n            this.node.avatar.setBackground(character, 'character');\r\n            this.node.avatar.show();\r\n            this.node.name.innerHTML = get.verticalStr(name);\r\n            this.nickname = name;\r\n            this.avatar = character;\r\n            this.node.nameol.innerHTML = '';\r\n            if (lib.character[character]) this.sex = lib.character[character][0];\r\n          },\r\n          /**\r\n           * 在角色销毁时调用[support online]\r\n           */\r\n          uninitOL: function () {\r\n            this.node.avatar.hide();\r\n            this.node.name.innerHTML = '';\r\n            this.node.identity.firstChild.innerHTML = '';\r\n            delete this.nickname;\r\n            delete this.avatar;\r\n            delete this.sex;\r\n          },\r\n          /**\r\n           * 初始化房间\r\n           * @returns {GameCores.GameObjects.Player} this self\r\n           * @param {Array} info 房间信息\r\n           */\r\n          initRoom: function (info, info2) {\r\n            var str = '';\r\n            this.serving = false;\r\n            if (!info || info == 'server') {\r\n              this.roomempty = true;\r\n              str = '空房间';\r\n              this.roomfull = false;\r\n              this.roomgaming = false;\r\n              this.version = null;\r\n              if (info == 'server') {\r\n                this.serving = true;\r\n              }\r\n            }\r\n            else {\r\n              var config = info[2];\r\n              this.key = info[4];\r\n              this.roomempty = false;\r\n              str += get.modetrans(config);\r\n              str += ' 模式　';\r\n              for (var i = str.length; i < 11; i++) str += '　';\r\n              this.version = config.version;\r\n              if (config.gameStarted) {\r\n                str += '<span class=\"firetext\">游戏中</span>　';\r\n                if (config.observe && config.observeReady && this.version == lib.versionOL) {\r\n                  this.classList.remove('exclude');\r\n                }\r\n                else {\r\n                  this.classList.add('exclude');\r\n                }\r\n              }\r\n              else {\r\n                str += '<span class=\"greentext\">等待中</span>　';\r\n                if (this.version != lib.versionOL) {\r\n                  this.classList.add('exclude');\r\n                }\r\n                else {\r\n                  this.classList.remove('exclude');\r\n                }\r\n              }\r\n              this.maxHp = parseInt(config.number);\r\n              this.hp = Math.min(this.maxHp, info[3]);\r\n              if (this.hp < this.maxHp || config.gameStarted) str += ('人数：' + this.hp + '/' + this.maxHp);\r\n              else str += ('人数：<span class=\"firetext\">' + this.hp + '/' + this.maxHp + '</span>');\r\n\r\n              str += ('　(' + info[0].slice(0, 12) + ' 的房间)');\r\n              this.config = config;\r\n              if (this.hp == this.maxHp && !config.gameStarted) {\r\n                this.roomfull = true;\r\n              }\r\n              else {\r\n                this.roomfull = false;\r\n              }\r\n              if (config.gameStarted && (!config.observe || !config.observeReady)) {\r\n                this.roomgaming = true;\r\n              }\r\n              else {\r\n                this.roomgaming = false;\r\n              }\r\n            }\r\n            this.firstChild.innerHTML = str;\r\n            return this;\r\n          },\r\n          /**\r\n           * TODO - 重新初始化\r\n           * @param {*} from\r\n           * @param {*} to\r\n           * @param {*} maxHp\r\n           * @param {*} online\r\n           * @returns {(undefined|GameCores.GameObjects.Player)}\r\n           */\r\n          reinit: function (from, to, maxHp, online) {\r\n            var info1 = lib.character[from];\r\n            var info2 = lib.character[to];\r\n            var smooth = true;\r\n            if (maxHp == 'nosmooth') {\r\n              smooth = false;\r\n              maxHp = null;\r\n            }\r\n            if (this.name2 == from) {\r\n              this.name2 = to;\r\n              if (this.isUnseen(0) && !this.isUnseen(1)) {\r\n                this.sex = info2[0];\r\n                this.name = to;\r\n              }\r\n              if (smooth) this.smoothAvatar(true);\r\n              this.node.avatar2.setBackground(to, 'character');\r\n              this.node.name2.innerHTML = get.slimName(to);\r\n            }\r\n            else if (this.name == from || this.name1 == from) {\r\n              if (this.name1 == from) {\r\n                this.name1 = to;\r\n              }\r\n              if (!this.classList.contains('unseen2')) {\r\n                this.name = to;\r\n                this.sex = info2[0];\r\n              }\r\n              if (smooth) this.smoothAvatar(false);\r\n              this.node.avatar.setBackground(to, 'character');\r\n              this.node.name.innerHTML = get.slimName(to);\r\n\r\n              if (this == game.me && ui.fakeme) {\r\n                ui.fakeme.style.backgroundImage = this.node.avatar.style.backgroundImage;\r\n              }\r\n            }\r\n            else {\r\n              return this;\r\n            }\r\n            if (online) {\r\n              return;\r\n            }\r\n            for (var i = 0; i < info1[3].length; i++) {\r\n              this.removeSkill(info1[3][i]);\r\n            }\r\n            for (var i = 0; i < info2[3].length; i++) {\r\n              this.addSkill(info2[3][i]);\r\n            }\r\n            if (Array.isArray(maxHp)) {\r\n              this.maxHp = maxHp[1];\r\n              this.hp = maxHp[0];\r\n            }\r\n            else {\r\n              var num;\r\n              if (maxHp === false) {\r\n                num = 0;\r\n              }\r\n              else {\r\n                if (typeof maxHp != 'number') {\r\n                  maxHp = get.infoMaxHp(info2[2]);\r\n                }\r\n                num = maxHp - get.infoMaxHp(info1[2]);\r\n              }\r\n              if (typeof this.singleHp == 'boolean') {\r\n                if (num % 2 != 0) {\r\n                  if (this.singleHp) {\r\n                    this.maxHp += (num + 1) / 2;\r\n                    this.singleHp = false;\r\n                  }\r\n                  else {\r\n                    this.maxHp += (num - 1) / 2;\r\n                    this.singleHp = true;\r\n                    if (!game.online) {\r\n                      this.doubleDraw();\r\n                    }\r\n                  }\r\n                }\r\n                else {\r\n                  this.maxHp += num / 2;\r\n                }\r\n              }\r\n              else {\r\n                this.maxHp += num;\r\n              }\r\n            }\r\n            game.broadcast(function (player, from, to, skills) {\r\n              player.reinit(from, to, null, true);\r\n              player.applySkills(skills);\r\n            }, this, from, to, get.skillState(this));\r\n            game.addVideo('reinit3', this, {\r\n              from: from,\r\n              to: to,\r\n              hp: this.maxHp,\r\n              avatar2: this.name2 == to\r\n            });\r\n            this.update();\r\n          },\r\n          /**\r\n           * 在角色销毁时调用\r\n           * @returns {!GameCores.GameObjects.Player} this self\r\n           */\r\n          uninit: function () {\r\n            for (var i = 1; i < 6; i++) {\r\n              if (this.isDisabled(i)) this.$enableEquip('equip' + i);\r\n            }\r\n            if (this.storage._disableJudge) {\r\n              game.broadcastAll(function (player) {\r\n                player.storage._disableJudge = false;\r\n                for (var i = 0; i < player.node.judges.childNodes.length; i++) {\r\n                  if (player.node.judges.childNodes[i].name == 'disable_judge') {\r\n                    player.node.judges.removeChild(player.node.judges.childNodes[i]);\r\n                    break;\r\n                  }\r\n                }\r\n              }, this);\r\n            }\r\n            this.node.avatar.hide();\r\n            this.node.count.hide();\r\n            if (this.node.wuxing) {\r\n              this.node.wuxing.hide();\r\n            }\r\n            if (this.node.name_seat) {\r\n              this.node.name_seat.remove();\r\n              delete this.node.name_seat;\r\n            }\r\n            if (this.storage.nohp) this.node.hp.show();\r\n            this.classList.remove('unseen');\r\n            this.classList.remove('unseen2');\r\n            delete this.name;\r\n            delete this.name1;\r\n            delete this.sex;\r\n            delete this.group;\r\n            delete this.hp;\r\n            delete this.maxHp;\r\n            delete this.hujia;\r\n            this.clearSkills(true);\r\n            this.node.identity.style.backgroundColor = '';\r\n            this.node.intro.innerHTML = '';\r\n            this.node.name.innerHTML = '';\r\n            this.node.hp.innerHTML = '';\r\n            this.node.count.innerHTML = '0';\r\n            if (this.name2) {\r\n              delete this.singleHp;\r\n              this.node.avatar2.hide();\r\n              this.node.name2.innerHTML = '';\r\n              this.classList.remove('fullskin2')\r\n              delete this.name2;\r\n              this.node.count.classList.remove('p2');\r\n            }\r\n            for (var mark in this.marks) {\r\n              this.marks[mark].remove();\r\n            }\r\n            ui.updatem(this);\r\n\r\n            this.skipList = [];\r\n            this.skills = this.skills.contains('cangji_yozuru') ? ['cangji_yozuru'] : [];\r\n            this.initedSkills = [];\r\n            this.additionalSkills = {};\r\n            this.disabledSkills = {};\r\n            this.hiddenSkills = [];\r\n            this.awakenedSkills = [];\r\n            this.forbiddenSkills = {};\r\n            this.phaseNumber = 0;\r\n            this.stat = [{ card: {}, skill: {} }];\r\n            this.tempSkills = {};\r\n            this.storage = {};\r\n            this.marks = {};\r\n            this.ai = { friend: [], enemy: [], neutral: [] };\r\n\r\n            return this;\r\n          },\r\n          /**\r\n           * 返回`this.offsetLeft`\r\n           * @returns {!number}\r\n           */\r\n          getLeft: function () {\r\n            return this.offsetLeft;\r\n          },\r\n          /**\r\n           * 返回`this.offsetTop`\r\n           * @returns {!number}\r\n           */\r\n          getTop: function () {\r\n            return this.offsetTop;\r\n          },\r\n          /**\r\n           * @param {?boolean} [vice] 是否使用副将头像，如果为true则使用副将头像；如果为false或未指定，使用(主将)头像\r\n           * @param {?boolean} [video] 如果为true或未指定，添加动画；如果为false，不添加动画\r\n           */\r\n          smoothAvatar: function (vice, video) {\r\n            var div = ui.create.div('.fullsize');\r\n            if (vice) {\r\n              div.style.background = getComputedStyle(this.node.avatar2).background;\r\n              this.node.avatar2.appendChild(div);\r\n            }\r\n            else {\r\n              div.style.background = getComputedStyle(this.node.avatar).background;\r\n              this.node.avatar.appendChild(div);\r\n            }\r\n            ui.refresh(div);\r\n            div.style.transition = 'all 1s';\r\n            setTimeout(function () {\r\n              div.classList.add('removing');\r\n              setTimeout(function () {\r\n                div.remove();\r\n              }, 2000);\r\n            }, 100);\r\n            if (video != false) {\r\n              game.addVideo('smoothAvatar', this, vice);\r\n            }\r\n          },\r\n          /**\r\n           * 强制改变本角色座次，即使目标座次已经有角色存在\r\n           * @param {number} position\r\n           * @param {boolean} [video] 如果为true或未指定，添加动画；如果为false，不添加动画\r\n           */\r\n          changeSeat: function (position, video) {\r\n            var player = this;\r\n            if (video !== false) game.addVideo('changeSeat', player, position);\r\n            var rect1 = player.getBoundingClientRect();\r\n            player.style.transition = 'all 0s';\r\n            ui.refresh(player);\r\n            player.dataset.position = position;\r\n            var rect2 = player.getBoundingClientRect();\r\n            var dx = rect1.left - rect2.left;\r\n            var dy = rect1.top - rect2.top;\r\n            if ((game.chess || (player.dataset.position != 0 && position != 0)) && player.classList.contains('linked')) {\r\n              player.style.transform = 'rotate(-90deg) translate(' + (-dy) + 'px,' + (dx) + 'px)';\r\n            }\r\n            else {\r\n              player.style.transform = 'translate(' + (dx) + 'px,' + (dy) + 'px)';\r\n            }\r\n            setTimeout(function () {\r\n              player.style.transition = '';\r\n              ui.refresh(player);\r\n              player.style.transform = '';\r\n            }, 100);\r\n          },\r\n          /**\r\n           * 将数据(参数)传输至服务器\r\n           * @returns {!GameCores.GameObjects.Player} this self\r\n           */\r\n          send: function () {\r\n            if (!this.ws || this.ws.closed) return this;\r\n            this.ws.send.apply(this.ws, arguments);\r\n            return this;\r\n          },\r\n          /**\r\n           * 为本角色生成并注册ID，如果本角色的ID已经存在就重新生成；如果是在(联机|播放录播)的情况下，该函数不做操作\r\n           * @returns {!GameCores.GameObjects.Player} this self\r\n           */\r\n          getId: function () {\r\n            if (_status.video || _status.connectMode) return this;\r\n            if (this.playerid) {\r\n              delete game.playerMap[this.playerid];\r\n            }\r\n            this.playerid = get.id();\r\n            game.playerMap[this.playerid] = this;\r\n            return this;\r\n          },\r\n          /**\r\n           * 向其他角色发送互动表情[support online]\r\n           * @param {!GameCores.GameObjects.Player} 互动的对象\r\n           * @param {!string} emotion 表情\r\n           */\r\n          throwEmotion: function (target, emotion) {\r\n            game.broadcastAll(function (player, target, emotion) {\r\n              player.$throwEmotion(target, emotion);\r\n            }, this, target, emotion);\r\n          },\r\n          /**\r\n           * 本角色发送聊天表情\r\n           * @param {string} emotionPack 表情包\r\n           * @param {number} emotionID 表情ID\r\n           */\r\n          emotion: function (pack, id) {\r\n            var str = '<img src=\"##assetURL##image/emotion/' + pack + '/' + id + '.gif\" width=\"50\" height=\"50\">';\r\n            lib.element.player.say.call(this, str);\r\n            game.broadcast(function (id, str) {\r\n              if (lib.playerOL[id]) {\r\n                lib.playerOL[id].say(str);\r\n              }\r\n              else if (game.connectPlayers) {\r\n                for (var i = 0; i < game.connectPlayers.length; i++) {\r\n                  if (game.connectPlayers[i].playerid == id) {\r\n                    lib.element.player.say.call(game.connectPlayers[i], str);\r\n                    return;\r\n                  }\r\n                }\r\n              }\r\n            }, this.playerid, str);\r\n          },\r\n          /**\r\n           * 本角色发送聊天消息[support online]\r\n           * @param {!string} str 聊天消息\r\n           */\r\n          chat: function (str) {\r\n            if (get.is.banWords(str)) return;\r\n            lib.element.player.say.call(this, str);\r\n            game.broadcast(function (id, str) {\r\n              if (lib.playerOL[id]) {\r\n                lib.playerOL[id].say(str);\r\n              }\r\n              else if (game.connectPlayers) {\r\n                for (var i = 0; i < game.connectPlayers.length; i++) {\r\n                  if (game.connectPlayers[i].playerid == id) {\r\n                    lib.element.player.say.call(game.connectPlayers[i], str);\r\n                    return;\r\n                  }\r\n                }\r\n              }\r\n            }, this.playerid, str);\r\n          },\r\n          /**\r\n           * 本角色发送聊天消息(单机)\r\n           * @param {!string} str 聊天消息\r\n           */\r\n          say: function (str) {\r\n            str = str.replace(/##assetURL##/g, lib.assetURL);\r\n            var dialog = ui.create.dialog('hidden');\r\n            dialog.classList.add('static');\r\n            dialog.add('<div class=\"text\" style=\"word-break:break-all;display:inline\">' + str + '</div>');\r\n            dialog.classList.add('popped');\r\n            ui.window.appendChild(dialog);\r\n            var width = dialog.content.firstChild.firstChild.offsetWidth;\r\n            if (width < 190) {\r\n              dialog._mod_height = -16;\r\n            }\r\n            else {\r\n              dialog.content.firstChild.style.textAlign = 'left';\r\n            }\r\n            dialog.style.width = (width + 16) + 'px';\r\n            var refnode;\r\n            if (this.node && this.node.avatar && this.parentNode == ui.arena) {\r\n              refnode = this.node.avatar;\r\n            }\r\n            if (refnode) {\r\n              lib.placePoppedDialog(dialog, {\r\n                clientX: (ui.arena.offsetLeft + this.getLeft() + refnode.offsetLeft + refnode.offsetWidth / 2) * game.documentZoom,\r\n                clientY: (ui.arena.offsetTop + this.getTop() + refnode.offsetTop + refnode.offsetHeight / 4) * game.documentZoom\r\n              });\r\n            }\r\n            else {\r\n              lib.placePoppedDialog(dialog, {\r\n                clientX: (this.getLeft() + this.offsetWidth / 2) * game.documentZoom,\r\n                clientY: (this.getTop() + this.offsetHeight / 4) * game.documentZoom\r\n              });\r\n            }\r\n            if (dialog._mod_height) {\r\n              dialog.content.firstChild.style.padding = 0;\r\n            }\r\n            setTimeout(function () {\r\n              dialog.delete();\r\n            }, lib.quickVoice.indexOf(str) != -1 ? 3800 : 2000);\r\n            var name = get.translation(this.name);\r\n            var info = [name ? (name + '[' + this.nickname + ']') : this.nickname, str];\r\n            lib.chatHistory.push(info);\r\n            if (_status.addChatEntry) {\r\n              if (_status.addChatEntry._origin.parentNode) {\r\n                _status.addChatEntry(info, false);\r\n              }\r\n              else {\r\n                delete _status.addChatEntry;\r\n              }\r\n            }\r\n            if (lib.config.background_speak && lib.quickVoice.indexOf(str) != -1) {\r\n              game.playAudio('voice', (this.sex == 'female' ? 'female' : 'male'), lib.quickVoice.indexOf(str));\r\n            }\r\n          },\r\n          /**\r\n           * 显示投降按钮\r\n           */\r\n          showGiveup: function () {\r\n            this._giveUp = true;\r\n            if (this == game.me) {\r\n              ui.create.giveup();\r\n            }\r\n            else if (this.isOnline2()) {\r\n              this.send(ui.create.giveup);\r\n            }\r\n          },\r\n          /**\r\n           * 同步技能信息[support online]\r\n           * @param {Object} skills 要同步的技能信息\r\n           * @param {?Array<string>} skills.global 全局技能的信息\r\n           * @param {?Object} skills.skillinfo 技能模板信息\r\n           * @param {?Object} skills.stat 本角色的技能状态信息\r\n           * @param {?Object} skills.\"['playerid']\" 角色的技能信息\r\n           */\r\n          applySkills: function (skills) {\r\n            for (var i in skills) {\r\n              if (i == 'global') {\r\n                lib.skill.global = skills[i];\r\n              }\r\n              else if (i == 'skillinfo') {\r\n                for (var j in skills[i]) {\r\n                  if (!lib.skill[j]) {\r\n                    lib.skill[j] = {};\r\n                  }\r\n                  lib.skill[j].chooseButton = skills[i][j];\r\n                }\r\n              }\r\n              else if (i == 'stat') {\r\n                this.stat = [skills.stat];\r\n              }\r\n              else if (lib.playerOL[i]) {\r\n                for (var j in skills[i]) {\r\n                  lib.playerOL[i][j] = skills[i][j];\r\n                }\r\n              }\r\n            }\r\n          },\r\n          /**\r\n           * 返回本角色状态信息\r\n           * @returns {GameCores.GameObjects.Player~State}\r\n           */\r\n          getState: function () {\r\n            /**\r\n             * @name GameCores.GameObjects.Player~State\r\n             * @property {number} hp 当前血量\r\n             * @property {number} maxHp 最大血量\r\n             * @property {string} nickname 玩家昵称\r\n             * @property {string} sex 角色性别\r\n             * @property {string} group 角色势力\r\n             * @property {string} name 角色姓名\r\n             * @property {string} name1 角色(主将)姓名\r\n             * @property {string} name2 角色(副将)姓名\r\n             * @property {Array<GameCores.GameObjects.Card>} handcards 角色手牌\r\n             * @property {Array<string>} gaintag gaintag标签数组\r\n             * @property {Array<GameCores.GameObjects.Card>} equips 角色装备区的牌\r\n             * @property {Array<GameCores.GameObjects.Card>} judges 角色判定区的牌\r\n             * @property {Array<GameCores.GameObjects.Card>} specials 角色武将牌上的牌\r\n             * @property {Array<string>} disableJudge 对角色无效的判定数组\r\n             * @property {Array<(string|number)>} disableEquip 角色废除的装备(类型)数组\r\n             * @property {Array<(string|undefined)>} views 角色判定区牌的视为名数组，即使判定牌的视为名为空也会添加到该数组中，`views`与`judges`一一对应\r\n             * @property {number} position 角色位置(座次)\r\n             * @property {number} hujia 角色护甲\r\n             * @property {(boolean|undefined)} side 角色所属的一侧，如果`p1.side == p2.side`则认为p1与p2为同侧(友方)，否则为异侧(敌方)；该值仅在部分模式(vs等)中使用，在其他模式中默认为undefined\r\n             * @property {boolean} identityShown 是否显示身份\r\n             * @property {Array} identityNode [this.node.identity.innerHTML, this.node.identity.dataset.color] \r\n             * @property {string} identity 角色身份\r\n             * @property {boolean} dead 角色是否已死亡\r\n             * @property {boolean} linked 角色是否被链接\r\n             * @property {boolean} turnedover 角色是否翻面\r\n             * @property {number} phaseNumber 此时的回合计数\r\n             * @property {boolean} unseen\r\n             * @property {boolean} unseen2 \r\n             * @property {string} mode 当前的模式\r\n             */\r\n            var state = {\r\n              hp: this.hp,\r\n              maxHp: this.maxHp,\r\n              nickname: this.nickname,\r\n              sex: this.sex,\r\n              group: this.group,\r\n              name: this.name,\r\n              name1: this.name1,\r\n              name2: this.name2,\r\n              handcards: this.getCards('hs'),\r\n              gaintag: [],\r\n              equips: this.getCards('e'),\r\n              judges: this.getCards('j'),\r\n              specials: this.getCards('s'),\r\n              disableJudge: this.storage._disableJudge,\r\n              disableEquip: this.storage.disableEquip,\r\n              views: [],\r\n              position: parseInt(this.dataset.position),\r\n              hujia: this.hujia,\r\n              side: this.side,\r\n              identityShown: this.identityShown,\r\n              identityNode: [this.node.identity.innerHTML, this.node.identity.dataset.color],\r\n              identity: this.identity,\r\n              dead: this.isDead(),\r\n              linked: this.isLinked(),\r\n              turnedover: this.isTurnedOver(),\r\n              phaseNumber: this.phaseNumber,\r\n              unseen: this.isUnseen(0),\r\n              unseen2: this.isUnseen(1),\r\n            }\r\n            for (var i = 0; i < state.judges.length; i++) {\r\n              state.views[i] = state.judges[i].viewAs;\r\n            }\r\n            for (var i = 0; i < state.handcards.length; i++) {\r\n              state.gaintag[i] = state.handcards[i].gaintag;\r\n            }\r\n            if (this.getModeState) {\r\n              state.mode = this.getModeState();\r\n            }\r\n            return state;\r\n          },\r\n          /**\r\n           * 设置玩家昵称\r\n           * @param {string} [str] 玩家昵称，如果未指定或为空字符串，使用`this.nickname`。如果`this.nickname`的值也未指定，使用空字符串\r\n           * @returns {GameCores.GameObjects.Player} this self\r\n           */\r\n          setNickname: function (str) {\r\n            this.node.nameol.innerHTML = (str || this.nickname || '').slice(0, 12);\r\n            return this;\r\n          },\r\n          /**\r\n           * 设置头像[support online]\r\n           * @param {!string} name 武将名，如果是角色副将，则设置副将的头像；如果是主将，则设置主将的头像\r\n           * @param {!string} name2 新图片名(角色名)，用于设置背景；{@link HTMLDivElement#setBackground}\r\n           * @param {?boolean} [video] 如果为true或未指定，添加动画；如果为false，不添加动画\r\n           * @param {?boolean} [fakeme] 如果为true或未指定，设置{@link ui.fakeme}的背景图为头像图；如果为false，不设置\r\n           */\r\n          setAvatar: function (name, name2, video, fakeme) {\r\n            var node;\r\n            if (this.name2 == name) {\r\n              node = this.node.avatar2;\r\n              this.smoothAvatar(true, video);\r\n            }\r\n            else if (this.name == name) {\r\n              node = this.node.avatar;\r\n              this.smoothAvatar(false, video);\r\n            }\r\n            if (node) {\r\n              node.setBackground(name2, 'character');\r\n              if (this == game.me && ui.fakeme && fakeme !== false) {\r\n                ui.fakeme.style.backgroundImage = node.style.backgroundImage;\r\n              }\r\n              if (video != false) {\r\n                game.addVideo('setAvatar', this, [name, name2]);\r\n              }\r\n            }\r\n            game.broadcast(function (player, name, name2) {\r\n              player.setAvatar(name, name2, false);\r\n            }, this, name, name2);\r\n          },\r\n          /**\r\n           * 设置头像更新数组，每张头像更新后停留1s，全部更新完成后，还原头像\r\n           * @param {!string} name 武将名，如果是角色副将，则设置副将的头像；如果是主将，则设置主将的头像\r\n           * @param {Array<string>} list 头像名(角色名)数组\r\n           * @see {@link lib.element.player.setAvatar}\r\n           */\r\n          setAvatarQueue: function (name, list) {\r\n            var node;\r\n            var player = this;\r\n            if (player.name2 == name) {\r\n              node = player.node.avatar2;\r\n            }\r\n            else {\r\n              node = player.node.avatar;\r\n            }\r\n            if (node._avatarqueue) {\r\n              for (var i = 0; i < list.length; i++) {\r\n                node._avatarqueue.push(list[i]);\r\n              }\r\n            }\r\n            else {\r\n              var func = function () {\r\n                if (node._avatarqueue.length) {\r\n                  player.setAvatar(name, node._avatarqueue.shift(), false, false);\r\n                }\r\n                else {\r\n                  clearInterval(node._avatarqueueinterval);\r\n                  delete node._avatarqueue;\r\n                  delete node._avatarqueueinterval;\r\n                  player.setAvatar(name, name, false, false);\r\n                }\r\n              };\r\n              node._avatarqueue = list.slice(0);\r\n              node._avatarqueueinterval = setInterval(func, 1000);\r\n              func();\r\n            }\r\n            game.addVideo('setAvatarQueue', this, [name, list]);\r\n          },\r\n          /**\r\n           * 本角色闪烁头像\r\n           * @param {!string} skill 技能名，如果技能属于角色副将，则设置副将的头像，否则设置主将的头像\r\n           * @param {!string} name (角色|技能)名，如果是角色名，闪烁此角色的头像；如果是技能名，使用此技能所属角色的角色名\r\n           */\r\n          flashAvatar: function (skill, name) {\r\n            if (lib.skill[name] && !lib.character[name]) {\r\n              var stop = false;\r\n              var list = lib.config.all.characters.slice(0);\r\n              for (var i in lib.characterPack) {\r\n                list.add(i);\r\n              }\r\n              for (var i = 0; i < list.length; i++) {\r\n                for (var j in lib.characterPack[list[i]]) {\r\n                  if (lib.characterPack[list[i]][j][3].contains(name)) {\r\n                    name = j;\r\n                    stop = true;\r\n                    break;\r\n                  }\r\n                }\r\n                if (stop) {\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n            if (lib.character[this.name2] && lib.character[this.name2][3].contains(skill)) {\r\n              this.setAvatarQueue(this.name2, [name]);\r\n            }\r\n            else {\r\n              this.setAvatarQueue(this.name, [name]);\r\n            }\r\n          },\r\n          /**\r\n           * 本角色头像下绘制图像\r\n           * @param {!string} buff 技能名，如果技能属于角色副将，则设置副将的头像，否则设置主将的头像\r\n           * @param {!string} skill 技能名，如果技能属于角色副将，则设置副将的头像，否则设置主将的头像\r\n           * @param {!string} name (角色|技能)名，如果是角色名，闪烁此角色的头像；如果是技能名，使用此技能所属角色的角色名\r\n           */\r\n          buffAvatar: function (buff, skill, name) {\r\n            if (lib.skill[name] && !lib.character[name]) {\r\n              var stop = false;\r\n              var list = lib.config.all.characters.slice(0);\r\n              for (var i in lib.characterPack) {\r\n                list.add(i);\r\n              }\r\n              for (var i = 0; i < list.length; i++) {\r\n                for (var j in lib.characterPack[list[i]]) {\r\n                  if (lib.characterPack[list[i]][j][3].contains(name)) {\r\n                    name = j;\r\n                    stop = true;\r\n                    break;\r\n                  }\r\n                }\r\n                if (stop) {\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n            if (lib.character[this.name2] && lib.character[this.name2][3].contains(skill)) {\r\n              this.setAvatarQueue(this.name2, [name]);\r\n            }\r\n            else {\r\n              this.setAvatarQueue(this.name, [name]);\r\n            }\r\n          },\r\n          /**\r\n           * 同步本角色数据(联网)\r\n           * @returns {?GameCores.GameObjects.Player} this self；如果是回放模式且该函数被无参调用，返回空值(undefined)\r\n           */\r\n          update: function () {\r\n            if (_status.video && arguments.length == 0) return;\r\n            if (this.hp >= this.maxHp) this.hp = this.maxHp;\r\n            var hp = this.node.hp;\r\n            hp.style.transition = 'none';\r\n            game.broadcast(function (player, hp, maxHp, hujia) {\r\n              player.hp = hp;\r\n              player.maxHp = maxHp;\r\n              player.hujia = hujia;\r\n              player.update();\r\n            }, this, this.hp, this.maxHp, this.hujia);\r\n            if (!_status.video) {\r\n              if (this.hujia) {\r\n                this.markSkill('ghujia');\r\n              }\r\n              else {\r\n                this.unmarkSkill('ghujia');\r\n              }\r\n            }\r\n            if (!this.storage.nohp) {\r\n              var libHp = lib.character[(this.name && this.name.indexOf('unknown') == 0) ? this.name1 : this.name];\r\n              if (this.maxHp == Infinity) {\r\n                hp.innerHTML = '∞';\r\n              }\r\n              else if (libHp && libHp[2] && get.infoHp(libHp[2]) < 0) {\r\n                hp.innerHTML = this.hp + '/' + this.maxHp;\r\n                hp.classList.add('text');\r\n              }\r\n              else if (game.layout == 'default' && this.maxHp > 14) {\r\n                hp.innerHTML = this.hp + '/' + this.maxHp;\r\n                hp.classList.add('text');\r\n              }\r\n              else if (get.is.newLayout() &&\r\n                (\r\n                  this.maxHp > 9 ||\r\n                  (this.maxHp > 5 && this.classList.contains('minskin')) ||\r\n                  ((game.layout == 'mobile' || game.layout == 'long') && this.dataset.position == 0 && this.maxHp > 7)\r\n                )) {\r\n                hp.innerHTML = this.hp + '<br>/<br>' + this.maxHp + '<div></div>';\r\n                if (this.hp == 0) {\r\n                  hp.lastChild.classList.add('lost');\r\n                }\r\n                hp.classList.add('textstyle');\r\n                // hp.classList.remove('long');\r\n              }\r\n              else {\r\n                hp.innerHTML = '';\r\n                hp.classList.remove('text');\r\n                hp.classList.remove('textstyle');\r\n                while (this.maxHp > hp.childNodes.length) {\r\n                  ui.create.div(hp);\r\n                }\r\n                while (Math.max(0, this.maxHp) < hp.childNodes.length) {\r\n                  hp.removeChild(hp.lastChild);\r\n                }\r\n                for (var i = 0; i < this.maxHp; i++) {\r\n                  var index = i;\r\n                  if (get.is.newLayout()) {\r\n                    index = this.maxHp - i - 1;\r\n                  }\r\n                  if (i < this.hp) {\r\n                    hp.childNodes[index].classList.remove('lost');\r\n                  }\r\n                  else {\r\n                    hp.childNodes[index].classList.add('lost');\r\n                  }\r\n                }\r\n                // if(this.maxHp==9){\r\n                //     hp.classList.add('long');\r\n                // }\r\n                // else{\r\n                //     hp.classList.remove('long');\r\n                // }\r\n              }\r\n              if (hp.classList.contains('room')) {\r\n                hp.dataset.condition = 'high';\r\n              }\r\n              else if (this.hp == 0) {\r\n                hp.dataset.condition = '';\r\n              }\r\n              else if (this.hp > Math.round(this.maxHp / 2) || this.hp === this.maxHp) {\r\n                hp.dataset.condition = 'high';\r\n              }\r\n              else if (this.hp > Math.floor(this.maxHp / 3)) {\r\n                hp.dataset.condition = 'mid';\r\n              }\r\n              else {\r\n                hp.dataset.condition = 'low';\r\n              }\r\n\r\n              setTimeout(function () {\r\n                hp.style.transition = '';\r\n              });\r\n            }\r\n            var numh = this.countCards('h');\r\n            if (_status.video) {\r\n              numh = arguments[0];\r\n            }\r\n            if (numh >= 10) {\r\n              numh = numh.toString();\r\n              this.node.count.dataset.condition = 'low';\r\n              this.node.count.innerHTML = numh[0] + '<br>' + numh[1];\r\n            }\r\n            else {\r\n              if (numh > 5) {\r\n                this.node.count.dataset.condition = 'higher';\r\n              }\r\n              else if (numh > 2) {\r\n                this.node.count.dataset.condition = 'high';\r\n              }\r\n              else if (numh > 0) {\r\n                this.node.count.dataset.condition = 'mid';\r\n              }\r\n              else {\r\n                this.node.count.dataset.condition = 'none';\r\n              }\r\n              this.node.count.innerHTML = numh;\r\n            }\r\n            if (this.updates) {\r\n              for (var i = 0; i < lib.element.player.updates.length; i++) {\r\n                lib.element.player.updates[i](this);\r\n              }\r\n            }\r\n            if (!_status.video) {\r\n              game.addVideo('update', this, [this.countCards('h'), this.hp, this.maxHp, this.hujia]);\r\n            }\r\n            this.updateMarks();\r\n            return this;\r\n          },\r\n          /**\r\n           * 本角色的一个技能标记移除指定数量，如果这个技能当前(没有标记|标记数为0)，返回`undefined`；\r\n           * 此函数仅支持数值类型的标记，如果是非数值类型的标记，不做任何移除操作，返回`undefined`；\r\n           * 数值类型仅支持整数\r\n           * @param {!string} i 技能名，此函数会调用`this.storage[i]`获取该技能的标记数量\r\n           * @param {?number} [num] 正整数，标记要移除的数量；如果值为0或未指定，则使用数量 **1** 作为要移除的数量\r\n           * @param {?boolean} [log] 是否输出日志，如果为true或未指定，输出日志；如果为false，不输出日志\r\n           */\r\n          removeMark: function (i, num, log) {\r\n            if (typeof num != 'number' || !num) num = 1;\r\n            if (typeof this.storage[i] != 'number' || !this.storage[i]) return;\r\n            if (num > this.storage[i]) num = this.storage[i];\r\n            this.storage[i] -= num;\r\n            if (log !== false) {\r\n              var str = false;\r\n              var info = get.info(i);\r\n              if (info && info.intro && (info.intro.name || info.intro.name2)) str = info.intro.name2 || info.intro.name;\r\n              else str = lib.translate[i];\r\n              if (str) game.log(this, '移去了', get.cnNumber(num), '个', '#g【' + str + '】');\r\n            }\r\n            this.syncStorage(i);\r\n            this[this.storage[i] ? 'markSkill' : 'unmarkSkill'](i);\r\n          },\r\n          /**\r\n           * 本角色的一个技能标记添加指定数量；\r\n           * 此函数支持任意类型的标记，但不建议使用非数值类型的标记，因为对非数值类型的标记，会首先使用 0 值覆盖原值；\r\n           * 数值类型不支持浮点数\r\n           * @param {!string} i 技能名，此函数会调用`this.storage[i]`获取该技能的标记数量\r\n           * @param {?number} [num] 正整数，标记要添加的数量；如果值为0或未指定，则使用数量 **1** 作为要添加的数量\r\n           * @param {?boolean} [log] 是否输出日志，如果为true或未指定，输出日志；如果为false，不输出日志\r\n           */\r\n          addMark: function (i, num, log) {\r\n            if (typeof num != 'number' || !num) num = 1;\r\n            if (typeof this.storage[i] != 'number') this.storage[i] = 0;\r\n            this.storage[i] += num;\r\n            if (log !== false) {\r\n              var str = false;\r\n              var info = get.info(i);\r\n              if (info && info.intro && (info.intro.name || info.intro.name2)) str = info.intro.name2 || info.intro.name;\r\n              else str = lib.translate[i];\r\n              if (str) game.log(this, '获得了', get.cnNumber(num), '个', '#g【' + str + '】');\r\n            }\r\n            this.syncStorage(i);\r\n            this.markSkill(i);\r\n          },\r\n          /**\r\n           * 返回本角色一个技能的标记数\r\n           * @param {?string} [i] 技能名，如果是数值型标记，返回此技能的标记数；如果是数组型标记，返回数组的长度值；否则，返回0值\r\n           * @returns {!number}\r\n           */\r\n          countMark: function (i) {\r\n            if (this.storage[i] == undefined) return 0;\r\n            if (typeof this.storage[i] == 'number') return this.storage[i];\r\n            if (Array.isArray(this.storage[i])) return this.storage[i].length;\r\n            return 0;\r\n          },\r\n          /**\r\n           * 返回此角色是否有一个技能的标记\r\n           * 此函数仅支持数值型标记，对于非数值型标记，此函数总返回false\r\n           * @param {!string} i 技能名，此函数会调用`this.storage[i]`获取该技能的标记数量\r\n           * @returns {!boolean}\r\n           */\r\n          hasMark: function (i) {\r\n            return this.countMark(i) > 0;\r\n          },\r\n          /**\r\n           * 同步本角色一个技能标记的显示数值，如果是非数值类型的标记，不做同步操作，返回`this`\r\n           * @param {!string} i 技能名\r\n           * @param {?boolean} [storage] 是否同步标记数据，如果为true，同步标记(联网)；如果为false或未指定，不同步\r\n           */\r\n          updateMark: function (i, storage) {\r\n            if (!this.marks[i]) {\r\n              if (lib.skill[i] && lib.skill[i].intro && (this.storage[i] || lib.skill[i].intro.markcount)) {\r\n                this.markSkill(i);\r\n                if (!this.marks[i]) return this;\r\n              }\r\n              else {\r\n                return this;\r\n              }\r\n            }\r\n            if (storage && this.storage[i]) {\r\n              this.syncStorage(i);\r\n            }\r\n            if (i == 'ghujia' || ((!this.marks[i].querySelector('.image') || this.storage[i + '_markcount']) &&\r\n              lib.skill[i] && lib.skill[i].intro && !lib.skill[i].intro.nocount &&\r\n              (this.storage[i] || lib.skill[i].intro.markcount))) {\r\n              this.marks[i].classList.add('overflowmark')\r\n              var num = 0;\r\n              if (typeof lib.skill[i].intro.markcount == 'function') {\r\n                num = lib.skill[i].intro.markcount(this.storage[i], this);\r\n              }\r\n              else if (typeof this.storage[i + '_markcount'] == 'number') {\r\n                num = this.storage[i + '_markcount'];\r\n              }\r\n              else if (i == 'ghujia') {\r\n                num = this.hujia;\r\n              }\r\n              else if (typeof this.storage[i] == 'number') {\r\n                num = this.storage[i];\r\n              }\r\n              else if (Array.isArray(this.storage[i])) {\r\n                num = this.storage[i].length;\r\n              }\r\n              if (num) {\r\n                if (!this.marks[i].markcount) {\r\n                  this.marks[i].markcount = ui.create.div('.markcount.menubutton', this.marks[i]);\r\n                }\r\n                this.marks[i].markcount.innerHTML = num;\r\n              }\r\n              else if (this.marks[i].markcount) {\r\n                this.marks[i].markcount.delete();\r\n                delete this.marks[i].markcount;\r\n              }\r\n            }\r\n            else {\r\n              if (this.marks[i].markcount) {\r\n                this.marks[i].markcount.delete();\r\n                delete this.marks[i].markcount;\r\n              }\r\n              if (lib.skill[i].mark == 'auto') {\r\n                this.unmarkSkill(i);\r\n              }\r\n            }\r\n            return this;\r\n          },\r\n          /**\r\n           * 更新本角色全部数值型技能标记信息，不处理非数值标记\r\n           * @param {?string} [skillname] 技能名，同步本角色的一个技能标记数据然后同步更新(联网)；如果未指定，则不进行同步，仅在本机更新\r\n           */\r\n          updateMarks: function (connect) {\r\n            if (typeof connect == 'string' && _status.connectMode && !game.online) {\r\n              game.broadcast(function (player, storage, skill) {\r\n                player.storage[skill] = storage;\r\n                player.updateMarks();\r\n              }, this, this.storage[connect], connect);\r\n            }\r\n            for (var i in this.marks) {\r\n              this.updateMark(i);\r\n            }\r\n          },\r\n          num: function (arg1, arg2, arg3) {\r\n            if (get.itemtype(arg1) == 'position') {\r\n              return this.get(arg1, arg2, arg3).length;\r\n            }\r\n            else if (arg1 == 's') {\r\n              if (typeof arg2 == 'boolean') {\r\n                return game.expandSkills(this.getSkills(arg2).concat(lib.skill.global)).contains(arg3);\r\n              }\r\n              else {\r\n                return game.expandSkills(this.getSkills().concat(lib.skill.global)).contains(arg2);\r\n              }\r\n            }\r\n          },\r\n          line: function (target, config) {\r\n            if (get.itemtype(target) == 'players') {\r\n              for (var i = 0; i < target.length; i++) {\r\n                this.line(target[i], config);\r\n              }\r\n            }\r\n            else if (get.itemtype(target) == 'player') {\r\n              if (target == this) return;\r\n              game.broadcast(function (player, target, config) {\r\n                player.line(target, config);\r\n              }, this, target, config);\r\n              game.addVideo('line', this, [target.dataset.position, config]);\r\n              game.linexy([\r\n                this.getLeft() + this.offsetWidth / 2,\r\n                this.getTop() + this.offsetHeight / 2,\r\n                target.getLeft() + target.offsetWidth / 2,\r\n                target.getTop() + target.offsetHeight / 2\r\n              ], config, true);\r\n            }\r\n          },\r\n          line2: function (targets, config) {\r\n            this.line(targets[0], config);\r\n            targets = targets.slice(0);\r\n            for (var i = 1; i < targets.length; i++) {\r\n              (function (j) {\r\n                setTimeout(function () {\r\n                  targets[j - 1].line(targets[j], config);\r\n                }, lib.config.duration * i);\r\n              }(i));\r\n            }\r\n          },\r\n          getNext: function () {\r\n            if (this.hasSkill('undist')) return null;\r\n            var target = this;\r\n            for (var i = 0; i < game.players.length - 1; i++) {\r\n              target = target.next;\r\n              if (!target.hasSkill('undist')) {\r\n                return target;\r\n              }\r\n            }\r\n            return null;\r\n          },\r\n          getPrevious: function () {\r\n            if (this.hasSkill('undist')) return null;\r\n            var target = this;\r\n            for (var i = 0; i < game.players.length - 1; i++) {\r\n              target = target.previous;\r\n              if (!target.hasSkill('undist')) {\r\n                return target;\r\n              }\r\n            }\r\n            return null;\r\n          },\r\n          countUsed: function (card, type) {\r\n            if (type === true) {\r\n              var num = 0;\r\n              var history = this.getHistory('useCard');\r\n              for (var i = 0; i < history.length; i++) {\r\n                if (!card) num++;\r\n                else if (typeof card == 'string' && history[i].card && card == history[i].card.name) num++;\r\n                else if (typeof card == 'object' && history[i].card && card.name == history[i].card.name) num++;\r\n              }\r\n              return num;\r\n            }\r\n            var num;\r\n            var stat = this.getStat('card');\r\n            if (!card) {\r\n              num = 0;\r\n              for (var i in stat) {\r\n                if (typeof stat[i] == 'number') {\r\n                  console.log(i, stat[i])\r\n                  num += stat[i];\r\n                }\r\n              }\r\n              return num;\r\n            }\r\n            if (typeof card == 'object') {\r\n              card = card.name;\r\n            }\r\n            num = stat[card];\r\n            if (typeof num != 'number') return 0;\r\n            return num;\r\n          },\r\n          countSkill: function (skill) {\r\n            var num = this.getStat('skill')[skill];\r\n            if (num == undefined) return 0;\r\n            return num;\r\n          },\r\n          getStockSkills: function (unowned, unique, hidden) {\r\n            var list = [];\r\n            if (lib.character[this.name] && (hidden || !this.isUnseen(0))) {\r\n              list.addArray(lib.character[this.name][3]);\r\n            }\r\n            if (lib.character[this.name1] && (hidden || !this.isUnseen(0))) {\r\n              list.addArray(lib.character[this.name1][3]);\r\n            }\r\n            if (lib.character[this.name2] && (hidden || !this.isUnseen(1))) {\r\n              list.addArray(lib.character[this.name2][3]);\r\n            }\r\n            if (!unowned) {\r\n              for (var i = 0; i < list.length; i++) {\r\n                if (!this.hasSkill(list[i])) {\r\n                  list.splice(i--, 1);\r\n                }\r\n              }\r\n            }\r\n            if (!unique) {\r\n              for (var i = 0; i < list.length; i++) {\r\n                var info = lib.skill[list[i]];\r\n                if (!info || info.unique || info.temp || info.sub || info.charlotte) {\r\n                  list.splice(i--, 1);\r\n                }\r\n              }\r\n            }\r\n            return list;\r\n          },\r\n          /**\r\n           * 返回本角色(手牌|装备区|判定区|武将牌上)或任意位置组合的游戏牌\r\n           * @function lib.element.player.getCards\r\n           * @param {string} [position='h'] 游戏牌位置组合: [hesj]+\r\n           * @returns {!Array<GameCores.GameObjects.Card>}\r\n           */\r\n          /**\r\n           * 返回本角色所有牌中等于指定名称或手牌轴被视为指定名称的游戏牌\r\n           * @function lib.element.player.getCards\r\n           * @variation 2\r\n           * @param {string} [position='h'] 游戏牌位置: [hesj]+\r\n           * @param {!string} [name] 游戏牌名，返回所有名称等于该牌名，或者手牌中被视为此牌名的牌\r\n           * @returns {!Array<GameCores.GameObjects.Card>}\r\n           */\r\n          /**\r\n           * 返回本角色所有牌中满足特定条件的游戏牌\r\n           * @function lib.element.player.getCards\r\n           * @variation 3\r\n           * @param {string} [position='h'] 游戏牌位置: [hesj]+\r\n           * @param {?Object} [cond] 条件对象，每个属性对应一个匹配条件(游戏牌对象必须有该属性，否则该条件会被跳过，不会生效)，只要有一次匹配失败就将牌从结果数组中移除；如果未指定则跳过匹配过程\r\n           * @param {...(Array<(Object|string)>|string)} cond.'[keyname]' 匹配条件，如果`cond[keyname] == card[keyname] || cond[keyname].contains(card[keyname])`成立，则匹配成功\r\n           * @returns {!Array<GameCores.GameObjects.Card>}\r\n           */\r\n          /**\r\n           * getCards筛选函数\r\n           * @callback lib.element.player.getCards~filterCard\r\n           * @param {!GameCores.GameObjects.Card} card 游戏牌对象\r\n           * @returns {?boolean} true表示保留此游戏牌，false或未指定表示不保留\r\n           * @see {@link lib.element.player.getCards(4)}\r\n           */\r\n          /**\r\n           * 返回本角色所有牌中通过筛选函数的游戏牌\r\n           * @function lib.element.player.getCards\r\n           * @variation 4\r\n           * @param {string} [position='h'] 游戏牌位置: [hesj]+\r\n           * @param {?lib.element.player.getCards~filterCard} [filter] 筛选函数，如果未指定则跳过筛选过程\r\n           * @returns {!Array<GameCores.GameObjects.Card>}\r\n           */\r\n          getCards: function (arg1, arg2) {\r\n            if (typeof arg1 != 'string') {\r\n              arg1 = 'h';\r\n            }\r\n            var cards = [], cards1 = [];\r\n            var i, j;\r\n            for (i = 0; i < arg1.length; i++) {\r\n              if (arg1[i] == 'h') {\r\n                for (j = 0; j < this.node.handcards1.childElementCount; j++) {\r\n                  if (!this.node.handcards1.childNodes[j].classList.contains('removing') && !this.node.handcards1.childNodes[j].classList.contains('glows')) {\r\n                    cards.push(this.node.handcards1.childNodes[j]);\r\n                  }\r\n                }\r\n                for (j = 0; j < this.node.handcards2.childElementCount; j++) {\r\n                  if (!this.node.handcards2.childNodes[j].classList.contains('removing') && !this.node.handcards2.childNodes[j].classList.contains('glows')) {\r\n                    cards.push(this.node.handcards2.childNodes[j]);\r\n                  }\r\n                }\r\n              }\r\n              else if (arg1[i] == 's') {\r\n                for (j = 0; j < this.node.handcards1.childElementCount; j++) {\r\n                  if (!this.node.handcards1.childNodes[j].classList.contains('removing') && this.node.handcards1.childNodes[j].classList.contains('glows')) {\r\n                    cards.push(this.node.handcards1.childNodes[j]);\r\n                  }\r\n                }\r\n                for (j = 0; j < this.node.handcards2.childElementCount; j++) {\r\n                  if (!this.node.handcards2.childNodes[j].classList.contains('removing') && this.node.handcards2.childNodes[j].classList.contains('glows')) {\r\n                    cards.push(this.node.handcards2.childNodes[j]);\r\n                  }\r\n                }\r\n              }\r\n              else if (arg1[i] == 'e') {\r\n                for (j = 0; j < this.node.equips.childElementCount; j++) {\r\n                  if (!this.node.equips.childNodes[j].classList.contains('removing') && !this.node.equips.childNodes[j].classList.contains('feichu')) {\r\n                    cards.push(this.node.equips.childNodes[j]);\r\n                  }\r\n                }\r\n              }\r\n              else if (arg1[i] == 'j') {\r\n                for (j = 0; j < this.node.judges.childElementCount; j++) {\r\n                  if (!this.node.judges.childNodes[j].classList.contains('removing') && !this.node.judges.childNodes[j].classList.contains('feichu')) {\r\n                    cards.push(this.node.judges.childNodes[j]);\r\n                    if (this.node.judges.childNodes[j].viewAs && arguments.length > 1) {\r\n                      this.node.judges.childNodes[j].tempJudge = this.node.judges.childNodes[j].name;\r\n                      this.node.judges.childNodes[j].name = this.node.judges.childNodes[j].viewAs;\r\n                      cards1.push(this.node.judges.childNodes[j]);\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            if (arguments.length == 1) {\r\n              return cards;\r\n            }\r\n            if (arg2) {\r\n              for (i = 0; i < cards.length; i++) {\r\n                if (!get.is.filterCardBy(cards[i], arg2)) {\r\n                  cards.splice(i--, 1);\r\n                }\r\n              }\r\n            }\r\n            for (i = 0; i < cards1.length; i++) {\r\n              if (cards1[i].tempJudge) {\r\n                cards1[i].name = cards1[i].tempJudge;\r\n                delete cards1[i].tempJudge;\r\n              }\r\n            }\r\n            return cards;\r\n          },\r\n          getDiscardableCards: function (player, arg1, arg2) {\r\n            var cards = this.getCards(arg1, arg2);\r\n            for (var i = 0; i < cards.length; i++) {\r\n              if (!lib.filter.canBeDiscarded(cards[i], player, this)) {\r\n                cards.splice(i--, 1);\r\n              }\r\n            }\r\n            return cards;\r\n          },\r\n          getGainableCards: function (player, arg1, arg2) {\r\n            var cards = this.getCards(arg1, arg2);\r\n            for (var i = 0; i < cards.length; i++) {\r\n              if (!lib.filter.canBeGained(cards[i], player, this)) {\r\n                cards.splice(i--, 1);\r\n              }\r\n            }\r\n            return cards;\r\n          },\r\n          getGainableSkills: function (func) {\r\n            var list = [];\r\n            var names = [this.name, this.name1, this.name2];\r\n            for (var i = 0; i < names.length; i++) {\r\n              list.addArray(get.gainableSkillsName(names[i], func));\r\n            }\r\n            return list;\r\n          },\r\n          countCards: function (arg1, arg2) {\r\n            return this.getCards(arg1, arg2).length;\r\n          },\r\n          countDiscardableCards: function (player, arg1, arg2) {\r\n            return this.getDiscardableCards(player, arg1, arg2).length;\r\n          },\r\n          countGainableCards: function (player, arg1, arg2) {\r\n            return this.getGainableCards(player, arg1, arg2).length;\r\n          },\r\n          getOriginalSkills: function () {\r\n            var skills = [];\r\n            if (lib.character[this.name] && !this.isUnseen(0)) {\r\n              skills.addArray(lib.character[this.name][3]);\r\n            }\r\n            if (this.name2 && lib.character[this.name2] && !this.isUnseen(1)) {\r\n              skills.addArray(lib.character[this.name2][3]);\r\n            }\r\n            return skills;\r\n          },\r\n          /**\r\n           * 返回本角色的技能组；\r\n           * 该技能组不包括子技能；\r\n           * @param {!string} skill 技能名\r\n           * @param {*} arg2 为真时表示计入隐藏的技能、为'e'时表示仅返回装备技能\r\n           * @param {*} arg3 为false时表示不计入装备技能\r\n           * @param {*} arg4 为false时表示计入失效的技能\r\n           * @returns {!Array<string>}\r\n           */\r\n          getSkills: function (arg2, arg3, arg4) {\r\n            var skills = this.skills.slice(0);\r\n            var es = [];\r\n            var i, j;\r\n            if (arg3 !== false) {\r\n              for (i = 0; i < this.node.equips.childElementCount; i++) {\r\n                if (!this.node.equips.childNodes[i].classList.contains('removing')) {\r\n                  var equipskills = get.info(this.node.equips.childNodes[i], false).skills;\r\n                  if (equipskills) {\r\n                    es.addArray(equipskills);\r\n                  }\r\n                }\r\n              }\r\n              if (arg2 == 'e') {\r\n                return es;\r\n              }\r\n            }\r\n            for (var i in this.additionalSkills) {\r\n              if (Array.isArray(this.additionalSkills[i]) && (arg2 || i.indexOf('hidden:') !== 0)) {\r\n                for (j = 0; j < this.additionalSkills[i].length; j++) {\r\n                  if (this.additionalSkills[i][j]) {\r\n                    skills.add(this.additionalSkills[i][j]);\r\n                  }\r\n                }\r\n              }\r\n              else if (this.additionalSkills[i] && typeof this.additionalSkills[i] == 'string') {\r\n                skills.add(this.additionalSkills[i]);\r\n              }\r\n            }\r\n            for (var i in this.tempSkills) {\r\n              skills.add(i);\r\n            }\r\n            if (arg2) skills.addArray(this.hiddenSkills);\r\n            if (arg3 !== false) skills.addArray(es);\r\n            for (var i in this.forbiddenSkills) {\r\n              skills.remove(i);\r\n            }\r\n            if (arg4 !== false) {\r\n              skills = game.filterSkills(skills, this, es);\r\n            }\r\n            return skills;\r\n          },\r\n          /**\r\n           * 角色的游戏牌区域(手牌|装备区|判定区)组合\r\n           * Regex: [hej]|he|hj|ej|hej\r\n           * @typedef {string} GameCores.PlayerCardPosition\r\n           * @see {@link GameCores.CardPosition}\r\n           */\r\n          /**\r\n           * 返回本角色(武将牌上|手牌|装备区|判定区)的游戏牌 TODO\r\n           * @param {('s'|GameCores.PlayerCardPosition)} position 角色的游戏牌区域或者角色的武将牌上区域\r\n           * @param {*} arg2\r\n           * @param {*} arg3\r\n           * @param {*} arg4\r\n           * @returns {Array<GameCores.GameObjects.Card>}\r\n           * @see {@link GameCores.PlayerCardPosition}\r\n           * @example\r\n           * let cards = player.get('he')//手牌和装备区所有未被移除、废除、的牌\r\n           * \r\n           * \r\n           */\r\n          get: function (arg1, arg2, arg3, arg4) {\r\n            var i, j;\r\n            if (arg1 == 's') {\r\n              var skills = this.skills.slice(0);\r\n              var es = [];\r\n              if (arg3 !== false) {\r\n                for (i = 0; i < this.node.equips.childElementCount; i++) {\r\n                  if (!this.node.equips.childNodes[i].classList.contains('removing') && !this.node.equips.childNodes[i].classList.contains('feichu')) {\r\n                    var equipskills = get.info(this.node.equips.childNodes[i]).skills;\r\n                    if (equipskills) {\r\n                      es.addArray(equipskills);\r\n                    }\r\n                  }\r\n                }\r\n                if (arg2 == 'e') {\r\n                  return es;\r\n                }\r\n              }\r\n              for (var i in this.additionalSkills) {\r\n                if (Array.isArray(this.additionalSkills[i])) {\r\n                  for (j = 0; j < this.additionalSkills[i].length; j++) {\r\n                    if (this.additionalSkills[i][j]) {\r\n                      skills.add(this.additionalSkills[i][j]);\r\n                    }\r\n                  }\r\n                }\r\n                else if (this.additionalSkills[i] && typeof this.additionalSkills[i] == 'string') {\r\n                  skills.add(this.additionalSkills[i]);\r\n                }\r\n              }\r\n              for (var i in this.tempSkills) {\r\n                skills.add(i);\r\n              }\r\n              if (arg2) skills.addArray(this.hiddenSkills);\r\n              if (arg3 !== false) skills.addArray(es);\r\n              for (var i in this.forbiddenSkills) {\r\n                skills.remove(i);\r\n              }\r\n              if (arg4 !== false) {\r\n                skills = game.filterSkills(skills, this, es);\r\n              }\r\n              return skills;\r\n            }\r\n            else if (get.is.pos(arg1)) {\r\n              var cards = [], cards1 = [];\r\n              for (i = 0; i < arg1.length; i++) {\r\n                if (arg1[i] == 'h') {\r\n                  for (j = 0; j < this.node.handcards1.childElementCount; j++) {\r\n                    if (!this.node.handcards1.childNodes[j].classList.contains('removing') && !this.node.handcards1.childNodes[j].classList.contains('feichu') && !this.node.handcards1.childNodes[j].classList.contains('glows')) {\r\n                      cards.push(this.node.handcards1.childNodes[j]);\r\n                    }\r\n                  }\r\n                  for (j = 0; j < this.node.handcards2.childElementCount; j++) {\r\n                    if (!this.node.handcards2.childNodes[j].classList.contains('removing') && !this.node.handcards2.childNodes[j].classList.contains('feichu') && !this.node.handcards2.childNodes[j].classList.contains('glows')) {\r\n                      cards.push(this.node.handcards2.childNodes[j]);\r\n                    }\r\n                  }\r\n                }\r\n                else if (arg1[i] == 'e') {\r\n                  for (j = 0; j < this.node.equips.childElementCount; j++) {\r\n                    if (!this.node.equips.childNodes[j].classList.contains('removing') && !this.node.equips.childNodes[j].classList.contains('feichu')) {\r\n                      cards.push(this.node.equips.childNodes[j]);\r\n                    }\r\n                  }\r\n                  if (arguments.length == 2 && typeof arg2 == 'string' && /1|2|3|4|5/.test(arg2)) {\r\n                    for (j = 0; j < cards.length; j++) {\r\n                      if (get.subtype(cards[j]) == 'equip' + arg2) return cards[j];\r\n                    }\r\n                    return;\r\n                  }\r\n                }\r\n                else if (arg1[i] == 'j') {\r\n                  for (j = 0; j < this.node.judges.childElementCount; j++) {\r\n                    if (!this.node.judges.childNodes[j].classList.contains('removing') && !this.node.judges.childNodes[j].classList.contains('feichu')) {\r\n                      cards.push(this.node.judges.childNodes[j]);\r\n                      if (this.node.judges.childNodes[j].viewAs && arguments.length > 1) {\r\n                        this.node.judges.childNodes[j].tempJudge = this.node.judges.childNodes[j].name;\r\n                        this.node.judges.childNodes[j].name = this.node.judges.childNodes[j].viewAs;\r\n                        cards1.push(this.node.judges.childNodes[j]);\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              if (arguments.length == 1) {\r\n                return cards;\r\n              }\r\n              if (arg2 != undefined) {\r\n                if (typeof arg3 == 'function') {\r\n                  var cards2 = cards.slice(0);\r\n                  cards.sort(function (a, b) {\r\n                    return arg3(b, cards2) - arg3(a, cards2);\r\n                  });\r\n                }\r\n                if (typeof arg2 == 'string') {\r\n                  for (i = 0; i < cards.length; i++) {\r\n                    if (cards[i].name != arg2) {\r\n                      cards.splice(i, 1); i--;\r\n                    }\r\n                  }\r\n                }\r\n                else if (typeof arg2 == 'object') {\r\n                  for (i = 0; i < cards.length; i++) {\r\n                    for (j in arg2) {\r\n                      if (j == 'type') {\r\n                        if (typeof arg2[j] == 'object') {\r\n                          if (arg2[j].contains(get.type(cards[i])) == false) {\r\n                            cards.splice(i, 1); i--; break;\r\n                          }\r\n                        }\r\n                        else if (typeof arg2[j] == 'string') {\r\n                          if (get.type(cards[i]) != arg2[j]) {\r\n                            cards.splice(i, 1); i--; break;\r\n                          }\r\n                        }\r\n                      }\r\n                      else if (j == 'subtype') {\r\n                        if (typeof arg2[j] == 'object') {\r\n                          if (arg2[j].contains(get.subtype(cards[i])) == false) {\r\n                            cards.splice(i, 1); i--; break;\r\n                          }\r\n                        }\r\n                        else if (typeof arg2[j] == 'string') {\r\n                          if (get.subtype(cards[i]) != arg2[j]) {\r\n                            cards.splice(i, 1); i--; break;\r\n                          }\r\n                        }\r\n                      }\r\n                      else if (j == 'color') {\r\n                        if (typeof arg2[j] == 'object') {\r\n                          if (arg2[j].contains(get.color(cards[i])) == false) {\r\n                            cards.splice(i, 1); i--; break;\r\n                          }\r\n                        }\r\n                        else if (typeof arg2[j] == 'string') {\r\n                          if (get.color(cards[i]) != arg2[j]) {\r\n                            cards.splice(i, 1); i--; break;\r\n                          }\r\n                        }\r\n                      }\r\n                      else if (j == 'suit') {\r\n                        if (typeof arg2[j] == 'object') {\r\n                          if (arg2[j].contains(get.suit(cards[i])) == false) {\r\n                            cards.splice(i, 1); i--; break;\r\n                          }\r\n                        }\r\n                        else if (typeof arg2[j] == 'string') {\r\n                          if (get.suit(cards[i]) != arg2[j]) {\r\n                            cards.splice(i, 1); i--; break;\r\n                          }\r\n                        }\r\n                      }\r\n                      else if (j == 'number') {\r\n                        if (typeof arg2[j] == 'object') {\r\n                          if (arg2[j].contains(get.number(cards[i])) == false) {\r\n                            cards.splice(i, 1); i--; break;\r\n                          }\r\n                        }\r\n                        else if (typeof arg2[j] == 'string') {\r\n                          if (get.number(cards[i]) != arg2[j]) {\r\n                            cards.splice(i, 1); i--; break;\r\n                          }\r\n                        }\r\n                      }\r\n                      else if (typeof arg2[j] == 'object') {\r\n                        if (arg2[j].contains(cards[i][j]) == false) {\r\n                          cards.splice(i, 1); i--; break;\r\n                        }\r\n                      }\r\n                      else if (typeof arg2[j] == 'string') {\r\n                        if (cards[i][j] != arg2[j]) {\r\n                          cards.splice(i, 1); i--; break;\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n                else if (typeof arg2 == 'number' && arg2 > 0) {\r\n                  cards.splice(arg2);\r\n                }\r\n                else if (typeof arg2 == 'function') {\r\n                  for (i = 0; i < cards.length; i++) {\r\n                    if (!arg2(cards[i])) {\r\n                      cards.splice(i, 1); i--;\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              for (i = 0; i < cards1.length; i++) {\r\n                if (cards1[i].tempJudge) {\r\n                  cards1[i].name = cards1[i].tempJudge;\r\n                  delete cards1[i].tempJudge;\r\n                }\r\n              }\r\n              if (arg2 === 0) return cards[0];\r\n              if (typeof arg3 == 'number') {\r\n                if (arg3 == 0) return cards[0];\r\n                cards.splice(arg3);\r\n              }\r\n              if (typeof arg4 == 'number') {\r\n                if (arg4 == 0) return cards[0];\r\n                cards.splice(arg4);\r\n              }\r\n              return cards;\r\n            }\r\n          },\r\n          /**\r\n           * 记录本角色的一个技能当前标记数(回放记录)，并更新全部标记信息({@link lib.element.player.updateMarks})\r\n           * @param {!string} skill 技能名\r\n           */\r\n          syncStorage: function (skill) {\r\n            switch (get.itemtype(this.storage[skill])) {\r\n              case 'cards': game.addVideo('storage', this, [skill, get.cardsInfo(this.storage[skill]), 'cards']); break;\r\n              case 'card': game.addVideo('storage', this, [skill, get.cardInfo(this.storage[skill]), 'card']); break;\r\n              default:\r\n                try {\r\n                  game.addVideo('storage', this, [skill, JSON.parse(JSON.stringify(this.storage[skill]))]);\r\n                }\r\n                catch (e) {\r\n                  console.log(this.storage[skill]);\r\n                }\r\n            }\r\n          },\r\n          syncSkills: function () {\r\n            game.broadcast(function (player, skills) {\r\n              player.applySkills(skills);\r\n            }, this, get.skillState(this));\r\n          },\r\n          playerfocus: function (time) {\r\n            time = time || 1000;\r\n            this.classList.add('playerfocus');\r\n            ui.arena.classList.add('playerfocus');\r\n            var that = this;\r\n            setTimeout(function () {\r\n              that.classList.remove('playerfocus');\r\n              ui.arena.classList.remove('playerfocus');\r\n            }, time);\r\n            game.addVideo('playerfocus', this, time);\r\n            game.broadcast(function (player, time) {\r\n              player.playerfocus(time);\r\n            }, this, time);\r\n            return this;\r\n          },\r\n          /**\r\n           * 记录本角色的一个技能当前标记数(回放记录)，并更新全部标记信息({@link lib.element.player.updateMarks})\r\n           * @param {!string} skill 技能名\r\n           */\r\n          setIdentity: function (identity) {\r\n            if (!identity) identity = this.identity;\r\n            if (get.is.jun(this)) {\r\n              this.node.identity.firstChild.innerHTML = '君';\r\n            }\r\n            else {\r\n              this.node.identity.firstChild.innerHTML = get.translation(identity);\r\n            }\r\n            this.node.identity.dataset.color = identity;\r\n            return this;\r\n          },\r\n          insertPhase: function (skill, insert) {\r\n            var evt = _status.event.getParent('phase');\r\n            var next;\r\n            if (evt && evt.parent && evt.parent.next) {\r\n              evt = evt.parent;\r\n              next = game.createEvent('phase', null, evt);\r\n            }\r\n            else if (_status.event.parent && _status.event.parent.next) {\r\n              evt = _status.event.parent;\r\n              next = game.createEvent('phase', null, evt);\r\n            }\r\n            else {\r\n              evt = null;\r\n              next = game.createEvent('phase');\r\n            }\r\n            if (evt && insert && evt.next.contains(next)) {\r\n              evt.next.remove(next);\r\n              evt.next.unshift(next);\r\n            }\r\n            next.player = this;\r\n            next.skill = skill || _status.event.name;\r\n            next.setContent('phase');\r\n            return next;\r\n          },\r\n          insertEvent: function (name, content, arg) {\r\n            var evt = _status.event.getParent('phase');\r\n            var next;\r\n            if (evt && evt.parent && evt.parent.next) {\r\n              next = game.createEvent(name, null, evt.parent);\r\n            }\r\n            else {\r\n              next = game.createEvent(name);\r\n            }\r\n            for (var i in arg) {\r\n              next[i] = arg[i];\r\n            }\r\n            next.player = this;\r\n            next.setContent(content);\r\n            return next;\r\n          },\r\n          phase: function (skill, stageList) {\r\n            var next = game.createEvent('phase');\r\n            next.player = this;\r\n            next.setContent('phase');\r\n            if (!_status.roundStart) {\r\n              _status.roundStart = this;\r\n            }\r\n            if (skill) {\r\n              next.skill = skill;\r\n            }\r\n            if (stageList) {\r\n              next.stageList = stageList;\r\n            }\r\n            return next;\r\n          },\r\n          phaseZhunbei: function () {\r\n            var next = game.createEvent('phaseZhunbei');\r\n            next.player = this;\r\n            next.setContent('emptyEvent');\r\n            return next;\r\n          },\r\n          phaseJudge: function () {\r\n            var next = game.createEvent('phaseJudge');\r\n            next.player = this;\r\n            next.setContent('phaseJudge');\r\n            return next;\r\n          },\r\n          phaseDraw: function () {\r\n            var next = game.createEvent('phaseDraw');\r\n            next.player = this;\r\n            next.num = 2;\r\n            if ((get.config('first_less') || _status.connectMode || _status.first_less_forced) && game.phaseNumber == 1 && _status.first_less) {\r\n              next.num--;\r\n            }\r\n            next.setContent('phaseDraw');\r\n            return next;\r\n          },\r\n          phaseUse: function () {\r\n            var next = game.createEvent('phaseUse');\r\n            next.player = this;\r\n            next.setContent('phaseUse');\r\n            return next;\r\n          },\r\n          phaseDiscard: function () {\r\n            var next = game.createEvent('phaseDiscard');\r\n            next.player = this;\r\n            next.setContent('phaseDiscard');\r\n            return next;\r\n          },\r\n          phaseJieshu: function () {\r\n            var next = game.createEvent('phaseJieshu');\r\n            next.player = this;\r\n            next.setContent('emptyEvent');\r\n            return next;\r\n          },\r\n          chooseToUse: function (use) {\r\n            var next = game.createEvent('chooseToUse');\r\n            next.player = this;\r\n            if (arguments.length == 1 && get.objtype(arguments[0]) == 'object') {\r\n              for (var i in use) {\r\n                next[i] = use[i];\r\n              }\r\n            }\r\n            else {\r\n              for (var i = 0; i < arguments.length; i++) {\r\n                if (typeof arguments[i] == 'number' || get.itemtype(arguments[i]) == 'select') {\r\n                  next.selectTarget = arguments[i];\r\n                }\r\n                else if ((typeof arguments[i] == 'object' && arguments[i]) || typeof arguments[i] == 'function') {\r\n                  if (get.itemtype(arguments[i]) == 'player' || next.filterCard) {\r\n                    next.filterTarget = arguments[i];\r\n                  }\r\n                  else next.filterCard = arguments[i];\r\n                }\r\n                else if (typeof arguments[i] == 'boolean') {\r\n                  next.forced = arguments[i];\r\n                }\r\n                else if (typeof arguments[i] == 'string') {\r\n                  next.prompt = arguments[i];\r\n                }\r\n              }\r\n            }\r\n            if (typeof next.filterCard == 'object') {\r\n              next.filterCard = get.filter(next.filterCard);\r\n            }\r\n            if (typeof next.filterTarget == 'object') {\r\n              next.filterTarget = get.filter(next.filterTarget, 2);\r\n            }\r\n            if (next.filterCard == undefined) {\r\n              next.filterCard = lib.filter.filterCard;\r\n            }\r\n            if (next.selectCard == undefined) {\r\n              next.selectCard = [1, 1];\r\n            }\r\n            if (next.filterTarget == undefined) {\r\n              next.filterTarget = lib.filter.filterTarget;\r\n            }\r\n            if (next.selectTarget == undefined) {\r\n              next.selectTarget = lib.filter.selectTarget;\r\n            }\r\n            next.position = 'hs';\r\n            if (next.ai1 == undefined) next.ai1 = get.order;\r\n            if (next.ai2 == undefined) next.ai2 = get.effect_use;\r\n            next.setContent('chooseToUse');\r\n            next._args = Array.from(arguments);\r\n            return next;\r\n          },\r\n          chooseToRespond: function () {\r\n            var next = game.createEvent('chooseToRespond');\r\n            next.player = this;\r\n            var filter;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (typeof arguments[i] == 'number') {\r\n                next.selectCard = [arguments[i], arguments[i]];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'select') {\r\n                next.selectCard = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'boolean') {\r\n                next.forced = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'position') {\r\n                next.position = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'function') {\r\n                if (next.filterCard) next.ai = arguments[i];\r\n                else next.filterCard = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'object' && arguments[i]) {\r\n                next.filterCard = get.filter(arguments[i]);\r\n                filter = arguments[i];\r\n              }\r\n              else if (arguments[i] == 'nosource') {\r\n                next.nosource = true;\r\n              }\r\n              else if (typeof arguments[i] == 'string') {\r\n                next.prompt = arguments[i];\r\n              }\r\n            }\r\n            if (next.filterCard == undefined) next.filterCard = lib.filter.all;\r\n            if (next.selectCard == undefined) next.selectCard = [1, 1];\r\n            if (next.source == undefined && !next.nosource) next.source = _status.event.player;\r\n            if (next.ai == undefined) next.ai = get.unuseful2;\r\n            if (next.prompt != false) {\r\n              if (typeof next.prompt == 'string') {\r\n                //next.dialog=next.prompt;\r\n              }\r\n              else {\r\n                var str = '请打出' + get.cnNumber(next.selectCard[0]) + '张'\r\n                if (filter) {\r\n                  if (filter.name) {\r\n                    str += get.translation(filter.name);\r\n                  }\r\n                  else {\r\n                    str += '牌';\r\n                  }\r\n                }\r\n                else {\r\n                  str += '牌';\r\n                }\r\n                if (_status.event.getParent().name == 'useCard') {\r\n                  var cardname = _status.event.name;\r\n                  if (lib.card[cardname] && lib.translate[cardname]) {\r\n                    str += '响应' + lib.translate[cardname];\r\n                  }\r\n                }\r\n                next.prompt = str;\r\n              }\r\n            }\r\n            next.position = 'hs';\r\n            next.setContent('chooseToRespond');\r\n            next._args = Array.from(arguments);\r\n            return next;\r\n          },\r\n          chooseToDiscard: function () {\r\n            var next = game.createEvent('chooseToDiscard');\r\n            next.player = this;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (typeof arguments[i] == 'number') {\r\n                next.selectCard = [arguments[i], arguments[i]];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'select') {\r\n                next.selectCard = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'dialog') {\r\n                next.dialog = arguments[i];\r\n                next.prompt = false;\r\n              }\r\n              else if (typeof arguments[i] == 'boolean') {\r\n                next.forced = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'position') {\r\n                next.position = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'function') {\r\n                if (next.filterCard) next.ai = arguments[i];\r\n                else next.filterCard = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'object' && arguments[i]) {\r\n                next.filterCard = get.filter(arguments[i]);\r\n              }\r\n              else if (typeof arguments[i] == 'string') {\r\n                get.evtprompt(next, arguments[i]);\r\n              }\r\n              if (arguments[i] === null) {\r\n                for (var i = 0; i < arguments.length; i++) {\r\n                  console.log(arguments[i]);\r\n                }\r\n              }\r\n            }\r\n            if (next.isMine() == false && next.dialog) next.dialog.style.display = 'none';\r\n            if (next.filterCard == undefined) next.filterCard = lib.filter.all;\r\n            if (next.selectCard == undefined) next.selectCard = [1, 1];\r\n            if (next.ai == undefined) next.ai = get.unuseful;\r\n            next.autochoose = function () {\r\n              if (!this.forced) return false;\r\n              if (typeof this.selectCard == 'function') return false;\r\n              var cards = this.player.getCards(this.position);\r\n              var num = cards.length;\r\n              for (var i = 0; i < cards.length; i++) {\r\n                if (!lib.filter.cardDiscardable(cards[i], this.player, this)) num--;\r\n              }\r\n              return get.select(this.selectCard)[0] >= num;\r\n            }\r\n            next.setContent('chooseToDiscard');\r\n            next._args = Array.from(arguments);\r\n            return next;\r\n          },\r\n          chooseToCompare: function (target, check) {\r\n            var next = game.createEvent('chooseToCompare');\r\n            next.player = this;\r\n            if (Array.isArray(target)) {\r\n              next.targets = target;\r\n              if (check) next.ai = check;\r\n              else next.ai = function (card) {\r\n                if (typeof card == 'string' && lib.skill[card]) {\r\n                  var ais = lib.skill[card].check || function () { return 0 };\r\n                  return ais();\r\n                }\r\n                var addi = (get.value(card) >= 8 && get.type(card) != 'equip') ? -10 : 0;\r\n                if (card.name == 'du') addi += 5;\r\n                var source = _status.event.source;\r\n                var player = _status.event.player;\r\n                var getn = function (card) {\r\n                  if (player.hasSkill('tianbian') && get.suit(card) == 'heart') return 13;\r\n                  return get.number(card);\r\n                }\r\n                if (source && source != player && get.attitude(player, source) > 1) {\r\n                  return -getn(card) - get.value(card) / 2 + addi;\r\n                }\r\n                return getn(card) - get.value(card) / 2 + addi;\r\n              }\r\n              next.setContent('chooseToCompareMultiple');\r\n            }\r\n            else {\r\n              next.target = target;\r\n              if (check) next.ai = check;\r\n              else next.ai = function (card) {\r\n                if (typeof card == 'string' && lib.skill[card]) {\r\n                  var ais = lib.skill[card].check || function () { return 0 };\r\n                  return ais();\r\n                }\r\n                var player = get.owner(card);\r\n                var getn = function (card) {\r\n                  if (player.hasSkill('tianbian') && get.suit(card) == 'heart') return 13;\r\n                  return get.number(card);\r\n                }\r\n                var Evt = _status.event.getParent();\r\n                var to = (player == Evt.player ? Evt.target : Evt.player);\r\n                var addi = (get.value(card) >= 8 && get.type(card) != 'equip') ? -10 : 0;\r\n                if (card.name == 'du') addi += 5;\r\n                if (player == Evt.player) {\r\n                  if (get.attitude(player, to) > 0 && Evt.small) {\r\n                    return -getn(card) - get.value(card) / 2 + addi;\r\n                  }\r\n                  return getn(card) - get.value(card) / 2 + addi;\r\n                }\r\n                else {\r\n                  if (get.attitude(player, to) > 0 && !Evt.small) {\r\n                    return -getn(card) - get.value(card) / 2 + addi;\r\n                  }\r\n                  return getn(card) - get.value(card) / 2 + addi;\r\n                }\r\n              }\r\n              next.setContent('chooseToCompare');\r\n            }\r\n            next._args = Array.from(arguments);\r\n            return next;\r\n          },\r\n          discoverSkill: function (list) {\r\n            var next = game.createEvent('discoverSkill');\r\n            next.player = this;\r\n            next.setContent('discoverSkill');\r\n            next.list = list;\r\n            for (var i = 1; i < arguments.length; i++) {\r\n              if (typeof arguments[i] == 'boolean') {\r\n                next.forced = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'number') {\r\n                next.num = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'string') {\r\n                next.prompt = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] === 'function') {\r\n                next.ai = arguments[i];\r\n              }\r\n            }\r\n          },\r\n          chooseSkill: function (target) {\r\n            var next = game.createEvent('chooseSkill');\r\n            next.player = this;\r\n            next.setContent('chooseSkill');\r\n            next.target = target;\r\n            for (var i = 1; i < arguments.length; i++) {\r\n              if (typeof arguments[i] == 'string') {\r\n                next.prompt = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'function') {\r\n                next.func = arguments[i];\r\n              }\r\n            }\r\n          },\r\n          discoverCard: function (list) {\r\n            var next = game.createEvent('discoverCard');\r\n            next.player = this;\r\n            next.setContent('discoverCard');\r\n            next.list = list || lib.inpile.slice(0);\r\n            next.forced = true;\r\n            for (var i = 1; i < arguments.length; i++) {\r\n              if (typeof arguments[i] == 'boolean') {\r\n                next.forced = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'string') {\r\n                switch (arguments[i]) {\r\n                  case 'use': next.use = true; break;\r\n                  case 'nogain': next.nogain = true; break;\r\n                  default: next.prompt = arguments[i];\r\n                }\r\n              }\r\n              else if (typeof arguments[i] == 'number') {\r\n                next.num = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] === 'function') {\r\n                next.ai = arguments[i];\r\n              }\r\n            }\r\n            return next;\r\n          },\r\n          chooseCardButton: function () {\r\n            var cards, prompt, forced, select;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (get.itemtype(arguments[i]) == 'cards') cards = arguments[i];\r\n              else if (typeof arguments[i] == 'boolean') forced = arguments[i];\r\n              else if (typeof arguments[i] == 'string') prompt = arguments[i];\r\n              else if (get.itemtype(arguments[i]) == 'select' || typeof arguments[i] == 'number') select = arguments[i];\r\n            }\r\n            if (prompt == undefined) prompt = '请选择卡牌';\r\n            return this.chooseButton(forced, select, 'hidden', [prompt, cards, 'hidden']);\r\n          },\r\n          chooseVCardButton: function () {\r\n            var list, prompt, forced, select, notype = false;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (Array.isArray(arguments[i])) {\r\n                list = arguments[i];\r\n              }\r\n              else if (arguments[i] == 'notype') {\r\n                notype = true;\r\n              }\r\n              else if (typeof arguments[i] == 'boolean') forced = arguments[i];\r\n              else if (typeof arguments[i] == 'string') prompt = arguments[i];\r\n              else if (get.itemtype(arguments[i]) == 'select' || typeof arguments[i] == 'number') select = arguments[i];\r\n            }\r\n            for (var i = 0; i < list.length; i++) {\r\n              list[i] = [notype ? '' : (get.subtype(list[i]) || get.type(list[i])), '', list[i]];\r\n            }\r\n            if (prompt == undefined) prompt = '请选择卡牌';\r\n            return this.chooseButton(forced, select, 'hidden', [prompt, [list, 'vcard'], 'hidden']);\r\n          },\r\n          chooseButton: function () {\r\n            var next = game.createEvent('chooseButton');\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (typeof arguments[i] == 'boolean') {\r\n                next.forced = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'dialog') {\r\n                next.dialog = arguments[i];\r\n                next.closeDialog = true;\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'select') {\r\n                next.selectButton = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'number') {\r\n                next.selectButton = [arguments[i], arguments[i]];\r\n              }\r\n              else if (typeof arguments[i] == 'function') {\r\n                if (next.ai) next.filterButton = arguments[i];\r\n                else next.ai = arguments[i];\r\n              }\r\n              else if (Array.isArray(arguments[i])) {\r\n                next.createDialog = arguments[i];\r\n              }\r\n            }\r\n            next.player = this;\r\n            if (typeof next.forced != 'boolean') next.forced = false;\r\n            if (next.isMine() == false && next.dialog) next.dialog.style.display = 'none';\r\n            if (next.filterButton == undefined) next.filterButton = lib.filter.filterButton;\r\n            if (next.selectButton == undefined) next.selectButton = [1, 1];\r\n            if (next.ai == undefined) next.ai = function () { return 1 };\r\n            next.setContent('chooseButton');\r\n            next._args = Array.from(arguments);\r\n            next.forceDie = true;\r\n            return next;\r\n          },\r\n          chooseButtonOL: function (list, callback, ai) {\r\n            var next = game.createEvent('chooseButtonOL');\r\n            next.list = list;\r\n            next.setContent('chooseButtonOL');\r\n            next.ai = ai;\r\n            next.callback = callback;\r\n            next._args = Array.from(arguments);\r\n            return next;\r\n          },\r\n          chooseCardOL: function () {\r\n            var next = game.createEvent('chooseCardOL');\r\n            next._args = [];\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (get.itemtype(arguments[i]) == 'players') {\r\n                next.list = arguments[i].slice(0);\r\n              }\r\n              else {\r\n                next._args.push(arguments[i]);\r\n              }\r\n            }\r\n            next.setContent('chooseCardOL');\r\n            next._args.add('glow_result');\r\n            return next;\r\n          },\r\n          chooseCard: function (choose) {\r\n            var next = game.createEvent('chooseCard');\r\n            next.player = this;\r\n            if (arguments.length == 1 && get.is.object(choose)) {\r\n              for (var i in choose) {\r\n                next[i] = choose[i];\r\n              }\r\n            }\r\n            else {\r\n              for (var i = 0; i < arguments.length; i++) {\r\n                if (typeof arguments[i] == 'number') {\r\n                  next.selectCard = [arguments[i], arguments[i]];\r\n                }\r\n                else if (get.itemtype(arguments[i]) == 'select') {\r\n                  next.selectCard = arguments[i];\r\n                }\r\n                else if (typeof arguments[i] == 'boolean') {\r\n                  next.forced = arguments[i];\r\n                }\r\n                else if (get.itemtype(arguments[i]) == 'position') {\r\n                  next.position = arguments[i];\r\n                }\r\n                else if (typeof arguments[i] == 'function') {\r\n                  if (next.filterCard) next.ai = arguments[i];\r\n                  else next.filterCard = arguments[i];\r\n                }\r\n                else if (typeof arguments[i] == 'object' && arguments[i]) {\r\n                  next.filterCard = get.filter(arguments[i]);\r\n                }\r\n                else if (arguments[i] == 'glow_result') {\r\n                  next.glow_result = true;\r\n                }\r\n                else if (typeof arguments[i] == 'string') {\r\n                  get.evtprompt(next, arguments[i]);\r\n                }\r\n              }\r\n            }\r\n            if (next.filterCard == undefined) next.filterCard = lib.filter.all;\r\n            if (next.selectCard == undefined) next.selectCard = [1, 1];\r\n            if (next.ai == undefined) next.ai = get.unuseful3;\r\n            next.setContent('chooseCard');\r\n            next._args = Array.from(arguments);\r\n            return next;\r\n          },\r\n          chooseUseTarget: function () {\r\n            var next = game.createEvent('chooseUseTarget');\r\n            next.player = this;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (get.itemtype(arguments[i]) == 'cards') {\r\n                next.cards = arguments[i].slice(0);\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'card') {\r\n                next.card = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'players') {\r\n                next.targets = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'player') {\r\n                next.targets = [arguments[i]];\r\n              }\r\n              else if (get.is.object(arguments[i]) && arguments[i].name) {\r\n                next.card = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'string') {\r\n                if (arguments[i] == 'nopopup') {\r\n                  next.nopopup = true;\r\n                }\r\n                else if (arguments[i] == 'noanimate') {\r\n                  next.animate = false;\r\n                }\r\n                else if (arguments[i] == 'nothrow') {\r\n                  next.throw = false;\r\n                }\r\n                else if (arguments[i] == 'nodistance') {\r\n                  next.nodistance = true;\r\n                }\r\n                else if (arguments[i] == 'noTargetDelay') {\r\n                  next.noTargetDelay = true;\r\n                }\r\n                else if (arguments[i] == 'nodelayx') {\r\n                  next.nodelayx = true;\r\n                }\r\n                else if (lib.card[arguments[i]] && !next.card) {\r\n                  next.card = { name: arguments[i], isCard: true };\r\n                }\r\n                else get.evtprompt(next, arguments[i]);\r\n              }\r\n              else if (arguments[i] === true) {\r\n                next.forced = true;\r\n              }\r\n              else if (arguments[i] === false) {\r\n                next.addCount = false;\r\n              }\r\n            }\r\n            if (!next.targets) next.targets = game.players.slice(0);\r\n            if (next.cards == undefined) {\r\n              if (get.itemtype(next.card) == 'card') {\r\n                next.cards = [next.card];\r\n              }\r\n              else next.cards = [];\r\n            }\r\n            else if (next.card == undefined) {\r\n              if (next.cards) {\r\n                next.card = next.cards[0];\r\n              }\r\n            }\r\n            next.setContent('chooseUseTarget');\r\n            next._args = Array.from(arguments);\r\n            return next;\r\n            // Fully Online-Ready! Enjoy It!\r\n          },\r\n          chooseTarget: function () {\r\n            var next = game.createEvent('chooseTarget');\r\n            next.player = this;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (typeof arguments[i] == 'number') {\r\n                next.selectTarget = [arguments[i], arguments[i]];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'select') {\r\n                next.selectTarget = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'dialog') {\r\n                next.dialog = arguments[i];\r\n                next.prompt = false;\r\n              }\r\n              else if (typeof arguments[i] == 'boolean') {\r\n                next.forced = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'function') {\r\n                if (next.filterTarget) next.ai = arguments[i];\r\n                else next.filterTarget = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'string') {\r\n                get.evtprompt(next, arguments[i]);\r\n              }\r\n            }\r\n            if (next.filterTarget == undefined) next.filterTarget = lib.filter.all;\r\n            if (next.selectTarget == undefined) next.selectTarget = [1, 1];\r\n            if (next.ai == undefined) next.ai = get.attitude2;\r\n            next.setContent('chooseTarget');\r\n            next._args = Array.from(arguments);\r\n            next.forceDie = true;\r\n            return next;\r\n          },\r\n          chooseCardTarget: function (choose) {\r\n            var next = game.createEvent('chooseCardTarget');\r\n            next.player = this;\r\n            if (arguments.length == 1) {\r\n              for (var i in choose) {\r\n                next[i] = choose[i];\r\n              }\r\n            }\r\n            if (typeof next.filterCard == 'object') {\r\n              next.filterCard = get.filter(next.filterCard);\r\n            }\r\n            if (typeof next.filterTarget == 'object') {\r\n              next.filterTarget = get.filter(next.filterTarget, 2);\r\n            }\r\n            if (next.filterCard == undefined || next.filterCard === true) {\r\n              next.filterCard = lib.filter.all;\r\n            }\r\n            if (next.selectCard == undefined) {\r\n              next.selectCard = 1;\r\n            }\r\n            if (next.filterTarget == undefined || next.filterTarget === true) {\r\n              next.filterTarget = lib.filter.all;\r\n            }\r\n            if (next.selectTarget == undefined) {\r\n              next.selectTarget = 1;\r\n            }\r\n            if (next.ai1 == undefined) next.ai1 = get.unuseful2;\r\n            if (next.ai2 == undefined) next.ai2 = get.attitude2;\r\n            next.setContent('chooseCardTarget');\r\n            next._args = Array.from(arguments);\r\n            return next;\r\n          },\r\n          chooseControlList: function () {\r\n            var list = [];\r\n            var prompt = null;\r\n            var forced = 'cancel2';\r\n            var func = null;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (typeof arguments[i] == 'string') {\r\n                if (!prompt) {\r\n                  prompt = arguments[i];\r\n                }\r\n                else {\r\n                  list.push(arguments[i]);\r\n                }\r\n              }\r\n              else if (Array.isArray(arguments[i])) {\r\n                list = arguments[i];\r\n              }\r\n              else if (arguments[i] === true) {\r\n                forced = null;\r\n              }\r\n              else if (typeof arguments[i] == 'function') {\r\n                func = arguments[i];\r\n              }\r\n            }\r\n            return this.chooseControl(forced, func).set('choiceList', list).set('prompt', prompt);\r\n          },\r\n          chooseControl: function () {\r\n            var next = game.createEvent('chooseControl');\r\n            next.controls = [];\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (typeof arguments[i] == 'string') {\r\n                if (arguments[i] == 'dialogcontrol') {\r\n                  next.dialogcontrol = true;\r\n                }\r\n                else if (arguments[i] == 'seperate') {\r\n                  next.seperate = true;\r\n                }\r\n                else {\r\n                  next.controls.push(arguments[i]);\r\n                }\r\n              }\r\n              else if (Array.isArray(arguments[i])) {\r\n                next.controls = next.controls.concat(arguments[i]);\r\n              }\r\n              else if (typeof arguments[i] == 'function') {\r\n                next.ai = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'number') {\r\n                next.choice = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'dialog') {\r\n                next.dialog = arguments[i];\r\n              }\r\n            }\r\n            next.player = this;\r\n            if (next.choice == undefined) next.choice = 0;\r\n            next.setContent('chooseControl');\r\n            next._args = Array.from(arguments);\r\n            next.forceDie = true;\r\n            return next;\r\n          },\r\n          chooseBool: function () {\r\n            var next = game.createEvent('chooseBool');\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (typeof arguments[i] == 'boolean') {\r\n                next.choice = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'function') {\r\n                next.ai = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'string') {\r\n                get.evtprompt(next, arguments[i]);\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'dialog') {\r\n                next.dialog = arguments[i];\r\n              }\r\n              if (next.choice == undefined) next.choice = true;\r\n            }\r\n            next.player = this;\r\n            next.setContent('chooseBool');\r\n            next._args = Array.from(arguments);\r\n            next.forceDie = true;\r\n            return next;\r\n          },\r\n          chooseDrawRecover: function () {\r\n            var next = game.createEvent('chooseDrawRecover', false);\r\n            next.player = this;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (typeof arguments[i] == 'number') {\r\n                if (typeof next.num1 == 'number') {\r\n                  next.num2 = arguments[i];\r\n                }\r\n                else {\r\n                  next.num1 = arguments[i];\r\n                }\r\n              }\r\n              else if (typeof arguments[i] == 'boolean') {\r\n                next.forced = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'string') {\r\n                next.prompt = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'function') {\r\n                next.ai = arguments[i];\r\n              }\r\n            }\r\n            if (typeof next.num1 != 'number') {\r\n              next.num1 = 1;\r\n            }\r\n            if (typeof next.num2 != 'number') {\r\n              next.num2 = 1;\r\n            }\r\n            next.setContent('chooseDrawRecover');\r\n            return next;\r\n          },\r\n          choosePlayerCard: function () {\r\n            var next = game.createEvent('choosePlayerCard');\r\n            next.player = this;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (get.itemtype(arguments[i]) == 'player') {\r\n                next.target = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'number') {\r\n                next.selectButton = [arguments[i], arguments[i]];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'select') {\r\n                next.selectButton = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'boolean') {\r\n                next.forced = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'position') {\r\n                next.position = arguments[i];\r\n              }\r\n              else if (arguments[i] == 'visible') {\r\n                next.visible = true;\r\n              }\r\n              else if (typeof arguments[i] == 'function') {\r\n                if (next.ai) next.filterButton = arguments[i];\r\n                else next.ai = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'object' && arguments[i]) {\r\n                next.filterButton = get.filter(arguments[i]);\r\n              }\r\n              else if (typeof arguments[i] == 'string') {\r\n                next.prompt = arguments[i];\r\n              }\r\n            }\r\n            if (next.filterButton == undefined) next.filterButton = lib.filter.all;\r\n            if (next.position == undefined) next.position = 'he';\r\n            if (next.selectButton == undefined) next.selectButton = [1, 1];\r\n            if (next.ai == undefined) next.ai = function (button) {\r\n              var val = get.buttonValue(button);\r\n              if (get.attitude(_status.event.player, get.owner(button.link)) > 0) return -val;\r\n              return val;\r\n            };\r\n            next.setContent('choosePlayerCard');\r\n            next._args = Array.from(arguments);\r\n            return next;\r\n          },\r\n          discardPlayerCard: function () {\r\n            var next = game.createEvent('discardPlayerCard');\r\n            next.player = this;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (get.itemtype(arguments[i]) == 'player') {\r\n                next.target = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'number') {\r\n                next.selectButton = [arguments[i], arguments[i]];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'select') {\r\n                next.selectButton = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'boolean') {\r\n                next.forced = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'position') {\r\n                next.position = arguments[i];\r\n              }\r\n              else if (arguments[i] == 'visible') {\r\n                next.visible = true;\r\n              }\r\n              else if (typeof arguments[i] == 'function') {\r\n                if (next.ai) next.filterButton = arguments[i];\r\n                else next.ai = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'object' && arguments[i]) {\r\n                next.filterButton = get.filter(arguments[i]);\r\n              }\r\n              else if (typeof arguments[i] == 'string') {\r\n                next.prompt = arguments[i];\r\n              }\r\n            }\r\n            if (next.filterButton == undefined) next.filterButton = lib.filter.all;\r\n            if (next.position == undefined) next.position = 'he';\r\n            if (next.selectButton == undefined) next.selectButton = [1, 1];\r\n            if (next.ai == undefined) next.ai = function (button) {\r\n              var val = get.buttonValue(button);\r\n              if (get.attitude(_status.event.player, get.owner(button.link)) > 0) return -val;\r\n              return val;\r\n            };\r\n            next.setContent('discardPlayerCard');\r\n            next._args = Array.from(arguments);\r\n            return next;\r\n          },\r\n          gainPlayerCard: function () {\r\n            var next = game.createEvent('gainPlayerCard');\r\n            next.player = this;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (get.itemtype(arguments[i]) == 'player') {\r\n                next.target = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'number') {\r\n                next.selectButton = [arguments[i], arguments[i]];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'select') {\r\n                next.selectButton = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'boolean') {\r\n                next.forced = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'position') {\r\n                next.position = arguments[i];\r\n              }\r\n              else if (arguments[i] == 'visible') {\r\n                next.visible = true;\r\n              }\r\n              else if (arguments[i] == 'visibleMove') {\r\n                next.visibleMove = true;\r\n              }\r\n              else if (typeof arguments[i] == 'function') {\r\n                if (next.ai) next.filterButton = arguments[i];\r\n                else next.ai = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'object' && arguments[i]) {\r\n                next.filterButton = get.filter(arguments[i]);\r\n              }\r\n              else if (typeof arguments[i] == 'string') {\r\n                next.prompt = arguments[i];\r\n              }\r\n            }\r\n            if (next.filterButton == undefined) next.filterButton = lib.filter.all;\r\n            if (next.position == undefined) next.position = 'he';\r\n            if (next.selectButton == undefined) next.selectButton = [1, 1];\r\n            if (next.ai == undefined) next.ai = function (button) {\r\n              var val = get.buttonValue(button);\r\n              if (get.attitude(_status.event.player, get.owner(button.link)) > 0) return -val;\r\n              return val;\r\n            };\r\n            next.setContent('gainPlayerCard');\r\n            next._args = Array.from(arguments);\r\n            return next;\r\n          },\r\n          showHandcards: function (str) {\r\n            var next = game.createEvent('showHandcards');\r\n            next.player = this;\r\n            if (typeof str == 'string') {\r\n              next.prompt = str;\r\n            }\r\n            next.setContent('showHandcards');\r\n            next._args = Array.from(arguments);\r\n            return next;\r\n          },\r\n          showCards: function (cards, str) {\r\n            var next = game.createEvent('showCards');\r\n            next.player = this;\r\n            next.str = str;\r\n            if (typeof cards == 'string') {\r\n              str = cards;\r\n              cards = next.str;\r\n              next.str = str;\r\n            }\r\n            if (get.itemtype(cards) == 'card') next.cards = [cards];\r\n            else if (get.itemtype(cards) == 'cards') next.cards = cards.slice(0);\r\n            else _status.event.next.remove(next);\r\n            next.setContent('showCards');\r\n            next._args = Array.from(arguments);\r\n            return next;\r\n          },\r\n          viewCards: function (str, cards) {\r\n            var next = game.createEvent('viewCards');\r\n            next.player = this;\r\n            next.str = str;\r\n            next.cards = cards.slice(0);\r\n            next.setContent('viewCards');\r\n            next._args = Array.from(arguments);\r\n            return next;\r\n          },\r\n          viewHandcards: function (target) {\r\n            var cards = target.getCards('h');\r\n            if (cards.length) {\r\n              return this.viewCards(get.translation(target) + '的手牌', cards);\r\n            }\r\n            else {\r\n              return false;\r\n            }\r\n          },\r\n          canMoveCard: function (withatt, nojudge, moveHandcard) {\r\n            var player = this;\r\n            return game.hasPlayer(function (current) {\r\n              var att = get.sgn(get.attitude(player, current));\r\n              if (!withatt || att != 0) {\r\n                var es = current.getCards('e');\r\n                for (var i = 0; i < es.length; i++) {\r\n                  if (game.hasPlayer(function (current2) {\r\n                    if (withatt) {\r\n                      if (get.sgn(get.value(es[i], current)) != -att) return false;\r\n                      var att2 = get.sgn(get.attitude(player, current2));\r\n                      if (att == att2 || att2 != get.sgn(get.effect(current2, es[i], player, current2))) return false;\r\n                    }\r\n                    return current != current2 && !current2.isMin() && current2.isEmpty(get.subtype(es[i]));\r\n                  })) {\r\n                    return true;\r\n                  }\r\n                }\r\n              }\r\n              if (!nojudge && (!withatt || att > 0)) {\r\n                var js = current.getCards('j');\r\n                for (var i = 0; i < js.length; i++) {\r\n                  if (game.hasPlayer(function (current2) {\r\n                    if (withatt) {\r\n                      var att2 = get.attitude(player, current2);\r\n                      if (att2 >= 0) return false;\r\n                    }\r\n                    return current != current2 && current2.canAddJudge(js[i]);\r\n                  })) {\r\n                    return true;\r\n                  }\r\n                }\r\n              }\r\n              if (moveHandcard == true) {\r\n                if (current.countCards('h') > 0) return true;\r\n              }\r\n            });\r\n          },\r\n          moveCard: function () {\r\n            var next = game.createEvent('moveCard');\r\n            next.player = this;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (typeof arguments[i] == 'boolean') {\r\n                next.forced = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'string') {\r\n                get.evtprompt(next, arguments[i]);\r\n              }\r\n              else if (typeof arguments[i] == 'function') {\r\n                if (next.sourceFilterTarget) next.ai = arguments[i];\r\n                else next.sourceFilterTarget = arguments[i];\r\n              }\r\n              else if (Array.isArray(arguments[i])) {\r\n                for (var j = 0; j < arguments[i].length; j++) {\r\n                  if (typeof arguments[i][j] != 'string') break;\r\n                }\r\n                if (j == arguments[i].length) {\r\n                  next.targetprompt = arguments[i];\r\n                }\r\n              }\r\n            }\r\n            next.setContent('moveCard');\r\n            next._args = Array.from(arguments);\r\n            return next;\r\n          },\r\n          /**\r\n           * 本角色使用牌或技能；`chooseToUse`时调用\r\n           * @function\r\n           * @param {*} result `chooseToUse`的结果\r\n           * @param {?GameCores.Bases.Event} [Evt] 父事件，如果不指定，使用当前事件作为父事件\r\n           */\r\n          useResult: function (result, Evt) {\r\n            Evt = Evt || _status.event;\r\n            if (result._sendskill) {\r\n              lib.skill[result._sendskill[0]] = result._sendskill[1];\r\n            }\r\n            if (Evt.onresult) {\r\n              Evt.onresult(result);\r\n            }\r\n            if (result.skill) {\r\n              var info = get.info(result.skill);\r\n              if (info.onuse) {\r\n                info.onuse(result, this);\r\n              }\r\n              if (info.direct && !info.clearTime) {\r\n                _status.noclearcountdown = true;\r\n              }\r\n            }\r\n            if (Evt.logSkill) {\r\n              if (typeof Evt.logSkill == 'string') {\r\n                this.logSkill(Evt.logSkill);\r\n              }\r\n              else if (Array.isArray(Evt.logSkill)) {\r\n                this.logSkill.apply(this, Evt.logSkill);\r\n              }\r\n            }\r\n            if (result.card || !result.skill) {\r\n              result.used = result.card || result.cards[0];\r\n              var next = this.useCard(result.card, result.cards, result.targets, result.skill);\r\n              next.oncard = Evt.oncard;\r\n              next.respondTo = Evt.respondTo;\r\n              if (Evt.addCount === false) {\r\n                next.addCount = false;\r\n              }\r\n              return next;\r\n            }\r\n            else if (result.skill) {\r\n              result.used = result.skill;\r\n              return this.useSkill(result.skill, result.cards, result.targets);\r\n            }\r\n          },\r\n          useCard: function () {\r\n            var next = game.createEvent('useCard');\r\n            next.player = this;\r\n            next.num = 0;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (get.itemtype(arguments[i]) == 'cards') {\r\n                next.cards = arguments[i].slice(0);\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'players') {\r\n                next.targets = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'player') {\r\n                next.targets = [arguments[i]];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'card') {\r\n                next.card = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'object' && arguments[i] && arguments[i].name) {\r\n                next.card = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'string') {\r\n                if (arguments[i] == 'noai') {\r\n                  next.noai = true;\r\n                }\r\n                else if (arguments[i] == 'nowuxie') {\r\n                  next.nowuxie = true;\r\n                }\r\n                else {\r\n                  next.skill = arguments[i];\r\n                }\r\n              }\r\n              else if (typeof arguments[i] == 'boolean') {\r\n                next.addCount = arguments[i];\r\n              }\r\n            }\r\n            if (next.cards == undefined) {\r\n              if (get.itemtype(next.card) == 'card') {\r\n                next.cards = [next.card];\r\n              }\r\n              else next.cards = [];\r\n            }\r\n            else if (next.card == undefined) {\r\n              if (next.cards) {\r\n                next.card = next.cards[0];\r\n              }\r\n            }\r\n            if (!next.targets) {\r\n              next.targets = [];\r\n            }\r\n            if (next.card) {\r\n              next.card = get.autoViewAs(next.card, false, next.player);\r\n              var info = get.info(next.card);\r\n              if (info.changeTarget) {\r\n                info.changeTarget(next.player, next.targets);\r\n              }\r\n              if (info.singleCard) {\r\n                next._targets = next.targets.slice(0);\r\n                next.target = next.targets[0];\r\n                next.addedTargets = next.targets.splice(1);\r\n                if (next.addedTargets.length) {\r\n                  next.addedTarget = next.addedTargets[0];\r\n                }\r\n              }\r\n              if (!next.card.isCard && next.cards.length) {\r\n                next.card.cards = next.cards.slice(0);\r\n              }\r\n            }\r\n            for (var i = 0; i < next.targets.length; i++) {\r\n              if (get.attitude(this, next.targets[i]) >= -1 && get.attitude(this, next.targets[i]) < 0) {\r\n                if (!this.ai.tempIgnore) this.ai.tempIgnore = [];\r\n                this.ai.tempIgnore.add(next.targets[i]);\r\n              }\r\n            }\r\n            if (typeof this.logAi == 'function' && !next.noai && !get.info(next.card).noai) {\r\n              var postAi = get.info(next.card).postAi;\r\n              if (postAi && postAi(next.targets)) {\r\n                next.postAi = true;\r\n              }\r\n              else {\r\n                this.logAi(next.targets, next.card);\r\n              }\r\n            }\r\n            next.stocktargets = next.targets.slice(0);\r\n            next.setContent('useCard');\r\n            return next;\r\n          },\r\n          useSkill: function () {\r\n            var next = game.createEvent('useSkill');\r\n            next.player = this;\r\n            next.num = 0;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (get.itemtype(arguments[i]) == 'cards') {\r\n                next.cards = arguments[i].slice(0);\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'players') {\r\n                next.targets = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'card') {\r\n                next.card = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'string') {\r\n                next.skill = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'boolean') {\r\n                next.addCount = arguments[i];\r\n              }\r\n            }\r\n            if (next.cards == undefined) {\r\n              next.cards = [];\r\n            }\r\n            if (next.skill && get.info(next.skill) && get.info(next.skill).changeTarget) {\r\n              get.info(next.skill).changeTarget(next.player, next.targets);\r\n            }\r\n            if (next.targets) {\r\n              for (var i = 0; i < next.targets.length; i++) {\r\n                if (get.attitude(this, next.targets[i]) >= -1 && get.attitude(this, next.targets[i]) < 0) {\r\n                  if (!this.ai.tempIgnore) this.ai.tempIgnore = [];\r\n                  this.ai.tempIgnore.add(next.targets[i]);\r\n                }\r\n              }\r\n              if (typeof this.logAi == 'function') {\r\n                this.logAi(next.targets, next.skill);\r\n              }\r\n            }\r\n            else {\r\n              next.targets = [];\r\n            }\r\n            next.setContent('useSkill');\r\n            return next;\r\n          },\r\n          drawTo: function (num, args) {\r\n            var num2 = num - this.countCards('h');\r\n            if (!num2) return;\r\n            var next = this.draw(num2);\r\n            if (Array.isArray(args)) {\r\n              for (var i = 0; i < args.length; i++) {\r\n                if (get.itemtype(args[i]) == 'player') {\r\n                  next.source = args[i];\r\n                }\r\n                else if (typeof args[i] == 'boolean') {\r\n                  next.animate = args[i];\r\n                }\r\n                else if (args[i] == 'nodelay') {\r\n                  next.animate = false;\r\n                  next.$draw = true;\r\n                }\r\n                else if (args[i] == 'visible') {\r\n                  next.visible = true;\r\n                }\r\n                else if (args[i] == 'bottom') {\r\n                  next.bottom = true;\r\n                }\r\n                else if (typeof args[i] == 'object' && args[i] && args[i].drawDeck != undefined) {\r\n                  next.drawDeck = args[i].drawDeck;\r\n                }\r\n              }\r\n            }\r\n            return next;\r\n          },\r\n          draw: function () {\r\n            var next = game.createEvent('draw');\r\n            next.player = this;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (get.itemtype(arguments[i]) == 'player') {\r\n                next.source = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'number') {\r\n                next.num = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'boolean') {\r\n                next.animate = arguments[i];\r\n              }\r\n              else if (arguments[i] == 'nodelay') {\r\n                next.animate = false;\r\n                next.$draw = true;\r\n              }\r\n              else if (arguments[i] == 'visible') {\r\n                next.visible = true;\r\n              }\r\n              else if (arguments[i] == 'bottom') {\r\n                next.bottom = true;\r\n              }\r\n              else if (typeof arguments[i] == 'object' && arguments[i] && arguments[i].drawDeck != undefined) {\r\n                next.drawDeck = arguments[i].drawDeck;\r\n              }\r\n            }\r\n            if (next.num == undefined) next.num = 1;\r\n            if (next.num <= 0) _status.event.next.remove(next);\r\n            next.setContent('draw');\r\n            if (lib.config.mode == 'stone' && _status.mode == 'deck' &&\r\n              next.drawDeck == undefined && !next.player.isMin() && next.num > 1) {\r\n              next.drawDeck = 1;\r\n            }\r\n            return next;\r\n          },\r\n          randomDiscard: function () {\r\n            var position = 'he', num = 1, delay = null;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (typeof arguments[i] == 'number') {\r\n                num = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'position') {\r\n                position = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'boolean') {\r\n                delay = arguments[i];\r\n              }\r\n            }\r\n            var cards = this.getCards(position).randomGets(num);\r\n            if (cards.length) {\r\n              var next = this.discard(cards, 'notBySelf');\r\n              if (typeof delay == 'boolean') {\r\n                next.delay = delay;\r\n              }\r\n            }\r\n            return cards;\r\n          },\r\n          randomGain: function () {\r\n            var position = 'he', num = 1, target = null, line = false;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (typeof arguments[i] == 'number') {\r\n                num = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'position') {\r\n                position = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'player') {\r\n                target = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'boolean') {\r\n                line = arguments[i];\r\n              }\r\n            }\r\n            if (target) {\r\n              var cards = target.getCards(position).randomGets(num);\r\n              if (cards.length) {\r\n                if (line) {\r\n                  this.line(target, 'green');\r\n                }\r\n                this.gain(cards, target, 'log', 'bySelf');\r\n                target.$giveAuto(cards, this);\r\n              }\r\n              return cards;\r\n            }\r\n            return [];\r\n          },\r\n          discard: function () {\r\n            var next = game.createEvent('discard');\r\n            next.player = this;\r\n            next.num = 0;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (get.itemtype(arguments[i]) == 'player') {\r\n                next.source = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'cards') {\r\n                next.cards = arguments[i].slice(0);\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'card') {\r\n                next.cards = [arguments[i]];\r\n              }\r\n              else if (typeof arguments[i] == 'boolean') {\r\n                next.animate = arguments[i];\r\n              }\r\n              else if (get.objtype(arguments[i]) == 'div') {\r\n                next.position = arguments[i];\r\n              }\r\n              else if (arguments[i] == 'notBySelf') {\r\n                next.notBySelf = true;\r\n              }\r\n            }\r\n            if (next.cards == undefined) _status.event.next.remove(next);\r\n            next.setContent('discard');\r\n            return next;\r\n          },\r\n          respond: function () {\r\n            var next = game.createEvent('respond');\r\n            next.player = this;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (get.itemtype(arguments[i]) == 'cards') {\r\n                next.cards = arguments[i].slice(0);\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'card') {\r\n                next.card = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'player') {\r\n                next.source = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'object' && arguments[i] && arguments[i].name) {\r\n                next.card = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'boolean') next.animate = arguments[i];\r\n              else if (arguments[i] == 'highlight') next.highlight = true;\r\n              else if (arguments[i] == 'noOrdering') next.noOrdering = true;\r\n              else if (typeof arguments[i] == 'string') next.skill = arguments[i];\r\n            }\r\n            if (next.cards == undefined) {\r\n              if (get.itemtype(next.card) == 'card') {\r\n                next.cards = [next.card];\r\n              }\r\n              else {\r\n                next.cards = [];\r\n              }\r\n            }\r\n            else if (next.card == undefined) {\r\n              if (next.cards) {\r\n                next.card = next.cards[0];\r\n                if (!next.skill) {\r\n                  next.card = get.autoViewAs(next.card, null, next.player);\r\n                }\r\n              }\r\n            }\r\n            next.setContent('respond');\r\n            return next;\r\n          },\r\n          swapHandcards: function (target, cards1, cards2) {\r\n            var next = game.createEvent('swapHandcards', false);\r\n            next.player = this;\r\n            next.target = target;\r\n            if (cards1) next.cards1 = cards1;\r\n            if (cards2) next.cards2 = cards2;\r\n            next.setContent('swapHandcards');\r\n            return next;\r\n          },\r\n          directequip: function (cards) {\r\n            for (var i = 0; i < cards.length; i++) {\r\n              this.$equip(cards[i]);\r\n            }\r\n            if (!_status.video) {\r\n              game.addVideo('directequip', this, get.cardsInfo(cards));\r\n            }\r\n          },\r\n          directgain: function (cards, broadcast, gaintag) {\r\n            var hs = this.getCards('hs');\r\n            for (var i = 0; i < cards.length; i++) {\r\n              if (hs.contains(cards[i])) {\r\n                cards.splice(i--, 1);\r\n              }\r\n            }\r\n            for (var i = 0; i < cards.length; i++) {\r\n              cards[i].fix();\r\n              if (gaintag) cards[i].addGaintag(gaintag);\r\n              var sort = lib.config.sort_card(cards[i]);\r\n              if (this == game.me) {\r\n                cards[i].classList.add('drawinghidden');\r\n              }\r\n              if (get.is.singleHandcard() || sort > 0) {\r\n                this.node.handcards1.insertBefore(cards[i], this.node.handcards1.firstChild);\r\n              }\r\n              else {\r\n                this.node.handcards2.insertBefore(cards[i], this.node.handcards2.firstChild);\r\n              }\r\n            }\r\n            if (this == game.me || _status.video) ui.updatehl();\r\n            if (!_status.video) {\r\n              game.addVideo('directgain', this, get.cardsInfo(cards));\r\n              this.update();\r\n            }\r\n            if (broadcast !== false) game.broadcast(function (player, cards) {\r\n              player.directgain(cards);\r\n            }, this, cards);\r\n            return this;\r\n          },\r\n          /**\r\n           * 本角色获取游戏牌到武将牌上，从除本角色武将牌上、手牌外的区域\r\n           * @param {Array<GameCores.GameObjects.Card>} cards 要获取的游戏牌数组，如果一张游戏牌在本角色(手牌|武将牌上)，就从数组中移除它\r\n           * @param {?boolean} [broadcast] 如果为trueh或未指定，通过{@link game.broadcast}同步获取游戏牌；如果为false，本机更新\r\n           * @param {string} [gaintag] 为此次通过此函数移动到武将牌上的每张游戏牌设置`card.gaintag=`\r\n           */\r\n          directgains: function (cards, broadcast, gaintag) {\r\n            var hs = this.getCards('hs');\r\n            for (var i = 0; i < cards.length; i++) {\r\n              if (hs.contains(cards[i])) {\r\n                cards.splice(i--, 1);\r\n              }\r\n            }\r\n            var addLast = function (card, node) {\r\n              if (gaintag) {\r\n                for (var i = 0; i < node.childNodes.length; i++) {\r\n                  var add = node.childNodes[node.childNodes.length - i - 1];\r\n                  if (!add.classList.contains('glows')) break;\r\n                  if (add.hasGaintag(gaintag)) {\r\n                    node.insertBefore(card, add.nextSibling);\r\n                    return;\r\n                  }\r\n                }\r\n              }\r\n              node.appendChild(card);\r\n            }\r\n            for (var i = 0; i < cards.length; i++) {\r\n              cards[i].fix();\r\n              cards[i].remove();\r\n              if (gaintag) cards[i].addGaintag(gaintag);\r\n              cards[i].classList.add('glows');\r\n              if (this == game.me) {\r\n                cards[i].classList.add('drawinghidden');\r\n              }\r\n              if (get.is.singleHandcard()) {\r\n                addLast(cards[i], this.node.handcards1);\r\n              }\r\n              else {\r\n                addLast(cards[i], this.node.handcards2);\r\n              }\r\n            }\r\n            if (this == game.me || _status.video) ui.updatehl();\r\n            if (!_status.video) {\r\n              game.addVideo('directgains', this, get.cardsInfo(cards));\r\n              this.update();\r\n            }\r\n            if (broadcast !== false) game.broadcast(function (player, cards, gaintag) {\r\n              player.directgains(cards, null, gaintag);//[recommend] use false instead of null\r\n            }, this, cards, gaintag);\r\n            return this;\r\n          },\r\n          gainMultiple: function (targets, position) {\r\n            var next = game.createEvent('gainMultiple', false);\r\n            next.setContent('gainMultiple');\r\n            next.player = this;\r\n            next.targets = targets;\r\n            next.position = position || 'h';\r\n            return next;\r\n          },\r\n          gain: function () {\r\n            var next = game.createEvent('gain');\r\n            next.player = this;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (get.itemtype(arguments[i]) == 'player') {\r\n                next.source = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'cards') {\r\n                next.cards = arguments[i].slice(0);\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'card') {\r\n                next.cards = [arguments[i]];\r\n              }\r\n              else if (arguments[i] === 'log') {\r\n                next.log = true;\r\n              }\r\n              else if (arguments[i] == 'fromStorage') {\r\n                next.fromStorage = true;\r\n              }\r\n              else if (arguments[i] == 'bySelf') {\r\n                next.bySelf = true;\r\n              }\r\n              else if (typeof arguments[i] == 'string') {\r\n                next.animate = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'boolean') {\r\n                next.delay = arguments[i];\r\n              }\r\n            }\r\n            if (next.animate == 'gain2' || next.animate == 'draw2') {\r\n              if (!next.hasOwnProperty('log')) {\r\n                next.log = true;\r\n              }\r\n            }\r\n            next.setContent('gain');\r\n            next.getl = function (player) {\r\n              var that = this;\r\n              var map = {\r\n                player: player,\r\n                hs: [],\r\n                es: [],\r\n                js: [],\r\n                ss: [],\r\n                cards: [],\r\n                cards2: [],\r\n              };\r\n              player.getHistory('lose', function (evt) {\r\n                if (evt.parent == that) {\r\n                  map.hs.addArray(evt.hs);\r\n                  map.es.addArray(evt.es);\r\n                  map.js.addArray(evt.js);\r\n                  map.ss.addArray(evt.ss);\r\n                  map.cards.addArray(evt.cards);\r\n                  map.cards2.addArray(evt.cards2);\r\n                }\r\n              });\r\n              if (map.cards.length > 0 || map.ss.length > 0) return map;\r\n            };\r\n            next.gaintag = [];\r\n            return next;\r\n          },\r\n          give: function (cards, target, visible) {\r\n            var next = target.gain(cards, this);\r\n            next.animate = visible ? 'give' : 'giveAuto';\r\n          },\r\n          lose: function () {\r\n            var next = game.createEvent('lose');\r\n            next.player = this;\r\n            next.forceDie = true;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (get.itemtype(arguments[i]) == 'player') {\r\n                next.source = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'cards') {\r\n                next.cards = arguments[i].slice(0);\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'card') {\r\n                next.cards = [arguments[i]];\r\n              }\r\n              else if (get.objtype(arguments[i]) == 'div') {\r\n                next.position = arguments[i];\r\n              }\r\n              else if (arguments[i] == 'toStorage') {\r\n                next.toStorage = true;\r\n              }\r\n              else if (arguments[i] == 'visible') {\r\n                next.visible = true;\r\n              }\r\n              else if (arguments[i] == 'insert') {\r\n                next.insert_card = true;\r\n              }\r\n            }\r\n            if (next.cards) {\r\n              var hej = this.getCards('hejs');\r\n              for (var i = 0; i < next.cards.length; i++) {\r\n                if (!hej.contains(next.cards[i])) {\r\n                  next.cards.splice(i--, 1);\r\n                }\r\n              }\r\n            }\r\n            if (!next.cards || !next.cards.length) {\r\n              _status.event.next.remove(next);\r\n            }\r\n            else {\r\n              if (next.position == undefined) next.position = ui.discardPile;\r\n              next.cards = next.cards.slice(0);\r\n            }\r\n            next.setContent('lose');\r\n            next.getl = function (player) {\r\n              if (this.getlx !== false && this.player == player) return this;\r\n            };\r\n            return next;\r\n          },\r\n          damage: function () {\r\n            var next = game.createEvent('damage');\r\n            //next.forceDie=true;\r\n            next.player = this;\r\n            var nocard, nosource;\r\n            var Evt = _status.event;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (get.itemtype(arguments[i]) == 'cards') {\r\n                next.cards = arguments[i].slice(0);\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'card') {\r\n                next.card = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'number') {\r\n                next.num = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'player') {\r\n                next.source = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'object' && arguments[i] && arguments[i].name) {\r\n                next.card = arguments[i];\r\n              }\r\n              else if (arguments[i] == 'nocard') {\r\n                nocard = true;\r\n              }\r\n              else if (arguments[i] == 'nosource') {\r\n                nosource = true;\r\n              }\r\n              else if (arguments[i] == 'notrigger') {\r\n                next._triggered = null;\r\n                next.notrigger = true;\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'nature') {\r\n                next.nature = arguments[i];\r\n              }\r\n            }\r\n            if (next.card == undefined && !nocard) next.card = Evt.card;\r\n            if (next.cards == undefined && !nocard) next.cards = Evt.cards;\r\n            if (next.source == undefined && !nosource) next.source = Evt.player;\r\n            if (next.source && next.source.isDead()) delete next.source;\r\n            if (next.num == undefined) next.num = 1;\r\n            if (next.nature == 'poison') delete next._triggered;\r\n            next.setContent('damage');\r\n            next.filterStop = function () {\r\n              if (this.source && this.source.isDead()) delete this.source;\r\n              if (this.num <= 0) {\r\n                delete this.filterStop;\r\n                this.trigger('damageZero');\r\n                this.finish();\r\n                this._triggered = null;\r\n                return true;\r\n              }\r\n            };\r\n            return next;\r\n          },\r\n          recover: function () {\r\n            var next = game.createEvent('recover');\r\n            next.player = this;\r\n            var nocard, nosource;\r\n            var Evt = _status.event;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (get.itemtype(arguments[i]) == 'cards') {\r\n                next.cards = arguments[i].slice(0);\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'card') {\r\n                next.card = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'player') {\r\n                next.source = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'object' && arguments[i] && arguments[i].name) {\r\n                next.card = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'number') {\r\n                next.num = arguments[i];\r\n              }\r\n              else if (arguments[i] == 'nocard') {\r\n                nocard = true;\r\n              }\r\n              else if (arguments[i] == 'nosource') {\r\n                nosource = true;\r\n              }\r\n            }\r\n            if (next.card == undefined && !nocard) next.card = Evt.card;\r\n            if (next.cards == undefined && !nocard) next.cards = Evt.cards;\r\n            if (next.source == undefined && !nosource) next.source = Evt.player;\r\n            if (next.num == undefined) next.num = 1;\r\n            if (next.num <= 0) _status.event.next.remove(next);\r\n            next.setContent('recover');\r\n            return next;\r\n          },\r\n          doubleDraw: function () {\r\n            if (get.is.changban()) return;\r\n            var next = game.createEvent('doubleDraw');\r\n            next.player = this;\r\n            next.setContent('doubleDraw');\r\n            return next;\r\n          },\r\n          loseHp: function (num) {\r\n            var next = game.createEvent('loseHp');\r\n            next.num = num;\r\n            next.player = this;\r\n            if (next.num == undefined) next.num = 1;\r\n            next.setContent('loseHp');\r\n            return next;\r\n          },\r\n          loseMaxHp: function () {\r\n            var next = game.createEvent('loseMaxHp');\r\n            next.player = this;\r\n            var nosource;\r\n            var Evt = _status.event;\r\n            next.num = 1;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (get.itemtype(arguments[i]) == 'player') {\r\n                next.source = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] === 'number') {\r\n                next.num = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] === 'boolean') {\r\n                next.forced = arguments[i];\r\n              }\r\n              else if (arguments[i] == 'nosource') {\r\n                nosource = true;\r\n              }\r\n            }\r\n            if (next.source == undefined && !nosource) next.source = Evt.player;\r\n            next.setContent('loseMaxHp');\r\n            return next;\r\n          },\r\n          gainMaxHp: function () {\r\n            var next = game.createEvent('gainMaxHp');\r\n            next.player = this;\r\n            var nosource;\r\n            var Evt = _status.event;\r\n            next.num = 1;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (typeof arguments[i] === 'number') {\r\n                next.num = arguments[i];\r\n              }\r\n              else if (get.itemtype(arguments[i]) == 'player') {\r\n                next.source = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] === 'boolean') {\r\n                next.forced = arguments[i];\r\n              }\r\n              else if (arguments[i] == 'nosource') {\r\n                nosource = true;\r\n              }\r\n            }\r\n            if (next.source == undefined && !nosource) next.source = Evt.player;\r\n            next.setContent('gainMaxHp');\r\n            return next;\r\n          },\r\n          changeHp: function (num, popup) {\r\n            var next = game.createEvent('changeHp', false);\r\n            next.num = num;\r\n            if (popup != undefined) next.popup = popup;\r\n            next.player = this;\r\n            next.setContent('changeHp');\r\n            return next;\r\n          },\r\n\r\n          changeHujia: function (num, type) {\r\n            var next = game.createEvent('changeHujia');\r\n            if (typeof num != 'number') {\r\n              num = 1;\r\n            }\r\n            next.num = num;\r\n            next.player = this;\r\n            if (type) next.type = type;\r\n            next.setContent('changeHujia');\r\n            return next;\r\n          },\r\n          getBuff: function () {\r\n            var list = [1, 2, 3, 4, 5, 6];\r\n            var nodelay = false;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (typeof arguments[i] == 'number') {\r\n                list.remove(arguments[i]);\r\n              }\r\n              else if (arguments[i] === false) {\r\n                nodelay = true;\r\n              }\r\n            }\r\n            if (this.isHealthy()) {\r\n              list.remove(2);\r\n            }\r\n            if (!this.countCards('j')) {\r\n              list.remove(5);\r\n            }\r\n            if (!this.isLinked() && !this.isTurnedOver()) {\r\n              list.remove(6);\r\n            }\r\n            if (this.hasSkill('qianxing')) {\r\n              list.remove(4);\r\n            }\r\n            switch (list.randomGet()) {\r\n              case 1: this.draw(nodelay ? 'nodelay' : 1); break;\r\n              case 2: this.recover(); break;\r\n              case 3: this.changeHujia(); break;\r\n              case 4: this.tempHide();\r\n              case 5: this.discard(this.getCards('j')).delay = (!nodelay); break;\r\n              case 6: {\r\n                if (this.isLinked()) this.link();\r\n                if (this.isTurnedOver()) this.turnOver();\r\n                break;\r\n              }\r\n            }\r\n            return this;\r\n          },\r\n          getDebuff: function () {\r\n            var list = [1, 2, 3, 4, 5, 6];\r\n            var nodelay = false;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (typeof arguments[i] == 'number') {\r\n                list.remove(arguments[i]);\r\n              }\r\n              else if (arguments[i] === false) {\r\n                nodelay = true;\r\n              }\r\n            }\r\n            if (this.countCards('he') == 0) {\r\n              list.remove(1);\r\n            }\r\n            if (this.isLinked()) {\r\n              list.remove(4);\r\n            }\r\n            if (this.hasSkill('fengyin')) {\r\n              list.remove(5);\r\n            }\r\n            if (this.hp == 1) {\r\n              list.remove(3);\r\n              if (list.length > 1) list.remove(2);\r\n            }\r\n            if (!list.length) return this;\r\n            var num = list.randomGet();\r\n            switch (list.randomGet()) {\r\n              case 1: this.randomDiscard(nodelay ? false : 'he'); break;\r\n              case 2: this.loseHp(); break;\r\n              case 3: this.damage(); break;\r\n              case 4: if (!this.isLinked()) this.link(); break;\r\n              case 5: this.addTempSkill('fengyin', { player: 'phaseAfter' }); break;\r\n              case 6: {\r\n                var list = [];\r\n                for (var i = 0; i < lib.inpile.length; i++) {\r\n                  var info = lib.card[lib.inpile[i]];\r\n                  if (info.type == 'delay' && !info.cancel && !this.hasJudge(lib.inpile[i])) {\r\n                    list.push(lib.inpile[i]);\r\n                  }\r\n                }\r\n                if (list.length) {\r\n                  var card = game.createCard(list.randomGet());\r\n                  this.addJudge(card);\r\n                  this.$draw(card);\r\n                  if (!nodelay) game.delay();\r\n                }\r\n                else {\r\n                  this.getDebuff(6);\r\n                }\r\n                break;\r\n              }\r\n            }\r\n            return this;\r\n          },\r\n          dying: function (reason) {\r\n            if (this.nodying || this.hp > 0 || this.isDying()) return;\r\n            var next = game.createEvent('dying');\r\n            next.player = this;\r\n            next.reason = reason;\r\n            if (reason && reason.source) next.source = reason.source;\r\n            next.setContent('dying');\r\n            next.filterStop = function () {\r\n              if (this.player.hp > 0) {\r\n                delete this.filterStop;\r\n                return true;\r\n              }\r\n            };\r\n            return next;\r\n          },\r\n          die: function (reason) {\r\n            var next = game.createEvent('die');\r\n            next.player = this;\r\n            next.reason = reason;\r\n            if (reason) next.source = reason.source;\r\n            next.setContent('die');\r\n            return next;\r\n          },\r\n          revive: function (hp, log) {\r\n            if (log !== false) game.log(this, '复活');\r\n            if (this.maxHp < 1) this.maxHp = 1;\r\n            if (hp) this.hp = hp;\r\n            else {\r\n              this.hp = 1;\r\n            }\r\n            game.addVideo('revive', this);\r\n            this.classList.remove('dead');\r\n            this.removeAttribute('style');\r\n            this.node.avatar.style.transform = '';\r\n            this.node.avatar2.style.transform = '';\r\n            this.node.hp.show();\r\n            this.node.equips.show();\r\n            this.node.count.show();\r\n            this.update();\r\n            var player;\r\n            player = this.previousSeat;\r\n            while (player.isDead()) player = player.previousSeat;\r\n            player.next = this;\r\n            this.previous = player;\r\n            player = this.nextSeat;\r\n            while (player.isDead()) player = player.nextSeat;\r\n            player.previous = this;\r\n            this.next = player;\r\n            game.players.add(this);\r\n            game.dead.remove(this);\r\n            if (this == game.me) {\r\n              if (ui.auto) ui.auto.show();\r\n              if (ui.wuxie) ui.wuxie.show();\r\n              if (ui.revive) {\r\n                ui.revive.close();\r\n                delete ui.revive;\r\n              }\r\n              if (ui.exit) {\r\n                ui.exit.close();\r\n                delete ui.exit;\r\n              }\r\n              if (ui.swap) {\r\n                ui.swap.close();\r\n                delete ui.swap;\r\n              }\r\n              if (ui.restart) {\r\n                ui.restart.close();\r\n                delete ui.restart;\r\n              }\r\n              if (ui.continue_game) {\r\n                ui.continue_game.close();\r\n                delete ui.continue_game;\r\n              }\r\n            }\r\n          },\r\n          /**\r\n           * 返回本角色是否处于混乱状态\r\n           * @returns {!boolean}\r\n           */\r\n          isMad: function () {\r\n            return this.hasSkill('mad');\r\n          },\r\n          /**\r\n           * 令本角色进入混乱状态；\r\n           * 此函数会输出日志\r\n           * @param {(string|Object)} [end] 结束时点，下一次触发该时点时结束本角色结束混乱状态；如果未指定，默认为'phaseAfter'\r\n           */\r\n          goMad: function (end) {\r\n            if (end) {\r\n              this.addTempSkill('mad', end);\r\n            }\r\n            else {\r\n              this.addSkill('mad');\r\n            }\r\n            game.log(this, '进入混乱状态');\r\n          },\r\n          /**\r\n           * 令本角色移除混乱状态\r\n           */\r\n          unMad: function () {\r\n            this.removeSkill('mad');\r\n          },\r\n          tempHide: function () {\r\n            this.addTempSkill('qianxing', { player: 'phaseBegin' });\r\n          },\r\n          addExpose: function (num) {\r\n            if (typeof this.ai.shown == 'number' && !this.identityShown && this.ai.shown < 1) {\r\n              this.ai.shown += num;\r\n              if (this.ai.shown > 0.95) {\r\n                this.ai.shown = 0.95;\r\n              }\r\n            }\r\n            return this;\r\n          },\r\n          equip: function (card, arg2) {\r\n            if (get.type(card) != 'equip') return;\r\n            var next = game.createEvent('equip');\r\n            next.card = card;\r\n            if (get.is.object(next.card) && get.itemtype(next.card.cards) == 'cards' && get.name(next.card.cards[0]) == next.card.name && next.card.cards.length == 1) next.card = next.card.cards[0];\r\n            next.player = this;\r\n            if (arg2) {\r\n              if (arg2 === true) {\r\n                next.draw = true;\r\n              } else {\r\n                next.cards = arg2;\r\n              }\r\n            }\r\n            if (!next.cards) next.cards = [next.card];\r\n            if (get.itemtype(next.cards) == 'card') next.cards = [next.cards];\r\n            next.setContent(lib.element.content.equip);\r\n            next.getl = function (player) {\r\n              var that = this;\r\n              var map = {\r\n                player: player,\r\n                hs: [],\r\n                es: [],\r\n                js: [],\r\n                ss: [],\r\n                cards: [],\r\n                cards2: [],\r\n              };\r\n              player.getHistory('lose', function (evt) {\r\n                if (evt.parent == that) {\r\n                  map.hs.addArray(evt.hs);\r\n                  map.es.addArray(evt.es);\r\n                  map.js.addArray(evt.js);\r\n                  map.ss.addArray(evt.ss);\r\n                  map.cards.addArray(evt.cards);\r\n                  map.cards2.addArray(evt.cards2);\r\n                }\r\n              });\r\n              if (map.cards.length > 0 || map.ss.length > 0) return map;\r\n            };\r\n            return next;\r\n          },\r\n          addJudge: function (card, cards) {\r\n            var next = game.createEvent('addJudge');\r\n            next.card = card;\r\n            next.cards = cards;\r\n            if (next.cards == undefined) next.cards = [card];\r\n            if (get.itemtype(next.cards) == 'card') next.cards = [next.cards];\r\n            next.player = this;\r\n            next.setContent('addJudge');\r\n            next.getl = function (player) {\r\n              var that = this;\r\n              var map = {\r\n                player: player,\r\n                hs: [],\r\n                es: [],\r\n                js: [],\r\n                ss: [],\r\n                cards: [],\r\n                cards2: [],\r\n              };\r\n              player.getHistory('lose', function (evt) {\r\n                if (evt.parent == that) {\r\n                  map.hs.addArray(evt.hs);\r\n                  map.es.addArray(evt.es);\r\n                  map.js.addArray(evt.js);\r\n                  map.ss.addArray(evt.ss);\r\n                  map.cards.addArray(evt.cards);\r\n                  map.cards2.addArray(evt.cards2);\r\n                }\r\n              });\r\n              if (map.cards.length > 0 || map.ss.length > 0) return map;\r\n            };\r\n            return next;\r\n          },\r\n          canAddJudge: function (card) {\r\n            if (this.storage._disableJudge) return false;\r\n            var name;\r\n            if (typeof card == 'string') {\r\n              name = card;\r\n            }\r\n            else {\r\n              name = card.viewAs || card.name;\r\n            }\r\n            if (!name) return false;\r\n            if (this.hasJudge(name)) return false;\r\n            var mod = game.checkMod(card, this, this, 'unchanged', 'targetEnabled', this);\r\n            if (mod != 'unchanged') return mod;\r\n            return true;\r\n          },\r\n          addJudgeNext: function (card) {\r\n            if (!card.expired) {\r\n              var target = this.next;\r\n              var name = card.viewAs || card.name;\r\n              var bool = false;\r\n              for (var iwhile = 0; iwhile < 20; iwhile++) {\r\n                if (target.canAddJudge(card)) {\r\n                  bool = true; break;\r\n                }\r\n                target = target.next;\r\n              }\r\n              if (!bool) {\r\n                game.log(card, '进入了弃牌堆');\r\n                game.cardsDiscard(card);\r\n              }\r\n              else {\r\n                if (card.name != name) {\r\n                  target.addJudge(name, card);\r\n                }\r\n                else {\r\n                  target.addJudge(card);\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              card.expired = false;\r\n            }\r\n          },\r\n          /**\r\n           * 判定事件\r\n           * @returns {!boolean}\r\n           */\r\n          judge: function () {\r\n            var next = game.createEvent('judge');\r\n            next.player = this;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (get.itemtype(arguments[i]) == 'card') {\r\n                next.card = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'string') {\r\n                next.skill = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'function') {\r\n                next.judge = arguments[i];\r\n              }\r\n              else if (typeof arguments[i] == 'boolean') {\r\n                next.clearArena = arguments[i];\r\n              }\r\n              else if (get.objtype(arguments[i]) == 'div') {\r\n                next.position = arguments[i];\r\n              }\r\n            }\r\n            if (next.card && next.judge == undefined) {\r\n              next.judge = get.judge(next.card);\r\n            }\r\n            if (next.judge == undefined) next.judge = function () { return 0 };\r\n            if (next.position == undefined) next.position = ui.discardPile;\r\n            if (next.card) next.cardname = next.card.viewAs || next.card.name;\r\n\r\n            var str = '';\r\n            if (next.card) str = get.translation(next.card.viewAs || next.card.name);\r\n            else if (next.skill) str = get.translation(next.skill);\r\n            else str = get.translation(_status.event.name);\r\n            next.judgestr = str;\r\n            next.setContent('judge');\r\n            return next;\r\n          },\r\n          /**\r\n           * 翻面事件\r\n           * @returns {!boolean}\r\n           */\r\n          turnOver: function (bool) {\r\n            if (typeof bool == 'boolean') {\r\n              if (bool) {\r\n                if (this.isTurnedOver()) return;\r\n              }\r\n              else {\r\n                if (!this.isTurnedOver()) return;\r\n              }\r\n            }\r\n            var next = game.createEvent('turnOver');\r\n            next.player = this;\r\n            var nosource;\r\n            var Evt = _status.event;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (get.itemtype(arguments[i]) == 'player') {\r\n                next.source = arguments[i];\r\n              }\r\n              else if (arguments[i] == 'nosource') {\r\n                nosource = true;\r\n              }\r\n            }\r\n            if (next.source == undefined && !nosource) next.source = Evt.player;\r\n            next.setContent('turnOver');\r\n            return next;\r\n          },\r\n          out: function (skill) {\r\n            if (typeof skill == 'number') {\r\n              this.outCount += skill;\r\n            }\r\n            else if (typeof skill == 'string') {\r\n              if (!this.outSkills) {\r\n                this.outSkills = [];\r\n              }\r\n              this.outSkills.add(skill);\r\n            }\r\n            else {\r\n              this.outCount++;\r\n            }\r\n            if (!this.classList.contains('out')) {\r\n              this.classList.add('out');\r\n              game.log(this, '离开游戏');\r\n            }\r\n            if (!game.countPlayer()) {\r\n              game.over();\r\n            }\r\n          },\r\n          in: function (skill) {\r\n            if (this.isOut()) {\r\n              if (typeof skill == 'string') {\r\n                if (this.outSkills) {\r\n                  this.outSkills.remove(skill);\r\n                  if (!this.outSkills.length) {\r\n                    delete this.outSkills;\r\n                  }\r\n                }\r\n              }\r\n              else if (typeof skill == 'number') {\r\n                this.outCount -= skill;\r\n              }\r\n              else {\r\n                if (skill === true) {\r\n                  delete this.outSkills;\r\n                }\r\n                this.outCount = 0;\r\n              }\r\n              if (this.outCount <= 0 && !this.outSkills) {\r\n                this.outCount = 0;\r\n                this.classList.remove('out');\r\n                game.log(this, '进入游戏');\r\n              }\r\n            }\r\n          },\r\n          /**\r\n           * 横置事件\r\n           * @returns {!boolean}\r\n           */\r\n          link: function (bool) {\r\n            if (typeof bool == 'boolean') {\r\n              if (bool) {\r\n                if (this.isLinked()) return;\r\n              }\r\n              else {\r\n                if (!this.isLinked()) return;\r\n              }\r\n            }\r\n            var next = game.createEvent('link');\r\n            next.player = this;\r\n            var nosource;\r\n            var Evt = _status.event;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (get.itemtype(arguments[i]) == 'player') {\r\n                next.source = arguments[i];\r\n              }\r\n              else if (arguments[i] == 'nosource') {\r\n                nosource = true;\r\n              }\r\n            }\r\n            if (next.source == undefined && !nosource) next.source = Evt.player;\r\n            next.setContent('link');\r\n            return next;\r\n          },\r\n          skip: function (name) {\r\n            this.skipList.add(name);\r\n          },\r\n          wait: function (callback) {\r\n            if (lib.node) {\r\n              if (typeof callback == 'function') {\r\n                callback._noname_waiting = true;\r\n                lib.node.torespond[this.playerid] = callback;\r\n              }\r\n              else {\r\n                lib.node.torespond[this.playerid] = '_noname_waiting';\r\n              }\r\n              clearTimeout(lib.node.torespondtimeout[this.playerid]);\r\n              if (this.ws && !this.ws.closed) {\r\n                var player = this;\r\n                var time = parseInt(lib.configOL.choose_timeout) * 1000;\r\n                if (ui.arena && ui.arena.classList.contains('choose-character') && lib.configOL.chooseCharacter_timeout) {\r\n                  time *= 5;\r\n                }\r\n                if (_status.event.getParent().skillHidden) {\r\n                  for (var i = 0; i < game.players.length; i++) {\r\n                    game.players[i].showTimer(time);\r\n                  }\r\n                  player._hide_all_timer = true;\r\n                }\r\n                else if (!_status.event._global_waiting) {\r\n                  player.showTimer(time);\r\n                }\r\n                lib.node.torespondtimeout[this.playerid] = setTimeout(function () {\r\n                  player.unwait('ai');\r\n                  player.ws.ws.close();\r\n                }, time + 5000);\r\n              }\r\n            }\r\n          },\r\n          unwait: function (result) {\r\n            if (this._hide_all_timer) {\r\n              delete this._hide_all_timer;\r\n              for (var i = 0; i < game.players.length; i++) {\r\n                game.players[i].hideTimer();\r\n              }\r\n            }\r\n            else if (!_status.event._global_waiting) {\r\n              this.hideTimer();\r\n            }\r\n            clearTimeout(lib.node.torespondtimeout[this.playerid]);\r\n            delete lib.node.torespondtimeout[this.playerid];\r\n            if (!lib.node.torespond.hasOwnProperty(this.playerid)) {\r\n              return;\r\n            }\r\n            var noresume = false;\r\n            var proceed = null;\r\n            if (typeof lib.node.torespond[this.playerid] == 'function' && lib.node.torespond[this.playerid]._noname_waiting) {\r\n              proceed = lib.node.torespond[this.playerid](result, this);\r\n              if (proceed === false) {\r\n                noresume = true;\r\n              }\r\n            }\r\n            lib.node.torespond[this.playerid] = result;\r\n            for (var i in lib.node.torespond) {\r\n              if (lib.node.torespond[i] == '_noname_waiting') {\r\n                return;\r\n              }\r\n              else if (lib.node.torespond[i] && lib.node.torespond[i]._noname_waiting) {\r\n                return;\r\n              }\r\n            }\r\n            _status.event.result = result;\r\n            _status.event.resultOL = lib.node.torespond;\r\n            lib.node.torespond = {};\r\n            if (typeof proceed == 'function') proceed();\r\n            else if (_status.paused && !noresume) game.resume();\r\n          },\r\n          /**\r\n           * \r\n           * @returns {!boolean}\r\n           */\r\n          logSkill: function (name, targets, nature, logv, audio) {\r\n            if (get.itemtype(targets) == 'player') targets = [targets];\r\n            var nopop = false;\r\n            var popname = name;\r\n            if (Array.isArray(name)) {\r\n              popname = name[1];\r\n              name = name[0];\r\n            }\r\n            var checkShow = this.checkShow(name);\r\n            if (lib.translate[name]) {\r\n              this.trySkillAnimate(name, popname, checkShow);\r\n              if (typeof targets == 'object' && targets.length) {\r\n                var str;\r\n                if (targets[0] == this) {\r\n                  str = '#b自己';\r\n                  if (targets.length > 1) {\r\n                    str += '、';\r\n                    str += get.translation(targets.slice(1));\r\n                  }\r\n                }\r\n                else str = targets;\r\n                game.log(this, '对', str, '发动了', '#p『' + get.skillTranslation(name, this) + '』');\r\n              }\r\n              else {\r\n                game.log(this, '发动了', '#p『' + get.skillTranslation(name, this) + '』');\r\n              }\r\n            }\r\n            if (nature != false) {\r\n              if (nature === undefined) {\r\n                nature = 'green';\r\n              }\r\n              this.line(targets, nature);\r\n            }\r\n            var info = lib.skill[name];\r\n            if (info && info.ai && info.ai.expose != undefined &&\r\n              this.logAi && (!targets || targets.length != 1 || targets[0] != this)) {\r\n              this.logAi(lib.skill[name].ai.expose);\r\n            }\r\n            if (info && info.round) {\r\n              var roundname = name + '_roundcount';\r\n              this.storage[roundname] = info.round;\r\n              if (!this.hasSkill(roundname)) this.addSkill(roundname)\r\n              // this.storage[roundname] = game.roundNumber;\r\n              this.syncStorage(roundname);\r\n              this.markSkill(roundname);\r\n            }\r\n            if (audio !== false) {\r\n              game.trySkillAudio(name, this, true);\r\n            }\r\n            if (game.chess) {\r\n              this.chessFocus();\r\n            }\r\n            if (logv === true) {\r\n              game.logv(this, name, targets, null, true);\r\n            }\r\n            else if (info && info.logv !== false) {\r\n              game.logv(this, name, targets);\r\n            }\r\n            if (this._hookTrigger) {\r\n              for (var i = 0; i < this._hookTrigger.length; i++) {\r\n                var info = lib.skill[this._hookTrigger[i]].hookTrigger;\r\n                if (info && info.log) {\r\n                  info.log(this, name, targets);\r\n                }\r\n              }\r\n            }\r\n          },\r\n          unprompt: function () {\r\n            if (this.node.prompt) {\r\n              this.node.prompt.delete();\r\n              delete this.node.prompt;\r\n            }\r\n          },\r\n          prompt: function (str, nature) {\r\n            var node;\r\n            if (this.node.prompt) {\r\n              node = this.node.prompt;\r\n              node.innerHTML = '';\r\n              node.className = 'damage normal-font damageadded';\r\n            }\r\n            else {\r\n              node = ui.create.div('.damage.normal-font', this);\r\n              this.node.prompt = node;\r\n              ui.refresh(node);\r\n              node.classList.add('damageadded');\r\n            }\r\n            node.innerHTML = str;\r\n            node.dataset.nature = nature || 'soil';\r\n          },\r\n          prompt_old: function (name2, className) {\r\n            var node;\r\n            if (this.node.prompt) {\r\n              node = this.node.prompt;\r\n              node.innerHTML = '';\r\n              node.className = 'popup';\r\n            }\r\n            else {\r\n              node = ui.create.div('.popup', this.parentNode);\r\n              this.node.prompt = node;\r\n            }\r\n            node.dataset.position = this.dataset.position;\r\n            if (this.dataset.position == 0 || parseInt(this.dataset.position) == parseInt(ui.arena.dataset.number) / 2 ||\r\n              typeof name2 == 'number' || this.classList.contains('minskin')) {\r\n              node.innerHTML = name2;\r\n            }\r\n            else {\r\n              for (var i = 0; i < name2.length; i++) {\r\n                node.innerHTML += name2[i] + '<br/>';\r\n              }\r\n            }\r\n            if (className) {\r\n              node.classList.add(className);\r\n            }\r\n          },\r\n          /**\r\n           * 文字弹出动画效果\r\n           * [recommend] 令人迷惑的是，此函数实质调用了{@link lib.element.player.$damagepop}，而不是{@link lib.element.player.$damagepop}调用此函数\r\n           * @param {!string} name (技能|角色|游戏牌)名或其他任意非空字符串\r\n           * @param {string} [classname='water'] 效果色\r\n           * @param {?boolean} [nobroadcast] 如果为true，则\r\n           */\r\n          popup: function (name, className, nobroadcast) {\r\n            var name2 = get.translation(name);\r\n            if (!name2) return;\r\n            this.$damagepop(name2, className || 'water', true, nobroadcast);\r\n          },\r\n          popup_old: function (name, className) {\r\n            var name2 = get.translation(name);\r\n            var node = ui.create.div('.popup', this.parentNode);\r\n            if (!name2) {\r\n              node.remove();\r\n              return node;\r\n            }\r\n            game.addVideo('popup', this, [name, className]);\r\n            node.dataset.position = this.dataset.position;\r\n            if (this.dataset.position == 0 || parseInt(this.dataset.position) == parseInt(ui.arena.dataset.number) / 2 ||\r\n              typeof name2 == 'number' || this.classList.contains('minskin')) {\r\n              node.innerHTML = name2;\r\n            }\r\n            else {\r\n              for (var i = 0; i < name2.length; i++) {\r\n                node.innerHTML += name2[i] + '<br/>';\r\n              }\r\n            }\r\n            if (className) {\r\n              node.classList.add(className);\r\n            }\r\n            this.popups.push(node);\r\n            if (this.popups.length > 1) {\r\n              node.hide();\r\n            }\r\n            else {\r\n              var that = this;\r\n              setTimeout(function () { that._popup(); }, 1000);\r\n            }\r\n            return node;\r\n          },\r\n          _popup: function () {\r\n            if (this.popups.length) {\r\n              this.popups.shift().delete();\r\n              if (this.popups.length) {\r\n                this.popups[0].show();\r\n                var that = this;\r\n                setTimeout(function () { that._popup(); }, 1000);\r\n              }\r\n            }\r\n          },\r\n          showTimer: function (time) {\r\n            if (!time && lib.configOL) {\r\n              time = parseInt(lib.configOL.choose_timeout) * 1000;\r\n            }\r\n            // if(ui.arena&&ui.arena.classList.contains('choose-character')&&lib.configOL.chooseCharacter_timeout){\r\n            // \ttime *= 5;\r\n            // }\r\n            if (_status.connectMode && !game.online) {\r\n              game.broadcast(function (player, time) {\r\n                player.showTimer(time);\r\n              }, this, time);\r\n            }\r\n            if (this == game.me) {\r\n              return;\r\n            }\r\n            if (this.node.timer) {\r\n              this.node.timer.remove();\r\n            }\r\n            var timer = ui.create.div('.timerbar', this);\r\n            this.node.timer = timer;\r\n            ui.create.div(this.node.timer);\r\n            var bar = ui.create.div(this.node.timer);\r\n            ui.refresh(bar);\r\n            bar.style.transitionDuration = (time / 1000) + 's';\r\n            bar.style.width = 0;\r\n          },\r\n          hideTimer: function () {\r\n            if (_status.connectMode && !game.online && this.playerid) {\r\n              game.broadcast(function (player) {\r\n                player.hideTimer();\r\n              }, this);\r\n            }\r\n            if (this.node.timer) {\r\n              this.node.timer.delete();\r\n              delete this.node.timer;\r\n            }\r\n          },\r\n          markAuto: function (name, info) {\r\n            if (Array.isArray(info)) {\r\n              if (!Array.isArray(this.storage[name])) this.storage[name] = [];\r\n              this.storage[name].addArray(info);\r\n              this.markSkill(name);\r\n            }\r\n            else {\r\n              var storage = this.storage[name];\r\n              if (Array.isArray(storage)) {\r\n                this[storage.length > 0 ? 'markSkill' : 'unmarkSkill'](name);\r\n              }\r\n              else if (typeof storage == 'number') {\r\n                this[storage.length > 0 ? 'markSkill' : 'unmarkSkill'](name);\r\n              }\r\n            }\r\n          },\r\n          unmarkAuto: function (name, info) {\r\n            var storage = this.storage[name]\r\n            if (Array.isArray(info) && Array.isArray(storage)) {\r\n              storage.removeArray(info.slice(0));\r\n              this.markAuto(name);\r\n            }\r\n          },\r\n          getStorage: function (name) {\r\n            return this.storage[name] || [];\r\n          },\r\n          markSkill: function (name, info, card) {\r\n            if (info === true) {\r\n              this.syncStorage(name);\r\n              info = null;\r\n            }\r\n            if (get.itemtype(card) == 'card') {\r\n              game.addVideo('markSkill', this, [name, get.cardInfo(card)]);\r\n            }\r\n            else {\r\n              game.addVideo('markSkill', this, [name]);\r\n            }\r\n            game.broadcastAll(function (storage, player, name, info, card) {\r\n              if (storage != undefined) {\r\n                player.storage[name] = storage;\r\n              }\r\n              if (!info) {\r\n                if (player.marks[name]) {\r\n                  player.updateMarks();\r\n                  return;\r\n                }\r\n                if (lib.skill[name]) {\r\n                  info = lib.skill[name].intro;\r\n                }\r\n                if (!info) {\r\n                  return;\r\n                }\r\n              }\r\n              if (player.marks[name]) {\r\n                player.marks[name].info = info;\r\n              }\r\n              else {\r\n                if (card) {\r\n                  player.marks[name] = player.mark(card, info, name);\r\n                }\r\n                else {\r\n                  player.marks[name] = player.mark(name, info);\r\n                }\r\n              }\r\n              player.updateMarks();\r\n            }, this.storage[name], this, name, info, card);\r\n            return this;\r\n          },\r\n          unmarkSkill: function (name) {\r\n            game.addVideo('unmarkSkill', this, name);\r\n            game.broadcast(function (player, name) {\r\n              if (player.marks[name]) {\r\n                player.marks[name].delete();\r\n                player.marks[name].style.transform += ' scale(0.2)';\r\n                delete player.marks[name];\r\n                ui.updatem(player);\r\n              }\r\n            }, this, name);\r\n            if (this.marks[name]) {\r\n              this.marks[name].delete();\r\n              this.marks[name].style.transform += ' scale(0.2)';\r\n              delete this.marks[name];\r\n              ui.updatem(this);\r\n              var info = lib.skill[name];\r\n              if (info && info.intro && info.intro.onunmark) {\r\n                if (info.intro.onunmark == 'throw') {\r\n                  if (get.itemtype(this.storage[name]) == 'cards') {\r\n                    this.$throw(this.storage[name], 1000);\r\n                    game.cardsDiscard(this.storage[name]);\r\n                    game.log(this.storage[name], '进入了弃牌堆');\r\n                    this.storage[name].length = 0;\r\n                  }\r\n                }\r\n                else if (typeof info.intro.onunmark == 'function') {\r\n                  info.intro.onunmark(this.storage[name], this);\r\n                }\r\n              }\r\n            }\r\n            return this;\r\n          },\r\n          markSkillCharacter: function (id, target, name, content) {\r\n            if (typeof target == 'object') {\r\n              target = target.name;\r\n            }\r\n            game.broadcastAll(function (player, target, name, content, id) {\r\n              if (player.marks[id]) {\r\n                player.marks[id].name = name + '_charactermark';\r\n                player.marks[id]._name = target;\r\n                player.marks[id].info = {\r\n                  name: name,\r\n                  content: content,\r\n                  id: id\r\n                };\r\n                player.marks[id].setBackground(target, 'character');\r\n                game.addVideo('changeMarkCharacter', player, {\r\n                  id: id,\r\n                  name: name,\r\n                  content: content,\r\n                  target: target\r\n                });\r\n              }\r\n              else {\r\n                player.marks[id] = player.markCharacter(target, {\r\n                  name: name,\r\n                  content: content,\r\n                  id: id\r\n                });\r\n                player.marks[id]._name = target;\r\n                game.addVideo('markCharacter', player, {\r\n                  name: name,\r\n                  content: content,\r\n                  id: id,\r\n                  target: target\r\n                });\r\n              }\r\n            }, this, target, name, content, id);\r\n            return this;\r\n          },\r\n          markCharacter: function (name, info, learn, learn2) {\r\n            if (typeof name == 'object') {\r\n              name = name.name;\r\n            }\r\n            var node;\r\n            if (name.indexOf('unknown') == 0) {\r\n              node = ui.create.div('.card.mark.drawinghidden');\r\n              ui.create.div('.background.skillmark', node).innerHTML = get.translation(name)[0];\r\n            }\r\n            else {\r\n              if (!lib.character[name]) return;\r\n              node = ui.create.div('.card.mark.drawinghidden').setBackground(name, 'character');\r\n            }\r\n            this.node.marks.insertBefore(node, this.node.marks.childNodes[1]);\r\n            node.name = name + '_charactermark';\r\n            if (!info) {\r\n              info = {};\r\n            }\r\n            if (!info.name) {\r\n              info.name = get.translation(name);\r\n            }\r\n            if (!info.content) {\r\n              info.content = get.skillintro(name, learn, learn2)\r\n            }\r\n            node.info = info;\r\n            node.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.card);\r\n            if (!lib.config.touchscreen) {\r\n              if (lib.config.hover_all) {\r\n                lib.setHover(node, ui.click.hoverplayer);\r\n              }\r\n              if (lib.config.right_info) {\r\n                node.oncontextmenu = ui.click.rightplayer;\r\n              }\r\n            }\r\n            ui.updatem(this);\r\n            return node;\r\n          },\r\n          /**\r\n           * 标记\r\n           * @function\r\n           * @param {(Array<Card>|Card|string)} name \r\n           * @param {*} info mark info\r\n           * @param {*} skill \r\n           * @returns {*}\r\n           */\r\n          mark: function (name, info, skill) {\r\n            if (get.itemtype(name) == 'cards') {\r\n              var marks = [];\r\n              for (var i = 0; i < name.length; i++) {\r\n                marks.push(this.mark(name[i], info));\r\n              }\r\n              return marks;\r\n            }\r\n            else {\r\n              var node;\r\n              if (get.itemtype(name) == 'card') {\r\n                node = name.copy('mark');\r\n                node.classList.add('drawinghidden');\r\n                this.node.marks.insertBefore(node, this.node.marks.childNodes[1]);\r\n                node.suit = name.suit;\r\n                node.number = name.number;\r\n                // if(name.name&&lib.card[name.name]&&lib.card[name.name].markimage){\r\n                //     node.node.image.style.left=lib.card[name.name].markimage;\r\n                // }\r\n\r\n                if (name.classList.contains('fullborder')) {\r\n                  node.classList.add('fakejudge');\r\n                  node.classList.add('fakemark');\r\n                  (node.querySelector('.background') || ui.create.div('.background', node)).innerHTML = lib.translate[name.name + '_bg'] || get.translation(name.name)[0];\r\n                }\r\n\r\n                name = name.name;\r\n              }\r\n              else {\r\n                node = ui.create.div('.card.mark.drawinghidden');\r\n                this.node.marks.insertBefore(node, this.node.marks.childNodes[1]);\r\n                var str = lib.translate[name + '_bg'];\r\n                if (!str || str[0] == '+' || str[0] == '-') {\r\n                  str = get.translation(name)[0];\r\n                }\r\n                ui.create.div('.background.skillmark', node).innerHTML = str;\r\n                // node.style.fontFamily=lib.config.card_font;\r\n              }\r\n              node.name = name;\r\n              node.skill = skill || name;\r\n              if (typeof info == 'object') {\r\n                node.info = info;\r\n              }\r\n              else if (typeof info == 'string') {\r\n                node.markidentifer = info;\r\n              }\r\n              node.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.card);\r\n              if (!lib.config.touchscreen) {\r\n                if (lib.config.hover_all) {\r\n                  lib.setHover(node, ui.click.hoverplayer);\r\n                }\r\n                if (lib.config.right_info) {\r\n                  node.oncontextmenu = ui.click.rightplayer;\r\n                }\r\n              }\r\n              this.updateMarks();\r\n              ui.updatem(this);\r\n              return node;\r\n            }\r\n          },\r\n          /**\r\n           * 取消标记\r\n           * @function\r\n           * @param {*} name\r\n           * @param {*} info\r\n           */\r\n          unmark: function (name, info) {\r\n            game.addVideo('unmarkname', this, name);\r\n            if (get.itemtype(name) == 'card') {\r\n              this.unmark(name.name, info);\r\n            }\r\n            else if (get.itemtype(name) == 'cards') {\r\n              for (var i = 0; i < name.length; i++) {\r\n                this.unmark(name[i].name, info);\r\n              }\r\n            }\r\n            else {\r\n              for (var i = 0; i < this.node.marks.childNodes.length; i++) {\r\n                if (this.node.marks.childNodes[i].name == name &&\r\n                  (!info || this.node.marks.childNodes[i].markidentifer == info)) {\r\n                  this.node.marks.childNodes[i].delete();\r\n                  this.node.marks.childNodes[i].style.transform += ' scale(0.2)';\r\n                  ui.updatem(this);\r\n                  return;\r\n                }\r\n              }\r\n            }\r\n          },\r\n          addLink: function () {\r\n            if (get.is.linked2(this)) {\r\n              this.classList.add('linked2');\r\n            }\r\n            else {\r\n              this.classList.add('linked');\r\n            }\r\n          },\r\n          removeLink: function () {\r\n            if (get.is.linked2(this)) {\r\n              this.classList.remove('linked2');\r\n            }\r\n            else {\r\n              this.classList.remove('linked');\r\n            }\r\n          },\r\n          /**\r\n           * 返回一张牌当前本角色是否可以(对目标角色)使用\r\n           * @returns {!boolean}\r\n           */\r\n          canUse: function (card, target, distance, includecard) {\r\n            if (typeof card == 'string') card = { name: card, isCard: true };\r\n            var info = get.info(card);\r\n            if (info.multicheck && !info.multicheck(card, this)) return false;\r\n            if (!lib.filter.cardEnabled(card, this)) return false;\r\n            if (distance !== false && !lib.filter.targetInRange(card, this, target)) return false;\r\n            return lib.filter[includecard ? 'targetEnabledx' : 'targetEnabled'](card, this, target);\r\n          },\r\n          /**\r\n           * 返回一张牌当前本角色是否可以使用\r\n           * @returns {!boolean}\r\n           */\r\n          hasUseTarget: function (card, distance, includecard) {\r\n            var player = this;\r\n            return game.hasPlayer(function (current) {\r\n              return player.canUse(card, current, distance, includecard);\r\n            });\r\n          },\r\n          /**\r\n           * 返回一张牌当前本角色使用的收益为正收益，当前可以使用，且有使用对象\r\n           * @returns {!boolean}\r\n           */\r\n          hasValueTarget: function () {\r\n            return this.getUseValue.apply(this, arguments) > 0;\r\n          },\r\n          /**\r\n           * 返回一张牌当前本角色使用的收益\r\n           * @returns {!boolean}\r\n           */\r\n          getUseValue: function (card, distance, includecard) {\r\n            if (typeof (card) == 'string') {\r\n              card = { name: card, isCard: true };\r\n            }\r\n            var player = this;\r\n            var targets = game.filterPlayer();\r\n            var value = [];\r\n            var min = 0;\r\n            var info = get.info(card);\r\n            if (!info || info.notarget) return 0;\r\n            var range;\r\n            var select = get.copy(info.selectTarget);\r\n            if (select == undefined) {\r\n              if (info.filterTarget == undefined) return true;\r\n              range = [1, 1];\r\n            }\r\n            else if (typeof select == 'number') range = [select, select];\r\n            else if (get.itemtype(select) == 'select') range = select;\r\n            else if (typeof select == 'function') range = select(card, player);\r\n            if (info.singleCard) range = [1, 1];\r\n            game.checkMod(card, player, range, 'selectTarget', player);\r\n            if (!range) return 0;\r\n\r\n            for (var i = 0; i < targets.length; i++) {\r\n              if (player.canUse(card, targets[i], distance, includecard)) {\r\n                var eff = get.effect(targets[i], card, player, player);\r\n                value.push(eff);\r\n              }\r\n            }\r\n            value.sort(function (a, b) {\r\n              return b - a;\r\n            });\r\n            for (var i = 0; i < value.length; i++) {\r\n              if (i == range[1] || range[1] != -1 && value[i] <= 0) break;\r\n              min += value[i];\r\n            }\r\n            return min;\r\n          },\r\n          /**\r\n           * \r\n           * @returns {!boolean}\r\n           */\r\n          addSubPlayer: function (cfg) {\r\n            var skill = 'subplayer_' + cfg.name + '_' + get.id();\r\n            game.log(this, '获得了随从', '#g' + get.translation(cfg.name))\r\n            cfg.hs = cfg.hs || [];\r\n            cfg.es = cfg.es || [];\r\n            cfg.skills = cfg.skills || [];\r\n            cfg.hp = cfg.hp || 1;\r\n            cfg.maxHp = cfg.maxHp || 1;\r\n            cfg.sex = cfg.sex || 'male';\r\n            cfg.group = cfg.group || 'qun';\r\n            cfg.skill = cfg.skill || _status.event.name;\r\n            if (!cfg.source) {\r\n              if (this.hasSkill(_status.event.name) && this.name2 && lib.character[this.name2] &&\r\n                lib.character[this.name2][3].contains(_status.event.name)) {\r\n                cfg.source = this.name2;\r\n              }\r\n              else {\r\n                cfg.source = this.name;\r\n              }\r\n            }\r\n            game.broadcastAll(function (player, skill, cfg) {\r\n              lib.skill[skill] = {\r\n                intro: {\r\n                  content: cfg.intro || ''\r\n                },\r\n                mark: 'character',\r\n                subplayer: cfg.skill,\r\n                ai: {\r\n                  subplayer: true\r\n                }\r\n              }\r\n              lib.character[skill] = [cfg.sex, cfg.group, cfg.maxHp, cfg.skills, ['character:' + cfg.name]];\r\n              lib.translate[skill] = cfg.caption || get.rawName(cfg.name);\r\n              player.storage[skill] = cfg;\r\n            }, this, skill, cfg);\r\n            game.addVideo('addSubPlayer', this, [skill, lib.skill[skill], lib.character[skill], lib.translate[skill], { name: cfg.name }]);\r\n            this.addSkill(skill);\r\n            return skill;\r\n          },\r\n          /**\r\n           * \r\n           * @returns {!boolean}\r\n           */\r\n          removeSubPlayer: function (name) {\r\n            if (this.hasSkill('subplayer') && this.name == name) {\r\n              this.exitSubPlayer(true);\r\n            }\r\n            else {\r\n              if (player.storage[name].onremove) {\r\n                player.storage[name].onremove(player);\r\n              }\r\n              this.removeSkill(name);\r\n              delete this.storage[name];\r\n              game.log(player, '牺牲了随从', '#g' + name);\r\n              _status.event.trigger('removeSubPlayer');\r\n            }\r\n          },\r\n          /**\r\n           * \r\n           * @returns {!boolean}\r\n           */\r\n          callSubPlayer: function () {\r\n            if (this.hasSkill('subplayer')) return;\r\n            var next = game.createEvent('callSubPlayer');\r\n            next.player = this;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (typeof arguments[i] == 'string') {\r\n                next.directresult = arguments[i];\r\n              }\r\n            }\r\n            next.setContent('callSubPlayer');\r\n            return next;\r\n          },\r\n          /**\r\n           * \r\n           * @returns {!boolean}\r\n           */\r\n          toggleSubPlayer: function () {\r\n            if (!this.hasSkill('subplayer')) return;\r\n            var next = game.createEvent('toggleSubPlayer');\r\n            next.player = this;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (typeof arguments[i] == 'string') {\r\n                next.directresult = arguments[i];\r\n              }\r\n            }\r\n            next.setContent('toggleSubPlayer');\r\n            return next;\r\n          },\r\n          /**\r\n           * \r\n           * @returns {!boolean}\r\n           */\r\n          exitSubPlayer: function (remove) {\r\n            if (!this.hasSkill('subplayer')) return;\r\n            var next = game.createEvent('exitSubPlayer');\r\n            next.player = this;\r\n            next.remove = remove;\r\n            next.setContent('exitSubPlayer');\r\n            return next;\r\n          },\r\n          /**\r\n           * \r\n           * @returns {!boolean}\r\n           */\r\n          getSubPlayers: function (tag) {\r\n            var skills = this.getSkills();\r\n            var list = [];\r\n            for (var i = 0; i < skills.length; i++) {\r\n              var name = skills[i];\r\n              var info = lib.skill[name];\r\n              if (tag && info.subplayer != tag) continue;\r\n              if (info.ai && info.ai.subplayer && this.storage[name] && this.storage[name].name) {\r\n                list.push(name);\r\n              }\r\n            }\r\n            return list;\r\n          },\r\n          /**\r\n           * 同时将info.global内的技能添加到{@link lib.skill.global}\r\n           * @returns {!boolean}\r\n           */\r\n          addSkillTrigger: function (skill, hidden, triggeronly) {\r\n            var info = lib.skill[skill];\r\n            if (!info) return;\r\n            if (typeof info.group == 'string') {\r\n              this.addSkillTrigger(info.group, hidden);\r\n            }\r\n            else if (Array.isArray(info.group)) {\r\n              for (var i = 0; i < info.group.length; i++) {\r\n                this.addSkillTrigger(info.group[i], hidden);\r\n              }\r\n            }\r\n            if (!triggeronly) {\r\n              if (info.global && (!hidden || info.globalSilent)) {\r\n                if (typeof info.global == 'string') {\r\n                  game.addGlobalSkill(info.global, this);\r\n                }\r\n                else {\r\n                  for (var j = 0; j < info.global.length; j++) {\r\n                    game.addGlobalSkill(info.global[j], this);\r\n                  }\r\n                }\r\n              }\r\n              if (this.initedSkills.contains(skill)) return this;\r\n              this.initedSkills.push(skill);\r\n              if (info.init && !_status.video) {\r\n                info.init(this, skill);\r\n              }\r\n            }\r\n            if (info.trigger && this.playerid) {\r\n              var playerid = this.playerid;\r\n              var setTrigger = function (i, evt) {\r\n                if (i == 'global') {\r\n                  if (!lib.hook.globaltrigger[evt]) {\r\n                    lib.hook.globaltrigger[evt] = {};\r\n                  }\r\n                  if (!lib.hook.globaltrigger[evt][playerid]) {\r\n                    lib.hook.globaltrigger[evt][playerid] = [];\r\n                  }\r\n                  lib.hook.globaltrigger[evt][playerid].add(skill);\r\n                }\r\n                else {\r\n                  var name = playerid + '_' + i + '_' + evt;\r\n                  if (!lib.hook[name]) {\r\n                    lib.hook[name] = [];\r\n                  }\r\n                  lib.hook[name].add(skill);\r\n                }\r\n                lib.hookmap[evt] = true;\r\n              }\r\n              for (var i in info.trigger) {\r\n                if (typeof info.trigger[i] == 'string') {\r\n                  setTrigger(i, info.trigger[i]);\r\n                }\r\n                else if (Array.isArray(info.trigger[i])) {\r\n                  for (var j = 0; j < info.trigger[i].length; j++) {\r\n                    setTrigger(i, info.trigger[i][j]);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            if (info.hookTrigger) {\r\n              if (!this._hookTrigger) {\r\n                this._hookTrigger = [];\r\n              }\r\n              this._hookTrigger.add(skill);\r\n            }\r\n            if (_status.event && _status.event.addTrigger) _status.event.addTrigger(skill, this);\r\n            return this;\r\n          },\r\n          /**\r\n           * \r\n           * @returns {!boolean}\r\n           */\r\n          addSkillLog: function (skill) {\r\n            this.addSkill(skill);\r\n            this.popup(skill);\r\n            game.log(this, '获得了技能', '#g『' + get.translation(skill) + '』');\r\n          },\r\n          /**\r\n           * 添加一组技能\r\n           * @name lib.element.player.addSkill\r\n           * @function\r\n           * @param {Array<string>} skills 技能名数组\r\n           * @param {?boolean} [checkConflict] 是否检测冲突，如果为true，添加技能完成后检测；如果为false或未指定，不检测\r\n           * @param {?boolean} [nobroadcast] 如果为true，直接添加技能；如果为false或未指定，调用{@link game.broadcast}为本角色添加技能\r\n           * @returns {string} 如果添加技能成功，返回技能名`skill`；如果失败，返回undefined\r\n           * @see {@link lib.element.player.addSkill(2)}\r\n           */\r\n          /**\r\n           * 本角色添加技能\r\n           * @name lib.element.player.addSkill\r\n           * @function\r\n           * @variation 2\r\n           * @param {!string} skill 技能名\r\n           * @param {?boolean} [checkConflict] 是否检测冲突，如果为true，添加技能完成后检测；如果为false或未指定，不检测\r\n           * @param {?boolean} [nobroadcast] 如果为true，直接添加技能；如果为false或未指定，调用{@link game.broadcast}为本角色添加技能\r\n           * @returns {string} 如果添加技能成功，返回技能名`skill`；如果失败，返回undefined\r\n           */\r\n          addSkill: function (skill, checkConflict, nobroadcast) {\r\n            if (Array.isArray(skill)) {\r\n              for (var i = 0; i < skill.length; i++) {\r\n                this.addSkill(skill[i]);\r\n              }\r\n            }\r\n            else {\r\n              if (this.skills.contains(skill)) return;\r\n              var info = lib.skill[skill];\r\n              if (!info) return;\r\n              if (!nobroadcast) {\r\n                game.broadcast(function (player, skill) {\r\n                  player.skills.add(skill);\r\n                }, this, skill);\r\n              }\r\n              this.skills.add(skill);\r\n              this.addSkillTrigger(skill);\r\n              if (this.awakenedSkills.contains(skill)) {\r\n                this.awakenSkill(skill);\r\n                return;\r\n              }\r\n              if (info.init2 && !_status.video) {\r\n                info.init2(this, skill);\r\n              }\r\n              if (info.mark) {\r\n                if (info.mark == 'card' &&\r\n                  get.itemtype(this.storage[skill]) == 'card') {\r\n                  this.markSkill(skill, null, this.storage[skill]);\r\n                }\r\n                else if (info.mark == 'card' &&\r\n                  get.itemtype(this.storage[skill]) == 'cards') {\r\n                  this.markSkill(skill, null, this.storage[skill][0]);\r\n                }\r\n                else if (info.mark == 'image') {\r\n                  this.markSkill(skill, null, ui.create.card(null, 'noclick').init([null, null, skill]));\r\n                }\r\n                else if (info.mark == 'character') {\r\n                  var intro = info.intro.content;\r\n                  if (typeof intro == 'function') {\r\n                    intro = intro(this.storage[skill], this);\r\n                  }\r\n                  else if (typeof intro == 'string') {\r\n                    intro = intro.replace(/#/g, this.storage[skill]);\r\n                    intro = intro.replace(/&/g, get.cnNumber(this.storage[skill]));\r\n                    intro = intro.replace(/\\$/g, get.translation(this.storage[skill]));\r\n                  }\r\n                  var caption;\r\n                  if (typeof info.intro.name == 'function') {\r\n                    caption = info.intro.name(this.storage[skill], this);\r\n                  }\r\n                  else if (typeof info.intro.name == 'string') {\r\n                    caption = info.name;\r\n                  }\r\n                  else {\r\n                    caption = get.translation(skill);\r\n                  }\r\n                  this.markSkillCharacter(skill, this.storage[skill], caption, intro);\r\n                }\r\n                else {\r\n                  this.markSkill(skill);\r\n                }\r\n              }\r\n            }\r\n            if (checkConflict) this.checkConflict();\r\n            return skill;\r\n          },\r\n          /**\r\n           * \r\n           * @returns {!boolean}\r\n           */\r\n          addAdditionalSkill: function (skill, skills, keep) {\r\n            if (this.additionalSkills[skill]) {\r\n              if (keep) {\r\n                if (typeof this.additionalSkills[skill] == 'string') {\r\n                  this.additionalSkills[skill] = [this.additionalSkills[skill]];\r\n                }\r\n              }\r\n              else {\r\n                this.removeAdditionalSkill(skill);\r\n                this.additionalSkills[skill] = [];\r\n              }\r\n            }\r\n            else {\r\n              this.additionalSkills[skill] = [];\r\n            }\r\n            if (typeof skills == 'string') {\r\n              skills = [skills];\r\n            }\r\n            for (var i = 0; i < skills.length; i++) {\r\n              this.addSkill(skills[i], null, true);\r\n              this.skills.remove(skills[i]);\r\n              this.additionalSkills[skill].push(skills[i]);\r\n            }\r\n            this.checkConflict();\r\n            return this;\r\n          },\r\n          /**\r\n           * \r\n           * @returns {!boolean}\r\n           */\r\n          removeAdditionalSkill: function (skill, target) {\r\n            if (this.additionalSkills[skill]) {\r\n              var additionalSkills = this.additionalSkills[skill];\r\n              if (Array.isArray(additionalSkills) && typeof target == 'string') {\r\n                if (additionalSkills.contains(target)) {\r\n                  additionalSkills.remove(target);\r\n                  this.removeSkill(target);\r\n                }\r\n              }\r\n              else {\r\n                delete this.additionalSkills[skill];\r\n                if (typeof additionalSkills == 'string') {\r\n                  this.removeSkill(additionalSkills);\r\n                }\r\n                else if (Array.isArray(additionalSkills)) {\r\n                  for (var i = 0; i < additionalSkills.length; i++) {\r\n                    this.removeSkill(additionalSkills[i]);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            return this;\r\n          },\r\n          /**\r\n           * \r\n           * @returns {!boolean}\r\n           */\r\n          awakenSkill: function (skill, nounmark) {\r\n            if (!nounmark) this.unmarkSkill(skill);\r\n            this.disableSkill(skill + '_awake', skill);\r\n            this.awakenedSkills.add(skill);\r\n            if (this.storage[skill] === false) this.storage[skill] = true;\r\n            return this;\r\n          },\r\n          /**\r\n           * \r\n           * @returns {!boolean}\r\n           */\r\n          restoreSkill: function (skill, nomark) {\r\n            if (this.storage[skill] === true) this.storage[skill] = false;\r\n            this.awakenedSkills.remove(skill);\r\n            this.enableSkill(skill + '_awake', skill);\r\n            if (!nomark) this.markSkill(skill);\r\n            return this;\r\n          },\r\n          /**\r\n           * \r\n           * @returns {!boolean}\r\n           */\r\n          disableSkill: function (skill, skills) {\r\n            if (typeof skills == 'string') {\r\n              if (!this.disabledSkills[skills]) {\r\n                this.disabledSkills[skills] = [];\r\n                var info = get.info(skills);\r\n                if (info.ondisable && info.onremove) {\r\n                  info.onremove(this);\r\n                }\r\n              }\r\n              this.disabledSkills[skills].add(skill);\r\n              var group = lib.skill[skills].group;\r\n              if (typeof group == 'string' || Array.isArray(group)) {\r\n                this.disableSkill(skill, group);\r\n              }\r\n            }\r\n            else if (Array.isArray(skills)) {\r\n              for (var i = 0; i < skills.length; i++) {\r\n                this.disableSkill(skill, skills[i]);\r\n              }\r\n            }\r\n            return this;\r\n          },\r\n          /**\r\n           * \r\n           * @returns {!boolean}\r\n           */\r\n          enableSkill: function (skill) {\r\n            for (var i in this.disabledSkills) {\r\n              this.disabledSkills[i].remove(skill);\r\n              if (this.disabledSkills[i].length == 0) {\r\n                delete this.disabledSkills[i];\r\n              }\r\n            }\r\n            return this;\r\n          },\r\n          /**\r\n           * \r\n           * @returns {!boolean}\r\n           */\r\n          checkMarks: function () {\r\n            var skills = this.getSkills();\r\n            game.expandSkills(skills);\r\n            for (var i in this.marks) {\r\n              if (!skills.contains(i) && !this.marks[i].info.fixed) {\r\n                this.unmarkSkill(i);\r\n              }\r\n            }\r\n            return this;\r\n          },\r\n          /**\r\n           * \r\n           * @returns {!boolean}\r\n           */\r\n          addEquipTrigger: function (card) {\r\n            if (card) {\r\n              var info = get.info(card);\r\n              if (info.skills) {\r\n                for (var j = 0; j < info.skills.length; j++) {\r\n                  this.addSkillTrigger(info.skills[j]);\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              var es = this.getCards('e');\r\n              for (var i = 0; i < es.length; i++) {\r\n                this.addEquipTrigger(es[i]);\r\n              }\r\n            }\r\n            return this;\r\n          },\r\n          /**\r\n           * \r\n           * @returns {!boolean}\r\n           */\r\n          removeEquipTrigger: function (card, move) {\r\n            if (card) {\r\n              var info = get.info(card);\r\n              if (move === false) {\r\n                if (card.originalName) {\r\n                  card.classList.remove('fakejudge');\r\n                  if (get.type(card.originalName) == 'equip') {\r\n                    card.classList.remove(get.subtype(card.viewAs));\r\n                    card.classList.add(get.subtype(card.originalName));\r\n                  } else {\r\n                    card.classList.remove(get.subtype(card.viewAs));\r\n                  }\r\n                  card.name = card.originalName;\r\n                  delete card.viewAs;\r\n                  delete card.originalName;\r\n                }\r\n              } else {\r\n                //\tif(card.viewAs&&card.originalName&&card.originalName){\r\n                //\t\tcard.name = card.originalName\r\n                //\t}\r\n              }\r\n              var skills = this.getSkills(null, false);\r\n              if (info.skills) {\r\n                for (var j = 0; j < info.skills.length; j++) {\r\n                  if (skills.contains(info.skills[j])) continue;\r\n                  this.removeSkillTrigger(info.skills[j]);\r\n                }\r\n              }\r\n              if (info.clearLose && typeof info.onLose == 'function') {\r\n                var next = game.createEvent('lose_' + card.name);\r\n                next.setContent(info.onLose);\r\n                next.player = this;\r\n                next.card = card;\r\n              }\r\n            }\r\n            else {\r\n              var es = this.getCards('e');\r\n              for (var i = 0; i < es.length; i++) {\r\n                this.removeEquipTrigger(es[i]);\r\n              }\r\n            }\r\n            return this;\r\n          },\r\n          /**\r\n           * \r\n           * @returns {!boolean}\r\n           */\r\n          removeSkillTrigger: function (skill, triggeronly) {\r\n            var info = lib.skill[skill];\r\n            if (!info) return;\r\n            if (typeof info.group == 'string') {\r\n              this.removeSkillTrigger(info.group);\r\n            }\r\n            else if (Array.isArray(info.group)) {\r\n              for (var i = 0; i < info.group.length; i++) {\r\n                this.removeSkillTrigger(info.group[i]);\r\n              }\r\n            }\r\n            if (!triggeronly) this.initedSkills.remove(skill);\r\n            if (info.trigger) {\r\n              var playerid = this.playerid;\r\n              var removeTrigger = function (i, evt) {\r\n                if (i == 'global') {\r\n                  for (var j in lib.hook.globaltrigger) {\r\n                    if (lib.hook.globaltrigger[j][playerid]) {\r\n                      lib.hook.globaltrigger[j][playerid].remove(skill);\r\n                      if (lib.hook.globaltrigger[j][playerid].length == 0) {\r\n                        delete lib.hook.globaltrigger[j][playerid];\r\n                      }\r\n                      if (get.is.empty(lib.hook.globaltrigger[j])) {\r\n                        delete lib.hook.globaltrigger[j];\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n                else {\r\n                  var name = playerid + '_' + i + '_' + evt;\r\n                  if (lib.hook[name]) {\r\n                    lib.hook[name].remove(skill);\r\n                    if (lib.hook[name].length == 0) {\r\n                      delete lib.hook[name];\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              for (var i in info.trigger) {\r\n                if (typeof info.trigger[i] == 'string') {\r\n                  removeTrigger(i, info.trigger[i]);\r\n                }\r\n                else if (Array.isArray(info.trigger[i])) {\r\n                  for (var j = 0; j < info.trigger[i].length; j++) {\r\n                    removeTrigger(i, info.trigger[i][j]);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            if (info.hookTrigger) {\r\n              if (this._hookTrigger) {\r\n                this._hookTrigger.remove(skill);\r\n                if (!this._hookTrigger.length) {\r\n                  delete this._hookTrigger;\r\n                }\r\n              }\r\n            }\r\n            return this;\r\n          },\r\n          /**\r\n           * \r\n           * @returns {!boolean}\r\n           */\r\n          removeSkill: function (skill) {\r\n            if (!skill) return;\r\n            if (Array.isArray(skill)) {\r\n              for (var i = 0; i < skill.length; i++) {\r\n                this.removeSkill(skill[i]);\r\n              }\r\n            }\r\n            else {\r\n              var info = lib.skill[skill];\r\n              if (info && info.fixed && arguments[1] !== true) return skill;\r\n              this.unmarkSkill(skill);\r\n              game.broadcastAll(function (player, skill) {\r\n                player.skills.remove(skill);\r\n                player.hiddenSkills.remove(skill);\r\n              }, this, skill);\r\n              this.checkConflict(skill);\r\n              delete this.tempSkills[skill];\r\n              if (info) {\r\n                if (info.onremove) {\r\n                  if (typeof info.onremove == 'function') {\r\n                    info.onremove(this, skill);\r\n                  }\r\n                  else if (typeof info.onremove == 'string') {\r\n                    if (info.onremove == 'storage') {\r\n                      delete this.storage[skill];\r\n                    }\r\n                    else {\r\n                      var cards = this.storage[skill];\r\n                      if (get.itemtype(cards) == 'card') {\r\n                        cards = [cards];\r\n                      }\r\n                      if (get.itemtype(cards) == 'cards') {\r\n                        if (this.onremove == 'discard') {\r\n                          this.$throw(cards);\r\n                        }\r\n                        if (this.onremove == 'discard' || this.onremove == 'lose') {\r\n                          game.cardsDiscard(cards);\r\n                          delete this.storage[skill];\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                  else if (Array.isArray(info.onremove)) {\r\n                    for (var i = 0; i < info.onremove.length; i++) {\r\n                      delete this.storage[info.onremove[i]];\r\n                    }\r\n                  }\r\n                  else if (info.onremove === true) {\r\n                    delete this.storage[skill];\r\n                  }\r\n                }\r\n                this.removeSkillTrigger(skill);\r\n                if (!info.keepSkill) {\r\n                  this.removeAdditionalSkill(skill);\r\n                }\r\n              }\r\n              this.enableSkill(skill + '_awake');\r\n            }\r\n            return skill;\r\n          },\r\n          /**\r\n           * 本角色添加一个临时技能\r\n           * @param {!string} skill 技能名\r\n           * @param {(string|Object|undefined)} [expire='phaseAfter'] 过期时间，`expire`实际上对应一个触发器，本角色在下一次触发器被触发的时候移除此技能；如果未指定，使用'phaseAfter'\r\n           * @param {?boolean} [checkConflict] 如果为true，添加技能完成后检测冲突；如果为false或未指定，不检测\r\n           * @returns {string} 如果添加成功，返回技能名`skill`；否则，返回undefined\r\n           */\r\n          addTempSkill: function (skill, expire, checkConflict) {\r\n            if (this.hasSkill(skill) && this.tempSkills[skill] == undefined) return;\r\n            var noremove = this.skills.contains(skill);\r\n            this.addSkill(skill, checkConflict, true);\r\n            if (!noremove) this.skills.remove(skill);\r\n\r\n            if (!expire) {\r\n              expire = 'phaseAfter';\r\n            }\r\n            this.tempSkills[skill] = expire;\r\n\r\n            if (typeof expire == 'string') {\r\n              lib.hookmap[expire] = true;\r\n            }\r\n            else if (Array.isArray(expire)) {\r\n              for (var i = 0; i < expire.length; i++) {\r\n                lib.hookmap[expire[i]] = true;\r\n              }\r\n            }\r\n            else if (get.objtype(expire) == 'object') {\r\n              var roles = ['player', 'source', 'target'];\r\n              for (var i = 0; i < roles.length; i++) {\r\n                if (typeof expire[roles[i]] == 'string') {\r\n                  lib.hookmap[expire[roles[i]]] = true;\r\n                }\r\n                else if (Array.isArray(expire[roles[i]])) {\r\n                  for (var j = 0; j < expire[roles[i]].length; j++) {\r\n                    lib.hookmap[expire[roles[i]][j]] = true;\r\n                  }\r\n                }\r\n              }\r\n              if (expire.global) {\r\n                if (typeof expire.global == 'string') {\r\n                  lib.hookmap[expire.global] = true;\r\n                }\r\n                else if (Array.isArray(expire.global)) {\r\n                  for (var i = 0; i < expire.global.length; i++) {\r\n                    lib.hookmap[expire.global[i]] = true;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n\r\n            for (var i in expire) {\r\n              if (typeof expire[i] == 'string') {\r\n                lib.hookmap[expire[i]] = true;\r\n              }\r\n              else if (Array.isArray(expire[i])) {\r\n                for (var j = 0; j < expire.length; j++) {\r\n                  lib.hookmap[expire[i][j]] = true;\r\n                }\r\n              }\r\n            }\r\n            return skill;\r\n          },\r\n          /**\r\n           * \r\n           * @returns {!boolean}\r\n           */\r\n          attitudeTo: function (target) {\r\n            if (typeof get.attitude == 'function') return get.attitude(this, target);\r\n            return 0;\r\n          },\r\n          /**\r\n           * \r\n           * @returns {!boolean}\r\n           */\r\n          clearSkills: function (all) {\r\n            var list = [];\r\n            var exclude = [];\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              exclude.push(arguments[i]);\r\n            }\r\n            for (i = 0; i < this.skills.length; i++) {\r\n              if (lib.skill[this.skills[i]].superCharlotte) continue;\r\n              if (!all && (lib.skill[this.skills[i]].temp || lib.skill[this.skills[i]].charlotte)) continue;\r\n              if (!exclude.contains(this.skills[i])) {\r\n                list.push(this.skills[i]);\r\n              }\r\n            }\r\n            if (all) {\r\n              for (var i in this.additionalSkills) {\r\n                this.removeAdditionalSkill(i);\r\n              }\r\n            }\r\n            this.removeSkill(list);\r\n            this.checkConflict();\r\n            this.checkMarks();\r\n            return list;\r\n          },\r\n          /**\r\n           * \r\n           * @returns {!boolean}\r\n           */\r\n          checkConflict: function (skill) {\r\n            if (skill) {\r\n              if (this.forbiddenSkills[skill]) {\r\n                delete this.forbiddenSkills[skill];\r\n              }\r\n              else {\r\n                for (var i in this.forbiddenSkills) {\r\n                  if (this.forbiddenSkills[i].remove(skill)) {\r\n                    if (!this.forbiddenSkills[i].length) {\r\n                      delete this.forbiddenSkills[i];\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              this.forbiddenSkills = {};\r\n              var forbid = [];\r\n              var getName = function (arr) {\r\n                var str = '';\r\n                for (var i = 0; i < arr.length; i++) {\r\n                  str += arr[i] + '+';\r\n                }\r\n                return str.slice(0, str.length - 1);\r\n              }\r\n              var forbidlist = lib.config.forbid.concat(lib.config.customforbid);\r\n              var skills = this.getSkills();\r\n              for (var i = 0; i < forbidlist.length; i++) {\r\n                if (lib.config.customforbid.contains(forbidlist[i]) ||\r\n                  !lib.config.forbidlist.contains(getName(forbidlist[i]))) {\r\n                  for (var j = 0; j < forbidlist[i].length; j++) {\r\n                    if (!skills.contains(forbidlist[i][j])) break;\r\n                  }\r\n                  if (j == forbidlist[i].length) {\r\n                    forbid.push(forbidlist[i]);\r\n                  }\r\n                }\r\n              }\r\n              for (var i = 0; i < forbid.length; i++) {\r\n                if (forbid[i][1] || this.name2) {\r\n                  this.forbiddenSkills[forbid[i][0]] = this.forbiddenSkills[forbid[i][0]] || [];\r\n                  if (forbid[i][1]) {\r\n                    this.forbiddenSkills[forbid[i][0]].add(forbid[i][1]);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          },\r\n          /**\r\n           * 返回本角色的一个记录数据\r\n           * @returns {!boolean}\r\n           */\r\n          getHistory: function (key, filter, last) {\r\n            if (!key) return this.actionHistory[this.actionHistory.length - 1];\r\n            if (!filter) return this.actionHistory[this.actionHistory.length - 1][key];\r\n            else {\r\n              var history = this.getHistory(key).slice(0);\r\n              if (last) history = history.slice(0, history.indexOf(last) + 1);\r\n              for (var i = 0; i < history.length; i++) {\r\n                if (!filter(history[i])) history.splice(i--, 1);\r\n              }\r\n              return history;\r\n            }\r\n          },\r\n          hasHistory: function (key, filter, last) {\r\n            var history = this.getHistory(key).slice(0);\r\n            if (last) history = history.slice(0, history.indexOf(last) + 1);\r\n            for (var i = 0; i < history.length; i++) {\r\n              if (filter(history[i])) return true;\r\n            }\r\n            return false;\r\n          },\r\n          /**\r\n           * 返回本角色最近(当前)的记录数据\r\n           * @returns {Array}\r\n           */\r\n          getLastHistory: function (key, filter, last) {\r\n            var history = false;\r\n            for (var i = this.actionHistory.length - 1; i >= 0; i--) {\r\n              if (this.actionHistory[i].isMe) {\r\n                history = this.actionHistory[i]; break;\r\n              }\r\n            }\r\n            if (!history) return null;\r\n            if (!key) return history;\r\n            if (!filter) return history[key];\r\n            else {\r\n              history = history.slice(0);\r\n              if (last) history = history.slice(0, history.indexOf(last) + 1);\r\n              for (var i = 0; i < history.length; i++) {\r\n                if (!filter(history[i])) history.splice(i--, 1);\r\n              }\r\n              return history;\r\n            }\r\n          },\r\n          /**\r\n           * 返回本角色的记录数据 TODO\r\n           * @returns {Array}\r\n           */\r\n          getAllHistory: function (key, filter, last) {\r\n            var list = [];\r\n            var all = this.actionHistory;\r\n            for (var j = 0; j < all.length; j++) {\r\n              if (!key || !all[j][key]) {\r\n                list.push(all[j]);\r\n              }\r\n              else {\r\n                if (!filter) list.addArray(all[j][key]);\r\n                else {\r\n                  var history = all[j][key].slice(0);\r\n                  if (last) history = history.slice(0, history.indexOf(last) + 1);\r\n                  for (var i = 0; i < history.length; i++) {\r\n                    if (filter(history[i])) list.push(history[i]);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            return list;\r\n          },\r\n          hasAllHistory: function (key, filter, last) {\r\n            var list = [];\r\n            var all = this.actionHistory;\r\n            for (var j = 0; j < all.length; j++) {\r\n              var history = all[j][key].slice(0);\r\n              if (last) history = history.slice(0, history.indexOf(last) + 1);\r\n              for (var i = 0; i < history.length; i++) {\r\n                if (filter(history[i])) return true;\r\n              }\r\n            }\r\n            return false;\r\n          },\r\n          /**\r\n           * 返回一张本角色使用过的牌\r\n           * @param {number} [idx=0] 索引，从最近到最远，为0表示最近使用的牌，如果未索引到(e.g. `idx >= length`)，返回null\r\n           * @returns {(GameCores.GameObjects.Card|null)} \r\n           */\r\n          getLastUsed: function (num) {\r\n            if (typeof num != 'number') num = 0;\r\n            var history = this.getHistory('useCard');\r\n            if (history.length <= num) return null;\r\n            return history[history.length - num - 1];\r\n          },\r\n          /**\r\n           * 返回最后的`stat`的指定键名的值\r\n           * @param {string} [key] 键名；如果未指定或者为空字符串，返回最后`stat`\r\n           * @returns {?Object}\r\n           */\r\n          getStat: function (key) {\r\n            if (!key) return this.stat[this.stat.length - 1];\r\n            return this.stat[this.stat.length - 1][key];\r\n          },\r\n          /**\r\n           * 返回最后的`stat`的指定键名的值 TODO\r\n           * @param {string} [key] 键名；如果未指定或者为空字符串，返回最后`stat`\r\n           * @returns {?Object}\r\n           */\r\n          getLastStat: function (key) {\r\n            var stat = false;\r\n            for (var i = this.stat.length - 1; i >= 0; i--) {\r\n              if (this.stat[i].isMe) {\r\n                stat = this.stat[i]; break;\r\n              }\r\n            }\r\n            if (!stat) return null\r\n            if (!key) return stat;\r\n            return stat[key];\r\n          },\r\n          /**\r\n           * 设置本角色的Timeout队列，Timeout延迟一定时长，然后重置角色位置\r\n           * @param {(number|false)} [time=500] 等待时长(ms)；如果为false，表示终止最近添加的Timeout并重置本角色Timeout队列计数\r\n           */\r\n          queue: function (time) {\r\n            if (time == false) {\r\n              clearTimeout(this.queueTimeout);\r\n              this.queueCount = 0;\r\n              return;\r\n            }\r\n            if (time == undefined) time = 500;\r\n            var player = this;\r\n            player.queueCount++;\r\n            this.queueTimeout = setTimeout(function () {\r\n              player.queueCount--;\r\n              if (player.queueCount == 0) {\r\n                player.style.transform = '';\r\n                player.node.avatar.style.transform = '';\r\n                player.node.avatar2.style.transform = '';\r\n                if (game.chess) {\r\n                  ui.placeChess(player, player.dataset.position);\r\n                }\r\n                if (player == game.me) ui.me.removeAttribute('style');\r\n              }\r\n            }, time)\r\n          },\r\n          /**\r\n           * 返回一张游戏牌可以被本角色使用的次数，如果本角色有被动技**cardUsable**改变游戏牌的使用次数，采用改变后的值\r\n           * @param {!string} cardname 牌名\r\n           * @param {boolean} [ignoreUsed] 是否忽略使用过的次数，如果为true，忽略使用过的次数；如果为false或者未指定，结果会减去使用过的次数\r\n           * @returns {!number}\r\n           */\r\n          getCardUsable: function (card, pure) {\r\n            var player = this;\r\n            if (typeof card == 'string') {\r\n              card = { name: card };\r\n            }\r\n            card = get.autoViewAs(card, null, player);\r\n            var num = get.info(card).usable;\r\n            if (typeof num == 'function') num = num(card, player);\r\n            num = game.checkMod(card, player, num, 'cardUsable', player);\r\n            if (typeof num != 'number') return Infinity;\r\n            if (!pure && _status.currentPhase == player) {\r\n              return num - player.countUsed(card);\r\n            }\r\n            return num;\r\n          },\r\n          /**\r\n           * 返回攻击范围\r\n           * @returns {!number}\r\n           */\r\n          getAttackRange: function (raw) {\r\n            var player = this;\r\n            var range = 0;\r\n            if (raw) range = game.checkMod(player, player, range, 'globalFrom', player);\r\n            range = game.checkMod(player, player, range, 'attackFrom', player);\r\n            var equips = player.getCards('e', function (card) {\r\n              return !ui.selected.cards || !ui.selected.cards.contains(card);\r\n            });\r\n            for (var i = 0; i < equips.length; i++) {\r\n              var info = get.info(equips[i]).distance;\r\n              if (!info) continue;\r\n              if (raw && info.globalFrom) {\r\n                range += info.globalFrom;\r\n              }\r\n              if (info.attackFrom) {\r\n                range += info.attackFrom;\r\n              }\r\n            }\r\n            return (1 - range);\r\n          },\r\n          /**\r\n           * TODO\r\n           * @returns {!boolean}\r\n           */\r\n          getGlobalFrom: function () {\r\n            var player = this;\r\n            var range = 0;\r\n            range = game.checkMod(player, player, range, 'globalFrom', player);\r\n            var equips = player.getCards('e', function (card) {\r\n              return !ui.selected.cards || !ui.selected.cards.contains(card);\r\n            });\r\n            for (var i = 0; i < equips.length; i++) {\r\n              var info = get.info(equips[i]).distance;\r\n              if (!info) continue;\r\n              if (info.globalFrom) {\r\n                range += info.globalFrom;\r\n              }\r\n            }\r\n            return (-range);\r\n          },\r\n          /**\r\n           * TODO\r\n           * @returns {!boolean}\r\n           */\r\n          getGlobalTo: function () {\r\n            var player = this;\r\n            var range = 0;\r\n            range = game.checkMod(player, player, range, 'globalTo', player);\r\n            var equips = player.getCards('e', function (card) {\r\n              return !ui.selected.cards || !ui.selected.cards.contains(card);\r\n            });\r\n            for (var i = 0; i < equips.length; i++) {\r\n              var info = get.info(equips[i]).distance;\r\n              if (!info) continue;\r\n              if (info.globalTo) {\r\n                range += info.globalTo;\r\n              }\r\n            }\r\n            return (range);\r\n          },\r\n          /**\r\n           * 返回本角色的最大手牌数**num**；如果本角色有被动技**maxHandcardBase maxHandcard maxHandcardFinal**，依次改变**num**，返回改变后的**num**；**num**不会小于0\r\n           * @returns {!number} 非负整数\r\n           */\r\n          getHandcardLimit: function () {\r\n            var num = Math.max(this.hp, 0);\r\n            num = game.checkMod(this, num, 'maxHandcardBase', this);\r\n            num = game.checkMod(this, num, 'maxHandcard', this);\r\n            num = game.checkMod(this, num, 'maxHandcardFinal', this);\r\n            return Math.max(0, num);\r\n          },\r\n          /**\r\n           * @callback lib.element.player~playerFilterPredicate\r\n           * @param {!GameCores.GameObjects.Player} player\r\n           * @returns {!boolean}\r\n           */\r\n          /**\r\n           * 返回本角色的敌方角色\r\n           * @name lib.element.player.getEnemies\r\n           * @function\r\n           * @param {lib.element.player~playerFilterPredicate} [predicate] 筛选函数\r\n           * @returns {!GameCores.GameObjects.Player[]} 如果没有找到角色，返回空数组\r\n           */\r\n          getEnemies: function (func) {\r\n            var player = this;\r\n            var targets;\r\n            var mode = get.mode();\r\n            if (mode == 'identity') {\r\n              if (_status.mode == 'purple') {\r\n                switch (player.identity) {\r\n                  case 'bZhu': case 'bZhong': case 'rNei': targets = game.filterPlayer(function (target) {\r\n                    if (func && !func(target)) return false;\r\n                    return ['rZhu', 'rZhong', 'bNei'].contains(target.identity);\r\n                  }); break;\r\n                  case 'rZhu': case 'rZhong': case 'bNei': targets = game.filterPlayer(function (target) {\r\n                    if (func && !func(target)) return false;\r\n                    return ['bZhu', 'bZhong', 'rNei'].contains(target.identity);\r\n                  }); break;\r\n                  case 'rYe': case 'bYe': targets = game.filterPlayer(function (target) {\r\n                    if (func && !func(target)) return false;\r\n                    return !['rYe', 'bYe'].contains(target.identity);\r\n                  }); break;\r\n                }\r\n              }\r\n              else {\r\n                var num = get.population('fan');\r\n                switch (player.identity) {\r\n                  case 'zhu': case 'zhong': case 'mingzhong': targets = game.filterPlayer(function (target) {\r\n                    if (func && !func(target)) return false;\r\n                    if (num >= 3) return target.identity == 'fan';\r\n                    return target.identity == 'nei' || target.identity == 'fan';\r\n                  }); break;\r\n                  case 'nei': targets = game.filterPlayer(function (target) {\r\n                    if (func && !func(target)) return false;\r\n                    if (num >= 3) return target.identity == 'fan';\r\n                    if (game.players.length == 2) return target != player;\r\n                    return target.identity == 'zhong' || target.identity == 'mingzhong' || target.identity == 'fan';\r\n                  }); break;\r\n                  case 'fan': targets = game.filterPlayer(function (target) {\r\n                    if (func && !func(target)) return false;\r\n                    return target.identity != 'fan';\r\n                  }); break;\r\n                }\r\n              }\r\n            }\r\n            else if (mode == 'guozhan') {\r\n              if (player.identity == 'ye') {\r\n                targets = game.filterPlayer(function (target) {\r\n                  if (func && !func(target)) return false;\r\n                  return true;\r\n                });\r\n              }\r\n              else {\r\n                var group = lib.character[player.name1][1];\r\n                targets = game.filterPlayer(function (target) {\r\n                  if (func && !func(target)) return false;\r\n                  return target.identity == 'ye' || lib.character[target.name1][1] != group;\r\n                });\r\n              }\r\n            }\r\n            else if (mode == 'doudizhu' || mode == 'longlaoguan') {\r\n              targets = game.filterPlayer(function (target) {\r\n                if (func && !func(target)) return false;\r\n                return target.identity != player.identity;\r\n              });\r\n            }\r\n            else {\r\n              targets = game.filterPlayer(function (target) {\r\n                if (func && !func(target)) return false;\r\n                return target.side != player.side;\r\n              });\r\n            }\r\n            targets.remove(player);\r\n            return targets;\r\n          },\r\n          /**\r\n           * 返回本角色的友方角色\r\n           * @name lib.element.player.getFriends\r\n           * @function\r\n           * @param {lib.element.player~playerFilterPredicate} predicate 筛选函数\r\n           * @returns {!GameCores.GameObjects.Player[]} 如果没有找到角色，返回空数组\r\n           */\r\n          /**\r\n           * 返回本角色的友方角色\r\n           * @name lib.element.player.getFriends\r\n           * @function\r\n           * @param {?boolean} hasSelf 结果是否包含本角色，如果为true，则包括；如果为false或未指定，则不包括\r\n           * @returns {!GameCores.GameObjects.Player[]} 如果没有找到角色，返回空数组\r\n           */\r\n          getFriends: function (func) {\r\n            var player = this;\r\n            var targets;\r\n            var mode = get.mode();\r\n            var self = false;\r\n            if (func === true) {\r\n              func = null;\r\n              self = true;\r\n            }\r\n            if (mode == 'identity') {\r\n              if (_status.mode == 'purple') {\r\n                switch (player.identity) {\r\n                  case 'rZhu': case 'rZhong': case 'bNei': targets = game.filterPlayer(function (target) {\r\n                    if (func && !func(target)) return false;\r\n                    return ['rZhu', 'rZhong', 'bNei'].contains(target.identity);\r\n                  }); break;\r\n                  case 'bZhu': case 'bZhong': case 'rNei': targets = game.filterPlayer(function (target) {\r\n                    if (func && !func(target)) return false;\r\n                    return ['bZhu', 'bZhong', 'rNei'].contains(target.identity);\r\n                  }); break;\r\n                  case 'rYe': case 'bYe': targets = game.filterPlayer(function (target) {\r\n                    if (func && !func(target)) return false;\r\n                    return ['rYe', 'bYe'].contains(target.identity);\r\n                  }); break;\r\n                }\r\n              }\r\n              else {\r\n                switch (player.identity) {\r\n                  case 'zhu': case 'zhong': case 'mingzhong': targets = game.filterPlayer(function (target) {\r\n                    if (func && !func(target)) return false;\r\n                    return ['zhu', 'zhong', 'mingzhong'].contains(target.identity);\r\n                  }); break;\r\n                  case 'nei': targets = []; break;\r\n                  case 'fan': targets = game.filterPlayer(function (target) {\r\n                    if (func && !func(target)) return false;\r\n                    return target.identity == 'fan';\r\n                  }); break;\r\n                }\r\n              }\r\n            }\r\n            else if (mode == 'guozhan') {\r\n              if (player.identity == 'ye') {\r\n                targets = [];\r\n              }\r\n              else {\r\n                var group = lib.character[player.name1][1];\r\n                targets = game.filterPlayer(function (target) {\r\n                  if (func && !func(target)) return false;\r\n                  return target.identity != 'ye' && lib.character[target.name1][1] == group;\r\n                });\r\n              }\r\n            }\r\n            else if (mode == 'doudizhu' || mode == 'longlaoguan') {\r\n              targets = game.filterPlayer(function (target) {\r\n                if (func && !func(target)) return false;\r\n                return target.identity == player.identity;\r\n              });\r\n            }\r\n            else {\r\n              targets = game.filterPlayer(function (target) {\r\n                if (func && !func(target)) return false;\r\n                return target.side == player.side;\r\n              });\r\n            }\r\n            if (self) {\r\n              targets.add(player);\r\n            }\r\n            else {\r\n              targets.remove(player);\r\n            }\r\n            return targets;\r\n          },\r\n          /**\r\n           * 返回本角色是否是目标的敌方\r\n           * @param {!GameCores.GameObjects.Player} player 目标角色\r\n           * @returns {!boolean}\r\n           */\r\n          isEnemyOf: function () {\r\n            return !this.isFriendOf.apply(this, arguments);\r\n          },\r\n          /**\r\n           * 返回本角色是否是目标的友方\r\n           * @param {!GameCores.GameObjects.Player} player 目标角色\r\n           * @returns {!boolean}\r\n           */\r\n          isFriendOf: function (player) {\r\n            if (get.mode() == 'guozhan') {\r\n              if (this == player) return true;\r\n              if (this.storage.yexinjia_friend == player || player.storage.yexinjia_friend == this) return true;\r\n              if (this.identity == 'unknown' || this.identity == 'ye') return false;\r\n              if (player.identity == 'unknown' || player.identity == 'ye') return false;\r\n              return this.identity == player.identity;\r\n            }\r\n            if (get.mode() == 'doudizhu' || get.mode() == 'longlaoguan') {\r\n              return this.identity == player.identity;\r\n            }\r\n            if (this.side != undefined && typeof player.side == 'boolean') {\r\n              return this.side == player.side;\r\n            }\r\n            return this == player;\r\n          },\r\n          /**\r\n           * 返回本角色是否是目标的友方\r\n           * @param {!GameCores.GameObjects.Player} player 目标角色\r\n           * @returns {!boolean}\r\n           */\r\n          isFriendsOf: function (player) {\r\n            return player.getFriends(true).contains(this);\r\n          },\r\n          /**\r\n           * 返回本角色是否是目标的敌方\r\n           * @param {!GameCores.GameObjects.Player} player 目标角色\r\n           * @returns {!boolean}\r\n           */\r\n          isEnemiesOf: function (player) {\r\n            return player.getEnemies().contains(this);\r\n          },\r\n          /**\r\n           * 返回本角色是否未死亡\r\n           * @returns {!boolean} true表示未死亡，false表示已死亡\r\n           */\r\n          isAlive: function () {\r\n            return this.classList.contains('dead') == false;\r\n          },\r\n          /**\r\n           * 返回本角色是否死亡\r\n           * @returns {!boolean}\r\n           */\r\n          isDead: function () {\r\n            return this.classList.contains('dead');\r\n          },\r\n          /**\r\n           * 返回本角色是否处于濒死状态\r\n           * @returns {!boolean}\r\n           */\r\n          isDying: function () {\r\n            return _status.dying.contains(this) && this.hp <= 0 && this.isAlive();\r\n          },\r\n          /**\r\n           * 返回本角色是否当前血量小于最大血量，如果本角色处于**无HP状态**，返回false\r\n           * @returns {!boolean}\r\n           */\r\n          isDamaged: function () {\r\n            return this.hp < this.maxHp && !this.storage.nohp;\r\n          },\r\n          /**\r\n           * 返回本角色是否当前血量等于最大血量，如果本角色处于**无HP状态**，返回true\r\n           * @returns {!boolean}\r\n           */\r\n          isHealthy: function () {\r\n            return this.hp == this.maxHp || this.storage.nohp;\r\n          },\r\n          /**\r\n           * 返回本角色的血量是否是局中最多\r\n           * @param {boolean} [isUnique] 如果为true，只在血量最多且唯一时返回true；如果为false或未指定，只要血量最多就返回true\r\n           * @returns {!boolean}\r\n           */\r\n          isMaxHp: function (equal) {\r\n            for (var i = 0; i < game.players.length; i++) {\r\n              if (game.players[i].isOut() || game.players[i] == this) continue;\r\n              if (equal) {\r\n                if (game.players[i].hp >= this.hp) return false;\r\n              }\r\n              else {\r\n                if (game.players[i].hp > this.hp) return false;\r\n              }\r\n            }\r\n            return true;\r\n          },\r\n          /**\r\n           * 返回本角色的血量是否是局中最少\r\n           * @param {boolean} [isUnique] 如果为true，只在血量最少且唯一时返回true；如果为false或未指定，只要血量最少就返回true\r\n           * @returns {!boolean}\r\n           */\r\n          isMinHp: function (equal) {\r\n            for (var i = 0; i < game.players.length; i++) {\r\n              if (game.players[i].isOut() || game.players[i] == this) continue;\r\n              if (equal) {\r\n                if (game.players[i].hp <= this.hp) return false;\r\n              }\r\n              else {\r\n                if (game.players[i].hp < this.hp) return false;\r\n              }\r\n            }\r\n            return true;\r\n          },\r\n          /**\r\n           * 返回本角色的手牌和装备总数是否是局中最多\r\n           * @param {boolean} [isUnique] 如果为true，只在数量最多且唯一时返回true；如果为false或未指定，只要数量是最多就返回true\r\n           * @returns {!boolean}\r\n           */\r\n          isMaxCard: function (equal) {\r\n            var nh = this.countCards('he');\r\n            for (var i = 0; i < game.players.length; i++) {\r\n              if (game.players[i].isOut() || game.players[i] == this) continue;\r\n              if (equal) {\r\n                if (game.players[i].countCards('he') >= nh) return false;\r\n              }\r\n              else {\r\n                if (game.players[i].countCards('he') > nh) return false;\r\n              }\r\n            }\r\n            return true;\r\n          },\r\n          /**\r\n           * 返回本角色的手牌和装备总数是否是局中最少\r\n           * @param {boolean} [isUnique] 如果为true，只在数量最少且唯一时返回true；如果为false或未指定，只要数量是最少就返回true\r\n           * @returns {!boolean}\r\n           */\r\n          isMinCard: function (equal) {\r\n            var nh = this.countCards('he');\r\n            for (var i = 0; i < game.players.length; i++) {\r\n              if (game.players[i].isOut() || game.players[i] == this) continue;\r\n              if (equal) {\r\n                if (game.players[i].countCards('he') <= nh) return false;\r\n              }\r\n              else {\r\n                if (game.players[i].countCards('he') < nh) return false;\r\n              }\r\n            }\r\n            return true;\r\n          },\r\n          /**\r\n           * 返回本角色的手牌数量是否是局中最多\r\n           * @param {boolean} [isUnique] 如果为true，只在手牌数量最多且唯一时返回true；如果为false或未指定，只要装备数量是最多就返回true\r\n           * @returns {!boolean}\r\n           */\r\n          isMaxHandcard: function (equal) {\r\n            var nh = this.countCards('h');\r\n            for (var i = 0; i < game.players.length; i++) {\r\n              if (game.players[i].isOut() || game.players[i] == this) continue;\r\n              if (equal) {\r\n                if (game.players[i].countCards('h') >= nh) return false;\r\n              }\r\n              else {\r\n                if (game.players[i].countCards('h') > nh) return false;\r\n              }\r\n            }\r\n            return true;\r\n          },\r\n          /**\r\n           * 返回本角色的手牌数量是否是局中最少\r\n           * @param {boolean} [isUnique] 如果为true，只在手牌数量最少且唯一时返回true；如果为false或未指定，只要手牌数量是最少就返回true\r\n           * @returns {!boolean}\r\n           */\r\n          isMinHandcard: function (equal) {\r\n            var nh = this.countCards('h');\r\n            for (var i = 0; i < game.players.length; i++) {\r\n              if (game.players[i].isOut() || game.players[i] == this) continue;\r\n              if (equal) {\r\n                if (game.players[i].countCards('h') <= nh) return false;\r\n              }\r\n              else {\r\n                if (game.players[i].countCards('h') < nh) return false;\r\n              }\r\n            }\r\n            return true;\r\n          },\r\n          /**\r\n           * 返回本角色的装备数量是否是局中最多\r\n           * @param {boolean} [isUnique] 如果为true，只在装备数量最多且唯一时返回true；如果为false或未指定，只要装备数量是最多就返回true\r\n           * @returns {!boolean}\r\n           */\r\n          isMaxEquip: function (equal) {\r\n            var nh = this.countCards('e');\r\n            for (var i = 0; i < game.players.length; i++) {\r\n              if (game.players[i].isOut() || game.players[i] == this) continue;\r\n              if (equal) {\r\n                if (game.players[i].countCards('e') >= nh) return false;\r\n              }\r\n              else {\r\n                if (game.players[i].countCards('e') > nh) return false;\r\n              }\r\n            }\r\n            return true;\r\n          },\r\n          /**\r\n           * 返回本角色的装备数量是否是局中最少\r\n           * @param {boolean} [isUnique] 如果为true，只在装备数量最少且唯一时返回true；如果为false或未指定，只要装备数量是最少就返回true\r\n           * @returns {!boolean}\r\n           */\r\n          isMinEquip: function (equal) {\r\n            var nh = this.countCards('e');\r\n            for (var i = 0; i < game.players.length; i++) {\r\n              if (game.players[i].isOut() || game.players[i] == this) continue;\r\n              if (equal) {\r\n                if (game.players[i].countCards('e') <= nh) return false;\r\n              }\r\n              else {\r\n                if (game.players[i].countCards('e') < nh) return false;\r\n              }\r\n            }\r\n            return true;\r\n          },\r\n          /**\r\n           * 返回本角色是否被链接\r\n           * @returns {!boolean} true表示被链接，false表示未被链接\r\n           */\r\n          isLinked: function () {\r\n            if (get.is.linked2(this)) {\r\n              return this.classList.contains('linked2');\r\n            }\r\n            return this.classList.contains('linked');\r\n          },\r\n          /**\r\n           * 返回本角色是否翻面\r\n           * @returns {!boolean} true表示翻面，false表示未翻面\r\n           */\r\n          isTurnedOver: function () {\r\n            return this.classList.contains('turnedover');\r\n          },\r\n          /**\r\n           * 返回本角色的玩家是否离开\r\n           * @returns {!boolean} true表示离开，false表示未离开\r\n           */\r\n          isOut: function () {\r\n            return this.classList.contains('out');\r\n          },\r\n          /**\r\n           * 本角色是否不计入距离的计算\r\n           * @param {?boolean} [distance]\r\n           * @returns {!boolean}\r\n           */\r\n          //TODO\r\n          isMin: function (distance) {\r\n            if (distance && lib.config.mode != 'stone') return false;\r\n            if (this.forcemin) return true;\r\n            return this.classList.contains('minskin') && !game.chess;\r\n          },\r\n          /**\r\n           * 表示本角色是否在局中(未死亡&未离开&未移出房间)\r\n           * @returns {!boolean} true表示在局中，false表示不在局中\r\n           */\r\n          isIn: function () {\r\n            return this.classList.contains('dead') == false && this.classList.contains('out') == false && !this.removed;\r\n          },\r\n          /**\r\n           * 返回本角色是否可见，如果可见返回true\r\n           * @param {number} num **0**: unseen; **1**: unseen2; **2**: unseen && unseen2; **default**: unseen && !unseen2 \r\n           * @returns {!boolean}\r\n           */\r\n          isUnseen: function (num) {\r\n            switch (num) {\r\n              case 0: return this.classList.contains('unseen');\r\n              case 1: return this.classList.contains('unseen2');\r\n              case 2: return this.classList.contains('unseen') || this.classList.contains('unseen2');\r\n              default: return this.classList.contains('unseen') && (!this.name2 || this.classList.contains('unseen2'));\r\n            }\r\n          },\r\n          /**\r\n           * 判断本角色是否可以被某角色的玩家控制\r\n           * @param {?boolean} self 如果为true，当是两个角色是同一个角色时返回true；如果为false或未指定，返回false\r\n           * @param {GameCores.GameObjects.Player} [me] 某角色，用于判断本角色是否被`me`的玩家控制，如果未指定，默认使用`game.me`\r\n           * @returns {!boolean}\r\n           */\r\n          isUnderControl: function (self, me) {\r\n            me = (me || game.me);\r\n            var that = this._trueMe || this;\r\n            if (that.isMad() || game.notMe) return false;\r\n            if (this === me) {\r\n              if (self) return true;\r\n              return false;\r\n            }\r\n            if (that === me || this == me._trueMe) return true;\r\n            if (_status.connectMode) return false;\r\n            if (lib.config.mode == 'versus') {\r\n              if (_status.mode == 'three') return this.side == me.side;\r\n              if (_status.mode == 'standard') return lib.storage.single_control && this.side == me.side;\r\n              if (_status.mode == 'four') return get.config('four_phaseswap') && this.side == me.side;\r\n              if (_status.mode == 'two') return get.config('two_phaseswap') && this.side == me.side;\r\n              return false;\r\n            }\r\n            else if (lib.config.mode == 'boss') {\r\n              if (me.side) return false;\r\n              return this.side == me.side && get.config('single_control');\r\n            }\r\n            else if (game.chess) {\r\n              if (lib.config.mode == 'chess') {\r\n                if (_status.mode == 'combat' && !get.config('single_control')) return false;\r\n              }\r\n              return this.side == me.side;\r\n            }\r\n            return false;\r\n          },\r\n          /**\r\n           * 角色是否处于联机状态\r\n           * 注意，该函数如果角色处于托管状态，返回false\r\n           * @returns {!boolean}\r\n           */\r\n          isOnline: function () {\r\n            if (this.ws && lib.node && !this.ws.closed && this.ws.inited && !this.isAuto) {\r\n              return true;\r\n            }\r\n            return false;\r\n          },\r\n          /**\r\n           * 角色是否处于联机状态\r\n           * @returns {!boolean}\r\n           */\r\n          isOnline2: function () {\r\n            if (this.ws && lib.node && !this.ws.closed) {\r\n              return true;\r\n            }\r\n            return false;\r\n          },\r\n          /**\r\n           * 角色是否处于脱机状态\r\n           * @returns {!boolean}\r\n           */\r\n          isOffline: function () {\r\n            if (this.ws && lib.node && this.ws.closed) {\r\n              return true;\r\n            }\r\n            return false;\r\n          },\r\n          checkShow: function (skill, showonly) {\r\n            var sourceSkill = get.info(skill);\r\n            var noshow = false;\r\n            if (sourceSkill && sourceSkill.sourceSkill) {\r\n              skill = sourceSkill.sourceSkill;\r\n            }\r\n            if (lib.skill.global.contains(skill)) return false;\r\n            if (get.mode() != 'guozhan' || game.expandSkills(this.getSkills()).contains(skill)) {\r\n              if (showonly) {\r\n                return false;\r\n              }\r\n              else {\r\n                noshow = true;\r\n              }\r\n            }\r\n            var unseen0 = this.isUnseen(0);\r\n            var name1 = this.name1 || this.name;\r\n            if (lib.character[name1] && (!showonly || unseen0)) {\r\n              var skills = game.expandSkills(lib.character[name1][3].slice(0));\r\n              if (skills.contains(skill)) {\r\n                if (!noshow && this.isUnseen(0)) this.showCharacter(0);\r\n                return 'main';\r\n              }\r\n            }\r\n            var unseen1 = this.isUnseen(1);\r\n            var name2 = this.name2;\r\n            if (lib.character[name2] && (!showonly || unseen1)) {\r\n              var skills = game.expandSkills(lib.character[name2][3].slice(0));\r\n              if (skills.contains(skill)) {\r\n                if (!noshow && this.isUnseen(1)) this.showCharacter(1);\r\n                return 'vice';\r\n              }\r\n            }\r\n            return false;\r\n          },\r\n          /**\r\n           * 返回本角色当前超出手牌上限多少张牌，如果没有超出上限，返回0；\r\n           * 如果角色有被动技**ignoredHandcard**，令被动技返回`true`的牌不计入手牌上限\r\n           * @param {?number} [num] \r\n           * @returns {!number} 非负整数\r\n           */\r\n          needsToDiscard: function (num) {\r\n            if (typeof num != 'number') num = 0;\r\n            var hs = this.getCards('h');\r\n            num += hs.length;\r\n            for (var i = 0; i < hs.length; i++) {\r\n              if (game.checkMod(hs[i], this, false, 'ignoredHandcard', this) == true) {\r\n                num--;\r\n              }\r\n            }\r\n            return Math.max(0, num - this.getHandcardLimit());\r\n          },\r\n          distanceTo: function (target, method) {\r\n            return get.distance(this, target, method);\r\n          },\r\n          distanceFrom: function (target, method) {\r\n            return get.distance(target, this, method);\r\n          },\r\n          /**\r\n           * 返回本角色是否拥有一个技能；\r\n           * 此技能会在角色拥有(技能|子技能)中查找技能名；\r\n           * 实际调用了{@link lib.element.player.getSkills this.getSkills(arg2, arg3, arg4)}，并用{@link game.expandSkills}展开\r\n           * @param {!string} skill 技能名\r\n           * @param {*} arg2 为真时表示计入隐藏的技能、为'e'时表示仅返回装备技能\r\n           * @param {*} arg3 为false时表示不计入装备技能\r\n           * @param {*} arg4 为false时表示计入失效的技能\r\n           * @returns {!boolean}\r\n           */\r\n          hasSkill: function (skill, arg2, arg3, arg4) {\r\n            return game.expandSkills(this.getSkills(arg2, arg3, arg4)).contains(skill);\r\n          },\r\n          hasStockSkill: function (skill, arg1, arg2, arg3) {\r\n            return game.expandSkills(this.getStockSkills(arg1, arg2, arg3)).contains(skill);\r\n          },\r\n          hasZhuSkill: function (skill, player) {\r\n            if (!this.hasSkill(skill)) return false;\r\n            var mode = get.mode();\r\n            if (mode == 'identity' || (mode == 'versus' && (_status.mode == 'four' || _status.mode == 'guandu'))) {\r\n              if (mode != 'identity') {\r\n                if (player && this.side != player.side) return false;\r\n              }\r\n              if (_status.mode == 'purple') {\r\n                if (player && this.identity.slice(0, 1) != player.identity.slice(0, 1)) return false;\r\n              }\r\n              if (this.isZhu == true) return true;\r\n              for (var i in this.storage) {\r\n                if (i.indexOf('zhuSkill_') == 0 && this.storage[i].contains(skill)) return true;\r\n              }\r\n            }\r\n            return false;\r\n          },\r\n          hasGlobalTag: function (tag, arg) {\r\n            var skills = lib.skill.global.slice(0);\r\n            game.expandSkills(skills);\r\n            for (var i = 0; i < skills.length; i++) {\r\n              var info = lib.skill[skills[i]];\r\n              if (info && info.ai) {\r\n                if (info.ai.skillTagFilter && info.ai[tag] &&\r\n                  info.ai.skillTagFilter(this, tag, arg) === false) continue;\r\n                if (typeof info.ai[tag] == 'string') {\r\n                  if (info.ai[tag] == arg) return true;\r\n                }\r\n                else if (info.ai[tag]) {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n            return false;\r\n          },\r\n          hasSkillTag: function (tag, hidden, arg, globalskill) {\r\n            var skills = this.getSkills(hidden);\r\n            if (globalskill) {\r\n              skills.addArray(lib.skill.global);\r\n            }\r\n            game.expandSkills(skills);\r\n            for (var i = 0; i < skills.length; i++) {\r\n              var info = lib.skill[skills[i]];\r\n              if (info && info.ai) {\r\n                if (info.ai.skillTagFilter && info.ai[tag] &&\r\n                  info.ai.skillTagFilter(this, tag, arg) === false) continue;\r\n                if (typeof info.ai[tag] == 'string') {\r\n                  if (info.ai[tag] == arg) return true;\r\n                }\r\n                else if (info.ai[tag]) {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n            return false;\r\n          },\r\n          hasJudge: function (name) {\r\n            if (name && typeof name == 'object') {\r\n              name = name.viewAs || name.name;\r\n            }\r\n            var judges = this.node.judges.childNodes;\r\n            for (var i = 0; i < judges.length; i++) {\r\n              if (judges[i].classList.contains('removing')) continue;\r\n              if ((judges[i].viewAs || judges[i].name) == name) {\r\n                return true;\r\n              }\r\n            }\r\n            return false;\r\n          },\r\n          hasFriend: function () {\r\n            for (var i = 0; i < game.players.length; i++) {\r\n              if (game.players[i].isOut()) continue;\r\n              if (game.players[i] != this && get.attitude(game.players[i], this) > 0) {\r\n                return true;\r\n              }\r\n            }\r\n            return false;\r\n          },\r\n          hasUnknown: function (num) {\r\n            var mode = get.mode();\r\n            if (typeof num != 'number') {\r\n              num = 0;\r\n            }\r\n            if (mode == 'identity' || mode == 'guozhan') {\r\n              for (var i = 0; i < game.players.length; i++) {\r\n                if (game.players[i].ai.shown == 0 && game.players[i] != this) {\r\n                  num--;\r\n                  if (num <= 0) {\r\n                    return true;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            return false;\r\n          },\r\n          isUnknown: function (player) {\r\n            var mode = get.mode();\r\n            if (mode == 'identity' || mode == 'guozhan') {\r\n              if (this.ai.shown == 0 && this != player) {\r\n                return true;\r\n              }\r\n            }\r\n            return false;\r\n          },\r\n          //暗属性\r\n          hasYami: function () {\r\n            if (this.countCards('h', { nature: 'yami' })) return true;\r\n            var skills = this.getSkills(true).concat(lib.skill.global);\r\n            game.expandSkills(skills);\r\n            for (var i = 0; i < skills.length; i++) {\r\n              var ifo = get.info(skills[i]);\r\n              if (ifo.viewAs && typeof ifo.viewAs != 'function' && ifo.viewAs.nature == 'yami') {\r\n                if (!ifo.viewAsFilter || ifo.viewAsFilter(this)) {\r\n                  return true;\r\n                }\r\n              }\r\n              else {\r\n                var hiddenYami = get.info(skills[i]).hiddenYami;\r\n                if (typeof hiddenYami == 'function' && hiddenYami(this, false)) {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n            return false;\r\n          },\r\n          hasWuxie: function () {\r\n            if (this.countCards('hs', 'wuxie')) return true;\r\n            var skills = this.getSkills(true).concat(lib.skill.global);\r\n            game.expandSkills(skills);\r\n            for (var i = 0; i < skills.length; i++) {\r\n              var ifo = get.info(skills[i]);\r\n              if (ifo.viewAs && typeof ifo.viewAs != 'function' && ifo.viewAs.name == 'wuxie') {\r\n                if (!ifo.viewAsFilter || ifo.viewAsFilter(this)) {\r\n                  return true;\r\n                }\r\n              }\r\n              else {\r\n                var hiddenCard = get.info(skills[i]).hiddenCard;\r\n                if (typeof hiddenCard == 'function' && hiddenCard(this, 'wuxie')) {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n            return false;\r\n          },\r\n          hasSha: function (respond, noauto) {\r\n            if (this.countCards('hs', 'sha')) return true;\r\n            if (this.countCards('hs', 'hufu')) return true;\r\n            if (!noauto && this.countCards('hs', 'yuchanqian')) return true;\r\n            if (this.hasSkillTag('respondSha', true, respond ? 'respond' : 'use', true)) return true;\r\n            return false;\r\n          },\r\n          hasShan: function () {\r\n            if (this.countCards('hs', 'shan')) return true;\r\n            if (this.countCards('hs', 'hufu')) return true;\r\n            if (this.hasSkillTag('respondShan', true, null, true)) return true;\r\n            return false;\r\n          },\r\n          mayHaveShan: function () {\r\n            return this.hasShan();\r\n            // modify: After AngelBeats! -2nd Beat-\r\n          },\r\n          hasCard: function (name, position) {\r\n            if (typeof name == 'function') {\r\n              var hs = this.getCards(position);\r\n              for (var i = 0; i < hs.length; i++) {\r\n                if (name(hs[i])) return true;\r\n              }\r\n            }\r\n            else {\r\n              if (this.countCards(position, name)) return true;\r\n            }\r\n            return false;\r\n          },\r\n          canEquip: function (name, replace) {\r\n            if (get.type(name) == 'card') {\r\n              name = get.equiptype(name);\r\n            }\r\n            var range = get.subtype(name);\r\n            if (this.isDisabled(range)) return false;\r\n            if (['equip3', 'equip4'].contains(range) && this.getEquip(6)) return false;\r\n            if (!replace && !this.isEmpty(range)) return false;\r\n            return true;\r\n          },\r\n          /**\r\n           * 装备类型\r\n           * |string|number|equip|\r\n           * |:----:|:----:|:---:|\r\n           * |equip1|1|武器|\r\n           * |equip2|2|防具|\r\n           * |equip3|3|防御载具|\r\n           * |equip4|4|攻击载具|\r\n           * |equip5|5|宝物|\r\n           * |equip6|6|坐骑|\r\n           * \r\n           * @typedef {('equip[1-6]'|number)} GameCores.EquipType\r\n           */\r\n          /**\r\n           * 返回角色装备区的一张牌\r\n           * @param {(GameCores.GameObjects.Card|'equip[0-9]'|number)} name 如果为游戏牌对象，使用其装备类型(如果有)；如果不是可装备类型或者`name`未指定，此函数返回null；可以取值为数值[0-9]或字符串'equip[0-9]'，但是通常只在[1-6]范围内({@link GameCores.EquipType})\r\n           * @returns {(null|GameCores.GameObjects.Card)}\r\n           */\r\n          getEquip: function (name) {\r\n            var es = this.getCards('e');\r\n            if (typeof name == 'object' && get.info(name)) {\r\n              name = get.info(name).subtype;\r\n              if (name) {\r\n                name = parseInt(name[5]);\r\n              }\r\n            }\r\n            else if (typeof name == 'string' && name.indexOf('equip') == 0 && name.length == 6) {\r\n              name = parseInt(name[5]);\r\n            }\r\n            if (!name) {\r\n              return null;\r\n            }\r\n            for (var i = 0; i < es.length; i++) {\r\n              if (typeof name === 'number') {\r\n                if (get.info(es[i]).subtype === 'equip' + name) {\r\n                  return es[i];\r\n                }\r\n              }\r\n              else {\r\n                if (es[i].name === name) return es[i];\r\n                var source = get.info(es[i]).source;\r\n                if (Array.isArray(source) && source.contains(name)) {\r\n                  return es[i];\r\n                }\r\n              }\r\n            }\r\n            return null;\r\n          },\r\n          /**\r\n           * 返回角色判定区一张(指定牌|视为指定牌)\r\n           * @function\r\n           * @param {?string} name 指定牌的牌名\r\n           * @returns {(GameCores.GameObjects.Card|null)} 如果没找到，返回null\r\n           */\r\n          getJudge: function (name) {\r\n            var judges = this.node.judges.childNodes;\r\n            for (var i = 0; i < judges.length; i++) {\r\n              if (judges[i].classList.contains('removing')) continue;\r\n              if ((judges[i].viewAs || judges[i].name) == name) {\r\n                return judges[i];\r\n              }\r\n            }\r\n            return null;\r\n          },\r\n          $drawAuto: function (cards, target) {\r\n            if (this.isUnderControl(true, target)) {\r\n              this.$draw(cards);\r\n            }\r\n            else {\r\n              this.$draw(cards.length);\r\n            }\r\n          },\r\n          $draw: function (num, init, config) {\r\n            if (init !== false && init !== 'nobroadcast') {\r\n              game.broadcast(function (player, num, init, config) {\r\n                player.$draw(num, init, config)\r\n              }, this, num, init, config);\r\n            }\r\n            var cards, node;\r\n            if (get.itemtype(num) == 'cards') {\r\n              cards = num;\r\n              num = cards.length;\r\n            }\r\n            else if (get.itemtype(num) == 'card') {\r\n              cards = [num];\r\n              num = 1;\r\n            }\r\n            if (init !== false) {\r\n              if (cards) {\r\n                game.addVideo('drawCard', this, get.cardsInfo(cards));\r\n              }\r\n              else {\r\n                game.addVideo('draw', this, num);\r\n              }\r\n            }\r\n            if (cards) {\r\n              cards = cards.slice(0);\r\n              node = cards.shift().copy('thrown', 'drawingcard');\r\n            }\r\n            else {\r\n              node = ui.create.div('.card.thrown.drawingcard');\r\n            }\r\n            node.fixed = true;\r\n            node.hide();\r\n\r\n            var dx, dy;\r\n            if (game.chess) {\r\n              var rect = this.getBoundingClientRect();\r\n\r\n              if (rect.left <= 80) {\r\n                dx = -10;\r\n                if (rect.top <= 80) {\r\n                  dy = -10;\r\n                }\r\n                else if (rect.top + rect.height + 80 >= ui.chessContainer.offsetHeight) {\r\n                  dy = 10;\r\n                }\r\n                else {\r\n                  dy = 0;\r\n                }\r\n              }\r\n              else if (rect.left + rect.width + 80 >= ui.chessContainer.offsetWidth) {\r\n                dx = 10;\r\n                if (rect.top <= 80) {\r\n                  dy = -10;\r\n                }\r\n                else if (rect.top + rect.height + 80 >= ui.chessContainer.offsetHeight) {\r\n                  dy = 10;\r\n                }\r\n                else {\r\n                  dy = 0;\r\n                }\r\n              }\r\n              else if (rect.top <= 80) {\r\n                dx = 0;\r\n                dy = -10;\r\n              }\r\n              else if (rect.top + rect.height + 80 >= ui.chessContainer.offsetHeight) {\r\n                dx = 0;\r\n                dy = 10;\r\n              }\r\n              else {\r\n                dx = rect.left + this.offsetWidth / 2 - ui.arena.offsetWidth / 2;\r\n                dy = rect.top + this.offsetHeight / 2 - ui.arena.offsetHeight / 2;\r\n              }\r\n\r\n              var coeff = 240 / Math.sqrt(dx * dx + dy * dy);\r\n              dx *= coeff;\r\n              dy *= coeff;\r\n\r\n              node.style.left = (this.getLeft() + this.offsetWidth / 2 - 52 - dx) + 'px';\r\n              node.style.top = (this.getTop() + this.offsetHeight / 2 - 52 - dy) + 'px';\r\n              this.parentNode.appendChild(node);\r\n            }\r\n            else {\r\n              this.parentNode.appendChild(node);\r\n              node.style.left = 'calc(50% - 52px)';\r\n              node.style.top = 'calc(50% - 52px)';\r\n\r\n              dx = this.getLeft() + this.offsetWidth / 2 - 52 - node.offsetLeft;\r\n              dy = this.getTop() + this.offsetHeight / 2 - 52 - node.offsetTop;\r\n\r\n              if (get.is.mobileMe(this)) {\r\n                dx += get.cardOffset();\r\n                if (ui.arena.classList.contains('oblongcard')) {\r\n                  dy -= 16;\r\n                }\r\n              }\r\n            }\r\n            node.style.transitionDuration = '0.8s';\r\n            ui.refresh(node);\r\n            if (typeof num == 'number' && init !== false) {\r\n              config = {\r\n                total: num,\r\n                current: 1\r\n              }\r\n            }\r\n            if (config && config.total > 1) {\r\n              var total = config.total, current = config.current;\r\n              var dxtotal;\r\n              if (total <= 5) {\r\n                dxtotal = Math.min(80, (total - 1) * 20);\r\n                dx += -dxtotal + 2 * dxtotal * (current - 1) / (total - 1)\r\n              }\r\n              else {\r\n                var total2 = Math.floor(total / 2);\r\n                if (current <= total2) {\r\n                  total = total2;\r\n                  dy -= 20;\r\n                }\r\n                else {\r\n                  current -= total2;\r\n                  total -= total2;\r\n                  dy += 20;\r\n                }\r\n                dxtotal = Math.min(80, (total - 1) * 20);\r\n                dx += -dxtotal + 2 * dxtotal * (current - 1) / (total - 1)\r\n              }\r\n              config.current++;\r\n            }\r\n            if (node.style.transform && node.style.transform != 'none' && node.style.transform.indexOf('translate') == -1) {\r\n              node.style.transform += ' translate(' + dx + 'px,' + dy + 'px)';\r\n            }\r\n            else {\r\n              node.style.transform = 'translate(' + dx + 'px,' + dy + 'px)';\r\n            }\r\n            node.show();\r\n\r\n            node.listenTransition(function () {\r\n              node.style.transitionDuration = '0.5s';\r\n              ui.refresh(node);\r\n              node.delete();\r\n            });\r\n            var that = this;\r\n            if (num && num > 1) {\r\n              if (config && config.total > 1) {\r\n                setTimeout(function () {\r\n                  if (cards) {\r\n                    that.$draw(cards, false, config)\r\n                  }\r\n                  else {\r\n                    that.$draw(num - 1, false, config)\r\n                  }\r\n                }, 50)\r\n              }\r\n              else {\r\n                setTimeout(function () {\r\n                  if (cards) {\r\n                    that.$draw(cards, false, config)\r\n                  }\r\n                  else {\r\n                    that.$draw(num - 1, false, config)\r\n                  }\r\n                }, 200);\r\n              }\r\n            }\r\n          },\r\n          $compareMultiple: function (card1, targets, cards) {\r\n            game.broadcast(function (player, card1, targets, cards) {\r\n              player.$compareMultiple(card1, targets, cards);\r\n            }, this, card1, targets, cards);\r\n            game.addVideo('compareMultiple', this, [get.cardInfo(card1), get.targetsInfo(targets), get.cardsInfo(cards)]);\r\n            var player = this;\r\n            var node1 = player.$throwxy2(card1,\r\n              'calc(50% - 52px)', 'calc(50% + 10px)', 'perspective(600px) rotateY(180deg)', true\r\n            );\r\n            if (lib.config.cardback_style != 'default') {\r\n              node1.style.transitionProperty = 'none';\r\n              ui.refresh(node1);\r\n              node1.classList.add('infohidden');\r\n              ui.refresh(node1);\r\n              node1.style.transitionProperty = '';\r\n            }\r\n            else {\r\n              node1.classList.add('infohidden');\r\n            }\r\n\r\n            node1.style.transform = 'perspective(600px) rotateY(180deg) translateX(0)';\r\n            var onEnd01 = function () {\r\n              node1.removeEventListener('webkitTransitionEnd', onEnd01);\r\n              setTimeout(function () {\r\n                node1.style.transition = 'all ease-in 0.3s';\r\n                node1.style.transform = 'perspective(600px) rotateY(270deg) translateX(52px)';\r\n                var onEnd = function () {\r\n                  node1.classList.remove('infohidden');\r\n                  node1.style.transition = 'all 0s';\r\n                  ui.refresh(node1);\r\n                  node1.style.transform = 'perspective(600px) rotateY(-90deg) translateX(52px)';\r\n                  ui.refresh(node1);\r\n                  node1.style.transition = '';\r\n                  ui.refresh(node1);\r\n                  node1.style.transform = '';\r\n                  node1.removeEventListener('webkitTransitionEnd', onEnd);\r\n                }\r\n                node1.listenTransition(onEnd);\r\n              }, 300);\r\n            };\r\n            node1.listenTransition(onEnd01);\r\n\r\n            setTimeout(function () {\r\n              var left0 = -targets.length * 52 - (targets.length - 1) * 8;\r\n              for (var i = 0; i < targets.length; i++) {\r\n                (function (target, card2, i) {\r\n                  var left = left0 + i * 120;\r\n                  var node2;\r\n                  if (left < 0) {\r\n                    node2 = target.$throwxy2(card2,\r\n                      'calc(50% - ' + (-left) + 'px)', 'calc(50% - 114px)', 'perspective(600px) rotateY(180deg)', true\r\n                    );\r\n                  }\r\n                  else {\r\n                    node2 = target.$throwxy2(card2,\r\n                      'calc(50% + ' + left + 'px)', 'calc(50% - 114px)', 'perspective(600px) rotateY(180deg)', true\r\n                    );\r\n                  }\r\n                  if (lib.config.cardback_style != 'default') {\r\n                    node2.style.transitionProperty = 'none';\r\n                    ui.refresh(node2);\r\n                    node2.classList.add('infohidden');\r\n                    ui.refresh(node2);\r\n                    node2.style.transitionProperty = '';\r\n                  }\r\n                  else {\r\n                    node2.classList.add('infohidden');\r\n                  }\r\n                  node2.style.transform = 'perspective(600px) rotateY(180deg) translateX(0)';\r\n                  var onEnd02 = function () {\r\n                    node2.removeEventListener('webkitTransitionEnd', onEnd02);\r\n                    setTimeout(function () {\r\n                      node2.style.transition = 'all ease-in 0.3s';\r\n                      node2.style.transform = 'perspective(600px) rotateY(270deg) translateX(52px)';\r\n                      var onEnd = function () {\r\n                        node2.classList.remove('infohidden');\r\n                        node2.style.transition = 'all 0s';\r\n                        ui.refresh(node2);\r\n                        node2.style.transform = 'perspective(600px) rotateY(-90deg) translateX(52px)';\r\n                        ui.refresh(node2);\r\n                        node2.style.transition = '';\r\n                        ui.refresh(node2);\r\n                        node2.style.transform = '';\r\n                        node2.removeEventListener('webkitTransitionEnd', onEnd);\r\n                      }\r\n                      node2.listenTransition(onEnd);\r\n                    }, 200);\r\n                  };\r\n                  node2.listenTransition(onEnd02);\r\n                }(targets[i], cards[i], i))\r\n              }\r\n            }, 200);\r\n          },\r\n          $compare: function (card1, target, card2) {\r\n            game.broadcast(function (player, target, card1, card2) {\r\n              player.$compare(card1, target, card2);\r\n            }, this, target, card1, card2);\r\n            game.addVideo('compare', this, [get.cardInfo(card1), target.dataset.position, get.cardInfo(card2)]);\r\n            var player = this;\r\n            var node1 = player.$throwxy2(card1,\r\n              'calc(50% - 114px)', 'calc(50% - 52px)', 'perspective(600px) rotateY(180deg)', true\r\n            );\r\n            if (lib.config.cardback_style != 'default') {\r\n              node1.style.transitionProperty = 'none';\r\n              ui.refresh(node1);\r\n              node1.classList.add('infohidden');\r\n              ui.refresh(node1);\r\n              node1.style.transitionProperty = '';\r\n            }\r\n            else {\r\n              node1.classList.add('infohidden');\r\n            }\r\n\r\n            node1.style.transform = 'perspective(600px) rotateY(180deg) translateX(0)';\r\n            var onEnd01 = function () {\r\n              node1.removeEventListener('webkitTransitionEnd', onEnd01);\r\n              setTimeout(function () {\r\n                node1.style.transition = 'all ease-in 0.3s';\r\n                node1.style.transform = 'perspective(600px) rotateY(270deg) translateX(52px)';\r\n                var onEnd = function () {\r\n                  node1.classList.remove('infohidden');\r\n                  node1.style.transition = 'all 0s';\r\n                  ui.refresh(node1);\r\n                  node1.style.transform = 'perspective(600px) rotateY(-90deg) translateX(52px)';\r\n                  ui.refresh(node1);\r\n                  node1.style.transition = '';\r\n                  ui.refresh(node1);\r\n                  node1.style.transform = '';\r\n                  node1.removeEventListener('webkitTransitionEnd', onEnd);\r\n                }\r\n                node1.listenTransition(onEnd);\r\n              }, 300);\r\n            };\r\n            node1.listenTransition(onEnd01);\r\n            setTimeout(function () {\r\n              var node2 = target.$throwxy2(card2,\r\n                'calc(50% + 10px)', 'calc(50% - 52px)', 'perspective(600px) rotateY(180deg)', true\r\n              );\r\n              if (lib.config.cardback_style != 'default') {\r\n                node2.style.transitionProperty = 'none';\r\n                ui.refresh(node2);\r\n                node2.classList.add('infohidden');\r\n                ui.refresh(node2);\r\n                node2.style.transitionProperty = '';\r\n              }\r\n              else {\r\n                node2.classList.add('infohidden');\r\n              }\r\n              node2.style.transform = 'perspective(600px) rotateY(180deg) translateX(0)';\r\n              var onEnd02 = function () {\r\n                node2.removeEventListener('webkitTransitionEnd', onEnd02);\r\n                setTimeout(function () {\r\n                  node2.style.transition = 'all ease-in 0.3s';\r\n                  node2.style.transform = 'perspective(600px) rotateY(270deg) translateX(52px)';\r\n                  var onEnd = function () {\r\n                    node2.classList.remove('infohidden');\r\n                    node2.style.transition = 'all 0s';\r\n                    ui.refresh(node2);\r\n                    node2.style.transform = 'perspective(600px) rotateY(-90deg) translateX(52px)';\r\n                    ui.refresh(node2);\r\n                    node2.style.transition = '';\r\n                    ui.refresh(node2);\r\n                    node2.style.transform = '';\r\n                    node2.removeEventListener('webkitTransitionEnd', onEnd);\r\n                  }\r\n                  node2.listenTransition(onEnd);\r\n                }, 200);\r\n              };\r\n              node2.listenTransition(onEnd02);\r\n            }, 200);\r\n          },\r\n          $throw: function (card, time, init, nosource) {\r\n            if (typeof card == 'number') {\r\n              var tmp = card;\r\n              card = [];\r\n              while (tmp--) {\r\n                var cardx = ui.create.card();\r\n                cardx.classList.add('infohidden');\r\n                cardx.classList.add('infoflip');\r\n                card.push(cardx);\r\n              }\r\n            }\r\n            if (init !== false) {\r\n              if (init !== 'nobroadcast') {\r\n                game.broadcast(function (player, card, time, init, nosource) {\r\n                  player.$throw(card, time, init, nosource);\r\n                }, this, card, time, init);\r\n              }\r\n              if (get.itemtype(card) != 'cards') {\r\n                if (get.itemtype(card) == 'card') {\r\n                  card = [card];\r\n                }\r\n                else {\r\n                  return;\r\n                }\r\n              }\r\n              game.addVideo('throw', this, [get.cardsInfo(card), time, nosource]);\r\n            }\r\n            if (game.chess) {\r\n              this.chessFocus();\r\n            }\r\n            if (get.itemtype(card) == 'cards') {\r\n              var node;\r\n              for (var i = 0; i < card.length; i++) {\r\n                node = this.$throw(card[i], time, false, nosource);\r\n              }\r\n              return node;\r\n            }\r\n            else {\r\n              var node;\r\n              if (card == undefined || card.length == 0) return;\r\n              node = this.$throwordered(card.copy('thrown'), nosource);\r\n              if (time != undefined) {\r\n                node.fixed = true;\r\n                setTimeout(function () { node.delete() }, time);\r\n              }\r\n              lib.listenEnd(node);\r\n              return node;\r\n            }\r\n          },\r\n          $throwordered: function () {\r\n            return this.$throwordered2.apply(this, arguments);\r\n            // if(lib.config.low_performance){\r\n            //     return this.$throwordered2.apply(this,arguments);\r\n            // }\r\n            // else{\r\n            //     return this.$throwordered1.apply(this,arguments);\r\n            // }\r\n          },\r\n          $throwordered1: function (node, nosource) {\r\n            node.classList.add('thrown');\r\n            node.hide();\r\n            node.style.transitionProperty = 'left,top,opacity,transform';\r\n            for (var i = 0; i < ui.thrown.length; i++) {\r\n              if (ui.thrown[i].parentNode != ui.arena ||\r\n                ui.thrown[i].classList.contains('removing')) {\r\n                ui.thrown.splice(i--, 1);\r\n              }\r\n            }\r\n            ui.thrown.push(node);\r\n            var uithrowns = ui.thrown.slice(0);\r\n            var tops;\r\n            if (game.chess) {\r\n              switch (Math.floor((ui.thrown.length - 1) / 4)) {\r\n                case 0:\r\n                  tops = ['calc(50% - 82px)'];\r\n                  break;\r\n                case 1:\r\n                  tops = ['calc(50% - 139px)', 'calc(50% - 25px)'];\r\n                  break;\r\n                case 2:\r\n                  tops = ['calc(50% - 196px)', 'calc(50% - 82px)', 'calc(50% + 32px)'];\r\n                  break;\r\n                default:\r\n                  tops = ['calc(50% - 253px)', 'calc(50% - 139px)',\r\n                    'calc(50% - 25px)', 'calc(50% + 89px)'];\r\n              }\r\n            }\r\n            else {\r\n              switch (Math.floor((ui.thrown.length - 1) / 4)) {\r\n                case 0:\r\n                  tops = ['calc(50% - 52px)'];\r\n                  break;\r\n                case 1:\r\n                  tops = ['calc(50% - 109px)', 'calc(50% + 5px)'];\r\n                  break;\r\n                case 2:\r\n                  tops = ['calc(50% - 166px)', 'calc(50% - 52px)', 'calc(50% + 62px)'];\r\n                  break;\r\n                default:\r\n                  tops = ['calc(50% - 223px)', 'calc(50% - 109px)',\r\n                    'calc(50% + 5px)', 'calc(50% + 119px)'];\r\n              }\r\n            }\r\n            while (uithrowns.length) {\r\n              var throwns = uithrowns.splice(0, Math.min(uithrowns.length, 4));\r\n              switch (throwns.length) {\r\n                case 1:\r\n                  throwns[0].style.left = 'calc(50% - 52px)';\r\n                  break;\r\n                case 2:\r\n                  throwns[0].style.left = 'calc(50% - 109px)';\r\n                  throwns[1].style.left = 'calc(50% + 5px)';\r\n                  break;\r\n                case 3:\r\n                  throwns[0].style.left = 'calc(50% - 166px)';\r\n                  throwns[1].style.left = 'calc(50% - 52px)';\r\n                  throwns[2].style.left = 'calc(50% + 62px)';\r\n                  break;\r\n                case 4:\r\n                  throwns[0].style.left = 'calc(50% - 223px)';\r\n                  throwns[1].style.left = 'calc(50% - 109px)';\r\n                  throwns[2].style.left = 'calc(50% + 5px)';\r\n                  throwns[3].style.left = 'calc(50% + 119px)';\r\n                  break;\r\n              }\r\n              var top;\r\n              if (tops.length) {\r\n                top = tops.shift();\r\n              }\r\n              else {\r\n                if (game.chess) {\r\n                  top = 'calc(50% - 82px)';\r\n                }\r\n                else {\r\n                  top = 'calc(50% - 52px)';\r\n                }\r\n              }\r\n              for (var i = 0; i < throwns.length; i++) {\r\n                throwns[i].style.top = top;\r\n              }\r\n            }\r\n            if (nosource) {\r\n              node.style.transform = 'scale(0)';\r\n              node.classList.add('center');\r\n            }\r\n            else {\r\n              var parseCalc = function (str) {\r\n                var per = str.slice(str.indexOf('calc(') + 5, str.indexOf('%'));\r\n                var add = str.slice(str.indexOf('%') + 1, str.indexOf('px')).replace(/\\s/g, '');\r\n                return [parseInt(per), parseInt(add)];\r\n              }\r\n              var nx = parseCalc(node.style.left);\r\n              var ny = parseCalc(node.style.top);\r\n              nx = nx[0] * ui.arena.offsetWidth / 100 + nx[1];\r\n              ny = ny[0] * ui.arena.offsetHeight / 100 + ny[1];\r\n              var dx, dy;\r\n              if (game.chess) {\r\n                var rect = this.getBoundingClientRect();\r\n                dx = rect.left + this.offsetWidth / 2 - 52 - nx;\r\n                dy = rect.top + this.offsetHeight / 2 - 52 - ny;\r\n              }\r\n              else {\r\n                dx = this.getLeft() + this.offsetWidth / 2 - 52 - nx;\r\n                dy = this.getTop() + this.offsetHeight / 2 - 52 - ny;\r\n                if (get.is.mobileMe(this)) {\r\n                  dx += get.cardOffset();\r\n                  if (ui.arena.classList.contains('oblongcard')) {\r\n                    dy -= 16;\r\n                  }\r\n                }\r\n              }\r\n              if (node.style.transform && node.style.transform != 'none' && node.style.transform.indexOf('translate') == -1) {\r\n                node.style.transform += ' translate(' + dx + 'px,' + dy + 'px)';\r\n              }\r\n              else {\r\n                node.style.transform = 'translate(' + dx + 'px,' + dy + 'px)';\r\n              }\r\n            }\r\n            ui.arena.appendChild(node);\r\n            ui.refresh(node);\r\n            node.style.transform = '';\r\n            node.show();\r\n            lib.listenEnd(node);\r\n            return node;\r\n          },\r\n          $throwordered2: function (node, nosource) {\r\n            node.classList.add('thrown');\r\n            node.classList.add('center');\r\n            node.hide();\r\n            node.style.transitionProperty = 'left,top,opacity,transform';\r\n\r\n            if (nosource) {\r\n              // node.style.transform='scale(0)';\r\n            }\r\n            else {\r\n              var nx = [50, -52];\r\n              var ny = [50, -52];\r\n              nx = nx[0] * ui.arena.offsetWidth / 100 + nx[1];\r\n              ny = ny[0] * ui.arena.offsetHeight / 100 + ny[1];\r\n              var dx, dy;\r\n              if (game.chess) {\r\n                var rect = this.getBoundingClientRect();\r\n                dx = rect.left + this.offsetWidth / 2 - 52 - nx;\r\n                dy = rect.top + this.offsetHeight / 2 - 52 - ny;\r\n              }\r\n              else {\r\n                dx = this.getLeft() + this.offsetWidth / 2 - 52 - nx;\r\n                dy = this.getTop() + this.offsetHeight / 2 - 52 - ny;\r\n                if (get.is.mobileMe(this)) {\r\n                  dx += get.cardOffset();\r\n                  if (ui.arena.classList.contains('oblongcard')) {\r\n                    dy -= 16;\r\n                  }\r\n                }\r\n              }\r\n              if (node.style.transform && node.style.transform != 'none' && node.style.transform.indexOf('translate') == -1) {\r\n                node.style.transform += ' translate(' + dx + 'px,' + dy + 'px)';\r\n              }\r\n              else {\r\n                node.style.transform = 'translate(' + dx + 'px,' + dy + 'px)';\r\n              }\r\n            }\r\n            ui.arena.appendChild(node);\r\n            ui.refresh(node);\r\n\r\n            for (var i = 0; i < ui.thrown.length; i++) {\r\n              if (ui.thrown[i].parentNode != ui.arena ||\r\n                ui.thrown[i].classList.contains('removing')) {\r\n                ui.thrown.splice(i--, 1);\r\n              }\r\n            }\r\n            ui.thrown.push(node);\r\n            var uithrowns = ui.thrown.slice(0);\r\n            var tops;\r\n            switch (Math.floor((ui.thrown.length - 1) / 4)) {\r\n              case 0:\r\n                tops = [0];\r\n                break;\r\n              case 1:\r\n                tops = [-57, 57];\r\n                break;\r\n              case 2:\r\n                tops = [-114, 0, 114];\r\n                break;\r\n              default:\r\n                tops = [-171, -57, 57, 171];\r\n            }\r\n            while (uithrowns.length) {\r\n              var throwns = uithrowns.splice(0, Math.min(uithrowns.length, 4));\r\n              switch (throwns.length) {\r\n                case 1:\r\n                  throwns[0]._transthrown = 'translate(0px,';\r\n                  break;\r\n                case 2:\r\n                  throwns[0]._transthrown = 'translate(-57px,';\r\n                  throwns[1]._transthrown = 'translate(57px,';\r\n                  break;\r\n                case 3:\r\n                  throwns[0]._transthrown = 'translate(-114px,';\r\n                  throwns[1]._transthrown = 'translate(0,';\r\n                  throwns[2]._transthrown = 'translate(114px,';\r\n                  break;\r\n                case 4:\r\n                  throwns[0]._transthrown = 'translate(-171px,';\r\n                  throwns[1]._transthrown = 'translate(-57px,';\r\n                  throwns[2]._transthrown = 'translate(57px,';\r\n                  throwns[3]._transthrown = 'translate(171px,';\r\n                  break;\r\n              }\r\n              var top;\r\n              if (tops.length) {\r\n                top = tops.shift();\r\n              }\r\n              else {\r\n                top = 0;\r\n              }\r\n              if (game.chess) {\r\n                top -= 30;\r\n              }\r\n              for (var i = 0; i < throwns.length; i++) {\r\n                throwns[i].style.transform = throwns[i]._transthrown + top + 'px)';\r\n                delete throwns[i]._transthrown;\r\n              }\r\n            }\r\n\r\n            node.show();\r\n            lib.listenEnd(node);\r\n            return node;\r\n          },\r\n          $throwxy: function (card, left, top) {\r\n            var node = card.copy('thrown', 'thrownhighlight');\r\n            node.dataset.position = this.dataset.position;\r\n            node.hide();\r\n            node.style.transitionProperty = 'left,top,opacity';\r\n\r\n            ui.arena.appendChild(node);\r\n            ui.refresh(node);\r\n            node.show();\r\n            node.style.left = left;\r\n            node.style.top = top;\r\n            lib.listenEnd(node);\r\n            return node;\r\n          },\r\n          $throwxy2: function (card, left, top, trans, flipx, flipy) {\r\n            if (game.chess) {\r\n              return this.$throwxy.apply(this, arguments);\r\n            }\r\n            var node = card.copy('thrown', 'thrownhighlight');\r\n            node.style.left = left;\r\n            node.style.top = top;\r\n            node.hide();\r\n            // node.style.transitionProperty='left,top,opacity,transform';\r\n\r\n            var parseCalc = function (str) {\r\n              var per = str.slice(str.indexOf('calc(') + 5, str.indexOf('%'));\r\n              var add = str.slice(str.indexOf('%') + 1, str.indexOf('px')).replace(/\\s/g, '');\r\n              return [parseInt(per), parseInt(add)];\r\n            }\r\n            var nx = parseCalc(node.style.left);\r\n            var ny = parseCalc(node.style.top);\r\n            nx = nx[0] * ui.arena.offsetWidth / 100 + nx[1];\r\n            ny = ny[0] * ui.arena.offsetHeight / 100 + ny[1];\r\n            var dx = this.getLeft() + this.offsetWidth / 2 - 52 - nx;\r\n            var dy = this.getTop() + this.offsetHeight / 2 - 52 - ny;\r\n            if (flipx) dx = -dx;\r\n            if (flipy) dy = -dy;\r\n            if (trans) {\r\n              node.style.transform = trans + ' translate(' + dx + 'px,' + dy + 'px)';\r\n            }\r\n            else {\r\n              node.style.transform = 'translate(' + dx + 'px,' + dy + 'px)';\r\n            }\r\n\r\n            ui.arena.appendChild(node);\r\n            ui.refresh(node);\r\n            node.show();\r\n            // node.style.transform=trans||'';\r\n            lib.listenEnd(node);\r\n            return node;\r\n          },\r\n          throwDice: function (num) {\r\n            if (typeof num != 'number') {\r\n              num = get.rand(6) + 1;\r\n            }\r\n            _status.event.num = num;\r\n            if (!game.online) {\r\n              game.pause();\r\n            }\r\n            game.broadcastAll(function (num) {\r\n              var diceContainer = ui.create.div('.fullsize.dice-container', ui.window);\r\n              ui.window.classList.add('dicepaused');\r\n              var dice = ui.create.div('.dice');\r\n              var side;\r\n\r\n              side = ui.create.div('.side.front', dice);\r\n              ui.create.div('.dot.center', side);\r\n              ui.create.div('.side.front.inner', dice);\r\n\r\n              side = ui.create.div('.side.top', dice);\r\n              ui.create.div('.dot.dtop.dleft', side);\r\n              ui.create.div('.dot.dbottom.dright', side);\r\n              ui.create.div('.side.top.inner', dice);\r\n\r\n              side = ui.create.div('.side.right', dice);\r\n              ui.create.div('.dot.dtop.dleft', side);\r\n              ui.create.div('.dot.center', side);\r\n              ui.create.div('.dot.dbottom.dright', side);\r\n              ui.create.div('.side.right.inner', dice);\r\n\r\n              side = ui.create.div('.side.left', dice);\r\n              ui.create.div('.dot.dtop.dleft', side);\r\n              ui.create.div('.dot.dtop.dright', side);\r\n              ui.create.div('.dot.dbottom.dleft', side);\r\n              ui.create.div('.dot.dbottom.dright', side);\r\n              ui.create.div('.side.left.inner', dice);\r\n\r\n              side = ui.create.div('.side.bottom', dice);\r\n              ui.create.div('.dot.center', side);\r\n              ui.create.div('.dot.dtop.dleft', side);\r\n              ui.create.div('.dot.dtop.dright', side);\r\n              ui.create.div('.dot.dbottom.dleft', side);\r\n              ui.create.div('.dot.dbottom.dright', side);\r\n              ui.create.div('.side.bottom.inner', dice);\r\n\r\n              side = ui.create.div('.side.back', dice);\r\n              ui.create.div('.dot.dtop.dleft', side);\r\n              ui.create.div('.dot.dtop.dright', side);\r\n              ui.create.div('.dot.dbottom.dleft', side);\r\n              ui.create.div('.dot.dbottom.dright', side);\r\n              ui.create.div('.dot.center dleft', side);\r\n              ui.create.div('.dot.center dright', side);\r\n              ui.create.div('.side.back.inner', dice);\r\n\r\n              ui.create.div('.side.cover.x', dice);\r\n              ui.create.div('.side.cover.y', dice);\r\n              ui.create.div('.side.cover.z', dice);\r\n\r\n              var map = {\r\n                1: [75, 0, 45],\r\n                2: [-15, 45, 0],\r\n                3: [165, -45, 90],\r\n                4: [345, -45, 90],\r\n                5: [345, -45, 180],\r\n                6: [255, 0, 135]\r\n              };\r\n              dice.roll = function (deg) {\r\n                if (typeof deg == 'number') {\r\n                  dice.current[0] += deg;\r\n                  deg = dice.current;\r\n                }\r\n                deg = deg.slice(0);\r\n                dice.current = deg;\r\n                this.style.transform = 'rotateX(' + deg[0] + 'deg) rotateY(' + deg[1] + 'deg) rotateZ(' + deg[2] + 'deg)';\r\n              };\r\n              dice.roll(map[num]);\r\n              diceContainer.appendChild(dice);\r\n              ui.refresh(dice);\r\n              dice.roll(1025);\r\n\r\n              dice.addEventListener('webkitTransitionEnd', function () {\r\n                if (!dice.over) {\r\n                  dice.style.transition = 'transform 0.8s ease';\r\n                  dice.roll(-20);\r\n                  dice.over = true;\r\n                }\r\n                else if (!dice.resumed) {\r\n                  setTimeout(function () {\r\n                    diceContainer.delete();\r\n                    ui.window.classList.remove('dicepaused');\r\n                  }, 300);\r\n                  if (!game.online) {\r\n                    setTimeout(game.resume, 800);\r\n                  }\r\n                  dice.resumed = true;\r\n                }\r\n              });\r\n            }, num);\r\n          },\r\n          $giveAuto: function (card, player) {\r\n            if (Array.isArray(card) && card.length == 0) return;\r\n            var args = Array.from(arguments);\r\n            if (_status.connectMode || (!this.isUnderControl(true) && !player.isUnderControl(true))) {\r\n              if (Array.isArray(card)) {\r\n                card = card.length;\r\n              }\r\n              else {\r\n                card = 1;\r\n              }\r\n              args[0] = card;\r\n            }\r\n            return this.$give.apply(this, args);\r\n          },\r\n          $give: function (card, player, log, init) {\r\n            if (init !== false) {\r\n              game.broadcast(function (source, card, player, init) {\r\n                source.$give(card, player, false, init);\r\n              }, this, card, player, init);\r\n              if (typeof card == 'number' && card >= 0) {\r\n                game.addVideo('give', this, [card, player.dataset.position]);\r\n              }\r\n              else {\r\n                if (get.itemtype(card) == 'card') {\r\n                  card = [card];\r\n                }\r\n                if (get.itemtype(card) == 'cards') {\r\n                  game.addVideo('giveCard', this, [get.cardsInfo(card), player.dataset.position]);\r\n                }\r\n              }\r\n            }\r\n            if (get.itemtype(card) == 'cards') {\r\n              if (log != false && !_status.video) {\r\n                game.log(player, '从', this, '获得了', card);\r\n              }\r\n              if (this.$givemod) {\r\n                this.$givemod(card, player);\r\n              }\r\n              else {\r\n                for (var i = 0; i < card.length; i++) {\r\n                  this.$give(card[i], player, false, false);\r\n                }\r\n              }\r\n            }\r\n            else if (typeof card == 'number' && card >= 0) {\r\n              if (log != false && !_status.video) {\r\n                game.log(player, '从', this, '获得了' + get.cnNumber(card) + '张牌');\r\n              }\r\n              if (this.$givemod) {\r\n                this.$givemod(card, player);\r\n              }\r\n              else {\r\n                while (card--) this.$give('', player, false, false);\r\n              }\r\n            }\r\n            else {\r\n              if (log != false && !_status.video) {\r\n                if (get.itemtype(card) == 'card' && log != false) {\r\n                  game.log(player, '从', this, '获得了', card);\r\n                }\r\n                else {\r\n                  game.log(player, '从', this, '获得了一张牌');\r\n                }\r\n              }\r\n              if (this.$givemod) {\r\n                this.$givemod(card, player);\r\n              }\r\n              else {\r\n                var node;\r\n                if (get.itemtype(card) == 'card') {\r\n                  node = card.copy('card', 'thrown', false);\r\n                }\r\n                else {\r\n                  node = ui.create.div('.card.thrown');\r\n                }\r\n                // node.dataset.position=this.dataset.position;\r\n                node.fixed = true;\r\n                this.$throwordered(node);\r\n                // lib.listenEnd(node);\r\n                // node.hide();\r\n                // node.style.transitionProperty='left,top,opacity';\r\n                //\r\n                // node.style.transform='rotate('+(Math.random()*16-8)+'deg)';\r\n                //\r\n                // ui.arena.appendChild(node);\r\n                // ui.refresh(node);\r\n                // node.show();\r\n                // node.style.left='calc(50% - 52px '+((Math.random()-0.5<0)?'+':'-')+' '+Math.random()*100+'px)';\r\n                // node.style.top='calc(50% - 52px '+((Math.random()-0.5<0)?'+':'-')+' '+Math.random()*80+'px)';\r\n\r\n                node.listenTransition(function () {\r\n                  var dx = player.getLeft() + player.offsetWidth / 2 - 52 - node.offsetLeft;\r\n                  var dy = player.getTop() + player.offsetHeight / 2 - 52 - node.offsetTop;\r\n                  if (node.style.transform && node.style.transform != 'none' && node.style.transform.indexOf('translate') == -1) {\r\n                    node.style.transform += ' translate(' + dx + 'px,' + dy + 'px)';\r\n                  }\r\n                  else {\r\n                    node.style.transform = 'translate(' + dx + 'px,' + dy + 'px)';\r\n                  }\r\n\r\n                  node.delete();\r\n                });\r\n                // setTimeout(function(){\r\n                //     // node.removeAttribute('style');\r\n                //     // node.dataset.position=player.dataset.position;\r\n                //     var dx=player.offsetLeft+player.offsetWidth/2-52-node.offsetLeft;\r\n                //     var dy=player.offsetTop+player.offsetHeight/2-52-node.offsetTop;\r\n                //     if(node.style.transform&&node.style.transform!='none'&&node.style.transform.indexOf('translate')==-1){\r\n                //         node.style.transform+=' translate('+dx+'px,'+dy+'px)';\r\n                //     }\r\n                //     else{\r\n                //         node.style.transform='translate('+dx+'px,'+dy+'px)';\r\n                //     }\r\n                //\r\n                //     node.delete();\r\n                // },700);\r\n              }\r\n            }\r\n          },\r\n          $equip: function (card, viewAs) {\r\n            var originalName = card.originalName;\r\n            if (viewAs && this.storage.disableEquip != undefined && this.storage.disableEquip.contains(get.subtype(viewAs))) {\r\n              this.gain(card, 'gain2');\r\n              game.log(this, '装备失败');\r\n            }\r\n            else if (this.storage.disableEquip != undefined && this.storage.disableEquip.contains(get.subtype(card))) {\r\n              this.gain(card, 'gain2');\r\n              game.log(this, '装备失败');\r\n            }\r\n            else {\r\n              var player = this;\r\n              game.broadcast(function (player, card, viewAs) {\r\n                player.$equip(card, viewAs);\r\n              }, player, card, viewAs);\r\n              card.fix();\r\n              card.style.transform = '';\r\n              card.classList.remove('drawinghidden');\r\n              delete card._transform;\r\n              //已修改\r\n              card.originalName = originalName;\r\n              card.viewAs = viewAs;\r\n              if (viewAs && viewAs != card.name) {\r\n                if (card.classList.contains('fullskin') || card.classList.contains('fullborder')) {\r\n                  card.classList.add('fakejudge');\r\n                  card.node.background.innerHTML = lib.translate[viewAs.name + '_bg'] || get.translation(viewAs)[0];\r\n                }\r\n                card.classList.remove(get.subtype(card));\r\n                card.classList.add(get.subtype(viewAs));\r\n                if (typeof viewAs == 'string') card.viewAs = viewAs;\r\n                else card.viewAs = viewAs.name;\r\n              }\r\n              else {\r\n                card.classList.remove('fakejudge');\r\n                delete card.viewAs;\r\n              }\r\n              //console.log(card.viewAs);\r\n              if (card.viewAs && card.name != card.viewAs) {\r\n                if (!card.originalName) card.originalName = card.name;\r\n                card.name = card.viewAs;\r\n              }\r\n              var equipNum = get.equipNum(card);\r\n              var equipped = false;\r\n              for (var i = 0; i < player.node.equips.childNodes.length; i++) {\r\n                if (get.equipNum(player.node.equips.childNodes[i]) >= equipNum) {\r\n                  player.node.equips.insertBefore(card, player.node.equips.childNodes[i]);\r\n                  equipped = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!equipped) {\r\n                player.node.equips.appendChild(card);\r\n                if (_status.discarded) {\r\n                  _status.discarded.remove(card);\r\n                }\r\n              }\r\n              var ecard = viewAs ? { name: viewAs } : card;\r\n              var info = get.info(ecard);\r\n              if (info.skills) {\r\n                for (var i = 0; i < info.skills.length; i++) {\r\n                  player.addSkillTrigger(info.skills[i]);\r\n                }\r\n              }\r\n              return player;\r\n            };\r\n          },\r\n          $gain: function (card, log, init) {\r\n            if (init !== false) {\r\n              game.broadcast(function (player, card, init) {\r\n                player.$gain(card, false, init);\r\n              }, this, card, init);\r\n              if (typeof card == 'number' && card >= 0) {\r\n                game.addVideo('gain', this, card);\r\n              }\r\n              else {\r\n                if (get.itemtype(card) == 'card') {\r\n                  card = [card];\r\n                }\r\n                if (get.itemtype(card) == 'cards') {\r\n                  game.addVideo('gainCard', this, get.cardsInfo(card));\r\n                }\r\n                else {\r\n                  game.addVideo('gain', this, 1);\r\n                }\r\n              }\r\n            }\r\n            if (get.itemtype(card) == 'cards') {\r\n              if (log != false && !_status.video) {\r\n                game.log(this, '获得了', card);\r\n              }\r\n              if (this.$gainmod) {\r\n                this.$gainmod(card);\r\n              }\r\n              else {\r\n                for (var i = 0; i < card.length; i++) {\r\n                  this.$gain(card[i], false, false);\r\n                }\r\n              }\r\n            }\r\n            else if (typeof card == 'number' && card > 1) {\r\n              if (log != false && !_status.video) {\r\n                game.log(this, '获得了' + get.cnNumber(card) + '张牌');\r\n              }\r\n              if (this.$gainmod) {\r\n                this.$gainmod(card);\r\n              }\r\n              else {\r\n                for (var i = 0; i < card; i++) {\r\n                  this.$gain(1, false, false);\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (get.itemtype(card) == 'card' && log != false && !_status.video) {\r\n                game.log(this, '获得了', card);\r\n              }\r\n              if (this.$gainmod) {\r\n                this.$gainmod(card);\r\n              }\r\n              else {\r\n                var node;\r\n                if (get.itemtype(card) == 'card') {\r\n                  // node=this.$throwordered(card.copy(),true);\r\n                  node = card.copy('thrown', false);\r\n                }\r\n                else {\r\n                  // node=this.$throwordered(ui.create.div('.card.thrown'),true);\r\n                  node = ui.create.div('.card.thrown');\r\n                  node.moveTo = lib.element.card.moveTo;\r\n                  node.moveDelete = lib.element.card.moveDelete;\r\n                }\r\n                node.fixed = true;\r\n                node.style.left = 'calc(50% - 52px ' + ((Math.random() - 0.5 < 0) ? '+' : '-') + ' ' + Math.random() * 100 + 'px)';\r\n                node.style.top = 'calc(50% - 52px ' + ((Math.random() - 0.5 < 0) ? '+' : '-') + ' ' + Math.random() * 100 + 'px)';\r\n                node.style.transform = 'scale(0)';\r\n                node.hide();\r\n                ui.arena.appendChild(node);\r\n                ui.refresh(node);\r\n                node.show();\r\n                node.style.transform = '';\r\n\r\n                lib.listenEnd(node);\r\n                var player = this;\r\n                setTimeout(function () {\r\n                  node.moveDelete(player);\r\n                }, 700);\r\n              }\r\n            }\r\n          },\r\n          $gain2: function (cards, log) {\r\n            if (log === true) {\r\n              game.log(this, '获得了', cards);\r\n            }\r\n            game.broadcast(function (player, cards) {\r\n              player.$gain2(cards);\r\n            }, this, cards);\r\n            if (get.itemtype(cards) == 'card') cards = [cards];\r\n            else if (get.itemtype(cards) != 'cards') return;\r\n            var list = [], list2 = [];\r\n            for (var i = 0; i < cards.length; i++) {\r\n              if (cards[i].clone &&\r\n                (cards[i].clone.parentNode == this.parentNode ||\r\n                  cards[i].clone.parentNode == ui.arena) &&\r\n                parseFloat(getComputedStyle(cards[i].clone).opacity) > 0.3) {\r\n                cards[i].clone.moveDelete(this);\r\n                list2.push(cards[i].clone);\r\n              }\r\n              else {\r\n                list.push(cards[i]);\r\n              }\r\n            }\r\n            if (list2.length) {\r\n              game.addVideo('gain2', this, get.cardsInfo(list2));\r\n            }\r\n            if (list.length) {\r\n              this.$draw(list, 'nobroadcast');\r\n              return true;\r\n            }\r\n          },\r\n          /**\r\n           * 本角色播放技能动画\r\n           */\r\n          //TODO\r\n          $skill: function (name, type, color, avatar) {\r\n            if (typeof type != 'string') type = 'legend';\r\n            if (!avatar) {\r\n              this.playerfocus(1500);\r\n              game.delay(2);\r\n            }\r\n            else {\r\n              game.addVideo('playerfocus2');\r\n              game.broadcastAll(function () {\r\n                ui.arena.classList.add('playerfocus');\r\n                setTimeout(function () {\r\n                  ui.arena.classList.remove('playerfocus');\r\n                }, 1800)\r\n              });\r\n              game.delay(3);\r\n            }\r\n            var that = this;\r\n            setTimeout(function () {\r\n              game.broadcastAll(function (that, type, name, color, avatar) {\r\n                if (lib.config.animation && !lib.config.low_performance) {\r\n                  if (game.chess) {\r\n                    that['$' + type + '2'](1200);\r\n                  }\r\n                  else {\r\n                    that['$' + type](1200);\r\n                  }\r\n                }\r\n                if (name) {\r\n                  that.$fullscreenpop(name, color, avatar);\r\n                }\r\n              }, that, type, name, color, avatar);\r\n            }, avatar ? 0 : 300);\r\n          },\r\n          $fire: function () {\r\n            game.addVideo('flame', this, 'fire');\r\n            var left, top;\r\n            if (game.chess) {\r\n              var rect = this.getBoundingClientRect();\r\n              left = rect.left;\r\n              top = rect.top;\r\n            }\r\n            else {\r\n              left = this.getLeft();\r\n              top = this.getTop();\r\n            }\r\n            game.animate.flame(left + this.offsetWidth / 2,\r\n              top + this.offsetHeight - 20, 700, 'fire');\r\n          },\r\n          $thunder: function () {\r\n            game.addVideo('flame', this, 'thunder');\r\n            var left, top;\r\n            if (game.chess) {\r\n              var rect = this.getBoundingClientRect();\r\n              left = rect.left;\r\n              top = rect.top;\r\n            }\r\n            else {\r\n              left = this.getLeft();\r\n              top = this.getTop();\r\n            }\r\n            game.animate.flame(left + this.offsetWidth / 2,\r\n              top + this.offsetHeight - 30, 700, 'thunder');\r\n          },\r\n          $rare2: function () {\r\n            game.addVideo('flame', this, 'rare2');\r\n            var rect = this.getBoundingClientRect();\r\n            var left = rect.left;\r\n            var top = rect.top + 15;\r\n            game.animate.flame(left + this.offsetWidth / 2,\r\n              top + this.offsetHeight - 30, 700, 'rare');\r\n          },\r\n          $epic2: function () {\r\n            game.addVideo('flame', this, 'epic2');\r\n            var rect = this.getBoundingClientRect();\r\n            var left = rect.left;\r\n            var top = rect.top + 15;\r\n            game.animate.flame(left + this.offsetWidth / 2,\r\n              top + this.offsetHeight - 30, 700, 'epic');\r\n          },\r\n          $legend2: function () {\r\n            game.addVideo('flame', this, 'legend2');\r\n            var rect = this.getBoundingClientRect();\r\n            var left = rect.left;\r\n            var top = rect.top + 15;\r\n            game.animate.flame(left + this.offsetWidth / 2,\r\n              top + this.offsetHeight - 30, 700, 'legend');\r\n          },\r\n          $rare: function (time) {\r\n            time = time || 700;\r\n            game.addVideo('flame', this, 'rare');\r\n            var left, top;\r\n            if (game.chess) {\r\n              left = this.getLeft() - ui.arena.offsetLeft;\r\n              top = this.getTop() - ui.arena.offsetTop;\r\n            }\r\n            else {\r\n              left = this.getLeft();\r\n              top = this.getTop();\r\n            }\r\n            if (this.classList.contains('minskin')) {\r\n              top += 15;\r\n            }\r\n            game.animate.flame(left + this.offsetWidth / 2,\r\n              top + this.offsetHeight - 30, time, 'rare');\r\n          },\r\n          $epic: function (time) {\r\n            time = time || 700;\r\n            game.addVideo('flame', this, 'epic');\r\n            var left, top;\r\n            if (game.chess) {\r\n              left = this.getLeft() - ui.arena.offsetLeft;\r\n              top = this.getTop() - ui.arena.offsetTop;\r\n            }\r\n            else {\r\n              left = this.getLeft();\r\n              top = this.getTop();\r\n            }\r\n            if (this.classList.contains('minskin')) {\r\n              top += 15;\r\n            }\r\n            game.animate.flame(left + this.offsetWidth / 2,\r\n              top + this.offsetHeight - 30, time, 'epic');\r\n          },\r\n          $legend: function (time) {\r\n            time = time || 700;\r\n            game.addVideo('flame', this, 'legend');\r\n            var left, top;\r\n            if (game.chess) {\r\n              left = this.getLeft() - ui.arena.offsetLeft;\r\n              top = this.getTop() - ui.arena.offsetTop;\r\n            }\r\n            else {\r\n              left = this.getLeft();\r\n              top = this.getTop();\r\n            }\r\n            if (this.classList.contains('minskin')) {\r\n              top += 15;\r\n            }\r\n            game.animate.flame(left + this.offsetWidth / 2,\r\n              top + this.offsetHeight - 30, time, 'legend');\r\n          },\r\n          $coin: function () {\r\n            game.broadcast(function (player) {\r\n              if (!lib.config.low_performance) {\r\n                player.$coin();\r\n              }\r\n            }, this);\r\n            game.addVideo('flame', this, 'coin');\r\n            var left = this.getLeft() - ui.arena.offsetLeft;\r\n            var top = this.getTop() - ui.arena.offsetTop;\r\n            if (this.classList.contains('minskin')) {\r\n              top += 15;\r\n            }\r\n            top -= 25;\r\n            game.animate.flame(left + this.offsetWidth / 2,\r\n              top + this.offsetHeight - 30, 700, 'coin');\r\n          },\r\n          $dust: function () {\r\n            game.broadcast(function (player) {\r\n              if (!lib.config.low_performance) {\r\n                player.$dust();\r\n              }\r\n            }, this);\r\n            game.addVideo('flame', this, 'dust');\r\n            var left = this.getLeft() - ui.arena.offsetLeft;\r\n            var top = this.getTop() - ui.arena.offsetTop;\r\n            if (this.classList.contains('minskin')) {\r\n              top += 15;\r\n            }\r\n            top -= 25;\r\n            game.animate.flame(left + this.offsetWidth / 2,\r\n              top + this.offsetHeight - 30, 700, 'dust');\r\n          },\r\n          $recover: function () {\r\n            game.addVideo('flame', this, 'recover');\r\n            var left, top;\r\n            if (game.chess) {\r\n              var rect = this.getBoundingClientRect();\r\n              left = rect.left;\r\n              top = rect.top;\r\n            }\r\n            else {\r\n              left = this.getLeft();\r\n              top = this.getTop();\r\n            }\r\n            game.animate.flame(left + this.offsetWidth / 2,\r\n              top + this.offsetHeight - 30, 700, 'recover');\r\n          },\r\n          $fullscreenpop: function (str, nature, avatar, broadcast) {\r\n            if (broadcast !== false) game.broadcast(function (player, str, nature, avatar) {\r\n              player.$fullscreenpop(str, nature, avatar);\r\n            }, this, str, nature, avatar);\r\n            game.addVideo('fullscreenpop', this, [str, nature, avatar]);\r\n            var node = ui.create.div('.damage');\r\n            if (avatar && this.node) {\r\n              if (avatar == 'vice') {\r\n                if (lib.character[this.name2]) {\r\n                  avatar = this.node.avatar2;\r\n                }\r\n              }\r\n              else {\r\n                if (lib.character[this.name]) {\r\n                  avatar = this.node.avatar;\r\n                }\r\n              }\r\n              if (!get.is.div(avatar)) {\r\n                avatar = false;\r\n              }\r\n            }\r\n            else {\r\n              avatar = false;\r\n            }\r\n            if (avatar) {\r\n              node.classList.add('fullscreenavatar');\r\n              ui.create.div('', ui.create.div(node));\r\n              // ui.create.div('',str.split('').join('<br>'),ui.create.div('.text.textbg',node));\r\n              ui.create.div('', '<div>' + str.split('').join('</div><br><div>') + '</div>', ui.create.div('.text', node));\r\n              node.firstChild.firstChild.style.backgroundImage = avatar.style.backgroundImage;\r\n              node.dataset.nature = nature || 'unknown';\r\n              var num = 0;\r\n              var nodes = node.lastChild.firstChild.querySelectorAll('div');\r\n              var interval = setInterval(function () {\r\n                if (num < nodes.length) {\r\n                  nodes[num].classList.add('flashtext');\r\n                  num++;\r\n                }\r\n                else {\r\n                  clearInterval(interval);\r\n                }\r\n              }, 100);\r\n            }\r\n            else {\r\n              avatar = false;\r\n              node.innerHTML = str;\r\n              node.dataset.nature = nature || 'soil';\r\n            }\r\n            if (avatar) {\r\n              var rect1 = ui.window.getBoundingClientRect();\r\n              var rect2 = this.getBoundingClientRect();\r\n              var dx = Math.round(2 * rect2.left + rect2.width - rect1.width);\r\n              var dy = Math.round(2 * rect2.top + rect2.height - rect1.height);\r\n              node.style.transform = 'scale(0.5) translate(' + dx + 'px,' + dy + 'px)';\r\n            }\r\n            ui.window.appendChild(node);\r\n            ui.refresh(node);\r\n            if (avatar) {\r\n              node.style.transform = 'scale(1)';\r\n              node.style.opacity = 1;\r\n            }\r\n            else {\r\n              node.classList.add('damageadded');\r\n            }\r\n            setTimeout(function () {\r\n              node.delete();\r\n              node.style.transform = 'scale(1.5)'\r\n            }, avatar ? 1600 : 1000);\r\n          },\r\n          /**\r\n           * 伤害效果\r\n           * @param {(string|number)} num 伤害数值或者任意字符串\r\n           * @param {string} [nature='soil'] 伤害属性\r\n           * @param {?boolean} font 如果为true，`damage div`添加类`normal-font`；如果为false或未指定，使用伤害默认字体大小\r\n           * @param {?boolean} nobroadcast 如果为true或未指定，调用`game.broadcast`广播；如果为false，仅在本机\r\n           */\r\n          $damagepop: function (num, nature, font, nobroadcast) {\r\n            if (typeof num == 'number' || typeof num == 'string') {\r\n              game.addVideo('damagepop', this, [num, nature, font]);\r\n              if (nobroadcast !== false) game.broadcast(function (player, num, nature, font) {\r\n                player.$damagepop(num, nature, font);\r\n              }, this, num, nature, font);\r\n              var node = ui.create.div('.damage');\r\n              if (font) {\r\n                node.classList.add('normal-font');\r\n              }\r\n              if (typeof num == 'number' && num > 0) {\r\n                if (num == Infinity) num = '+∞'\r\n                else num = '+' + num;\r\n              }\r\n              else if (num == -Infinity) num = '-∞';\r\n              node.innerHTML = num;\r\n              this.damagepopups.push(node);\r\n              node.dataset.nature = nature || 'soil';\r\n              if (this.damagepopups.length == 1) {\r\n                this.$damagepop();\r\n              }\r\n            }\r\n            else if (this.damagepopups.length) {\r\n              var node = this.damagepopups[0];\r\n              this.appendChild(node);\r\n              ui.refresh(node);\r\n              node.classList.add('damageadded');\r\n              node.listenTransition(function () {\r\n                setTimeout(function () {\r\n                  node.delete();\r\n                }, 200);\r\n              });\r\n              // setTimeout(function(){\r\n              //     node.delete();\r\n              // },500);\r\n              var that = this;\r\n              setTimeout(function () {\r\n                that.damagepopups.shift();\r\n                that.$damagepop();\r\n              }, 500);\r\n            }\r\n          },\r\n          $damage: function (source) {\r\n            if (get.itemtype(source) == 'player') {\r\n              game.addVideo('damage', this, source.dataset.position);\r\n            }\r\n            else {\r\n              game.addVideo('damage', this);\r\n            }\r\n            game.broadcast(function (player, source) {\r\n              player.$damage(source);\r\n            }, this, source);\r\n            if (source && source != this && lib.config.damage_shake) {\r\n              var left, top;\r\n              if (source.getTop() == this.getTop()) {\r\n                left = 20;\r\n                top = 0;\r\n              }\r\n              else {\r\n                var ratio = (source.getLeft() - this.getLeft()) / (source.getTop() - this.getTop());\r\n                left = Math.abs(20 * ratio / Math.sqrt(1 + ratio * ratio));\r\n                top = Math.abs(20 / Math.sqrt(1 + ratio * ratio));\r\n              }\r\n              if (source.getLeft() - this.getLeft() > 0) left = -left;\r\n              if (source.getTop() - this.getTop() > 0) top = -top;\r\n              if (get.is.mobileMe(this)) {\r\n                if (this.classList.contains('linked')) {\r\n                  this.node.avatar.style.transform = 'translate(' + left + 'px,' + top + 'px) rotate(-90deg)';\r\n                  this.node.avatar2.style.transform = 'translate(' + left + 'px,' + top + 'px) rotate(-90deg)';\r\n                }\r\n                else {\r\n                  this.node.avatar.style.transform = 'translate(' + left + 'px,' + top + 'px)';\r\n                  this.node.avatar2.style.transform = 'translate(' + left + 'px,' + top + 'px)';\r\n                }\r\n              }\r\n              else if (this.classList.contains('linked') && get.is.newLayout()) {\r\n                this.style.transform = 'translate(' + left + 'px,' + top + 'px) rotate(-90deg)';\r\n              }\r\n              else if (this._chesstransform) {\r\n                this.style.transform = 'translate(' + (left + this._chesstransform[0]) + 'px,' + (top + this._chesstransform[1]) + 'px)';\r\n              }\r\n              else {\r\n                this.style.transform = 'translate(' + left + 'px,' + top + 'px)';\r\n              }\r\n            }\r\n            else {\r\n              var zoom1 = 0.9, zoom2 = 0.95;\r\n              if (arguments[1] == 'phase') {\r\n                zoom1 = 1.05;\r\n                zoom2 = 1.05;\r\n              }\r\n              if (get.is.mobileMe(this)) {\r\n                if (this.classList.contains('linked')) {\r\n                  this.node.avatar.style.transform = 'scale(' + zoom1 + ') rotate(-90deg)';\r\n                  this.node.avatar2.style.transform = 'scale(' + zoom1 + ') rotate(-90deg)';\r\n                }\r\n                else {\r\n                  this.node.avatar.style.transform = 'scale(' + zoom1 + ')';\r\n                  this.node.avatar2.style.transform = 'scale(' + zoom1 + ')';\r\n                }\r\n              }\r\n              else if (this.classList.contains('linked') && get.is.newLayout()) {\r\n                this.style.transform = 'scale(' + zoom2 + ') rotate(-90deg)';\r\n              }\r\n              else if (game.chess && this._chesstransform) {\r\n                this.style.transform = 'translate(' + this._chesstransform[0] + 'px,' + this._chesstransform[1] + 'px) scale(' + zoom2 + ')';\r\n              }\r\n              else {\r\n                this.style.transform = 'scale(' + zoom2 + ')';\r\n              }\r\n            }\r\n            this.queue();\r\n          },\r\n          $die: function () {\r\n            game.addVideo('die', this);\r\n            game.broadcast(function (player) {\r\n              player.$die();\r\n            }, this);\r\n            if (lib.config.die_move != 'off') {\r\n              this.$dieflip(lib.config.die_move);\r\n            }\r\n            if (lib.element.player.$dieAfter) {\r\n              lib.element.player.$dieAfter.call(this);\r\n            }\r\n          },\r\n          $dieflip: function (type) {\r\n            var top0 = ui.window.offsetHeight / 2;\r\n            var left0 = ui.window.offsetWidth / 2;\r\n            var ratio = (left0 - this.getLeft()) / (top0 - this.getTop());\r\n            var left = Math.abs(50 * ratio / Math.sqrt(1 + ratio * ratio));\r\n            var top = Math.abs(50 / Math.sqrt(1 + ratio * ratio));\r\n            if (left0 - this.getLeft() > 0) left = -left;\r\n            if (top0 - this.getTop() > 0) top = -top;\r\n            if (get.is.mobileMe(this)) {\r\n              left = -Math.random() * 5 - 10;\r\n              top = Math.random() * 5 + 10;\r\n            }\r\n            if (this._chesstransform) {\r\n              left += this._chesstransform[0];\r\n              top += this._chesstransform[1];\r\n            }\r\n            var transform = 'translate(' + left + 'px,' + top + 'px) ' +\r\n              'rotate(' + (Math.random() * 20 - 10) + 'deg) ';\r\n            if (type == 'flip') {\r\n              if (game.layout == 'long' || game.layout == 'long2') {\r\n                transform += 'rotateY(180deg)';\r\n              }\r\n              else {\r\n                transform += ((Math.random() - 0.5 < 0) ? 'rotateX(180deg)' : 'rotateY(180deg)');\r\n              }\r\n            }\r\n            if (get.is.mobileMe(this)) {\r\n              this.node.avatar.style.transform = transform;\r\n              this.node.avatar2.style.transform = transform;\r\n              this.style.transform = '';\r\n            }\r\n            else {\r\n              this.node.avatar.style.transform = '';\r\n              this.node.avatar2.style.transform = '';\r\n              this.style.transform = transform;\r\n            }\r\n            this.queue(false);\r\n          },\r\n          $phaseJudge: function (card) {\r\n            game.addVideo('phaseJudge', this, get.cardInfo(card));\r\n            var player = this;\r\n            var clone = player.$throw(card);\r\n            if (lib.config.low_performance && card && card.clone) {\r\n              var waitingForTransition = get.time();\r\n              _status.waitingForTransition = waitingForTransition;\r\n              card.clone.listenTransition(function () {\r\n                if (_status.waitingForTransition == waitingForTransition && _status.paused) {\r\n                  game.resume();\r\n                }\r\n              });\r\n              game.pause();\r\n            }\r\n            else {\r\n              game.delay();\r\n            }\r\n          }\r\n        },\r\n        /**\r\n         * 卡牌方法，.card节点共用的方法（比如检测卡牌是否在区域内【hasPosition】和添加去除标签【add/removeGaintag】）\r\n         * 卡牌\r\n         * @namespace\r\n         * @mixin\r\n         */\r\n        card: {\r\n          /**\r\n           * 为本游戏牌添加gain标签名；本游戏牌`this.node.gaintag`也会更新\r\n           * @param {(string|Array<string>)} gaintag gain标签名，如果是一个数组，会**覆盖**本游戏牌的原gain标签数组为此数组，而不是向原数组中添加gain标签\r\n           */\r\n          addGaintag: function (gaintag) {\r\n            if (Array.isArray(gaintag)) this.gaintag = gaintag.slice(0);\r\n            else this.gaintag.add(gaintag);\r\n            var str = '';\r\n            for (var gi = 0; gi < this.gaintag.length; gi++) {\r\n              str += get.translation(this.gaintag[gi]);\r\n              if (gi < this.gaintag.length - 1) str += ' ';\r\n            }\r\n            this.node.gaintag.innerHTML = str;\r\n          },\r\n          /**\r\n           * 为本游戏牌移除gain标签，或置空gain标签数组；本游戏牌`this.node.gaintag`也会更新\r\n           * @param {(string|true)} tag 要移除的gain标签名，如果此gain标签不在其中则不做任何处理；如果此值为true，置空gain标签数组\r\n           */\r\n          removeGaintag: function (tag) {\r\n            if (tag === true) {\r\n              if (this.gaintag && this.gaintag.length || this.node.gaintag.innerHTML.length) this.addGaintag([]);\r\n            }\r\n            else if (this.hasGaintag(tag)) {\r\n              this.gaintag.remove(tag);\r\n              this.addGaintag(this.gaintag);\r\n            }\r\n          },\r\n          /**\r\n           * 返回本游戏牌是否含有某一个gain标签\r\n           * @param {!string} tag 要搜索的gain标签\r\n           * @returns {!boolean}\r\n           */\r\n          hasGaintag: function (tag) {\r\n            if (['ming_', 'an_'].contains(tag)) {\r\n              return this.gaintag && this.gaintag.filter(function (gain) {\r\n                return gain.indexOf(tag) == 0;\r\n              }).length;\r\n            }\r\n            else return this.gaintag && this.gaintag.contains(tag);\r\n          },\r\n          /**\r\n           * 初始化\r\n           * 同时将info.global内的技能添加到{@link lib.skill.global}\r\n           * @function\r\n           * @param {(Array|Object)} card TODO\r\n           * @returns {!GameCores.GameObjects.Card} this self\r\n           */\r\n          init: function (card) {\r\n            if (Array.isArray(card)) {\r\n              if (card[2] == 'huosha') {\r\n                card[2] = 'sha';\r\n                card[3] = 'fire';\r\n              }\r\n              if (card[2] == 'leisha') {\r\n                card[2] = 'sha';\r\n                card[3] = 'thunder';\r\n              }\r\n              if (card[2] == 'kamisha') {\r\n                card[2] = 'sha';\r\n                card[3] = 'kami';\r\n              }\r\n              if (card[2] == 'icesha') {\r\n                card[2] = 'sha';\r\n                card[3] = 'ice';\r\n              }\r\n              if (card[2] == 'haisha') {\r\n                card[2] = 'sha';\r\n                card[3] = 'ocean';\r\n              }\r\n              if (card[2] == 'yamisha') {\r\n                card[2] = 'sha';\r\n                card[3] = 'yami';\r\n              }\r\n              if (card[2] == 'haitao') {\r\n                card[2] = 'tao';\r\n                card[3] = 'ocean';\r\n              }\r\n              if (card[2] == 'haijiu') {\r\n                card[2] = 'jiu';\r\n                card[3] = 'ocean';\r\n              }\r\n            }\r\n            else if (typeof card == 'object') {\r\n              card = [card.suit, card.number, card.name, card.nature];\r\n              card[5] = card.specialEffects\r\n            }\r\n            var cardnum = card[1] || '';\r\n            if (parseInt(cardnum) == cardnum) cardnum = parseInt(cardnum);\r\n            if ([1, 11, 12, 13, 14].contains(cardnum)) {\r\n              cardnum = { '1': 'A', '11': 'J', '12': 'Q', '13': 'K', '14': '★' }[cardnum]\r\n            }\r\n            if (!lib.card[card[2]]) {\r\n              lib.card[card[2]] = {};\r\n            }\r\n            var info = lib.card[card[2]];\r\n            if (info.global && !this.classList.contains('button')) {\r\n              if (Array.isArray(info.global)) {\r\n                while (info.global.length) {\r\n                  game.addGlobalSkill(info.global.shift());\r\n                }\r\n              }\r\n              else if (typeof info.global == 'string') {\r\n                game.addGlobalSkill(info.global);\r\n              }\r\n              delete info.global;\r\n            }\r\n            if (this.name) {\r\n              this.classList.remove('epic');\r\n              this.classList.remove('legend');\r\n              this.classList.remove('gold');\r\n              this.classList.remove('unique');\r\n              this.style.background = '';\r\n              var subtype = get.subtype(this);\r\n              if (subtype) {\r\n                this.classList.remove(subtype);\r\n              }\r\n            }\r\n            if (info.epic) {\r\n              this.classList.add('epic');\r\n            }\r\n            else if (info.legend) {\r\n              this.classList.add('legend');\r\n            }\r\n            else if (info.gold) {\r\n              this.classList.add('gold');\r\n            }\r\n            else if (info.unique) {\r\n              this.classList.add('unique');\r\n            }\r\n            var bg = card[2];\r\n            if (info.cardimage) {\r\n              bg = info.cardimage;\r\n            }\r\n            var img = lib.card[bg].image;\r\n            if (img) {\r\n              if (img.indexOf('db:') == 0) {\r\n                img = img.slice(3);\r\n              }\r\n              else if (img.indexOf('ext:') != 0) {\r\n                img = null;\r\n              }\r\n            }\r\n            this.classList.remove('fullskin');\r\n            this.classList.remove('fullimage');\r\n            this.classList.remove('fullborder');\r\n            this.dataset.cardName = card[2];\r\n            this.dataset.cardType = info.type || '';\r\n            this.dataset.cardSubype = info.subtype || '';\r\n            this.dataset.cardMultitarget = info.multitarget ? '1' : '0';\r\n            this.node.name.dataset.nature = '';\r\n            this.node.info.classList.remove('red');\r\n            if (!lib.config.hide_card_image && lib.card[bg].fullskin) {\r\n              this.classList.add('fullskin');\r\n              if (img) {\r\n                if (img.indexOf('ext:') == 0) {\r\n                  this.node.image.setBackgroundImage(img.replace(/ext:/, 'extension/'));\r\n                }\r\n                else {\r\n                  this.node.image.setBackgroundDB(img);\r\n                }\r\n              }\r\n              else {\r\n                if (lib.card[bg].modeimage) {\r\n                  this.node.image.setBackgroundImage('image/mode/' + lib.card[bg].modeimage + '/card/' + bg + '.png');\r\n                }\r\n                else {\r\n                  if (bg.indexOf('rm_') == 0) {\r\n                    var bg = bg.slice(3);\r\n                    this.node.image.setBackgroundImage('image/replace/' + bg + '.png');\r\n                  }\r\n                  else if (lib.config.replace_image) {\r\n                    this.node.image.setBackgroundImage('image/replace/' + bg + '.png');\r\n                  }\r\n                  else {\r\n                    this.node.image.setBackgroundImage('image/card/' + bg + '.png');\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            else if (lib.card[bg].image == 'background') {\r\n              if (card[3]) this.node.background.setBackground(bg + '_' + card[3], 'card');\r\n              else this.node.background.setBackground(bg, 'card');\r\n            }\r\n            else if (lib.card[bg].fullimage) {\r\n              this.classList.add('fullimage');\r\n              if (img) {\r\n                if (img.indexOf('ext:') == 0) {\r\n                  this.setBackgroundImage(img.replace(/ext:/, 'extension/'));\r\n                  this.style.backgroundSize = 'cover';\r\n                }\r\n                else {\r\n                  this.setBackgroundDB(img);\r\n                }\r\n              }\r\n              else if (lib.card[bg].image) {\r\n                if (lib.card[bg].image.indexOf('character:') == 0) {\r\n                  this.setBackground(lib.card[bg].image.slice(10), 'character');\r\n                }\r\n                else {\r\n                  this.setBackground(lib.card[bg].image);\r\n                }\r\n              }\r\n              else {\r\n                var cardPack = lib.cardPack['mode_' + get.mode()];\r\n                if (Array.isArray(cardPack) && cardPack.contains(bg)) {\r\n                  this.setBackground('mode/' + get.mode() + '/card/' + bg);\r\n                }\r\n                else {\r\n                  this.setBackground('card/' + bg);\r\n                }\r\n              }\r\n            }\r\n            else if (lib.card[bg].fullborder) {\r\n              this.classList.add('fullborder');\r\n              if (lib.card[bg].fullborder == 'gold') {\r\n                this.node.name.dataset.nature = 'metalmm';\r\n              }\r\n              else if (lib.card[bg].fullborder == 'silver') {\r\n                this.node.name.dataset.nature = 'watermm';\r\n              }\r\n              if (!this.node.avatar) {\r\n                this.node.avatar = ui.create.div('.cardavatar');\r\n                this.insertBefore(this.node.avatar, this.firstChild);\r\n              }\r\n              if (!this.node.framebg) {\r\n                this.node.framebg = ui.create.div('.cardframebg');\r\n                this.node.framebg.dataset.auto = lib.card[bg].fullborder;\r\n                this.insertBefore(this.node.framebg, this.firstChild);\r\n              }\r\n              if (img) {\r\n                if (img.indexOf('ext:') == 0) {\r\n                  this.node.avatar.setBackgroundImage(img.replace(/ext:/, 'extension/'));\r\n                  this.node.avatar.style.backgroundSize = 'cover';\r\n                }\r\n                else {\r\n                  this.node.avatar.setBackgroundDB(img);\r\n                }\r\n              }\r\n              else if (lib.card[bg].image) {\r\n                if (lib.card[bg].image.indexOf('character:') == 0) {\r\n                  this.node.avatar.setBackground(lib.card[bg].image.slice(10), 'character');\r\n                }\r\n                else {\r\n                  this.node.avatar.setBackground(lib.card[bg].image);\r\n                }\r\n              }\r\n              else {\r\n                var cardPack = lib.cardPack['mode_' + get.mode()];\r\n                if (Array.isArray(cardPack) && cardPack.contains(bg)) {\r\n                  this.node.avatar.setBackground('mode/' + get.mode() + '/card/' + bg);\r\n                }\r\n                else {\r\n                  this.node.avatar.setBackground('card/' + bg);\r\n                }\r\n              }\r\n            }\r\n            else if (lib.card[bg].image == 'card') {\r\n              if (card[3]) this.setBackground(bg + '_' + card[3], 'card');\r\n              else this.setBackground(bg, 'card');\r\n            }\r\n            else if (typeof lib.card[bg].image == 'string' && !lib.card[bg].fullskin) {\r\n              if (img) {\r\n                if (img.indexOf('ext:') == 0) {\r\n                  this.setBackgroundImage(img.replace(/ext:/, 'extension/'));\r\n                  this.style.backgroundSize = 'cover';\r\n                }\r\n                else {\r\n                  this.setBackgroundDB(img);\r\n                }\r\n              }\r\n              else {\r\n                this.setBackground(lib.card[bg].image);\r\n              }\r\n            }\r\n            else {\r\n              this.node.background.innerHTML = lib.translate[bg + '_cbg'] || lib.translate[bg + '_bg'] || get.translation(bg)[0];\r\n              // this.node.background.style.fontFamily=lib.config.card_font;\r\n              if (this.node.background.innerHTML.length > 1) this.node.background.classList.add('tight');\r\n              else this.node.background.classList.remove('tight');\r\n            }\r\n            if ((bg == 'wuxingpan' || !lib.card[bg].fullborder) && this.node.avatar && this.node.framebg) {\r\n              this.node.avatar.remove();\r\n              this.node.framebg.remove();\r\n              delete this.node.avatar;\r\n              delete this.node.framebg;\r\n            }\r\n            if (info.noname && !this.classList.contains('button')) {\r\n              this.node.name.style.display = 'none';\r\n            }\r\n            if (info.color) {\r\n              this.style.color = info.color;\r\n            }\r\n            if (info.textShadow) {\r\n              this.style.textShadow = info.textShadow;\r\n            }\r\n            if (info.opacity) {\r\n              this.node.info.style.opacity = info.opacity;\r\n              this.node.name.style.opacity = info.opacity;\r\n            }\r\n            if (info.modinfo) {\r\n              this.node.info.innerHTML = info.modinfo;\r\n            }\r\n            else {\r\n              this.node.info.innerHTML = get.translation(card[0]) + '<span> </span>' + cardnum;\r\n            }\r\n            if (info.addinfo) {\r\n              if (!this.node.addinfo) {\r\n                this.node.addinfo = ui.create.div('.range', this);\r\n              }\r\n              this.node.addinfo.innerHTML = info.addinfo;\r\n            }\r\n            else if (this.node.addinfo) {\r\n              this.node.addinfo.remove();\r\n              delete this.node.addinfo;\r\n            }\r\n            if (card[0] == 'heart' || card[0] == 'diamond') {\r\n              this.node.info.classList.add('red');\r\n            }\r\n            this.node.name.innerHTML = '';\r\n            this.node.image.className = 'image';\r\n            var name = get.translation(card[2]);\r\n            if (name.length == 1) {\r\n              if (card[3] == 'fire') {\r\n                name = '火' + name;\r\n                this.node.image.classList.add('fire');\r\n              }\r\n              else if (card[3] == 'thunder') {\r\n                name = '雷' + name;\r\n                this.node.image.classList.add('thunder');\r\n              }\r\n              else if (card[3] == 'kami') {\r\n                name = '神' + name;\r\n                this.node.image.classList.add('kami');\r\n              }\r\n              else if (card[3] == 'ice') {\r\n                name = '冰' + name;\r\n                this.node.image.classList.add('ice');\r\n              }\r\n              else if (card[3] == 'ocean') {\r\n                name = '海' + name;\r\n                this.node.image.classList.add('ocean');\r\n              }\r\n              else if (card[3] == 'yami') {\r\n                name = '暗' + name;\r\n                this.node.image.classList.add('yami');\r\n              }\r\n            } else {\r\n              if (card[3] == 'fire') {\r\n                this.node.image.classList.add('fire');\r\n              }\r\n              else if (card[3] == 'thunder') {\r\n                this.node.image.classList.add('thunder');\r\n              }\r\n              else if (card[3] == 'kami') {\r\n                this.node.image.classList.add('kami');\r\n              }\r\n              else if (card[3] == 'ice') {\r\n                this.node.image.classList.add('ice');\r\n              }\r\n              else if (card[3] == 'ocean') {\r\n                name = name.replace(name.charAt(0), '海');\r\n                this.node.image.classList.add('ocean');\r\n              }\r\n              else if (card[3] == 'yami') {\r\n                name = name.replace(name.charAt(0), '暗');\r\n                this.node.image.classList.add('yami');\r\n              }\r\n            }\r\n            for (var i = 0; i < name.length; i++) {\r\n              this.node.name.innerHTML += name[i] + '<br/>';\r\n            }\r\n            if (name.length >= 5) {\r\n              this.node.name.classList.add('long');\r\n              if (name.length >= 7) {\r\n                this.node.name.classList.add('longlong');\r\n              }\r\n            }\r\n            this.node.name2.innerHTML = get.translation(card[0]) + cardnum + ' ' + name;\r\n            this.suit = card[0];\r\n            this.number = parseInt(card[1]) || 0;\r\n            this.name = card[2];\r\n            this.classList.add('card');\r\n            if (card[3]) {\r\n              if (lib.nature.contains(card[3])) this.nature = card[3];\r\n              this.classList.add(card[3]);\r\n            }\r\n            else if (this.nature) {\r\n              this.classList.remove(this.nature);\r\n              delete this.nature;\r\n            }\r\n            if (info.subtype) this.classList.add(info.subtype);\r\n            if (this.inits) {\r\n              for (var i = 0; i < lib.element.card.inits.length; i++) {\r\n                lib.element.card.inits[i](this);\r\n              }\r\n            }\r\n            if (typeof info.init == 'function') info.init();\r\n            this.node.range.innerHTML = '';\r\n            switch (get.subtype(this)) {\r\n              case 'equip1':\r\n                var added = false;\r\n                if (lib.card[this.name] && lib.card[this.name].distance) {\r\n                  var dist = lib.card[this.name].distance;\r\n                  if (dist.attackFrom) {\r\n                    added = true;\r\n                    this.node.range.innerHTML = '范围: ' + (-dist.attackFrom + 1);\r\n                  }\r\n                }\r\n                if (!added) {\r\n                  this.node.range.innerHTML = '范围: 1';\r\n                }\r\n                break;\r\n              case 'equip3':\r\n                if (info.distance && info.distance.globalTo) {\r\n                  this.node.range.innerHTML = '防御: ' + info.distance.globalTo;\r\n                  this.node.name2.innerHTML += '+';\r\n                }\r\n                break;\r\n              case 'equip4':\r\n                if (info.distance && info.distance.globalFrom) {\r\n                  this.node.range.innerHTML = '进攻: ' + (-info.distance.globalFrom);\r\n                  this.node.name2.innerHTML += '-';\r\n                }\r\n                break;\r\n            }\r\n            var specialEffects = [];\r\n            if (Array.isArray(card[5])) {\r\n              specialEffects.addArray(card[5]);\r\n            }\r\n            if (this.node.image.parentNode.classList.length > 0)\r\n              this.node.image.parentNode.classList.forEach(element => {\r\n                if (element.indexOf(\"card_\") != -1) {\r\n                  this.node.image.parentNode.classList.remove(element);\r\n                }\r\n              });\r\n            if (specialEffects.length) {\r\n              for (var i = 0; i < specialEffects.length; i++) {\r\n                this.node.image.parentNode.classList.add(specialEffects[i]);\r\n              }\r\n              this.specialEffects = specialEffects;\r\n            }\r\n            if (_status.connectMode && !game.online && lib.cardOL && !this.cardid) {\r\n              this.cardid = get.id();\r\n              lib.cardOL[this.cardid] = this;\r\n            }\r\n            if (!_status.connectMode && !_status.video) {\r\n              this.cardid = get.id();\r\n            }\r\n            var tags = [];\r\n            if (Array.isArray(card[4])) {\r\n              tags.addArray(card[4]);\r\n            }\r\n            if (this.cardid) {\r\n              if (!_status.cardtag) {\r\n                _status.cardtag = {};\r\n              }\r\n              for (var i in _status.cardtag) {\r\n                if (_status.cardtag[i].contains(this.cardid)) {\r\n                  tags.add(i);\r\n                }\r\n              }\r\n              if (tags.length) {\r\n                var tagstr = ' <span class=\"cardtag\">';\r\n                for (var i = 0; i < tags.length; i++) {\r\n                  var tag = tags[i];\r\n                  if (!_status.cardtag[tag]) {\r\n                    _status.cardtag[tag] = [];\r\n                  }\r\n                  _status.cardtag[tag].add(this.cardid);\r\n                  tagstr += lib.translate[tag + '_tag'];\r\n                }\r\n                tagstr += '</span>';\r\n                this.node.range.innerHTML += tagstr;\r\n              }\r\n            }\r\n            return this;\r\n          },\r\n          /**\r\n           * 选中状态，更新本游戏牌的位置；仅供`ui.me`中的手牌使用的函数(本机)\r\n           * @param {?boolean} [bool] 如果为true，translate`translateY(-20px)`\r\n           * @param {?number} [delay] 延迟`delay`(ms)时长，再更新本游戏牌位置；如果未指定或为0，不调用延迟函数，立即更新\r\n           */\r\n          updateTransform: function (bool, delay) {\r\n            if (delay) {\r\n              var that = this;\r\n              setTimeout(function () {\r\n                that.updateTransform(that.classList.contains('selected'));\r\n              }, delay);\r\n            }\r\n            else {\r\n              if (_status.event.player != game.me) return;\r\n              if (this._transform && this.parentNode && this.parentNode.parentNode &&\r\n                this.parentNode.parentNode.parentNode == ui.me &&\r\n                (!_status.mousedown || _status.mouseleft) &&\r\n                (!this.parentNode.parentNode.classList.contains('scrollh') || (game.layout == 'long2' || game.layout == 'nova'))) {\r\n                if (bool) {\r\n                  this.style.transform = this._transform + ' translateY(-20px)';\r\n                }\r\n                else {\r\n                  this.style.transform = this._transform || '';\r\n                }\r\n              }\r\n            }\r\n          },\r\n          aiexclude: function () {\r\n            _status.event._aiexclude.add(this);\r\n          },\r\n          getSource: function (name) {\r\n            if (this.name == name) return true;\r\n            var info = lib.card[this.name];\r\n            if (info && Array.isArray(info.source)) {\r\n              return info.source.contains(name);\r\n            }\r\n            return false;\r\n          },\r\n          moveDelete: function (player) {\r\n            this.fixed = true;\r\n            if (!this._listeningEnd || this._transitionEnded) {\r\n              this.moveTo(player);\r\n              var that = this;\r\n              setTimeout(function () {\r\n                that.delete();\r\n              }, 200);\r\n            }\r\n            else {\r\n              this._onEndMoveDelete = player;\r\n            }\r\n          },\r\n          moveTo: function (player) {\r\n            this.fixed = true;\r\n            var dx, dy;\r\n            if (this.classList.contains('center')) {\r\n              var nx = [50, -52];\r\n              var ny = [50, -52];\r\n              nx = nx[0] * ui.arena.offsetWidth / 100 + nx[1];\r\n              ny = ny[0] * ui.arena.offsetHeight / 100 + ny[1];\r\n              dx = player.getLeft() + player.offsetWidth / 2 - 52 - nx;\r\n              dy = player.getTop() + player.offsetHeight / 2 - 52 - ny;\r\n            }\r\n            else {\r\n              this.style.left = this.offsetLeft + 'px';\r\n              this.style.top = this.offsetTop + 'px';\r\n\r\n              dx = player.getLeft() + player.offsetWidth / 2 - 52 - this.offsetLeft;\r\n              dy = player.getTop() + player.offsetHeight / 2 - 52 - this.offsetTop;\r\n            }\r\n            if (get.is.mobileMe(player)) {\r\n              dx += get.cardOffset();\r\n              if (ui.arena.classList.contains('oblongcard')) {\r\n                dy -= 16;\r\n              }\r\n            }\r\n\r\n\r\n            if (this.style.transform && this.style.transform != 'none' && this.style.transform.indexOf('translate') == -1) {\r\n              this.style.transform += ' translate(' + dx + 'px,' + dy + 'px)';\r\n            }\r\n            else {\r\n              this.style.transform = 'translate(' + dx + 'px,' + dy + 'px)';\r\n            }\r\n            return this;\r\n          },\r\n          copy: function () {\r\n            var node = this.cloneNode(true);\r\n            node.style.transform = '';\r\n            node.name = this.name;\r\n            node.suit = this.suit;\r\n            node.number = this.number;\r\n            node.classList.remove('hidden');\r\n            node.classList.remove('start');\r\n            node.classList.remove('thrown');\r\n            node.classList.remove('selectable');\r\n            node.classList.remove('selected');\r\n            node.classList.remove('removing');\r\n            node.classList.remove('drawinghidden');\r\n            node.classList.remove('glows');\r\n            node.node = {\r\n              name: node.querySelector('.name'),\r\n              info: node.querySelector('.info'),\r\n              intro: node.querySelector('.intro'),\r\n              background: node.querySelector('.background'),\r\n              image: node.querySelector('.image'),\r\n              gaintag: node.querySelector('.gaintag'),\r\n            }\r\n            node.node.gaintag.innerHTML = '';\r\n            var clone = true;\r\n            var position;\r\n            for (var i = 0; i < arguments.length; i++) {\r\n              if (typeof arguments[i] == 'string') node.classList.add(arguments[i]);\r\n              else if (get.objtype(arguments[i]) == 'div') position = arguments[i];\r\n              else if (typeof arguments[i] == 'boolean') clone = arguments[i];\r\n            }\r\n            node.moveTo = lib.element.card.moveTo;\r\n            node.moveDelete = lib.element.card.moveDelete;\r\n            if (clone) this.clone = node;\r\n            if (position) position.appendChild(node);\r\n            return node;\r\n          },\r\n          uncheck: function (skill) {\r\n            if (skill) this._uncheck.add(skill);\r\n            this.classList.add('uncheck');\r\n          },\r\n          recheck: function (skill) {\r\n            if (skill) this._uncheck.remove(skill);\r\n            else this._uncheck.length = 0;\r\n            if (this._uncheck.length == 0) this.classList.remove('uncheck');\r\n          },\r\n          discard: function (bool) {\r\n            if (!this.destroyed) {\r\n              ui.discardPile.appendChild(this);\r\n            }\r\n            this.fix();\r\n            this.classList.remove('glow');\r\n            if (bool === false) {\r\n              ui.cardPile.insertBefore(this, ui.cardPile.childNodes[Math.floor(Math.random() * ui.cardPile.childNodes.length)]);\r\n            }\r\n            else {\r\n              if (_status.discarded) {\r\n                _status.discarded.add(this);\r\n              }\r\n            }\r\n          },\r\n          hasTag: function (tag) {\r\n            if (this.cardid && _status.cardtag && _status.cardtag[tag] && _status.cardtag[tag].contains(this.cardid)) {\r\n              return true;\r\n            }\r\n            return false;\r\n          },\r\n          /**\r\n           * 判断本卡牌是否在某角色的区域中\r\n           * @returns {!boolean}\r\n           */\r\n          hasPosition: function () {\r\n            return ['h', 'e', 'j'].contains(get.position(this));\r\n          },\r\n          /**\r\n           * 判断本卡牌是否在牌堆或弃牌堆中\r\n           * @returns {!boolean}\r\n           */\r\n          isInPile: function () {\r\n            return ['c', 'd'].contains(get.position(this));\r\n          }\r\n        },\r\n        /**\r\n         * 按钮方法\r\n         * @name element.button\r\n         * @type {!Object}\r\n         */\r\n        button: {\r\n          exclude: function () {\r\n            if (_status.event.excludeButton == undefined) {\r\n              _status.event.excludeButton = [];\r\n            }\r\n            _status.event.excludeButton.add(this);\r\n          }\r\n        },\r\n        /**\r\n         * 事件方法，游戏进行过程中每一个事件所具有的方法（比如设置事件内容【setContent】和停止事件【finish】）\r\n         * 事件\r\n         * @namespace\r\n         * @mixin\r\n         */\r\n        event: {\r\n          changeToZero: function () {\r\n            this.num = 0;\r\n            this.numFixed = true;\r\n          },\r\n          /**\r\n           * 结束事件\r\n           * @function\r\n           */\r\n          finish: function () {\r\n            this.finished = true;\r\n          },\r\n          /**\r\n           * 取消事件\r\n           * 直接结束事件，也跳过子事件的触发和执行\r\n           * @function\r\n           * @param {?boolean} all 见{@link lib.element.event.untrigger}\r\n           * @param {?GameCores.GameObjects.Player} player 见{@link lib.element.event.untrigger}\r\n           * @param {?string} notrigger 如果为'notrigger'则**不尝试触发**`${this.name}Cancelled`\r\n           */\r\n          cancel: function (arg1, arg2, notrigger) {\r\n            this.untrigger.call(this, arguments);//??\r\n            this.finish();\r\n            if (notrigger != 'notrigger') {\r\n              this.trigger(this.name + 'Cancelled');\r\n              if (this.player && lib.phaseName.contains(this.name)) this.player.getHistory('skipped').add(this.name)\r\n            }\r\n          },\r\n          /**\r\n           * 转移状态\r\n           * @function\r\n           * @param {!number} step 新状态\r\n           */\r\n          goto: function (step) {\r\n            this.step = step - 1;\r\n          },\r\n          /**\r\n           * 自环(循环)\r\n           * @function\r\n           */\r\n          redo: function () {\r\n            this.step--;\r\n          },\r\n          setHiddenSkill: function (skill) {\r\n            if (!this.player) return this;\r\n            var hidden = this.player.hiddenSkills.slice(0);\r\n            game.expandSkills(hidden);\r\n            if (hidden.contains(skill)) this.set('hsskill', skill);\r\n            return this;\r\n          },\r\n          /**\r\n           * 链式函数，为Event的属性赋值\r\n           * 赋值`this[key] = value`，同时绑定`this._set.push([key, value])`\r\n           * @function lib.element.event.set\r\n           * @param {!string} key 键名\r\n           * @param {?Object} value 键值\r\n           * @returns {GameCores.GameObjects.Event} this self\r\n           */\r\n          /**\r\n           * 为Event的属性赋值\r\n           * 对每个键值对，调用{@link lib.element.event.set}绑定到Event上\r\n           * @function lib.element.event.set\r\n           * @variation 2\r\n           * @param {!Array<Array>} pairs 要设置键值对数组\r\n           * @param {!string} pairs[].'[0]' 键名\r\n           * @param {?Object} pairs[].'[1]' 键值\r\n           */\r\n          set: function (key, value) {\r\n            if (arguments.length == 1 && Array.isArray(arguments[0])) {\r\n              for (var i = 0; i < arguments[0].length; i++) {\r\n                if (Array.isArray(arguments[0][i])) {\r\n                  this.set(arguments[0][i][0], arguments[0][i][1]);\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (typeof key != 'string') {\r\n                console.log('warning: using non-string object as Evt key');\r\n                console.log(key, value);\r\n                console.log(_status.event);\r\n              }\r\n              this[key] = value;\r\n              this._set.push([key, value]);\r\n            }\r\n            return this;\r\n          },\r\n          /**\r\n           * 设置事件的状态机\r\n           * @function\r\n           * @param {?GameCores.Bases.StateMachine} stateMachine 状态机，如果未指定则不设置\r\n           * @returns {GameCores.Bases.Event} this self\r\n           */\r\n          /**\r\n           * 设置事件的状态机\r\n           * @param {?string} name 状态机名，使用`lib.element.content[name]`作为事件的状态机，见{@link lib.element.content}\r\n           * @returns {GameCores.Bases.Event} this self\r\n           */\r\n          setContent: function (name) {\r\n            if (typeof name == 'function' || Array.isArray(name)) {\r\n              this.content = lib.init.parse(name);\r\n            }\r\n            else {\r\n              if (!lib.element.content[name]) console.log(name)\r\n              if (!lib.element.content[name]._parsed) {\r\n                lib.element.content[name] = lib.init.parse(lib.element.content[name]);\r\n                lib.element.content[name]._parsed = true;\r\n              }\r\n              this.content = lib.element.content[name];\r\n            }\r\n            return this;\r\n          },\r\n          getLogv: function () {\r\n            for (var i = 1; i <= 3; i++) {\r\n              var Evt = this.getParent(i);\r\n              if (Evt && Evt.logvid) return Evt.logvid;\r\n            }\r\n            return null;\r\n          },\r\n          send: function () {\r\n            this.player.send(function (name, args, set, Evt, skills) {\r\n              game.me.applySkills(skills);\r\n              var next = game.me[name].apply(game.me, args);\r\n              for (var i = 0; i < set.length; i++) {\r\n                next.set(set[i][0], set[i][1]);\r\n              }\r\n              if (next._backupevent) {\r\n                next.backup(next._backupevent);\r\n              }\r\n              next._modparent = Evt;\r\n              game.resume();\r\n            }, this.name, this._args || [], this._set,\r\n              get.stringifiedResult(this.parent, 3), get.skillState(this.player));\r\n            this.player.wait();\r\n            game.pause();\r\n          },\r\n          /**\r\n           * 选择结束，清空事件的选择(card，target, skill)\r\n           */\r\n          resume: function () {\r\n            delete this._cardChoice;\r\n            delete this._targetChoice;\r\n            delete this._skillChoice;\r\n          },\r\n          /**\r\n           * 获取本事件的指定父事件\r\n           * @function\r\n           * @param {(string|number)} [level] 指定父事件的名称 | 为number值时表示重复取level次_parent\r\n           * @param {?boolean} [forced] 为true表示强制返回：获取不到指定父事件时返回{null}\r\n           * @returns {?GameCores.Bases.Event} 通过_parent（_modparent）属性获取本事件的父事件，若父事件不满足要求或重复次数少于level，则取父事件的_parent，依此类推直至获取到满足条件的父事件\r\n           */\r\n          getParent: function (level, forced) {\r\n            var parent;\r\n            if (this._modparent && game.online) {\r\n              parent = this._modparent;\r\n            }\r\n            else {\r\n              parent = this.parent;\r\n            }\r\n            var toreturn = {};\r\n            if (typeof level == 'string' && forced == true) {\r\n              toreturn = null;\r\n            }\r\n            if (!parent) return toreturn;\r\n            if (typeof level == 'number') {\r\n              for (var i = 1; i < level; i++) {\r\n                if (!parent) return toreturn;\r\n                parent = parent.parent;\r\n              }\r\n            }\r\n            else if (typeof level == 'string') {\r\n              for (var i = 0; i < 20; i++) {\r\n                if (!parent) return toreturn;\r\n                if (parent.name == level) return parent;\r\n                parent = parent.parent;\r\n              }\r\n              if (!parent) return toreturn;\r\n            }\r\n            if (toreturn === null) {\r\n              return null;\r\n            }\r\n            return parent;\r\n          },\r\n          /**\r\n           * 获取本事件的触发事件\r\n           * @function\r\n           * @returns {?GameCores.Bases.Event} 本事件的触发事件，如果本事件没有触发事件，返回undefined/null\r\n           */\r\n          getTrigger: function () {\r\n            return this.getParent()._trigger;\r\n          },\r\n          /**\r\n           * 返回本事件的随机值，如果已经有随机值就返回之前的随机值；未调用该函数时，随机值`this._rand`默认未指定(undefined)\r\n           * @returns {!number} this._rand\r\n           */\r\n          getRand: function (name) {\r\n            if (name) {\r\n              if (!this._rand_map) this._rand_map = {};\r\n              if (!this._rand_map[name]) this._rand_map[name] = Math.random();\r\n              return this._rand_map[name];\r\n            }\r\n            if (!this._rand) this._rand = Math.random();\r\n            return this._rand;\r\n          },\r\n          /**\r\n           * 创建不可触发的`${this.name}Inserted`事件，立即执行\r\n           * @function\r\n           * @param {?GameCores.Bases.StateMachine} stateMachine 状态机\r\n           * @param {?Object<string, Object>} map 键值对对象\r\n           * @returns {!GameCores.Bases.Event} 创建的事件\r\n           */\r\n          insert: function (func, map) {\r\n            var next = game.createEvent(this.name + 'Inserted', false, this);\r\n            next.setContent(func);\r\n            for (var i in map) {\r\n              next.set(i, map[i]);\r\n            }\r\n            return next;\r\n          },\r\n          /**\r\n           * 创建不可触发的`${this.name}Inserted`事件，于本事件结算后执行\r\n           * @function\r\n           * @param {?GameCores.Bases.StateMachine} stateMachine 状态机\r\n           * @param {?Object<string, Object>} map 键值对对象\r\n           * @returns {!GameCores.Bases.Event} 创建的事件\r\n           */\r\n          insertAfter: function (func, map) {\r\n            var next = game.createEvent(this.name + 'Inserted', false, { next: [] });\r\n            this.after.push(next);\r\n            next.setContent(func);\r\n            for (var i in map) {\r\n              next.set(i, map[i]);\r\n            }\r\n            return next;\r\n          },\r\n          /**\r\n           * 备份\r\n           * @function\r\n           * @param {?string} skill 技能ID\r\n           */\r\n          backup: function (skill) {\r\n            this._backup = {\r\n              filterButton: this.filterButton,\r\n              selectButton: this.selectButton,\r\n              filterTarget: this.filterTarget,\r\n              selectTarget: this.selectTarget,\r\n              filterCard: this.filterCard,\r\n              selectCard: this.selectCard,\r\n              position: this.position,\r\n              forced: this.forced,\r\n              fakeforce: this.fakeforce,\r\n              _aiexclude: this._aiexclude,\r\n              complexSelect: this.complexSelect,\r\n              complexCard: this.complexCard,\r\n              complexTarget: this.complexTarget,\r\n              _cardChoice: this._cardChoice,\r\n              _targetChoice: this._targetChoice,\r\n              _skillChoice: this._skillChoice,\r\n              ai1: this.ai1,\r\n              ai2: this.ai2,\r\n            }\r\n            if (skill) {\r\n              var info = get.info(skill);\r\n              this.skill = skill;\r\n              this._aiexclude = [];\r\n              if (typeof info.viewAs == 'function') {\r\n                if (info.filterButton != undefined) this.filterButton = get.filter(info.filterButton);\r\n                if (info.selectButton != undefined) this.selectButton = info.selectButton;\r\n                if (info.filterTarget != undefined) this.filterTarget = get.filter(info.filterTarget);\r\n                if (info.selectTarget != undefined) this.selectTarget = info.selectTarget;\r\n                if (info.filterCard != undefined) {\r\n                  if (info.ignoreMod) this.ignoreMod = true;\r\n                  this.filterCard2 = get.filter(info.filterCard);\r\n                  this.filterCard = function (card, player, Evt) {\r\n                    var evt = Evt || _status.event;\r\n                    if (!evt.ignoreMod && player) {\r\n                      var mod = game.checkMod(card, player, 'unchanged', 'cardEnabled2', player);\r\n                      if (mod != 'unchanged') return mod;\r\n                      if (evt._backup && evt._backup.filterCard) {\r\n                        var cardx2 = lib.skill[evt.skill].viewAs(ui.selected.cards.concat([card]), player);\r\n                        if (get.is.object(cardx2)) {\r\n                          var cardx = get.autoViewAs(cardx2, ui.selected.cards.concat([card]));\r\n                          if (!get.filter(evt._backup.filterCard)(cardx, player, evt)) return false;\r\n                        }\r\n                      }\r\n                    }\r\n                    return get.filter(evt.filterCard2).apply(this, arguments);\r\n                  };\r\n                }\r\n                if (info.selectCard != undefined) this.selectCard = info.selectCard;\r\n                if (info.position != undefined) this.position = info.position;\r\n                if (info.forced != undefined) this.forced = info.forced;\r\n                if (info.complexSelect != undefined) this.complexSelect = info.complexSelect;\r\n                if (info.complexCard != undefined) this.complexCard = info.complexCard;\r\n                if (info.complexTarget != undefined) this.complexTarget = info.complexTarget;\r\n                if (info.ai1 != undefined) this.ai1 = info.ai1;\r\n                if (info.ai2 != undefined) this.ai2 = info.ai2;\r\n              }\r\n              else if (info.viewAs) {\r\n                if (info.filterButton != undefined) this.filterButton = get.filter(info.filterButton);\r\n                if (info.selectButton != undefined) this.selectButton = info.selectButton;\r\n                if (info.filterTarget != undefined) this.filterTarget = get.filter(info.filterTarget);\r\n                if (info.selectTarget != undefined) this.selectTarget = info.selectTarget;\r\n                if (info.filterCard != undefined) {\r\n                  if (info.ignoreMod) this.ignoreMod = true;\r\n                  this.filterCard2 = get.filter(info.filterCard);\r\n                  this.filterCard = function (card, player, Evt) {\r\n                    var evt = Evt || _status.event;\r\n                    if (!evt.ignoreMod && player) {\r\n                      var mod = game.checkMod(card, player, 'unchanged', 'cardEnabled2', player);\r\n                      if (mod != 'unchanged') return mod;\r\n                      if (evt._backup && evt._backup.filterCard) {\r\n                        var cardx = get.autoViewAs(lib.skill[evt.skill].viewAs, ui.selected.cards.concat([card]));\r\n                        if (!get.filter(evt._backup.filterCard)(cardx, player, evt)) return false;\r\n                      };\r\n                    }\r\n                    return get.filter(evt.filterCard2).apply(this, arguments);\r\n                  };\r\n                }\r\n                if (info.selectCard != undefined) this.selectCard = info.selectCard;\r\n                if (info.position != undefined) this.position = info.position;\r\n                if (info.forced != undefined) this.forced = info.forced;\r\n                if (info.complexSelect != undefined) this.complexSelect = info.complexSelect;\r\n                if (info.complexCard != undefined) this.complexCard = info.complexCard;\r\n                if (info.complexTarget != undefined) this.complexTarget = info.complexTarget;\r\n                if (info.ai1 != undefined) this.ai1 = info.ai1;\r\n                if (info.ai2 != undefined) this.ai2 = info.ai2;\r\n              }\r\n              else {\r\n                this.filterButton = info.filterButton ? get.filter(info.filterButton) : undefined;\r\n                this.selectButton = info.selectButton;\r\n                this.filterTarget = info.filterTarget ? get.filter(info.filterTarget) : undefined;\r\n                this.selectTarget = info.selectTarget;\r\n                this.filterCard = info.filterCard ? get.filter(info.filterCard) : undefined;\r\n                this.selectCard = info.selectCard;\r\n                this.position = info.position;\r\n                this.forced = info.forced;\r\n                this.complexSelect = info.complexSelect;\r\n                this.complexCard = info.complexCard;\r\n                this.complexTarget = info.complexTarget;\r\n                if (info.ai1 != undefined) this.ai1 = info.ai1;\r\n                if (info.ai2 != undefined) this.ai2 = info.ai2;\r\n              }\r\n              delete this.fakeforce;\r\n            }\r\n            delete this._cardChoice;\r\n            delete this._targetChoice;\r\n            delete this._skillChoice;\r\n          },\r\n          restore: function () {\r\n            if (this._backup) {\r\n              this.filterButton = this._backup.filterButton;\r\n              this.selectButton = this._backup.selectButton;\r\n              this.filterTarget = this._backup.filterTarget;\r\n              this.selectTarget = this._backup.selectTarget;\r\n              this.filterCard = this._backup.filterCard;\r\n              this.selectCard = this._backup.selectCard;\r\n              this.position = this._backup.position;\r\n              this.forced = this._backup.forced;\r\n              this.fakeforce = this._backup.fakeforce;\r\n              this._aiexclude = this._backup._aiexclude;\r\n              this.complexSelect = this._backup.complexSelect;\r\n              this.complexCard = this._backup.complexCard;\r\n              this.complexTarget = this._backup.complexTarget;\r\n              this.ai1 = this._backup.ai1;\r\n              this.ai2 = this._backup.ai2;\r\n              this._cardChoice = this._backup._cardChoice;\r\n              this._targetChoice = this._backup._targetChoice;\r\n              this._skillChoice = this._backup._skillChoice;\r\n            }\r\n            delete this.skill;\r\n            delete this.ignoreMod;\r\n            delete this.filterCard2;\r\n          },\r\n          isMine: function () {\r\n            return (this.player && this.player == game.me && !_status.auto && !this.player.isMad() && !game.notMe);\r\n          },\r\n          isOnline: function () {\r\n            return (this.player && this.player.isOnline());\r\n          },\r\n          notLink: function () {\r\n            return this.getParent().name != '_lianhuan' && this.getParent().name != '_lianhuan2';\r\n          },\r\n          isPhaseUsing: function (player) {\r\n            var evt = this.getParent('phaseUse');\r\n            if (!evt || evt.name != 'phaseUse') return false;\r\n            return !player || player == evt.player;\r\n          },\r\n          addTrigger: function (skill, player) {\r\n            if (!player) return;\r\n            var evt = this;\r\n            while (true) {\r\n              var evt = evt.getParent('arrangeTrigger');\r\n              if (!evt || evt.name != 'arrangeTrigger' || !evt.map) return;\r\n              if (typeof skill == 'string') skill = [skill];\r\n              game.expandSkills(skill);\r\n              var filter = function (content) {\r\n                if (typeof content == 'string') return content == triggername;\r\n                return content.contains(triggername);\r\n              };\r\n              var trigger = evt._trigger;\r\n              var triggername = evt.triggername;\r\n              var map = false;\r\n              if (evt.doing && evt.doing.player == player) map = evt.doing;\r\n              else {\r\n                for (var i = 0; i < evt.map.length; i++) {\r\n                  if (evt.map[i].player == player) { map = evt.map[i]; break; }\r\n                }\r\n              }\r\n              if (!map) return;\r\n              var func = function (skillx) {\r\n                var info = lib.skill[skillx];\r\n                var bool = false;\r\n                for (var i in info.trigger) {\r\n                  if (filter(info.trigger[i])) { bool = true; break }\r\n                }\r\n                if (!bool) return;\r\n                var priority = 0;\r\n                if (info.priority) {\r\n                  priority = info.priority * 100;\r\n                }\r\n                if (info.silent) {\r\n                  priority++;\r\n                }\r\n                if (info.equipSkill) priority -= 25;\r\n                if (info.cardSkill) priority -= 50;\r\n                if (info.ruleSkill) priority -= 75;\r\n                var toadd = [skillx, player, priority];\r\n                if (map.list2) {\r\n                  for (var i = 0; i < map.list2.length; i++) {\r\n                    if (map.list2[i][0] == toadd[0] && map.list2[i][1] == toadd[1]) return;\r\n                  }\r\n                };\r\n                for (var i = 0; i < map.list.length; i++) {\r\n                  if (map.list[i][0] == toadd[0] && map.list[i][1] == toadd[1]) return;\r\n                }\r\n                map.list.add(toadd);\r\n                map.list.sort(function (a, b) {\r\n                  return b[2] - a[2];\r\n                });\r\n              }\r\n              for (var j = 0; j < skill.length; j++) {\r\n                func(skill[j]);\r\n              }\r\n            }\r\n          },\r\n          /**\r\n           * 尝试触发子事件\r\n           * @param {!string} name trigger name\r\n           */\r\n          trigger: function (name) {\r\n            //??\r\n            if (_status.video) return;\r\n            //如果是游戏开始前，分发手牌时，一切因获得/失去牌而触发的技能不会触发\r\n            if ((this.name === 'gain' || this.name === 'lose') && !_status.gameDrawed) return;\r\n            //分发手牌结束 [recommend] why here//??\r\n            /**\r\n             * 如果为true，表示游戏开始前分发手牌结束；如果未指定，则游戏未开始且手牌没有分发完成\r\n             * @name _status.gameDrawed\r\n             * @type {?true}\r\n             */\r\n            if (name === 'gameDrawEnd') _status.gameDrawed = true;\r\n            if (name === 'gameStart') {\r\n              if (_status.brawl && _status.brawl.gameStart) {\r\n                _status.brawl.gameStart();\r\n              }\r\n              if (lib.config.show_cardpile) {\r\n                ui.cardPileButton.style.display = '';\r\n              }\r\n              /**\r\n               * 如果为true，表示游戏已经开始；如果未指定，则游戏还在分发武将和手牌，尚未开始\r\n               * @name _status.gameStarted\r\n               * @type {?true}\r\n               */\r\n              _status.gameStarted = true;\r\n              game.showHistory();\r\n            }\r\n            //通过hookmap优化性能，但是hookmap不向下兼容；如果处于兼容模式，则忽略hookmap优化\r\n            if (!lib.hookmap[name] && !lib.config.compatiblemode) return;\r\n            //?? 是否需要判空?\r\n            if (!game.players || !game.players.length) return;\r\n            var Evt = this;\r\n            //?? 是否可以简化?\r\n            //??\r\n            var start = false;\r\n            var starts = [_status.currentPhase, Evt.source, Evt.player, game.me, game.players[0]];\r\n            for (var i = 0; i < starts.length; i++) {\r\n              if (get.itemtype(starts[i]) == 'player') {\r\n                start = starts[i]; break;\r\n              }\r\n            }\r\n            if (!start) return;\r\n            //确保start角色在游戏之中\r\n            if (!game.players.contains(start)) {\r\n              start = game.findNext(start);\r\n            }\r\n            var list = [];\r\n            var list2 = [];\r\n            var mapx = [];\r\n            var allbool = false;\r\n            var roles = ['player', 'source', 'target'];\r\n            var listAdded;\r\n            var mapxx;\r\n            var addList = function (skill, player) {\r\n              if (listAdded[skill]) return;\r\n              if (player.forbiddenSkills[skill]) return;\r\n              if (player.disabledSkills[skill]) return;\r\n              listAdded[skill] = true;\r\n              var info = lib.skill[skill];\r\n              var num = 0;\r\n              if (info.priority) {\r\n                num = info.priority * 100;\r\n              }\r\n              if (info.silent) {\r\n                num++;\r\n              }\r\n              if (info.equipSkill) num -= 30;\r\n              if (info.ruleSkill) num -= 30;\r\n              if (info.firstDo) {\r\n                list.push([skill, player, num]);\r\n                list.sort(function (a, b) {\r\n                  return b[2] - a[2];\r\n                });\r\n                allbool = true;\r\n                return;\r\n              }\r\n              else if (info.lastDo) {\r\n                list2.push([skill, player, num]);\r\n                list2.sort(function (a, b) {\r\n                  return b[2] - a[2];\r\n                });\r\n                allbool = true;\r\n                return;\r\n              }\r\n              mapxx.list.push([skill, player, num]);\r\n              mapxx.list.sort(function (a, b) {\r\n                return b[2] - a[2];\r\n              });\r\n              allbool = true;\r\n            };\r\n            var totalPopulation = game.players.length + game.dead.length + 1;\r\n            var player = start;\r\n            var globalskill = 'global_' + name;\r\n            var map = _status.connectMode ? lib.playerOL : game.playerMap;\r\n            for (var iwhile = 0; iwhile < totalPopulation; iwhile++) {\r\n              var id = player.playerid;\r\n              var mapxx = {\r\n                player: player,\r\n                list: [],\r\n                list2: [],\r\n              };\r\n              listAdded = {};\r\n              var notemp = player.skills.slice(0);\r\n              for (var j in player.additionalSkills) {\r\n                if (j.indexOf('hidden:') != 0) notemp.addArray(player.additionalSkills[j]);\r\n              }\r\n              for (var j in player.tempSkills) {\r\n                if (notemp.contains(j)) return;\r\n                var expire = player.tempSkills[j];\r\n                if (expire === name ||\r\n                  (Array.isArray(expire) && expire.contains(name)) ||\r\n                  (typeof expire === 'function' && expire(Evt, player, name))) {\r\n                  delete player.tempSkills[j];\r\n                  player.removeSkill(j);\r\n                }\r\n                else if (get.objtype(expire) === 'object') {\r\n                  for (var i = 0; i < roles.length; i++) {\r\n                    if (expire[roles[i]] && player === Evt[roles[i]] &&\r\n                      (expire[roles[i]] === name || (Array.isArray(expire[roles[i]]) && expire[roles[i]].contains(name)))) {\r\n                      delete player.tempSkills[j];\r\n                      player.removeSkill(j);\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              if (lib.config.compatiblemode) {\r\n                (function () {\r\n                  var skills = player.getSkills(true).concat(lib.skill.global);\r\n                  game.expandSkills(skills);\r\n                  for (var i = 0; i < skills.length; i++) {\r\n                    var info = get.info(skills[i]);\r\n                    if (info && info.trigger) {\r\n                      var trigger = info.trigger;\r\n                      var add = false;\r\n                      if (trigger.player) {\r\n                        if (typeof trigger.player === 'string') {\r\n                          if (trigger.player === name) add = true;\r\n                        }\r\n                        else if (trigger.player.contains(name)) add = true;\r\n                      }\r\n                      if (trigger.target) {\r\n                        if (typeof trigger.target === 'string') {\r\n                          if (trigger.target === name) add = true;\r\n                        }\r\n                        else if (trigger.target.contains(name)) add = true;\r\n                      }\r\n                      if (trigger.source) {\r\n                        if (typeof trigger.source === 'string') {\r\n                          if (trigger.source === name) add = true;\r\n                        }\r\n                        else if (trigger.source.contains(name)) add = true;\r\n                      }\r\n                      if (trigger.global) {\r\n                        if (typeof trigger.global === 'string') {\r\n                          if (trigger.global === name) add = true;\r\n                        }\r\n                        else if (trigger.global.contains(name)) add = true;\r\n                      }\r\n                      if (add) {\r\n                        addList(skills[i], player);\r\n                      }\r\n                    }\r\n                  }\r\n                }());\r\n              }\r\n              else {\r\n                for (var i = 0; i < roles.length; i++) {\r\n                  var triggername = player.playerid + '_' + roles[i] + '_' + name;\r\n                  if (lib.hook[triggername]) {\r\n                    for (var j = 0; j < lib.hook[triggername].length; j++) {\r\n                      addList(lib.hook[triggername][j], player);\r\n                    }\r\n                  }\r\n                  triggername = roles[i] + '_' + name;\r\n                  if (lib.hook.globalskill[triggername]) {\r\n                    for (var j = 0; j < lib.hook.globalskill[triggername].length; j++) {\r\n                      addList(lib.hook.globalskill[triggername][j], player);\r\n                    }\r\n                  }\r\n                }\r\n                if (lib.hook.globalskill[globalskill]) {\r\n                  for (var j = 0; j < lib.hook.globalskill[globalskill].length; j++) {\r\n                    addList(lib.hook.globalskill[globalskill][j], player);\r\n                  }\r\n                }\r\n                for (var i in lib.hook.globaltrigger[name]) {\r\n                  if (map[i] === player) {\r\n                    for (var j = 0; j < lib.hook.globaltrigger[name][i].length; j++) {\r\n                      addList(lib.hook.globaltrigger[name][i][j], map[i]);\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              mapx.push(mapxx);\r\n              player = player.nextSeat;\r\n              if (!player || player === start) {\r\n                break;\r\n              }\r\n            }\r\n\r\n            if (allbool) {\r\n              var next = game.createEvent('arrangeTrigger', false, Evt);\r\n              next.setContent('arrangeTrigger');\r\n              next.list = list;\r\n              next.list2 = list2;\r\n              next.map = mapx;\r\n              next._trigger = Evt;\r\n              next.triggername = name;\r\n              //next.starter=start;\r\n              Evt._triggering = next;\r\n            }\r\n          },\r\n          /**\r\n           * 取消将要触发的子事件；如果无参调用，不进行任何处理\r\n           * @function\r\n           * @param {?boolean} all 如果为true，取消全部要触发的子事件；如果未指定或为false，忽略该值\r\n           * @param {?GameCores.GameObjects.Player} player 一个角色，取消所有将要对该角色触发的子事件，如果未指定，忽略该值\r\n           */\r\n          untrigger: function (all, player) {\r\n            var evt = this._triggering;\r\n            if (all) {\r\n              if (evt && evt.map) {\r\n                for (var i = 0; i < evt.map.length; i++) {\r\n                  evt.map[i].list = [];\r\n                }\r\n                evt.list = [];\r\n                if (evt.doing) evt.doing.list = [];\r\n              };\r\n              this._triggered = 5;\r\n            }\r\n            else {\r\n              if (player) {\r\n                this._notrigger.add(player);\r\n                if (!evt || !evt.map) return;\r\n                for (var i = 0; i < evt.map.length; i++) {\r\n                  if (evt.map[i].player == player) evt.map[i].list.length = 0;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        },\r\n        /**\r\n         * 弹窗方法，.dialog节点共用的方法（比如开启和关闭弹窗【open/close】）\r\n         * 对话框(弹窗)\r\n         * @name element.dialog\r\n         * @type {!Object}\r\n         */\r\n        dialog: {\r\n          add: function (item, noclick, zoom) {\r\n            if (typeof item == 'string') {\r\n              if (item.indexOf('###') == 0) {\r\n                var items = item.slice(3).split('###');\r\n                this.add(items[0], noclick, zoom);\r\n                this.addText(items[1], items[1].length <= 20, zoom);\r\n              }\r\n              else if (noclick) {\r\n                var strstr = item;\r\n                item = ui.create.div('', this.content);\r\n                item.innerHTML = strstr;\r\n              }\r\n              else {\r\n                item = ui.create.caption(item, this.content);\r\n              }\r\n            }\r\n            else if (get.objtype(item) == 'div') {\r\n              this.content.appendChild(item);\r\n            }\r\n            else if (get.itemtype(item) == 'cards') {\r\n              var buttons = ui.create.div('.buttons', this.content);\r\n              if (zoom) buttons.classList.add('smallzoom');\r\n              this.buttons = this.buttons.concat(ui.create.buttons(item, 'card', buttons, noclick));\r\n            }\r\n            else if (get.itemtype(item) == 'players') {\r\n              var buttons = ui.create.div('.buttons', this.content);\r\n              if (zoom) buttons.classList.add('smallzoom');\r\n              this.buttons = this.buttons.concat(ui.create.buttons(item, 'player', buttons, noclick));\r\n            }\r\n            else {\r\n              var buttons = ui.create.div('.buttons', this.content);\r\n              if (zoom) buttons.classList.add('smallzoom');\r\n              this.buttons = this.buttons.concat(ui.create.buttons(item[0], item[1], buttons, noclick));\r\n            }\r\n            if (this.buttons.length) {\r\n              if (this.forcebutton !== false) this.forcebutton = true;\r\n              if (this.buttons.length > 3 || (zoom && this.buttons.length > 5)) {\r\n                this.classList.remove('forcebutton-auto');\r\n              }\r\n              else if (!this.noforcebutton) {\r\n                this.classList.add('forcebutton-auto');\r\n              }\r\n            }\r\n            ui.update();\r\n            return item;\r\n          },\r\n          addText: function (str, center) {\r\n            if (center !== false) {\r\n              this.add('<div class=\"text center\">' + str + '</div>');\r\n            }\r\n            else {\r\n              this.add('<div class=\"text\">' + str + '</div>');\r\n            }\r\n            return this;\r\n          },\r\n          addSmall: function (item, noclick) {\r\n            return this.add(item, noclick, true);\r\n          },\r\n          addAuto: function (content) {\r\n            if (content && content.length > 4 && !this._hovercustomed) {\r\n              this.addSmall(content);\r\n            }\r\n            else {\r\n              this.add(content);\r\n            }\r\n          },\r\n          open: function () {\r\n            if (this.noopen) return;\r\n            for (var i = 0; i < ui.dialogs.length; i++) {\r\n              if (ui.dialogs[i] == this) {\r\n                this.show();\r\n                this.refocus();\r\n                ui.dialogs.remove(this);\r\n                ui.dialogs.unshift(this);\r\n                ui.update();\r\n                return this;\r\n              }\r\n              if (ui.dialogs[i].static) ui.dialogs[i].unfocus();\r\n              else ui.dialogs[i].hide();\r\n            }\r\n            ui.dialog = this;\r\n            var translate;\r\n            if (lib.config.remember_dialog && lib.config.dialog_transform && !this.classList.contains('fixed')) {\r\n              translate = lib.config.dialog_transform;\r\n              this._dragtransform = translate;\r\n              this.style.transform = 'translate(' + translate[0] + 'px,' + translate[1] + 'px) scale(0.8)';\r\n            }\r\n            else {\r\n              this.style.transform = 'scale(0.8)';\r\n            }\r\n            this.style.transitionProperty = 'opacity,transform';\r\n            this.style.opacity = 0;\r\n            ui.arena.appendChild(this);\r\n            ui.dialogs.unshift(this);\r\n            ui.update();\r\n            ui.refresh(this);\r\n            if (lib.config.remember_dialog && lib.config.dialog_transform && !this.classList.contains('fixed')) {\r\n              this.style.transform = 'translate(' + translate[0] + 'px,' + translate[1] + 'px) scale(1)';\r\n            }\r\n            else {\r\n              this.style.transform = 'scale(1)';\r\n            }\r\n            this.style.opacity = 1;\r\n            var that = this;\r\n            setTimeout(function () {\r\n              that.style.transitionProperty = '';\r\n            }, 500);\r\n            return this;\r\n          },\r\n          close: function () {\r\n            ui.dialogs.remove(this);\r\n            this.delete();\r\n            if (ui.dialogs.length > 0) {\r\n              ui.dialog = ui.dialogs[0];\r\n              ui.dialog.show();\r\n              ui.dialog.refocus();\r\n              ui.update();\r\n            }\r\n            // if(ui.arenalog){\r\n            //     ui.arenalog.classList.remove('withdialog');\r\n            // }\r\n            return this;\r\n          },\r\n          setCaption: function (str) {\r\n            this.querySelector('.caption').innerHTML = str;\r\n            return this;\r\n          }\r\n        },\r\n        /**\r\n         * 选项方法，参考弹窗方法，在创建.control节点时依次为其添加\r\n         * 选择项\r\n         * @name element.control\r\n         * @type {!Object}\r\n         */\r\n        control: {\r\n          open: function () {\r\n            ui.control.insertBefore(this, _status.createControl || ui.confirm);\r\n            ui.controls.unshift(this);\r\n            if (this.childNodes.length) {\r\n              this.style.transition = 'opacity 0.5s';\r\n              ui.refresh(this);\r\n              this.style.transform = 'translateX(-' + (this.offsetWidth / 2) + 'px)';\r\n              this.style.opacity = 1;\r\n              ui.refresh(this);\r\n              this.style.transition = '';\r\n            }\r\n            else {\r\n              this.animate('controlpressdownx', 500);\r\n            }\r\n            ui.updatec();\r\n            return this;\r\n          },\r\n          add: function (item) {\r\n            var node = document.createElement('div');\r\n            this.appendChild(node);\r\n            node.link = item;\r\n            node.innerHTML = get.translation(item);\r\n            node.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.control);\r\n          },\r\n          close: function () {\r\n            this.animate('controlpressdownx', 500);\r\n\r\n            ui.controls.remove(this);\r\n            this.delete();\r\n\r\n            setTimeout(ui.updatec, 100);\r\n\r\n\r\n            if (ui.confirm == this) delete ui.confirm;\r\n            if (ui.skills == this) delete ui.skills;\r\n            if (ui.skills2 == this) delete ui.skills2;\r\n            if (ui.skills3 == this) delete ui.skills3;\r\n          },\r\n          replace: function () {\r\n            // this.animate('controlpressdownx',500);\r\n            if (this.replaceTransition === false) {\r\n              this.style.transitionProperty = 'none';\r\n              ui.refresh(this);\r\n            }\r\n\r\n            while (this.childNodes.length) this.firstChild.remove();\r\n            var i, controls;\r\n            if (Array.isArray(arguments[0])) controls = arguments[0];\r\n            else controls = arguments;\r\n            delete this.custom;\r\n            for (i = 0; i < controls.length; i++) {\r\n              if (typeof controls[i] == 'function') {\r\n                this.custom = controls[i];\r\n              }\r\n              else {\r\n                this.add(controls[i]);\r\n              }\r\n            }\r\n            if (this.childNodes.length) {\r\n              var width = 0;\r\n              for (i = 0; i < this.childNodes.length; i++) width += this.childNodes[i].offsetWidth;\r\n              ui.refresh(this);\r\n              this.style.width = width + 'px';\r\n            }\r\n            ui.updatec();\r\n            if (this.replaceTransition === false) {\r\n              var that = this;\r\n              setTimeout(function () {\r\n                that.style.transitionProperty = '';\r\n              }, 200);\r\n            }\r\n            return this;\r\n          }\r\n        },\r\n        /**\r\n         * 客户端\r\n         * @name element.client\r\n         * @type {!Object}\r\n         */\r\n        client: {\r\n          send: function () {\r\n            if (this.closed) return this;\r\n            var args = Array.from(arguments);\r\n            if (typeof args[0] == 'function') {\r\n              args.unshift('exec');\r\n            }\r\n            for (var i = 1; i < args.length; i++) {\r\n              args[i] = get.stringifiedResult(args[i]);\r\n            }\r\n            try {\r\n              this.ws.send(JSON.stringify(args));\r\n            }\r\n            catch (e) {\r\n              this.ws.close();\r\n            }\r\n            return this;\r\n          },\r\n          close: function () {\r\n            lib.node.clients.remove(this);\r\n            lib.node.observing.remove(this);\r\n            if (ui.removeObserve && !lib.node.observing.length) {\r\n              ui.removeObserve.remove();\r\n              delete ui.removeObserve;\r\n            }\r\n            this.closed = true;\r\n            if (_status.waitingForPlayer) {\r\n              for (var i = 0; i < game.connectPlayers.length; i++) {\r\n                if (game.connectPlayers[i].playerid == this.id) {\r\n                  game.connectPlayers[i].uninitOL();\r\n                  delete game.connectPlayers[i].playerid;\r\n                }\r\n              }\r\n              if (game.onlinezhu == this.id) {\r\n                game.onlinezhu = null;\r\n              }\r\n              game.updateWaiting();\r\n            }\r\n            else if (lib.playerOL[this.id]) {\r\n              var player = lib.playerOL[this.id];\r\n              player.setNickname(player.nickname + ' - 离线');\r\n              game.broadcast(function (player) {\r\n                player.setNickname(player.nickname + ' - 离线');\r\n              }, player);\r\n              player.unwait('ai');\r\n            }\r\n\r\n            if (window.isNonameServer) {\r\n              document.querySelector('#server_count').innerHTML = lib.node.clients.length;\r\n            }\r\n            return this;\r\n          }\r\n        },\r\n        /**\r\n         * Node Web Server listeners and callbacks\r\n         * @name element.nodews\r\n         * @type {!Object}\r\n         */\r\n        nodews: {\r\n          send: function (message) {\r\n            game.send('server', 'send', this.wsid, message);\r\n          },\r\n          on: function (type, func) {\r\n            this['on' + type] = func;\r\n          },\r\n          close: function () {\r\n            game.send('server', 'close', this.wsid);\r\n          }\r\n        },\r\n        /**\r\n         * Web Server\r\n         * @name element.ws\r\n         * @type {!Object}\r\n         */\r\n        ws: {\r\n          onopen: function () {\r\n            if (_status.connectCallback) {\r\n              _status.connectCallback(true);\r\n              delete _status.connectCallback;\r\n            }\r\n          },\r\n          onmessage: function (messageevent) {\r\n            if (messageevent.data == 'heartbeat') {\r\n              this.send('heartbeat');\r\n              return;\r\n            }\r\n            var message;\r\n            try {\r\n              message = JSON.parse(messageevent.data);\r\n              if (!Array.isArray(message) ||\r\n                typeof lib.message.client[message[0]] !== 'function') {\r\n                throw ('err');\r\n              }\r\n              for (var i = 1; i < message.length; i++) {\r\n                message[i] = get.parsedResult(message[i]);\r\n              }\r\n            }\r\n            catch (e) {\r\n              console.log(e);\r\n              console.log('invalid message: ' + messageevent.data);\r\n              return;\r\n            }\r\n            lib.message.client[message.shift()].apply(null, message);\r\n          },\r\n          onerror: function (e) {\r\n            if (this._nocallback) return;\r\n            if (_status.connectCallback) {\r\n              _status.connectCallback(false);\r\n              delete _status.connectCallback;\r\n            }\r\n            else {\r\n              alert('连接失败');\r\n            }\r\n          },\r\n          onclose: function () {\r\n            if (this._nocallback) return;\r\n            if (_status.connectCallback) {\r\n              _status.connectCallback(false);\r\n              delete _status.connectCallback;\r\n            }\r\n            if (game.online || game.onlineroom) {\r\n              if ((game.servermode || game.onlinehall) && _status.over) {\r\n\r\n              }\r\n              else {\r\n                localStorage.setItem(lib.configprefix + 'directstart', true);\r\n                game.reload();\r\n              }\r\n            }\r\n            else {\r\n              // game.saveConfig('reconnect_info');\r\n            }\r\n            game.online = false;\r\n            game.ws = null;\r\n          }\r\n        }\r\n      },\r\n      /**\r\n       * {@link GameCores}的公共技能组\r\n       * @namespace\r\n       */\r\n      skill: {\r\n        //升阶\r\n        _shengjie: {\r\n          enable: 'phaseUse',\r\n          usable: 1,\r\n          filter: function (Evt, player) {\r\n            return player.canShengjie(player.getCards('h'));\r\n          },\r\n          content: [function () {\r\n            player.chooseShengjie(player.getCards('h'))\r\n          }, function () {\r\n            if (result.bool) {\r\n              player.lose(result.cards, ui.discardPile, 'visible');\r\n              player.$throw(result.cards);\r\n              game.log(player, '将', result.cards, '置入了弃牌堆');\r\n              Evt.star = result.star;\r\n            }\r\n            if (!result.bool) {\r\n              var skill = player.getStat().skill;\r\n              skill._shengjie--;\r\n              if (typeof skill._shengjietried == 'number') {\r\n                skill._shengjietried++;\r\n              }\r\n              else {\r\n                skill._shengjietried = 1;\r\n              }\r\n            }\r\n          }, function () {\r\n            if (Evt.star) {\r\n              player.gain(Evt.star, 'gain2').gaintag.add('_shengjie');\r\n            }\r\n          }\r\n          ],\r\n          ai: {\r\n            basic: {\r\n              order: 6\r\n            },\r\n            result: {\r\n              player: function (player) {\r\n                if (player.getStat().skill._shengjietried >= 10) {\r\n                  return 0;\r\n                }\r\n                return 0;\r\n              }\r\n            }\r\n          }\r\n        },\r\n        //搬过来的应变\r\n        _yingbian: {\r\n          trigger: { player: 'useCard1' },\r\n          forced: true,\r\n          popup: false,\r\n          firstDo: true,\r\n          ruleSkill: true,\r\n          forceLoad: true,\r\n          filter: function (Evt, player) {\r\n            if (Evt.card.yingbian) return false;\r\n            var bool = player.hasSkillTag('forceYingbian');\r\n            var card = Evt.card;\r\n            if (get.cardtag(card, 'yingbian_kongchao') && (!player.countCards('h') || bool)) return true;\r\n            if (get.cardtag(card, 'yingbian_canqu') && (player.hp == 1 || bool)) return true;\r\n            if (get.cardtag(card, 'yingbian_fujia') && (player.isMaxHandcard() || bool)) return true;\r\n            if (get.cardtag(card, 'yingbian_zhuzhan')) return true;\r\n            return false;\r\n          },\r\n          content: [function () {\r\n            var card = trigger.card;\r\n            Evt.card = card;\r\n            var bool = false;\r\n            if (get.cardtag(card, 'yingbian_kongchao') && !player.countCards('h')) {\r\n              player.popup('空巢', 'soil');\r\n              bool = true;\r\n            }\r\n            else if (get.cardtag(card, 'yingbian_canqu') && player.hp == 1) {\r\n              player.popup('残躯', 'fire');\r\n              bool = true;\r\n            }\r\n            else if (get.cardtag(card, 'yingbian_fujia') && player.isMaxHandcard()) {\r\n              player.popup('富甲', 'orange');\r\n              bool = true;\r\n            }\r\n            else if (player.hasSkillTag('forceYingbian')) {\r\n              player.popup('应变', 'metal');\r\n              bool = true;\r\n            }\r\n            if (bool) {\r\n              game.log(player, '触发了', card, '的应变条件');\r\n              Evt.goto(10);\r\n            }\r\n          }, function () {\r\n            Evt._global_waiting = true;\r\n            Evt.send = function (player, card, source, targets, id, id2, skillState) {\r\n              if (skillState) {\r\n                player.applySkills(skillState);\r\n              }\r\n              var type = get.type2(card);\r\n              var str = get.translation(source);\r\n              if (targets && targets.length) {\r\n                str += '对';\r\n                str += get.translation(targets);\r\n              }\r\n              str += '使用了';\r\n              var next = player.chooseCard({\r\n                filterCard: function (card) {\r\n                  return get.type2(card) == type && lib.filter.cardDiscardable.apply(this, arguments);\r\n                },\r\n                prompt: str += (get.translation(card) + '，是否弃置一张' + get.translation(type) + '为其助战？'),\r\n                position: 'h',\r\n                _global_waiting: true,\r\n                id: id,\r\n                id2: id2,\r\n                ai: function (cardx) {\r\n                  var info = get.info(card);\r\n                  if (info && info.ai && info.ai.yingbian) {\r\n                    var ai = info.ai.yingbian(card, source, targets, player);\r\n                    if (!ai) return 0;\r\n                    return ai - get.value(cardx);\r\n                  }\r\n                  else if (get.attitude(player, source) <= 0) return 0;\r\n                  return 5 - get.value(cardx);\r\n                },\r\n              });\r\n              if (game.online) {\r\n                _status.event._resultid = id;\r\n                game.resume();\r\n              }\r\n            };\r\n          }, function () {\r\n            var type = get.type2(card);\r\n            var list = game.filterPlayer(function (current) {\r\n              if (current == player) return false;\r\n              if (!current.countCards('h')) return false;\r\n              return _status.connectMode || current.countCards('h', function (cardx) {\r\n                return get.type2(cardx) == type;\r\n              })\r\n            });\r\n            Evt.list = list;\r\n            Evt.id = get.id();\r\n            list.sort(function (a, b) {\r\n              return get.distance(Evt.source, a, 'absolute') - get.distance(Evt.source, b, 'absolute');\r\n            });\r\n          }, function () {\r\n            if (Evt.list.length == 0) {\r\n              Evt.finish();\r\n              return;\r\n            }\r\n            else if (_status.connectMode && (Evt.list[0].isOnline() || Evt.list[0] == game.me)) {\r\n              Evt.goto(5);\r\n            }\r\n            else {\r\n              Evt.current = Evt.list.shift();\r\n              Evt.send(Evt.current, Evt.card, player, trigger.targets, Evt.id, trigger.parent.id);\r\n            }\r\n          }, function () {\r\n            if (result.bool) {\r\n              Evt.zhuzhanresult = Evt.current;\r\n              Evt.zhuzhanresult2 = result;\r\n              if (Evt.current != game.me) game.delayx();\r\n              Evt.goto(9);\r\n            }\r\n            else {\r\n              Evt.goto(3);\r\n            }\r\n          }, function () {\r\n            var id = Evt.id;\r\n            var sendback = function (result, player) {\r\n              if (result && result.id == id && !Evt.zhuzhanresult && result.bool) {\r\n                Evt.zhuzhanresult = player;\r\n                Evt.zhuzhanresult2 = result;\r\n                game.broadcast('cancel', id);\r\n                if (_status.event.id == id && _status.event.name == 'chooseCard' && _status.paused) {\r\n                  return (function () {\r\n                    Evt.resultOL = _status.event.resultOL;\r\n                    ui.click.cancel();\r\n                    if (ui.confirm) ui.confirm.close();\r\n                  });\r\n                }\r\n              }\r\n              else {\r\n                if (_status.event.id == id && _status.event.name == 'chooseCard' && _status.paused) {\r\n                  return (function () {\r\n                    Evt.resultOL = _status.event.resultOL;\r\n                  });\r\n                }\r\n              }\r\n            };\r\n\r\n            var withme = false;\r\n            var withol = false;\r\n            var list = Evt.list;\r\n            for (var i = 0; i < list.length; i++) {\r\n              if (list[i].isOnline()) {\r\n                withol = true;\r\n                list[i].wait(sendback);\r\n                list[i].send(Evt.send, list[i], Evt.card, player, trigger.targets, Evt.id, trigger.parent.id, get.skillState(list[i]));\r\n                list.splice(i--, 1);\r\n              }\r\n              else if (list[i] == game.me) {\r\n                withme = true;\r\n                Evt.send(list[i], Evt.card, player, trigger.targets, Evt.id, trigger.parent.id);\r\n                list.splice(i--, 1);\r\n              }\r\n            }\r\n            if (!withme) {\r\n              Evt.goto(7);\r\n            }\r\n            if (_status.connectMode) {\r\n              if (withme || withol) {\r\n                for (var i = 0; i < game.players.length; i++) {\r\n                  if (game.players[i] != player) game.players[i].showTimer();\r\n                }\r\n              }\r\n            }\r\n            Evt.withol = withol;\r\n          }, function () {\r\n            if (result && result.bool && !Evt.zhuzhanresult) {\r\n              game.broadcast('cancel', Evt.id);\r\n              Evt.zhuzhanresult = game.me;\r\n              Evt.zhuzhanresult2 = result;\r\n            }\r\n          }, function () {\r\n            if (Evt.withol && !Evt.resultOL) {\r\n              game.pause();\r\n            }\r\n          }, function () {\r\n            for (var i = 0; i < game.players.length; i++) {\r\n              game.players[i].hideTimer();\r\n            }\r\n          }, function () {\r\n            if (Evt.zhuzhanresult) {\r\n              var target = Evt.zhuzhanresult;\r\n              target.line(player, 'green');\r\n              target.discard(Evt.zhuzhanresult2.cards);\r\n              target.popup('助战', 'wood');\r\n              game.log(target, '响应了', player, '发起的助战');\r\n              target.addExpose(0.2);\r\n            }\r\n            else Evt.finish();\r\n          }, function () {\r\n            trigger.card.yingbian = true;\r\n            var info = get.info(trigger.card);\r\n            if (info && info.yingbian) info.yingbian(trigger);\r\n            player.addTempSkill('yingbian_changeTarget');\r\n          }],\r\n        },\r\n        yingbian_changeTarget: {\r\n          trigger: { player: 'useCard2' },\r\n          forced: true,\r\n          popup: false,\r\n          filter: function (Evt, player) {\r\n            if (Evt.yingbian_removeTarget && Evt.targets && Evt.targets.length > 1) return true;\r\n            if (!Evt.yingbian_addTarget) return false;\r\n            var info = get.info(Evt.card);\r\n            if (info.allowMultiple == false) return false;\r\n            if (Evt.targets && !info.multitarget) {\r\n              if (game.hasPlayer(function (current) {\r\n                return !Evt.targets.contains(current) && lib.filter.targetEnabled2(Evt.card, player, current) && lib.filter.targetInRange(Evt.card, player, current);\r\n              })) {\r\n                return true;\r\n              }\r\n            }\r\n            return false;\r\n          },\r\n          content: [function () {\r\n            if (trigger.yingbian_addTarget) player.chooseTarget('应变：是否为' + get.translation(trigger.card) + '增加一个目标？', function (card, player, target) {\r\n              var trigger = _status.event.getTrigger();\r\n              var card = trigger.card;\r\n              return !trigger.targets.contains(target) && lib.filter.targetEnabled2(card, player, target) && lib.filter.targetInRange(card, player, target);\r\n            }).set('ai', function (target) {\r\n              var player = _status.event.player;\r\n              var card = _status.event.getTrigger().card;\r\n              return get.effect(target, card, player, player);\r\n            });\r\n            else Evt.goto(2);\r\n          },\r\n          function () {\r\n            if (result.bool) {\r\n              var target = result.targets[0];\r\n              player.line(target, 'green');\r\n              game.log(player, '发动应变效果，令', target, '也成为了', trigger.card, '的目标');\r\n              trigger.targets.add(target);\r\n            }\r\n          },\r\n          function () {\r\n            if (trigger.yingbian_removeTarget && trigger.targets.length > 1) player.chooseTarget('应变：是否为' + get.translation(trigger.card) + '减少一个目标？', function (card, player, target) {\r\n              var trigger = _status.event.getTrigger();\r\n              return trigger.targets.contains(target);\r\n            }).set('ai', function (target) {\r\n              var player = _status.event.player;\r\n              var card = _status.event.getTrigger().card;\r\n              return -get.effect(target, card, player, player);\r\n            });\r\n            else Evt.finish();\r\n          },\r\n          function () {\r\n            if (result.bool) {\r\n              var target = result.targets[0];\r\n              player.line(target, 'green');\r\n              game.log(player, '发动应变效果，将', target, '从', trigger.card, '的目标中移除了');\r\n              trigger.targets.remove(target);\r\n            }\r\n          }],\r\n        },\r\n        //\r\n        _showHiddenCharacter: {\r\n          trigger: { player: ['changeHp', 'phaseBeginStart', 'loseMaxHpBegin'] },\r\n          firstDo: true,\r\n          forced: true,\r\n          popup: false,\r\n          priority: 25,\r\n          filter: function (Evt, player, name) {\r\n            return player.isUnseen(2) && get.mode() != 'guozhan';\r\n          },\r\n          content: function () {\r\n            player.showCharacter(2);\r\n            player.removeSkill('g_hidden_ai');\r\n          },\r\n        },\r\n        _kamisha: {\r\n          trigger: { source: 'damageBegin2' },\r\n          //forced:true,\r\n          popup: false,\r\n          prompt: function (Evt, player) {\r\n            return '是否防止即将对' + get.translation(Evt.player) + '造成的伤害，改为令其减少' + get.cnNumber(Evt.num) + '点体力上限？';\r\n          },\r\n          filter: function (Evt, player) {\r\n            return Evt.nature == 'kami' && Evt.num > 0;\r\n          },\r\n          ruleSkill: true,\r\n          check: function (Evt, player) {\r\n            var att = get.attitude(player, Evt.player);\r\n            if (Evt.player.hp == Evt.player.maxHp) return att < 0;\r\n            if (Evt.player.hp == Evt.player.maxHp - 1 &&\r\n              (Evt.player.maxHp <= 3 || Evt.player.hasSkillTag('maixie'))) return att < 0;\r\n            return att > 0;\r\n          },\r\n          content: function () {\r\n            trigger.cancel();\r\n            trigger.player.loseMaxHp(trigger.num).source = player;\r\n          },\r\n        },\r\n        //海洋伤害特性\r\n        _oceansha: {\r\n          trigger: { source: 'damageBegin4' },\r\n          forced: true,\r\n          priority: 7,\r\n          logTarget: 'player',\r\n          equipSkill: false,\r\n          ruleSkill: true,\r\n          filter: function (Evt, player) {\r\n            return Evt.nature == 'ocean' && Evt.num > 0 && Evt.player.hujia > 0;\r\n          },\r\n          ruleSkill: true,\r\n          content: function () {\r\n            trigger.num++;\r\n            trigger.oceanAddDam = true;\r\n          },\r\n        },\r\n        //暗影伤害特性\r\n        _yamisha: {\r\n          trigger: { player: 'useCardToPlayered' },\r\n          forced: true,\r\n          priority: 7,\r\n          logTarget: 'target',\r\n          equipSkill: false,\r\n          ruleSkill: true,\r\n          filter: function (Evt, player) {\r\n            return Evt.card.nature == 'yami' && Evt.target.countCards('h') > player.countCards('h');\r\n          },\r\n          ruleSkill: true,\r\n          content: function () {\r\n            trigger.getParent().directHit.add(trigger.target);\r\n            trigger.getParent().yamiDirect = true;\r\n          },\r\n        },\r\n        _yamisha2: {\r\n          trigger: { player: 'phaseJieshu' },\r\n          priority: 1,\r\n          popup: false,\r\n          forced: true,\r\n          ruleSkill: true,\r\n          filter: function (Evt, player) {\r\n            if (Evt.getParent().noyami) return false;\r\n            if (Evt.player.hasSkillTag('playernoyami', false, Evt)) return false;\r\n            return game.countPlayer(function (cur) {\r\n              return cur.hasYami();\r\n            })\r\n          },\r\n          content: [function () {\r\n            Evt.target = trigger.player;\r\n            Evt.state = true;\r\n            Evt._global_waiting = true;\r\n            Evt.filterCard = function (card, player) {\r\n              if (get.nature(card) != 'yami') return false;\r\n              return lib.filter.cardEnabled(card, player, 'forceEnable');\r\n            };\r\n            Evt.send = function (player, state, target, id, skillState) {\r\n              if (skillState) {\r\n                player.applySkills(skillState);\r\n              }\r\n              state = state ? 1 : -1;\r\n              var str = '';\r\n              if (target) {\r\n                str += '在' + get.translation(target);\r\n              }\r\n              str += '的结束阶段，是否对其使用暗影属性的牌？';\r\n\r\n              var next = player.chooseToUse({\r\n                filterCard: function (card, player) {\r\n                  if (get.nature(card) != 'yami') return false;\r\n                  return player.canUse(card, target, false);\r\n                },\r\n                filterTarget: target,\r\n                prompt: str,\r\n                type: 'yami',//\r\n                state: state,\r\n                _global_waiting: true,\r\n                ai1: function () {\r\n                  if (target) {\r\n                    var triggerevent = _status.event.getTrigger();\r\n                    if (triggerevent && triggerevent.parent &&\r\n                      triggerevent.parent.postAi &&\r\n                      triggerevent.player.isUnknown(_status.event.player)) {\r\n                      return 0;\r\n                    }\r\n                    if (Math.abs(get.attitude(_status.event.player, target)) < 0) return Math.random() - 0.2;\r\n                  }\r\n                  else {\r\n                    return 0;\r\n                  }\r\n                },\r\n                id: id,\r\n              });\r\n              if (Evt.stateplayer && Evt.statecard) next.set('respondTo', [Evt.stateplayer]);\r\n              if (game.online) {\r\n                _status.event._resultid = id;\r\n                game.resume();\r\n              }\r\n              else {\r\n                next.nouse = true;\r\n              }\r\n            };\r\n            Evt.settle = function () {\r\n              Evt.finish();\r\n            };\r\n          },\r\n          function () {\r\n            var list = game.filterPlayer(function (current) {\r\n              if (current == Evt.target) return false;\r\n              if (Evt.noyami) return false;\r\n              if (Evt.directHit && Evt.directHit.contains(current)) return false;\r\n              return current.hasYami();\r\n            });\r\n            Evt.list = list;\r\n            Evt.id = get.id();\r\n            list.sort(function (a, b) {\r\n              return get.distance(Evt.target, a, 'absolute') - get.distance(Evt.target, b, 'absolute');\r\n            });\r\n          },\r\n          function () {\r\n            if (Evt.list.length == 0) {\r\n              Evt.settle();\r\n            }\r\n            else if (_status.connectMode && (Evt.list[0].isOnline() || Evt.list[0] == game.me)) {\r\n              Evt.goto(4);\r\n            }\r\n            else {\r\n              Evt.current = Evt.list.shift();\r\n              Evt.send(Evt.current, Evt.state, Evt.target, Evt.id);\r\n            }\r\n          },\r\n          function () {\r\n            if (result.bool) {\r\n              Evt.yamiresult = Evt.current;\r\n              Evt.yamiresult2 = result;\r\n              Evt.goto(8);\r\n            }\r\n            else {\r\n              Evt.goto(2);\r\n            }\r\n          },\r\n          function () {\r\n            var id = Evt.id;\r\n            var sendback = function (result, player) {\r\n              if (result && result.id == id && !Evt.yamiresult && result.bool) {\r\n                Evt.yamiresult = player;\r\n                Evt.yamiresult2 = result;\r\n                game.broadcast('cancel', id);\r\n                if (_status.event.id == id && _status.event.name == 'chooseToUse' && _status.paused) {\r\n                  return (function () {\r\n                    Evt.resultOL = _status.event.resultOL;\r\n                    ui.click.cancel();\r\n                    if (ui.confirm) ui.confirm.close();\r\n                  });\r\n                }\r\n              }\r\n              else {\r\n                if (_status.event.id == id && _status.event.name == 'chooseToUse' && _status.paused) {\r\n                  return (function () {\r\n                    Evt.resultOL = _status.event.resultOL;\r\n                  });\r\n                }\r\n              }\r\n            };\r\n\r\n            var withme = false;\r\n            var withol = false;\r\n            var list = Evt.list;\r\n            for (var i = 0; i < list.length; i++) {\r\n              if (list[i].isOnline()) {\r\n                withol = true;\r\n                list[i].wait(sendback);\r\n                list[i].send(Evt.send, list[i], Evt.state, Evt.target, Evt.id, get.skillState(list[i]));\r\n                list.splice(i--, 1);\r\n              }\r\n              else if (list[i] == game.me) {\r\n                withme = true;\r\n                Evt.send(list[i], Evt.state, Evt.target, Evt.id);\r\n                list.splice(i--, 1);\r\n              }\r\n            }\r\n            if (!withme) {\r\n              Evt.goto(6);\r\n            }\r\n            if (_status.connectMode) {\r\n              if (withme || withol) {\r\n                for (var i = 0; i < game.players.length; i++) {\r\n                  game.players[i].showTimer();\r\n                }\r\n              }\r\n            }\r\n            Evt.withol = withol;\r\n          },\r\n          function () {\r\n            if (result && result.bool && !Evt.yamiresult) {\r\n              game.broadcast('cancel', Evt.id);\r\n              Evt.yamiresult = game.me;\r\n              Evt.yamiresult2 = result;\r\n            }\r\n          },\r\n          function () {\r\n            if (Evt.withol && !Evt.resultOL) {\r\n              game.pause();\r\n            }\r\n          },\r\n          function () {\r\n            for (var i = 0; i < game.players.length; i++) {\r\n              game.players[i].hideTimer();\r\n            }\r\n          },\r\n          function () {\r\n            if (Evt.yamiresult) {\r\n              var next = Evt.yamiresult.useResult(Evt.yamiresult2);\r\n              if (Evt.stateplayer) next.respondTo = [Evt.stateplayer, Evt];\r\n            }\r\n          },\r\n          function () {\r\n            if (Evt.yamiresult) {\r\n              if (result) {\r\n                Evt.goto(1);\r\n              }\r\n              else Evt.settle();\r\n            }\r\n            else if (Evt.list.length) {\r\n              Evt.goto(2);\r\n            }\r\n            else {\r\n              Evt.settle();\r\n            }\r\n            delete Evt.resultOL;\r\n            delete Evt.yamiresult;\r\n            delete Evt.yamiresult2;\r\n          }]\r\n        },\r\n        aozhan: {\r\n          charlotte: true,\r\n          mod: {\r\n            targetEnabled: function (card) {\r\n              if (card.name == 'tao' && (card.isCard && card.cardid || get.itemtype(card) == 'card')) return false;\r\n            },\r\n            cardSavable: function (card) {\r\n              if (card.name == 'tao' && (card.isCard && card.cardid || get.itemtype(card) == 'card')) return false;\r\n            },\r\n          },\r\n          group: [\"aozhan_sha\", \"aozhan_shan\"],\r\n          subSkill: {\r\n            sha: {\r\n              enable: [\"chooseToUse\", \"chooseToRespond\"],\r\n              filterCard: {\r\n                name: \"tao\",\r\n              },\r\n              viewAs: {\r\n                name: \"sha\",\r\n                isCard: true,\r\n              },\r\n              viewAsFilter: function (player) {\r\n                if (!player.countCards('hs', 'tao')) return false;\r\n              },\r\n              position: 'hs',\r\n              prompt: \"将一张桃当杀使用或打出\",\r\n              check: function () { return 1 },\r\n              ai: {\r\n                respondSha: true,\r\n                skillTagFilter: function (player) {\r\n                  if (!player.countCards('hs', 'tao')) return false;\r\n                },\r\n                order: function () {\r\n                  return get.order({ name: 'sha' }) - 0.1;\r\n                },\r\n              },\r\n              sub: true,\r\n            },\r\n            shan: {\r\n              enable: [\"chooseToRespond\", \"chooseToUse\"],\r\n              filterCard: {\r\n                name: \"tao\",\r\n              },\r\n              viewAs: {\r\n                name: \"shan\",\r\n                isCard: true,\r\n              },\r\n              prompt: \"将一张桃当闪打出\",\r\n              check: function () { return 1 },\r\n              viewAsFilter: function (player) {\r\n                if (!player.countCards('hs', 'tao')) return false;\r\n              },\r\n              position: 'hs',\r\n              ai: {\r\n                respondShan: true,\r\n                skillTagFilter: function (player) {\r\n                  if (!player.countCards('hs', 'tao')) return false;\r\n                },\r\n              },\r\n              sub: true,\r\n            },\r\n          },\r\n        },\r\n        /**\r\n         * 特殊_全局技能\r\n         * 将全局技能的技能名储存于此数组中\r\n         * @type {!Array<string>}\r\n         * @see {@link game.addGlobalSkill}\r\n         */\r\n        global: [],\r\n        globalmap: {},\r\n        storage: {},\r\n        undist: {},\r\n        others: {},\r\n        zhu: {},\r\n        zhuSkill: {},\r\n        land_used: {},\r\n        unequip: { ai: { unequip: true } },\r\n        subplayer: {\r\n          trigger: { player: 'dieBefore' },\r\n          forced: true,\r\n          priority: -9,\r\n          onremove: true,\r\n          mark: 'character',\r\n          intro: {\r\n            content: function (storage, player) {\r\n              if (typeof storage.intro2 == 'string') return storage.intro2;\r\n              if (typeof storage.intro2 == 'function') return storage.intro2(storage, player);\r\n              return '死亡前切换回主武将'\r\n            },\r\n            name: function (storage) {\r\n              return get.rawName(storage.name);\r\n            }\r\n          },\r\n          content: function () {\r\n            trigger.cancel();\r\n            var evt = trigger.getParent('damage');\r\n            if (evt.player == player) {\r\n              evt.untrigger(false, player);\r\n            }\r\n            player.exitSubPlayer(true);\r\n          },\r\n          ai: {\r\n            nosave: true\r\n          }\r\n        },\r\n        autoswap: {\r\n          firstDo: true,\r\n          trigger: {\r\n            player: ['playercontrol', 'chooseToUseBegin', 'chooseToRespondBegin', 'chooseToDiscardBegin', 'chooseToCompareBegin',\r\n              'chooseButtonBegin', 'chooseCardBegin', 'chooseTargetBegin', 'chooseCardTargetBegin', 'chooseControlBegin',\r\n              'chooseBoolBegin', 'choosePlayerCardBegin', 'discardPlayerCardBegin', 'gainPlayerCardBegin']\r\n          },\r\n          forced: true,\r\n          priority: 100,\r\n          forceDie: true,\r\n          popup: false,\r\n          filter: function (Evt, player) {\r\n            if (Evt.autochoose && Evt.autochoose()) return false;\r\n            if (lib.filter.wuxieSwap(Evt)) return false;\r\n            if (_status.auto || !player.isUnderControl()) return false;\r\n            return true;\r\n          },\r\n          content: function () {\r\n            game.swapPlayerAuto(player);\r\n          },\r\n        },\r\n        dualside: {\r\n          subSkill: {\r\n            turn: {\r\n              trigger: { player: ['turnOverAfter', 'dieBefore'] },\r\n              silent: true,\r\n              filter: function (Evt, player) {\r\n                if (player.storage.dualside_over) return false;\r\n                return Array.isArray(player.storage.dualside);\r\n              },\r\n              content: function () {\r\n                var cfg = player.storage.dualside;\r\n                var bool = player.isTurnedOver();\r\n                if (trigger.name == 'die') {\r\n                  bool = !bool;\r\n                }\r\n                if (bool) {\r\n                  cfg[1] = player.hp;\r\n                  cfg[2] = player.maxHp;\r\n                  player.reinit(cfg[0], cfg[3], [cfg[4], cfg[5]]);\r\n                  player.unmarkSkill('dualside');\r\n                  player.markSkillCharacter('dualside', { name: cfg[0] }, '正面', '当前体力：' + cfg[1] + '/' + cfg[2]);\r\n                }\r\n                else {\r\n                  cfg[4] = player.hp;\r\n                  cfg[5] = player.maxHp;\r\n                  player.reinit(cfg[3], cfg[0], [cfg[1], cfg[2]]);\r\n                  player.unmarkSkill('dualside');\r\n                  player.markSkillCharacter('dualside', { name: cfg[3] }, '背面', '当前体力：' + cfg[4] + '/' + cfg[5]);\r\n                }\r\n\r\n                if (trigger.name == 'die') {\r\n                  trigger.cancel();\r\n                  delete player.storage.dualside;\r\n                  player.storage.dualside_over = true;\r\n                  player.unmarkSkill('dualside');\r\n                }\r\n              }\r\n            },\r\n            init: {\r\n              trigger: { global: 'gameStart', player: 'enterGame' },\r\n              silent: true,\r\n              content: function () {\r\n                var list = [player.name, player.name1, player.name2];\r\n                for (var i = 0; i < list.length; i++) {\r\n                  if (list[i] && lib.character[list[i]]) {\r\n                    var info = lib.character[list[i]];\r\n                    if (info[3].contains('dualside') && info[4]) {\r\n                      player.storage.dualside = [list[i], player.hp, player.maxHp];\r\n                      for (var j = 0; j < info[4].length; j++) {\r\n                        if (info[4][j].indexOf('dualside:') == 0) {\r\n                          var name2 = info[4][j].slice(9);\r\n                          var info2 = lib.character[name2];\r\n                          player.storage.dualside.push(name2);\r\n                          player.storage.dualside.push(get.infoHp(info2[2]));\r\n                          player.storage.dualside.push(get.infoMaxHp(info2[2]));\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n                var cfg = player.storage.dualside;\r\n                if (get.mode() == 'guozhan') {\r\n                  if (player.name1 == cfg[0]) {\r\n                    player.showCharacter(0);\r\n                  }\r\n                  else {\r\n                    player.showCharacter(1);\r\n                  }\r\n                }\r\n                player.markSkillCharacter('dualside', { name: cfg[3] }, '背面', '当前体力：' + cfg[4] + '/' + cfg[5]);\r\n              }\r\n            }\r\n          },\r\n          group: ['dualside_init', 'dualside_turn']\r\n        },\r\n        _disableJudge: {\r\n          marktext: \"废\",\r\n          intro: {\r\n            content: \"已经废除了判定区\",\r\n          },\r\n          mod: {\r\n            targetEnabled: function (card, player, target) {\r\n              if (target.storage._disableJudge && get.type(card) == 'delay') return false;\r\n            },\r\n          },\r\n        },\r\n        \"_disableEquip\": {\r\n          marktext: \"废\",\r\n          intro: {\r\n            content: function (storage, player, skill) {\r\n              var str = '';\r\n              for (var i = 0; i < player.storage.disableEquip.length; i++) {\r\n                str += '、' + get.translation(player.storage.disableEquip[i]) + '栏';\r\n              };\r\n              str = str.slice(1, str.length)\r\n              str = '已经废除了' + str;\r\n              return str;\r\n            },\r\n          },\r\n          mod: {\r\n            targetEnabled: function (card, player, target) {\r\n              if (target.isDisabled(get.subtype(card))) return false;\r\n            },\r\n          },\r\n          trigger: {\r\n            player: ['disableEquipBefore', 'enableEquipBefore', 'enterGame'],\r\n            global: 'gameStart',\r\n          },\r\n          forced: true,\r\n          popup: false,\r\n          filter: function (Evt, player) {\r\n            return player.storage.disableEquip == undefined;\r\n          },\r\n          content: function () {\r\n            player.storage.disableEquip = [];\r\n          },\r\n        },\r\n        /**\r\n         * 技能_封印\r\n         * 使非锁定技失效\r\n         */\r\n        fengyin: {\r\n          init: function (player, skill) {\r\n            player.addSkillBlocker(skill);\r\n          },\r\n          onremove: function (player, skill) {\r\n            player.removeSkillBlocker(skill);\r\n          },\r\n          charlotte: true,\r\n          skillBlocker: function (skill, player) {\r\n            return !lib.skill[skill].charlotte && !get.is.locked(skill, player);\r\n          },\r\n          mark: true,\r\n          intro: {\r\n            content: function (storage, player, skill) {\r\n              var list = player.getSkills(null, false, false).filter(function (i) {\r\n                return lib.skill.fengyin.skillBlocker(i, player);\r\n              });\r\n              if (list.length) return '失效技能：' + get.translation(list);\r\n              return '无失效技能';\r\n            }\r\n          }\r\n        },\r\n        /**\r\n         * 技能_白板\r\n         * 使全部技能失效\r\n         */\r\n        baiban: {\r\n          init: function (player, skill) {\r\n            player.addSkillBlocker(skill);\r\n          },\r\n          onremove: function (player, skill) {\r\n            player.removeSkillBlocker(skill);\r\n          },\r\n          charlotte: true,\r\n          skillBlocker: function (skill, player) {\r\n            return !lib.skill[skill].charlotte;\r\n          },\r\n          mark: true,\r\n          intro: {\r\n            content: function (storage, player, skill) {\r\n              var list = player.getSkills(null, false, false).filter(function (i) {\r\n                return lib.skill.baiban.skillBlocker(i, player);\r\n              });\r\n              if (list.length) return '失效技能：' + get.translation(list);\r\n              return '无失效技能';\r\n            }\r\n          }\r\n        },\r\n        qianxing: {\r\n          mark: true,\r\n          nopop: true,\r\n          init: function (player) {\r\n            game.log(player, '获得了', '【潜行】');\r\n          },\r\n          intro: {\r\n            content: '锁定技，你不能成为其他角色的卡牌的目标'\r\n          },\r\n          mod: {\r\n            targetEnabled: function (card, player, target) {\r\n              if (player != target) return false;\r\n            }\r\n          }\r\n        },\r\n        /**\r\n         * 技能_免疫\r\n         * 防止受到的伤害\r\n         */\r\n        mianyi: {\r\n          trigger: { player: 'damageBefore' },\r\n          mark: true,\r\n          forced: true,\r\n          init: function (player) {\r\n            game.log(player, '获得了', '【免疫】');\r\n          },\r\n          content: function () {\r\n            trigger.cancel();\r\n          },\r\n          ai: {\r\n            noyami: true,\r\n            nofire: true,\r\n            nothunder: true,\r\n            noocean: true,\r\n            nodamage: true,\r\n            effect: {\r\n              target: function (card, player, target, current) {\r\n                if (get.tag(card, 'damage')) return [0, 0];\r\n              }\r\n            },\r\n          },\r\n          intro: {\r\n            content: '防止一切伤害'\r\n          }\r\n        },\r\n        mad: {\r\n          mark: true,\r\n          locked: true,\r\n          intro: {\r\n            content: '已进入混乱状态',\r\n            name: '混乱',\r\n            onunmark: function (storage, player) {\r\n              game.log(player, '解除混乱状态');\r\n            }\r\n          }\r\n        },\r\n        ghujia: {\r\n          intro: {\r\n            content: function (content, player) {\r\n              return '已有' + get.cnNumber(player.hujia) + '点护甲值';\r\n            }\r\n          }\r\n        },\r\n        counttrigger: {\r\n          trigger: { global: 'phaseAfter' },\r\n          silent: true,\r\n          charlotte: true,\r\n          priority: -100,\r\n          content: function () {\r\n            player.removeSkill('counttrigger');\r\n            delete player.storage.counttrigger;\r\n          }\r\n        },\r\n        _recovercheck: {\r\n          trigger: { player: 'recoverBefore' },\r\n          forced: true,\r\n          priority: 100,\r\n          firstDo: true,\r\n          popup: false,\r\n          filter: function (Evt, player) {\r\n            return player.hp >= player.maxHp;\r\n          },\r\n          content: function () {\r\n            trigger.cancel();\r\n          },\r\n        },\r\n        /**\r\n         * 规则技能_翻面\r\n         * 被翻面的角色跳过回合\r\n         */\r\n        _turnover: {\r\n          trigger: { player: 'phaseBefore' },\r\n          forced: true,\r\n          priority: 100,\r\n          popup: false,\r\n          firstDo: true,\r\n          content: [function () {\r\n            if ((player == _status.roundStart || _status.roundSkipped) && !trigger.skill) {\r\n              Evt.trigger('roundEnd');\r\n            }\r\n          },\r\n          function () {\r\n            if (player.isTurnedOver()) {\r\n              trigger.cancel();\r\n              player.turnOver();\r\n              player.phaseSkipped = true;\r\n            }\r\n            else {\r\n              player.phaseSkipped = false;\r\n            }\r\n          },\r\n          function () {\r\n            if ((player == _status.roundStart || _status.roundSkipped) && !trigger.skill) {\r\n              delete _status.roundSkipped;\r\n              game.roundNumber++;\r\n              trigger._roundStart = true;\r\n              game.updateRoundNumber();\r\n              for (var i = 0; i < game.players.length; i++) {\r\n                if (game.players[i].isOut() && game.players[i].outCount > 0) {\r\n                  game.players[i].outCount--;\r\n                  if (game.players[i].outCount == 0 && !game.players[i].outSkills) {\r\n                    game.players[i].in();\r\n                  }\r\n                }\r\n              }\r\n              Evt.trigger('roundStart');\r\n            }\r\n          }],\r\n        },\r\n        /**\r\n         * 规则技能_使用\r\n         * 使用一张牌结算后，通过{@link ui.clear}清除残留ui\r\n         */\r\n        _usecard: {\r\n          trigger: { global: 'useCardAfter' },\r\n          forced: true,\r\n          popup: false,\r\n          priority: -100,\r\n          lastDo: true,\r\n          filter: function (Evt) {\r\n            return !Evt._cleared && Evt.card.name != 'wuxie';\r\n          },\r\n          content: function () {\r\n            game.broadcastAll(function () {\r\n              ui.clear();\r\n            });\r\n            Evt._cleared = true;\r\n          }\r\n        },\r\n        /**\r\n         * 规则技能_弃牌\r\n         * 弃牌结算后，延时一段时间清除残留弃牌效果\r\n         */\r\n        _discard: {\r\n          trigger: { global: 'discardAfter' },\r\n          forced: true,\r\n          popup: false,\r\n          priority: -100,\r\n          lastDo: true,\r\n          filter: function (Evt) {\r\n            return ui.todiscard[Evt.discardid] ? true : false;\r\n          },\r\n          content: function () {\r\n            game.broadcastAll(function (id) {\r\n              var todiscard = ui.todiscard[id];\r\n              delete ui.todiscard[id];\r\n              if (todiscard) {\r\n                var time = 1000;\r\n                if (typeof todiscard._discardtime == 'number') {\r\n                  time += todiscard._discardtime - get.time();\r\n                }\r\n                if (time < 0) {\r\n                  time = 0;\r\n                }\r\n                setTimeout(function () {\r\n                  for (var i = 0; i < todiscard.length; i++) {\r\n                    todiscard[i].delete();\r\n                  }\r\n                }, time);\r\n              }\r\n            }, trigger.discardid);\r\n          }\r\n        },\r\n        _save: {\r\n          //trigger:{source:'dying2',player:'dying2'},\r\n          priority: 5,\r\n          forced: true,\r\n          popup: false,\r\n          filter: function (Evt, player) {\r\n            //if(!Evt.player.isDying()) return false;\r\n            //if(Evt.source&&Evt.source.isIn()&&Evt.source!=player) return false;\r\n            //return true;\r\n            return false;\r\n          },\r\n          content: [function () {\r\n            Evt.dying = trigger.player;\r\n            if (!Evt.acted) Evt.acted = [];\r\n          },\r\n          function () {\r\n            if (trigger.player.isDead()) {\r\n              Evt.finish();\r\n              return;\r\n            }\r\n            Evt.acted.push(player);\r\n            var str = get.translation(trigger.player) + '濒死，是否帮助？';\r\n            var str2 = '当前体力：' + trigger.player.hp;\r\n            if (lib.config.tao_enemy && Evt.dying.side != player.side && lib.config.mode != 'identity' && lib.config.mode != 'guozhan' && !Evt.dying.hasSkillTag('revertsave')) {\r\n              Evt._result = { bool: false }\r\n            }\r\n            else if (player.canSave(Evt.dying)) {\r\n              player.chooseToUse({\r\n                filterCard: function (card, player, Evt) {\r\n                  Evt = Evt || _status.event;\r\n                  return lib.filter.cardSavable(card, player, Evt.dying);\r\n                },\r\n                filterTarget: trigger.player,\r\n                prompt: str,\r\n                prompt2: str2,\r\n                ai1: function (card) {\r\n                  if (typeof card == 'string') {\r\n                    var info = get.info(card);\r\n                    if (info.ai && info.ai.order) {\r\n                      if (typeof info.ai.order == 'number') {\r\n                        return info.ai.order;\r\n                      }\r\n                      else if (typeof info.ai.order == 'function') {\r\n                        return info.ai.order();\r\n                      }\r\n                    }\r\n                  }\r\n                  return 1;\r\n                },\r\n                ai2: get.effect_use,\r\n                type: 'dying',\r\n                targetRequired: true,\r\n                dying: Evt.dying\r\n              });\r\n            }\r\n            else {\r\n              Evt._result = { bool: false }\r\n            }\r\n          },\r\n          function () {\r\n            if (result.bool) {\r\n              if (trigger.player.hp <= 0 && !trigger.player.nodying && trigger.player.isAlive() && !trigger.player.isOut() && !trigger.player.removed) Evt.goto(0);\r\n              else trigger.untrigger();\r\n            }\r\n            else {\r\n              for (var i = 0; i < 20; i++) {\r\n                if (Evt.acted.contains(Evt.player.next)) {\r\n                  break;\r\n                }\r\n                else {\r\n                  Evt.player = Evt.player.next;\r\n                  if (!Evt.player.isOut()) {\r\n                    Evt.goto(1);\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }]\r\n        },\r\n        _ismin: {\r\n          mod: {\r\n            cardEnabled: function (card, player) {\r\n              if (player.isMin()) {\r\n                if (get.type(card) == 'equip') return false;\r\n              }\r\n            }\r\n          }\r\n        },\r\n        /**\r\n         * 规则技能_重铸\r\n         * 令角色可以重铸特定的牌\r\n         */\r\n        _chongzhu: {\r\n          enable: 'phaseUse',\r\n          logv: false,\r\n          visible: true,\r\n          prompt: '将要重铸的牌置入弃牌堆并摸一张牌',\r\n          filter: function (Evt, player) {\r\n            return player.hasCard(function (card) {\r\n              return lib.skill._chongzhu.filterCard(card, player);\r\n            });\r\n          },\r\n          filterCard: function (card, player) {\r\n            var mod = game.checkMod(card, player, 'unchanged', 'cardChongzhuable', player);\r\n            if (mod != 'unchanged') return mod;\r\n            var info = get.info(card);\r\n            if (typeof info.chongzhu == 'function') {\r\n              return info.chongzhu(card, player);\r\n            }\r\n            return info.chongzhu;\r\n          },\r\n          prepare: function (cards, player) {\r\n            player.$throw(cards, 1000);\r\n            game.log(player, '将', cards, '置入了弃牌堆');\r\n          },\r\n          check: function (card) {\r\n            // if(get.type(card)=='stonecharacter'&&_status.event.player.countCards('h',{type:'stonecharacter'})<=1){\r\n            //     return 0;\r\n            // }\r\n            return 1;\r\n          },\r\n          discard: false,\r\n          loseTo: 'discardPile',\r\n          delay: 0.5,\r\n          content: [function () {\r\n            if (lib.config.mode == 'stone' && _status.mode == 'deck' &&\r\n              !player.isMin() && get.type(cards[0]).indexOf('stone') == 0) {\r\n              var list = get.stonecard(1, player.career);\r\n              if (list.length) {\r\n                player.gain(game.createCard(list.randomGet()), 'draw');\r\n              }\r\n              else {\r\n                player.draw({ drawDeck: 1 })\r\n              }\r\n            }\r\n            else if (get.subtype(cards[0]) == 'spell_gold') {\r\n              var list = get.libCard(function (info) {\r\n                return info.subtype == 'spell_silver';\r\n              });\r\n              if (list.length) {\r\n                player.gain(game.createCard(list.randomGet()), 'draw');\r\n              }\r\n              else {\r\n                player.draw();\r\n              }\r\n            }\r\n            else if (get.subtype(cards[0]) == 'spell_silver') {\r\n              var list = get.libCard(function (info) {\r\n                return info.subtype == 'spell_bronze';\r\n              });\r\n              if (list.length) {\r\n                player.gain(game.createCard(list.randomGet()), 'draw');\r\n              }\r\n              else {\r\n                player.draw();\r\n              }\r\n            }\r\n            else {\r\n              player.draw();\r\n            }\r\n          }],\r\n          ai: {\r\n            basic: {\r\n              order: 6\r\n            },\r\n            result: {\r\n              player: 1,\r\n            },\r\n          }\r\n        },\r\n        /**\r\n         * 规则技能_连环\r\n         * 被横置的角色传递属性伤害\r\n         */\r\n        _lianhuan: {\r\n          trigger: { player: 'damageAfter' },\r\n          filter: function (Evt, player) {\r\n            return Evt.lianhuanable == true;\r\n          },\r\n          forced: true,\r\n          popup: false,\r\n          logv: false,\r\n          forceDie: true,\r\n          //priority:-5,\r\n          content: [function () {\r\n            Evt.logvid = trigger.getLogv();\r\n          },\r\n          function () {\r\n            Evt.targets = game.filterPlayer(function (current) {\r\n              return current != Evt.player && current.isLinked();\r\n            });\r\n            lib.tempSortSeat = _status.currentPhase || player;\r\n            Evt.targets.sort(lib.sort.seat);\r\n            delete lib.tempSortSeat;\r\n            Evt._args = [trigger.num, trigger.nature, trigger.cards, trigger.card];\r\n            if (trigger.source) Evt._args.push(trigger.source);\r\n            else Evt._args.push(\"nosource\");\r\n          },\r\n          function () {\r\n            if (Evt.targets.length) {\r\n              var target = Evt.targets.shift();\r\n              if (target.isLinked()) target.damage.apply(target, Evt._args.slice(0));\r\n              Evt.redo();\r\n            }\r\n          }],\r\n        },\r\n        _lianhuan4: {\r\n          trigger: { player: 'changeHp' },\r\n          priority: -10,\r\n          forced: true,\r\n          popup: false,\r\n          forceDie: true,\r\n          filter: function (Evt, player) {\r\n            var evt = Evt.getParent();\r\n            return evt && evt.name == 'damage' && evt.nature && lib.linked.contains(evt.nature) && player.isLinked();\r\n          },\r\n          content: function () {\r\n            var overNature = trigger.getParent().oceanAddDam || false;\r\n            if (trigger.getParent(2).type == 'card' && get.nature(trigger.getParent(2).card) == 'yami' && trigger.getParent(3).yamiDirect) overNature = true;\r\n            if (!overNature) {\r\n              player.link();\r\n              if (trigger.getParent().notLink()) trigger.getParent().lianhuanable = true;\r\n            }\r\n          }\r\n        }\r\n      },\r\n      character: {},\r\n      /**\r\n       * 珠联璧合映射\r\n       * @type {!Object}\r\n       */\r\n      perfectPair: {},\r\n      cardPile: {},\r\n      /**\r\n       * 网络部分的消息处理（回调）函数\r\n       * @type {!Object}\r\n       */\r\n      message: {\r\n        server: {\r\n          init: function (version, config, banned_info) {\r\n            if (lib.node.banned.contains(banned_info)) {\r\n              this.send('denied', 'banned');\r\n            }\r\n            else if (config.id && lib.playerOL && lib.playerOL[config.id]) {\r\n              var player = lib.playerOL[config.id];\r\n              player.setNickname();\r\n              player.ws = this;\r\n              player.isAuto = false;\r\n              this.id = config.id;\r\n              game.broadcast(function (player) {\r\n                player.setNickname();\r\n              }, player);\r\n              this.send('reinit', lib.configOL, get.arenaState(), game.getState ? game.getState() : {}, game.ip, null, _status.onreconnect, _status.cardtag);\r\n            }\r\n            else if (version != lib.versionOL) {\r\n              this.send('denied', 'version');\r\n              lib.node.clients.remove(this);\r\n              this.closed = true;\r\n            }\r\n            else if (!_status.waitingForPlayer) {\r\n              if (game.phaseNumber && lib.configOL.observe) {\r\n                lib.node.observing.push(this);\r\n                this.send('reinit', lib.configOL, get.arenaState(), game.getState ? game.getState() : {}, game.ip, game.players[0].playerid, null, _status.cardtag);\r\n                if (!ui.removeObserve) {\r\n                  ui.removeObserve = ui.create.system('移除旁观', function () {\r\n                    lib.configOL.observe = false;\r\n                    if (game.onlineroom) {\r\n                      game.send('server', 'config', lib.configOL);\r\n                    }\r\n                    while (lib.node.observing.length) {\r\n                      lib.node.observing.shift().ws.close();\r\n                    }\r\n                    this.remove();\r\n                    delete ui.removeObserve;\r\n                  }, true);\r\n                }\r\n              }\r\n              else {\r\n                this.send('denied', 'gaming');\r\n                lib.node.clients.remove(this);\r\n                this.closed = true;\r\n              }\r\n            }\r\n            else if (lib.node.clients.length - (window.isNonameServer ? 1 : 0) >= parseInt(lib.configOL.number)) {\r\n              this.send('denied', 'number');\r\n              lib.node.clients.remove(this);\r\n              this.closed = true;\r\n            }\r\n            else {\r\n              if (config) {\r\n                this.avatar = config.avatar;\r\n                this.nickname = config.nickname;\r\n              }\r\n              for (var i = 0; i < game.connectPlayers.length; i++) {\r\n                if (game.connectPlayers[i].classList.contains('unselectable2')) continue;\r\n                if (game.connectPlayers[i] != game.me && !game.connectPlayers[i].playerid) {\r\n                  game.connectPlayers[i].playerid = this.id;\r\n                  game.connectPlayers[i].initOL(this.nickname, this.avatar);\r\n                  game.connectPlayers[i].ws = this;\r\n                  break;\r\n                }\r\n              }\r\n              this.send('init', this.id, lib.configOL, game.ip, window.isNonameServer, game.roomId);\r\n            }\r\n          },\r\n          inited: function () {\r\n            this.inited = true;\r\n            if (_status.waitingForPlayer) {\r\n              game.updateWaiting();\r\n            }\r\n          },\r\n          reinited: function () {\r\n            this.inited = true;\r\n          },\r\n          result: function (result) {\r\n            if (lib.node.observing.contains(this)) return;\r\n            var player = lib.playerOL[this.id];\r\n            if (player) {\r\n              player.unwait(result);\r\n            }\r\n          },\r\n          startGame: function () {\r\n            if (this.id == game.onlinezhu) {\r\n              game.resume();\r\n            }\r\n          },\r\n          changeRoomConfig: function (config) {\r\n            if (this.id == game.onlinezhu) {\r\n              game.broadcastAll(function (config) {\r\n                for (var i in config) {\r\n                  lib.configOL[i] = config[i];\r\n                }\r\n                if (ui.connectStartBar) {\r\n                  ui.connectStartBar.firstChild.innerHTML = get.modetrans(lib.configOL, true);\r\n                }\r\n              }, config);\r\n              if (lib.configOL.mode == 'identity' && lib.configOL.identity_mode == 'zhong' && game.connectPlayers) {\r\n                for (var i = 0; i < game.connectPlayers.length; i++) {\r\n                  game.connectPlayers[i].classList.remove('unselectable2');\r\n                }\r\n                lib.configOL.number = 8;\r\n                game.updateWaiting();\r\n              }\r\n              if (game.onlineroom) {\r\n                game.send('server', 'config', lib.configOL);\r\n              }\r\n              for (var i = 0; i < game.connectPlayers.length; i++) {\r\n                if (game.connectPlayers[i].playerid == this.id) {\r\n                  game.connectPlayers[i].chat('房间设置已更改');\r\n                }\r\n              }\r\n            }\r\n          },\r\n          changeNumConfig: function (num, index, bool) {\r\n            if (this.id == game.onlinezhu) {\r\n              lib.configOL.number = num;\r\n              game.send('server', 'config', lib.configOL);\r\n              if (game.connectPlayers && game.connectPlayers[index]) {\r\n                if (bool) {\r\n                  game.connectPlayers[index].classList.add('unselectable2');\r\n                }\r\n                else {\r\n                  game.connectPlayers[index].classList.remove('unselectable2');\r\n                }\r\n                game.updateWaiting();\r\n              }\r\n            }\r\n          },\r\n          throwEmotion: function (target, emotion) {\r\n            if (lib.node.observing.contains(this)) return;\r\n            var player = lib.playerOL[this.id];\r\n            if (player) {\r\n              player.throwEmotion(target, emotion);\r\n            }\r\n          },\r\n          emotion: function (id, pack, emotion) {\r\n            if (lib.node.observing.contains(this)) return;\r\n            var that = this;\r\n            if (!this.id || (!lib.playerOL[this.id] && (!game.connectPlayers || !function () {\r\n              for (var i = 0; i < game.connectPlayers.length; i++) {\r\n                if (game.connectPlayers[i].playerid == that.id) {\r\n                  return true;\r\n                }\r\n              }\r\n              return false;\r\n            }()))) return;\r\n            var player;\r\n            if (lib.playerOL[id]) {\r\n              player = lib.playerOL[id];\r\n            }\r\n            else if (game.connectPlayers) {\r\n              for (var i = 0; i < game.connectPlayers.length; i++) {\r\n                if (game.connectPlayers[i].playerid == id) {\r\n                  player = game.connectPlayers[i]; break;\r\n                }\r\n              }\r\n            }\r\n            if (player) lib.element.player.emotion.apply(player, [pack, emotion]);\r\n          },\r\n          chat: function (id, str) {\r\n            var that = this;\r\n            if (!this.id || (!lib.playerOL[this.id] && (!game.connectPlayers || !function () {\r\n              for (var i = 0; i < game.connectPlayers.length; i++) {\r\n                if (game.connectPlayers[i].playerid == that.id) {\r\n                  return true;\r\n                }\r\n              }\r\n              return false;\r\n            }()))) return;\r\n            var player;\r\n            if (lib.playerOL[id]) {\r\n              player = lib.playerOL[id];\r\n            }\r\n            else if (game.connectPlayers) {\r\n              for (var i = 0; i < game.connectPlayers.length; i++) {\r\n                if (game.connectPlayers[i].playerid == id) {\r\n                  player = game.connectPlayers[i]; break;\r\n                }\r\n              }\r\n            }\r\n            if (player) lib.element.player.chat.call(player, str);\r\n          },\r\n          giveup: function (player) {\r\n            if (lib.node.observing.contains(this) || !player || !player._giveUp) return;\r\n            _status.event.next.length = 0;\r\n            game.createEvent('giveup', false).setContent(function () {\r\n              game.log(player, '投降');\r\n              player.popup('投降');\r\n              player.die('nosource');\r\n            }).player = player;\r\n          },\r\n          auto: function () {\r\n            if (lib.node.observing.contains(this)) return;\r\n            var player = lib.playerOL[this.id];\r\n            if (player) {\r\n              player.isAuto = true;\r\n              player.setNickname(player.nickname + ' - 托管');\r\n              game.broadcast(function (player) {\r\n                player.setNickname(player.nickname + ' - 托管');\r\n              }, player);\r\n            }\r\n          },\r\n          unauto: function () {\r\n            if (lib.node.observing.contains(this)) return;\r\n            var player = lib.playerOL[this.id];\r\n            if (player) {\r\n              player.isAuto = false;\r\n              player.setNickname(player.nickname);\r\n              game.broadcast(function (player) {\r\n                player.setNickname(player.nickname);\r\n              }, player);\r\n            }\r\n          },\r\n          exec: function (func) {\r\n            // if(typeof func=='function'){\r\n            //     var args=Array.from(arguments);\r\n            //     args.shift();\r\n            //     func.apply(this,args);\r\n            // }\r\n          },\r\n          log: function () {\r\n            var items = [];\r\n            try {\r\n              for (var i = 0; i < arguments.length; i++) {\r\n                eval('items.push(' + arguments[i] + ')');\r\n              }\r\n            }\r\n            catch (e) {\r\n              this.send('log', ['err']);\r\n              return;\r\n            }\r\n            this.send('log', items);\r\n          }\r\n        },\r\n        client: {\r\n          log: function (arr) {\r\n            if (Array.isArray(arr)) {\r\n              for (var i = 0; i < arr.length; i++) {\r\n                console.log(arr[i]);\r\n              }\r\n            }\r\n          },\r\n          opened: function () {\r\n            game.send('init', lib.versionOL, {\r\n              id: game.onlineID,\r\n              avatar: lib.config.connect_avatar,\r\n              nickname: get.connectNickname()\r\n            }, lib.config.banned_info);\r\n            if (ui.connecting && !ui.connecting.splashtimeout) {\r\n              ui.connecting.firstChild.innerHTML = '重连成功';\r\n            }\r\n          },\r\n          onconnection: function (id) {\r\n            var ws = { wsid: id };\r\n            for (var i in lib.element.nodews) {\r\n              ws[i] = lib.element.nodews[i];\r\n            }\r\n            lib.wsOL[id] = ws;\r\n            lib.init.connection(ws);\r\n          },\r\n          onmessage: function (id, message) {\r\n            if (lib.wsOL[id]) {\r\n              lib.wsOL[id].onmessage(message);\r\n            }\r\n          },\r\n          onclose: function (id) {\r\n            if (lib.wsOL[id]) {\r\n              lib.wsOL[id].onclose();\r\n            }\r\n          },\r\n          selfclose: function () {\r\n            if (game.online || game.onlineroom) {\r\n              if ((game.servermode || game.onlinehall) && _status.over) {\r\n                // later\r\n              }\r\n              else {\r\n                game.saveConfig('tmp_user_roomId');\r\n              }\r\n            }\r\n            game.ws.close();\r\n          },\r\n          reloadroom: function (forced) {\r\n            if (window.isNonameServer && (forced || !_status.protectingroom)) {\r\n              game.reload();\r\n            }\r\n          },\r\n          createroom: function (index, config, mode) {\r\n            game.online = false;\r\n            game.onlineroom = true;\r\n            game.roomId = index;\r\n            lib.node = {};\r\n            if (config && mode && window.isNonameServer) {\r\n              if (mode == 'auto') {\r\n                mode = lib.configOL.mode;\r\n              }\r\n              game.switchMode(mode, config);\r\n            }\r\n            else {\r\n              game.switchMode(lib.configOL.mode);\r\n            }\r\n            ui.create.connecting(true);\r\n          },\r\n          enterroomfailed: function () {\r\n            alert('请稍后再试');\r\n            _status.enteringroom = false;\r\n            ui.create.connecting(true);\r\n          },\r\n          roomlist: function (list, events, clients, wsid) {\r\n            game.send('server', 'key', [game.onlineKey, lib.version]);\r\n            game.online = true;\r\n            game.onlinehall = true;\r\n            lib.config.recentIP.remove(_status.ip);\r\n            lib.config.recentIP.unshift(_status.ip);\r\n            lib.config.recentIP.splice(5);\r\n            if (!lib.config.reconnect_info || lib.config.reconnect_info[0] != _status.ip) {\r\n              game.saveConfig('reconnect_info', [_status.ip, null]);\r\n            }\r\n            game.saveConfig('recentIP', lib.config.recentIP);\r\n            _status.connectMode = true;\r\n\r\n            game.clearArena();\r\n            game.clearConnect();\r\n            ui.pause.hide();\r\n            ui.auto.hide();\r\n\r\n            clearTimeout(_status.createNodeTimeout);\r\n            game.send('server', 'changeAvatar', get.connectNickname(), lib.config.connect_avatar);\r\n\r\n            var proceed = function () {\r\n              game.ip = get.trimip(_status.ip);\r\n              ui.create.connectRooms(list);\r\n              if (events) {\r\n                ui.connectEvents = ui.create.div('.forceopaque.menubutton.large.connectevents.pointerdiv', '约战', ui.window, ui.click.connectEvents);\r\n                ui.connectEventsCount = ui.create.div('.forceopaque.menubutton.icon.connectevents.highlight.hidden', '', ui.window);\r\n                ui.connectClients = ui.create.div('.forceopaque.menubutton.large.connectevents.pointerdiv.left', '在线', ui.window, ui.click.connectClients);\r\n                ui.connectClientsCount = ui.create.div('.forceopaque.menubutton.icon.connectevents.highlight.left', '1', ui.window);\r\n                ui.createRoomButton = ui.create.div('.forceopaque.menubutton.large.connectevents.pointerdiv.left2', '创建房间', ui.window, function () {\r\n                  if (!_status.creatingroom) {\r\n                    _status.creatingroom = true;\r\n                    ui.click.connectMenu();\r\n                  }\r\n                });\r\n                if (events.length) {\r\n                  ui.connectEventsCount.innerHTML = events.filter(function (evt) {\r\n                    return evt.creator == game.onlineKey || !get.is.banWords(evt.content)\r\n                  }).length;\r\n                  ui.connectEventsCount.show();\r\n                }\r\n              }\r\n              game.wsid = wsid;\r\n              lib.message.client.updaterooms(list, clients);\r\n              lib.message.client.updateevents(events);\r\n              ui.exitroom = ui.create.system('退出房间', function () {\r\n                game.saveConfig('tmp_owner_roomId');\r\n                game.saveConfig('tmp_user_roomId');\r\n                if (ui.rooms) {\r\n                  game.saveConfig('reconnect_info');\r\n                }\r\n                else {\r\n                  if (lib.config.reconnect_info) {\r\n                    lib.config.reconnect_info.length = 1;\r\n                    game.saveConfig('reconnect_info', lib.config.reconnect_info);\r\n                  }\r\n                }\r\n                game.reload();\r\n              }, true);\r\n\r\n              var findRoom = function (id) {\r\n                for (var room of ui.rooms) {\r\n                  if (room.key == id) return room;\r\n                }\r\n                return false;\r\n              };\r\n              if (typeof lib.config.tmp_owner_roomId == 'string') {\r\n                if (typeof game.roomId != 'string' && !findRoom(lib.config.tmp_owner_roomId)) {\r\n                  lib.configOL.mode = lib.config.connect_mode;\r\n                  game.roomId = lib.config.tmp_owner_roomId;\r\n                }\r\n                game.saveConfig('tmp_owner_roomId');\r\n              }\r\n              if (typeof lib.config.tmp_user_roomId == 'string') {\r\n                if (typeof game.roomId != 'string') {\r\n                  if (findRoom(lib.config.tmp_user_roomId)) {\r\n                    game.roomId = lib.config.tmp_user_roomId;\r\n                  }\r\n                  else {\r\n                    ui.create.connecting();\r\n                    (function () {\r\n                      var n = 10;\r\n                      var id = lib.config.tmp_user_roomId;\r\n                      var interval = setInterval(function () {\r\n                        if (n > 0) {\r\n                          n--;\r\n                          if (findRoom(id)) {\r\n                            clearInterval(interval);\r\n                            game.send('server', 'enter', id, get.connectNickname(), lib.config.connect_avatar);\r\n                          }\r\n                        }\r\n                        else {\r\n                          ui.create.connecting(true);\r\n                          clearInterval(interval);\r\n                        }\r\n                      }, 500);\r\n                    }());\r\n                  }\r\n                }\r\n                game.saveConfig('tmp_user_roomId');\r\n              }\r\n\r\n              if (window.isNonameServer) {\r\n                var cfg = 'pagecfg' + window.isNonameServer;\r\n                if (lib.config[cfg]) {\r\n                  lib.configOL = lib.config[cfg][0];\r\n                  game.send('server', 'server', lib.config[cfg].slice(1));\r\n                  game.saveConfig(cfg);\r\n                  _status.protectingroom = true;\r\n                  setTimeout(function () {\r\n                    _status.protectingroom = false;\r\n                    if (!lib.node || !lib.node.clients || !lib.node.clients.length) {\r\n                      game.reload();\r\n                    }\r\n                  }, 15000);\r\n                }\r\n                else {\r\n                  game.send('server', 'server');\r\n                }\r\n              }\r\n              else if (typeof game.roomId == 'string') {\r\n                var room = findRoom(game.roomId);\r\n                if (game.roomIdServer && room && (room.serving || !room.version)) {\r\n                  console.log();\r\n                  if (lib.config.reconnect_info) {\r\n                    lib.config.reconnect_info[2] = null;\r\n                    game.saveConfig('reconnect_info', lib.config.reconnect_info);\r\n                  }\r\n                }\r\n                else {\r\n                  ui.create.connecting();\r\n                  game.send('server', (game.roomId == game.onlineKey) ? 'create' : 'enter', game.roomId, get.connectNickname(), lib.config.connect_avatar);\r\n                }\r\n              }\r\n              lib.init.onfree();\r\n            }\r\n            if (_status.event.parent) {\r\n              game.forceOver('noover', proceed);\r\n            }\r\n            else {\r\n              proceed();\r\n            }\r\n          },\r\n          updaterooms: function (list, clients) {\r\n            if (ui.rooms) {\r\n              var map = {}, map2 = {};\r\n              for (var i of ui.rooms) map2[i.key] = true;\r\n              for (var i of list) {\r\n                if (!i) continue;\r\n                map[i[4]] = i;\r\n              }\r\n              ui.window.classList.add('more_room');\r\n              for (var i = 0; i < ui.rooms.length; i++) {\r\n                if (!map[ui.rooms[i].key]) {\r\n                  ui.rooms[i].remove();\r\n                  ui.rooms.splice(i--, 1);\r\n                }\r\n                else ui.rooms[i].initRoom(list[i]);\r\n              }\r\n              for (var i of list) {\r\n                if (!i) continue;\r\n                map[i[4]] = i;\r\n                if (!map2[i[4]]) {\r\n                  var player = ui.roombase.add('<div class=\"popup text pointerdiv\" style=\"width:calc(100% - 10px);display:inline-block;white-space:nowrap\">空房间</div>');\r\n                  player.roomindex = i;\r\n                  player.initRoom = lib.element.player.initRoom;\r\n                  player.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.connectroom);\r\n                  player.initRoom(i);\r\n                  ui.rooms.push(player);\r\n                }\r\n              }\r\n            }\r\n            lib.message.client.updateclients(clients, true);\r\n          },\r\n          updateclients: function (clients, bool) {\r\n            if (clients && ui.connectClients) {\r\n              ui.connectClients.info = clients;\r\n              ui.connectClientsCount.innerHTML = clients.length;\r\n            }\r\n            if (_status.connectClientsCallback) {\r\n              _status.connectClientsCallback();\r\n            }\r\n          },\r\n          updateevents: function (events) {\r\n            if (events && ui.connectEvents) {\r\n              ui.connectEvents.info = events;\r\n              var num = events.filter(function (evt) {\r\n                return typeof evt.creator == 'string' && (evt.creator == game.onlineKey || !get.is.banWords(evt.content))\r\n              }).length;\r\n              if (num) {\r\n                ui.connectEventsCount.innerHTML = num;\r\n                ui.connectEventsCount.show();\r\n              }\r\n              else {\r\n                ui.connectEventsCount.hide();\r\n              }\r\n              if (_status.connectEventsCallback) {\r\n                _status.connectEventsCallback();\r\n              }\r\n            }\r\n          },\r\n          eventsdenied: function (reason) {\r\n            var str = '创建约战失败';\r\n            if (reason == 'total') {\r\n              str += '，约战总数不能超过20';\r\n            }\r\n            else if (reason == 'time') {\r\n              str += '，时间已过';\r\n            }\r\n            else if (reason == 'ban') {\r\n              str += '，请注意文明发言';\r\n            }\r\n            alert(str);\r\n          },\r\n          init: function (id, config, ip, servermode, roomId) {\r\n            game.online = true;\r\n            game.onlineID = id;\r\n            game.ip = ip;\r\n            game.servermode = servermode;\r\n            game.roomId = roomId;\r\n            if (game.servermode) {\r\n              game.saveConfig('reconnect_info', [_status.ip, id, game.roomId]);\r\n            }\r\n            else {\r\n              game.saveConfig('reconnect_info', [_status.ip, id]);\r\n              game.saveConfig('tmp_user_roomId', roomId);\r\n            }\r\n            lib.config.recentIP.remove(_status.ip);\r\n            lib.config.recentIP.unshift(_status.ip);\r\n            lib.config.recentIP.splice(5);\r\n            game.saveConfig('recentIP', lib.config.recentIP);\r\n            _status.connectMode = true;\r\n            lib.configOL = config;\r\n            lib.playerOL = {};\r\n            lib.cardOL = {};\r\n\r\n            game.clearArena();\r\n            game.finishCards();\r\n            ui.create.roomInfo();\r\n            ui.create.chat();\r\n            if (game.servermode) {\r\n              ui.create.connectPlayers(get.modetrans(config, true));\r\n            }\r\n            else {\r\n              ui.create.connectPlayers(ip);\r\n            }\r\n            ui.pause.hide();\r\n            ui.auto.hide();\r\n            game.clearConnect();\r\n            clearTimeout(_status.createNodeTimeout);\r\n\r\n            var proceed = function () {\r\n              game.loadModeAsync(config.mode, function (mode) {\r\n                for (var i in mode.ai) {\r\n                  if (typeof mode.ai[i] == 'object') {\r\n                    if (ai[i] == undefined) ai[i] = {};\r\n                    for (var j in mode.ai[i]) {\r\n                      ai[i][j] = mode.ai[i][j];\r\n                    }\r\n                  }\r\n                  else {\r\n                    ai[i] = mode.ai[i];\r\n                  }\r\n                }\r\n                for (var i in mode.get) {\r\n                  if (typeof mode.get[i] == 'object') {\r\n                    if (get[i] == undefined) get[i] = {};\r\n                    for (var j in mode.get[i]) {\r\n                      get[i][j] = mode.get[i][j];\r\n                    }\r\n                  }\r\n                  else {\r\n                    get[i] = mode.get[i];\r\n                  }\r\n                }\r\n                for (var i in mode.translate) {\r\n                  lib.translate[i] = mode.translate[i];\r\n                }\r\n                if (mode.game) {\r\n                  game.getIdentityList = mode.game.getIdentityList;\r\n                  game.updateState = mode.game.updateState;\r\n                  game.getRoomInfo = mode.game.getRoomInfo;\r\n                }\r\n                if (mode.element && mode.element.player) {\r\n                  for (var i in mode.element.player) {\r\n                    lib.element.player[i] = mode.element.player[i];\r\n                  }\r\n                }\r\n                if (mode.skill) {\r\n                  for (var i in mode.skill) {\r\n                    lib.skill[i] = mode.skill[i];\r\n                  }\r\n                }\r\n                if (mode.card) {\r\n                  for (var i in mode.card) {\r\n                    lib.card[i] = mode.card[i];\r\n                  }\r\n                }\r\n                game.finishCards();\r\n                if (mode.characterPack) {\r\n                  for (var i in mode.characterPack) {\r\n                    lib.characterPack[i] = mode.characterPack[i];\r\n                  }\r\n                }\r\n                _status.event = {\r\n                  finished: true,\r\n                  next: [],\r\n                  after: []\r\n                };\r\n                _status.paused = false;\r\n                game.createEvent('game', false).setContent(lib.init.startOnline);\r\n                game.loop();\r\n                game.send('inited');\r\n                ui.create.connecting(true);\r\n              });\r\n            }\r\n            if (_status.event.parent) {\r\n              game.forceOver('noover', proceed);\r\n            }\r\n            else {\r\n              proceed();\r\n            }\r\n            for (var i in lib.characterPack) {\r\n              for (var j in lib.characterPack[i]) {\r\n                lib.character[j] = lib.character[j] || lib.characterPack[i][j];\r\n              }\r\n            }\r\n          },\r\n          reinit: function (config, state, state2, ip, observe, onreconnect, cardtag) {\r\n            ui.auto.show();\r\n            ui.pause.show();\r\n            game.clearConnect();\r\n            clearTimeout(_status.createNodeTimeout);\r\n            game.online = true;\r\n            game.ip = ip;\r\n            game.servermode = state.servermode;\r\n            game.roomId = state.roomId;\r\n            if (state.over) {\r\n              _status.over = true;\r\n            }\r\n            if (observe) {\r\n              game.observe = true;\r\n              game.onlineID = null;\r\n              game.roomId = null;\r\n            }\r\n            if (game.servermode && !observe) {\r\n              game.saveConfig('reconnect_info', [_status.ip, game.onlineID, game.roomId]);\r\n            }\r\n            else {\r\n              game.saveConfig('reconnect_info', [_status.ip, game.onlineID]);\r\n              if (!observe) {\r\n                game.saveConfig('tmp_user_roomId', game.roomId);\r\n              }\r\n            }\r\n            _status.connectMode = true;\r\n            lib.configOL = config;\r\n            lib.playerOL = {};\r\n            lib.cardOL = {};\r\n\r\n            game.loadModeAsync(config.mode, function (mode) {\r\n              for (var i in mode.ai) {\r\n                if (typeof mode.ai[i] == 'object') {\r\n                  if (ai[i] == undefined) ai[i] = {};\r\n                  for (var j in mode.ai[i]) {\r\n                    ai[i][j] = mode.ai[i][j];\r\n                  }\r\n                }\r\n                else {\r\n                  ai[i] = mode.ai[i];\r\n                }\r\n              }\r\n              for (var i in mode.get) {\r\n                if (typeof mode.get[i] == 'object') {\r\n                  if (get[i] == undefined) get[i] = {};\r\n                  for (var j in mode.get[i]) {\r\n                    get[i][j] = mode.get[i][j];\r\n                  }\r\n                }\r\n                else {\r\n                  get[i] = mode.get[i];\r\n                }\r\n              }\r\n              for (var i in mode.translate) {\r\n                lib.translate[i] = mode.translate[i];\r\n              }\r\n              if (mode.game) {\r\n                game.getIdentityList = mode.game.getIdentityList;\r\n                game.updateState = mode.game.updateState;\r\n              }\r\n              if (mode.element && mode.element.player) {\r\n                for (var i in mode.element.player) {\r\n                  lib.element.player[i] = mode.element.player[i];\r\n                }\r\n              }\r\n              if (mode.skill) {\r\n                for (var i in mode.skill) {\r\n                  lib.skill[i] = mode.skill[i];\r\n                }\r\n              }\r\n              game.finishCards();\r\n              if (mode.characterPack) {\r\n                for (var i in mode.characterPack) {\r\n                  lib.characterPack[i] = mode.characterPack[i];\r\n                }\r\n              }\r\n              if (mode.onreinit) {\r\n                mode.onreinit();\r\n              }\r\n              _status.cardtag = get.parsedResult(cardtag);\r\n              state = get.parsedResult(state);\r\n              game.players = [];\r\n              game.dead = [];\r\n              for (var i in lib.characterPack) {\r\n                for (var j in lib.characterPack[i]) {\r\n                  lib.character[j] = lib.character[j] || lib.characterPack[i][j];\r\n                }\r\n              }\r\n              game.clearArena();\r\n              game.finishCards();\r\n              if (!observe) {\r\n                ui.create.chat();\r\n                if (ui.exitroom) {\r\n                  ui.exitroom.remove();\r\n                  delete ui.exitroom;\r\n                }\r\n              }\r\n              else {\r\n                if (!ui.exitroom) {\r\n                  ui.create.system('退出旁观', function () {\r\n                    game.saveConfig('reconnect_info');\r\n                    game.reload();\r\n                  }, true);\r\n                }\r\n                if (!lib.configOL.observe_handcard) {\r\n                  ui.arena.classList.add('observe');\r\n                }\r\n              }\r\n              ui.arena.setNumber(state.number);\r\n              _status.mode = state.mode;\r\n              lib.inpile = state.inpile;\r\n              var pos = state.players[observe || game.onlineID].position;\r\n              for (var i in state.players) {\r\n                var info = state.players[i];\r\n                var player = ui.create.player(ui.arena).animate('start');\r\n                player.dataset.position = (info.position < pos) ? info.position - pos + parseInt(state.number) : info.position - pos;\r\n                if (i == observe || i == game.onlineID) {\r\n                  game.me = player;\r\n                }\r\n                if (player.setModeState) {\r\n                  player.setModeState(info);\r\n                }\r\n                else {\r\n                  player.init(info.name1, info.name2);\r\n                }\r\n                if (!info.unseen) player.classList.remove('unseen');\r\n                if (!info.unseen2) player.classList.remove('unseen2');\r\n                if (!player.isUnseen(2) && player.storage.nohp) {\r\n                  delete player.storage.nohp;\r\n                  player.node.hp.show();\r\n                }\r\n                player.playerid = i;\r\n                player.nickname = info.nickname;\r\n                player.changeGroup(info.group, false, false);\r\n                player.identity = info.identity;\r\n                player.identityShown = info.identityShown;\r\n                player.hp = info.hp;\r\n                player.maxHp = info.maxHp;\r\n                player.hujia = info.hujia;\r\n                player.sex = info.sex;\r\n                player.side = info.side;\r\n                player.phaseNumber = info.phaseNumber,\r\n                  player.setNickname();\r\n                if (info.dead) {\r\n                  player.classList.add('dead');\r\n                  if (lib.config.die_move) {\r\n                    player.$dieflip();\r\n                  }\r\n                  if (lib.element.player.$dieAfter) {\r\n                    lib.element.player.$dieAfter.call(player);\r\n                  }\r\n                  game.dead.push(player);\r\n                }\r\n                else {\r\n                  game.players.push(player);\r\n                }\r\n                if (info.linked) {\r\n                  player.addLink();\r\n                }\r\n                if (info.turnedover) {\r\n                  player.classList.add('turnedover');\r\n                }\r\n                if (info.disableJudge) {\r\n                  player.$disableJudge();\r\n                }\r\n                if (Array.isArray(info.disableEquip)) {\r\n                  for (var ii = 0; ii < info.disableEquip.length; ii++) {\r\n                    player.$disableEquip(info.disableEquip[ii]);\r\n                  }\r\n                }\r\n\r\n                player.directgain(info.handcards);\r\n                lib.playerOL[i] = player;\r\n                for (var i = 0; i < info.equips.length; i++) {\r\n                  player.$equip(info.equips[i]);\r\n                }\r\n                for (var i = 0; i < info.handcards.length; i++) {\r\n                  info.handcards[i].addGaintag(info.gaintag[i]);\r\n                }\r\n                for (var i = 0; i < info.specials.length; i++) {\r\n                  info.specials[i].classList.add('glows');\r\n                }\r\n                for (var i = 0; i < info.judges.length; i++) {\r\n                  if (info.views[i] && info.views[i] != info.judges[i]) {\r\n                    info.judges[i].classList.add('fakejudge');\r\n                    info.judges[i].viewAs = info.views[i];\r\n                    info.judges[i].node.background.innerHTML = lib.translate[info.views[i] + '_bg'] || get.translation(info.views[i])[0]\r\n                  }\r\n                  player.node.judges.appendChild(info.judges[i]);\r\n                }\r\n                ui.updatej(player);\r\n                if (!player.setModeState) {\r\n                  if (!game.getIdentityList && info.identityNode) {\r\n                    player.node.identity.innerHTML = info.identityNode[0];\r\n                    player.node.identity.dataset.color = info.identityNode[1];\r\n                  }\r\n                  else if (player == game.me || player.identityShown || observe) {\r\n                    player.setIdentity();\r\n                    player.forceShown = true;\r\n                  }\r\n                  else {\r\n                    player.setIdentity('cai');\r\n                  }\r\n                  if (!lib.configOL.observe_handcard && (lib.configOL.mode == 'identity' || lib.configOL.mode == 'guozhan')) {\r\n                    if (observe && !player.identityShown) {\r\n                      player.setIdentity('cai');\r\n                      player.forceShown = false;\r\n                    }\r\n                  }\r\n                }\r\n                player.update();\r\n              }\r\n              game.arrangePlayers();\r\n              ui.create.me(true);\r\n\r\n              _status.event = {\r\n                finished: true,\r\n                next: [],\r\n                after: []\r\n              };\r\n              _status.paused = false;\r\n              _status.dying = get.parsedResult(state.dying) || [];\r\n\r\n              if (game.updateState) {\r\n                game.updateState(state2);\r\n              }\r\n              var next = game.createEvent('game', false);\r\n              next.setContent(lib.init.startOnline);\r\n              if (observe) {\r\n                next.custom.replace.target = function (player) {\r\n                  if (!lib.configOL.observe_handcard && lib.configOL.mode == 'guozhan') {\r\n                    return;\r\n                  }\r\n                  if (player.isAlive()) {\r\n                    if (!game.me.identityShown && lib.configOL.mode == 'guozhan') {\r\n                      game.me.node.identity.firstChild.innerHTML = '猜';\r\n                      game.me.node.identity.dataset.color = 'unknown';\r\n                    }\r\n                    game.swapPlayer(player);\r\n                    if (!game.me.identityShown && lib.configOL.mode == 'guozhan') {\r\n                      game.me.node.identity.firstChild.innerHTML = '';\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              else {\r\n                if (Array.isArray(onreconnect)) {\r\n                  onreconnect.shift().apply(this, onreconnect);\r\n                }\r\n              }\r\n              game.loop();\r\n              game.send('reinited');\r\n              game.showHistory();\r\n              _status.gameStarted = true;\r\n              if (lib.config.show_cardpile) {\r\n                ui.cardPileButton.style.display = '';\r\n              }\r\n              if (!observe && game.me && (game.me.isDead() || _status.over)) {\r\n                ui.create.exit();\r\n              }\r\n              ui.updatehl();\r\n              ui.create.connecting(true);\r\n            });\r\n          },\r\n          exec: function (func) {\r\n            var key = game.onlineKey;\r\n            if (typeof func == 'function') {\r\n              var args = Array.from(arguments);\r\n              args.shift();\r\n              func.apply(this, args);\r\n            }\r\n            if (key) {\r\n              game.onlineKey = key;\r\n              localStorage.setItem(lib.configprefix + 'key', game.onlineKey);\r\n            }\r\n          },\r\n          denied: function (reason) {\r\n            switch (reason) {\r\n              case 'version':\r\n                alert('加入失败：版本不匹配，请将游戏更新至最新版');\r\n                game.saveConfig('tmp_owner_roomId');\r\n                game.saveConfig('tmp_user_roomId');\r\n                game.saveConfig('reconnect_info');\r\n                break;\r\n              case 'gaming': alert('加入失败：游戏已开始'); break;\r\n              case 'number': alert('加入失败：房间已满'); break;\r\n              case 'banned': alert('加入失败：房间拒绝你加入'); break;\r\n              case 'key':\r\n                alert('您的游戏版本过低，请升级到最新版');\r\n                game.saveConfig('tmp_owner_roomId');\r\n                game.saveConfig('tmp_user_roomId');\r\n                game.saveConfig('reconnect_info');\r\n                break;\r\n              case 'offline':\r\n                if (_status.paused && _status.event.name == 'game') {\r\n                  setTimeout(game.resume, 500);\r\n                }\r\n                break;\r\n            }\r\n            game.ws.close();\r\n            if (_status.connectDenied) {\r\n              _status.connectDenied();\r\n            }\r\n          },\r\n          cancel: function (id) {\r\n            if (_status.event.id == id && _status.event.isMine() && _status.paused && _status.imchoosing) {\r\n              ui.click.cancel();\r\n              if (ui.confirm) {\r\n                ui.confirm.close();\r\n              }\r\n              if (_status.event.result) {\r\n                _status.event.result.id = id;\r\n              }\r\n            }\r\n          },\r\n          closeDialog: function (id) {\r\n            var dialog = get.idDialog(id);\r\n            if (dialog) {\r\n              dialog.close();\r\n            }\r\n          },\r\n          createDialog: function (id) {\r\n            var args = Array.from(arguments);\r\n            args.shift();\r\n            ui.create.dialog.apply(this, args).videoId = id;\r\n          },\r\n          gameStart: function () {\r\n            for (var i = 0; i < game.connectPlayers.length; i++) {\r\n              game.connectPlayers[i].delete();\r\n            }\r\n            delete game.connectPlayers;\r\n            if (ui.connectStartButton) {\r\n              ui.connectStartButton.delete();\r\n              delete ui.connectStartButton;\r\n            }\r\n            if (ui.connectStartBar) {\r\n              ui.connectStartBar.delete();\r\n              delete ui.connectStartBar;\r\n            }\r\n            if (ui.roomInfo) {\r\n              ui.roomInfo.remove();\r\n              delete ui.roomInfo;\r\n            }\r\n            if (ui.exitroom) {\r\n              ui.exitroom.remove();\r\n              delete ui.exitroom;\r\n            }\r\n            ui.auto.show();\r\n            ui.pause.show();\r\n            if (lib.config.show_cardpile) {\r\n              ui.cardPileButton.style.display = '';\r\n            }\r\n            _status.gameStarted = true;\r\n            game.showHistory();\r\n          },\r\n          updateWaiting: function (map) {\r\n            if (!game.connectPlayers) return;\r\n            if (!lib.translate.zhu) {\r\n              lib.translate.zhu = '主';\r\n            }\r\n            game.onlinezhu = false;\r\n            _status.waitingForPlayer = true;\r\n            for (var i = 0; i < map.length; i++) {\r\n              if (map[i] == 'disabled') {\r\n                game.connectPlayers[i].classList.add('unselectable2');\r\n              }\r\n              else {\r\n                game.connectPlayers[i].classList.remove('unselectable2');\r\n                if (map[i]) {\r\n                  game.connectPlayers[i].initOL(map[i][0], map[i][1]);\r\n                  game.connectPlayers[i].playerid = map[i][2];\r\n                  if (map[i][3] == 'zhu') {\r\n                    game.connectPlayers[i].setIdentity('zhu');\r\n                    if (map[i][2] == game.onlineID) {\r\n                      game.onlinezhu = true;\r\n                      if (ui.roomInfo) {\r\n                        ui.roomInfo.innerHTML = '房间设置';\r\n                      }\r\n                      if (ui.connectStartButton) {\r\n                        ui.connectStartButton.innerHTML = '开始游戏';\r\n                      }\r\n                    }\r\n                  }\r\n                  else {\r\n                    game.connectPlayers[i].node.identity.firstChild.innerHTML = '';\r\n                  }\r\n                }\r\n                else {\r\n                  game.connectPlayers[i].uninitOL();\r\n                  delete game.connectPlayers[i].playerid;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      /**\r\n       * 游戏牌颜色\r\n       * @type {('red'|'black'|'none')}\r\n       */\r\n      color: ['red', 'black', 'none'],\r\n      /**\r\n       * 游戏牌花色\r\n       * @type {('club'|'spade'|'diamond'|'heart')}\r\n       */\r\n      suit: ['club', 'spade', 'diamond', 'heart'],\r\n      /**\r\n       * 游戏牌点数\r\n       * @type {('A'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|'X'|'J'|'Q'|'K')}\r\n       */\r\n      number: ['A', '2', '3', '4', '5', '6', '7', '8', '9', 'X', 'J', 'Q', 'K'],\r\n      /**\r\n       * 游戏阶段\r\n       * \r\n       * @type {string[]}\r\n       */\r\n      phaseName: ['phaseZhunbei', 'phaseJudge', 'phaseDraw', 'phaseUse', 'phaseDiscard', 'phaseJieshu'],\r\n      /**\r\n       * 历史记录\r\n       * \r\n       * @type {Object}\r\n       */\r\n      historyRecorder: { useCard: [], respond: [], skipped: [], lose: [], gain: [], sourceDamage: [], damage: [], recover: [], changeHujia: [], custom: [] },\r\n      /**\r\n       * 快捷语音 - TODO\r\n       * @type {string[]}\r\n       */\r\n      quickVoice: [\r\n        '我从未见过如此厚颜无耻之人！',\r\n        '这波不亏',\r\n        '请收下我的膝盖',\r\n        '你咋不上天呢',\r\n        '放开我的队友，冲我来',\r\n        '你随便杀，闪不了算我输',\r\n        '见证奇迹的时刻到了',\r\n        '能不能快一点啊，兵贵神速啊',\r\n        '主公，别开枪，自己人',\r\n        '小内再不跳，后面还怎么玩儿啊',\r\n        '你们忍心，就这么让我酱油了？',\r\n        '我，我惹你们了吗',\r\n        '姑娘，你真是条汉子',\r\n        '三十六计，走为上，容我去去便回',\r\n        '人心散了，队伍不好带啊',\r\n        '昏君，昏君啊！',\r\n        '风吹鸡蛋壳，牌去人安乐',\r\n        '小内啊，您老悠着点儿',\r\n        '不好意思，刚才卡了',\r\n        '你可以打得再烂一点吗',\r\n        '哥们，给力点儿行嘛',\r\n        '哥哥，交个朋友吧',\r\n        '妹子，交个朋友吧',\r\n      ],\r\n\r\n      group: (__webpack_require__(/*! @d/lib_groupList */ \"./data/lib_groupList.js\").group),\r\n      group2: (__webpack_require__(/*! @d/lib_groupList */ \"./data/lib_groupList.js\").group2),\r\n      groupnature: (__webpack_require__(/*! @d/lib_groupList */ \"./data/lib_groupList.js\").groupnature),\r\n      nature: (__webpack_require__(/*! @d/lib_natureList */ \"./data/lib_natureList.js\").nature),\r\n      linked: (__webpack_require__(/*! @d/lib_natureList */ \"./data/lib_natureList.js\").linked),\r\n      translate: (__webpack_require__(/*! @d/lib_translate */ \"./data/lib_translate.js\").translate),\r\n    }\r\n  }\r\n}\n\n//# sourceURL=webpack:///./game/lib.js?")},"./game/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("module.exports = {\r\n   uiFun: (vkCore) => {\r\n      let { game, ui, get, ai, lib, _status } = vkCore\r\n      return {\r\n         updates: [],\r\n         thrown: [],\r\n         touchlines: [],\r\n         todiscard: {},\r\n         /**\r\n          * 立即应用缓存的更改，回流页面\r\n          * @param {HTMLElement} node DOM节点\r\n          */\r\n         refresh: function (node) {\r\n            void window.getComputedStyle(node, null).getPropertyValue(\"opacity\");\r\n         },\r\n         /**\r\n          * 创建UI\r\n          * @namespace\r\n          */\r\n         create: {\r\n            connectRooms: function (list) {\r\n               ui.rooms = [];\r\n               ui.roombase = ui.create.dialog();\r\n               ui.roombase.classList.add('fullwidth');\r\n               ui.roombase.classList.add('fullheight');\r\n               ui.roombase.classList.add('fixed');\r\n               ui.roombase.classList.add('scroll1');\r\n               ui.roombase.classList.add('scroll2');\r\n               ui.roombase.classList.add('noupdate');\r\n               for (var i = 0; i < list.length; i++) {\r\n                  var player = ui.roombase.add('<div class=\"popup text pointerdiv\" style=\"width:calc(100% - 10px);display:inline-block;white-space:nowrap\">空房间</div>');\r\n                  player.roomindex = i;\r\n                  player.initRoom = lib.element.player.initRoom;\r\n                  player.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.connectroom);\r\n                  player.initRoom(list[i]);\r\n                  ui.rooms.push(player);\r\n               }\r\n            },\r\n            rarity: function (button) {\r\n               var rarity = game.getRarity(button.link);\r\n               if (rarity != 'common' && lib.config.show_rarity) {\r\n                  var intro = button.node.intro;\r\n                  intro.classList.add('showintro');\r\n                  intro.style.fontFamily = 'yuanli';\r\n                  intro.style.fontSize = '16px';\r\n                  intro.style.bottom = '6px';\r\n                  intro.style.left = '6px';\r\n                  switch (rarity) {\r\n                     case 'beginner': intro.dataset.nature = 'oceanm'; break;\r\n                     case 'rare': intro.dataset.nature = 'thunderm'; break;\r\n                     case 'epic': intro.dataset.nature = 'metalm'; break;\r\n                     case 'legend': intro.dataset.nature = 'orangem'; break;\r\n                     case 'junk': intro.dataset.nature = 'woodm'; break;\r\n                  }\r\n                  intro.innerHTML = get.translation(rarity);\r\n               }\r\n               if ((button.link == 'xushu' || button.link == 'xin_xushu') && button.node && button.node.name && button.node.group) {\r\n                  if (button.classList.contains('newstyle')) {\r\n                     button.node.name.dataset.nature = 'watermm';\r\n                     button.node.group.dataset.nature = 'water';\r\n                  }\r\n                  else button.node.group.style.backgroundColor = get.translation('weiColor');\r\n               }\r\n            },\r\n            /**\r\n             * 创建`<div>`元素\r\n             * @function\r\n             * @param {?string} selectors 类选择器和id选择器的任意组合，用于设置创建元素的类和id；如果有id选择器，id选择器的数量不能超过一个；如果为null，不设置\r\n             * @param {?string} innerHTML 创建元素内的HTML，如果为null，不设置\r\n             * @param {?HTMLElement} parent 元素的父节点，如果为null，不设置父节点\r\n             * @param {?number} referenceNode 参考子节点，新节点会插入在参考节点的前；如果为null，插入在最后\r\n             * @param {?Object} style 参考{@link HTMLDivElement#css}，如果为null，不设置内联样式\r\n             * @param {?number[]} offsets 元素定位，参考{@link HTMLDivElement#setPosition}\r\n             * @param {?function} clickCallback 点击回调函数\r\n             * @returns {HTMLDivElement} 返回生成的div\r\n             */\r\n            div: function () {\r\n               var str, innerHTML, position, position2, style, divposition, listen;\r\n               for (var i = 0; i < arguments.length; i++) {\r\n                  if (typeof arguments[i] == 'string') {\r\n                     if (typeof str == 'string') {\r\n                        innerHTML = arguments[i];\r\n                     }\r\n                     else {\r\n                        str = arguments[i];\r\n                     }\r\n                  }\r\n                  else if (get.objtype(arguments[i]) == 'div' ||\r\n                     get.objtype(arguments[i]) == 'table' ||\r\n                     get.objtype(arguments[i]) == 'tr' ||\r\n                     get.objtype(arguments[i]) == 'td' ||\r\n                     get.objtype(arguments[i]) == 'body') position = arguments[i];\r\n                  else if (typeof arguments[i] == 'number') position2 = arguments[i];\r\n                  else if (get.itemtype(arguments[i]) == 'divposition') divposition = arguments[i];\r\n                  else if (typeof arguments[i] == 'object') style = arguments[i];\r\n                  else if (typeof arguments[i] == 'function') listen = arguments[i];\r\n               }\r\n               if (str == undefined) str = '';\r\n               var node = document.createElement('div');\r\n               for (var i = 0; i < str.length; i++) {\r\n                  if (str[i] == '.') {\r\n                     if (node.className.length != 0) {\r\n                        node.className += ' ';\r\n                     }\r\n                     while (str[i + 1] != '.' && str[i + 1] != '#' && i + 1 < str.length) {\r\n                        node.className += str[i + 1];\r\n                        i++;\r\n                     }\r\n                  }\r\n                  else if (str[i] == '#') {\r\n                     while (str[i + 1] != '.' && str[i + 1] != '#' && i + 1 < str.length) {\r\n                        node.id += str[i + 1];\r\n                        i++;\r\n                     }\r\n                  }\r\n               }\r\n               if (position) {\r\n                  if (typeof position2 == 'number' && position.childNodes.length > position2) {\r\n                     position.insertBefore(node, position.childNodes[position2]);\r\n                  }\r\n                  else {\r\n                     position.appendChild(node);\r\n                  }\r\n               }\r\n               if (style) node.css(style);\r\n               if (divposition) node.setPosition(divposition);\r\n               if (innerHTML) node.innerHTML = innerHTML;\r\n               if (listen) node.listen(listen);\r\n               return node;\r\n            },\r\n            filediv: function () {\r\n               var args = Array.from(arguments);\r\n               var func = null;\r\n               for (var i = 0; i < args.length; i++) {\r\n                  if (typeof args[i] == 'function') {\r\n                     func = args[i];\r\n                     args.splice(i, 1);\r\n                     break;\r\n                  }\r\n               }\r\n               var div = ui.create.div.apply(this, args);\r\n               var input = ui.create.node('input.fileinput');\r\n               input.type = 'file';\r\n               input.onchange = function (e) {\r\n                  func.call(this, this.files[0], e);\r\n               };\r\n               div.appendChild(input);\r\n               div.inputNode = input;\r\n               return div;\r\n            },\r\n            node: function () {\r\n               var tagName, str, innerHTML, position, position2, style, divposition, listen;\r\n               for (var i = 0; i < arguments.length; i++) {\r\n                  if (typeof arguments[i] == 'string') {\r\n                     if (typeof tagName == 'string') {\r\n                        innerHTML = arguments[i];\r\n                     }\r\n                     else {\r\n                        tagName = arguments[i];\r\n                     }\r\n                  }\r\n                  else if (get.objtype(arguments[i]) == 'div' ||\r\n                     get.objtype(arguments[i]) == 'table' ||\r\n                     get.objtype(arguments[i]) == 'tr' ||\r\n                     get.objtype(arguments[i]) == 'td' ||\r\n                     get.objtype(arguments[i]) == 'body') position = arguments[i];\r\n                  else if (typeof arguments[i] == 'number') position2 = arguments[i];\r\n                  else if (get.itemtype(arguments[i]) == 'divposition') divposition = arguments[i];\r\n                  else if (typeof arguments[i] == 'object') style = arguments[i];\r\n                  else if (typeof arguments[i] == 'function') listen = arguments[i];\r\n               }\r\n               if (tagName == undefined) {\r\n                  tagName = 'div';\r\n               }\r\n               else {\r\n                  var i1 = tagName.indexOf('.');\r\n                  var i2 = tagName.indexOf('#');\r\n                  if (i1 != -1 || i2 != -1) {\r\n                     if (i2 != -1 && i2 < i1) {\r\n                        i1 = i2;\r\n                     }\r\n                     str = tagName.slice(i1);\r\n                     tagName = tagName.slice(0, i1);\r\n                  }\r\n               }\r\n               var node = document.createElement(tagName);\r\n               if (str) {\r\n                  for (var i = 0; i < str.length; i++) {\r\n                     if (str[i] == '.') {\r\n                        if (node.className.length != 0) {\r\n                           node.className += ' ';\r\n                        }\r\n                        while (str[i + 1] != '.' && str[i + 1] != '#' && i + 1 < str.length) {\r\n                           node.className += str[i + 1];\r\n                           i++;\r\n                        }\r\n                     }\r\n                     else if (str[i] == '#') {\r\n                        while (str[i + 1] != '.' && str[i + 1] != '#' && i + 1 < str.length) {\r\n                           node.id += str[i + 1];\r\n                           i++;\r\n                        }\r\n                     }\r\n                  }\r\n               }\r\n               if (position) {\r\n                  if (typeof position2 == 'number' && position.childNodes.length > position2) {\r\n                     position.insertBefore(node, position.childNodes[position2]);\r\n                  }\r\n                  else {\r\n                     position.appendChild(node);\r\n                  }\r\n               }\r\n               if (style) HTMLDivElement.prototype.css.call(node, style);\r\n               if (divposition) HTMLDivElement.prototype.setPosition.call(node, divposition);\r\n               if (innerHTML) node.innerHTML = innerHTML;\r\n               if (listen) node.onclick = listen;\r\n               return node;\r\n            },\r\n            iframe: function (src) {\r\n               var layer = document.createElement('div');\r\n               layer.classList.add('poplayer');\r\n               layer.style.zIndex = '100';\r\n               layer.listen(function () {\r\n                  this.remove();\r\n               });\r\n               layer.style.background = 'white';\r\n\r\n               var webview = document.createElement('iframe');\r\n               webview.src = src;\r\n               webview.style.width = '100%';\r\n               webview.style.height = '100%';\r\n               webview.style.left = '0px';\r\n               webview.style.top = '0px';\r\n               webview.style.position = 'absolute';\r\n               webview.style.border = 'none';\r\n               layer.appendChild(webview);\r\n\r\n               var backbutton = ui.create.div('.menubutton.round', '返', layer, function () {\r\n                  layer.remove();\r\n               });\r\n               backbutton.style.bottom = '10px';\r\n               backbutton.style.right = '10px';\r\n               backbutton.style.background = 'rgba(0,0,0,0.4)';\r\n               backbutton.style.color = 'white';\r\n               backbutton.style.textShadow = 'rgba(0,0,0,0.5) 0px 0px 2px';\r\n               backbutton.style.boxShadow = 'rgba(0, 0, 0, 0.3) 0 0 0 1px, rgba(0, 0, 0, 0.3) 0 3px 10px';\r\n               backbutton.style.position = 'fixed';\r\n\r\n               ui.window.appendChild(layer);\r\n            },\r\n            identitycircle: function (list, target) {\r\n               var container = ui.create.div('.identitycircle.menubg', target);\r\n               var circle = ui.create.div(container);\r\n               container.dataset.num = list.length;\r\n               for (var i = 0; i < list.length; i++) {\r\n                  var sec1 = ui.create.div(circle);\r\n                  sec1.dataset.color = list[i];\r\n                  var sec2 = ui.create.div(circle);\r\n                  sec2.dataset.color = list[i];\r\n                  var deg1 = 360 / list.length * i;\r\n                  var deg2 = 0;\r\n                  if (list.length == 2) {\r\n                     deg2 = 90;\r\n                  }\r\n                  else if (list.length == 3) {\r\n                     deg2 = 30;\r\n                  }\r\n                  sec1.style.transform = 'rotate(' + deg1 + 'deg)';\r\n                  sec2.style.transform = 'rotate(' + (deg1 + deg2) + 'deg)';\r\n               }\r\n            },\r\n            chat: function () {\r\n               var chat = ui.create.system('聊天', null, true);\r\n               ui.chatButton = chat;\r\n               lib.setPopped(chat, ui.click.chat, 220);\r\n            },\r\n            exit: function () {\r\n               if (!ui.exit) {\r\n                  ui.exit = ui.create.control('退出房间', ui.click.exit);\r\n               }\r\n            },\r\n            connecting: function (bool) {\r\n               if (bool) {\r\n                  ui.window.classList.remove('connecting');\r\n                  if (ui.connecting) {\r\n                     ui.connecting.delete();\r\n                     delete ui.connecting;\r\n                  }\r\n               }\r\n               else {\r\n                  ui.window.classList.add('connecting');\r\n                  ui.connecting = ui.create.div('.fullsize.connectlayer');\r\n                  document.body.appendChild(ui.connecting);\r\n                  ui.create.div('', '正在重连...', ui.connecting);\r\n                  ui.connecting.splashtimeout = setTimeout(function () {\r\n                     if (ui.connecting) {\r\n                        delete ui.connecting.splashtimeout;\r\n                     }\r\n                  }, 300);\r\n                  // setTimeout(function(){\r\n                  //     if(ui.connecting){\r\n                  //         ui.connecting.firstChild.show();\r\n                  //     }\r\n                  // },1000);\r\n               }\r\n            },\r\n            roomInfo: function () {\r\n               var chat = ui.create.system(game.online ? '房间信息' : '房间设置', function () {\r\n                  if (!game.online || game.onlinezhu) {\r\n                     ui.click.connectMenu();\r\n                  }\r\n               }, true);\r\n               ui.roomInfo = chat;\r\n               lib.setPopped(chat, function () {\r\n                  if (game.getRoomInfo) {\r\n                     var uiintro = ui.create.dialog('hidden');\r\n                     game.getRoomInfo(uiintro);\r\n                     return uiintro;\r\n                  }\r\n               }, 180);\r\n            },\r\n            templayer: function (time) {\r\n               if (typeof time != 'number' || isNaN(time) || time == Infinity) {\r\n                  time = 500;\r\n               }\r\n               var templayer = ui.create.div('.popup-container', ui.window);\r\n               setTimeout(function () {\r\n                  templayer.remove();\r\n               }, time);\r\n            },\r\n            selectlist: function (list, init, position, onchange) {\r\n               var select = document.createElement('select');\r\n               for (var i = 0; i < list.length; i++) {\r\n                  var option = document.createElement('option');\r\n                  if (Array.isArray(list[i])) {\r\n                     option.value = list[i][0];\r\n                     option.innerHTML = list[i][1];\r\n                  }\r\n                  else {\r\n                     option.value = list[i];\r\n                     option.innerHTML = list[i];\r\n                  }\r\n                  if (init == option.value) {\r\n                     option.selected = 'selected';\r\n                  }\r\n                  select.appendChild(option);\r\n               }\r\n               if (position) {\r\n                  position.appendChild(select);\r\n               }\r\n               if (onchange) {\r\n                  select.onchange = onchange;\r\n               }\r\n               return select;\r\n            },\r\n            /**\r\n             * 菜单创建\r\n             * @param {*} connectMenu \r\n             */\r\n            menu: function (connectMenu) {\r\n               var menuTimeout = null;\r\n               if (!connectMenu && !game.syncMenu) {\r\n                  menuTimeout = setTimeout(lib.init.reset, 1000);\r\n               }\r\n               var menu, menuContainer;\r\n               var startButton;\r\n               var popupContainer;\r\n               var closeMenu = function () {\r\n                  if (popupContainer.noclose) {\r\n                     popupContainer.noclose = false;\r\n                     return;\r\n                  }\r\n                  popupContainer.classList.add('hidden');\r\n                  if (popupContainer.onclose) {\r\n                     popupContainer.onclose();\r\n                  }\r\n               };\r\n               popupContainer = ui.create.div('.popup-container.hidden', ui.window, closeMenu);\r\n\r\n               var openMenu = function (node, e, onclose) {\r\n                  popupContainer.innerHTML = '';\r\n                  var left = Math.round(e.clientX / game.documentZoom);\r\n                  var zoom = get.is.phoneLayout ? 1.3 : 1;\r\n                  popupContainer.appendChild(node);\r\n                  // var rect=node.getBoundingClientRect();\r\n                  if (node.classList.contains('visual')) {\r\n                     // var num=node.querySelectorAll('.menu.visual>div').length;\r\n                     // node.style.top=(e.y-node.offsetHeight/2+30)+'px';\r\n                     for (var i = 0; i < node.childElementCount; i++) {\r\n                        if (node.childNodes[i].update) {\r\n                           node.childNodes[i].update();\r\n                        }\r\n                     }\r\n                     // if(node.offsetTop<10){\r\n                     //     node.style.top='10px';\r\n                     // }\r\n                  }\r\n                  // else if(get.is.phoneLayout()&&rect.top*1.3+rect.height*1.3+20>ui.window.offsetHeight){\r\n                  //     node.style.top=(ui.winheightdow.offsetHeight-20-rect.height*1.3)/1.3+'px';\r\n                  // }\r\n                  // if(e){\r\n                  var height = node.offsetHeight;\r\n                  var idealtop = e.clientY / game.documentZoom;\r\n                  if (idealtop < 10) {\r\n                     idealtop = 10;\r\n                  }\r\n                  else if ((idealtop + height) * zoom + 10 > ui.window.offsetHeight) {\r\n                     idealtop = (ui.window.offsetHeight - 10) / zoom - height;\r\n                  }\r\n                  node.style.top = idealtop + 'px';\r\n                  node.style.left = left + 'px';\r\n                  // }\r\n\r\n                  popupContainer.classList.remove('hidden');\r\n                  popupContainer.onclose = onclose;\r\n               };\r\n               var clickToggle = function () {\r\n                  if (this.classList.contains('disabled')) return;\r\n                  this.classList.toggle('on');\r\n                  var config = this._link.config;\r\n                  if (config.onclick) {\r\n                     if (config.onclick.call(this, this.classList.contains('on')) === false) {\r\n                        this.classList.toggle('on');\r\n                     }\r\n                  }\r\n                  if (config.update) {\r\n                     config.update();\r\n                  }\r\n               };\r\n               var clickSwitcher = function () {\r\n                  if (this.classList.contains('disabled')) return;\r\n                  var node = this;\r\n                  this.classList.add('on');\r\n                  if (this._link.menu) {\r\n                     var pos1 = this.lastChild.getBoundingClientRect();\r\n                     var pos2 = ui.window.getBoundingClientRect();\r\n                     if (this._link.menu.classList.contains('visual')) {\r\n                        openMenu(this._link.menu, {\r\n                           clientX: pos1.left + pos1.width + 5 - pos2.left,\r\n                           clientY: pos1.top - pos2.top\r\n                        }, function () {\r\n                           node.classList.remove('on');\r\n                        });\r\n                     }\r\n                     else if (this._link.menu.childElementCount > 10) {\r\n                        openMenu(this._link.menu, {\r\n                           clientX: pos1.left + pos1.width + 5 - pos2.left,\r\n                           clientY: Math.min((ui.window.offsetHeight - 400) / 2, pos1.top - pos2.top)\r\n                        }, function () {\r\n                           node.classList.remove('on');\r\n                        });\r\n                        lib.setScroll(this._link.menu);\r\n                     }\r\n                     else {\r\n                        openMenu(this._link.menu, {\r\n                           clientX: pos1.left + pos1.width + 5 - pos2.left,\r\n                           clientY: pos1.top - pos2.top\r\n                        }, function () {\r\n                           node.classList.remove('on');\r\n                        });\r\n                     }\r\n                  }\r\n               };\r\n               var clickContainer = function () {\r\n                  menuContainer.classList.add('hidden');\r\n                  if (connectMenu) {\r\n                     if (_status.enteringroom) {\r\n                        _status.enteringroom = false;\r\n                     }\r\n                     if (_status.creatingroom) {\r\n                        _status.creatingroom = false;\r\n                     }\r\n                     ui.window.classList.remove('shortcutpaused');\r\n                  }\r\n                  else {\r\n                     game.resume2();\r\n                     if (game.onresume2) {\r\n                        game.onresume2();\r\n                     }\r\n                     ui.arena.classList.remove('menupaused');\r\n                     ui.historybar.classList.remove('menupaused');\r\n                     ui.window.classList.remove('touchinfohidden');\r\n                     ui.config2.classList.remove('pressdown2');\r\n                  }\r\n               };\r\n               var clickMenuItem = function () {\r\n                  var node = this.parentNode._link;\r\n                  var config = node._link.config;\r\n                  node._link.current = this.link;\r\n                  var tmpName = node.lastChild.innerHTML;\r\n                  node.lastChild.innerHTML = config.item[this._link];\r\n                  if (config.onclick) {\r\n                     if (config.onclick.call(node, this._link, this) === false) {\r\n                        node.lastChild.innerHTML = tmpName;\r\n                     }\r\n                  }\r\n                  if (config.update) {\r\n                     config.update();\r\n                  }\r\n               };\r\n               var createMenu = function (tabs, config) {\r\n                  var createPage = function (position) {\r\n                     var node = ui.create.div(position);\r\n                     lib.setScroll(ui.create.div('.left.pane', node));\r\n                     lib.setScroll(ui.create.div('.right.pane', node));\r\n                     return node;\r\n                  };\r\n                  var menu = ui.create.div('.main.menu.dialog.popped.static', config.position, function (e) {\r\n                     e.stopPropagation();\r\n                  });\r\n                  if (connectMenu) {\r\n                     menu.classList.add('center');\r\n                     menuContainer.classList.add('centermenu');\r\n                  }\r\n                  var menuTab = ui.create.div('.menu-tab', menu);\r\n                  var menuTabBar = ui.create.div('.menu-tab-bar', menu);\r\n                  menuTabBar.style.left = (config.bar || 0) + 'px';\r\n                  if (Math.round(2 * game.documentZoom) < 2) {\r\n                     menuTabBar.style.height = '3px';\r\n                  }\r\n                  var menuContent = ui.create.div('.menu-content', menu);\r\n                  var clickTab = function () {\r\n                     if (this.classList.contains('disabled')) return;\r\n                     var active = this.parentNode.querySelector('.active');\r\n                     if (active) {\r\n                        active.classList.remove('active');\r\n                        active._link.remove();\r\n                     }\r\n                     this.classList.add('active');\r\n                     menuTabBar.style.transform = 'translateX(' + (this.getBoundingClientRect().left - this.parentNode.firstChild.getBoundingClientRect().left) / game.documentZoom + 'px)';\r\n                     menuContent.appendChild(this._link);\r\n                  };\r\n                  ui.click.menuTab = function (tab) {\r\n                     for (var i = 0; i < menuTab.childNodes.length; i++) {\r\n                        if (menuTab.childNodes[i].innerHTML == tab) {\r\n                           clickTab.call(menuTab.childNodes[i]);\r\n                           return;\r\n                        }\r\n                     }\r\n                  };\r\n                  var pages = [];\r\n                  for (var i = 0; i < tabs.length; i++) {\r\n                     var active = (i === (config.init || 0));\r\n                     pages[i] = createPage(active ? menuContent : null);\r\n                     ui.create.div(active ? '.active' : '', tabs[i], menuTab, clickTab)._link = pages[i];\r\n                  }\r\n                  return {\r\n                     menu: menu,\r\n                     pages: pages\r\n                  };\r\n               };\r\n               var createConfig = function (config, position) {\r\n                  var node = ui.create.div('.config', config.name);\r\n                  node._link = { config: config };\r\n                  if (!config.clear) {\r\n                     if (config.name != '开启') {\r\n                        if (config.name == '屏蔽弱将') {\r\n                           config.intro = '强度过低的武将（孙策除外）不会出现在选将框，也不会被AI选择'\r\n                        }\r\n                        else if (config.name == '屏蔽强将') {\r\n                           config.intro = '强度过高的武将不会出现在选将框，也不会被AI选择'\r\n                        }\r\n                        else if (!config.intro) {\r\n                           config.intro = '设置' + config.name;\r\n                        }\r\n                        lib.setIntro(node, function (uiintro) {\r\n                           if (lib.config.touchscreen) _status.dragged = true;\r\n                           uiintro.style.width = '170px';\r\n                           var str = config.intro;\r\n                           if (typeof str == 'function') {\r\n                              str = str();\r\n                           }\r\n                           uiintro._place_text = uiintro.add('<div class=\"text\" style=\"display:inline\">' + str + '</div>');\r\n                        });\r\n                     }\r\n                  }\r\n                  else {\r\n                     node.innerHTML = '<span>' + config.name + '</span>';\r\n                     if (!config.nopointer) {\r\n                        node.classList.add('pointerspan');\r\n                     }\r\n                  }\r\n                  if (config.item) {\r\n                     if (typeof config.item == 'function') {\r\n                        config.item = config.item();\r\n                     }\r\n                     if (Array.isArray(config.init)) {\r\n\r\n                     }\r\n                     else {\r\n                        node.classList.add('switcher');\r\n                        node.listen(clickSwitcher);\r\n                        node._link.choosing = ui.create.div('', config.item[config.init], node);\r\n                        node._link.menu = ui.create.div('.menu');\r\n                        if (config.visualMenu) {\r\n                           node._link.menu.classList.add('visual');\r\n                           var updateVisual = function () {\r\n                              config.visualMenu(this, this._link, config.item[this._link], config);\r\n                           };\r\n                           var createNode = function (i, before) {\r\n                              var visualMenu = ui.create.div();\r\n                              if (config.visualBar) {\r\n                                 if (before) {\r\n                                    node._link.menu.insertBefore(visualMenu, before);\r\n                                 }\r\n                                 else {\r\n                                    node._link.menu.insertBefore(visualMenu, node._link.menu.lastChild);\r\n                                 }\r\n                              }\r\n                              else {\r\n                                 node._link.menu.appendChild(visualMenu);\r\n                              }\r\n                              ui.create.div('.name', get.verticalStr(config.item[i]), visualMenu);\r\n                              visualMenu._link = i;\r\n                              if (config.visualMenu(visualMenu, i, config.item[i], config) !== false) {\r\n                                 visualMenu.listen(clickMenuItem);\r\n                              }\r\n                              visualMenu.update = updateVisual;\r\n                           };\r\n                           if (config.visualBar) {\r\n                              var visualBar = ui.create.div(node._link.menu, function () {\r\n                                 this.parentNode.parentNode.noclose = true;\r\n                              });\r\n                              node._link.menu.classList.add('withbar');\r\n                              config.visualBar(visualBar, config.item, createNode, node);\r\n                              visualBar.update = function () {\r\n                                 config.visualBar(visualBar, config.item, createNode, node);\r\n                              }\r\n                           }\r\n                           for (var i in config.item) {\r\n                              createNode(i);\r\n                           }\r\n                           lib.setScroll(node._link.menu);\r\n                           node._link.menu.updateBr = function () {\r\n                              var br = Array.from(this.querySelectorAll('.menu.visual>br'));\r\n                              while (br.length) {\r\n                                 br.shift().remove();\r\n                              }\r\n                              var split = [];\r\n                              for (var i = 1; i < this.childElementCount; i++) {\r\n                                 if (i % 3 == 0) {\r\n                                    split.push(this.childNodes[i]);\r\n                                 }\r\n                              }\r\n                              for (var i = 0; i < split.length; i++) {\r\n                                 this.insertBefore(ui.create.node('br'), split[i]);\r\n                              }\r\n                           }\r\n                           node._link.menu.updateBr();\r\n                        }\r\n                        else {\r\n                           for (var i in config.item) {\r\n                              var textMenu = ui.create.div('', config.item[i], node._link.menu, clickMenuItem);\r\n                              textMenu._link = i;\r\n                              if (config.textMenu) {\r\n                                 config.textMenu(textMenu, i, config.item[i], config)\r\n                              }\r\n                              lib.setScroll(node._link.menu);\r\n                           }\r\n                        }\r\n                        node._link.menu._link = node;\r\n                        node._link.current = config.init;\r\n                     }\r\n                  }\r\n                  else if (config.range) {\r\n\r\n                  }\r\n                  else if (config.clear) {\r\n                     if (node.innerHTML.length >= 15) node.style.height = 'auto';\r\n                     node.listen(clickToggle);\r\n                  }\r\n                  else if (config.input) {\r\n                     node.classList.add('switcher');\r\n                     var input = ui.create.div(node);\r\n                     if (!config.fixed) {\r\n                        input.contentEditable = true;\r\n                        input.style.webkitUserSelect = 'text';\r\n                     }\r\n                     input.style.minWidth = '10px';\r\n                     input.onkeydown = function (e) {\r\n                        if (e.keyCode == 13) {\r\n                           e.preventDefault();\r\n                           e.stopPropagation();\r\n                           input.blur();\r\n                        }\r\n                     };\r\n                     if (config.name == '联机昵称') {\r\n                        input.innerHTML = config.init || '无名玩家';\r\n                        input.onblur = function () {\r\n                           input.innerHTML = input.innerHTML.replace(/<br>/g, '');\r\n                           if (!input.innerHTML || get.is.banWords(input.innerHTML)) {\r\n                              input.innerHTML = '无名玩家';\r\n                           }\r\n                           input.innerHTML = input.innerHTML.slice(0, 12);\r\n                           game.saveConfig('connect_nickname', input.innerHTML);\r\n                           game.saveConfig('connect_nickname', input.innerHTML, 'connect');\r\n                        }\r\n                     }\r\n                     else if (config.name == '联机大厅') {\r\n                        input.innerHTML = config.init || lib.hallURL;\r\n                        input.onblur = function () {\r\n                           if (!input.innerHTML) {\r\n                              input.innerHTML = lib.hallURL;\r\n                           }\r\n                           input.innerHTML = input.innerHTML.replace(/<br>/g, '');\r\n                           game.saveConfig('hall_ip', input.innerHTML, 'connect');\r\n                        }\r\n                     }\r\n                     else {\r\n                        input.innerHTML = config.init;\r\n                        input.onblur = config.onblur;\r\n                     }\r\n                  }\r\n                  else {\r\n                     node.classList.add('toggle');\r\n                     node.listen(clickToggle);\r\n                     ui.create.div(ui.create.div(node));\r\n                     if (config.init == true) {\r\n                        node.classList.add('on');\r\n                     }\r\n                  }\r\n                  if (position) {\r\n                     position.appendChild(node);\r\n                  }\r\n                  return node;\r\n               };\r\n               var updateActive, updateActiveCard;\r\n               var menuUpdates = [];\r\n               menuContainer = ui.create.div('.menu-container.hidden', ui.window, clickContainer);\r\n               var menux;\r\n               if (!connectMenu) {\r\n                  ui.menuContainer = menuContainer;\r\n                  ui.click.configMenu = function () {\r\n                     ui.click.shortcut(false)\r\n                     if (menuContainer.classList.contains('hidden')) {\r\n                        ui.config2.classList.add('pressdown2');\r\n                        ui.arena.classList.add('menupaused');\r\n                        ui.historybar.classList.add('menupaused');\r\n                        ui.window.classList.add('touchinfohidden');\r\n                        menuContainer.classList.remove('hidden');\r\n                        for (var i = 0; i < menuUpdates.length; i++) {\r\n                           menuUpdates[i]();\r\n                        }\r\n                     }\r\n                     else {\r\n                        clickContainer.call(menuContainer);\r\n                     }\r\n                  }\r\n                  menux = createMenu(['开始', '选项', '武将', '卡牌', '扩展', '其它'], {\r\n                     position: menuContainer, bar: 40\r\n                  });\r\n               }\r\n               else {\r\n                  ui.connectMenuContainer = menuContainer;\r\n                  ui.click.connectMenu = function () {\r\n                     if (menuContainer.classList.contains('hidden')) {\r\n                        if (_status.waitingForPlayer) {\r\n                           startButton.innerHTML = '设';\r\n                           var start = menux.pages[0].firstChild;\r\n                           for (var i = 0; i < start.childNodes.length; i++) {\r\n                              if (start.childNodes[i].mode != lib.configOL.mode) {\r\n                                 start.childNodes[i].classList.add('unselectable');\r\n                                 start.childNodes[i].classList.remove('active');\r\n                                 start.childNodes[i].link.remove();\r\n                              }\r\n                              else {\r\n                                 start.childNodes[i].classList.add('active');\r\n                                 start.nextSibling.appendChild(start.childNodes[i].link);\r\n                              }\r\n                           }\r\n                        }\r\n                        ui.window.classList.add('shortcutpaused');\r\n                        menuContainer.classList.remove('hidden');\r\n                        for (var i = 0; i < menuUpdates.length; i++) {\r\n                           menuUpdates[i]();\r\n                        }\r\n                     }\r\n                     else {\r\n                        clickContainer.call(menuContainer);\r\n                     }\r\n                  }\r\n\r\n                  menux = createMenu(['模式', '武将', '卡牌'], {\r\n                     position: menuContainer, bar: 123\r\n                  });\r\n                  menu = menux.menu;\r\n               }\r\n               var menuxpages = menux.pages.slice(0);\r\n\r\n               var copyObj = get.copy;\r\n\r\n               (function () {\r\n                  var start = menuxpages.shift();\r\n                  var rightPane = start.lastChild;\r\n\r\n                  startButton = ui.create.div('.menubutton.round.highlight', '启', start, function () {\r\n                     if (this.animating || this.classList.contains('dim')) {\r\n                        return;\r\n                     }\r\n                     var active = this.parentNode.querySelector('.active');\r\n                     if (active) {\r\n                        if (connectMenu) {\r\n                           if (_status.waitingForPlayer) {\r\n                              var config = {};\r\n                              for (var i in lib.mode[lib.configOL.mode].connect) {\r\n                                 if (i == 'update') continue;\r\n                                 config[i.slice(8)] = get.config(i, lib.configOL.mode);\r\n                              }\r\n                              if (game.online) {\r\n                                 if (game.onlinezhu) {\r\n                                    game.send('changeRoomConfig', config);\r\n                                 }\r\n                              }\r\n                              else {\r\n                                 game.broadcastAll(function (config) {\r\n                                    for (var i in config) {\r\n                                       lib.configOL[i] = config[i];\r\n                                    }\r\n                                 }, config);\r\n                                 if (lib.configOL.mode == 'identity' && lib.configOL.identity_mode == 'zhong' && game.connectPlayers) {\r\n                                    for (var i = 0; i < game.connectPlayers.length; i++) {\r\n                                       game.connectPlayers[i].classList.remove('unselectable2');\r\n                                    }\r\n                                    lib.configOL.number = 8;\r\n                                    game.updateWaiting();\r\n                                 }\r\n                                 if (game.onlineroom) {\r\n                                    game.send('server', 'config', lib.configOL);\r\n                                 }\r\n                                 game.connectPlayers[0].chat('房间设置已更改');\r\n                              }\r\n                           }\r\n                           else if (_status.enteringroom || _status.creatingroom) {\r\n                              lib.configOL.mode = active.mode;\r\n                              if (_status.enteringroomserver) {\r\n                                 game.saveConfig('connect_mode', lib.configOL.mode);\r\n\r\n                                 var config = {};\r\n                                 for (var i in lib.mode[lib.configOL.mode].connect) {\r\n                                    if (i == 'update') continue;\r\n                                    config[i.slice(8)] = get.config(i, lib.configOL.mode);\r\n                                 }\r\n\r\n                                 config.characterPack = lib.connectCharacterPack.slice(0);\r\n                                 config.cardPack = lib.connectCardPack.slice(0);\r\n                                 for (var i = 0; i < lib.config.connect_characters.length; i++) {\r\n                                    config.characterPack.remove(lib.config.connect_characters[i]);\r\n                                 }\r\n                                 for (var i = 0; i < lib.config.connect_cards.length; i++) {\r\n                                    config.cardPack.remove(lib.config.connect_cards[i]);\r\n                                 }\r\n                                 config.banned = lib.config['connect_' + active.mode + '_banned'];\r\n                                 config.bannedcards = lib.config['connect_' + active.mode + '_bannedcards'];\r\n                                 game.send('server', 'create', game.onlineKey, get.connectNickname(), lib.config.connect_avatar, config, active.mode);\r\n                              }\r\n                              else {\r\n                                 game.send('server', 'create', game.onlineKey, get.connectNickname(), lib.config.connect_avatar);\r\n                              }\r\n                           }\r\n                           else {\r\n                              localStorage.setItem(lib.configprefix + 'directstart', true);\r\n                              game.saveConfig('directstartmode', active.mode);\r\n                              game.saveConfig('mode', 'connect');\r\n                              ui.exitroom = ui.create.system('退出房间', function () {\r\n                                 game.saveConfig('directstartmode');\r\n                                 game.reload();\r\n                              }, true);\r\n                              game.switchMode(active.mode);\r\n                           }\r\n                           clickContainer.call(menuContainer);\r\n                        }\r\n                        else {\r\n                           game.saveConfig('mode', active.mode);\r\n                           localStorage.setItem(lib.configprefix + 'directstart', true);\r\n                           game.reload();\r\n                        }\r\n                     }\r\n                  });\r\n\r\n                  var clickMode = function () {\r\n                     if (this.classList.contains('unselectable')) return;\r\n                     var active = this.parentNode.querySelector('.active');\r\n                     if (active === this) {\r\n                        return;\r\n                     }\r\n                     active.classList.remove('active');\r\n                     active.link.remove();\r\n                     active = this;\r\n                     this.classList.add('active');\r\n                     rightPane.appendChild(this.link);\r\n                     if (connectMenu) {\r\n                        if (updateActive) updateActive();\r\n                        if (updateActiveCard) updateActiveCard();\r\n                     }\r\n                  };\r\n\r\n                  var createModeConfig = function (mode, position) {\r\n                     var info = lib.mode[mode];\r\n                     var page = ui.create.div('');\r\n                     var node = ui.create.div('.menubutton.large', info.name, position, clickMode);\r\n                     node.link = page;\r\n                     node.mode = mode;\r\n                     if (connectMenu) {\r\n                        if (mode == lib.config.connect_mode) {\r\n                           node.classList.add('active');\r\n                        }\r\n                     }\r\n                     else {\r\n                        if (mode == lib.config.mode) {\r\n                           node.classList.add('active');\r\n                        }\r\n                     }\r\n                     var map = {};\r\n                     var infoconfig = connectMenu ? info.connect : info.config;\r\n                     if (infoconfig) {\r\n                        var hiddenNodes = [];\r\n                        var config = lib.config.mode_config[mode] || {};\r\n                        if (connectMenu) {\r\n                           infoconfig.connect_choose_timeout = {\r\n                              name: '出牌时限',\r\n                              init: '30',\r\n                              item: {\r\n                                 '10': '10秒',\r\n                                 '15': '15秒',\r\n                                 '30': '30秒',\r\n                                 '60': '60秒',\r\n                                 '90': '90秒',\r\n                              },\r\n                              connect: true,\r\n                              frequent: true\r\n                           };\r\n                           infoconfig.connect_chooseCharacter_timeout = {\r\n                              name: '五倍选将时间',\r\n                              init: true,\r\n                              connect: true\r\n                           };\r\n                           infoconfig.connect_observe = {\r\n                              name: '允许旁观',\r\n                              init: true,\r\n                              connect: true\r\n                           };\r\n                           infoconfig.connect_observe_handcard = {\r\n                              name: '允许观看手牌',\r\n                              init: false,\r\n                              connect: true\r\n                           };\r\n                           infoconfig.connect_protect_beginner = {\r\n                              name: '保护新手模式',\r\n                              init: true,\r\n                              connect: true\r\n                           };\r\n                           infoconfig.connect_observe_race = {\r\n                              name: '比赛模式',\r\n                              init: false,\r\n                              connect: true\r\n                           };\r\n                        }\r\n                        for (var j in infoconfig) {\r\n                           if (j === 'update') {\r\n                              continue;\r\n                           }\r\n                           var cfg = copyObj(infoconfig[j]);\r\n                           cfg._name = j;\r\n                           cfg.mode = mode;\r\n                           if (!config.hasOwnProperty(j)) {\r\n                              game.saveConfig(j, cfg.init, mode);\r\n                           }\r\n                           else {\r\n                              cfg.init = config[j];\r\n                           }\r\n                           if (!cfg.onclick) {\r\n                              cfg.onclick = function (result) {\r\n                                 var cfg = this._link.config;\r\n                                 game.saveConfig(cfg._name, result, mode);\r\n                                 if (cfg.onsave) {\r\n                                    cfg.onsave.call(this, result);\r\n                                 }\r\n                                 if (!_status.connectMode || game.online) {\r\n                                    if (typeof cfg.restart == 'function') {\r\n                                       if (cfg.restart()) {\r\n                                          startButton.classList.add('glowing');\r\n                                       }\r\n                                    }\r\n                                    else if (cfg.restart) {\r\n                                       startButton.classList.add('glowing');\r\n                                    }\r\n                                 }\r\n                              };\r\n                           }\r\n                           if (infoconfig.update) {\r\n                              cfg.update = function () {\r\n                                 infoconfig.update(config, map);\r\n                              };\r\n                           }\r\n                           var cfgnode = createConfig(cfg);\r\n                           map[j] = cfgnode;\r\n                           if (cfg.frequent) {\r\n                              page.appendChild(cfgnode);\r\n                           }\r\n                           else {\r\n                              cfgnode.classList.add('auto-hide');\r\n                              hiddenNodes.push(cfgnode);\r\n                           }\r\n                        }\r\n                        if (!connectMenu) {\r\n                           var move = ui.create.div('.auto-hide.config', '<div style=\"margin-right:10px\" class=\"pointerdiv\">上移↑</div><div class=\"pointerdiv\">下移↓</div>');\r\n                           move.firstChild.listen(function () {\r\n                              if (node.previousSibling) {\r\n                                 node.parentNode.insertBefore(node, node.previousSibling);\r\n                                 var order = [];\r\n                                 for (var i = 0; i < node.parentNode.childNodes.length; i++) {\r\n                                    order.push(node.parentNode.childNodes[i].mode);\r\n                                 }\r\n                                 game.saveConfig('modeorder', order);\r\n                              }\r\n                           });\r\n                           move.lastChild.listen(function () {\r\n                              if (node.nextSibling) {\r\n                                 if (node.nextSibling.nextSibling) {\r\n                                    node.parentNode.insertBefore(node, node.nextSibling.nextSibling);\r\n                                 }\r\n                                 else {\r\n                                    node.parentNode.insertBefore(node.nextSibling, node);\r\n                                 }\r\n                                 var order = [];\r\n                                 for (var i = 0; i < node.parentNode.childNodes.length; i++) {\r\n                                    order.push(node.parentNode.childNodes[i].mode);\r\n                                 }\r\n                                 game.saveConfig('modeorder', order);\r\n                              }\r\n                           });\r\n                           hiddenNodes.push(move);\r\n                        }\r\n                        var expanded = false;\r\n                        var hasexpand = true;\r\n                        if (hiddenNodes.length) {\r\n                           if (lib.config.fold_mode) {\r\n                              var clickmore = function (type) {\r\n                                 if (type === 'expand' && expanded) return;\r\n                                 if (type === 'unexpand' && !expanded) return;\r\n                                 if (expanded) {\r\n                                    this.classList.remove('on');\r\n                                    this.parentNode.classList.remove('expanded');\r\n                                 }\r\n                                 else {\r\n                                    this.classList.add('on');\r\n                                    this.parentNode.classList.add('expanded');\r\n                                 }\r\n                                 expanded = !expanded;\r\n                              };\r\n                              var morenodes = ui.create.div('.config.more', '更多 <div>&gt;</div>', page);\r\n                              morenodes.listen(clickmore);\r\n                              morenodes._onclick = clickmore;\r\n                              page.morenodes = morenodes;\r\n                           }\r\n                           else {\r\n                              page.classList.add('expanded');\r\n                              if (!connectMenu) {\r\n                                 page.classList.add('expanded2');\r\n                              }\r\n                           }\r\n                           for (var k = 0; k < hiddenNodes.length; k++) {\r\n                              page.appendChild(hiddenNodes[k]);\r\n                           }\r\n                        }\r\n                        else {\r\n                           hasexpand = false;\r\n                        }\r\n                        if (!connectMenu) {\r\n                           var hidemode = ui.create.div('.config.pointerspan', '<span>隐藏此模式</span>', page, function () {\r\n                              if (this.firstChild.innerHTML == '隐藏此模式') {\r\n                                 this.firstChild.innerHTML = '此模式将在重启后隐藏';\r\n                                 lib.config.hiddenModePack.add(mode);\r\n                                 if (!lib.config.prompt_hidepack) {\r\n                                    alert('隐藏的扩展包可通过选项-其它-重置隐藏内容恢复');\r\n                                    game.saveConfig('prompt_hidepack', true);\r\n                                 }\r\n                              }\r\n                              else {\r\n                                 this.firstChild.innerHTML = '隐藏此模式';\r\n                                 lib.config.hiddenModePack.remove(mode);\r\n                              }\r\n                              game.saveConfig('hiddenModePack', lib.config.hiddenModePack);\r\n                           });\r\n                           if (hasexpand) {\r\n                              hidemode.classList.add('auto-hide');\r\n                           }\r\n                        }\r\n                        if (infoconfig.update) {\r\n                           infoconfig.update(config, map);\r\n                           node.update = function () {\r\n                              infoconfig.update(config, map);\r\n                           }\r\n                        }\r\n                     }\r\n                     if (connectMenu) {\r\n                        menuUpdates.push(function () {\r\n                           if (_status.waitingForPlayer) {\r\n                              if (map.connect_player_number) {\r\n                                 map.connect_player_number.style.display = 'none';\r\n                              }\r\n                              if (map.connect_versus_mode) {\r\n                                 map.connect_versus_mode.style.display = 'none';\r\n                              }\r\n                           }\r\n                        })\r\n                     }\r\n                     return node;\r\n                  };\r\n                  var modeorder = lib.config.modeorder || [];\r\n                  for (var i in lib.mode) {\r\n                     modeorder.add(i);\r\n                  }\r\n                  for (var i = 0; i < modeorder.length; i++) {\r\n                     if (connectMenu) {\r\n                        if (!lib.mode[modeorder[i]].connect) continue;\r\n                        if (!lib.config['connect_' + modeorder[i] + '_banned']) {\r\n                           lib.config['connect_' + modeorder[i] + '_banned'] = [];\r\n                        }\r\n                        if (!lib.config['connect_' + modeorder[i] + '_bannedcards']) {\r\n                           lib.config['connect_' + modeorder[i] + '_bannedcards'] = [];\r\n                        }\r\n                     }\r\n                     if (lib.config.all.mode.contains(modeorder[i])) {\r\n                        createModeConfig(modeorder[i], start.firstChild);\r\n                     }\r\n                  }\r\n                  var active = start.firstChild.querySelector('.active');\r\n                  if (!active) {\r\n                     active = start.firstChild.firstChild;\r\n                     active.classList.add('active');\r\n                  }\r\n                  rightPane.appendChild(active.link);\r\n                  if (lib.config.fold_mode) {\r\n                     rightPane.addEventListener('mousewheel', function (e) {\r\n                        var morenodes = this.firstChild.morenodes;\r\n                        if (morenodes) {\r\n                           if (e.wheelDelta < 0) {\r\n                              morenodes._onclick.call(morenodes, 'expand');\r\n                           }\r\n                           else if (this.scrollTop == 0) {\r\n                              morenodes._onclick.call(morenodes, 'unexpand');\r\n                           }\r\n                        }\r\n                     }, { passive: true });\r\n                  }\r\n               }());\r\n\r\n               (function () {\r\n                  if (connectMenu) return;\r\n                  var start = menuxpages.shift();\r\n                  var rightPane = start.lastChild;\r\n\r\n                  var clickMode = function () {\r\n                     var active = this.parentNode.querySelector('.active');\r\n                     if (active === this) {\r\n                        return;\r\n                     }\r\n                     active.classList.remove('active');\r\n                     active.link.remove();\r\n                     active = this;\r\n                     this.classList.add('active');\r\n                     rightPane.appendChild(this.link);\r\n                  };\r\n\r\n                  var clickAutoSkill = function (bool) {\r\n                     var name = this._link.config._name;\r\n                     var list = lib.config.autoskilllist;\r\n                     if (bool) {\r\n                        list.remove(name);\r\n                     }\r\n                     else {\r\n                        list.add(name);\r\n                     }\r\n                     game.saveConfig('autoskilllist', list);\r\n                  };\r\n                  var skilllistexpanded = game.expandSkills(lib.skilllist);\r\n                  for (var i in lib.skill) {\r\n                     if (!skilllistexpanded.contains(i)) continue;\r\n                     if (lib.skill[i].frequent && lib.translate[i]) {\r\n                        lib.configMenu.skill.config[i] = {\r\n                           name: lib.translate[i + '_noconf'] || lib.translate[i],\r\n                           init: true,\r\n                           type: 'autoskill',\r\n                           onclick: clickAutoSkill,\r\n                           intro: lib.translate[i + '_info']\r\n                        }\r\n                     }\r\n                  }\r\n                  var clickBanSkill = function (bool) {\r\n                     var name = this._link.config._name;\r\n                     var list = lib.config.forbidlist;\r\n                     if (bool) {\r\n                        list.remove(name);\r\n                     }\r\n                     else {\r\n                        list.add(name);\r\n                     }\r\n                     game.saveConfig('forbidlist', list);\r\n                  };\r\n                  var forbid = lib.config.forbid;\r\n                  if (!lib.config.forbidlist) {\r\n                     game.saveConfig('forbidlist', []);\r\n                  }\r\n                  for (var i = 0; i < forbid.length; i++) {\r\n                     var skip = false;\r\n                     var str = '';\r\n                     var str2 = '';\r\n                     var str3 = '';\r\n                     for (var j = 0; j < forbid[i].length; j++) {\r\n                        if (!lib.skilllist.contains(forbid[i][j])) {\r\n                           skip = true;\r\n                           break;\r\n                        }\r\n                        str += get.translation(forbid[i][j]) + '+';\r\n                        str2 += forbid[i][j] + '+';\r\n                        str3 += get.translation(forbid[i][j]) + '：' + lib.translate[forbid[i][j] + '_info'];\r\n                        if (j < forbid[i].length - 1) {\r\n                           str3 += '<div class=\"placeholder slim\" style=\"display:block;height:8px\"></div>';\r\n                        }\r\n                     }\r\n                     if (skip) continue;\r\n                     str = str.slice(0, str.length - 1);\r\n                     str2 = str2.slice(0, str2.length - 1);\r\n\r\n                     lib.configMenu.skill.config[str2] = {\r\n                        name: str,\r\n                        init: true,\r\n                        type: 'banskill',\r\n                        onclick: clickBanSkill,\r\n                        intro: str3\r\n                     }\r\n                  }\r\n\r\n                  var updateView = null;\r\n                  var updateAppearence = null;\r\n                  var createModeConfig = function (mode, position) {\r\n                     var info = lib.configMenu[mode];\r\n                     var page = ui.create.div('');\r\n                     var node = ui.create.div('.menubutton.large', info.name, position, clickMode);\r\n                     node.link = page;\r\n                     node.mode = mode;\r\n                     var map = {};\r\n                     if (info.config) {\r\n                        var hiddenNodes = [];\r\n                        var autoskillNodes = [];\r\n                        var banskillNodes = [];\r\n                        var custombanskillNodes = [];\r\n                        var banskill;\r\n\r\n                        if (mode == 'skill') {\r\n                           var autoskillexpanded = false;\r\n                           var banskillexpanded = false;\r\n                           ui.create.div('.config.more', '自动发动 <div>&gt;</div>', page, function () {\r\n                              if (autoskillexpanded) {\r\n                                 this.classList.remove('on');\r\n                                 for (var k = 0; k < autoskillNodes.length; k++) {\r\n                                    autoskillNodes[k].style.display = 'none';\r\n                                 }\r\n                              }\r\n                              else {\r\n                                 this.classList.add('on');\r\n                                 for (var k = 0; k < autoskillNodes.length; k++) {\r\n                                    autoskillNodes[k].style.display = '';\r\n                                 }\r\n                              }\r\n                              autoskillexpanded = !autoskillexpanded;\r\n                           });\r\n                           banskill = ui.create.div('.config.more', '双将禁配 <div>&gt;</div>', page, function () {\r\n                              if (banskillexpanded) {\r\n                                 this.classList.remove('on');\r\n                                 for (var k = 0; k < banskillNodes.length; k++) {\r\n                                    banskillNodes[k].style.display = 'none';\r\n                                 }\r\n                              }\r\n                              else {\r\n                                 this.classList.add('on');\r\n                                 for (var k = 0; k < banskillNodes.length; k++) {\r\n                                    banskillNodes[k].style.display = '';\r\n                                 }\r\n                              }\r\n                              banskillexpanded = !banskillexpanded;\r\n                           });\r\n\r\n                           var banskilladd = ui.create.div('.config.indent', '<span class=\"pointerdiv\">添加...</span>', page, function () {\r\n                              this.nextSibling.classList.toggle('hidden');\r\n                           });\r\n                           banskilladd.style.display = 'none';\r\n                           banskillNodes.push(banskilladd);\r\n\r\n                           var banskilladdNode = ui.create.div('.config.indent.hidden.banskilladd', page);\r\n                           banskilladdNode.style.display = 'none';\r\n                           banskillNodes.push(banskilladdNode);\r\n\r\n                           var matchBanSkill = function (skills1, skills2) {\r\n                              if (skills1.length != skills2.length) return false;\r\n                              for (var i = 0; i < skills1.length; i++) {\r\n                                 if (!skills2.contains(skills1[i])) return false;\r\n                              }\r\n                              return true;\r\n                           }\r\n                           var deleteCustomBanSkill = function () {\r\n                              for (var i = 0; i < lib.config.customforbid.length; i++) {\r\n                                 if (matchBanSkill(lib.config.customforbid[i], this.parentNode.link)) {\r\n                                    lib.config.customforbid.splice(i--, 1);\r\n                                    break;\r\n                                 }\r\n                              }\r\n                              game.saveConfig('customforbid', lib.config.customforbid);\r\n                              this.parentNode.remove();\r\n                           }\r\n                           var createCustomBanSkill = function (skills) {\r\n                              var node = ui.create.div('.config.indent.toggle');\r\n                              node.style.display = 'none';\r\n                              node.link = skills;\r\n                              banskillNodes.push(node);\r\n                              custombanskillNodes.push(node);\r\n                              var str = get.translation(skills[0]);\r\n                              for (var i = 1; i < skills.length; i++) {\r\n                                 str += '+' + get.translation(skills[i]);\r\n                              }\r\n                              node.innerHTML = str;\r\n                              var span = document.createElement('span');\r\n                              span.classList.add('cardpiledelete');\r\n                              span.innerHTML = '删除';\r\n                              span.onclick = deleteCustomBanSkill;\r\n                              node.appendChild(span);\r\n                              page.insertBefore(node, banskilladdNode.nextSibling);\r\n                              return node;\r\n                           };\r\n                           for (var i = 0; i < lib.config.customforbid.length; i++) {\r\n                              createCustomBanSkill(lib.config.customforbid[i]);\r\n                           }\r\n                           (function () {\r\n                              var list = [];\r\n                              for (var i in lib.character) {\r\n                                 if (lib.character[i][3].length)\r\n                                    list.push([i, lib.translate[i]]);\r\n                              }\r\n\r\n                              list.sort(function (a, b) {\r\n                                 a = a[0]; b = b[0];\r\n                                 var aa = a, bb = b;\r\n                                 if (aa.indexOf('_') != -1) {\r\n                                    aa = aa.slice(aa.indexOf('_') + 1);\r\n                                 }\r\n                                 if (bb.indexOf('_') != -1) {\r\n                                    bb = bb.slice(bb.indexOf('_') + 1);\r\n                                 }\r\n                                 if (aa != bb) {\r\n                                    return aa > bb ? 1 : -1;\r\n                                 }\r\n                                 return a > b ? 1 : -1;\r\n                              });\r\n\r\n                              var list2 = [];\r\n                              var skills = lib.character[list[0][0]][3];\r\n                              for (var i = 0; i < skills.length; i++) {\r\n                                 list2.push([skills[i], lib.translate[skills[i]]]);\r\n                              }\r\n\r\n                              var selectname = ui.create.selectlist(list, list[0], banskilladdNode);\r\n                              selectname.onchange = function () {\r\n                                 var skills = lib.character[this.value][3];\r\n                                 skillopt.innerHTML = '';\r\n                                 for (var i = 0; i < skills.length; i++) {\r\n                                    var option = document.createElement('option');\r\n                                    option.value = skills[i];\r\n                                    option.innerHTML = lib.translate[skills[i]];\r\n                                    skillopt.appendChild(option);\r\n                                 }\r\n                              };\r\n                              selectname.style.maxWidth = '85px';\r\n                              var skillopt = ui.create.selectlist(list2, list2[0], banskilladdNode);\r\n\r\n                              var span = document.createElement('span');\r\n                              span.innerHTML = '＋';\r\n                              banskilladdNode.appendChild(span);\r\n                              var br = document.createElement('br');\r\n                              banskilladdNode.appendChild(br);\r\n\r\n                              var selectname2 = ui.create.selectlist(list, list[0], banskilladdNode);\r\n                              selectname2.onchange = function () {\r\n                                 var skills = lib.character[this.value][3];\r\n                                 skillopt2.innerHTML = '';\r\n                                 for (var i = 0; i < skills.length; i++) {\r\n                                    var option = document.createElement('option');\r\n                                    option.value = skills[i];\r\n                                    option.innerHTML = lib.translate[skills[i]];\r\n                                    skillopt2.appendChild(option);\r\n                                 }\r\n                              };\r\n                              selectname2.style.maxWidth = '85px';\r\n                              var skillopt2 = ui.create.selectlist(list2, list2[0], banskilladdNode);\r\n                              var confirmbutton = document.createElement('button');\r\n                              confirmbutton.innerHTML = '确定';\r\n                              banskilladdNode.appendChild(confirmbutton);\r\n\r\n                              confirmbutton.onclick = function () {\r\n                                 var skills = [skillopt.value, skillopt2.value];\r\n                                 if (skills[0] == skills[1]) {\r\n                                    skills.shift();\r\n                                 }\r\n                                 if (!lib.config.customforbid) return;\r\n                                 for (var i = 0; i < lib.config.customforbid.length; i++) {\r\n                                    if (matchBanSkill(lib.config.customforbid[i], skills)) return;\r\n                                 }\r\n                                 lib.config.customforbid.push(skills);\r\n                                 game.saveConfig('customforbid', lib.config.customforbid);\r\n                                 createCustomBanSkill(skills).style.display = '';\r\n                              }\r\n                           }());\r\n                           page.style.paddingBottom = '10px';\r\n                        }\r\n                        var config = lib.config;\r\n                        if (mode == 'appearence') {\r\n                           updateAppearence = function () {\r\n                              info.config.update(config, map);\r\n                           };\r\n                        }\r\n                        else if (mode == 'view') {\r\n                           updateView = function () {\r\n                              info.config.update(config, map);\r\n                           };\r\n                        }\r\n                        for (var j in info.config) {\r\n                           if (j === 'update') {\r\n                              continue;\r\n                           }\r\n                           var cfg = copyObj(info.config[j]);\r\n                           cfg._name = j;\r\n                           if (!config.hasOwnProperty(j)) {\r\n                              if (cfg.type != 'autoskill' && cfg.type != 'banskill') {\r\n                                 game.saveConfig(j, cfg.init);\r\n                              }\r\n                           }\r\n                           else {\r\n                              cfg.init = config[j];\r\n                           }\r\n                           if (!cfg.onclick) {\r\n                              cfg.onclick = function (result) {\r\n                                 var cfg = this._link.config;\r\n                                 game.saveConfig(cfg._name, result);\r\n                                 if (cfg.onsave) {\r\n                                    cfg.onsave.call(this, result);\r\n                                 }\r\n                              };\r\n                           }\r\n                           if (info.config.update) {\r\n                              if (mode == 'appearence' || mode == 'view') {\r\n                                 cfg.update = function () {\r\n                                    if (updateAppearence) {\r\n                                       updateAppearence();\r\n                                    }\r\n                                    if (updateView) {\r\n                                       updateView();\r\n                                    }\r\n                                 };\r\n                              }\r\n                              else {\r\n                                 cfg.update = function () {\r\n                                    info.config.update(config, map);\r\n                                 };\r\n                              }\r\n                           }\r\n                           var cfgnode = createConfig(cfg);\r\n                           if (cfg.type == 'autoskill') {\r\n                              autoskillNodes.push(cfgnode);\r\n                              // cfgnode.style.transition='all 0s';\r\n                              cfgnode.classList.add('indent');\r\n                              // cfgnode.hide();\r\n                              cfgnode.style.display = 'none';\r\n                           }\r\n                           else if (cfg.type == 'banskill') {\r\n                              banskillNodes.push(cfgnode);\r\n                              // cfgnode.style.transition='all 0s';\r\n                              cfgnode.classList.add('indent');\r\n                              // cfgnode.hide();\r\n                              cfgnode.style.display = 'none';\r\n                           }\r\n                           if (j == 'import_data_button') {\r\n                              ui.import_data_button = cfgnode;\r\n                              cfgnode.hide();\r\n                              cfgnode.querySelector('button').onclick = function () {\r\n                                 var fileToLoad = this.previousSibling.files[0];\r\n                                 if (fileToLoad) {\r\n                                    var fileReader = new FileReader();\r\n                                    fileReader.onload = function (fileLoadedEvent) {\r\n                                       var data = fileLoadedEvent.target.result;\r\n                                       if (!data) return;\r\n                                       try {\r\n                                          data = JSON.parse(lib.init.decode(data));\r\n                                          if (!data || typeof data != 'object') {\r\n                                             throw ('err');\r\n                                          }\r\n                                          if (lib.db && (!data.config || !data.data)) {\r\n                                             throw ('err');\r\n                                          }\r\n                                       }\r\n                                       catch (e) {\r\n                                          console.log(e);\r\n                                          alert('导入失败');\r\n                                          return;\r\n                                       }\r\n                                       alert('导入成功');\r\n                                       if (!lib.db) {\r\n                                          var noname_inited = localStorage.getItem('noname_inited');\r\n                                          var onlineKey = localStorage.getItem(lib.configprefix + 'key');\r\n                                          localStorage.clear();\r\n                                          if (noname_inited) {\r\n                                             localStorage.setItem('noname_inited', noname_inited);\r\n                                          }\r\n                                          if (onlineKey) {\r\n                                             localStorage.setItem(lib.configprefix + 'key', onlineKey);\r\n                                          }\r\n                                          for (var i in data) {\r\n                                             localStorage.setItem(i, data[i]);\r\n                                          }\r\n                                       }\r\n                                       else {\r\n                                          for (var i in data.config) {\r\n                                             game.putDB('config', i, data.config[i]);\r\n                                             lib.config[i] = data.config[i];\r\n                                          }\r\n                                          for (var i in data.data) {\r\n                                             game.putDB('data', i, data.data[i]);\r\n                                          }\r\n                                       }\r\n                                       lib.init.background();\r\n                                       game.reload();\r\n                                    };\r\n                                    fileReader.readAsText(fileToLoad, \"UTF-8\");\r\n                                 }\r\n                              }\r\n                           }\r\n                           else if (j == 'import_music') {\r\n                              cfgnode.querySelector('button').onclick = function () {\r\n                                 if (_status.music_importing) return;\r\n                                 _status.music_importing = true;\r\n                                 var fileToLoad = this.previousSibling.files[0];\r\n                                 if (fileToLoad) {\r\n                                    if (!lib.config.customBackgroundMusic) lib.config.customBackgroundMusic = {};\r\n                                    var name = fileToLoad.name;\r\n                                    if (name.indexOf('.') != -1) {\r\n                                       name = name.slice(0, name.indexOf('.'));\r\n                                    }\r\n                                    var link = (game.writeFile ? 'cdv_' : 'custom_') + name;\r\n                                    if (lib.config.customBackgroundMusic[link]) {\r\n                                       if (!confirm('已经存在文件名称相同的背景音乐，是否仍然要继续导入？')) { _status.music_importing = false; return };\r\n                                       for (var i = 1; i < 1000; i++) {\r\n                                          if (!lib.config.customBackgroundMusic[link + '_' + i]) {\r\n                                             link = link + '_' + i; break;\r\n                                          }\r\n                                       }\r\n                                    }\r\n                                    var callback = function () {\r\n                                       var nodexx = ui.background_music_setting;\r\n                                       var nodeyy = nodexx._link.menu;\r\n                                       var nodezz = nodexx._link.config;\r\n                                       var musicname = link.slice(link.indexOf('_') + 1);\r\n                                       game.prompt('###请输入音乐的名称###' + musicname, true, function (str) {\r\n                                          if (str) musicname = str;\r\n                                          lib.config.customBackgroundMusic[link] = musicname;\r\n                                          lib.config.background_music = link;\r\n                                          lib.config.all.background_music.add(link);\r\n                                          game.saveConfig('background_music', link);\r\n                                          game.saveConfig('customBackgroundMusic', lib.config.customBackgroundMusic);\r\n                                          nodezz.item[link] = lib.config.customBackgroundMusic[link];\r\n                                          var textMenu = ui.create.div('', lib.config.customBackgroundMusic[link], nodeyy, clickMenuItem, nodeyy.childElementCount - 2);\r\n                                          textMenu._link = link;\r\n                                          nodezz.updatex.call(nodexx, []);\r\n                                          _status.music_importing = false;\r\n                                          if (!_status._aozhan) game.playBackgroundMusic();\r\n                                       });\r\n                                    };\r\n                                    if (game.writeFile) {\r\n                                       game.writeFile(fileToLoad, 'audio/background', link + '.mp3', callback);\r\n                                    }\r\n                                    else {\r\n                                       game.putDB('audio', link, fileToLoad, callback);\r\n                                    }\r\n                                 }\r\n                              }\r\n                           }\r\n                           else if (j == 'extension_source') {\r\n                              ui.extension_source = cfgnode;\r\n                              cfgnode.updateInner = function () {\r\n                                 this._link.choosing.innerHTML = lib.config.extension_source;\r\n                              }\r\n                           }\r\n                           map[j] = cfgnode;\r\n                           if (!cfg.unfrequent) {\r\n                              if (cfg.type == 'autoskill') {\r\n                                 page.insertBefore(cfgnode, banskill);\r\n                              }\r\n                              else {\r\n                                 page.appendChild(cfgnode);\r\n                              }\r\n                           }\r\n                           else {\r\n                              // cfgnode.classList.add('auto-hide');\r\n                              hiddenNodes.push(cfgnode);\r\n                           }\r\n                        }\r\n                        if (hiddenNodes.length) {\r\n                           page.classList.add('morenodes');\r\n                           for (var k = 0; k < hiddenNodes.length; k++) {\r\n                              page.appendChild(hiddenNodes[k]);\r\n                           }\r\n                        }\r\n                        if (info.config.update) {\r\n                           info.config.update(config, map);\r\n                        }\r\n                     }\r\n                     return node;\r\n                  };\r\n\r\n                  for (var i in lib.configMenu) {\r\n                     if (i != 'others') createModeConfig(i, start.firstChild);\r\n                  }\r\n                  createModeConfig('others', start.firstChild);\r\n\r\n                  var active = start.firstChild.querySelector('.active');\r\n                  if (!active) {\r\n                     active = start.firstChild.firstChild;\r\n                     active.classList.add('active');\r\n                  }\r\n                  rightPane.appendChild(active.link);\r\n               }());\r\n\r\n               (function () {\r\n                  var start = menuxpages.shift();\r\n                  var rightPane = start.lastChild;\r\n\r\n                  var clickMode = function () {\r\n                     var active = this.parentNode.querySelector('.active');\r\n                     if (active) {\r\n                        if (active === this) {\r\n                           return;\r\n                        }\r\n                        active.classList.remove('active');\r\n                        active.link.remove();\r\n                     }\r\n                     this.classList.add('active');\r\n                     updateActive(this);\r\n                     rightPane.appendChild(this.link);\r\n                  };\r\n                  updateActive = function (node) {\r\n                     if (!node) {\r\n                        node = start.firstChild.querySelector('.active');\r\n                        if (!node) {\r\n                           return;\r\n                        }\r\n                     }\r\n                     for (var i = 0; i < node.link.childElementCount; i++) {\r\n                        if (node.link.childNodes[i].updateBanned) {\r\n                           node.link.childNodes[i].updateBanned();\r\n                        }\r\n                     }\r\n                  };\r\n                  var updateNodes = function () {\r\n                     for (var i = 0; i < start.firstChild.childNodes.length; i++) {\r\n                        var node = start.firstChild.childNodes[i];\r\n                        if (node.link) {\r\n                           if (node.mode.indexOf('mode_') == 0) continue;\r\n                           if (node.mode == 'custom') continue;\r\n                           if (connectMenu) {\r\n                              if (!lib.config.connect_characters.contains(node.mode)) {\r\n                                 node.classList.remove('off');\r\n                                 node.link.firstChild.classList.add('on');\r\n                              }\r\n                              else {\r\n                                 node.classList.add('off');\r\n                                 node.link.firstChild.classList.remove('on');\r\n                              }\r\n                           }\r\n                           else {\r\n                              if (lib.config.characters.contains(node.mode)) {\r\n                                 node.classList.remove('off');\r\n                                 node.link.firstChild.classList.add('on');\r\n                              }\r\n                              else {\r\n                                 node.classList.add('off');\r\n                                 node.link.firstChild.classList.remove('on');\r\n                              }\r\n                           }\r\n                        }\r\n                     }\r\n                  }\r\n                  var togglePack = function (bool) {\r\n                     var name = this._link.config._name;\r\n                     if (connectMenu) {\r\n                        if (!bool) {\r\n                           lib.config.connect_characters.add(name);\r\n                        }\r\n                        else {\r\n                           lib.config.connect_characters.remove(name);\r\n                        }\r\n                        game.saveConfig('connect_characters', lib.config.connect_characters);\r\n                     }\r\n                     else {\r\n                        if (bool) {\r\n                           lib.config.characters.add(name);\r\n                        }\r\n                        else {\r\n                           lib.config.characters.remove(name);\r\n                        }\r\n                        game.saveConfig('characters', lib.config.characters);\r\n                     }\r\n                     updateNodes();\r\n                  };\r\n\r\n                  var createModeConfig = function (mode, position, position2) {\r\n                     var info = lib.characterPack[mode];\r\n                     var page = ui.create.div('');\r\n                     var node = ui.create.div('.menubutton.large', lib.translate[mode + '_character_config'], position, clickMode);\r\n                     if (node.innerHTML.length >= 5) {\r\n                        node.classList.add('smallfont');\r\n                     }\r\n                     if (position2) {\r\n                        position.insertBefore(node, position2);\r\n                     }\r\n                     node.link = page;\r\n                     node.mode = mode;\r\n                     page.node = node;\r\n                     var list = [];\r\n                     var boolAI = true;\r\n                     var alterableSkills = [];\r\n                     var alterableCharacters = [];\r\n                     var charactersToAlter = [];\r\n                     for (var i in info) {\r\n                        if (info[i][4] && info[i][4].contains('unseen')) continue;\r\n                        if (connectMenu && lib.connectBanned.contains(i)) continue;\r\n                        if (connectMenu && lib.configOL.protect_beginner && get.is.banForBeginner(i)) return true;\r\n                        list.push(i);\r\n                        if (boolAI && !lib.config.forbidai_user.contains(i)) boolAI = false;\r\n                        for (var j = 0; j < info[i][3].length; j++) {\r\n                           if (!lib.skill[info[i][3][j]]) {\r\n                              continue;\r\n                           }\r\n                           if (lib.skill[info[i][3][j]].alter) {\r\n                              alterableSkills.add(info[i][3][j]);\r\n                              alterableCharacters.add(i);\r\n                              if (lib.config.vintageSkills.contains(info[i][3][j])) {\r\n                                 charactersToAlter.add(i);\r\n                              }\r\n                           }\r\n                        }\r\n                     }\r\n                     alterableCharacters.sort();\r\n                     var getGroup = function (name) {\r\n                        var group = get.is.double(name, true);\r\n                        if (group) return group[0];\r\n                        return lib.character[name][1];\r\n                     },\r\n                        groupSort = function (name) {\r\n                           if (!lib.character[name]) return 50;\r\n                           var group = getGroup(name);\r\n                           if (group == 'vtuber') return 40;\r\n                           if (group == 'clubs') return 41;\r\n                           var list = get.groups();\r\n                           if (list.contains(group)) return list.indexOf(group);\r\n                           return 49;\r\n                        };\r\n                     list.sort(function (a, b) {\r\n                        var del = groupSort(a) - groupSort(b);\r\n                        if (del != 0) return del;\r\n                        var aa = a, bb = b;\r\n                        if (a.indexOf('_') != -1) {\r\n                           a = a.slice(a.lastIndexOf('_') + 1);\r\n                        }\r\n                        if (b.indexOf('_') != -1) {\r\n                           b = b.slice(b.lastIndexOf('_') + 1);\r\n                        }\r\n                        if (a != b) {\r\n                           return a > b ? 1 : -1;\r\n                        }\r\n                        return aa > bb ? 1 : -1;\r\n                     });\r\n                     var list2 = list.slice(0);\r\n                     var cfgnode = createConfig({\r\n                        name: '开启',\r\n                        _name: mode,\r\n                        init: lib.config.characters.contains(mode),\r\n                        onclick: togglePack\r\n                     });\r\n                     var cfgnodeAI = createConfig({\r\n                        name: '仅点将可用',\r\n                        _name: mode,\r\n                        init: boolAI,\r\n                        intro: '将该武将包内的武将全部设置为仅点将可用',\r\n                        onclick: function (bool) {\r\n                           if (bool) {\r\n                              for (var i = 0; i < list.length; i++) {\r\n                                 lib.config.forbidai_user.add(list[i]);\r\n                              }\r\n                           }\r\n                           else {\r\n                              for (var i = 0; i < list.length; i++) {\r\n                                 lib.config.forbidai_user.remove(list[i]);\r\n                              }\r\n                           }\r\n                           game.saveConfig('forbidai_user', lib.config.forbidai_user);\r\n                        },\r\n                     });\r\n                     if (mode.indexOf('mode_') != 0) {\r\n                        cfgnodeAI.style.marginTop = '0px';\r\n                        page.appendChild(cfgnode);\r\n                        page.appendChild(cfgnodeAI);\r\n                        if (alterableCharacters.length) {\r\n                           var cfgnode2 = createConfig({\r\n                              name: '新版替换',\r\n                              _name: mode,\r\n                              init: charactersToAlter.length == 0,\r\n                              intro: '以下武将将被修改：' + get.translation(alterableCharacters),\r\n                              onclick: function (bool) {\r\n                                 if (bool) {\r\n                                    for (var i = 0; i < alterableSkills.length; i++) {\r\n                                       lib.config.vintageSkills.remove(alterableSkills[i]);\r\n                                       lib.translate[alterableSkills[i] + '_info'] = lib.translate[alterableSkills[i] + '_info_alter'];\r\n                                    }\r\n                                 }\r\n                                 else {\r\n                                    for (var i = 0; i < alterableSkills.length; i++) {\r\n                                       lib.config.vintageSkills.add(alterableSkills[i]);\r\n                                       lib.translate[alterableSkills[i] + '_info'] = lib.translate[alterableSkills[i] + '_info_origin'];\r\n                                    }\r\n                                 }\r\n                                 game.saveConfig('vintageSkills', lib.config.vintageSkills);\r\n                              }\r\n                           });\r\n                           cfgnode2.style.marginTop = '0px';\r\n                           page.appendChild(cfgnode2);\r\n                        }\r\n                     }\r\n                     else if (mode.indexOf('mode_extension') == 0) {\r\n                        page.appendChild(cfgnodeAI);\r\n                     }\r\n                     else {\r\n                        page.style.paddingTop = '8px';\r\n                     }\r\n                     var banCharacter = function (e) {\r\n                        if (_status.clicked) {\r\n                           _status.clicked = false;\r\n                           return;\r\n                        }\r\n                        if (mode.indexOf('mode_') == 0 && mode.indexOf('mode_extension_') != 0 &&\r\n                           mode != 'mode_favourite' && mode != 'mode_banned') {\r\n                           if (!connectMenu && lib.config.show_charactercard) {\r\n                              ui.click.charactercard(this.link, this, mode == 'mode_guozhan' ? 'guozhan' : true);\r\n                           }\r\n                           return;\r\n                        }\r\n                        ui.click.touchpop();\r\n                        this._banning = connectMenu ? 'online' : 'offline';\r\n                        if (!connectMenu && lib.config.show_charactercard) {\r\n                           ui.click.charactercard(this.link, this);\r\n                        }\r\n                        else {\r\n                           ui.click.intro.call(this, e);\r\n                        }\r\n                        _status.clicked = false;\r\n                        delete this._banning;\r\n                     };\r\n                     var updateBanned = function () {\r\n                        var list;\r\n                        if (connectMenu) {\r\n                           var mode = menux.pages[0].firstChild.querySelector('.active');\r\n                           if (mode && mode.mode) {\r\n                              list = lib.config['connect_' + mode.mode + '_banned'];\r\n                           }\r\n                        }\r\n                        else {\r\n                           list = lib.config[get.mode() + '_banned'];\r\n                        }\r\n                        if (list && list.contains(this.link)) {\r\n                           this.classList.add('banned');\r\n                        }\r\n                        else {\r\n                           this.classList.remove('banned');\r\n                        }\r\n                     };\r\n                     if (lib.characterSort[mode]) {\r\n                        var listb = [];\r\n                        if (!connectMenu) {\r\n                           listb = lib.config[get.mode() + '_banned'] || [];\r\n                        }\r\n                        else {\r\n                           var modex = menux.pages[0].firstChild.querySelector('.active');\r\n                           if (modex && modex.mode) {\r\n                              listb = lib.config['connect_' + modex.mode + '_banned'];\r\n                           }\r\n                        }\r\n                        for (var pak in lib.characterSort[mode]) {\r\n                           var info = lib.characterSort[mode][pak];\r\n                           var listx = [];\r\n                           var boolx = false;\r\n                           for (var ii = 0; ii < list2.length; ii++) {\r\n                              if (info.contains(list2[ii])) {\r\n                                 listx.add(list2[ii]);\r\n                                 if (!listb.contains(list2[ii])) boolx = true;\r\n                                 list2.splice(ii--, 1);\r\n                              }\r\n                           }\r\n                           if (listx.length) {\r\n                              var cfgnodeY = {\r\n                                 name: lib.translate[pak],\r\n                                 _name: pak,\r\n                                 init: boolx,\r\n                                 onclick: function (bool) {\r\n                                    var banned = [];\r\n                                    if (connectMenu) {\r\n                                       var modex = menux.pages[0].firstChild.querySelector('.active');\r\n                                       if (modex && modex.mode) {\r\n                                          banned = lib.config['connect_' + modex.mode + '_banned'];\r\n                                       }\r\n                                    }\r\n                                    else if (_status.connectMode) return;\r\n                                    else banned = lib.config[get.mode() + '_banned'] || [];\r\n                                    var listx = lib.characterSort[mode][this._link.config._name];\r\n                                    if (bool) {\r\n                                       for (var i = 0; i < listx.length; i++) {\r\n                                          banned.remove(listx[i]);\r\n                                       }\r\n                                    }\r\n                                    else {\r\n                                       for (var i = 0; i < listx.length; i++) {\r\n                                          banned.add(listx[i]);\r\n                                       }\r\n                                    }\r\n                                    game.saveConfig(connectMenu ? ('connect_' + modex.mode + '_banned') : (get.mode() + '_banned'), banned);\r\n                                    updateActive();\r\n                                 },\r\n                              };\r\n                              if (mode.indexOf('mode_') == 0 && mode.indexOf('mode_extension_') != 0 && mode.indexOf('mode_guozhan') != 0) {\r\n                                 cfgnodeY.clear = true;\r\n                                 delete cfgnodeY.onclick;\r\n                              }\r\n                              var cfgnodeX = createConfig(cfgnodeY);\r\n                              page.appendChild(cfgnodeX);\r\n                              var buttons = ui.create.buttons(listx, 'character', page);\r\n                              for (var i = 0; i < buttons.length; i++) {\r\n                                 buttons[i].classList.add('noclick');\r\n                                 buttons[i].listen(banCharacter);\r\n                                 ui.create.rarity(buttons[i]);\r\n                                 buttons[i].node.hp.style.transition = 'all 0s';\r\n                                 buttons[i].node.hp._innerHTML = buttons[i].node.hp.innerHTML;\r\n                                 if (mode != 'mode_banned') {\r\n                                    buttons[i].updateBanned = updateBanned;\r\n                                 }\r\n                              }\r\n                           }\r\n                        }\r\n                        if (list2.length) {\r\n                           var cfgnodeX = createConfig({\r\n                              name: '其他',\r\n                              _name: 'others',\r\n                              clear: true,\r\n                           });\r\n                           page.appendChild(cfgnodeX);\r\n                           var buttons = ui.create.buttons(list2, 'character', page);\r\n                           for (var i = 0; i < buttons.length; i++) {\r\n                              buttons[i].classList.add('noclick');\r\n                              buttons[i].listen(banCharacter);\r\n                              ui.create.rarity(buttons[i]);\r\n                              buttons[i].node.hp.style.transition = 'all 0s';\r\n                              buttons[i].node.hp._innerHTML = buttons[i].node.hp.innerHTML;\r\n                              if (mode != 'mode_banned') {\r\n                                 buttons[i].updateBanned = updateBanned;\r\n                              }\r\n                           }\r\n                        }\r\n                     }\r\n                     else {\r\n                        var buttons = ui.create.buttons(list, 'character', page);\r\n                        for (var i = 0; i < buttons.length; i++) {\r\n                           buttons[i].classList.add('noclick');\r\n                           ui.create.rarity(buttons[i]);\r\n                           buttons[i].listen(banCharacter);\r\n                           buttons[i].node.hp.style.transition = 'all 0s';\r\n                           buttons[i].node.hp._innerHTML = buttons[i].node.hp.innerHTML;\r\n                           if (mode != 'mode_banned') {\r\n                              buttons[i].updateBanned = updateBanned;\r\n                           }\r\n                        }\r\n                     }\r\n                     page.classList.add('menu-buttons');\r\n                     page.classList.add('leftbutton');\r\n                     // if (!connectMenu) {\r\n                     //     if (mode.indexOf('mode_') != 0) {\r\n                     //         ui.create.div('.config.pointerspan', '<span>隐藏武将包</span>', page, function () {\r\n                     //             if (this.firstChild.innerHTML == '隐藏武将包') {\r\n                     //                 this.firstChild.innerHTML = '武将包将在重启后隐藏';\r\n                     //                 lib.config.hiddenCharacterPack.add(mode);\r\n                     //                 if (!lib.config.prompt_hidepack) {\r\n                     //                     alert('隐藏的扩展包可通过选项-其它-重置隐藏内容恢复');\r\n                     //                     game.saveConfig('prompt_hidepack', true);\r\n                     //                 }\r\n                     //             }\r\n                     //             else {\r\n                     //                 this.firstChild.innerHTML = '隐藏武将包';\r\n                     //                 lib.config.hiddenCharacterPack.remove(mode);\r\n                     //             }\r\n                     //             game.saveConfig('hiddenCharacterPack', lib.config.hiddenCharacterPack);\r\n                     //         });\r\n                     //     }\r\n                     // }\r\n                     return node;\r\n                  };\r\n                  if (lib.config.show_favourite_menu && !connectMenu && Array.isArray(lib.config.favouriteCharacter)) {\r\n                     lib.characterPack.mode_favourite = {};\r\n                     for (var i = 0; i < lib.config.favouriteCharacter.length; i++) {\r\n                        var favname = lib.config.favouriteCharacter[i];\r\n                        if (lib.character[favname]) {\r\n                           lib.characterPack.mode_favourite[favname] = lib.character[favname];\r\n                        }\r\n                     }\r\n                     ui.favouriteCharacter = createModeConfig('mode_favourite', start.firstChild).link;\r\n                     if (get.is.empty(lib.characterPack.mode_favourite)) {\r\n                        ui.favouriteCharacter.node.style.display = 'none';\r\n                     }\r\n                     delete lib.characterPack.mode_favourite;\r\n                  }\r\n                  if (!connectMenu && lib.config.show_ban_menu) {\r\n                     lib.characterPack.mode_banned = {};\r\n                     for (var i = 0; i < lib.config.all.mode.length; i++) {\r\n                        var banned = lib.config[lib.config.all.mode[i] + '_banned'];\r\n                        if (banned) {\r\n                           for (var j = 0; j < banned.length; j++) {\r\n                              if (lib.character[banned[j]]) {\r\n                                 lib.characterPack.mode_banned[banned[j]] = lib.character[banned[j]];\r\n                              }\r\n                           }\r\n                        }\r\n                     }\r\n                     var bannednode = createModeConfig('mode_banned', start.firstChild);\r\n                     if (get.is.empty(lib.characterPack.mode_banned)) {\r\n                        bannednode.style.display = 'none';\r\n                     }\r\n                     delete lib.characterPack.mode_banned;\r\n                  }\r\n                  var characterlist = connectMenu ? lib.connectCharacterPack : lib.config.all.characters;\r\n                  for (var i = 0; i < characterlist.length; i++) {\r\n                     //if(['sololive'].contains(characterlist[i])) continue;\r\n                     createModeConfig(characterlist[i], start.firstChild);\r\n                  }\r\n                  if (!connectMenu) {\r\n                     for (var i in lib.characterPack) {\r\n                        if (i.indexOf('mode_') == 0) {\r\n                           createModeConfig(i, start.firstChild);\r\n                        }\r\n                     }\r\n                  }\r\n                  var active = start.firstChild.querySelector('.active');\r\n                  if (!active) {\r\n                     active = start.firstChild.firstChild;\r\n                     if (active.style.display == 'none') {\r\n                        active = active.nextSibling;\r\n                        if (active.style.display == 'none') {\r\n                           active = active.nextSibling;\r\n                        }\r\n                     }\r\n                     active.classList.add('active');\r\n                     updateActive(active);\r\n                  }\r\n                  rightPane.appendChild(active.link);\r\n\r\n                  if (!connectMenu) {\r\n                     var node1 = ui.create.div('.lefttext', '全部开启', start.firstChild, function () {\r\n                        game.saveConfig('characters', lib.config.all.characters);\r\n                        updateNodes();\r\n                     });\r\n                     var node2 = ui.create.div('.lefttext', '恢复默认', start.firstChild, function () {\r\n                        game.saveConfig('characters', lib.config.defaultcharacters);\r\n                        updateNodes();\r\n                     });\r\n                     node1.style.marginTop = '12px';\r\n                     node2.style.marginTop = '7px';\r\n                  }\r\n\r\n                  updateNodes();\r\n               }());\r\n\r\n               (function () {\r\n                  var start = menuxpages.shift();\r\n                  var rightPane = start.lastChild;\r\n                  var pileCreated = false;\r\n                  var recreatePile = function () {\r\n                     lib.config.customcardpile['当前牌堆'] = [lib.config.bannedpile, lib.config.addedpile];\r\n                     game.saveConfig('customcardpile', lib.config.customcardpile);\r\n                     game.saveConfig('cardpilename', '当前牌堆', true);\r\n                     pileCreated = false;\r\n                  };\r\n\r\n                  var clickMode = function () {\r\n                     var active = this.parentNode.querySelector('.active');\r\n                     if (active === this) {\r\n                        return;\r\n                     }\r\n                     active.classList.remove('active');\r\n                     active.link.remove();\r\n                     active = this;\r\n                     this.classList.add('active');\r\n                     updateActiveCard(this);\r\n                     if (this.mode == 'cardpile') {\r\n                        this.create();\r\n                     }\r\n                     rightPane.appendChild(this.link);\r\n                  };\r\n                  updateActiveCard = function (node) {\r\n                     if (!node) {\r\n                        node = start.firstChild.querySelector('.active');\r\n                        if (!node) {\r\n                           return;\r\n                        }\r\n                     }\r\n                     for (var i = 0; i < node.link.childElementCount; i++) {\r\n                        if (node.link.childNodes[i].updateBanned) {\r\n                           node.link.childNodes[i].updateBanned();\r\n                        }\r\n                     }\r\n                  };\r\n                  var updateNodes = function () {\r\n                     for (var i = 0; i < start.firstChild.childNodes.length; i++) {\r\n                        var node = start.firstChild.childNodes[i];\r\n                        if (node.link) {\r\n                           if (node.mode.indexOf('mode_') == 0) continue;\r\n                           if (node.mode == 'custom') continue;\r\n                           if (node.mode == 'cardpile') continue;\r\n                           if (connectMenu) {\r\n                              if (!lib.config.connect_cards.contains(node.mode)) {\r\n                                 node.classList.remove('off');\r\n                                 node.link.firstChild.classList.add('on');\r\n                              }\r\n                              else {\r\n                                 node.classList.add('off');\r\n                                 node.link.firstChild.classList.remove('on');\r\n                              }\r\n                           }\r\n                           else {\r\n                              if (lib.config.cards.contains(node.mode)) {\r\n                                 node.classList.remove('off');\r\n                                 node.link.firstChild.classList.add('on');\r\n                              }\r\n                              else {\r\n                                 node.classList.add('off');\r\n                                 node.link.firstChild.classList.remove('on');\r\n                              }\r\n                           }\r\n                        }\r\n                     }\r\n                  }\r\n                  var togglePack = function (bool) {\r\n                     var name = this._link.config._name;\r\n                     if (connectMenu) {\r\n                        if (!bool) {\r\n                           lib.config.connect_cards.add(name);\r\n                        }\r\n                        else {\r\n                           lib.config.connect_cards.remove(name);\r\n                        }\r\n                        game.saveConfig('connect_cards', lib.config.connect_cards);\r\n                     }\r\n                     else {\r\n                        if (bool) {\r\n                           lib.config.cards.add(name);\r\n                        }\r\n                        else {\r\n                           lib.config.cards.remove(name);\r\n                        }\r\n                        game.saveConfig('cards', lib.config.cards);\r\n                     }\r\n                     updateNodes();\r\n                  };\r\n                  var toggleCardPile = function (bool) {\r\n                     var name = this._link.config._name;\r\n                     var number = this._link.config._number;\r\n                     if (!lib.config.bannedpile[name]) {\r\n                        lib.config.bannedpile[name] = [];\r\n                     }\r\n                     if (bool) {\r\n                        lib.config.bannedpile[name].remove(number);\r\n                     }\r\n                     else {\r\n                        lib.config.bannedpile[name].add(number);\r\n                     }\r\n                     recreatePile();\r\n                  }\r\n\r\n                  var createModeConfig = function (mode, position) {\r\n                     var info = lib.cardPack[mode];\r\n                     var page = ui.create.div('');\r\n                     var node = ui.create.div('.menubutton.large', lib.translate[mode + '_card_config'], position, clickMode);\r\n                     if (node.innerHTML.length >= 5) {\r\n                        node.classList.add('smallfont');\r\n                     }\r\n                     node.link = page;\r\n                     node.mode = mode;\r\n                     var list = [];\r\n                     for (var i = 0; i < info.length; i++) {\r\n                        if (!lib.card[info[i]] || (lib.card[info[i]].derivation && mode != 'mode_derivation')) continue;\r\n                        list.push(['', get.translation(get.type(info[i], 'trick')), info[i]]);\r\n                     }\r\n                     var sortCard = function (card) {\r\n                        var type = lib.card[card[2]].type;\r\n                        var subtype = lib.card[card[2]].subtype;\r\n                        if (lib.cardType[subtype]) {\r\n                           return lib.cardType[subtype];\r\n                        }\r\n                        if (lib.cardType[type]) {\r\n                           return lib.cardType[type];\r\n                        }\r\n                        switch (type) {\r\n                           case 'basic': return 0;\r\n                           case 'chess': return 1.5;\r\n                           case 'trick': return 2;\r\n                           case 'delay': return 3;\r\n                           case 'equip': {\r\n                              switch (lib.card[card[2]].subtype) {\r\n                                 case 'equip1': return 4.1;\r\n                                 case 'equip2': return 4.2;\r\n                                 case 'equip3': return 4.3;\r\n                                 case 'equip4': return 4.4;\r\n                                 case 'equip5': return 4.5;\r\n                                 default: return 4;\r\n                              }\r\n                           }\r\n                           case 'zhenfa': return 5;\r\n                           default: return 6;\r\n                        }\r\n                     }\r\n                     list.sort(function (a, b) {\r\n                        var sort1 = sortCard(a);\r\n                        var sort2 = sortCard(b);\r\n                        if (sort1 == sort2) {\r\n                           return (b[2] < a[2]) ? 1 : -1;\r\n                        }\r\n                        else if (sort1 > sort2) {\r\n                           return 1;\r\n                        }\r\n                        else {\r\n                           return -1;\r\n                        }\r\n                     });\r\n                     var cfgnode = createConfig({\r\n                        name: '开启',\r\n                        _name: mode,\r\n                        init: lib.config.cards.contains(mode),\r\n                        onclick: togglePack\r\n                     });\r\n                     if (mode.indexOf('mode_') != 0) {\r\n                        page.appendChild(cfgnode);\r\n                     }\r\n                     else {\r\n                        page.style.paddingTop = '8px';\r\n                     }\r\n                     var banCard = function (e) {\r\n                        if (_status.clicked) {\r\n                           _status.clicked = false;\r\n                           return;\r\n                        }\r\n                        if (mode.indexOf('mode_') == 0 && mode.indexOf('mode_extension_') != 0 && mode != 'mode_banned') {\r\n                           return;\r\n                        }\r\n                        ui.click.touchpop();\r\n                        this._banning = connectMenu ? 'online' : 'offline';\r\n                        ui.click.intro.call(this, e);\r\n                        _status.clicked = false;\r\n                        delete this._banning;\r\n                     };\r\n                     var updateBanned = function () {\r\n                        var list;\r\n                        if (connectMenu) {\r\n                           var mode = menux.pages[0].firstChild.querySelector('.active');\r\n                           if (mode && mode.mode) {\r\n                              list = lib.config['connect_' + mode.mode + '_bannedcards'];\r\n                           }\r\n                        }\r\n                        else {\r\n                           list = lib.config[get.mode() + '_bannedcards'];\r\n                        }\r\n                        if (list && list.contains(this.link[2])) {\r\n                           this.classList.add('banned');\r\n                        }\r\n                        else {\r\n                           this.classList.remove('banned');\r\n                        }\r\n                     };\r\n                     var buttons = ui.create.buttons(list, 'vcard', page);\r\n                     for (var i = 0; i < buttons.length; i++) {\r\n                        buttons[i].classList.add('noclick');\r\n                        buttons[i].listen(banCard);\r\n                        if (mode != 'mode_banned') {\r\n                           buttons[i].updateBanned = updateBanned;\r\n                        }\r\n                     }\r\n                     page.classList.add('menu-buttons');\r\n                     page.classList.add('leftbutton');\r\n                     if (!connectMenu && mode.indexOf('mode_') != 0) {\r\n                        ui.create.div('.config.pointerspan', '<span>隐藏卡牌包</span>', page, function () {\r\n                           if (this.firstChild.innerHTML == '隐藏卡牌包') {\r\n                              this.firstChild.innerHTML = '卡牌包将在重启后隐藏';\r\n                              lib.config.hiddenCardPack.add(mode);\r\n                              if (!lib.config.prompt_hidepack) {\r\n                                 alert('隐藏的扩展包可通过选项-其它-重置隐藏内容恢复');\r\n                                 game.saveConfig('prompt_hidepack', true);\r\n                              }\r\n                           }\r\n                           else {\r\n                              this.firstChild.innerHTML = '隐藏卡牌包';\r\n                              lib.config.hiddenCardPack.remove(mode);\r\n                           }\r\n                           game.saveConfig('hiddenCardPack', lib.config.hiddenCardPack);\r\n                        });\r\n                     }\r\n                     if (mode.indexOf('mode_') != 0 && lib.cardPile[mode]) {\r\n                        var cardpileNodes = [];\r\n                        var cardpileexpanded = false;\r\n                        if (!lib.config.bannedpile[mode]) {\r\n                           lib.config.bannedpile[mode] = [];\r\n                        }\r\n                        if (!lib.config.addedpile[mode]) {\r\n                           lib.config.addedpile[mode] = [];\r\n                        }\r\n                        ui.create.div('.config.more.pile', '编辑牌堆 <div>&gt;</div>', page, function () {\r\n                           if (cardpileexpanded) {\r\n                              this.classList.remove('on');\r\n                              for (var k = 0; k < cardpileNodes.length; k++) {\r\n                                 cardpileNodes[k].style.display = 'none';\r\n                              }\r\n                           }\r\n                           else {\r\n                              this.classList.add('on');\r\n                              for (var k = 0; k < cardpileNodes.length; k++) {\r\n                                 cardpileNodes[k].style.display = '';\r\n                              }\r\n                           }\r\n                           cardpileexpanded = !cardpileexpanded;\r\n                        });\r\n                        var cfgnode = ui.create.div(page, '.config.pointerspan.cardpilecfg.toggle');\r\n                        var cfgaddcard = ui.create.node('button', '', '添加卡牌', cfgnode, function () {\r\n                           this.parentNode.nextSibling.classList.toggle('hidden');\r\n                        });\r\n                        var cfgbancard = ui.create.node('button', '', '全部关闭', cfgnode, function () {\r\n                           for (var i = 0; i < cardpileNodes.length; i++) {\r\n                              if (cardpileNodes[i].type == 'defaultcards' && cardpileNodes[i].classList.contains('on')) {\r\n                                 clickToggle.call(cardpileNodes[i]);\r\n                              }\r\n                           }\r\n                        });\r\n                        var cfgenablecard = ui.create.node('button', '', '全部开启', cfgnode, function () {\r\n                           for (var i = 0; i < cardpileNodes.length; i++) {\r\n                              if (cardpileNodes[i].type == 'defaultcards' && !cardpileNodes[i].classList.contains('on')) {\r\n                                 clickToggle.call(cardpileNodes[i]);\r\n                              }\r\n                           }\r\n                        });\r\n                        cfgbancard.style.marginLeft = '5px';\r\n                        cfgenablecard.style.marginLeft = '5px';\r\n                        cardpileNodes.push(cfgnode);\r\n                        cfgnode.style.display = 'none';\r\n                        cfgnode.classList.add('cardpilecfg');\r\n                        cfgnode.classList.add('toggle');\r\n                        cfgnode.style.marginTop = '5px';\r\n                        page.appendChild(cfgnode);\r\n\r\n                        var cardpileadd = ui.create.div('.config.toggle.hidden.cardpilecfg.cardpilecfgadd', page);\r\n                        var pileaddlist = [];\r\n                        for (var i = 0; i < lib.config.cards.length; i++) {\r\n                           if (!lib.cardPack[lib.config.cards[i]]) continue;\r\n                           for (var j = 0; j < lib.cardPack[lib.config.cards[i]].length; j++) {\r\n                              var cname = lib.cardPack[lib.config.cards[i]][j];\r\n                              pileaddlist.push([cname, get.translation(cname)]);\r\n                              if (cname == 'sha') {\r\n                                 pileaddlist.push(['huosha', '火杀']);\r\n                                 pileaddlist.push(['leisha', '雷杀']);\r\n                                 pileaddlist.push(['haisha', '海杀']);\r\n                              }\r\n                              if (cname == 'tao') {\r\n                                 pileaddlist.push(['haitao', '海桃']);\r\n                              }\r\n                           }\r\n                        }\r\n                        var cardpileaddname = ui.create.selectlist(pileaddlist, null, cardpileadd);\r\n                        cardpileaddname.style.width = '75px';\r\n                        cardpileaddname.style.marginRight = '2px';\r\n                        cardpileaddname.style.marginLeft = '-1px';\r\n                        var cardpileaddsuit = ui.create.selectlist([\r\n                           ['heart', '红桃'],\r\n                           ['diamond', '方片'],\r\n                           ['club', '梅花'],\r\n                           ['spade', '黑桃'],\r\n                        ], null, cardpileadd);\r\n                        cardpileaddsuit.style.width = '53px';\r\n                        cardpileaddsuit.style.marginRight = '2px';\r\n                        var cardpileaddnumber = ui.create.selectlist([\r\n                           1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13\r\n                        ], null, cardpileadd);\r\n                        cardpileaddnumber.style.width = '43px';\r\n                        cardpileaddnumber.style.marginRight = '2px';\r\n                        var button = document.createElement('button');\r\n                        button.innerHTML = '确定';\r\n                        button.style.width = '40px';\r\n                        var deletecard = function () {\r\n                           this.parentNode.remove();\r\n                           var info = this.parentNode._info;\r\n                           var list = lib.config.addedpile[mode];\r\n                           for (var i = 0; i < list.length; i++) {\r\n                              if (list[i][0] == info[0] && list[i][1] == info[1] && list[i][2] == info[2]) {\r\n                                 list.splice(i, 1); break;\r\n                              }\r\n                           }\r\n                           recreatePile();\r\n                        };\r\n                        button.onclick = function () {\r\n                           var card = [\r\n                              cardpileaddsuit.value,\r\n                              cardpileaddnumber.value,\r\n                              cardpileaddname.value,\r\n                           ];\r\n                           lib.config.addedpile[mode].push(card);\r\n                           recreatePile();\r\n                           var cfgnode = ui.create.div('.config.toggle.cardpilecfg');\r\n                           cfgnode._info = card;\r\n                           cfgnode.innerHTML = get.translation(card[2]) + ' ' + get.translation(card[0]) + card[1];\r\n                           var cfgnodedelete = document.createElement('span');\r\n                           cfgnodedelete.classList.add('cardpiledelete');\r\n                           cfgnodedelete.innerHTML = '删除';\r\n                           cfgnodedelete.onclick = deletecard;\r\n                           cfgnode.appendChild(cfgnodedelete);\r\n                           page.insertBefore(cfgnode, cardpileadd.nextSibling);\r\n                        };\r\n                        cardpileadd.appendChild(button);\r\n                        cardpileadd.style.whiteSpace = 'nowrap';\r\n                        cardpileNodes.push(cardpileadd);\r\n\r\n                        for (var i = 0; i < lib.config.addedpile[mode].length; i++) {\r\n                           var card = lib.config.addedpile[mode][i];\r\n                           var cfgnode = ui.create.div('.config.toggle.cardpilecfg');\r\n                           cfgnode._info = card;\r\n                           cfgnode.innerHTML = get.translation(card[2]) + ' ' + get.translation(card[0]) + card[1];\r\n                           var cfgnodedelete = document.createElement('span');\r\n                           cfgnodedelete.classList.add('cardpiledelete');\r\n                           cfgnodedelete.innerHTML = '删除';\r\n                           cfgnodedelete.onclick = deletecard;\r\n                           cfgnode.appendChild(cfgnodedelete);\r\n                           cfgnode.style.display = 'none';\r\n                           cardpileNodes.push(cfgnode);\r\n                           page.appendChild(cfgnode);\r\n                        }\r\n\r\n                        for (var i = 0; i < lib.cardPile[mode].length; i++) {\r\n                           var card = lib.cardPile[mode][i];\r\n                           var cfgnode = createConfig({\r\n                              name: get.translation(card[2]) + ' ' + get.translation(card[0]) + card[1],\r\n                              _number: i,\r\n                              _name: mode,\r\n                              init: !lib.config.bannedpile[mode].contains(i),\r\n                              onclick: toggleCardPile\r\n                           });\r\n                           cfgnode.type = 'defaultcards';\r\n                           cardpileNodes.push(cfgnode);\r\n                           cfgnode.style.display = 'none';\r\n                           cfgnode.classList.add('cardpilecfg');\r\n                           page.appendChild(cfgnode);\r\n                        }\r\n                        ui.create.div('.menuplaceholder', page);\r\n                     }\r\n                     return node;\r\n                  };\r\n                  if (!connectMenu && lib.config.show_ban_menu) {\r\n                     lib.cardPack.mode_banned = [];\r\n                     for (var i = 0; i < lib.config.all.mode.length; i++) {\r\n                        var banned = lib.config[lib.config.all.mode[i] + '_bannedcards'];\r\n                        if (banned) {\r\n                           for (var j = 0; j < banned.length; j++) {\r\n                              lib.cardPack.mode_banned.add(banned[j]);\r\n                           }\r\n                        }\r\n                     }\r\n                     var bannednode = createModeConfig('mode_banned', start.firstChild);\r\n                     if (lib.cardPack.mode_banned.length == 0) {\r\n                        bannednode.style.display = 'none';\r\n                     }\r\n                     delete lib.cardPack.mode_banned;\r\n                  }\r\n                  for (var i = 0; i < lib.config.all.cards.length; i++) {\r\n                     if (connectMenu && !lib.connectCardPack.contains(lib.config.all.cards[i])) continue;\r\n                     createModeConfig(lib.config.all.cards[i], start.firstChild);\r\n                  }\r\n                  if (!connectMenu) {\r\n                     for (var i in lib.cardPack) {\r\n                        if (i.indexOf('mode_') == 0) {\r\n                           createModeConfig(i, start.firstChild);\r\n                        }\r\n                     }\r\n                  }\r\n                  var active = start.firstChild.querySelector('.active');\r\n                  if (!active) {\r\n                     active = start.firstChild.firstChild;\r\n                     if (active.style.display == 'none') {\r\n                        active = active.nextSibling;\r\n                     }\r\n                     active.classList.add('active');\r\n                     updateActiveCard(active);\r\n                  }\r\n                  rightPane.appendChild(active.link);\r\n\r\n                  (function () {\r\n                     if (connectMenu) return;\r\n                     var page = ui.create.div('.menu-buttons');\r\n                     var node = ui.create.div('.menubutton.large', '牌堆', clickMode);\r\n                     start.firstChild.insertBefore(node, start.firstChild.querySelector('.lefttext'));\r\n                     node.link = page;\r\n                     node.mode = 'cardpile';\r\n                     node.create = function () {\r\n                        if (pileCreated) return;\r\n                        pileCreated = true;\r\n                        page.innerHTML = '';\r\n\r\n                        var pileList = null;\r\n                        var createList = function () {\r\n                           if (pileList) {\r\n                              pileList.remove();\r\n                           }\r\n                           var list = ['默认牌堆'];\r\n                           if (lib.config.customcardpile['当前牌堆']) {\r\n                              list.push('当前牌堆');\r\n                           }\r\n                           for (var i in lib.config.customcardpile) {\r\n                              list.add(i);\r\n                           }\r\n                           var currentpile = get.config('cardpilename');\r\n                           if (!currentpile) {\r\n                              if (list.contains('当前牌堆')) {\r\n                                 currentpile = '当前牌堆';\r\n                              }\r\n                              else {\r\n                                 currentpile = '默认牌堆';\r\n                              }\r\n                           }\r\n                           pileList = ui.create.selectlist(list, currentpile, pileChoose, function (e) {\r\n                              game.saveConfig('cardpilename', this.value, true);\r\n                              restart.style.display = '';\r\n                           });\r\n                           pileList.style.float = 'right';\r\n                        }\r\n                        var pileChoose = ui.create.div('.config.toggle.cardpilecfg.nomarginleft', '选择牌堆', page);\r\n                        createList();\r\n\r\n                        var pileDel = function () {\r\n                           delete lib.config.customcardpile[this.parentNode.link];\r\n                           this.parentNode.remove();\r\n                           game.saveConfig('customcardpile', lib.config.customcardpile);\r\n                           for (var i in lib.config.mode_config) {\r\n                              if (i == 'global') continue;\r\n                              if (lib.config.mode_config[i].cardpilename == this.parentNode.link) {\r\n                                 game.saveConfig('cardpilename', null, i);\r\n                              }\r\n                           }\r\n                           createList();\r\n                        };\r\n\r\n                        var restart = ui.create.div('.config.more', '重新启动', game.reload, page);\r\n                        restart.style.display = 'none';\r\n                        var createPileNode = function (name) {\r\n                           var node = ui.create.div('.config.toggle.cardpilecfg.nomarginleft', name);\r\n                           node.link = name;\r\n                           var del = document.createElement('span');\r\n                           del.innerHTML = '删除';\r\n                           del.classList.add('cardpiledelete');\r\n                           del.onclick = pileDel;\r\n                           node.appendChild(del);\r\n                           if (name == '当前牌堆') {\r\n                              page.insertBefore(node, pileChoose.nextSibling);\r\n                           }\r\n                           else {\r\n                              page.insertBefore(node, restart);\r\n                           }\r\n                        };\r\n                        for (var i in lib.config.customcardpile) {\r\n                           createPileNode(i);\r\n                        }\r\n                        var exportCardPile;\r\n                        ui.create.div('.config.more', '保存当前牌堆 <div>&gt;</div>', page, function () {\r\n                           this.classList.toggle('on');\r\n                           if (this.classList.contains('on')) {\r\n                              exportCardPile.classList.remove('hidden');\r\n                           }\r\n                           else {\r\n                              exportCardPile.classList.add('hidden');\r\n                           }\r\n                        });\r\n                        exportCardPile = ui.create.div('.config.cardpileadd.indent', page);\r\n                        exportCardPile.classList.add('hidden');\r\n                        ui.create.div('', '名称：<input type=\"text\"><button>确定</button>', exportCardPile);\r\n                        var input = exportCardPile.firstChild.lastChild.previousSibling;\r\n                        input.value = '自定义牌堆';\r\n                        input.style.marginRight = '3px';\r\n                        input.style.width = '120px';\r\n                        exportCardPile.firstChild.lastChild.onclick = function () {\r\n                           var name = input.value;\r\n                           var ok = true;\r\n                           if (lib.config.customcardpile[name] || name == '默认牌堆' || name == '当前牌堆') {\r\n                              for (var i = 1; i <= 1000; i++) {\r\n                                 if (!lib.config.customcardpile[name + '(' + i + ')']) {\r\n                                    name = name + '(' + i + ')';\r\n                                    break;\r\n                                 }\r\n                              }\r\n                           }\r\n                           lib.config.customcardpile[name] = [lib.config.bannedpile, lib.config.addedpile];\r\n                           delete lib.config.customcardpile['当前牌堆'];\r\n                           for (var i in lib.mode) {\r\n                              if (lib.config.mode_config[i] &&\r\n                                 (lib.config.mode_config[i].cardpilename == '当前牌堆' || !lib.config.mode_config[i].cardpilename)) {\r\n                                 game.saveConfig('cardpilename', name, i);\r\n                              }\r\n                           }\r\n                           for (var i = 0; i < page.childElementCount; i++) {\r\n                              if (page.childNodes[i].link == '当前牌堆') {\r\n                                 page.childNodes[i].remove();\r\n                                 break;\r\n                              }\r\n                           }\r\n                           game.saveConfig('customcardpile', lib.config.customcardpile);\r\n                           createPileNode(name);\r\n                           createList();\r\n                        };\r\n                     }\r\n                  }());\r\n\r\n                  if (!connectMenu) {\r\n                     var node1 = ui.create.div('.lefttext', '全部开启', start.firstChild, function () {\r\n                        game.saveConfig('cards', lib.config.all.cards);\r\n                        updateNodes();\r\n                     });\r\n                     var node2 = ui.create.div('.lefttext', '恢复默认', start.firstChild, function () {\r\n                        game.saveConfig('cards', lib.config.defaultcards);\r\n                        updateNodes();\r\n                     });\r\n                     node1.style.marginTop = '12px';\r\n                     node2.style.marginTop = '7px';\r\n                  }\r\n\r\n                  updateNodes();\r\n               }());\r\n\r\n               (function () {\r\n                  if (connectMenu) return;\r\n                  var start = menuxpages.shift();\r\n                  var rightPane = start.lastChild;\r\n\r\n                  var clickMode = function () {\r\n                     if (this.mode == 'get') {\r\n                        this.update();\r\n                     }\r\n                     var active = this.parentNode.querySelector('.active');\r\n                     if (active === this) {\r\n                        return;\r\n                     }\r\n                     active.classList.remove('active');\r\n                     active.link.remove();\r\n                     active = this;\r\n                     this.classList.add('active');\r\n                     rightPane.appendChild(this.link);\r\n                  };\r\n                  ui.click.extensionTab = function (name) {\r\n                     ui.click.menuTab('扩展');\r\n                     for (var i = 0; i < start.firstChild.childElementCount; i++) {\r\n                        if (start.firstChild.childNodes[i].innerHTML == name) {\r\n                           clickMode.call(start.firstChild.childNodes[i]);\r\n                           break;\r\n                        }\r\n                     }\r\n                  }\r\n                  var updateNodes = function () {\r\n                     for (var i = 0; i < start.firstChild.childNodes.length; i++) {\r\n                        var node = start.firstChild.childNodes[i];\r\n                        if (node.link) {\r\n                           if (node.mode == 'get') continue;\r\n                           if (node.mode == 'create') continue;\r\n                           if (node.mode.indexOf('extension_') == 0) {\r\n                              if (lib.config[node.mode + '_enable']) {\r\n                                 node.classList.remove('off');\r\n                                 node.link.firstChild.classList.add('on');\r\n                              }\r\n                              else {\r\n                                 node.classList.add('off');\r\n                                 node.link.firstChild.classList.remove('on');\r\n                              }\r\n                           }\r\n                           else {\r\n                              if (lib.config.plays.contains(node.mode)) {\r\n                                 node.classList.remove('off');\r\n                                 node.link.firstChild.classList.add('on');\r\n                              }\r\n                              else {\r\n                                 node.classList.add('off');\r\n                                 node.link.firstChild.classList.remove('on');\r\n                              }\r\n                           }\r\n                        }\r\n                     }\r\n                  }\r\n                  var togglePack = function (bool) {\r\n                     var name = this._link.config._name;\r\n                     if (name.indexOf('extension_') == 0) {\r\n                        if (bool) {\r\n                           game.saveConfig(name, true);\r\n                        }\r\n                        else {\r\n                           game.saveConfig(name, false);\r\n                        }\r\n                     }\r\n                     else {\r\n                        name = name.slice(0, name.indexOf('_enable_playpackconfig'));\r\n                        if (bool) {\r\n                           lib.config.plays.add(name);\r\n                        }\r\n                        else {\r\n                           lib.config.plays.remove(name);\r\n                        }\r\n                        game.saveConfig('plays', lib.config.plays);\r\n                     }\r\n                     if (this.onswitch) {\r\n                        this.onswitch(bool);\r\n                     }\r\n                     updateNodes();\r\n                  };\r\n\r\n                  var createModeConfig = function (mode, position) {\r\n                     var page = ui.create.div('');\r\n                     page.style.paddingBottom = '10px';\r\n                     var node;\r\n                     if (mode.indexOf('extension_') == 0) {\r\n                        node = ui.create.div('.menubutton.large', mode.slice(10), position, clickMode);\r\n                     }\r\n                     else {\r\n                        node = ui.create.div('.menubutton.large', lib.translate[mode + '_play_config'], position, clickMode);\r\n                     }\r\n                     if (node.innerHTML.length >= 5) {\r\n                        node.classList.add('smallfont');\r\n                     }\r\n                     node.link = page;\r\n                     node.mode = mode;\r\n                     for (var i in lib.extensionMenu[mode]) {\r\n                        if (i == 'game') continue;\r\n                        var cfg = copyObj(lib.extensionMenu[mode][i]);\r\n                        var j;\r\n                        if (mode.indexOf('extension_') == 0) {\r\n                           j = mode + '_' + i;\r\n                        }\r\n                        else {\r\n                           j = mode + '_' + i + '_playpackconfig';\r\n                        }\r\n                        cfg._name = j;\r\n                        if (!lib.config.hasOwnProperty(j)) {\r\n                           game.saveConfig(j, cfg.init);\r\n                        }\r\n                        else {\r\n                           cfg.init = lib.config[j];\r\n                        }\r\n\r\n                        if (i == 'enable') {\r\n                           cfg.onclick = togglePack;\r\n                        }\r\n                        else if (!lib.extensionMenu[mode][i].onclick) {\r\n                           cfg.onclick = function (result) {\r\n                              var cfg = this._link.config;\r\n                              game.saveConfig(cfg._name, result);\r\n                           };\r\n                        }\r\n                        var cfgnode = createConfig(cfg);\r\n                        if (cfg.onswitch) {\r\n                           cfgnode.onswitch = cfg.onswitch;\r\n                        }\r\n                        page.appendChild(cfgnode);\r\n                     }\r\n                     return node;\r\n                  };\r\n                  for (var i in lib.extensionMenu) {\r\n                     if (lib.config.all.stockextension.contains(i) && !lib.config.all.plays.contains(i)) continue;\r\n                     if (lib.config.hiddenPlayPack.contains(i)) continue;\r\n                     createModeConfig(i, start.firstChild);\r\n                  }\r\n                  (function () {\r\n                     var page = ui.create.div('');\r\n                     var node = ui.create.div('.menubutton.large', '获取扩展', start.firstChild, clickMode);\r\n                     node.link = page;\r\n                     node.mode = 'get';\r\n                     page.listen(function () {\r\n                        if (!page.currenttimeout) {\r\n                           var active = page.querySelector('.videonode.current');\r\n                           if (active) {\r\n                              active.classList.remove('current');\r\n                           }\r\n                        }\r\n                     });\r\n                     var importextensionexpanded = false;\r\n                     page.style.paddingBottom = '10px';\r\n                     var importExtension;\r\n                     var extensionnode = ui.create.div('.config.more', '导入扩展 <div>&gt;</div>', page, function () {\r\n                        if (importextensionexpanded) {\r\n                           this.classList.remove('on');\r\n                           importExtension.style.display = 'none';\r\n                        }\r\n                        else {\r\n                           this.classList.add('on');\r\n                           importExtension.style.display = '';\r\n                        }\r\n                        importextensionexpanded = !importextensionexpanded;\r\n                     });\r\n                     importExtension = ui.create.div('.new_character.export.import', page);\r\n                     importExtension.style.marginLeft = '5px';\r\n                     importExtension.style.marginTop = '5px';\r\n                     importExtension.style.marginBottom = '5px';\r\n                     importExtension.style.display = 'none';\r\n                     importExtension.style.width = '100%';\r\n                     importExtension.style.textAlign = 'left';\r\n                     ui.create.div('', '<input type=\"file\" accept=\"application/zip\" style=\"width:153px\"><button>确定</button>', importExtension);\r\n\r\n                     var reloadnode = ui.create.div('.config.toggle.pointerdiv', '重新启动', page, game.reload);\r\n                     reloadnode.style.display = 'none';\r\n                     var placeholder = ui.create.div('.config.toggle', page);\r\n                     placeholder.style.height = 0;\r\n                     placeholder.style.marginTop = '5px';\r\n\r\n                     importExtension.firstChild.lastChild.onclick = function () {\r\n                        var fileToLoad = this.previousSibling.files[0];\r\n                        if (fileToLoad) {\r\n                           var fileReader = new FileReader();\r\n                           fileReader.onload = function (fileLoadedEvent) {\r\n                              var finishLoad = function () {\r\n                                 extensionnode.innerHTML = '导入成功，3秒后将重启';\r\n                                 setTimeout(function () {\r\n                                    extensionnode.innerHTML = '导入成功，2秒后将重启';\r\n                                    setTimeout(function () {\r\n                                       extensionnode.innerHTML = '导入成功，1秒后将重启';\r\n                                       setTimeout(game.reload, 1000);\r\n                                    }, 1000);\r\n                                 }, 1000);\r\n                              };\r\n                              var data = fileLoadedEvent.target.result;\r\n                              if (game.importExtension(data, finishLoad) !== false) {\r\n                                 importExtension.style.display = 'none';\r\n                              }\r\n                           };\r\n                           fileReader.readAsArrayBuffer(fileToLoad, \"UTF-8\");\r\n                        }\r\n                     }\r\n\r\n                     node.update = function () { };\r\n                  }());\r\n                  var active = start.firstChild.querySelector('.active');\r\n                  if (!active) {\r\n                     active = start.firstChild.firstChild;\r\n                     active.classList.add('active');\r\n                  }\r\n                  rightPane.appendChild(active.link);\r\n                  updateNodes();\r\n               }());\r\n\r\n               (function () {\r\n                  if (connectMenu) return;\r\n                  var start = menuxpages.shift();\r\n                  var rightPane = start.lastChild;\r\n                  var cheatButton = ui.create.div('.menubutton.round.highlight', '作', start);\r\n                  cheatButton.style.display = 'none';\r\n                  var runButton = ui.create.div('.menubutton.round.highlight', '执', start);\r\n                  runButton.style.display = 'none';\r\n                  var clearButton = ui.create.div('.menubutton.round.highlight', '清', start);\r\n                  clearButton.style.display = 'none';\r\n                  clearButton.style.left = '275px';\r\n                  var playButton = ui.create.div('.menubutton.round.highlight.hidden', '播', start);\r\n                  playButton.style.display = 'none';\r\n                  playButton.style.left = '215px';\r\n                  playButton.style.transition = 'opacity 0.3s';\r\n                  var deleteButton = ui.create.div('.menubutton.round.highlight.hidden', '删', start);\r\n                  deleteButton.style.display = 'none';\r\n                  deleteButton.style.left = '275px';\r\n                  deleteButton.style.transition = 'opacity 0.3s';\r\n                  var saveButton = ui.create.div('.menubutton.round.highlight.hidden', '存', start);\r\n                  saveButton.style.display = 'none';\r\n                  saveButton.style.transition = 'opacity 0.3s';\r\n\r\n\r\n                  var clickMode = function () {\r\n                     if (this.classList.contains('off')) return;\r\n                     var active = this.parentNode.querySelector('.active');\r\n                     if (active === this) {\r\n                        return;\r\n                     }\r\n                     if (active) {\r\n                        active.classList.remove('active');\r\n                        active.link.remove();\r\n                     }\r\n                     active = this;\r\n                     this.classList.add('active');\r\n                     rightPane.appendChild(this.link);\r\n                     if (this.type == 'cheat') {\r\n                        cheatButton.style.display = '';\r\n                     }\r\n                     else {\r\n                        cheatButton.style.display = 'none';\r\n                     }\r\n                     if (this.type == 'cmd') {\r\n                        runButton.style.display = '';\r\n                        clearButton.style.display = '';\r\n                     }\r\n                     else {\r\n                        runButton.style.display = 'none';\r\n                        clearButton.style.display = 'none';\r\n                     }\r\n                     if (this.type == 'video') {\r\n                        playButton.style.display = '';\r\n                        saveButton.style.display = '';\r\n                        deleteButton.style.display = '';\r\n                     }\r\n                     else {\r\n                        playButton.style.display = 'none';\r\n                        saveButton.style.display = 'none';\r\n                        deleteButton.style.display = 'none';\r\n                     }\r\n                  };\r\n\r\n                  ui.click.consoleMenu = function () {\r\n                     ui.click.menuTab('其它');\r\n                     clickMode.call(ui.commandnode);\r\n                  };\r\n                  (function () {\r\n                     var page = ui.create.div('');\r\n                     var node = ui.create.div('.menubutton.large', '更新', start.firstChild, clickMode);\r\n                     node.link = page;\r\n                     page.classList.add('menu-help');\r\n                     var ul = document.createElement('ul');\r\n                     var li1 = document.createElement('li');\r\n                     var li2 = document.createElement('li');\r\n                     var li3 = document.createElement('li');\r\n                     var trimurl = function (str) {\r\n                        if (str == lib.updateURLS.github) {\r\n                           return 'GitHub';\r\n                        }\r\n                        if (str == lib.updateURLS.coding) {\r\n                           return 'Coding';\r\n                        }\r\n                        var index;\r\n                        index = str.indexOf('://');\r\n                        if (index != -1) {\r\n                           str = str.slice(index + 3);\r\n                        }\r\n                        index = str.indexOf('/');\r\n                        if (index != -1) {\r\n                           str = str.slice(0, index);\r\n                        }\r\n                        if (str.length > 15) {\r\n                           var list = str.split('.');\r\n                           if (list.length > 1) {\r\n                              list.shift();\r\n                           }\r\n                           str = list[0];\r\n                           for (var i = 1; i < list.length; i++) {\r\n                              str += '.' + list[i];\r\n                           }\r\n                        }\r\n                        if (str.length > 15) {\r\n                           var list = str.split('.');\r\n                           if (list.length > 1) {\r\n                              list.pop();\r\n                           }\r\n                           str = list[0];\r\n                           for (var i = 1; i < list.length; i++) {\r\n                              str += '.' + list[i];\r\n                           }\r\n                        }\r\n                        return str;\r\n                     }\r\n                     li1.innerHTML = '游戏版本：' + lib.version + '<p style=\"margin-top:8px;white-space:nowrap\"></p>';\r\n                     li2.innerHTML = '素材版本：' + (lib.config.asset_version || '无') + '<p style=\"margin-top:8px\"></p>';\r\n                     li3.innerHTML = '更新地址：<span>' + trimurl(lib.config.updateURL || lib.updateURL) + '</span><p style=\"margin-top:8px\"></p>';\r\n                     li3.style.whiteSpace = 'nowrap';\r\n                     li3.style.display = 'none';// coding\r\n\r\n                     var button1, button2, button3, button4, button5;\r\n\r\n                     game.checkForUpdate = function (forcecheck, dev) {\r\n                        if (!dev && button1.disabled) {\r\n                           return;\r\n                        }\r\n                        else if (dev && button3.disabled) {\r\n                           return;\r\n                        }\r\n                        else if (!game.download) {\r\n                           // alert('此版本不支持游戏内更新，请手动更新');\r\n                           return;\r\n                        }\r\n                        else {\r\n                           if (dev) {\r\n                              button3.innerHTML = '正在检查更新';\r\n                           }\r\n                           else {\r\n                              button1.innerHTML = '正在检查更新';\r\n                           }\r\n                           button3.disabled = true;\r\n                           button1.disabled = true;\r\n\r\n                           var goupdate = function (files, update) {\r\n                              lib.version = update.version;\r\n                              if (update.dev && !lib.config.debug) {\r\n                                 dev = 'nodev';\r\n                              }\r\n                              lib.init.req('game/source.js', function () {\r\n                                 try {\r\n                                    eval(this.responseText);\r\n                                    if (!window.noname_source_list) {\r\n                                       throw ('err');\r\n                                    }\r\n                                 }\r\n                                 catch (e) {\r\n                                    alert('更新地址有误');\r\n                                    console.log(e);\r\n                                    return;\r\n                                 }\r\n\r\n                                 var updates = window.noname_source_list;\r\n                                 delete window.noname_source_list;\r\n                                 if (Array.isArray(files)) {\r\n                                    files.add('game/update.js');\r\n                                    var files2 = [];\r\n                                    for (var i = 0; i < files.length; i++) {\r\n                                       var str = files[i].indexOf('*');\r\n                                       if (str != -1) {\r\n                                          str = files[i].slice(0, str);\r\n                                          files.splice(i--, 1);\r\n                                          for (var j = 0; j < updates.length; j++) {\r\n                                             if (updates[j].indexOf(str) == 0) {\r\n                                                files2.push(updates[j]);\r\n                                             }\r\n                                          }\r\n                                       }\r\n                                    }\r\n                                    updates = files.concat(files2);\r\n                                 }\r\n                                 for (var i = 0; i < updates.length; i++) {\r\n                                    if (updates[i].indexOf('theme/') == 0 && updates[i].indexOf('.css') == -1) {\r\n                                       updates.splice(i--, 1);\r\n                                    }\r\n                                    else if (updates[i].indexOf('node_modules/') == 0 && !update.node) {\r\n                                       updates.splice(i--, 1);\r\n                                    }\r\n                                 }\r\n\r\n                                 if (!ui.arena.classList.contains('menupaused')) {\r\n                                    ui.click.configMenu();\r\n                                    ui.click.menuTab('其它');\r\n                                 }\r\n                                 var p = button1.parentNode;\r\n                                 button1.remove();\r\n                                 button3.remove();\r\n                                 var span = document.createElement('span');\r\n                                 var n1 = 0;\r\n                                 var n2 = updates.length;\r\n                                 span.innerHTML = '正在下载文件（' + n1 + '/' + n2 + '）';\r\n                                 p.appendChild(span);\r\n                                 var finish = function () {\r\n                                    span.innerHTML = '游戏更新完毕（' + n1 + '/' + n2 + '）';\r\n                                    p.appendChild(document.createElement('br'));\r\n                                    var button = document.createElement('button');\r\n                                    button.innerHTML = '重新启动';\r\n                                    button.onclick = game.reload;\r\n                                    button.style.marginTop = '8px';\r\n                                    p.appendChild(button);\r\n                                 }\r\n                                 game.multiDownload(updates, function () {\r\n                                    n1++;\r\n                                    span.innerHTML = '正在下载文件（' + n1 + '/' + n2 + '）';\r\n                                 }, function (e) {\r\n                                    game.print('下载失败：' + e.source);\r\n                                 }, function () {\r\n                                    setTimeout(finish, 500);\r\n                                 }, null, dev);\r\n                              }, function () {\r\n                                 alert('更新地址有误');\r\n                              }, true);\r\n                           };\r\n\r\n                           lib.init.req('game/update.js', function () {\r\n                              try {\r\n                                 eval(this.responseText);\r\n                                 if (!window.noname_update) {\r\n                                    throw ('err');\r\n                                 }\r\n                              }\r\n                              catch (e) {\r\n                                 alert('更新地址有误');\r\n                                 console.log(e);\r\n                                 return;\r\n                              }\r\n\r\n                              var update = window.noname_update;\r\n                              delete window.noname_update;\r\n                              if (forcecheck === false) {\r\n                                 if (update.version == lib.config.check_version) {\r\n                                    return;\r\n                                 }\r\n                              }\r\n                              game.saveConfig('check_version', update.version);\r\n                              var goon = true;\r\n                              if (!dev) {\r\n                                 if (update.version.indexOf('beta') != -1 || update.version == lib.version) {\r\n                                    goon = false;\r\n                                 }\r\n                              }\r\n                              if (goon) {\r\n                                 var files = null;\r\n                                 var version = lib.version;\r\n                                 if (Array.isArray(update.dev) && dev) {\r\n                                    files = update.dev;\r\n                                 }\r\n                                 else if (Array.isArray(update.files) && update.update && !dev) {\r\n                                    var version1 = version.split('.');\r\n                                    var version2 = update.update.split('.');\r\n                                    for (var i = 0; i < version1.length && i < version2.length; i++) {\r\n                                       if (version2[i] > version1[i]) {\r\n                                          files = false; break;\r\n                                       }\r\n                                       else if (version1[i] > version2[i]) {\r\n                                          files = update.files.slice(0); break;\r\n                                       }\r\n                                    }\r\n                                    if (files === null) {\r\n                                       if (version1.length >= version2.length) {\r\n                                          files = update.files.slice(0);\r\n                                       }\r\n                                    }\r\n                                 }\r\n                                 var str;\r\n                                 if (dev) {\r\n                                    str = '开发版仅供测试使用，可能存在风险，是否确定更新？'\r\n                                 }\r\n                                 else {\r\n                                    str = '有新版本' + update.version + '可用，是否下载？';\r\n                                 }\r\n                                 if (navigator.notification && navigator.notification.confirm) {\r\n                                    var str2;\r\n                                    if (dev) {\r\n                                       str2 = str;\r\n                                       str = '更新到开发版';\r\n                                    }\r\n                                    else {\r\n                                       str2 = update.changeLog[0];\r\n                                       for (var i = 1; i < update.changeLog.length; i++) {\r\n                                          if (update.changeLog[i].indexOf('://') == -1) {\r\n                                             str2 += '；' + update.changeLog[i];\r\n                                          }\r\n                                       }\r\n                                    }\r\n                                    navigator.notification.confirm(\r\n                                       str2,\r\n                                       function (index) {\r\n                                          if (index == 1) {\r\n                                             goupdate(files, update);\r\n                                          }\r\n                                          else {\r\n                                             button1.disabled = false;\r\n                                             button1.innerHTML = '检查游戏更新';\r\n                                             button3.disabled = false;\r\n                                             button3.innerHTML = '更新到开发版';\r\n                                          }\r\n                                       },\r\n                                       str,\r\n                                       ['确定', '取消']\r\n                                    );\r\n                                 }\r\n                                 else {\r\n                                    if (confirm(str)) {\r\n                                       goupdate(files, update);\r\n                                    }\r\n                                    else {\r\n                                       button1.disabled = false;\r\n                                       button1.innerHTML = '检查游戏更新';\r\n                                       button3.disabled = false;\r\n                                       button3.innerHTML = '更新到开发版';\r\n                                    }\r\n                                 }\r\n                              }\r\n                              else {\r\n                                 alert('当前版本已是最新');\r\n                                 button1.disabled = false;\r\n                                 button1.innerHTML = '检查游戏更新';\r\n                                 button3.disabled = false;\r\n                                 button3.innerHTML = '更新到开发版';\r\n                              }\r\n                           }, function () {\r\n                              if (forcecheck === false) {\r\n                                 return;\r\n                              }\r\n                              alert('连接失败');\r\n                              button1.disabled = false;\r\n                              button1.innerHTML = '检查游戏更新';\r\n                              button3.disabled = false;\r\n                              button3.innerHTML = '更新到开发版';\r\n                           }, true);\r\n                        }\r\n                     };\r\n                     game.checkForAssetUpdate = function (type) {\r\n                        if (button2.disabled) {\r\n                           return;\r\n                        }\r\n                        else if (game.download) {\r\n                           button2.innerHTML = '正在检查更新';\r\n                           button2.disabled = true;\r\n                           lib.init.req('game/asset.js', function () {\r\n                              try {\r\n                                 eval(this.responseText);\r\n                                 if (!window.vk_asset_list || !window.vk_skin_list) {\r\n                                    throw ('err');\r\n                                 }\r\n                              }\r\n                              catch (e) {\r\n                                 alert('更新地址有误');\r\n                                 console.log(e);\r\n                                 return;\r\n                              }\r\n\r\n                              var updates = window.vk_asset_list;\r\n                              delete window.vk_asset_list;\r\n                              var skins = window.vk_skin_list;\r\n                              delete window.vk_skin_list;\r\n                              var asset_version = updates.shift();\r\n\r\n                              var skipcharacter = [], skipcard = ['tiesuo_mark'];\r\n                              if (!lib.config.asset_full) {\r\n                                 for (var i = 0; i < lib.config.all.sgscharacters.length; i++) {\r\n                                    var pack = lib.characterPack[lib.config.all.sgscharacters[i]];\r\n                                    for (var j in pack) {\r\n                                       skipcharacter.add(j);\r\n                                    }\r\n                                 }\r\n                                 for (var i = 0; i < lib.config.all.sgscards.length; i++) {\r\n                                    var pack = lib.cardPack[lib.config.all.sgscards[i]];\r\n                                    if (pack) {\r\n                                       skipcard = skipcard.concat(pack);\r\n                                    }\r\n                                 }\r\n                              }\r\n                              for (var i = 0; i < updates.length; i++) {\r\n                                 switch (updates[i].slice(0, 5)) {\r\n                                    case 'image': {\r\n                                       if (!lib.config.asset_full) {\r\n                                          if (!lib.config.asset_image) {\r\n                                             updates.splice(i--, 1);\r\n                                          }\r\n                                          else {\r\n                                             if (updates[i].indexOf('image/character') == 0) {\r\n                                                if (updates[i].indexOf('jun_') != 16 && updates[i].indexOf('gz_') != 16 && !skipcharacter.contains(updates[i].slice(16, updates[i].lastIndexOf('.')))) {\r\n                                                   updates.splice(i--, 1);\r\n                                                }\r\n                                             }\r\n                                             else if (updates[i].indexOf('image/card') == 0) {\r\n                                                if (updates[i].indexOf('qiaosi_card') != 11 && !skipcard.contains(updates[i].slice(11, updates[i].lastIndexOf('.')))) {\r\n                                                   updates.splice(i--, 1);\r\n                                                }\r\n                                             }\r\n                                             else if (updates[i].indexOf('image/mode/stone') == 0) {\r\n                                                updates.splice(i--, 1);\r\n                                             }\r\n                                          }\r\n                                       }\r\n                                       break;\r\n                                    }\r\n                                    case 'audio': {\r\n                                       if (!lib.config.asset_audio) {\r\n                                          updates.splice(i--, 1);\r\n                                       }\r\n                                       break;\r\n                                    }\r\n                                    case 'font/': {\r\n                                       if (!lib.config.asset_font) {\r\n                                          updates.splice(i--, 1);\r\n                                       }\r\n                                    }\r\n                                 }\r\n                              }\r\n                              if (lib.config.asset_skin) {\r\n                                 for (var i in skins) {\r\n                                    for (var j = 1; j <= skins[i]; j++) {\r\n                                       updates.push('image/skin/' + i + '/' + j + '.jpg');\r\n                                    }\r\n                                 }\r\n                              }\r\n                              if (!ui.arena.classList.contains('menupaused')) {\r\n                                 ui.click.configMenu();\r\n                                 ui.click.menuTab('其它');\r\n                              }\r\n\r\n                              var proceed = function () {\r\n                                 if (updates.length == 0) {\r\n                                    game.print(updates);\r\n                                    game.saveConfig('asset_version', asset_version);\r\n                                    alert('素材已是最新');\r\n                                    button2.disabled = false;\r\n                                    button2.innerHTML = '检查素材更新';\r\n                                    return;\r\n                                 }\r\n                                 var p = button2.parentNode;\r\n                                 button2.remove();\r\n                                 var span = document.createElement('span');\r\n                                 span.style.whiteSpace = 'nowrap';\r\n                                 var n1 = 0;\r\n                                 var n2 = updates.length;\r\n                                 span.innerHTML = '正在下载素材（' + n1 + '/' + n2 + '）';\r\n                                 span1.remove();\r\n                                 span2.remove();\r\n                                 span2_check.remove();\r\n                                 span3.remove();\r\n                                 span3_check.remove();\r\n                                 span4.remove();\r\n                                 span4_check.remove();\r\n                                 span5.remove();\r\n                                 span5_check.remove();\r\n                                 span6.remove();\r\n                                 span6_check.remove();\r\n                                 span2_br.remove();\r\n                                 span3_br.remove();\r\n                                 span4_br.remove();\r\n                                 span5_br.remove();\r\n                                 span6_br.remove();\r\n                                 p.appendChild(span);\r\n\r\n                                 var br6 = ui.create.node('br');\r\n                                 var span7 = ui.create.div('.hrefnode', '详细信息');\r\n                                 span7.style.marginTop = '6px';\r\n                                 span7.listen(ui.click.consoleMenu);\r\n                                 p.appendChild(br6);\r\n                                 p.appendChild(span7);\r\n\r\n                                 var finish = function () {\r\n                                    if (n1 == n2) {\r\n                                       game.saveConfig('asset_version', asset_version);\r\n                                    }\r\n                                    span.innerHTML = '素材更新完毕（' + n1 + '/' + n2 + '）';\r\n                                    p.appendChild(document.createElement('br'));\r\n                                    var button = document.createElement('button');\r\n                                    button.innerHTML = '重新启动';\r\n                                    button.onclick = game.reload;\r\n                                    button.style.marginTop = '8px';\r\n                                    p.appendChild(button);\r\n                                 }\r\n                                 game.multiDownload(updates, function () {\r\n                                    n1++;\r\n                                    span.innerHTML = '正在下载素材（' + n1 + '/' + n2 + '）';\r\n                                 }, function (e) {\r\n                                    game.print('下载失败：' + e.source);\r\n                                 }, function () {\r\n                                    setTimeout(finish, 500);\r\n                                 });\r\n                              };\r\n                              game.checkFileList(updates, proceed);\r\n                           }, function () {\r\n                              alert('连接失败');\r\n                              button2.disabled = false;\r\n                              button2.innerHTML = '检查素材更新';\r\n                           }, true);\r\n                        }\r\n                        else {\r\n                           alert('此版本不支持游戏内更新素材，请手动更新');\r\n                        }\r\n                     };\r\n\r\n                     button1 = document.createElement('button');\r\n                     button1.innerHTML = '检查游戏更新';\r\n                     button1.onclick = game.checkForUpdate;\r\n                     li1.lastChild.appendChild(button1);\r\n\r\n                     button3 = document.createElement('button');\r\n                     button3.innerHTML = '更新到开发版';\r\n                     button3.style.marginLeft = '5px';\r\n                     button3.onclick = function () {\r\n                        game.checkForUpdate(null, true);\r\n                     };\r\n                     // if(lib.config.dev){\r\n                     //     li1.lastChild.appendChild(button3);\r\n                     // }\r\n\r\n                     (function () {\r\n                        var updatep1 = li1.querySelector('p');\r\n                        var updatep2 = li2;\r\n                        var updatep3 = li3;\r\n                        var updatep4 = node;\r\n                        var updatepx = ui.create.node('p');\r\n                        li1.appendChild(updatepx);\r\n                        updatepx.style.display = 'none';\r\n                        updatepx.style.whiteSpace = 'nowrap';\r\n                        updatepx.style.marginTop = '8px';\r\n                        var buttonx = ui.create.node('button', '访问项目主页', function () {\r\n                           window.open('https://github.com/libccy/noname');\r\n                        });\r\n                        updatepx.appendChild(buttonx);\r\n                        ui.updateUpdate = function () {\r\n                           if (!game.download) {\r\n                              updatep1.style.display = 'none';\r\n                              updatep2.style.display = 'none';\r\n                              updatep3.style.display = 'none';\r\n                              updatepx.style.display = '';\r\n                              updatep4.innerHTML = '关于';\r\n                           }\r\n                           else {\r\n                              updatep1.style.display = '';\r\n                              updatep2.style.display = '';\r\n                              updatep3.style.display = 'none'; // coding\r\n                              updatepx.style.display = 'none';\r\n                              updatep4.innerHTML = '更新';\r\n                           }\r\n                        }\r\n                        ui.updateUpdate();\r\n                     }());\r\n\r\n                     button4 = document.createElement('button');\r\n                     button4.innerHTML = '设置更新地址';\r\n                     button4.onclick = function () {\r\n                        game.prompt('设置更新地址', function (str) {\r\n                           if (str) {\r\n                              game.saveConfig('updateURL', str);\r\n                              li3.querySelector('span').innerHTML = trimurl(str);\r\n                              button5.style.display = '';\r\n                              button6.style.display = 'none';\r\n                           }\r\n                        });\r\n                     };\r\n                     // li3.lastChild.appendChild(button4);\r\n\r\n                     var button6 = document.createElement('button');\r\n                     button6.innerHTML = '设为备用镜像';\r\n                     button6.style.display = 'none';// coding\r\n                     // button6.style.marginLeft='5px';\r\n                     button6.onclick = function () {\r\n                        game.saveConfig('updateURL', lib.mirrorURL);\r\n                        button5.style.display = '';\r\n                        button6.style.display = 'none';\r\n                        li3.querySelector('span').innerHTML = trimurl(lib.mirrorURL);\r\n                     };\r\n                     li3.lastChild.appendChild(button6);\r\n\r\n                     button5 = document.createElement('button');\r\n                     button5.innerHTML = '设为默认镜像';\r\n                     // button5.style.marginLeft='5px';\r\n                     button5.onclick = function () {\r\n                        game.saveConfig('updateURL');\r\n                        button5.style.display = 'none';\r\n                        button6.style.display = '';\r\n                        li3.querySelector('span').innerHTML = trimurl(lib.updateURL);\r\n                     };\r\n                     li3.lastChild.appendChild(button5);\r\n                     if (!lib.config.updateURL) {\r\n                        button5.style.display = 'none';\r\n                     }\r\n                     else {\r\n                        button6.style.display = 'none';\r\n                     }\r\n\r\n                     button2 = document.createElement('button');\r\n                     button2.innerHTML = '检查素材更新';\r\n                     button2.onclick = game.checkForAssetUpdate;\r\n                     li2.lastChild.appendChild(button2);\r\n\r\n                     var span1 = ui.create.div('.config.more', '选项 <div>&gt;</div>');\r\n                     span1.style.fontSize = 'small';\r\n                     span1.style.display = 'inline';\r\n                     span1.toggle = function () {\r\n                        if (!this.classList.toggle('on')) {\r\n                           game.saveConfig('asset_toggle_off', true);\r\n                           span2.style.display = 'none';\r\n                           span2_br.style.display = 'none';\r\n                           span2_check.style.display = 'none';\r\n                           span3.style.display = 'none';\r\n                           span3_br.style.display = 'none';\r\n                           span3_check.style.display = 'none';\r\n                           span4.style.display = 'none';\r\n                           span4_br.style.display = 'none';\r\n                           span4_check.style.display = 'none';\r\n                           span5.style.display = 'none';\r\n                           span5_br.style.display = 'none';\r\n                           span5_check.style.display = 'none';\r\n                           span6.style.display = 'none';\r\n                           span6_br.style.display = 'none';\r\n                           span6_check.style.display = 'none';\r\n                        }\r\n                        else {\r\n                           game.saveConfig('asset_toggle_off');\r\n                           span2.style.display = '';\r\n                           span2_br.style.display = '';\r\n                           span2_check.style.display = '';\r\n                           span3.style.display = '';\r\n                           span3_br.style.display = '';\r\n                           span3_check.style.display = '';\r\n                           span4.style.display = '';\r\n                           span4_br.style.display = '';\r\n                           span4_check.style.display = '';\r\n                           span5.style.display = '';\r\n                           span5_br.style.display = '';\r\n                           span5_check.style.display = '';\r\n                           span6.style.display = '';\r\n                           span6_br.style.display = '';\r\n                           span6_check.style.display = '';\r\n                        }\r\n                     };\r\n                     span1.listen(span1.toggle);\r\n                     li2.lastChild.appendChild(span1);\r\n\r\n                     var span6_br = ui.create.node('br');\r\n                     li2.lastChild.appendChild(span6_br);\r\n\r\n                     var span5 = ui.create.div('', '图片素材（精简，221MB）');\r\n                     span5.style.fontSize = 'small';\r\n                     span5.style.lineHeight = '16px';\r\n                     var span5_check = document.createElement('input');\r\n                     span5_check.type = 'checkbox';\r\n                     span5_check.style.marginLeft = '5px';\r\n                     if (lib.config.asset_image) {\r\n                        span5_check.checked = true;\r\n                     }\r\n                     span5_check.onchange = function () {\r\n                        game.saveConfig('asset_image', this.checked);\r\n                     }\r\n                     var span2_br = ui.create.node('br');\r\n\r\n                     var span4 = ui.create.div('', '字体素材（56MB）');\r\n                     span4.style.fontSize = 'small';\r\n                     span4.style.lineHeight = '16px';\r\n                     li2.lastChild.appendChild(span4);\r\n                     var span4_check = document.createElement('input');\r\n                     span4_check.type = 'checkbox';\r\n                     span4_check.style.marginLeft = '5px';\r\n                     if (lib.config.asset_font) {\r\n                        span4_check.checked = true;\r\n                     }\r\n                     span4_check.onchange = function () {\r\n                        game.saveConfig('asset_font', this.checked);\r\n                     }\r\n                     li2.lastChild.appendChild(span4_check);\r\n                     var span3_br = ui.create.node('br');\r\n                     li2.lastChild.appendChild(span3_br);\r\n\r\n                     var span3 = ui.create.div('', '音效素材（172MB）');\r\n                     span3.style.fontSize = 'small';\r\n                     span3.style.lineHeight = '16px';\r\n                     li2.lastChild.appendChild(span3);\r\n                     var span3_check = document.createElement('input');\r\n                     span3_check.type = 'checkbox';\r\n                     span3_check.style.marginLeft = '5px';\r\n                     if (lib.config.asset_audio) {\r\n                        span3_check.checked = true;\r\n                     }\r\n                     span3_check.onchange = function () {\r\n                        game.saveConfig('asset_audio', this.checked);\r\n                     }\r\n                     li2.lastChild.appendChild(span3_check);\r\n                     var span4_br = ui.create.node('br');\r\n                     li2.lastChild.appendChild(span4_br);\r\n\r\n                     var span2 = ui.create.div('', '皮肤素材（261MB）');\r\n                     span2.style.fontSize = 'small';\r\n                     span2.style.lineHeight = '16px';\r\n                     li2.lastChild.appendChild(span2);\r\n                     var span2_check = document.createElement('input');\r\n                     span2_check.type = 'checkbox';\r\n                     span2_check.style.marginLeft = '5px';\r\n                     if (lib.config.asset_skin) {\r\n                        span2_check.checked = true;\r\n                     }\r\n                     span2_check.onchange = function () {\r\n                        game.saveConfig('asset_skin', this.checked);\r\n                     }\r\n                     li2.lastChild.appendChild(span2_check);\r\n                     var span5_br = ui.create.node('br');\r\n                     li2.lastChild.appendChild(span5_br);\r\n\r\n\r\n                     li2.lastChild.appendChild(span5);\r\n                     li2.lastChild.appendChild(span5_check);\r\n                     li2.lastChild.appendChild(span2_br);\r\n\r\n                     var span6 = ui.create.div('', '图片素材（完整，569MB）');\r\n                     span6.style.fontSize = 'small';\r\n                     span6.style.lineHeight = '16px';\r\n                     li2.lastChild.appendChild(span6);\r\n                     var span6_check = document.createElement('input');\r\n                     span6_check.type = 'checkbox';\r\n                     span6_check.style.marginLeft = '5px';\r\n                     if (lib.config.asset_full) {\r\n                        span6_check.checked = true;\r\n                     }\r\n                     span6_check.onchange = function () {\r\n                        game.saveConfig('asset_full', this.checked);\r\n                     }\r\n                     li2.lastChild.appendChild(span6_check);\r\n\r\n                     span2.style.display = 'none';\r\n                     span2_br.style.display = 'none';\r\n                     span2_check.style.display = 'none';\r\n                     span3.style.display = 'none';\r\n                     span3_br.style.display = 'none';\r\n                     span3_check.style.display = 'none';\r\n                     span4.style.display = 'none';\r\n                     span4_br.style.display = 'none';\r\n                     span4_check.style.display = 'none';\r\n                     span5.style.display = 'none';\r\n                     span5_br.style.display = 'none';\r\n                     span5_check.style.display = 'none';\r\n                     span6.style.display = 'none';\r\n                     span6_br.style.display = 'none';\r\n                     span6_check.style.display = 'none';\r\n\r\n                     ul.appendChild(li1);\r\n                     ul.appendChild(li2);\r\n                     ul.appendChild(li3);\r\n                     page.appendChild(ul);\r\n\r\n\r\n                     if (!lib.config.asset_toggle_off) {\r\n                        span1.toggle();\r\n                     }\r\n                  }());\r\n                  (function () {\r\n                     var norow2 = function () {\r\n                        var node = currentrow1;\r\n                        if (!node) return false;\r\n                        return node.innerHTML == '横置' || node.innerHTML == '翻面' || node.innerHTML == '换人' || node.innerHTML == '复活';\r\n                     };\r\n                     var checkCheat = function () {\r\n                        if (norow2()) {\r\n                           for (var i = 0; i < row2.childElementCount; i++) {\r\n                              row2.childNodes[i].classList.remove('selectedx');\r\n                              row2.childNodes[i].classList.add('unselectable');\r\n                           }\r\n                        }\r\n                        else {\r\n                           for (var i = 0; i < row2.childElementCount; i++) {\r\n                              row2.childNodes[i].classList.remove('unselectable');\r\n                           }\r\n                        }\r\n                        if (currentrow1 && currentrow1.innerHTML == '复活') {\r\n                           for (var i = 0; i < row3.childNodes.length; i++) {\r\n                              if (row3.childNodes[i].dead) {\r\n                                 row3.childNodes[i].style.display = '';\r\n                              }\r\n                              else {\r\n                                 row3.childNodes[i].style.display = 'none';\r\n                                 row3.childNodes[i].classList.remove('glow');\r\n                              }\r\n                              row3.childNodes[i].classList.remove('unselectable');\r\n                           }\r\n                        }\r\n                        else {\r\n                           for (var i = 0; i < row3.childElementCount; i++) {\r\n                              if (currentrow1 && currentrow1.innerHTML == '换人' && row3.childNodes[i].link == game.me) {\r\n                                 row3.childNodes[i].classList.add('unselectable');\r\n                              }\r\n                              else {\r\n                                 row3.childNodes[i].classList.remove('unselectable');\r\n                              }\r\n                              if (!row3.childNodes[i].dead) {\r\n                                 row3.childNodes[i].style.display = '';\r\n                              }\r\n                              else {\r\n                                 row3.childNodes[i].style.display = 'none';\r\n                                 row3.childNodes[i].classList.remove('glow');\r\n                              }\r\n                           }\r\n                        }\r\n                        if (currentrow1 && (currentrow2 || norow2()) && row3.querySelector('.glow')) {\r\n                           cheatButton.classList.add('glowing');\r\n                           return true;\r\n                        }\r\n                        else {\r\n                           cheatButton.classList.remove('glowing');\r\n                           return false;\r\n                        }\r\n                     }\r\n                     cheatButton.listen(function () {\r\n                        if (checkCheat()) {\r\n                           var num;\r\n                           if (currentrow2) {\r\n                              switch (currentrow2.innerHTML) {\r\n                                 case '一': num = 1; break;\r\n                                 case '二': num = 2; break;\r\n                                 case '三': num = 3; break;\r\n                                 case '四': num = 4; break;\r\n                                 case '五': num = 5; break;\r\n                              }\r\n                           }\r\n                           var targets = [];\r\n                           var buttons = row3.querySelectorAll('.glow');\r\n                           for (var i = 0; i < buttons.length; i++) {\r\n                              targets.push(buttons[i].link);\r\n                           }\r\n                           while (targets.length) {\r\n                              var target = targets.shift();\r\n                              switch (currentrow1.innerHTML) {\r\n                                 case '伤害': target.damage(num, 'nosource'); break;\r\n                                 case '回复': target.recover(num, 'nosource'); break;\r\n                                 case '摸牌': target.draw(num); break;\r\n                                 case '弃牌': target.discard(target.getCards('he').randomGets(num)); break;\r\n                                 case '横置': target.link(); break;\r\n                                 case '翻面': target.turnOver(); break;\r\n                                 case '复活': target.revive(target.maxHp); break;\r\n                                 case '换人': {\r\n                                    if (_status.event.isMine()) {\r\n                                       if (!ui.auto.classList.contains('hidden')) {\r\n                                          setTimeout(function () {\r\n                                             ui.click.auto();\r\n                                             setTimeout(function () {\r\n                                                ui.click.auto();\r\n                                                game.swapPlayer(target);\r\n                                             }, 500);\r\n                                          });\r\n                                       }\r\n                                    }\r\n                                    else {\r\n                                       game.swapPlayer(target);\r\n                                    }\r\n                                    break;\r\n                                 }\r\n                              }\r\n                           }\r\n                           if (ui.coin) {\r\n                              game.changeCoin(-20);\r\n                           }\r\n                           clickContainer.call(menuContainer);\r\n                        }\r\n                     });\r\n\r\n                     var page = ui.create.div('');\r\n                     var node = ui.create.div('.menubutton.large', '控制', start.firstChild, clickMode);\r\n                     node.link = page;\r\n                     node.type = 'cheat';\r\n                     page.classList.add('menu-sym');\r\n\r\n                     var currentrow1 = null;\r\n                     var row1 = ui.create.div('.menu-cheat', page);\r\n                     var clickrow1 = function () {\r\n                        if (this.classList.contains('unselectable')) return;\r\n                        if (currentrow1 == this) {\r\n                           this.classList.remove('selectedx');\r\n                           currentrow1 = null;\r\n                        }\r\n                        else {\r\n                           this.classList.add('selectedx');\r\n                           if (currentrow1) {\r\n                              currentrow1.classList.remove('selectedx');\r\n                           }\r\n                           currentrow1 = this;\r\n                           if (this.innerHTML == '换人') {\r\n                              for (var i = 0; i < row3.childNodes.length; i++) {\r\n                                 row3.childNodes[i].classList.remove('glow');\r\n                              }\r\n                           }\r\n                        }\r\n                        checkCheat();\r\n                     };\r\n                     var nodedamage = ui.create.div('.menubutton', '伤害', row1, clickrow1);\r\n                     var noderecover = ui.create.div('.menubutton', '回复', row1, clickrow1);\r\n                     var nodedraw = ui.create.div('.menubutton', '摸牌', row1, clickrow1);\r\n                     var nodediscard = ui.create.div('.menubutton', '弃牌', row1, clickrow1);\r\n                     var nodelink = ui.create.div('.menubutton', '横置', row1, clickrow1);\r\n                     var nodeturnover = ui.create.div('.menubutton', '翻面', row1, clickrow1);\r\n                     var noderevive = ui.create.div('.menubutton', '复活', row1, clickrow1);\r\n                     var nodereplace = ui.create.div('.menubutton', '换人', row1, clickrow1);\r\n                     if (lib.config.mode != 'identity' && lib.config.mode != 'guozhan' && lib.config.mode != 'doudizhu') {\r\n                        nodereplace.classList.add('unselectable');\r\n                     }\r\n\r\n                     var currentrow2 = null;\r\n                     var row2 = ui.create.div('.menu-cheat', page);\r\n                     var clickrow2 = function () {\r\n                        if (this.classList.contains('unselectable')) return;\r\n                        if (currentrow2 == this) {\r\n                           this.classList.remove('selectedx');\r\n                           currentrow2 = null;\r\n                        }\r\n                        else {\r\n                           this.classList.add('selectedx');\r\n                           if (currentrow2) {\r\n                              currentrow2.classList.remove('selectedx');\r\n                           }\r\n                           currentrow2 = this;\r\n                        }\r\n                        checkCheat();\r\n                     };\r\n                     var nodex1 = ui.create.div('.menubutton', '一', row2, clickrow2);\r\n                     var nodex2 = ui.create.div('.menubutton', '二', row2, clickrow2);\r\n                     var nodex3 = ui.create.div('.menubutton', '三', row2, clickrow2);\r\n                     var nodex4 = ui.create.div('.menubutton', '四', row2, clickrow2);\r\n                     var nodex5 = ui.create.div('.menubutton', '五', row2, clickrow2);\r\n\r\n                     var row3 = ui.create.div('.menu-buttons.leftbutton.commandbutton', page);\r\n                     row3.style.marginTop = '3px';\r\n                     var clickrow3 = function () {\r\n                        if (this.classList.contains('unselectable')) return;\r\n                        this.classList.toggle('glow');\r\n                        if (currentrow1 && currentrow1.innerHTML == '换人' && this.classList.contains('glow')) {\r\n                           if (this.link == game.me) {\r\n                              this.classList.remove('glow');\r\n                           }\r\n                           for (var i = 0; i < row3.childElementCount; i++) {\r\n                              if (row3.childNodes[i] != this) {\r\n                                 row3.childNodes[i].classList.remove('glow');\r\n                              }\r\n                           }\r\n                        }\r\n                        checkCheat();\r\n                     };\r\n                     menuUpdates.push(function () {\r\n                        if (_status.video || _status.connectMode || _status.yindao) {\r\n                           node.classList.add('off');\r\n                           if (node.classList.contains('active')) {\r\n                              node.classList.remove('active');\r\n                              node.link.remove();\r\n                              active = start.firstChild.firstChild;\r\n                              active.classList.add('active');\r\n                              rightPane.appendChild(active.link);\r\n                           }\r\n\r\n                           page.remove();\r\n                           cheatButton.remove();\r\n                           if (_status.video) node.remove();\r\n                           return;\r\n                        }\r\n                        var list = [];\r\n                        for (var i = 0; i < game.players.length; i++) {\r\n                           if (lib.character[game.players[i].name] || game.players[i].name1) {\r\n                              list.push(game.players[i]);\r\n                           }\r\n                        }\r\n                        for (var i = 0; i < game.dead.length; i++) {\r\n                           if (lib.character[game.dead[i].name] || game.dead[i].name1) {\r\n                              list.push(game.dead[i]);\r\n                           }\r\n                        }\r\n                        if (list.length) {\r\n                           row1.show();\r\n                           row2.show();\r\n                           row3.innerHTML = '';\r\n                           var buttons = ui.create.buttons(list, 'player', row3, true);\r\n                           for (var i = 0; i < buttons.length; i++) {\r\n                              buttons[i].listen(clickrow3);\r\n                              if (game.dead.contains(buttons[i].link)) {\r\n                                 buttons[i].dead = true;\r\n                              }\r\n                           }\r\n                           checkCheat();\r\n                        }\r\n                        else {\r\n                           row1.hide();\r\n                           row2.hide();\r\n                        }\r\n                        if (lib.config.mode == 'identity' || lib.config.mode == 'guozhan' || lib.config.mode == 'doudizhu') {\r\n                           if (game.notMe || (game.me && (game.me._trueMe || game.hasPlayer(function (current) {\r\n                              return current._trueMe == game.me;\r\n                           }))) || !game.phaseNumber || _status.qianlidanji) {\r\n                              nodereplace.classList.add('unselectable');\r\n                           }\r\n                           else if (_status.event.isMine() && ui.auto.classList.contains('hidden')) {\r\n                              nodereplace.classList.add('unselectable');\r\n                           }\r\n                           else {\r\n                              nodereplace.classList.remove('unselectable');\r\n                           }\r\n                        }\r\n                        if (game.dead.length == 0) {\r\n                           noderevive.classList.add('unselectable');\r\n                        }\r\n                        else {\r\n                           noderevive.classList.remove('unselectable');\r\n                        }\r\n                        checkCheat();\r\n                     });\r\n                  }());\r\n                  (function () {\r\n                     var page = ui.create.div('');\r\n                     var node = ui.create.div('.menubutton.large', '命令', start.firstChild, clickMode);\r\n                     ui.commandnode = node;\r\n                     node.type = 'cmd';\r\n                     node.link = page;\r\n                     page.classList.add('menu-sym');\r\n                     menuUpdates.push(function () {\r\n                        if (_status.connectMode) {\r\n                           node.classList.add('off');\r\n                           if (node.classList.contains('active')) {\r\n                              node.classList.remove('active');\r\n                              node.link.remove();\r\n                              active = start.firstChild.firstChild;\r\n                              active.classList.add('active');\r\n                              rightPane.appendChild(active.link);\r\n                           }\r\n                        }\r\n                     });\r\n                     var text = document.createElement('div');\r\n                     text.style.width = '194px';\r\n                     text.style.height = '124px';\r\n                     text.style.padding = '3px';\r\n                     text.style.borderRadius = '2px';\r\n                     text.style.boxShadow = 'rgba(0, 0, 0, 0.2) 0 0 0 1px';\r\n                     text.style.textAlign = 'left';\r\n                     text.style.webkitUserSelect = 'initial';\r\n                     text.style.overflow = 'scroll';\r\n                     text.style.position = 'absolute';\r\n                     text.style.left = '30px';\r\n                     text.style.top = '50px';\r\n                     text.style.wordBreak = 'break-all';\r\n                     var pre = ui.create.node('pre.fullsize', text);\r\n                     pre.style.margin = 0;\r\n                     pre.style.padding = 0;\r\n                     pre.style.position = 'relative';\r\n                     lib.setScroll(pre);\r\n                     page.appendChild(text);\r\n\r\n                     // var caption=ui.create.div('','输入命令',page);\r\n                     // caption.style.margin='6px';\r\n                     // caption.style.position='absolute';\r\n                     // caption.style.width='120px';\r\n                     // caption.style.top='129px';\r\n                     // caption.style.left='64px';\r\n                     var text2 = document.createElement('input');\r\n                     text2.style.width = '200px';\r\n                     text2.style.height = '20px';\r\n                     text2.style.padding = '0';\r\n                     text2.style.position = 'absolute';\r\n                     text2.style.top = '15px';\r\n                     text2.style.left = '30px';\r\n                     text2.style.resize = 'none';\r\n                     text2.style.border = 'none';\r\n                     text2.style.borderRadius = '2px';\r\n                     text2.style.boxShadow = 'rgba(0, 0, 0, 0.2) 0 0 0 1px';\r\n                     var g = {};\r\n                     var logs = [];\r\n                     var logindex = -1;\r\n                     var cheat = lib.cheat;\r\n                     var runCommand = function (e) {\r\n                        if (text2.value && !['up', 'down'].contains(text2.value)) {\r\n                           logindex = -1;\r\n                           logs.unshift(text2.value);\r\n                        }\r\n                        if (text2.value == 'cls') {\r\n                           pre.innerHTML = '';\r\n                           text2.value = '';\r\n                        }\r\n                        else if (text2.value == 'up') {\r\n                           if (logindex + 1 < logs.length) {\r\n                              text2.value = logs[++logindex];\r\n                           }\r\n                           else {\r\n                              text2.value = '';\r\n                           }\r\n                        }\r\n                        else if (text2.value == 'down') {\r\n                           if (logindex >= 0) {\r\n                              logindex--;\r\n                              if (logindex < 0) {\r\n                                 text2.value = '';\r\n                              }\r\n                              else {\r\n                                 text2.value = logs[logindex];\r\n                              }\r\n                           }\r\n                           else {\r\n                              text2.value = '';\r\n                           }\r\n                        }\r\n                        else if (text2.value.indexOf('无天使') != -1 && (text2.value.indexOf('无神佛') != -1 || text2.value.indexOf('无神') != -1 && text2.value.indexOf('无佛') != -1)) {\r\n                           game.print('密码正确！欢迎来到死后世界战线！');\r\n                           _status.keyVerified = true;\r\n                           text2.value = '';\r\n                        }\r\n                        else {\r\n                           if (!game.observe && !game.online) {\r\n                              try {\r\n                                 var result = eval(text2.value);\r\n                                 game.print(result);\r\n                              }\r\n                              catch (e) {\r\n                                 game.print(e);\r\n                              }\r\n                           }\r\n                           text2.value = '';\r\n                        }\r\n                     }\r\n                     text2.addEventListener('keydown', function (e) {\r\n                        if (e.keyCode == 13) {\r\n                           runCommand();\r\n                        }\r\n                        else if (e.keyCode == 38) {\r\n                           if (logindex + 1 < logs.length) {\r\n                              text2.value = logs[++logindex];\r\n                           }\r\n                        }\r\n                        else if (e.keyCode == 40) {\r\n                           if (logindex >= 0) {\r\n                              logindex--;\r\n                              if (logindex < 0) {\r\n                                 text2.value = '';\r\n                              }\r\n                              else {\r\n                                 text2.value = logs[logindex];\r\n                              }\r\n                           }\r\n                        }\r\n                     });\r\n                     page.appendChild(text2);\r\n                     game.print = function () {\r\n                        var textstr = '';\r\n                        for (var i = 0; i < arguments.length; i++) {\r\n                           if (get.is.object(arguments[i])) {\r\n                              var argi = get.stringify(arguments[i]);\r\n                              if (argi && argi.length < 5000) {\r\n                                 textstr += argi;\r\n                              }\r\n                              else {\r\n                                 textstr += arguments[i].toString();\r\n                              }\r\n                           }\r\n                           else {\r\n                              textstr += arguments[i];\r\n                           }\r\n                           if (i < arguments.length - 1) {\r\n                              textstr += ' ';\r\n                           }\r\n                        }\r\n                        textstr += '<br>';\r\n                        pre.innerHTML += textstr;\r\n                        text.scrollTop = text.scrollHeight;\r\n                     }\r\n                     if (_status.toprint) {\r\n                        for (var i = 0; i < _status.toprint.length; i++) {\r\n                           game.print.apply(this, _status.toprint[i]);\r\n                        }\r\n                        delete _status.toprint;\r\n                     }\r\n                     runButton.listen(runCommand);\r\n                     clearButton.listen(function () {\r\n                        pre.innerHTML = '';\r\n                     });\r\n                  }());\r\n                  (function () {\r\n                     var page = ui.create.div('');\r\n                     var node = ui.create.div('.menubutton.large', '战绩', start.firstChild, clickMode);\r\n                     node.type = 'rec';\r\n                     node.link = page;\r\n                     page.style.paddingBottom = '10px';\r\n                     var reset = function () {\r\n                        if (this.innerHTML == '重置') {\r\n                           this.innerHTML = '确定';\r\n                           var that = this;\r\n                           setTimeout(function () {\r\n                              that.innerHTML = '重置';\r\n                           }, 1000);\r\n                        }\r\n                        else {\r\n                           this.parentNode.previousSibling.remove();\r\n                           this.parentNode.remove();\r\n                           lib.config.gameRecord[this.parentNode.link] = { data: {} };\r\n                           game.saveConfig('gameRecord', lib.config.gameRecord);\r\n                        }\r\n                     }\r\n                     for (var i = 0; i < lib.config.all.mode.length; i++) {\r\n                        if (!lib.config.gameRecord[lib.config.all.mode[i]]) continue;\r\n                        if (lib.config.gameRecord[lib.config.all.mode[i]].str) {\r\n                           ui.create.div('.config.indent', lib.translate[lib.config.all.mode[i]], page).style.marginBottom = '-5px';\r\n                           var item = ui.create.div('.config.indent', lib.config.gameRecord[lib.config.all.mode[i]].str + '<span>重置</span>', page);\r\n                           item.style.height = 'auto';\r\n                           item.lastChild.addEventListener('click', reset);\r\n                           item.lastChild.classList.add('pointerdiv');\r\n                           item.link = lib.config.all.mode[i];\r\n                        }\r\n                     }\r\n                  }());\r\n                  (function () {\r\n                     if (!window.indexedDB || window.nodb) return;\r\n                     var page = ui.create.div('');\r\n                     var node = ui.create.div('.menubutton.large', '录像', start.firstChild, clickMode);\r\n                     node.type = 'video';\r\n                     node.link = page;\r\n\r\n                     var store = lib.db.transaction(['video'], 'readwrite').objectStore('video');\r\n                     lib.videos = [];\r\n                     store.openCursor().onsuccess = function (e) {\r\n                        var cursor = e.target.result;\r\n                        if (cursor) {\r\n                           lib.videos.push(cursor.value);\r\n                           cursor.continue();\r\n                        }\r\n                        else {\r\n                           lib.videos.sort(function (a, b) {\r\n                              return parseInt(b.time) - parseInt(a.time);\r\n                           });\r\n                           var clickcapt = function () {\r\n                              var current = this.parentNode.querySelector('.videonode.active');\r\n                              if (current && current != this) {\r\n                                 current.classList.remove('active');\r\n                              }\r\n                              if (this.classList.toggle('active')) {\r\n                                 playButton.show();\r\n                                 deleteButton.show();\r\n                                 saveButton.show();\r\n                              }\r\n                              else {\r\n                                 playButton.hide();\r\n                                 deleteButton.hide();\r\n                                 saveButton.hide();\r\n                              }\r\n                           };\r\n                           var staritem = function () {\r\n                              this.parentNode.classList.toggle('starred');\r\n                              var store = lib.db.transaction(['video'], 'readwrite').objectStore('video');\r\n                              if (this.parentNode.classList.contains('starred')) {\r\n                                 this.parentNode.link.starred = true;\r\n                              }\r\n                              else {\r\n                                 this.parentNode.link.starred = false;\r\n                              }\r\n                              store.put(this.parentNode.link);\r\n                           }\r\n                           var createNode = function (video, before) {\r\n                              var node = ui.create.div('.videonode.menubutton.large', clickcapt);\r\n                              node.link = video;\r\n                              var nodename1 = ui.create.div('.menubutton.videoavatar', node);\r\n                              nodename1.setBackground(video.name1, 'character');\r\n                              if (video.name2) {\r\n                                 var nodename2 = ui.create.div('.menubutton.videoavatar2', node);\r\n                                 nodename2.setBackground(video.name2, 'character');\r\n                              }\r\n                              var date = new Date(video.time);\r\n                              var str = date.getFullYear() + '.' + (date.getMonth() + 1) + '.' + (date.getDate()) + ' ' +\r\n                                 date.getHours() + ':';\r\n                              var minutes = date.getMinutes();\r\n                              if (minutes < 10) {\r\n                                 str += '0';\r\n                              }\r\n                              str += minutes;\r\n                              ui.create.div('.caption', video.name[0], node);\r\n                              ui.create.div('.text', str + '<br>' + video.name[1], node);\r\n                              if (video.win) {\r\n                                 ui.create.div('.victory', '胜', node);\r\n                              }\r\n\r\n                              if (before) {\r\n                                 page.insertBefore(node, page.firstChild);\r\n                              }\r\n                              else {\r\n                                 page.appendChild(node);\r\n                              }\r\n                              ui.create.div('.video_star', '★', node, staritem);\r\n                              if (video.starred) {\r\n                                 node.classList.add('starred');\r\n                              }\r\n                           }\r\n                           for (var i = 0; i < lib.videos.length; i++) {\r\n                              createNode(lib.videos[i]);\r\n                           }\r\n                           ui.create.videoNode = createNode;\r\n                           var importVideoNode = ui.create.div('.config.switcher.pointerspan',\r\n                              '<span class=\"underlinenode slim \">导入录像...</span>', function () {\r\n                                 this.nextSibling.classList.toggle('hidden');\r\n                              }, page);\r\n                           importVideoNode.style.marginLeft = '12px';\r\n                           importVideoNode.style.marginTop = '3px';\r\n                           var importVideo = ui.create.div('.config.hidden', page);\r\n                           importVideo.style.whiteSpace = 'nowrap';\r\n                           importVideo.style.marginBottom = '80px';\r\n                           importVideo.style.marginLeft = '13px';\r\n                           importVideo.style.width = 'calc(100% - 30px)';\r\n                           importVideo.innerHTML = '<input type=\"file\" style=\"width:calc(100% - 40px)\">' +\r\n                              '<button style=\"width:40px\">确定</button>';\r\n                           importVideo.lastChild.onclick = function () {\r\n                              var fileToLoad = importVideo.firstChild.files[0];\r\n                              var fileReader = new FileReader();\r\n                              fileReader.onload = function (fileLoadedEvent) {\r\n                                 var data = fileLoadedEvent.target.result;\r\n                                 if (!data) return;\r\n                                 try {\r\n                                    data = JSON.parse(lib.init.decode(data));\r\n                                 }\r\n                                 catch (e) {\r\n                                    console.log(e);\r\n                                    alert('导入失败');\r\n                                    return;\r\n                                 }\r\n                                 var store = lib.db.transaction(['video'], 'readwrite').objectStore('video');\r\n                                 var videos = lib.videos.slice(0);\r\n                                 for (var i = 0; i < videos.length; i++) {\r\n                                    if (videos[i].starred) {\r\n                                       videos.splice(i--, 1);\r\n                                    }\r\n                                 }\r\n                                 for (var deletei = 0; deletei < 5; deletei++) {\r\n                                    if (videos.length >= parseInt(lib.config.video) && videos.length) {\r\n                                       var toremove = videos.pop();\r\n                                       lib.videos.remove(toremove);\r\n                                       store.delete(toremove.time);\r\n                                       for (var i = 0; i < page.childNodes.length; i++) {\r\n                                          if (page.childNodes[i].link == toremove) {\r\n                                             page.childNodes[i].remove();\r\n                                             break;\r\n                                          }\r\n                                       }\r\n                                    }\r\n                                    else {\r\n                                       break;\r\n                                    }\r\n                                 }\r\n                                 for (var i = 0; i < lib.videos.length; i++) {\r\n                                    if (lib.videos[i].time == data.time) {\r\n                                       alert('录像已存在');\r\n                                       return;\r\n                                    }\r\n                                 }\r\n                                 lib.videos.unshift(data);\r\n                                 store.put(data);\r\n                                 createNode(data, true);\r\n                              };\r\n                              fileReader.readAsText(fileToLoad, \"UTF-8\");\r\n                           }\r\n\r\n                           playButton.listen(function () {\r\n                              var current = this.parentNode.querySelector('.videonode.active');\r\n                              if (current) {\r\n                                 game.playVideo(current.link.time, current.link.mode);\r\n                              }\r\n                           });\r\n                           deleteButton.listen(function () {\r\n                              var current = this.parentNode.querySelector('.videonode.active');\r\n                              if (current) {\r\n                                 lib.videos.remove(current.link);\r\n                                 var store = lib.db.transaction(['video'], 'readwrite').objectStore('video');\r\n                                 store.delete(current.link.time);\r\n                                 current.remove();\r\n                              }\r\n                           });\r\n                           saveButton.listen(function () {\r\n                              var current = this.parentNode.querySelector('.videonode.active');\r\n                              if (current) {\r\n                                 game.export(lib.init.encode(JSON.stringify(current.link)),\r\n                                    '无名杀 - 录像 - ' + current.link.name[0] + ' - ' + current.link.name[1]);\r\n                              }\r\n                           });\r\n\r\n                           ui.updateVideoMenu = function () {\r\n                              var active = start.firstChild.querySelector('.active');\r\n                              if (active) {\r\n                                 active.classList.remove('active');\r\n                                 active.link.remove();\r\n                              }\r\n                              node.classList.add('active');\r\n                              rightPane.appendChild(page);\r\n                              playButton.style.display = '';\r\n                              deleteButton.style.display = '';\r\n                              saveButton.style.display = '';\r\n                           }\r\n                        }\r\n                     };\r\n                  }());\r\n\r\n\r\n                  for (var i in lib.help) {\r\n                     var page = ui.create.div('');\r\n                     var node = ui.create.div('.menubutton.large', i, start.firstChild, clickMode);\r\n                     node.type = 'help';\r\n                     node.link = page;\r\n                     node.style.display = 'none';\r\n                     page.classList.add('menu-help');\r\n                     page.innerHTML = lib.help[i];\r\n                  }\r\n\r\n                  if (!connectMenu) {\r\n                     var node = ui.create.div('.menubutton.large', '帮助', start.firstChild, function () {\r\n                        var activex = start.firstChild.querySelector('.active');\r\n                        if (this.innerHTML == '帮助') {\r\n                           cheatButton.style.display = 'none';\r\n                           runButton.style.display = 'none';\r\n                           clearButton.style.display = 'none';\r\n                           playButton.style.display = 'none';\r\n                           saveButton.style.display = 'none';\r\n                           deleteButton.style.display = 'none';\r\n\r\n                           this.innerHTML = '返回';\r\n                           for (var i = 0; i < start.firstChild.childElementCount; i++) {\r\n                              var nodex = start.firstChild.childNodes[i];\r\n                              if (nodex == node) continue;\r\n                              if (nodex.type == 'help') {\r\n                                 nodex.style.display = '';\r\n                                 if (activex && activex.type != 'help') {\r\n                                    activex.classList.remove('active');\r\n                                    activex.link.remove();\r\n                                    activex = null;\r\n                                    nodex.classList.add('active');\r\n                                    rightPane.appendChild(nodex.link);\r\n                                 }\r\n                              }\r\n                              else {\r\n                                 nodex.style.display = 'none';\r\n                              }\r\n                           }\r\n                        }\r\n                        else {\r\n                           this.innerHTML = '帮助';\r\n                           for (var i = 0; i < start.firstChild.childElementCount; i++) {\r\n                              var nodex = start.firstChild.childNodes[i];\r\n                              if (nodex == node) continue;\r\n                              if (nodex.type != 'help') {\r\n                                 nodex.style.display = '';\r\n                                 if (activex && activex.type == 'help') {\r\n                                    activex.classList.remove('active');\r\n                                    activex.link.remove();\r\n                                    activex = null;\r\n                                    clickMode.call(nodex);\r\n                                 }\r\n                              }\r\n                              else {\r\n                                 nodex.style.display = 'none';\r\n                              }\r\n                           }\r\n                        }\r\n                     });\r\n                  }\r\n\r\n                  var active = start.firstChild.querySelector('.active');\r\n                  if (!active) {\r\n                     active = start.firstChild.firstChild;\r\n                     active.classList.add('active');\r\n                  }\r\n                  rightPane.appendChild(active.link);\r\n               }());\r\n\r\n               if (menuTimeout) {\r\n                  clearTimeout(menuTimeout);\r\n                  delete window.resetExtension;\r\n                  localStorage.removeItem(lib.configprefix + 'disable_extension', true);\r\n               }\r\n            },\r\n            table: function () {\r\n               var str, row, col, position, position2, fixed, style, divposition;\r\n               for (var i = 0; i < arguments.length; i++) {\r\n                  if (typeof arguments[i] == 'string') str = arguments[i];\r\n                  else if (typeof arguments[i] == 'number') {\r\n                     if (typeof row == 'number') {\r\n                        if (typeof col == 'number') position2 = arguments[i];\r\n                        else col = arguments[i];\r\n                     }\r\n                     else row = arguments[i];\r\n                  }\r\n                  else if (get.objtype(arguments[i]) == 'div' ||\r\n                     get.objtype(arguments[i]) == 'table' ||\r\n                     get.objtype(arguments[i]) == 'tr' ||\r\n                     get.objtype(arguments[i]) == 'td' ||\r\n                     get.objtype(arguments[i]) == 'body') position = arguments[i];\r\n                  else if (typeof arguments[i] == 'boolean') fixed = arguments[i];\r\n                  else if (get.itemtype(arguments[i]) == 'divposition') divposition = arguments[i];\r\n                  else if (typeof arguments[i] == 'object') style = arguments[i];\r\n               }\r\n               if (str == undefined) str = '';\r\n               var node = document.createElement('table');\r\n               for (var i = 0; i < str.length; i++) {\r\n                  if (str[i] == '.') {\r\n                     if (node.className.length != 0) {\r\n                        node.className += ' ';\r\n                     }\r\n                     while (str[i + 1] != '.' && str[i + 1] != '#' && i + 1 < str.length) {\r\n                        node.className += str[i + 1];\r\n                        i++;\r\n                     }\r\n                  }\r\n                  else if (str[i] == '#') {\r\n                     while (str[i + 1] != '.' && str[i + 1] != '#' && i + 1 < str.length) {\r\n                        node.id += str[i + 1];\r\n                        i++;\r\n                     }\r\n                  }\r\n               }\r\n               var tr, td;\r\n               for (var i = 0; i < row; i++) {\r\n                  tr = document.createElement('tr');\r\n                  if (fixed) tr.style.height = (100 / row) + '%';\r\n                  node.appendChild(tr);\r\n                  for (var j = 0; j < col; j++) {\r\n                     td = document.createElement('td');\r\n                     tr.appendChild(td);\r\n                  }\r\n               }\r\n               if (position) {\r\n                  if (typeof position2 == 'number' && position.childNodes.length > position2) {\r\n                     position.insertBefore(node, position.childNodes[position2]);\r\n                  }\r\n                  else {\r\n                     position.appendChild(node);\r\n                  }\r\n               }\r\n               return node;\r\n            },\r\n            giveup: function () {\r\n               if (ui.giveup) return;\r\n               if (!lib.config.show_giveup) return;\r\n               ui.giveup = ui.create.system('投降', function () {\r\n                  var player = game.me;\r\n                  this.remove();\r\n                  if (game.online) {\r\n                     game.send('giveup', player);\r\n                  }\r\n                  else {\r\n                     _status.event.next.length = 0;\r\n                     game.createEvent('giveup', false).setContent(function () {\r\n                        game.log(player, '投降');\r\n                        player.popup('投降');\r\n                        player.die('nosource');\r\n                     }).player = player;\r\n                  }\r\n                  if (_status.paused && _status.imchoosing && !_status.auto) {\r\n                     ui.click.auto();\r\n                  }\r\n               }, true, true);\r\n            },\r\n            groupControl: function (dialog) {\r\n               return ui.create.control(...lib.group2, function (link, node) {//'wei','shu','wu','western','key',\r\n                  if (link == '全部') {\r\n                     dialog.currentcapt = '';\r\n                     dialog.currentgroup = '';\r\n                     for (var i = 0; i < dialog.buttons.length; i++) {\r\n                        dialog.buttons[i].style.display = '';\r\n                     }\r\n                  }\r\n                  else {\r\n                     if (node.classList.contains('thundertext')) {\r\n                        dialog.currentgroup = null;\r\n                        dialog.currentgroupnode = null;\r\n                        node.classList.remove('thundertext');\r\n                        for (var i = 0; i < dialog.buttons.length; i++) {\r\n                           if (dialog.currentcapt && dialog.buttons[i].capt != dialog.getCurrentCapt(dialog.buttons[i].link, dialog.buttons[i].capt)) {\r\n                              dialog.buttons[i].classList.add('nodisplay');\r\n                           }\r\n                           else {\r\n                              dialog.buttons[i].classList.remove('nodisplay');\r\n                           }\r\n                        }\r\n                     }\r\n                     else {\r\n                        if (dialog.currentgroupnode) {\r\n                           dialog.currentgroupnode.classList.remove('thundertext');\r\n                        }\r\n                        dialog.currentgroup = link;\r\n                        dialog.currentgroupnode = node;\r\n                        node.classList.add('thundertext');\r\n                        for (var i = 0; i < dialog.buttons.length; i++) {\r\n                           if (dialog.buttons[i].group != link ||\r\n                              (dialog.currentcapt && dialog.buttons[i].capt != dialog.getCurrentCapt(dialog.buttons[i].link, dialog.buttons[i].capt))) {\r\n                              dialog.buttons[i].classList.add('nodisplay');\r\n                           }\r\n                           else {\r\n                              dialog.buttons[i].classList.remove('nodisplay');\r\n                           }\r\n                        }\r\n                     }\r\n                  }\r\n               });\r\n            },\r\n            /**\r\n             * 生成带有卡牌按钮的弹窗\r\n             * @function\r\n             * @returns {HTMLDivElement} 返回生成的弹窗\r\n             * @see {@link ui.create.characterDialog}\r\n             */\r\n            cardDialog: function () {\r\n               var args = ['thisiscard'];\r\n               for (var i = 0; i < arguments.length; i++) {\r\n                  args.push(arguments[i]);\r\n               }\r\n               return ui.create.characterDialog.apply(this, args);\r\n            },\r\n            characterDialog2: function (filter) {\r\n               var list = [];\r\n               for (var i in lib.character) {\r\n                  if (lib.character[i][4].contains('minskin')) continue;\r\n                  if (lib.character[i][4].contains('boss') || lib.character[i][4].contains('hiddenboss')) {\r\n                     if (lib.config.mode == 'boss') continue;\r\n                     if (!lib.character[i][4].contains('bossallowed')) continue;\r\n                  }\r\n\r\n                  if (lib.character[i][4].contains('stonehidden')) continue;\r\n                  if (lib.config.banned.contains(i)) continue;\r\n                  if (filter && filter(i)) continue;\r\n                  list.push(i);\r\n               }\r\n               var dialog = ui.create.dialog('hidden');\r\n               dialog.classList.add('noupdate');\r\n               dialog.classList.add('scroll1');\r\n               dialog.classList.add('scroll2');\r\n               dialog.classList.add('scroll3');\r\n               list.sort(lib.sort.character);\r\n               dialog.classList.add('character');\r\n               dialog.classList.add('choose-character');\r\n               var getPack = function (name) {\r\n                  for (var i in lib.characterPack) {\r\n                     if (lib.characterPack[i][name]) return i;\r\n                  }\r\n                  return null;\r\n               }\r\n               var packs = {};\r\n               var packnode = ui.create.div('.packnode', dialog);\r\n               lib.setScroll(packnode);\r\n               var clickCapt = function () {\r\n                  var active = this.parentNode.querySelector('.active');\r\n                  if (active) {\r\n                     active.classList.remove('active');\r\n                  }\r\n                  this.classList.add('active');\r\n                  for (var i = 0; i < dialog.buttons.length; i++) {\r\n                     if (this.pack && !this.pack.contains(dialog.buttons[i].link)) {\r\n                        dialog.buttons[i].classList.add('nodisplay');\r\n                     }\r\n                     else {\r\n                        dialog.buttons[i].classList.remove('nodisplay');\r\n                     }\r\n                  }\r\n               }\r\n               var createNode = function (packname) {\r\n                  var translate;\r\n                  var pack = null;\r\n                  if (packname == '最近') {\r\n                     pack = get.config('recentCharacter') || [];\r\n                  }\r\n                  else if (packname == '收藏') {\r\n                     pack = lib.config.favouriteCharacter;\r\n                  }\r\n                  var node = ui.create.div('.dialogbutton.menubutton.large', packname, packnode, clickCapt);\r\n                  node.pack = pack;\r\n                  return node;\r\n               }\r\n               dialog.add([list, 'character']);\r\n               var bool = true;\r\n               var node;\r\n               var recent = get.config('recentCharacter');\r\n               if (recent && recent.length) {\r\n                  node = createNode('最近');\r\n                  if (lib.config.character_dialog_tool == '最近') {\r\n                     clickCapt.call(node);\r\n                     bool = false;\r\n                  }\r\n               }\r\n               if (lib.config.favouriteCharacter.length) {\r\n                  node = createNode('收藏');\r\n                  if (lib.config.character_dialog_tool == '收藏') {\r\n                     clickCapt.call(node);\r\n                     bool = false;\r\n                  }\r\n               }\r\n               var node = createNode('全部');\r\n               if (lib.config.character_dialog_tool == 'all') {\r\n                  clickCapt.call(node);\r\n                  bool = false;\r\n               }\r\n               if (bool) {\r\n                  clickCapt.call(packnode.firstChild);\r\n               }\r\n\r\n               var node = ui.create.div('.dialogbutton.menubutton.large', '筛选', packnode);\r\n               return dialog;\r\n            },\r\n            /**\r\n             * 生成带有卡牌或角色按钮的弹窗\r\n             * @function\r\n             * @param {?string} thisiscard 是否是卡牌\r\n             * @param {?string} heightset 是否是大弹窗\r\n             * @param {?string} characterx 同一角色是否可替换武将牌（例如在标准和界限突破间切换）\r\n             * @param {?function} filter 卡牌或角色的筛选条件\r\n             * @param {?boolean} noclick 按钮是否可以被点击\r\n             * @returns {HTMLDivElement} 返回生成的弹窗\r\n             */\r\n            characterDialog: function () {\r\n               // if(lib.config.character_dialog_style=='newstyle'){\r\n               //     for(var i=0;i<arguments.length;i++){\r\n               //                  if(arguments[i]=='thisiscard'){\r\n               //                               break;\r\n               //                  }\r\n               //     }\r\n               //     if(i==arguments.length){\r\n               //                  return ui.create.characterDialog2.apply(this,arguments);\r\n               //     }\r\n               // }\r\n               var filter, str, noclick, thisiscard, seperate, expandall, onlypack, heightset, precharacter, characterx;\r\n               for (var i = 0; i < arguments.length; i++) {\r\n                  if (arguments[i] === 'thisiscard') {\r\n                     thisiscard = true;\r\n                  }\r\n                  else if (arguments[i] === 'expandall') {\r\n                     expandall = true;\r\n                  }\r\n                  else if (arguments[i] === 'heightset') {\r\n                     heightset = true;\r\n                  }\r\n                  else if (arguments[i] == 'precharacter') {\r\n                     precharacter = true;\r\n                  }\r\n                  else if (arguments[i] == 'characterx') {\r\n                     characterx = true;\r\n                  }\r\n                  else if (typeof arguments[i] == 'string' && arguments[i].indexOf('onlypack:') == 0) {\r\n                     onlypack = arguments[i].slice(9);\r\n                  }\r\n                  else if (typeof arguments[i] == 'object' && typeof arguments[i].seperate == 'function') {\r\n                     seperate = arguments[i].seperate;\r\n                  }\r\n                  else if (typeof arguments[i] === 'string') {\r\n                     str = arguments[i];\r\n                  }\r\n                  else if (typeof arguments[i] === 'function') {\r\n                     filter = arguments[i];\r\n                  }\r\n                  else if (typeof arguments[i] == 'boolean') {\r\n                     noclick = arguments[i];\r\n                  }\r\n               }\r\n               var list = [];\r\n               var dialog;\r\n               var node = ui.create.div('.caption.pointerspan');\r\n               if (get.is.phoneLayout()) {\r\n                  node.style.fontSize = '30px';\r\n               }\r\n               var namecapt = [];\r\n               var getCapt = function (str) {\r\n                  var capt;\r\n                  if (str.indexOf('_') == -1) {\r\n                     capt = str[0];\r\n                  }\r\n                  else {\r\n                     capt = str[str.lastIndexOf('_') + 1];\r\n                  }\r\n                  capt = capt.toLowerCase();\r\n                  if (!/[a-z]/i.test(capt)) {\r\n                     capt = '自定义';\r\n                  }\r\n                  return capt;\r\n               }\r\n               if (thisiscard) {\r\n                  for (var i in lib.card) {\r\n                     if (!lib.translate[i + '_info']) continue;\r\n                     if (filter && filter(i)) continue;\r\n                     list.push(['', get.translation(lib.card[i].type), i]);\r\n                     if (namecapt.indexOf(getCapt(i)) == -1) {\r\n                        namecapt.push(getCapt(i));\r\n                     }\r\n                  }\r\n               }\r\n               else {\r\n                  for (var i in lib.character) {\r\n                     if (lib.character[i][4].contains('minskin')) continue;\r\n                     if (lib.character[i][4].contains('boss') || lib.character[i][4].contains('hiddenboss')) {\r\n                        if (lib.config.mode == 'boss') continue;\r\n                        if (!lib.character[i][4].contains('bossallowed')) continue;\r\n                     }\r\n\r\n                     if (lib.character[i][4].contains('stonehidden')) continue;\r\n                     if (lib.character[i][4].contains('unseen')) continue;\r\n                     if (lib.config.banned.contains(i)) continue;\r\n                     if (lib.characterFilter[i] && !lib.characterFilter[i](get.mode())) continue;\r\n                     if (filter && filter(i)) continue;\r\n                     list.push(i);\r\n                     if (namecapt.indexOf(getCapt(i)) == -1) {\r\n                        namecapt.push(getCapt(i));\r\n                     }\r\n                  }\r\n               }\r\n               namecapt.sort(function (a, b) {\r\n                  return a > b ? 1 : -1;\r\n               });\r\n               if (!thisiscard) {\r\n                  namecapt.remove('自定义');\r\n                  namecapt.push('newline');\r\n                  for (var i in lib.characterDialogGroup) {\r\n                     namecapt.push(i);\r\n                  }\r\n               }\r\n               var newlined = false;\r\n               var newlined2;\r\n               var packsource;\r\n               var clickCapt = function (e) {\r\n                  if (_status.dragged) return;\r\n                  if (dialog.currentcapt2 == '最近' && dialog.currentcaptnode2 != this && !dialog.currentcaptnode2.inited) {\r\n                     dialog.currentcapt2 = null;\r\n                     dialog.currentcaptnode2.classList.remove('thundertext');\r\n                     dialog.currentcaptnode2.inited = true;\r\n                     dialog.currentcaptnode2 = null;\r\n                  }\r\n                  if (this.alphabet) {\r\n                     if (this.classList.contains('thundertext')) {\r\n                        dialog.currentcapt = null;\r\n                        dialog.currentcaptnode = null;\r\n                        this.classList.remove('thundertext');\r\n                        if (this.touchlink) {\r\n                           this.touchlink.classList.remove('active');\r\n                        }\r\n                        for (var i = 0; i < dialog.buttons.length; i++) {\r\n                           if (dialog.currentgroup && dialog.buttons[i].group != dialog.currentgroup) {\r\n                              dialog.buttons[i].classList.add('nodisplay');\r\n                           }\r\n                           else if (dialog.currentcapt2 && dialog.buttons[i].capt != dialog.getCurrentCapt(dialog.buttons[i].link, dialog.buttons[i].capt, true)) {\r\n                              dialog.buttons[i].classList.add('nodisplay');\r\n                           }\r\n                           else {\r\n                              dialog.buttons[i].classList.remove('nodisplay');\r\n                           }\r\n                        }\r\n                     }\r\n                     else {\r\n                        if (dialog.currentcaptnode) {\r\n                           dialog.currentcaptnode.classList.remove('thundertext');\r\n                           if (dialog.currentcaptnode.touchlink) {\r\n                              dialog.currentcaptnode.touchlink.classList.remove('active');\r\n                           }\r\n                        }\r\n                        dialog.currentcapt = this.link;\r\n                        dialog.currentcaptnode = this;\r\n                        this.classList.add('thundertext');\r\n                        if (this.touchlink) {\r\n                           this.touchlink.classList.add('active');\r\n                        }\r\n                        for (var i = 0; i < dialog.buttons.length; i++) {\r\n                           if (dialog.buttons[i].capt != dialog.getCurrentCapt(dialog.buttons[i].link, dialog.buttons[i].capt)) {\r\n                              dialog.buttons[i].classList.add('nodisplay');\r\n                           }\r\n                           else if (dialog.currentcapt2 && dialog.buttons[i].capt != dialog.getCurrentCapt(dialog.buttons[i].link, dialog.buttons[i].capt, true)) {\r\n                              dialog.buttons[i].classList.add('nodisplay');\r\n                           }\r\n                           else if (dialog.currentgroup && dialog.buttons[i].group != dialog.currentgroup) {\r\n                              dialog.buttons[i].classList.add('nodisplay');\r\n                           }\r\n                           else {\r\n                              dialog.buttons[i].classList.remove('nodisplay');\r\n                           }\r\n                        }\r\n                     }\r\n                  }\r\n                  else {\r\n                     if (newlined2) {\r\n                        newlined2.style.display = 'none';\r\n                        if (!packsource.onlypack) {\r\n                           packsource.classList.remove('thundertext');\r\n                           if (!get.is.phoneLayout() || !lib.config.filternode_button) {\r\n                              packsource.innerHTML = '武将包';\r\n                           }\r\n                        }\r\n                     }\r\n                     if (this.classList.contains('thundertext')) {\r\n                        dialog.currentcapt2 = null;\r\n                        dialog.currentcaptnode2 = null;\r\n                        this.classList.remove('thundertext');\r\n                        if (this.touchlink) {\r\n                           this.touchlink.classList.remove('active');\r\n                        }\r\n                        for (var i = 0; i < dialog.buttons.length; i++) {\r\n                           if (dialog.currentgroup && dialog.buttons[i].group != dialog.currentgroup) {\r\n                              dialog.buttons[i].classList.add('nodisplay');\r\n                           }\r\n                           else if (dialog.currentcapt && dialog.buttons[i].capt != dialog.getCurrentCapt(dialog.buttons[i].link, dialog.buttons[i].capt)) {\r\n                              dialog.buttons[i].classList.add('nodisplay');\r\n                           }\r\n                           else {\r\n                              dialog.buttons[i].classList.remove('nodisplay');\r\n                           }\r\n                        }\r\n                     }\r\n                     else {\r\n                        if (dialog.currentcaptnode2) {\r\n                           dialog.currentcaptnode2.classList.remove('thundertext');\r\n                           if (dialog.currentcaptnode2.touchlink) {\r\n                              dialog.currentcaptnode2.touchlink.classList.remove('active');\r\n                           }\r\n                        }\r\n                        dialog.currentcapt2 = this.link;\r\n                        dialog.currentcaptnode2 = this;\r\n                        this.classList.add('thundertext');\r\n                        if (this.touchlink) {\r\n                           this.touchlink.classList.add('active');\r\n                        }\r\n                        else if (this.parentNode == newlined2) {\r\n                           packsource.innerHTML = this.innerHTML;\r\n                           packsource.classList.add('thundertext');\r\n                        }\r\n                        for (var i = 0; i < dialog.buttons.length; i++) {\r\n                           if (dialog.currentcapt && dialog.buttons[i].capt != dialog.getCurrentCapt(dialog.buttons[i].link, dialog.buttons[i].capt)) {\r\n                              dialog.buttons[i].classList.add('nodisplay');\r\n                           }\r\n                           else if (dialog.buttons[i].capt != dialog.getCurrentCapt(dialog.buttons[i].link, dialog.buttons[i].capt, true)) {\r\n                              dialog.buttons[i].classList.add('nodisplay');\r\n                           }\r\n                           else if (dialog.currentgroup && dialog.buttons[i].group != dialog.currentgroup) {\r\n                              dialog.buttons[i].classList.add('nodisplay');\r\n                           }\r\n                           else {\r\n                              if (dialog.buttons[i].activate) {\r\n                                 dialog.buttons[i].activate();\r\n                              }\r\n                              dialog.buttons[i].classList.remove('nodisplay');\r\n                           }\r\n                        }\r\n                     }\r\n                  }\r\n                  if (dialog.seperate) {\r\n                     for (var i = 0; i < dialog.seperate.length; i++) {\r\n                        if (!dialog.seperate[i].nextSibling.querySelector('.button:not(.nodisplay)')) {\r\n                           dialog.seperate[i].style.display = 'none';\r\n                           dialog.seperate[i].nextSibling.style.display = 'none';\r\n                        }\r\n                        else {\r\n                           dialog.seperate[i].style.display = '';\r\n                           dialog.seperate[i].nextSibling.style.display = '';\r\n                        }\r\n                     }\r\n                  }\r\n                  if (filternode) {\r\n                     if (filternode.querySelector('.active')) {\r\n                        packsource.classList.add('thundertext');\r\n                     }\r\n                     else {\r\n                        packsource.classList.remove('thundertext');\r\n                     }\r\n                  }\r\n                  if (e) e.stopPropagation();\r\n               };\r\n               for (i = 0; i < namecapt.length; i++) {\r\n                  if (namecapt[i] == 'newline') {\r\n                     newlined = document.createElement('div');\r\n                     newlined.style.marginTop = '5px';\r\n                     newlined.style.display = 'block';\r\n                     // newlined.style.fontFamily='xinwei';\r\n                     if (get.is.phoneLayout()) {\r\n                        newlined.style.fontSize = '32px';\r\n                     }\r\n                     else {\r\n                        newlined.style.fontSize = '22px';\r\n                     }\r\n                     newlined.style.textAlign = 'center';\r\n                     node.appendChild(newlined);\r\n                  }\r\n                  else if (newlined) {\r\n                     var span = ui.create.div('.tdnode.pointerdiv.shadowed.reduce_radius');\r\n                     span.style.margin = '3px';\r\n                     span.style.width = 'auto';\r\n                     span.innerHTML = ' ' + namecapt[i].toUpperCase() + ' ';\r\n                     span.link = namecapt[i];\r\n                     span.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', clickCapt);\r\n                     newlined.appendChild(span);\r\n                     node[namecapt[i]] = span;\r\n                     if (namecapt[i] == '收藏') {\r\n                        span._nature = 'fire';\r\n                     }\r\n                     else {\r\n                        span._nature = 'wood';\r\n                     }\r\n                  }\r\n                  else {\r\n                     var span = document.createElement('span');\r\n                     span.innerHTML = ' ' + namecapt[i].toUpperCase() + ' ';\r\n                     span.link = namecapt[i];\r\n                     span.alphabet = true;\r\n                     span.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', clickCapt);\r\n                     node.appendChild(span);\r\n                  }\r\n               }\r\n               if (!thisiscard) {\r\n                  var groups = lib.group.slice(0).removeArray(['wei', 'shu', 'wu', 'jin', 'western', 'key']);\r\n                  if (get.mode() == 'guozhan' || (get.mode() == 'versus' && _status.mode != 'jiange')) groups = ['holo', 'nijisanji', 'vtuber', 'clubs'];\r\n                  var bool1 = false;\r\n                  var bool2 = false;\r\n                  var bool3 = (get.mode() == 'guozhan' && _status.forceKey != true && get.config('onlyguozhan'));\r\n                  var bool4 = false;\r\n                  for (var i in lib.character) {\r\n                     if (lib.character[i][1] == 'shen') {\r\n                        bool1 = true;\r\n                     }\r\n                     if (bool3 || lib.character[i][1] == 'key') {\r\n                        bool2 = true;\r\n                     }\r\n                     if (!bool4 && get.is.double(i)) bool4 = true;\r\n                     if (bool1 && bool2 && bool4) break;\r\n                  }\r\n                  if (bool1) groups.add('shen');\r\n                  if (bool2 && !bool3) groups.add('key');\r\n                  if (bool4) groups.add('double');\r\n                  var natures = ['water', 'soil', 'wood', 'metal'];\r\n                  var span = document.createElement('span');\r\n                  newlined.appendChild(span);\r\n                  span.style.margin = '8px';\r\n                  var clickGroup = function () {\r\n                     if (_status.dragged) return;\r\n                     if (dialog.currentcapt2 == '最近' && dialog.currentcaptnode2 != this && !dialog.currentcaptnode2.inited) {\r\n                        dialog.currentcapt2 = null;\r\n                        dialog.currentcaptnode2.classList.remove('thundertext');\r\n                        dialog.currentcaptnode2.inited = true;\r\n                        dialog.currentcaptnode2 = null;\r\n                     }\r\n                     var node = this, link = this.link;\r\n                     if (node.classList.contains('thundertext')) {\r\n                        dialog.currentgroup = null;\r\n                        dialog.currentgroupnode = null;\r\n                        node.classList.remove('thundertext');\r\n                        for (var i = 0; i < dialog.buttons.length; i++) {\r\n                           if (dialog.currentcapt && dialog.buttons[i].capt != dialog.getCurrentCapt(dialog.buttons[i].link, dialog.buttons[i].capt)) {\r\n                              dialog.buttons[i].classList.add('nodisplay');\r\n                           }\r\n                           else if (dialog.currentcapt2 && dialog.buttons[i].capt != dialog.getCurrentCapt(dialog.buttons[i].link, dialog.buttons[i].capt, true)) {\r\n                              dialog.buttons[i].classList.add('nodisplay');\r\n                           }\r\n                           else {\r\n                              dialog.buttons[i].classList.remove('nodisplay');\r\n                           }\r\n                        }\r\n                     }\r\n                     else {\r\n                        if (dialog.currentgroupnode) {\r\n                           dialog.currentgroupnode.classList.remove('thundertext');\r\n                        }\r\n                        dialog.currentgroup = link;\r\n                        dialog.currentgroupnode = node;\r\n                        node.classList.add('thundertext');\r\n                        for (var i = 0; i < dialog.buttons.length; i++) {\r\n                           if (dialog.currentcapt && dialog.buttons[i].capt != dialog.getCurrentCapt(dialog.buttons[i].link, dialog.buttons[i].capt)) {\r\n                              dialog.buttons[i].classList.add('nodisplay');\r\n                           }\r\n                           else if (dialog.currentcapt2 && dialog.buttons[i].capt != dialog.getCurrentCapt(dialog.buttons[i].link, dialog.buttons[i].capt, true)) {\r\n                              dialog.buttons[i].classList.add('nodisplay');\r\n                           }\r\n                           else if (dialog.currentgroup == 'double') {\r\n                              if (dialog.buttons[i]._changeGroup || dialog.buttons[i].group == 'ye') dialog.buttons[i].classList.remove('nodisplay');\r\n                              else dialog.buttons[i].classList.add('nodisplay');\r\n                           }\r\n                           else {\r\n                              if (dialog.buttons[i]._changeGroup || dialog.buttons[i].group == 'ye' || dialog.buttons[i].group != dialog.currentgroup) {\r\n                                 dialog.buttons[i].classList.add('nodisplay');\r\n                              }\r\n                              else {\r\n                                 dialog.buttons[i].classList.remove('nodisplay');\r\n                              }\r\n                           }\r\n                        }\r\n                     }\r\n                  };\r\n                  for (var i = 0; i < groups.length; i++) {\r\n                     var span = ui.create.div('.tdnode.pointerdiv.shadowed.reduce_radius.reduce_margin');\r\n                     span.style.margin = '3px';\r\n                     newlined.appendChild(span);\r\n                     span.innerHTML = lib.translate[groups[i] + '2'] ? get.translation(groups[i] + '2') : get.translation(groups[i]);\r\n                     span.link = groups[i];\r\n                     span._nature = natures[i];\r\n                     span.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', clickGroup);\r\n                  }\r\n\r\n                  var span = document.createElement('span');\r\n                  newlined.appendChild(span);\r\n                  span.style.margin = '8px';\r\n\r\n                  packsource = ui.create.div('.tdnode.pointerdiv.shadowed.reduce_radius.reduce_margin');\r\n                  packsource.style.margin = '3px';\r\n                  newlined.appendChild(packsource);\r\n                  var filternode = null;\r\n                  var clickCaptNode = function (e) {\r\n                     delete _status.filterCharacter;\r\n                     ui.window.classList.remove('shortcutpaused');\r\n                     filternode.delete();\r\n                     filternode.classList.remove('shown');\r\n                     clickCapt.call(this.link, e);\r\n                  };\r\n                  if (get.is.phoneLayout() && lib.config.filternode_button) {\r\n                     newlined.style.marginTop = '';\r\n                     packsource.innerHTML = '筛选';\r\n                     filternode = ui.create.div('.popup-container.filter-character.modenopause');\r\n                     ui.create.div(filternode);\r\n                     filternode.listen(function (e) {\r\n                        if (this.classList.contains('removing')) return;\r\n                        delete _status.filterCharacter;\r\n                        ui.window.classList.remove('shortcutpaused');\r\n                        this.delete();\r\n                        this.classList.remove('shown');\r\n                        e.stopPropagation();\r\n                     });\r\n                     for (var i = 0; i < node.childElementCount; i++) {\r\n                        if (node.childNodes[i].tagName.toLowerCase() == 'span') {\r\n                           node.childNodes[i].style.display = 'none';\r\n                           node.childNodes[i].touchlink = ui.create.div(filternode.firstChild, clickCaptNode, '.menubutton.large.capt', node.childNodes[i].innerHTML);\r\n                           node.childNodes[i].touchlink.link = node.childNodes[i];\r\n                        }\r\n                     }\r\n                     ui.create.node('br', filternode.firstChild);\r\n                  }\r\n                  else {\r\n                     if (onlypack) {\r\n                        packsource.onlypack = true;\r\n                        packsource.innerHTML = get.translation(onlypack + '_character_config');\r\n                        packsource.style.display = 'none';\r\n                        packsource.previousSibling.style.display = 'none';\r\n                     }\r\n                     else {\r\n                        packsource.innerHTML = '武将包';\r\n                     }\r\n                  }\r\n\r\n                  newlined2 = document.createElement('div');\r\n                  newlined2.style.marginTop = '5px';\r\n                  newlined2.style.display = 'none';\r\n                  newlined2.style.fontFamily = 'xinwei';\r\n                  newlined2.classList.add('pointernode');\r\n                  if (get.is.phoneLayout()) {\r\n                     newlined2.style.fontSize = '32px';\r\n                  }\r\n                  else {\r\n                     newlined2.style.fontSize = '22px';\r\n                  }\r\n                  newlined2.style.textAlign = 'center';\r\n                  node.appendChild(newlined2);\r\n\r\n                  packsource.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', function () {\r\n                     if (packsource.onlypack) return;\r\n                     if (_status.dragged) return;\r\n                     if (get.is.phoneLayout() && lib.config.filternode_button && filternode) {\r\n                        _status.filterCharacter = true;\r\n                        ui.window.classList.add('shortcutpaused');\r\n                        ui.window.appendChild(filternode);\r\n                        ui.refresh(filternode);\r\n                        filternode.classList.add('shown');\r\n                        var dh = filternode.offsetHeight - filternode.firstChild.offsetHeight;\r\n                        if (dh > 0) {\r\n                           filternode.firstChild.style.top = (dh / 2) + 'px';\r\n                        }\r\n                        else {\r\n                           filternode.firstChild.style.top = '';\r\n                        }\r\n                     }\r\n                     else {\r\n                        if (newlined2.style.display == 'none') {\r\n                           newlined2.style.display = 'block';\r\n                        }\r\n                        else {\r\n                           newlined2.style.display = 'none';\r\n                        }\r\n                     }\r\n                  });\r\n                  var packlist = [];\r\n                  for (var i = 0; i < lib.config.all.characters.length; i++) {\r\n                     if (!lib.config.characters.contains(lib.config.all.characters[i])) continue;\r\n                     packlist.push(lib.config.all.characters[i]);\r\n                  }\r\n                  for (var i in lib.characterPack) {\r\n                     if (!lib.config.all.characters.contains(i)) {\r\n                        packlist.push(i);\r\n                     }\r\n                  }\r\n                  for (var i = 0; i < packlist.length; i++) {\r\n                     var span = document.createElement('div');\r\n                     span.style.display = 'inline-block';\r\n                     span.style.width = 'auto';\r\n                     span.style.margin = '5px';\r\n                     if (get.is.phoneLayout()) {\r\n                        span.style.fontSize = '32px';\r\n                     }\r\n                     else {\r\n                        span.style.fontSize = '22px';\r\n                     }\r\n                     span.innerHTML = lib.translate[packlist[i] + '_character_config'];\r\n                     span.link = packlist[i];\r\n                     span.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', clickCapt);\r\n                     newlined2.appendChild(span);\r\n                     if (filternode && !onlypack) {\r\n                        span.touchlink = ui.create.div(filternode.firstChild, clickCaptNode, '.menubutton.large', span.innerHTML);\r\n                        span.touchlink.link = span;\r\n                     }\r\n                  }\r\n               }\r\n\r\n               var groupSort;\r\n               if (thisiscard) {\r\n                  groupSort = function (name) {\r\n                     var type = lib.card[name[2]].type;\r\n                     if (lib.cardType[type]) {\r\n                        return lib.cardType[type];\r\n                     }\r\n                     switch (type) {\r\n                        case 'basic': return 0;\r\n                        case 'chess': return 1.5;\r\n                        case 'trick': return 2;\r\n                        case 'delay': return 3;\r\n                        case 'equip': return 4;\r\n                        case 'zhenfa': return 5;\r\n                        default: return 6;\r\n                     }\r\n                  };\r\n               }\r\n               else {\r\n                  var getGroup = function (name) {\r\n                     var group = get.is.double(name, true);\r\n                     if (group) return group[0];\r\n                     return lib.character[name][1];\r\n                  },\r\n                     groupSort = function (name) {\r\n                        if (!lib.character[name]) return 50;\r\n                        var group = getGroup(name);\r\n                        if (group == 'vtuber') return 40;\r\n                        if (group == 'clubs') return 41;\r\n                        var list = get.groups();\r\n                        if (list.contains(group)) return list.indexOf(group);\r\n                        return 49;\r\n                     };\r\n               }\r\n               list.sort(function (a, b) {\r\n                  var del = groupSort(a) - groupSort(b);\r\n                  if (del != 0) return del;\r\n                  var aa = a, bb = b;\r\n                  if (a.indexOf('_') != -1) {\r\n                     a = a.slice(a.lastIndexOf('_') + 1);\r\n                  }\r\n                  if (b.indexOf('_') != -1) {\r\n                     b = b.slice(b.lastIndexOf('_') + 1);\r\n                  }\r\n                  if (a != b) {\r\n                     return a > b ? 1 : -1;\r\n                  }\r\n                  return aa > bb ? 1 : -1;\r\n               });\r\n               dialog = ui.create.dialog('hidden');\r\n               dialog.classList.add('noupdate');\r\n               dialog.classList.add('scroll1');\r\n               dialog.classList.add('scroll2');\r\n               dialog.classList.add('scroll3');\r\n               dialog.addEventListener(lib.config.touchscreen ? 'touchend' : 'mouseup', function () {\r\n                  _status.clicked2 = true;\r\n               });\r\n               if (heightset) {\r\n                  dialog.style.height = ((game.layout == 'long2' || game.layout == 'nova') ? 380 : 350) + 'px';\r\n                  dialog._scrollset = true;\r\n               }\r\n               dialog.getCurrentCapt = function (link, capt, noalph) {\r\n                  var currentcapt = noalph ? this.currentcapt2 : this.currentcapt;\r\n                  if (this.seperatelist && noalph) {\r\n                     if (this.seperatelist[currentcapt].contains(link)) return capt;\r\n                     return null;\r\n                  }\r\n                  if (lib.characterDialogGroup[currentcapt]) {\r\n                     return lib.characterDialogGroup[currentcapt](link, capt);\r\n                  }\r\n                  if (lib.characterPack[currentcapt]) {\r\n                     if (lib.characterPack[currentcapt][link]) {\r\n                        return capt;\r\n                     }\r\n                     return null;\r\n                  }\r\n                  return this.currentcapt;\r\n               }\r\n               if (str) {\r\n                  dialog.add(str);\r\n               }\r\n               dialog.add(node);\r\n               if (thisiscard) {\r\n                  if (seperate) {\r\n                     seperate = seperate(list);\r\n                     dialog.seperate = [];\r\n                     dialog.seperatelist = seperate.list;\r\n                     if (dialog.seperatelist) {\r\n                        newlined = document.createElement('div');\r\n                        newlined.style.marginTop = '5px';\r\n                        newlined.style.display = 'block';\r\n                        newlined.style.fontFamily = 'xinwei';\r\n                        if (get.is.phoneLayout()) {\r\n                           newlined.style.fontSize = '32px';\r\n                        }\r\n                        else {\r\n                           newlined.style.fontSize = '22px';\r\n                        }\r\n                        newlined.style.textAlign = 'center';\r\n                        node.appendChild(newlined);\r\n                        for (var i in dialog.seperatelist) {\r\n                           var span = document.createElement('span');\r\n                           span.style.margin = '3px';\r\n                           span.innerHTML = i;\r\n                           span.link = i;\r\n                           span.seperate = true;\r\n                           span.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', clickCapt);\r\n                           newlined.appendChild(span);\r\n                        }\r\n                     }\r\n                     for (var i in seperate) {\r\n                        if (i == 'list') continue;\r\n                        var link = '';\r\n                        var linkcontent = seperate[i];\r\n                        if (i.indexOf('_link:') != -1) {\r\n                           link = i.slice(i.indexOf('_link:') + 6);\r\n                           i = i.slice(0, i.indexOf('_link:'));\r\n                        }\r\n                        var nodesep = dialog.add(i);\r\n                        nodesep.link = link;\r\n                        dialog.seperate.push(nodesep);\r\n                        dialog.add([linkcontent, 'vcard'], noclick);\r\n                     }\r\n                  }\r\n                  else {\r\n                     dialog.add([list, 'vcard'], noclick);\r\n                  }\r\n               }\r\n               else {\r\n                  if (precharacter) {\r\n                     dialog.add([list, 'precharacter'], noclick);\r\n                  }\r\n                  else if (characterx) {\r\n                     dialog.add([list, 'characterx'], noclick);\r\n                  }\r\n                  else {\r\n                     dialog.add([list, 'character'], noclick);\r\n                  }\r\n               }\r\n               dialog.add(ui.create.div('.placeholder'));\r\n               for (i = 0; i < dialog.buttons.length; i++) {\r\n                  if (thisiscard) {\r\n                     dialog.buttons[i].capt = getCapt(dialog.buttons[i].link[2]);\r\n                  }\r\n                  else {\r\n                     dialog.buttons[i].group = lib.character[dialog.buttons[i].link][1];\r\n                     dialog.buttons[i].capt = getCapt(dialog.buttons[i].link);\r\n                  }\r\n               }\r\n               if (!expandall) {\r\n                  if (!thisiscard && (lib.characterDialogGroup[lib.config.character_dialog_tool] ||\r\n                     lib.config.character_dialog_tool == '自创')) {\r\n                     clickCapt.call(node[lib.config.character_dialog_tool]);\r\n                  }\r\n               }\r\n               return dialog;\r\n            },\r\n            dialog: function () {\r\n               var i, small = null;\r\n               var hidden = false;\r\n               var notouchscroll = false;\r\n               var forcebutton = false;\r\n               var dialog = ui.create.div('.dialog');\r\n               dialog.contentContainer = ui.create.div('.content-container', dialog);\r\n               dialog.content = ui.create.div('.content', dialog.contentContainer);\r\n               dialog.bar1 = ui.create.div('.bar.top', dialog);\r\n               dialog.bar2 = ui.create.div('.bar.bottom', dialog);\r\n               dialog.buttons = [];\r\n               for (i in lib.element.dialog) {\r\n                  dialog[i] = lib.element.dialog[i];\r\n               }\r\n               for (i = 0; i < arguments.length; i++) {\r\n                  if (typeof arguments[i] == 'boolean') dialog.static = arguments[i];\r\n                  else if (arguments[i] == 'hidden') hidden = true;\r\n                  else if (arguments[i] == 'notouchscroll') notouchscroll = true;\r\n                  else if (arguments[i] == 'forcebutton') forcebutton = true;\r\n                  else if (arguments[i] == 'small') small = true;\r\n                  else {\r\n                     dialog.add(arguments[i], small, small);\r\n                  }\r\n               }\r\n               if (!hidden) {\r\n                  dialog.open();\r\n               }\r\n               if (!lib.config.touchscreen) dialog.contentContainer.onscroll = ui.update;\r\n               if (!notouchscroll) {\r\n                  dialog.contentContainer.ontouchstart = ui.click.dialogtouchStart;\r\n                  dialog.contentContainer.ontouchmove = ui.click.touchScroll;\r\n                  dialog.contentContainer.style.WebkitOverflowScrolling = 'touch';\r\n                  dialog.ontouchstart = ui.click.dragtouchdialog;\r\n               }\r\n               if (forcebutton) {\r\n                  dialog.forcebutton = true;\r\n                  dialog.classList.add('forcebutton');\r\n               }\r\n               return dialog;\r\n            },\r\n            line2: function () {\r\n               var node = ui.create.line.apply(this, arguments);\r\n               node.classList.add('line2');\r\n               return node;\r\n            },\r\n            line: function () {\r\n               var two = false, func;\r\n               var node = ui.create.div('.config');\r\n               for (var i = 0; i < arguments.length; i++) {\r\n                  if (typeof arguments[i] == 'string' || typeof arguments[i] == 'number') {\r\n                     if (two) ui.create.div('.toggle', node).innerHTML = arguments[i];\r\n                     else {\r\n                        ui.create.div(node).innerHTML = arguments[i];\r\n                        two = true;\r\n                     }\r\n                  }\r\n                  else if (typeof arguments[i] == 'function') func = arguments[i];\r\n               }\r\n               if (func) {\r\n                  for (var i = 0; i < node.childNodes.length; i++) node.childNodes[i].listen(func);\r\n               }\r\n               return node;\r\n            },\r\n            switcher: function (name, current, current2) {\r\n               var func;\r\n               var node = ui.create.div('.config');\r\n               ui.create.div(node).innerHTML = get.translation(name + '_config');\r\n               var switcher = ui.create.div('.toggle.pointerdiv', node);\r\n               switcher.name = name;\r\n               for (var i = 0; i < arguments.length; i++) {\r\n                  if (typeof arguments[i] == 'function') {\r\n                     func = arguments[i]; break;\r\n                  }\r\n               }\r\n               if (typeof current == 'string') {\r\n                  switcher.link = current;\r\n                  switcher.innerHTML = get.translation(current);\r\n                  switcher.contentEditable = true;\r\n                  switcher.style.webkitUserSelect = 'text';\r\n                  switcher.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.editor);\r\n               }\r\n               else if (typeof current == 'object') {\r\n                  switcher.link = current2 || current[0];\r\n                  switcher.innerHTML = get.translation(switcher.link);\r\n                  switcher.choice = current;\r\n                  switcher.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.switcher);\r\n               }\r\n               else {\r\n                  if (current) {\r\n                     switcher.classList.add('on');\r\n                  }\r\n                  switcher.classList.add('onoff');\r\n                  ui.create.div(ui.create.div(switcher));\r\n                  switcher.link = current ? true : false;\r\n                  switcher.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.toggle);\r\n               }\r\n               if (func) switcher.additionalCommand = func;\r\n               return node;\r\n            },\r\n            caption: function (str, position) {\r\n               var caption = ui.create.div('.caption', position);\r\n               caption.innerHTML = str;\r\n               return caption;\r\n            },\r\n            /**\r\n             * 生成底部控制按钮\r\n             * @function\r\n             * @param {?Array} controls 控制按钮列表\r\n             * @param {?string} stayleft 控制按钮是否靠左侧\r\n             * @param {?function} clickCallback 点击回调函数\r\n             * @returns {HTMLDivElement} 反正生成的按钮\r\n             */\r\n            control: function () {\r\n               var nc = !ui.control.querySelector('div:not(.removing):not(.stayleft)');\r\n               // for(var i=0;i<ui.control.childNodes.length;i++){\r\n               //     if(ui.control.childNodes[i].classList.contains('removing')){\r\n               //         var that=ui.control.childNodes[i];\r\n               //         var width=that.offsetWidth;\r\n               //         that.style.marginLeft=(-width/2)+'px';\r\n               //         that.style.marginRight=(-width/2)+'px';\r\n               //         that.style.transitionDuration=0.8*parseFloat(getComputedStyle(that).opacity)+'s';\r\n               //     }\r\n               // }\r\n               var i, controls;\r\n               var nozoom = false;\r\n               if (Array.isArray(arguments[0])) controls = arguments[0];\r\n               else controls = arguments;\r\n               var control = ui.create.div('.control');\r\n               ui.control.insertBefore(control, _status.createControl || ui.confirm);\r\n               for (i in lib.element.control) {\r\n                  control[i] = lib.element.control[i];\r\n               }\r\n               for (i = 0; i < controls.length; i++) {\r\n                  if (typeof controls[i] == 'function') {\r\n                     control.custom = controls[i];\r\n                  }\r\n                  else if (controls[i] == 'nozoom') {\r\n                     nozoom = true;\r\n                  }\r\n                  else if (controls[i] == 'stayleft') {\r\n                     control.stayleft = true;\r\n                     control.classList.add('stayleft');\r\n                  }\r\n                  else {\r\n                     control.add(controls[i]);\r\n                  }\r\n               }\r\n               ui.controls.unshift(control);\r\n               if (nc) {\r\n                  ui.control.animate('nozoom', 100);\r\n               }\r\n               // if(ui.control.classList.contains('nozoom')){\r\n               //     nozoom=true;\r\n               // }\r\n               // if(nozoom){\r\n               //     control.classList.add('nozoom');\r\n               // }\r\n               if (control.childNodes.length) {\r\n                  // if(nozoom||true){\r\n                  control.style.transition = 'opacity 0.5s';\r\n                  control.animate('controlpressdownx', 500);\r\n                  // }\r\n                  // else{\r\n                  //     control.style.transition='';\r\n                  //     control.style.transform='scale(0.8)';\r\n                  // }\r\n                  ui.refresh(control);\r\n                  if (!control.stayleft) {\r\n                     control.style.transform = 'translateX(-' + (control.offsetWidth / 2) + 'px)';\r\n                  }\r\n                  control.style.opacity = 1;\r\n                  ui.refresh(control);\r\n                  control.style.transition = '';\r\n               }\r\n\r\n               control.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.control2);\r\n\r\n               if (lib.config.button_press) {\r\n                  control.addEventListener(lib.config.touchscreen ? 'touchstart' : 'mousedown', function () {\r\n                     if (this.classList.contains('disabled')) return;\r\n                     this.classList.add('controlpressdown');\r\n                     if (typeof this._offset == 'number') {\r\n                        this.style.transform = 'translateX(' + this._offset + 'px) scale(0.97)';\r\n                     }\r\n                  });\r\n                  control.addEventListener(lib.config.touchscreen ? 'touchend' : 'mouseup', function () {\r\n                     this.classList.remove('controlpressdown');\r\n                     if (typeof this._offset == 'number') {\r\n                        this.style.transform = 'translateX(' + this._offset + 'px)';\r\n                     }\r\n                  });\r\n               }\r\n\r\n               ui.updatec();\r\n               return control;\r\n            },\r\n            confirm: function (str, func) {\r\n               if (ui.confirm && ui.confirm.str == str) {\r\n                  return;\r\n               }\r\n               if (str == 'o') {\r\n                  if (ui.confirm) {\r\n                     ui.confirm.replace('ok');\r\n                  }\r\n                  else {\r\n                     ui.confirm = ui.create.control('ok');\r\n                  }\r\n               }\r\n               else if (str == 'oc' || str == 'co') {\r\n                  if (ui.confirm) {\r\n                     ui.confirm.replace('ok', 'cancel');\r\n                  }\r\n                  else {\r\n                     ui.confirm = ui.create.control('ok', 'cancel');\r\n                  }\r\n               }\r\n               else if (str == 'c') {\r\n                  if (ui.confirm) {\r\n                     ui.confirm.replace('cancel');\r\n                  }\r\n                  else {\r\n                     ui.confirm = ui.create.control('cancel');\r\n                  }\r\n               }\r\n               else if (ui.confirm) {\r\n                  ui.confirm.close();\r\n                  delete ui.confirm;\r\n               }\r\n               if (ui.confirm) {\r\n                  ui.confirm.str = str;\r\n                  if (func) ui.confirm.custom = func;\r\n                  else delete ui.confirm.custom;\r\n               }\r\n            },\r\n            skills: function (skills) {\r\n               var i, same;\r\n               if (ui.skills) {\r\n                  if (ui.skills.skills.length == skills.length && ui.skills.style.display != 'none') {\r\n                     same = true;\r\n                     for (i = 0; i < skills.length; i++) {\r\n                        if (ui.skills.skills.contains(skills[i]) == false) {\r\n                           same = false;\r\n                           break;\r\n                        }\r\n                     }\r\n                  }\r\n                  if (same) return;\r\n                  ui.skills.close();\r\n                  delete ui.skills;\r\n               }\r\n               if (skills == undefined || skills.length == 0) return;\r\n               if (!_status.event.isMine()) {\r\n                  _status.noupdatec = true;\r\n               }\r\n               ui.skills = ui.create.control(skills.concat([ui.click.skill]));\r\n               for (var i = 0; i < ui.skills.childNodes.length; i++) {\r\n                  ui.skills.childNodes[i].innerHTML = get.skillTranslation(ui.skills.childNodes[i].link, _status.event.player);\r\n               }\r\n               if (!_status.event.isMine()) {\r\n                  ui.skills.style.display = 'none';\r\n               }\r\n               else {\r\n                  ui.updatec();\r\n               }\r\n               _status.noupdatec = false;\r\n               ui.skills.skills = skills;\r\n               return ui.skills;\r\n            },\r\n            skills2: function (skills) {\r\n               var i, same;\r\n               if (ui.skills2) {\r\n                  if (ui.skills2.skills.length == skills.length && ui.skills2.style.display != 'none') {\r\n                     same = true;\r\n                     for (i = 0; i < skills.length; i++) {\r\n                        if (ui.skills2.skills.contains(skills[i]) == false) {\r\n                           same = false;\r\n                           break;\r\n                        }\r\n                     }\r\n                  }\r\n                  if (same) return;\r\n                  ui.skills2.close();\r\n                  delete ui.skills2;\r\n               }\r\n               if (skills == undefined || skills.length == 0) return;\r\n               if (!_status.event.isMine()) {\r\n                  _status.noupdatec = true;\r\n               }\r\n               ui.skills2 = ui.create.control(skills.concat([ui.click.skill]));\r\n               for (var i = 0; i < ui.skills2.childNodes.length; i++) {\r\n                  ui.skills2.childNodes[i].innerHTML = get.skillTranslation(ui.skills2.childNodes[i].link, _status.event.player);\r\n               }\r\n               if (!_status.event.isMine()) {\r\n                  ui.skills2.style.display = 'none';\r\n               }\r\n               else {\r\n                  ui.updatec();\r\n               }\r\n               _status.noupdatec = false;\r\n               ui.skills2.skills = skills;\r\n               return ui.skills2;\r\n            },\r\n            skills3: function (skills) {\r\n               var i, same;\r\n               if (ui.skills3) {\r\n                  if (ui.skills3.skills.length == skills.length && ui.skills3.style.display != 'none') {\r\n                     same = true;\r\n                     for (i = 0; i < skills.length; i++) {\r\n                        if (ui.skills3.skills.contains(skills[i]) == false) {\r\n                           same = false;\r\n                           break;\r\n                        }\r\n                     }\r\n                  }\r\n                  if (same) return;\r\n                  ui.skills3.close();\r\n                  delete ui.skills3;\r\n               }\r\n               if (skills == undefined || skills.length == 0) return;\r\n               if (!_status.event.isMine()) {\r\n                  _status.noupdatec = true;\r\n               }\r\n               ui.skills3 = ui.create.control(skills.concat([ui.click.skill]));\r\n               for (var i = 0; i < ui.skills3.childNodes.length; i++) {\r\n                  ui.skills3.childNodes[i].innerHTML = get.skillTranslation(ui.skills3.childNodes[i].link, _status.event.player);\r\n               }\r\n               if (!_status.event.isMine()) {\r\n                  ui.skills3.style.display = 'none';\r\n               }\r\n               else {\r\n                  ui.updatec();\r\n               }\r\n               _status.noupdatec = false;\r\n               ui.skills3.skills = skills;\r\n               return ui.skills3;\r\n            },\r\n            arena: function () {\r\n               ui.window = ui.create.div('#window.hidden', document.body);\r\n               ui.create.div('#statusbg', document.body);\r\n               ui.refresh(ui.window);\r\n               if (!localStorage.getItem(lib.configprefix + 'playback')) {\r\n                  ui.window.show();\r\n               }\r\n               else {\r\n                  setTimeout(function () {\r\n                     ui.window.show();\r\n                  }, 1000);\r\n               }\r\n               // lib.setPressure(ui.window,ui.click.pressurepause);\r\n               if (window.isNonameServer) {\r\n                  ui.window.classList.add('server');\r\n                  var serverinfo = ui.create.div('.serverinfo', ui.window);\r\n                  ui.create.div('', '服务器正在运行', serverinfo);\r\n                  var serverinfotable = ui.create.table(2, 2, ui.create.div(serverinfo));\r\n                  serverinfotable.style.display = 'inline-block';\r\n                  serverinfotable.firstChild.firstChild.innerHTML = '房间人数：';\r\n                  serverinfotable.firstChild.lastChild.id = 'server_count';\r\n                  serverinfotable.firstChild.lastChild.innerHTML = '0';\r\n                  serverinfotable.lastChild.firstChild.innerHTML = '房间状态：';\r\n                  serverinfotable.lastChild.lastChild.id = 'server_status';\r\n                  serverinfotable.lastChild.lastChild.innerHTML = '空闲';\r\n                  ui.create.div('.menubutton.large', '关闭服务器', function () {\r\n                     if (_status.gameStarted && !confirm('关闭服务器当前进行的游戏将终止且不可恢复，是否确定关闭？')) {\r\n                        return;\r\n                     }\r\n                     localStorage.removeItem(lib.configprefix + 'asserver');\r\n                     game.reload();\r\n                  }, ui.create.div('', serverinfo));\r\n               }\r\n\r\n               ui.window.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.window);\r\n               ui.system = ui.create.div(\"#system.\", ui.window);\r\n               ui.arena = ui.create.div('#arena.nome', ui.window);\r\n               if (lib.device == 'ios' && !get.is.phoneLayout()) {\r\n                  ui.arena.classList.add('ipad');\r\n               }\r\n               ui.arena.setNumber = function (num) {\r\n                  this.dataset.number = num;\r\n                  // if(game.layout=='nova'&&parseInt(num)<7){\r\n                  //     ui.arena.classList.add('player_autolong');\r\n                  // }\r\n                  // else if(lib.config.player_height_nova!='long'){\r\n                  //     ui.arena.classList.remove('player_autolong');\r\n                  // }\r\n                  // if(game.layout=='long'&&parseInt(num)<parseInt(lib.config.fewplayer)){\r\n                  //     this.classList.add('fewplayer');\r\n                  // }\r\n                  // else{\r\n                  //     this.classList.remove('fewplayer');\r\n                  // }\r\n               }\r\n\r\n               if (lib.config.low_performance) {\r\n                  ui.window.classList.add('low_performance');\r\n               }\r\n               if (game.layout == 'mobile' || game.layout == 'long') {\r\n                  ui.arena.classList.add('mobile');\r\n               }\r\n               if (game.layout == 'long' || game.layout == 'long2') {\r\n                  ui.arena.classList.add('long');\r\n               }\r\n               if (game.layout == 'default') {\r\n                  ui.arena.classList.add('oldlayout');\r\n               }\r\n               if (lib.config.player_border != 'wide' || game.layout == 'long' || game.layout == 'long2') {\r\n                  ui.arena.classList.add('slim_player');\r\n               }\r\n               if (lib.config.player_border == 'slim') {\r\n                  ui.arena.classList.add('uslim_player');\r\n               }\r\n               if (lib.config.player_border == 'narrow') {\r\n                  ui.arena.classList.add('mslim_player');\r\n               }\r\n               if (lib.config.player_border == 'normal' && lib.config.mode != 'brawl' && (game.layout == 'long' || game.layout == 'long2')) {\r\n                  ui.arena.classList.add('lslim_player');\r\n               }\r\n               ui.window.dataset.player_border = lib.config.player_border;\r\n               if (lib.config.compatiblemode) {\r\n                  ui.window.classList.add('compatiblemode');\r\n               }\r\n               ui.window.dataset.radius_size = lib.config.radius_size || 'default';\r\n               if (game.layout == 'long' || game.layout == 'mobile') {\r\n                  if (lib.config.textequip == 'text') ui.arena.classList.add('textequip');\r\n               }\r\n               if (game.layout == 'long' || game.layout == 'long2' || game.layout == 'mobile' || game.layout == 'nova') {\r\n                  if (lib.config.cardshape == 'oblong') {\r\n                     ui.window.classList.add('oblongcard');\r\n                     ui.arena.classList.add('oblongcard');\r\n                  }\r\n               }\r\n               if (lib.config.blur_ui) {\r\n                  ui.window.classList.add('blur_ui');\r\n               }\r\n               if (lib.config.glass_ui) {\r\n                  ui.window.classList.add('glass_ui');\r\n               }\r\n               if (lib.config.custom_button) {\r\n                  lib.configMenu.appearence.config.custom_button.onclick('skip');\r\n               }\r\n\r\n               if (lib.config.show_statusbar_ios == 'overlay') {\r\n                  document.body.classList.add('statusbar');\r\n               }\r\n               if (lib.config.keep_awake) {\r\n                  if (window.plugins && window.plugins.insomnia) window.plugins.insomnia.keepAwake();\r\n                  else {\r\n                     let NoSleep = __webpack_require__(/*! @e/NoSleep.min */ \"./extension/NoSleep.min.js\")\r\n                     let noSleep = new NoSleep();\r\n                     document.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', function enableNoSleep() {\r\n                        document.removeEventListener(lib.config.touchscreen ? 'touchend' : 'click', enableNoSleep, false);\r\n                        noSleep.enable();\r\n                        window.noSleep = noSleep;\r\n                     }, false);\r\n                  }\r\n               }\r\n               lib.init.js(lib.assetURL + 'game', 'keyWords', function () { });\r\n\r\n               lib.updateURL = lib.updateURLS[lib.config.update_link] || lib.updateURLS.coding;\r\n\r\n               lib.init.cssstyles();\r\n\r\n               ui.arena.dataset.player_height = lib.config.player_height || 'default';\r\n               ui.arena.dataset.player_height_nova = lib.config.player_height_nova || 'default';\r\n               // if(lib.config.player_height_nova=='long') ui.arena.classList.add('player_autolong');\r\n               ui.arena.dataset.target_shake = lib.config.target_shake || 'off';\r\n               ui.backgroundMusic = document.createElement('audio');\r\n               ui.backgroundMusic.volume = lib.config.volumn_background / 8;\r\n               game.playBackgroundMusic();\r\n               ui.backgroundMusic.autoplay = true;\r\n               ui.backgroundMusic.addEventListener('ended', game.playBackgroundMusic);\r\n               ui.window.appendChild(ui.backgroundMusic);\r\n               if (lib.config.cursor_style == 'pointer') {\r\n                  ui.window.classList.add('nopointer');\r\n               }\r\n               if (lib.config.turned_style == false) {\r\n                  ui.arena.classList.add('hide_turned');\r\n               }\r\n               if (lib.config.link_style2 != 'chain') {\r\n                  ui.arena.classList.add('nolink');\r\n               }\r\n               if (lib.config.show_name == false) {\r\n                  ui.arena.classList.add('hide_name');\r\n               }\r\n               if (lib.config.change_skin_auto != 'off') {\r\n                  _status.skintimeout = setTimeout(ui.click.autoskin, parseInt(lib.config.change_skin_auto));\r\n               }\r\n               if (lib.config.border_style && lib.config.border_style.indexOf('dragon_') == 0) {\r\n                  ui.arena.dataset.framedecoration = lib.config.border_style.slice(7);\r\n               }\r\n\r\n               ui.gameinfo = ui.create.div('#time', ui.window);\r\n\r\n               ui.arenalog = ui.create.div('#arenalog', ui.arena);\r\n               if (lib.config.show_log == 'off') {\r\n                  ui.arenalog.style.display = 'none';\r\n               }\r\n               else {\r\n                  ui.arenalog.dataset.position = lib.config.show_log;\r\n               }\r\n               ui.historybar = ui.create.div('#historybar.shadowed', ui.window);\r\n               lib.setScroll(ui.historybar);\r\n\r\n               ui.roundmenu = ui.create.div('#roundmenu.roundarenabutton.menubutton.round', ui.arena);\r\n               ui.roundmenu._position = [180, 210];\r\n               ui.create.div(ui.roundmenu);\r\n               ui.create.div(ui.roundmenu);\r\n               ui.create.div(ui.roundmenu);\r\n               ui.create.div(ui.roundmenu);\r\n               ui.create.div(ui.roundmenu);\r\n               ui.create.div(ui.roundmenu);\r\n\r\n               ui.create.div(ui.roundmenu);\r\n               ui.create.div(ui.roundmenu);\r\n               ui.create.div(ui.roundmenu);\r\n               ui.create.div(ui.roundmenu);\r\n               ui.create.div(ui.roundmenu);\r\n               ui.create.div(ui.roundmenu);\r\n\r\n               ui.create.div(ui.roundmenu);\r\n               ui.create.div(ui.roundmenu);\r\n\r\n               ui.create.div(ui.roundmenu);\r\n\r\n               if (lib.config.show_time2) {\r\n                  ui.roundmenu.classList.add('clock');\r\n               }\r\n               ui.roundmenu.dataset.watchface = lib.config.watchface || 'none';\r\n               if (get.is.phoneLayout()) {\r\n                  if (lib.config.show_time3) {\r\n                     ui.time3 = ui.create.div('.touchinfo.left', ui.window);\r\n                  }\r\n                  ui.cardPileNumber = ui.create.div('.touchinfo.right', ui.window);\r\n               }\r\n               else {\r\n                  if (lib.config.show_time3) {\r\n                     ui.time3 = ui.create.div(ui.gameinfo);\r\n                  }\r\n                  ui.cardPileNumber = ui.create.div(ui.gameinfo);\r\n               }\r\n               if (!lib.config.show_cardpile_number) {\r\n                  ui.cardPileNumber.style.display = 'none';\r\n               }\r\n               if (ui.time3) {\r\n                  ui.time3.starttime = get.utc();\r\n                  ui.time3.interval = setInterval(function () {\r\n                     var num = Math.round((get.utc() - ui.time3.starttime) / 1000);\r\n                     if (num >= 3600) {\r\n                        var num1 = Math.floor(num / 3600);\r\n                        var num2 = Math.floor((num - num1 * 3600) / 60);\r\n                        if (num2 < 10) {\r\n                           num2 = '0' + num2.toString();\r\n                        }\r\n                        var num3 = num - num1 * 3600 - parseInt(num2) * 60;\r\n                        if (num3 < 10) {\r\n                           num3 = '0' + num3.toString();\r\n                        }\r\n                        ui.time3.innerHTML = num1 + ':' + num2 + ':' + num3;\r\n                     }\r\n                     else {\r\n                        var num1 = Math.floor(num / 60);\r\n                        var num2 = num - num1 * 60;\r\n                        if (num2 < 10) {\r\n                           num2 = '0' + num2.toString();\r\n                        }\r\n                        ui.time3.innerHTML = num1 + ':' + num2;\r\n                     }\r\n                  }, 1000);\r\n               }\r\n               if (get.is.nomenu()) {\r\n                  if (!['menu', 'system'].contains(lib.config.round_menu_func)) {\r\n                     lib.config.round_menu_func = 'system';\r\n                  }\r\n               }\r\n               else if (!lib.config.show_round_menu) {\r\n                  ui.roundmenu.style.display = 'none';\r\n               }\r\n\r\n               var resetround = function (e) {\r\n                  _status.draggingroundmenu = false;\r\n                  ui.roundmenu.style.transform = '';\r\n                  ui.roundmenu._dragtransform = [0, 0];\r\n                  ui.roundmenu.style.transition = 'all 0.3s';\r\n                  delete ui.roundmenu._dragtouches;\r\n                  delete ui.roundmenu._dragorigin;\r\n                  delete ui.roundmenu._dragorigintransform;\r\n                  setTimeout(function () {\r\n                     ui.roundmenu.style.transition = '';\r\n                  }, 500);\r\n                  game.saveConfig('roundmenu_transform', [0, 0]);\r\n                  if (e) e.stopPropagation();\r\n                  return false;\r\n               };\r\n               ui.click.resetround = resetround;\r\n               if (lib.config.touchscreen) {\r\n                  ui.roundmenu.addEventListener('touchstart', function (e) {\r\n                     _status.draggingroundmenu = true;\r\n                     ui.roundmenu._dragorigin = {\r\n                        clientX: e.touches[0].clientX,\r\n                        clientY: e.touches[0].clientY,\r\n                     };\r\n                     if (!ui.roundmenu._dragtransform) {\r\n                        ui.roundmenu._dragtransform = [0, 0];\r\n                     }\r\n                     ui.roundmenu._dragorigintransform = ui.roundmenu._dragtransform.slice(0);\r\n                     ui.roundmenu._resetTimeout = setTimeout(function () {\r\n                        resetround();\r\n                        delete ui.roundmenu._resetTimeout;\r\n                     }, 1000);\r\n                  });\r\n               }\r\n               else {\r\n                  ui.roundmenu.oncontextmenu = resetround;\r\n               }\r\n               if (!lib.config.remember_round_button) {\r\n                  game.saveConfig('roundmenu_transform');\r\n               }\r\n               if (lib.config.roundmenu_transform) {\r\n                  var translate = lib.config.roundmenu_transform;\r\n                  ui.roundmenu._dragtransform = translate;\r\n                  ui.roundmenu.style.transform = 'translate(' + translate[0] + 'px,' + translate[1] + 'px)';\r\n                  ui.click.checkroundtranslate();\r\n               }\r\n               if (get.is.phoneLayout()) {\r\n                  ui.arena.classList.add('phone');\r\n               }\r\n\r\n               ui.sidebar = ui.create.div('#sidebar');\r\n               ui.sidebar3 = ui.create.div('#sidebar3');\r\n               ui.canvas = document.createElement('canvas');\r\n\r\n               ui.arena.appendChild(ui.canvas);\r\n               ui.canvas.id = 'canvas';\r\n               ui.ctx = ui.canvas.getContext('2d');\r\n\r\n               ui.sidebar.ontouchstart = ui.click.touchStart;\r\n               ui.sidebar.ontouchmove = ui.click.touchScroll;\r\n               ui.sidebar.style.WebkitOverflowScrolling = 'touch';\r\n\r\n               var zoom;\r\n               switch (lib.config.ui_zoom) {\r\n                  case 'esmall': zoom = 0.8; break;\r\n                  case 'vsmall': zoom = 0.9; break;\r\n                  case 'small': zoom = 0.93; break;\r\n                  case 'big': zoom = 1.05; break;\r\n                  case 'vbig': zoom = 1.1; break;\r\n                  case 'ebig': zoom = 1.2; break;\r\n                  default: zoom = 1;\r\n               }\r\n               game.documentZoom = game.deviceZoom * zoom;\r\n               if (zoom != 1) {\r\n                  ui.updatez();\r\n               }\r\n\r\n               ui.system1 = ui.create.div('#system1', ui.system);\r\n               ui.system2 = ui.create.div('#system2', ui.system);\r\n\r\n               ui.replay = ui.create.system('重来', game.reload, true);\r\n               ui.replay.id = 'restartbutton';\r\n               ui.config2 = ui.create.system('选项', ui.click.config);\r\n               ui.pause = ui.create.system('暂停', ui.click.pause);\r\n               ui.pause.id = 'pausebutton';\r\n               if (!_status.video) {\r\n                  ui.pause.hide();\r\n               }\r\n               if (!lib.config.touchscreen) {\r\n                  lib.setPopped(ui.pause, ui.click.pausehistory, 220, 400, null, true);\r\n               }\r\n               if (!lib.config.show_pause) {\r\n                  ui.pause.style.display = 'none';\r\n               }\r\n               ui.cardPileButton = ui.create.system('牌堆', null, true);\r\n               ui.cardPileButton.style.display = 'none';\r\n               lib.setPopped(ui.cardPileButton, ui.click.cardPileButton, 220);\r\n               ui.wuxie = ui.create.system('不询问无懈', ui.click.wuxie, true);\r\n               if (!lib.config.touchscreen) {\r\n                  lib.setPopped(ui.config2, ui.click.pauseconfig, 170);\r\n               }\r\n               ui.auto = ui.create.system('托管', ui.click.auto);\r\n               if (!game.syncMenu) {\r\n                  ui.config2.classList.add('hidden');\r\n                  ui.config2.style.transition = 'all 0.5s';\r\n                  ui.roundmenu.classList.add('transparent2');\r\n\r\n                  ui.auto.style.opacity = 0.5;\r\n                  ui.auto.style.transition = 'all 0.5s';\r\n                  lib.onfree.push(function () {\r\n                     ui.auto.style.opacity = '';\r\n                     setTimeout(function () {\r\n                        ui.auto.style.transition = '';\r\n                     }, 500);\r\n                  });\r\n               }\r\n               ui.auto.id = 'autobutton';\r\n               ui.autonode = ui.create.div('#autonode', '<div>托管中...</div>', ui.arena);\r\n               ui.autonode.listen(ui.click.auto);\r\n               if (lib.config.mode == 'connect') {\r\n                  ui.auto.hide();\r\n                  ui.pause.hide();\r\n               }\r\n\r\n               if (lib.forcehide) {\r\n                  if (lib.forcehide.contains('replay')) ui.replay.classList.add('forcehide');\r\n                  if (lib.forcehide.contains('auto')) ui.auto.classList.add('forcehide');\r\n                  if (lib.forcehide.contains('pause')) ui.pause.classList.add('forcehide');\r\n                  if (lib.forcehide.contains('wuxie')) ui.wuxie.classList.add('forcehide');\r\n                  if (lib.forcehide.contains('cardPileButton')) ui.cardPileButton.classList.add('forcehide');\r\n               }\r\n               ui.volumn = ui.create.system('♫');\r\n               lib.setPopped(ui.volumn, ui.click.volumn, 200);\r\n               // if(lib.config.show_pause) ui.auto.style.marginLeft='10px';\r\n               if (!lib.config.show_volumn) {\r\n                  ui.volumn.style.display = 'none';\r\n               }\r\n               if (!lib.config.show_auto) {\r\n                  ui.auto.style.display = 'none';\r\n               }\r\n               if (!lib.config.show_wuxie) {\r\n                  ui.wuxie.style.display = 'none';\r\n               }\r\n               // if(!lib.config.show_cardpile||_status.connectMode){\r\n               //     ui.cardPileButton.style.display='none';\r\n               // }\r\n\r\n               ui.sortCard = ui.create.system('整理手牌', function () {\r\n                  if (!game.me) return;\r\n                  var hs = game.me.getCards('h');\r\n                  if (!hs.length) return;\r\n                  game.addVideo('lose', game.me, [get.cardsInfo(hs), [], [], []]);\r\n                  for (var i = 0; i < hs.length; i++) {\r\n                     hs[i].goto(ui.special);\r\n                  }\r\n                  hs.sort(function (b, a) {\r\n                     if (a.name != b.name) return lib.sort.card(a.name, b.name);\r\n                     else if (a.suit != b.suit) return lib.suit.indexOf(a) - lib.suit.indexOf(b);\r\n                     else return a.number - b.number;\r\n                  });\r\n                  game.me.directgain(hs, false);\r\n               });\r\n               if (!lib.config.show_sortcard) {\r\n                  ui.sortCard.style.display = 'none';\r\n               }\r\n               if (lib.config.mode != 'yindao') {\r\n                  ui.playerids = ui.create.system('显示身份', function () {\r\n                     if (game.showIdentity) {\r\n                        game.showIdentity();\r\n                        _status.identityShown = true;\r\n                     }\r\n                  }, true);\r\n                  if (!lib.config.show_playerids || !game.showIdentity) {\r\n                     ui.playerids.style.display = 'none';\r\n                  }\r\n               }\r\n               if (!lib.config.show_replay) {\r\n                  ui.replay.style.display = 'none';\r\n               }\r\n               ui.control = ui.create.div('#control', ui.arena).animate('nozoom');\r\n               ui.cardPile = ui.create.div('#cardPile');\r\n               ui.discardPile = ui.create.div('#discardPile');\r\n               ui.special = ui.create.div('#special');\r\n               ui.ordering = ui.create.div('#ordering');\r\n               ui.dialogs = [];\r\n               ui.controls = [];\r\n               ui.style = {};\r\n\r\n               ui.time = ui.create.div(ui.gameinfo);\r\n               var timeInterval = function () {\r\n                  var date = new Date();\r\n                  var hours = date.getHours();\r\n                  var minutes = date.getMinutes();\r\n                  if (lib.config.watchface == 'simple') {\r\n                     ui.roundmenu.childNodes[13].style.transform = 'rotate(' + get.round((hours + 9) * 30, 2) + 'deg)';\r\n                  }\r\n                  else {\r\n                     ui.roundmenu.childNodes[13].style.transform = 'rotate(' + get.round((hours + minutes / 60 + 9) * 30, 2) + 'deg)';\r\n                  }\r\n                  ui.roundmenu.childNodes[12].style.transform = 'rotate(' + (minutes + 45) * 6 + 'deg)';\r\n                  if (minutes < 10) {\r\n                     minutes = '0' + minutes.toString();\r\n                  }\r\n                  ui.time.innerHTML = hours + ':' + minutes;\r\n               };\r\n               _status.timeInterval = setInterval(timeInterval, 30000);\r\n               timeInterval();\r\n               if (!lib.config.show_time) {\r\n                  ui.time.style.display = 'none';\r\n               }\r\n\r\n               ui.timer = ui.create.div('.skillbar.shadowed.playerbg.hidden');\r\n               ui.timer.id = 'timer';\r\n               ui.create.div('.skillbarshadow', ui.timer);\r\n               ui.create.div('.skillbarfill', ui.timer);\r\n               ui.timer.fillnode = ui.create.div(ui.timer.lastChild);\r\n               ui.timer.popnode = ui.create.div('.skillbartext', ui.timer);\r\n               ui.timer.popnode.style.opacity = 1;\r\n               ui.timer.position = 4;\r\n               ui.timer.style.zIndex = 5;\r\n               ui.timer.set = function (text, percentage) {\r\n                  if (typeof text == 'string' || typeof text == 'number') {\r\n                     ui.timer.popnode.innerHTML = text;\r\n                  }\r\n                  ui.timer.fillnode.style.top = ((1 - percentage) * 100) + '%';\r\n               }\r\n               var setTimerPosition = function (e) {\r\n                  this.position++;\r\n                  if (this.position > 4) {\r\n                     this.position = 1;\r\n                  }\r\n                  var left1 = '180px';\r\n                  var left2 = 'calc(100% - 245px)';\r\n                  var top1 = '210px';\r\n                  var top2 = 'calc(100% - 245px)';\r\n                  if (game.layout == 'default') {\r\n                     left1 = '265px';\r\n                     top1 = '160px';\r\n                     left2 = 'calc(100% - 330px)';\r\n                     top2 = 'calc(100% - 235px)';\r\n                  }\r\n                  if (this.position == 1 || this.position == 2) {\r\n                     this.style.top = top2;\r\n                  }\r\n                  else {\r\n                     this.style.top = top1;\r\n                  }\r\n                  if (this.position == 1 || this.position == 4) {\r\n                     this.style.left = left2;\r\n                  }\r\n                  else {\r\n                     this.style.left = left1;\r\n                  }\r\n               }\r\n               ui.timer.listen(setTimerPosition);\r\n\r\n               ui.shortcut = ui.create.div('#shortcut.hidden', ui.window);\r\n               ui.shortcut.listen(ui.click.shortcut);\r\n               ui.create.div(ui.shortcut, function (e) { e.stopPropagation() });\r\n               ui.create.div('.menubutton.round', '<span>重来</span>', ui.shortcut, game.reload).dataset.position = 1;\r\n               ui.create.div('.menubutton.round', '<span>退出</span>', ui.shortcut, game.exit).dataset.position = 3;\r\n               ui.create.div('.menubutton.round', '<span>记录</span>', ui.shortcut, ui.click.pause).dataset.position = 4;\r\n               ui.shortcut.autobutton = ui.create.div('.menubutton.round', '<span>托管</span>', ui.shortcut, ui.click.auto);\r\n               ui.shortcut.autobutton.dataset.position = 2;\r\n               ui.favmodelist = ui.create.div('.favmodelist', ui.shortcut);\r\n               ui.favmodelist.update = function () {\r\n                  this.innerHTML = '';\r\n                  var num = Math.min(6, lib.config.favouriteMode.length);\r\n                  for (var i = 0; i < num; i++) {\r\n                     this.add(lib.config.favouriteMode[i], i);\r\n                  }\r\n                  var mode = get.mode();\r\n                  if (typeof get.config(mode + '_mode') == 'string') {\r\n                     mode += '|' + get.config(mode + '_mode');\r\n                  }\r\n                  if (lib.config.favouriteMode.contains(mode)) {\r\n                     ui.favmode.classList.add('glow');\r\n                  }\r\n                  else {\r\n                     ui.favmode.classList.remove('glow');\r\n                  }\r\n               };\r\n               ui.favmodelist.add = function (name, index) {\r\n                  var info = name.split('|');\r\n                  var mode = info[0];\r\n                  var submode = info[1];\r\n                  var node = ui.create.div('.menubutton.large', this);\r\n                  var num = Math.min(6, lib.config.favouriteMode.length);\r\n                  node.dataset.type = num % 2 == 0 ? 'even' : 'odd';\r\n                  node.dataset.position = index;\r\n                  var str = lib.translate[name] || lib.translate[mode] || '';\r\n                  if (str.length == 2) {\r\n                     str += '模式';\r\n                  }\r\n                  node.innerHTML = str;\r\n                  node.listen(function () {\r\n                     game.saveConfig('mode', mode);\r\n                     if (submode) {\r\n                        game.saveConfig(mode + '_mode', submode, mode);\r\n                     }\r\n                     game.reload();\r\n                  });\r\n               };\r\n               ui.favmode = ui.create.system('收藏', function () {\r\n                  var mode = get.mode();\r\n                  if (typeof _status.mode == 'string') {\r\n                     mode += '|' + _status.mode;\r\n                  }\r\n                  if (this.classList.contains('glow')) {\r\n                     this.classList.remove('glow');\r\n                     lib.config.favouriteMode.remove(mode);\r\n                  }\r\n                  else {\r\n                     this.classList.add('glow');\r\n                     lib.config.favouriteMode.add(mode);\r\n                  }\r\n                  game.saveConfig('favouriteMode', lib.config.favouriteMode);\r\n                  ui.favmodelist.update();\r\n                  _status.clicked = true;\r\n               });\r\n               ui.favmode.style.display = 'none';\r\n               ui.favmodelist.update();\r\n               // ui.create.div('.menubutton.round','<span>菜单</span>',ui.shortcut,ui.click.config).dataset.position=5;\r\n\r\n\r\n               if (_status.connectMode) {\r\n                  ui.playerids.remove();\r\n                  ui.pause.innerHTML = '记录';\r\n               }\r\n               setTimerPosition.call(ui.timer);\r\n               ui.arena.appendChild(ui.timer);\r\n\r\n               if (!game.syncMenu) {\r\n                  lib.onfree.push(function () {\r\n                     ui.create.menu();\r\n                     ui.config2.classList.remove('hidden');\r\n                     ui.roundmenu.classList.remove('transparent2');\r\n                     setTimeout(function () {\r\n                        ui.config2.style.transition = '';\r\n                     }, 500);\r\n                  });\r\n               }\r\n               else {\r\n                  ui.create.menu();\r\n               }\r\n\r\n               lib.status.date = new Date();\r\n               lib.status.dateDelayed = 0;\r\n\r\n               while (lib.arenaReady.length) {\r\n                  (lib.arenaReady.shift())();\r\n               }\r\n               delete lib.arenaReady;\r\n               if (lib.config.auto_check_update) {\r\n                  setTimeout(function () {\r\n                     game.checkForUpdate(false);\r\n                  }, 3000);\r\n               }\r\n               if (!lib.config.asset_version) {\r\n                  lib.onfree.push(function () {\r\n                     setTimeout(function () {\r\n                        if (!game.download) {\r\n                           game.saveConfig('asset_version', '无');\r\n                        }\r\n                        else {\r\n                           var func = function () {\r\n                              if (confirm('是否下载图片和字体素材？（约275MB）')) {\r\n                                 if (!ui.arena.classList.contains('menupaused')) {\r\n                                    ui.click.configMenu();\r\n                                    ui.click.menuTab('其它');\r\n                                 }\r\n                                 setTimeout(game.checkForAssetUpdate, 500);\r\n                              }\r\n                              else {\r\n                                 game.saveConfig('asset_version', '无');\r\n                              }\r\n                           }\r\n                           if (_status.new_tutorial) {\r\n                              _status.new_tutorial = func;\r\n                           }\r\n                           else {\r\n                              func();\r\n                           }\r\n                        }\r\n                     }, 3000);\r\n                  });\r\n               }\r\n               if (localStorage.getItem(lib.configprefix + 'playback')) {\r\n                  setTimeout(lib.init.onfree);\r\n               }\r\n\r\n               if (lib.config.test_game) {\r\n                  ui.window.classList.add('testing');\r\n                  lib.config.game_speed = 'vfast';\r\n                  lib.config.low_performance = true;\r\n                  lib.config.animation = false;\r\n                  _status.auto = true;\r\n                  ui.auto.classList.add('glow');\r\n                  setTimeout(function () {\r\n                     var node = ui.create.pause().animate('start');\r\n                     node.appendChild(ui.sidebar);\r\n                     node.firstChild.innerHTML = '正在测试';\r\n                     node.removeEventListener('click', ui.click.resume);\r\n                  }, 500);\r\n               }\r\n            },\r\n            system: function (str, func, right, before) {\r\n               var parent = right ? ui.system2 : ui.system1;\r\n               var node = ui.create.div();\r\n               if (before) {\r\n                  parent.insertBefore(node, parent.firstChild);\r\n               }\r\n               else {\r\n                  parent.appendChild(node);\r\n               }\r\n               node.innerHTML = str;\r\n               if (func) {\r\n                  node.listen(func);\r\n               }\r\n               if (lib.config.button_press) {\r\n                  node.addEventListener(lib.config.touchscreen ? 'touchstart' : 'mousedown', function (e) {\r\n                     if (!node.classList.contains('hidden')) node.classList.add('pressdown');\r\n                  });\r\n                  node.addEventListener(lib.config.touchscreen ? 'touchend' : 'mouseup', function (e) {\r\n                     node.classList.remove('pressdown');\r\n                  });\r\n                  node.addEventListener(lib.config.touchscreen ? 'touchmove' : 'mousemove', function (e) {\r\n                     node.classList.remove('pressdown');\r\n                  });\r\n               }\r\n               return node;\r\n            },\r\n            pause: function () {\r\n               if (_status.pausing) return;\r\n               ui.click.shortcut(false);\r\n               var node = ui.create.div(\".pausedbg\", ui.window);\r\n               _status.pausing = true;\r\n               setTimeout(function () {\r\n                  _status.pausing = false;\r\n               }, 500);\r\n               if (lib.config.touchscreen) {\r\n                  setTimeout(function () {\r\n                     node.addEventListener('touchend', ui.click.resume);\r\n                  }, 500);\r\n               }\r\n               else {\r\n                  node.addEventListener('click', ui.click.resume);\r\n               }\r\n               if (!lib.config.touchscreen) {\r\n                  node.oncontextmenu = ui.click.resume;\r\n               }\r\n\r\n               var node2 = ui.create.div(node);\r\n               if (_status.connectMode) {\r\n                  node2.innerHTML = '';\r\n               }\r\n               else {\r\n                  node2.innerHTML = '已暂停';\r\n               }\r\n\r\n               // node2.listen(function(){\r\n               //     _status.clicked=true;\r\n               //     if(ui.sidebar.classList.contains('hidden')){\r\n               //         ui.sidebar.show();\r\n               //         ui.sidebar3.show();\r\n               //     }\r\n               //     else{\r\n               //         ui.sidebar.hide();\r\n               //         ui.sidebar3.hide();\r\n               //     }\r\n               // });\r\n               return node;\r\n            },\r\n            prebutton: function (item, type, position, noclick) {\r\n               var node = ui.create.div(position);\r\n               node.style.display = 'none';\r\n               node.link = item;\r\n               node.activate = function () {\r\n                  ui.create.button(item, type, position, noclick, node);\r\n                  delete node.activate;\r\n               }\r\n               _status.prebutton.push(node);\r\n               return node;\r\n            },\r\n            /**\r\n             * 生成一个按钮\r\n             * @function\r\n             * @param {!Object} item 按钮link指向的物件\r\n             * @param {!string} type 按钮类型（'blank'空按钮；'card'卡牌；'vcard'虚拟卡牌\r\n             * @param {!HTMLElement} position 按钮添加的位置，参考{@link ui.create.div}的父元素\r\n             * @param {?boolean} noclick 按钮是否可以被点击\r\n             * @returns {HTMLDivElement} 返回生成的生成一个按钮\r\n             */\r\n            button: function (item, type, position, noclick, node) {\r\n               switch (type) {\r\n                  case 'blank':\r\n                     node = ui.create.div('.button.card', position);\r\n                     node.link = item;\r\n                     break;\r\n\r\n                  case 'card':\r\n                     if (typeof item.copy == 'function') {\r\n                        node = item.copy(false);\r\n                     }\r\n                     else {\r\n                        node = item.cloneNode(true);\r\n                     }\r\n                     node.classList.add('button');\r\n                     if (position) position.appendChild(node);\r\n                     node.link = item;\r\n                     if (item.style.backgroundImage) {\r\n                        node.style.backgroundImage = item.style.backgroundImage;\r\n                        node.style.backgroundSize = 'cover';\r\n                     }\r\n                     if (item.style.color) {\r\n                        node.style.color = item.style.color;\r\n                     }\r\n                     if (item.nature) {\r\n                        node.classList.add(item.nature);\r\n                     }\r\n                     if (!noclick) {\r\n                        lib.setIntro(node);\r\n                     }\r\n                     if (get.position(item) == 'j' && item.viewAs && item.viewAs != item.name && lib.config.cardtempname != 'off') {\r\n                        node._tempName = ui.create.div('.tempname', node);\r\n                        var tempname = get.translation(item.viewAs);\r\n                        node._tempName.dataset.nature = 'wood';\r\n                        node._tempName.innerHTML = lib.config.cardtempname == 'default' ? get.verticalStr(tempname) : tempname;\r\n                        node._tempName.tempname = tempname;\r\n                     }\r\n                     break;\r\n\r\n                  case 'vcard':\r\n                     if (typeof item == 'string') {\r\n                        item = [get.type(item), '', item];\r\n                     }\r\n                     node = ui.create.card(position, 'noclick', noclick);\r\n                     node.classList.add('button');\r\n                     node.init(item);\r\n                     node.link = item;\r\n                     break;\r\n\r\n                  case 'character': case 'player': case 'characterx':\r\n                     if (node) {\r\n                        node.classList.add('button');\r\n                        node.classList.add('character');\r\n                        node.style.display = '';\r\n                     }\r\n                     else {\r\n                        node = ui.create.div('.button.character', position);\r\n                     }\r\n                     node._link = item;\r\n                     if (_status.noReplaceCharacter && type == 'characterx') type = 'character';\r\n                     if (type == 'characterx') {\r\n                        if (lib.characterReplace[item] && lib.characterReplace[item].length) item = lib.characterReplace[item][0];\r\n                     }\r\n                     node.link = item;\r\n                     if (type == 'character' || type == 'characterx') {\r\n                        var double = get.is.double(node._link, true);\r\n                        if (double) node._changeGroup = true;\r\n                        if (type == 'characterx' && lib.characterReplace[node._link] && lib.characterReplace[node._link].length > 1) node._replaceButton = true;\r\n                        var func = function (node, item) {\r\n                           node.setBackground(item, 'character');\r\n                           if (node.node) {\r\n                              node.node.name.remove();\r\n                              node.node.hp.remove();\r\n                              node.node.group.remove();\r\n                              node.node.intro.remove();\r\n                              if (node.node.replaceButton) node.node.replaceButton.remove();\r\n                           }\r\n                           node.node = {\r\n                              name: ui.create.div('.name', node),\r\n                              hp: ui.create.div('.hp', node),\r\n                              group: ui.create.div('.identity', node),\r\n                              intro: ui.create.div('.intro', node),\r\n                           };\r\n                           var infoitem = lib.character[item];\r\n                           if (!infoitem) {\r\n                              for (var itemx in lib.characterPack) {\r\n                                 if (lib.characterPack[itemx][item]) {\r\n                                    infoitem = lib.characterPack[itemx][item]; break;\r\n                                 }\r\n                              }\r\n                           }\r\n                           node.node.name.innerHTML = get.slimName(item);\r\n                           if (lib.config.buttoncharacter_style == 'default' || lib.config.buttoncharacter_style == 'simple') {\r\n                              if (lib.config.buttoncharacter_style == 'simple') {\r\n                                 node.node.group.style.display = 'none';\r\n                              }\r\n                              node.node.name.dataset.nature = get.groupnature(infoitem[1]);\r\n                              node.node.group.dataset.nature = get.groupnature(infoitem[1], 'raw');\r\n                              node.classList.add('newstyle');\r\n                              if (double && double.length) {\r\n                                 node.node.name.dataset.nature = get.groupnature(double[0]);\r\n                                 node.node.group.dataset.nature = get.groupnature(double[double.length == 2 ? 1 : 0]);\r\n                              }\r\n                              ui.create.div(node.node.hp);\r\n                              var textnode = ui.create.div('.text', get.numStr(infoitem[2]), node.node.hp);\r\n                              if (infoitem[2] == 0) {\r\n                                 node.node.hp.hide();\r\n                              }\r\n                              else if (get.infoHp(infoitem[2]) <= 3) {\r\n                                 node.node.hp.dataset.condition = 'mid';\r\n                              }\r\n                              else {\r\n                                 node.node.hp.dataset.condition = 'high';\r\n                              }\r\n                           }\r\n                           else {\r\n                              var hp = get.infoHp(infoitem[2]);\r\n                              var maxHp = get.infoMaxHp(infoitem[2]);\r\n                              if (maxHp > 14 || hp < 0) {\r\n                                 if (typeof infoitem[2] == 'string') node.node.hp.innerHTML = infoitem[2];\r\n                                 else node.node.hp.innerHTML = get.numStr(infoitem[2]);\r\n                                 node.node.hp.classList.add('text');\r\n                              }\r\n                              else {\r\n                                 for (var i = 0; i < maxHp; i++) {\r\n                                    var next = ui.create.div('', node.node.hp);\r\n                                    if (i >= hp) next.classList.add('exclude');\r\n                                 }\r\n                              }\r\n                           }\r\n                           if (node.node.hp.childNodes.length == 0) {\r\n                              node.node.name.style.top = '8px';\r\n                           }\r\n                           if (node.node.name.querySelectorAll('br').length >= 4) {\r\n                              node.node.name.classList.add('long');\r\n                              if (lib.config.buttoncharacter_style == 'old') {\r\n                                 node.addEventListener('mouseenter', ui.click.buttonnameenter);\r\n                                 node.addEventListener('mouseleave', ui.click.buttonnameleave);\r\n                              }\r\n                           }\r\n                           node.node.intro.innerHTML = lib.config.intro;\r\n                           if (!noclick) {\r\n                              lib.setIntro(node);\r\n                           }\r\n                           if (infoitem[1]) {\r\n                              if (double) {\r\n                                 var str = '<div>';\r\n                                 if (double.length == 2) {\r\n                                    for (var i of double) {\r\n                                       str += get.translation(i);\r\n                                    }\r\n                                 }\r\n                                 else str += get.translation(double[0]);\r\n                                 str += '</div>';\r\n                                 node.node.group.innerHTML = str;\r\n                              }\r\n                              else node.node.group.innerHTML = '<div>' + get.translation(infoitem[1]) + '</div>';\r\n                              node.node.group.style.backgroundColor = get.translation(infoitem[1] + 'Color');\r\n                           }\r\n                           else {\r\n                              node.node.group.style.display = 'none';\r\n                           }\r\n                           if (node._replaceButton) {\r\n                              var intro = ui.create.div('.button.replaceButton', node);\r\n                              node.node.replaceButton = intro;\r\n                              intro.innerHTML = '切换';\r\n                              intro._node = node;\r\n                              intro.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', function () {\r\n                                 _status.tempNoButton = true;\r\n                                 var node = this._node;\r\n                                 var list = lib.characterReplace[node._link];\r\n                                 var link = node.link;\r\n                                 var index = list.indexOf(link);\r\n                                 if (index == list.length - 1) index = 0;\r\n                                 else index++;\r\n                                 link = list[index];\r\n                                 node.link = link;\r\n                                 node.refresh(node, link);\r\n                                 setTimeout(function () {\r\n                                    delete _status.tempNoButton;\r\n                                 }, 200);\r\n                              });\r\n                           }\r\n                        };\r\n                        node.refresh = func;\r\n                        node.refresh(node, item);\r\n                     }\r\n                     else {\r\n                        node.node = {\r\n                           name: ui.create.div('.name', node),\r\n                           intro: ui.create.div('.intro', node)\r\n                        }\r\n                        if (item.name && item.name.indexOf('unknown') == 0) {\r\n                           if (item.node && item.node.name_seat) {\r\n                              node.classList.add('cardbg');\r\n                              ui.create.div('.avatar_name', node, get.translation(item.name));\r\n                           }\r\n                           else {\r\n                              node.setBackground(item.name1, 'character');\r\n                           }\r\n                        }\r\n                        else {\r\n                           node.setBackground(item.name, 'character');\r\n                        }\r\n                     }\r\n                     break;\r\n\r\n                  case 'text':\r\n                     node = ui.create.div('.button.text', position);\r\n                     node.link = item;\r\n                     node.innerHTML = item;\r\n                     break;\r\n\r\n                  case 'textButton':\r\n                     node = ui.create.div('.caption', position);\r\n                     node.link = item;\r\n                     node.innerHTML = item;\r\n                     break;\r\n               }\r\n               if (!noclick) {\r\n                  node.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.button);\r\n               }\r\n               else {\r\n                  node.classList.add('noclick');\r\n                  if (node.querySelector('.intro')) {\r\n                     node.querySelector('.intro').remove();\r\n                  }\r\n               }\r\n               for (var i in lib.element.button) {\r\n                  node[i] = lib.element.button[i];\r\n               }\r\n               return node;\r\n            },\r\n            /**\r\n             * 生成一组按钮\r\n             * @function\r\n             * @param {!Array} list 按钮列表\r\n             * @param {!string} type 按钮类型\r\n             * @returns {HTMLDivElement} 返回生成的一组按钮\r\n             * @see {@link ui.create.button}\r\n             */\r\n            buttons: function (list, type, position, noclick, zoom) {\r\n               var buttons = [];\r\n               var pre = (type.slice(0, 3) == 'pre');\r\n               if (pre) {\r\n                  if (!_status.prebutton) {\r\n                     _status.prebutton = [];\r\n                     lib.onfree.push(function () {\r\n                        for (var i = 0; i < _status.prebutton.length; i++) {\r\n                           if (_status.prebutton[i].activate) {\r\n                              _status.prebutton[i].activate();\r\n                           }\r\n                        }\r\n                        delete _status.prebutton;\r\n                     });\r\n                  }\r\n               }\r\n               for (var i = 0; i < list.length; i++) {\r\n                  if (pre) {\r\n                     buttons.push(ui.create.prebutton(list[i], type.slice(3), position, noclick));\r\n                  }\r\n                  else {\r\n                     buttons.push(ui.create.button(list[i], type, position, noclick));\r\n                  }\r\n               }\r\n               return buttons;\r\n            },\r\n            /**\r\n             * 创建角色\r\n             * @function\r\n             * @param {HTMLDivElement} parent 父节点\r\n             * @param {?boolean} noclick 是否可点击，如果为true，表示**不可点击**；如果为false或未指定，表示**可点击**\r\n             */\r\n            player: function (position, noclick) {\r\n               /**\r\n                * 角色对象\r\n                * 创建角色对象，见{@link ui.create.player}\r\n                * @namespace GameCores.GameObjects.Player\r\n                * @mixes lib.element.player\r\n                */\r\n               var node = ui.create.div('.player', position);\r\n               /**\r\n                * 角色的子节点\r\n                * @name node\r\n                * @memberof GameCores.GameObjects.Player\r\n                * @property {HTMLDivElement} avatar (主将)头像\r\n                * @property {HTMLDivElement} avatar2 副将头像\r\n                * @property {HTMLDivElement} turnover 翻面\r\n                * @property {HTMLDivElement} framebg 背景\r\n                * @property {HTMLDivElement} intro 介绍\r\n                * @property {HTMLDivElement} identity 身份\r\n                * @property {HTMLDivElement} hp 当前血量\r\n                * @property {HTMLDivElement} name (主将)姓名\r\n                * @property {HTMLDivElement} name2 副将姓名\r\n                * @property {HTMLDivElement} nameol 姓名OL\r\n                * @property {HTMLDivElement} count 数量\r\n                * @property {HTMLDivElement} equips 装备栏\r\n                * @property {HTMLDivElement} judges 判定栏\r\n                * @property {HTMLDivElement} marks 标记\r\n                * @property {HTMLDivElement} chain 连环\r\n                * @property {HTMLDivElement} handcards1 手牌1\r\n                * @property {HTMLDivElement} handcards2 手牌2\r\n                * @property {HTMLDivElement} action action\r\n                * @property {HTMLDivElement} link 铁索(横置)\r\n                */\r\n               node.node = {\r\n                  avatar: ui.create.div('.avatar', node, ui.click.avatar).hide(),\r\n                  avatar2: ui.create.div('.avatar2', node, ui.click.avatar2).hide(),\r\n                  turnedover: ui.create.div('.turned', '<div>翻<br>面<div>', node),\r\n                  framebg: ui.create.div('.framebg', node),\r\n                  intro: ui.create.div('.intro', node),\r\n                  identity: ui.create.div('.identity', node),\r\n                  hp: ui.create.div('.hp', node),\r\n                  name: ui.create.div('.name', node),\r\n                  name2: ui.create.div('.name.name2', node),\r\n                  nameol: ui.create.div('.nameol', node),\r\n                  count: ui.create.div('.count', node).hide(),\r\n                  equips: ui.create.div('.equips', node).hide(),\r\n                  judges: ui.create.div('.judges', node),\r\n                  marks: ui.create.div('.marks', node),\r\n                  chain: ui.create.div('.chain', '<div></div>', node),\r\n                  handcards1: ui.create.div('.handcards'),\r\n                  handcards2: ui.create.div('.handcards'),\r\n               };\r\n               var chainlength = game.layout == 'default' ? 64 : 40;\r\n               for (var i = 0; i < chainlength; i++) {\r\n                  ui.create.div(node.node.chain.firstChild, '.cardbg').style.transform = 'translateX(' + (i * 5 - 5) + 'px)';\r\n               }\r\n               node.node.action = ui.create.div('.action', node.node.avatar);//特殊行动标识：在战棋模式中显示当前正在行动的角色与角色间距离\r\n               /**\r\n                * 回合计数，初始为0，每回合开始则加1\r\n                * @name phaseNumber\r\n                * @type {!number}\r\n                * @memberof GameCores.GameObjects.Player\r\n                */\r\n               node.phaseNumber = 0;\r\n               /**\r\n                * 事件跳过列表，如果一个事件e的事件名在该列表中存在X个，则接下来的X个事件e会被直接跳过，不执行；每跳过一个事件，列表中就会相应移除一个事件名\r\n                * @name skipList\r\n                * @type {!Array<string>}\r\n                * @memberof GameCores.GameObjects.Player\r\n                */\r\n               node.skipList = [];\r\n               /**\r\n                * 技能列表\r\n                * @name skills\r\n                * @type {!Array<any>}\r\n                * @memberof GameCores.GameObjects.player\r\n                */\r\n               node.skills = [];\r\n               /**\r\n                * ??\r\n                * @name initedSkills\r\n                * @type {!Array<any>}\r\n                * @memberof GameCores.GameObjects.Player\r\n                */\r\n               node.initedSkills = [];\r\n               node.additionalSkills = {};\r\n               node.disabledSkills = {};\r\n               node.hiddenSkills = [];\r\n               node.awakenedSkills = [];\r\n               node.forbiddenSkills = {};\r\n               node.popups = [];\r\n               node.damagepopups = [];\r\n               node.judging = [];\r\n               node.stat = [{ card: {}, skill: {} }];\r\n               node.actionHistory = [JSON.parse(JSON.stringify({ ...lib.historyRecorder }))];\r\n               node.tempSkills = {};\r\n               node.$ = node.storage = {};\r\n               node.marks = {};\r\n               node.ai = { friend: [], enemy: [], neutral: [], handcards: { global: [], source: [], viewed: [] } };\r\n               node.queueCount = 0;\r\n               node.outCount = 0;\r\n\r\n               for (var i in lib.element.player) {\r\n                  node[i] = lib.element.player[i];\r\n               }\r\n               node.node.link = node.mark(' ', { mark: get.linkintro });\r\n               node.node.link.firstChild.setBackgroundImage('image/card/tiesuo_mark.png')\r\n               node.node.link.firstChild.style.backgroundSize = 'cover';\r\n               ui.create.div(node.node.identity);//??\r\n               if (!noclick) {\r\n                  node.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.target);\r\n                  node.node.identity.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.identity);\r\n                  if (lib.config.touchscreen) {\r\n                     node.addEventListener('touchstart', ui.click.playertouchstart);\r\n                  }\r\n               }\r\n               else node.noclick = true;\r\n\r\n               return node;\r\n            },\r\n            connectPlayers: function (ip) {\r\n               game.connectPlayers = [];\r\n               for (var i = 0; i < 8; i++) {\r\n                  var player = ui.create.player(ui.window);\r\n                  player.dataset.position = i;\r\n                  player.classList.add('connect');\r\n                  game.connectPlayers.push(player);\r\n                  if (i >= lib.configOL.number) {\r\n                     player.classList.add('unselectable2');\r\n                  }\r\n               }\r\n\r\n               var bar = ui.create.div(ui.window);\r\n               bar.style.height = '20px';\r\n               bar.style.width = '80%';\r\n               bar.style.left = '10%';\r\n               bar.style.top = 'calc(200% / 7 - 120px + 5px)';\r\n               bar.style.textAlign = 'center';\r\n               var ipbar = ui.create.div('.shadowed', ip, bar);\r\n               ipbar.style.padding = '4px';\r\n               ipbar.style.borderRadius = '2px';\r\n               ipbar.style.position = 'relative';\r\n\r\n               var button = ui.create.div('.menubutton.large.highlight.connectbutton.pointerdiv', game.online ? '退出联机' : '开始游戏', ui.window, function () {\r\n                  if (button.clicked) return;\r\n                  if (game.online) {\r\n                     if (game.onlinezhu) {\r\n                        game.send('startGame');\r\n                     }\r\n                     else {\r\n                        game.saveConfig('tmp_owner_roomId');\r\n                        game.saveConfig('tmp_user_roomId');\r\n                        game.saveConfig('reconnect_info');\r\n                        game.reload();\r\n                     }\r\n                  }\r\n                  else {\r\n                     var num = 0;\r\n                     for (var i of game.connectPlayers) {\r\n                        if (!i.nickname && !i.classList.contains('unselectable2')) num++;\r\n                     }\r\n                     // if (num >= lib.configOL.number - 1) {\r\n                     //     alert('至少要有两名玩家才能开始游戏！');\r\n                     //     return;\r\n                     // }\r\n                     game.resume();\r\n                  }\r\n                  button.delete();\r\n                  bar.delete();\r\n                  delete ui.connectStartButton;\r\n                  delete ui.connectStartBar;\r\n                  button.clicked = true;\r\n               });\r\n\r\n               ui.connectStartButton = button;\r\n               ui.connectStartBar = bar;\r\n            },\r\n            players: function (num) {\r\n               if (num === 0) {\r\n                  return;\r\n               }\r\n               if (num == undefined) num = lib.configOL.number;\r\n               if (num == undefined) num = get.playerNumber();\r\n               if (typeof num == 'string') {\r\n                  num = parseInt(num);\r\n               }\r\n               if (!num) num = 5;\r\n               for (var i = 0; i < num; i++) {\r\n                  var player = ui.create.player().animate('start');\r\n                  game.players.push(player);\r\n                  player.dataset.position = i;\r\n               }\r\n               var players = game.players;\r\n               for (var i = 0; i < players.length; i++) {\r\n                  if (i > 0) {\r\n                     players[i].previous = players[i - 1];\r\n                     players[i].previousSeat = players[i - 1];\r\n                  }\r\n                  if (i < players.length - 1) {\r\n                     players[i].next = players[i + 1];\r\n                     players[i].nextSeat = players[i + 1];\r\n                  }\r\n               }\r\n               players[0].previous = players[players.length - 1];\r\n               players[0].previousSeat = players[players.length - 1];\r\n               players[players.length - 1].next = players[0];\r\n               players[players.length - 1].nextSeat = players[0];\r\n               ui.arena.setNumber(num);\r\n               for (var i = 0; i < num; i++) {\r\n                  ui.arena.appendChild(players[i]);\r\n               }\r\n               // ui.arena.classList.add('glass');\r\n               // for(var i=0;i<num;i++){\r\n               //     var bg=ui.create.div('.glassbg');\r\n               //     var bg2=ui.create.div(bg);\r\n               //     ui.create.div(bg);\r\n               //     var rect=players[i].getBoundingClientRect();\r\n               //     bg2.style.backgroundImage='url(\"image/background/huangtian_bg.jpg\")';\r\n               //     bg2.style.width=ui.window.offsetWidth+'px';\r\n               //     bg2.style.height=ui.window.offsetHeight+'px';\r\n               //     bg2.style.transform='translate('+(-rect.left)+'px,'+(-rect.top)+'px)';\r\n               //     players[i].insertBefore(bg,players[i].firstChild);\r\n               // }\r\n               return players;\r\n            },\r\n            me: function (hasme) {\r\n               ui.mebg = ui.create.div('#mebg', ui.arena);\r\n               ui.me = ui.create.div('#me', ui.arena).animate('start');\r\n               ui.handcards1Container = ui.create.div('#handcards1', ui.me);\r\n               ui.handcards2Container = ui.create.div('#handcards2', ui.me);\r\n               ui.arena.classList.remove('nome');\r\n               if (lib.config.mousewheel && !lib.config.touchscreen) {\r\n                  ui.handcards1Container.onmousewheel = ui.click.mousewheel;\r\n                  ui.handcards2Container.onmousewheel = ui.click.mousewheel;\r\n               }\r\n               ui.handcards1Container.ontouchstart = ui.click.touchStart;\r\n               ui.handcards2Container.ontouchstart = ui.click.touchStart;\r\n               ui.handcards1Container.ontouchmove = ui.click.touchScroll;\r\n               ui.handcards2Container.ontouchmove = ui.click.touchScroll;\r\n               ui.handcards1Container.style.WebkitOverflowScrolling = 'touch';\r\n               ui.handcards2Container.style.WebkitOverflowScrolling = 'touch';\r\n\r\n               if (hasme && game.me) {\r\n                  ui.handcards1 = game.me.node.handcards1;\r\n                  ui.handcards2 = game.me.node.handcards2;\r\n                  ui.handcards1Container.appendChild(ui.handcards1);\r\n                  ui.handcards2Container.appendChild(ui.handcards2);\r\n                  // ui.updatehl();\r\n               }\r\n               else if (game.players.length) {\r\n                  game.me = game.players[0];\r\n                  ui.handcards1 = game.me.node.handcards1;\r\n                  ui.handcards2 = game.me.node.handcards2;\r\n                  ui.handcards1Container.appendChild(ui.handcards1);\r\n                  ui.handcards2Container.appendChild(ui.handcards2);\r\n                  // ui.updatehl();\r\n               }\r\n            },\r\n            /**\r\n             * 创建游戏牌对象\r\n             * @param {HTMLDivElement} parent 父节点，即初始位置(手牌|牌堆|弃牌堆等) \r\n             * @param {?'noclick'} [noclick] 是否可点击，如果为'noclick'表示**不可点击**，如果为false或未指定，表示可点击\r\n             * @param {?boolean} [nodialog] 是否可弹窗，如果为true表示**不可弹窗**，如果为false或未指定，表示可弹窗\r\n             * @returns {!GameCores.GameObjects.Card} 创建的游戏牌对象\r\n             */\r\n            card: function (position, info, noclick) {\r\n               /**\r\n                * 游戏牌\r\n                * @namespace GameCores.GameObjects.Card\r\n                */\r\n               var node = ui.create.div('.card', position);\r\n               /**\r\n                * @name node\r\n                * @memberof GameCores.GameObjects.Card\r\n                * @property {HTMLDivElement} image 图片\r\n                * @property {HTMLDivElement} info 花色和点数信息\r\n                * ```\r\n                * info.innerHTML = \"花色<span> </span>点数\"\r\n                * ```\r\n                * @property {HTMLDivElement} name \r\n                */\r\n               node.node = {\r\n                  image: ui.create.div('.image', node),\r\n                  info: ui.create.div('.info', node),\r\n                  name: ui.create.div('.name', node),\r\n                  name2: ui.create.div('.name2', node),\r\n                  background: ui.create.div('.background', node),\r\n                  intro: ui.create.div('.intro', node),\r\n                  range: ui.create.div('.range', node),\r\n                  gaintag: ui.create.div('.gaintag', node),\r\n               }\r\n               for (var i in lib.element.card) {\r\n                  node[i] = lib.element.card[i];\r\n               }\r\n               node.node.intro.innerHTML = lib.config.intro;\r\n               if (!noclick) {\r\n                  lib.setIntro(node);\r\n               }\r\n               node.storage = {};\r\n               node.vanishtag = [];\r\n               node.gaintag = [];\r\n               node._uncheck = [];\r\n               if (info != 'noclick') {\r\n                  node.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.card);\r\n                  if (lib.config.touchscreen) {\r\n                     node.addEventListener('touchstart', ui.click.cardtouchstart);\r\n                     node.addEventListener('touchmove', ui.click.cardtouchmove);\r\n                  }\r\n                  if (lib.cardSelectObserver) {//?? [never used]\r\n                     lib.cardSelectObserver.observe(node, { attributes: true });\r\n                  }\r\n               }\r\n               return node;\r\n            },\r\n            cardsAsync: function () {\r\n               if (lib.onfree) {\r\n                  _status.waitingForCards = Array.from(arguments);\r\n                  lib.onfree.push(function () {\r\n                     if (_status.waitingForCards) {\r\n                        ui.create.cards.apply(ui.create, _status.waitingForCards);\r\n                        delete _status.waitingForCards;\r\n                     }\r\n                  });\r\n               }\r\n               else {\r\n                  ui.create.cards.apply(ui.create, arguments);\r\n               }\r\n            },\r\n            cards: function (ordered) {\r\n               if (_status.brawl) {\r\n                  if (_status.brawl.cardPile) {\r\n                     lib.card.list = _status.brawl.cardPile(lib.card.list);\r\n                  }\r\n                  if (_status.brawl.orderedPile) {\r\n                     ordered = true;\r\n                  }\r\n               }\r\n               if (!ordered) {\r\n                  lib.card.list.randomSort();\r\n               }\r\n               for (var i = 0; i < lib.card.list.length; i++) {\r\n                  if (lib.card[lib.card.list[i][2]]) {\r\n                     if (!lib.card.list[i]._replaced) {\r\n                        if (!_status.connectMode) {\r\n                           if (lib.config.bannedcards.contains(lib.card.list[i][2])) continue;\r\n                        }\r\n                        else {\r\n                           if (lib.configOL.protect_beginner && get.is.banForBeginner(lib.card.list[i][2])) continue;\r\n                           if (lib.configOL.bannedcards.contains(lib.card.list[i][2])) continue;\r\n                        }\r\n                        if (game.bannedcards && game.bannedcards.contains(lib.card.list[i][2])) continue;\r\n                     }\r\n                     lib.inpile.add(lib.card.list[i][2]);\r\n                     ui.create.card(ui.cardPile).init(lib.card.list[i]);\r\n                  }\r\n               }\r\n               lib.inpile.sort(lib.sort.card);\r\n               for (var i in _status.cardtag) {\r\n                  if (!_status.cardtag[i].length) delete _status.cardtag[i];\r\n               }\r\n               game.broadcastAll(function (num, pile, top, cardtag) {\r\n                  if (ui.cardPileNumber) ui.cardPileNumber.innerHTML = '0轮 剩余牌: ' + num;\r\n                  lib.inpile = pile;\r\n                  _status.pileTop = top;\r\n                  _status.cardtag = cardtag;\r\n               }, ui.cardPile.childNodes.length, lib.inpile, ui.cardPile.firstChild, _status.cardtag);\r\n            },\r\n         },\r\n         /**\r\n          * HTML 事件\r\n          * @namespace\r\n          */\r\n         click: {\r\n            identitycircle: function () {\r\n               var list = [];\r\n               this.classList.toggle('transparent');\r\n               for (var i = 0; i < this.parentNode.childNodes.length; i++) {\r\n                  if (!this.parentNode.childNodes[i].classList.contains('transparent')) {\r\n                     list.add(this.parentNode.childNodes[i].link[2]);\r\n                  }\r\n               }\r\n               var info = this.link;\r\n               if (list.length == 1) {\r\n                  for (var i = 0; i < this.parentNode.childNodes.length; i++) {\r\n                     if (!this.parentNode.childNodes[i].classList.contains('transparent')) {\r\n                        var info2 = this.parentNode.childNodes[i].link;\r\n                        info[0].firstChild.innerHTML = info2[1];\r\n                        info[0].dataset.color = info2[2];\r\n                     }\r\n                  }\r\n               }\r\n               else {\r\n                  info[0].firstChild.innerHTML = '';\r\n                  info[0].dataset.color = '';\r\n                  ui.create.identitycircle(list, info[0].firstChild);\r\n               }\r\n               this._source._guozhanguess = list;\r\n            },\r\n            connectEvents: function () {\r\n               if (this.info) {\r\n                  var button = this;\r\n                  var layer = ui.create.div('.poplayer', ui.window);\r\n                  var uiintro = ui.create.dialog('hidden', 'notouchscroll');\r\n                  this.classList.add('active');\r\n                  if (lib.config.touchscreen) {\r\n                     lib.setScroll(uiintro.contentContainer);\r\n                  }\r\n                  layer.listen(function () {\r\n                     if (this.clicked) {\r\n                        this.clicked = false;\r\n                        return;\r\n                     }\r\n                     button.classList.remove('active');\r\n                     uiintro.delete();\r\n                     this.delete();\r\n                  });\r\n                  uiintro.listen(function () {\r\n                     _status.clicked = true;\r\n                  });\r\n                  uiintro.style.zIndex = 21;\r\n                  uiintro.classList.add('popped');\r\n                  uiintro.classList.add('static');\r\n                  uiintro.classList.add('onlineclient');\r\n                  uiintro.style.width = '180px';\r\n                  uiintro.style.height = '300px';\r\n                  uiintro.style.left = 'auto';\r\n                  uiintro.style.right = '20px';\r\n                  uiintro.style.top = 'auto';\r\n                  uiintro.style.bottom = '75px';\r\n\r\n                  uiintro.refresh = function () {\r\n                     if (button.focused) return;\r\n                     uiintro.content.innerHTML = '';\r\n                     uiintro.addText('创建约战');\r\n                     button.textnode = uiintro.content.lastChild.lastChild;\r\n                     uiintro.add('<input type=\"text\" style=\"width:calc(100% - 10px);resize: none;border: none;border-radius: 2px;box-shadow: rgba(0, 0, 0, 0.2) 0px 0px 0px 1px;margin-top: -2px;margin-bottom: 2px;\">');\r\n                     uiintro.content.lastChild.style.paddingTop = 0;\r\n                     button.input = uiintro.content.lastChild.lastChild;\r\n                     button.input.onfocus = function () {\r\n                        button.focused = true;\r\n                     }\r\n                     button.input.onblur = function () {\r\n                        delete button.focused;\r\n                     }\r\n                     if (button.interval) {\r\n                        button.input.disabled = true;\r\n                        button.input.style.opacity = 0.6;\r\n                        if (button.intervaltext) {\r\n                           button.textnode.innerHTML = button.intervaltext;\r\n                        }\r\n                     }\r\n                     var datenode = ui.create.div(uiintro.content);\r\n                     datenode.style.marginTop = 0;\r\n                     datenode.style.whiteSpace = 'nowrap';\r\n                     var date = new Date();\r\n                     var days = [];\r\n                     var currentDay = date.getDay();\r\n                     if (currentDay == 0) currentDay = 7;\r\n                     for (var i = 1; i <= 7; i++) {\r\n                        if (i < currentDay) {\r\n                           days.push([i.toString(), '下周' + get.cnNumber(i, true)]);\r\n                        }\r\n                        else if (i == 7) {\r\n                           days.push([i.toString(), '周日']);\r\n                        }\r\n                        else if (i == currentDay) {\r\n                           days.push([i.toString(), '今天']);\r\n                        }\r\n                        else {\r\n                           days.push([i.toString(), '周' + get.cnNumber(i, true)]);\r\n                        }\r\n                     }\r\n                     days = days.concat(days.splice(0, currentDay - 1));\r\n                     var initday = currentDay + 1;\r\n                     if (initday > 7) {\r\n                        initday -= 7;\r\n                     }\r\n                     var daysselect = ui.create.selectlist(days, initday.toString(), datenode);\r\n                     daysselect.style.width = '55px';\r\n                     var hours = [];\r\n                     for (var i = 0; i < 24; i++) {\r\n                        hours.push([i.toString(), i.toString() + '点']);\r\n                     }\r\n                     var hoursselect = ui.create.selectlist(hours, date.getHours().toString(), datenode);\r\n                     hoursselect.style.marginLeft = '5px';\r\n                     hoursselect.style.width = '55px';\r\n                     var timeconfirm = ui.create.node('button', '确定', datenode);\r\n                     timeconfirm.style.marginLeft = '5px';\r\n                     timeconfirm.onclick = function () {\r\n                        if (!button.input.value) {\r\n                           alert('请填写约战标题');\r\n                           return;\r\n                        }\r\n                        var date2 = new Date();\r\n                        date2.setHours(parseInt(hoursselect.value));\r\n                        date2.setMinutes(0);\r\n                        date2.setSeconds(0);\r\n                        var deltaday = parseInt(daysselect.value) - currentDay;\r\n                        if (deltaday < 0) {\r\n                           deltaday += 7;\r\n                        }\r\n                        var utc = date2.getTime() + deltaday * 24 * 3600000;\r\n                        if (utc < date.getTime()) {\r\n                           alert('创建失败，时间已过');\r\n                           return;\r\n                        }\r\n                        if (get.is.banWords(button.input.value)) {\r\n                           var eventnode = ui.create.div('.menubutton.videotext.onlineEvt.pointerdiv', function () {\r\n                              var that = this;\r\n                              setTimeout(function () {\r\n                                 if (that.classList.contains('active')) {\r\n                                    if (confirm('确定要离开' + that.info.content + '？')) {\r\n                                       that.classList.remove('active');\r\n                                    }\r\n                                 }\r\n                                 else {\r\n                                    if (confirm('确定要加入' + that.info.content + '？')) {\r\n                                       that.classList.add('active');\r\n                                    }\r\n                                 }\r\n                              });\r\n                           }, uiintro.content, 4);\r\n                           var fakeinfo = {\r\n                              utc: utc,\r\n                              day: parseInt(daysselect.value),\r\n                              hour: parseInt(hoursselect.value),\r\n                              nickname: get.connectNickname(),\r\n                              avatar: lib.config.connect_avatar,\r\n                              content: button.input.value,\r\n                              create: game.onlineKey,\r\n                              members: [game.onlineKey],\r\n                           };\r\n                           eventnode.info = fakeinfo;\r\n                           ui.create.div('.title', fakeinfo.content, eventnode);\r\n                           var str;\r\n                           if (fakeinfo.day < currentDay) {\r\n                              str = '下周';\r\n                           }\r\n                           else {\r\n                              str = '周';\r\n                           }\r\n                           if (fakeinfo.day == 7) {\r\n                              str += '日'\r\n                           }\r\n                           else {\r\n                              str += get.cnNumber(fakeinfo.day, true);\r\n                           }\r\n                           str += ' ';\r\n                           var hour = fakeinfo.hour;\r\n                           if (hour <= 12) {\r\n                              if (hour <= 5) {\r\n                                 str += '凌晨';\r\n                              }\r\n                              else if (hour < 12) {\r\n                                 str += '上午';\r\n                              }\r\n                              else {\r\n                                 str += '中午';\r\n                              }\r\n                              str += fakeinfo.hour + '点';\r\n                           }\r\n                           else {\r\n                              if (hour <= 17) {\r\n                                 str += '下午';\r\n                              }\r\n                              else {\r\n                                 str += '晚上';\r\n                              }\r\n                              str += (fakeinfo.hour - 12) + '点';\r\n                           }\r\n                           ui.create.div('', '已有' + (fakeinfo.members.length) + '人加入', eventnode);\r\n                           ui.create.div('', '时间：' + str, eventnode);\r\n                           if (fakeinfo.members.contains(game.onlineKey)) {\r\n                              eventnode.classList.add('active');\r\n                           }\r\n                           button.input.value = '';\r\n                           return;\r\n                        }\r\n                        game.send('server', 'events', {\r\n                           utc: utc,\r\n                           day: parseInt(daysselect.value),\r\n                           hour: parseInt(hoursselect.value),\r\n                           nickname: get.connectNickname(),\r\n                           avatar: lib.config.connect_avatar,\r\n                           content: button.input.value\r\n                        }, game.onlineKey);\r\n                     };\r\n\r\n                     var num = 0;\r\n                     for (var i = 0; i < button.info.length; i++) {\r\n                        if (typeof button.info[i].creator == 'string' && button.info[i].creator != game.onlineKey && get.is.banWords(button.info[i].content)) continue;\r\n                        if (button.info[i].creator == game.onlineKey) {\r\n                           num++;\r\n                        }\r\n                        var eventnode = ui.create.div('.menubutton.videotext.onlineEvt.pointerdiv', function () {\r\n                           var that = this;\r\n                           if (typeof that.info.creator != 'string') return;\r\n                           setTimeout(function () {\r\n                              if (that.classList.contains('active')) {\r\n                                 if (confirm('确定要离开' + that.info.content + '？')) {\r\n                                    game.send('server', 'events', that.info.id, game.onlineKey, 'leave');\r\n                                 }\r\n                              }\r\n                              else {\r\n                                 if (confirm('确定要加入' + that.info.content + '？')) {\r\n                                    game.send('server', 'events', that.info.id, game.onlineKey, 'join');\r\n                                 }\r\n                              }\r\n                           });\r\n                        }, uiintro.content);\r\n                        eventnode.info = button.info[i];\r\n                        if (typeof button.info[i].creator == 'string') {\r\n                           ui.create.div('.title', button.info[i].content, eventnode);\r\n                           var str;\r\n                           if (button.info[i].day < currentDay) {\r\n                              str = '下周';\r\n                           }\r\n                           else {\r\n                              str = '周';\r\n                           }\r\n                           if (button.info[i].day == 7) {\r\n                              str += '日'\r\n                           }\r\n                           else {\r\n                              str += get.cnNumber(button.info[i].day, true);\r\n                           }\r\n                           str += ' ';\r\n                           var hour = button.info[i].hour;\r\n                           if (hour <= 12) {\r\n                              if (hour <= 5) {\r\n                                 str += '凌晨';\r\n                              }\r\n                              else if (hour < 12) {\r\n                                 str += '上午';\r\n                              }\r\n                              else {\r\n                                 str += '中午';\r\n                              }\r\n                              str += button.info[i].hour + '点';\r\n                           }\r\n                           else {\r\n                              if (hour <= 17) {\r\n                                 str += '下午';\r\n                              }\r\n                              else {\r\n                                 str += '晚上';\r\n                              }\r\n                              str += (button.info[i].hour - 12) + '点';\r\n                           }\r\n                           ui.create.div('', '创建者：' + (button.info[i].nickname), eventnode);\r\n                           //ui.create.div('','创建者：'+(button.info[i].nickname)+'<br>ID：'+button.info[i].creator,eventnode);\r\n                           ui.create.div('', '已有' + (button.info[i].members.length) + '人加入', eventnode);\r\n                           ui.create.div('', '时间：' + str, eventnode);\r\n                           if (button.info[i].members.contains(game.onlineKey)) {\r\n                              eventnode.classList.add('active');\r\n                           }\r\n                        }\r\n                        else {\r\n                           ui.create.div('.title', button.info[i].title, eventnode);\r\n                           ui.create.div('', button.info[i].content, eventnode);\r\n                           ui.create.div('', '创建者：' + (button.info[i].nickname), eventnode);\r\n                        }\r\n                     }\r\n                     if (num >= 3) {\r\n                        button.input.disabled = true;\r\n                        button.input.style.opacity = 0.6;\r\n                        hoursselect.disabled = true;\r\n                        daysselect.disabled = true;\r\n                        timeconfirm.disabled = true;\r\n                     }\r\n                  }\r\n                  uiintro.refresh();\r\n                  ui.window.appendChild(uiintro);\r\n                  _status.connectEventsCallback = function () {\r\n                     if (uiintro.parentNode == ui.window) {\r\n                        uiintro.refresh();\r\n                     }\r\n                  };\r\n               }\r\n            },\r\n            connectClients: function () {\r\n               if (this.info) {\r\n                  var button = this;\r\n                  var layer = ui.create.div('.poplayer', ui.window);\r\n                  var uiintro = ui.create.dialog('hidden', 'notouchscroll');\r\n                  this.classList.add('active');\r\n                  if (lib.config.touchscreen) {\r\n                     lib.setScroll(uiintro.contentContainer);\r\n                  }\r\n                  layer.listen(function () {\r\n                     if (this.clicked) {\r\n                        this.clicked = false;\r\n                        return;\r\n                     }\r\n                     button.classList.remove('active');\r\n                     uiintro.delete();\r\n                     this.delete();\r\n                  });\r\n                  uiintro.listen(function () {\r\n                     _status.clicked = true;\r\n                  });\r\n                  uiintro.style.zIndex = 21;\r\n                  uiintro.classList.add('popped');\r\n                  uiintro.classList.add('static');\r\n                  uiintro.classList.add('onlineclient');\r\n                  uiintro.style.width = '180px';\r\n                  uiintro.style.height = '300px';\r\n                  uiintro.style.left = 'auto';\r\n                  uiintro.style.right = '20px';\r\n                  uiintro.style.top = 'auto';\r\n                  uiintro.style.bottom = '75px';\r\n\r\n                  uiintro.refresh = function () {\r\n                     if (button.focused) return;\r\n                     uiintro.content.innerHTML = '';\r\n                     uiintro.addText('发状态');\r\n                     button.textnode = uiintro.content.lastChild.lastChild;\r\n                     uiintro.add('<input type=\"text\" style=\"width:calc(100% - 10px);resize: none;border: none;border-radius: 2px;box-shadow: rgba(0, 0, 0, 0.2) 0px 0px 0px 1px;margin-top: -2px;margin-bottom: 2px;\">');\r\n                     uiintro.content.lastChild.style.paddingTop = 0;\r\n                     button.input = uiintro.content.lastChild.lastChild;\r\n                     button.input.onfocus = function () {\r\n                        button.focused = true;\r\n                     }\r\n                     button.input.onblur = function () {\r\n                        delete button.focused;\r\n                     }\r\n                     if (button.interval) {\r\n                        button.input.disabled = true;\r\n                        button.input.style.opacity = 0.6;\r\n                        if (button.intervaltext) {\r\n                           button.textnode.innerHTML = button.intervaltext;\r\n                        }\r\n                     }\r\n                     button.input.onkeydown = function (e) {\r\n                        if (e.keyCode == 13 && !this.disabled) {\r\n                           game.send('server', 'status', this.value);\r\n                           this.blur();\r\n                           this.disabled = true;\r\n                           this.style.opacity = 0.6;\r\n                           button.textnode.innerHTML = '发状态(10)';\r\n                           button.intervaltext = button.textnode.innerHTML;\r\n                           var num = 10;\r\n                           var that = this;\r\n                           button.input.disabled = true;\r\n                           button.input.style.opacity = 0.6;\r\n                           this.value = '';\r\n                           button.interval = setInterval(function () {\r\n                              num--;\r\n                              if (num > 0) {\r\n                                 button.textnode.innerHTML = '发状态(' + num + ')';\r\n                                 button.intervaltext = button.textnode.innerHTML;\r\n                              }\r\n                              else {\r\n                                 button.textnode.innerHTML = '发状态';\r\n                                 button.input.disabled = false;\r\n                                 button.input.style.opacity = '';\r\n                                 clearInterval(button.interval);\r\n                                 delete button.interval;\r\n                                 delete button.intervaltext;\r\n                              }\r\n                           }, 1000);\r\n                        }\r\n                     }\r\n\r\n                     for (var i = 0; i < button.info.length; i++) {\r\n                        var node = ui.create.div('.menubutton.videonode.pointerdiv', uiintro.content);\r\n                        ui.create.div('.menubutton.videoavatar', node).setBackground(button.info[i][1] || 'KizunaAI', 'character');\r\n                        if (button.info[i][4] == game.wsid) {\r\n                           ui.create.div('.name', '<span class=\"thundertext thunderauto\">' + (button.info[i][0] || '无名玩家'), node); node.isme = true;\r\n                        }\r\n                        else if (button.info[i][2]) {\r\n                           ui.create.div('.name', (button.info[i][0] || '无名玩家'), node);\r\n                        }\r\n                        else {\r\n                           ui.create.div('.name', '<span style=\"opacity:0.6\">' + (button.info[i][0] || '无名玩家'), node);\r\n                        }\r\n                        //ui.create.div('.videostatus',node,button.info[i][5]);\r\n                        //node.classList.add('videonodestatus');\r\n                        if (button.info[i][3]) {\r\n                           ui.create.div('.videostatus', node, button.info[i][3].slice(0, 80));\r\n                           node.classList.add('videonodestatus')\r\n                        }\r\n                     }\r\n                  };\r\n\r\n                  uiintro.refresh();\r\n                  ui.window.appendChild(uiintro);\r\n                  _status.connectClientsCallback = function () {\r\n                     if (uiintro.parentNode == ui.window) {\r\n                        uiintro.refresh();\r\n                     }\r\n                  };\r\n               }\r\n            },\r\n            autoskin: function () {\r\n               if (!lib.config.change_skin) return;\r\n               var players = game.filterPlayer();\r\n               var change = function (player, num, callback) {\r\n                  if (num == '1') {\r\n                     ui.click.skin(player.node.avatar, player.name, callback);\r\n                  }\r\n                  else {\r\n                     ui.click.skin(player.node.avatar2, player.name2, callback);\r\n                  }\r\n               };\r\n               var finish = function () {\r\n                  if (lib.config.change_skin_auto != 'off') {\r\n                     _status.skintimeout = setTimeout(ui.click.autoskin, parseInt(lib.config.change_skin_auto));\r\n                  }\r\n               };\r\n               var autoskin = function () {\r\n                  if (players.length) {\r\n                     var player = players.randomRemove();\r\n                     var list = [];\r\n                     if (player.name && !player.isUnseen(0)) {\r\n                        list.push('1');\r\n                     }\r\n                     if (player.name2 && !player.isUnseen(1)) {\r\n                        list.push('2');\r\n                     }\r\n                     if (list.length) {\r\n                        change(player, list.randomRemove(), function (bool) {\r\n                           if (bool) {\r\n                              finish();\r\n                           }\r\n                           else if (list.length) {\r\n                              change(player, list[0], function (bool) {\r\n                                 if (bool) {\r\n                                    finish();\r\n                                 }\r\n                                 else {\r\n                                    autoskin();\r\n                                 }\r\n                              });\r\n                           }\r\n                           else {\r\n                              autoskin();\r\n                           }\r\n                        });\r\n                     }\r\n                     else {\r\n                        autoskin();\r\n                     }\r\n                  }\r\n               }\r\n               autoskin();\r\n            },\r\n            skin: function (avatar, name, callback) {\r\n               var num = 1;\r\n               if (name.indexOf('gz_') == 0) {\r\n                  name = name.slice(3);\r\n               }\r\n               if (lib.config.skin[name]) {\r\n                  num = lib.config.skin[name] + 1;\r\n               }\r\n               var fakeavatar = avatar.cloneNode(true);\r\n               var finish = function (bool) {\r\n                  var player = avatar.parentNode;\r\n                  if (bool) {\r\n                     fakeavatar.style.boxShadow = 'none';\r\n                     player.insertBefore(fakeavatar, avatar.nextSibling);\r\n                     setTimeout(function () {\r\n                        fakeavatar.delete();\r\n                     }, 100);\r\n                  }\r\n                  if (bool && lib.config.animation && !lib.config.low_performance) {\r\n                     player.$rare();\r\n                  }\r\n                  if (callback) {\r\n                     callback(bool);\r\n                  }\r\n               }\r\n               var img = new Image();\r\n               img.onload = function () {\r\n                  lib.config.skin[name] = num;\r\n                  game.saveConfig('skin', lib.config.skin);\r\n                  avatar.style.backgroundImage = 'url(\"' + img.src + '\")';\r\n                  finish(true);\r\n               }\r\n               img.onerror = function () {\r\n                  if (lib.config.skin[name]) {\r\n                     finish(true);\r\n                  }\r\n                  else {\r\n                     finish(false);\r\n                  }\r\n                  delete lib.config.skin[name];\r\n                  game.saveConfig('skin', lib.config.skin);\r\n                  avatar.setBackground(name, 'character');\r\n               }\r\n               img.src = lib.assetURL + 'image/skin/' + name + '/' + num + '.jpg';\r\n            },\r\n            touchpop: function (forced) {\r\n               if (lib.config.touchscreen || forced) {\r\n                  _status.touchpopping = true;\r\n                  clearTimeout(_status.touchpoppingtimeout);\r\n                  _status.touchpoppingtimeout = setTimeout(function () {\r\n                     _status.touchpopping = false;\r\n                  }, 600);\r\n               }\r\n            },\r\n            exit: function () {\r\n               if (game.servermode && lib.config.reconnect_info && _status.over) {\r\n                  if (!_status.roomtimeout) {\r\n                     lib.config.reconnect_info[2] = game.roomId;\r\n                     game.saveConfig('reconnect_info', lib.config.reconnect_info);\r\n                  }\r\n                  game.reload();\r\n                  return;\r\n               }\r\n               else {\r\n                  if (typeof game.roomId != 'string') {\r\n                     game.saveConfig('reconnect_info');\r\n                  }\r\n               }\r\n               if (!ui.exit || !ui.exit.stay) {\r\n                  if (lib.config.reconnect_info) {\r\n                     lib.config.reconnect_info.length = 1;\r\n                     game.saveConfig('reconnect_info', lib.config.reconnect_info);\r\n                  }\r\n                  game.saveConfig('tmp_user_roomId', undefined, false, function () {\r\n                     game.reload();\r\n                  });\r\n               }\r\n               else {\r\n                  game.reload();\r\n               }\r\n            },\r\n            shortcut: function (show) {\r\n               if (show === false) {\r\n                  ui.shortcut.classList.add('hidden');\r\n               }\r\n               else {\r\n                  ui.shortcut.classList.toggle('hidden');\r\n               }\r\n               if (ui.shortcut.classList.contains('hidden')) {\r\n                  ui.favmode.style.display = 'none';\r\n                  if (window.StatusBar && lib.config.show_statusbar_ios == 'auto') {\r\n                     document.body.classList.remove('statusbar');\r\n                     window.StatusBar.hide();\r\n                  }\r\n                  ui.window.classList.remove('shortcutpaused');\r\n               }\r\n               else {\r\n                  if (lib.config.show_favmode) {\r\n                     ui.favmode.style.display = '';\r\n                  }\r\n                  if (window.StatusBar && lib.config.show_statusbar_ios == 'auto') {\r\n                     document.body.classList.add('statusbar');\r\n                     window.StatusBar.overlaysWebView(true);\r\n                     window.StatusBar.backgroundColorByName('black');\r\n                     window.StatusBar.show();\r\n                  }\r\n                  if (_status.auto) {\r\n                     ui.shortcut.autobutton.classList.add('active');\r\n                  }\r\n                  else {\r\n                     ui.shortcut.autobutton.classList.remove('active');\r\n                  }\r\n                  ui.window.classList.add('shortcutpaused');\r\n               }\r\n            },\r\n            favouriteCharacter: function (e) {\r\n               if (typeof this.link == 'string') {\r\n                  if (this.innerHTML == '添加收藏') {\r\n                     this.innerHTML = '移除收藏';\r\n                     lib.config.favouriteCharacter.add(this.link);\r\n                  }\r\n                  else {\r\n                     this.innerHTML = '添加收藏';\r\n                     lib.config.favouriteCharacter.remove(this.link);\r\n                  }\r\n                  if (ui.favouriteCharacter) {\r\n                     if (lib.config.favouriteCharacter.contains(this.link)) {\r\n                        for (var i = 0; i < ui.favouriteCharacter.childElementCount; i++) {\r\n                           if (ui.favouriteCharacter.childNodes[i].link == this.link) {\r\n                              break;\r\n                           }\r\n                        }\r\n                        if (i == ui.favouriteCharacter.childElementCount) {\r\n                           ui.create.button(this.link, 'character', ui.favouriteCharacter).listen(function (e) {\r\n                              this._banning = 'offline';\r\n                              ui.click.touchpop();\r\n                              ui.click.intro.call(this, e);\r\n                              _status.clicked = false;\r\n                              delete this._banning;\r\n                           }).classList.add('noclick');\r\n                        }\r\n                     }\r\n                     else {\r\n                        for (var i = 0; i < ui.favouriteCharacter.childElementCount; i++) {\r\n                           if (ui.favouriteCharacter.childNodes[i].link == this.link) {\r\n                              ui.favouriteCharacter.childNodes[i].remove();\r\n                              break;\r\n                           }\r\n                        }\r\n                     }\r\n                     var shownode = false;\r\n                     for (var i = 0; i < lib.config.favouriteCharacter.length; i++) {\r\n                        var favname = lib.config.favouriteCharacter[i];\r\n                        if (lib.character[favname]) {\r\n                           shownode = true; break;\r\n                        }\r\n                     }\r\n                     if (shownode) {\r\n                        ui.favouriteCharacter.node.style.display = '';\r\n                     }\r\n                     else {\r\n                        ui.favouriteCharacter.node.style.display = 'none';\r\n                     }\r\n                  }\r\n                  game.saveConfig('favouriteCharacter', lib.config.favouriteCharacter);\r\n               }\r\n               e.stopPropagation();\r\n            },\r\n            buttonnameenter: function () {\r\n               if (this.buttonscrollinterval) {\r\n                  clearInterval(this.buttonscrollinterval);\r\n               }\r\n               var node = this.node.name;\r\n               if (node.offsetHeight < node.scrollHeight) {\r\n                  var that = this;\r\n                  var num = 40;\r\n                  that.buttonscrollinterval = setInterval(function () {\r\n                     if (node.scrollTop + node.offsetHeight >= node.scrollHeight) {\r\n                        clearInterval(that.buttonscrollinterval);\r\n                        delete that.buttonscrollinterval;\r\n                     }\r\n                     else {\r\n                        if (num > 0) {\r\n                           num--;\r\n                        }\r\n                        else {\r\n                           node.scrollTop += 2;\r\n                        }\r\n                     }\r\n                  }, 16);\r\n               }\r\n            },\r\n            buttonnameleave: function () {\r\n               if (this.buttonscrollinterval) {\r\n                  clearInterval(this.buttonscrollinterval);\r\n               }\r\n               var node = this.node.name;\r\n               if (node.offsetHeight < node.scrollHeight) {\r\n                  var that = this;\r\n                  that.buttonscrollinterval = setInterval(function () {\r\n                     if (node.scrollTop == 0) {\r\n                        clearInterval(that.buttonscrollinterval);\r\n                        delete that.buttonscrollinterval;\r\n                     }\r\n                     else {\r\n                        node.scrollTop -= 2;\r\n                     }\r\n                  }, 16);\r\n               }\r\n            },\r\n            dragtouchdialog: function (e) {\r\n               if (e.touches.length > 1 &&\r\n                  !this.classList.contains('popped') &&\r\n                  !this.classList.contains('fixed')) {\r\n                  _status.draggingtouchdialog = this;\r\n                  this._dragorigin = {\r\n                     clientX: e.touches[0].clientX,\r\n                     clientY: e.touches[0].clientY,\r\n                  };\r\n                  if (!this._dragtransform) {\r\n                     this._dragtransform = [0, 0];\r\n                  }\r\n                  this._dragorigintransform = this._dragtransform.slice(0);\r\n                  e.preventDefault();\r\n                  e.stopPropagation();\r\n               }\r\n            },\r\n            identity: function (e) {\r\n               if (_status.dragged) return;\r\n               _status.clicked = true;\r\n               if (!game.getIdentityList) return;\r\n               if (_status.video) return;\r\n               if (this.parentNode.forceShown) return;\r\n               if (_status.clickingidentity) {\r\n                  for (var i = 0; i < _status.clickingidentity[1].length; i++) {\r\n                     _status.clickingidentity[1][i].delete();\r\n                     _status.clickingidentity[1][i].style.transform = '';\r\n                  }\r\n                  if (_status.clickingidentity[0] == this.parentNode) {\r\n                     delete _status.clickingidentity;\r\n                     return;\r\n                  }\r\n               }\r\n               var list = game.getIdentityList(this.parentNode);\r\n               if (!list) return;\r\n               if (lib.config.mark_identity_style == 'click') {\r\n                  var list2 = [];\r\n                  for (var i in list) {\r\n                     list2.push(i);\r\n                  }\r\n                  list2.push(list2[0]);\r\n                  for (var i = 0; i < list2.length; i++) {\r\n                     if (this.firstChild.innerHTML == list[list2[i]]) {\r\n                        this.firstChild.innerHTML = list[list2[i + 1]];\r\n                        this.dataset.color = list2[i + 1];\r\n                        break;\r\n                     }\r\n                  }\r\n               }\r\n               else {\r\n                  if (get.mode() == 'guozhan') {\r\n                     list = { holo: '杏', nijisanji: '虹', vtuber: '企', clubs: '社' };\r\n                  }\r\n                  var list2 = get.copy(list);\r\n                  if (game.getIdentityList2) {\r\n                     game.getIdentityList2(list2);\r\n                  }\r\n                  var rect = this.parentNode.getBoundingClientRect();\r\n                  this._customintro = function (uiintro) {\r\n                     if (get.mode() == 'guozhan') {\r\n                        uiintro.clickintro = true;\r\n                     }\r\n                     else {\r\n                        uiintro.touchclose = true;\r\n                     }\r\n                     // if(lib.config.theme!='woodden'){\r\n                     uiintro.classList.add('woodbg');\r\n                     // }\r\n                     if (get.is.phoneLayout()) {\r\n                        uiintro.style.width = '100px';\r\n                     }\r\n                     else {\r\n                        uiintro.style.width = '85px';\r\n                     }\r\n                     var source = this.parentNode;\r\n                     for (var i in list) {\r\n                        var node = ui.create.div();\r\n                        node.classList.add('guessidentity');\r\n                        node.classList.add('pointerdiv');\r\n                        ui.create.div('.menubutton.large', list2[i], node);\r\n                        if (!get.is.phoneLayout()) {\r\n                           node.firstChild.style.fontSize = '24px';\r\n                           node.firstChild.style.lineHeight = '24px';\r\n                        }\r\n                        if (get.mode() == 'guozhan') {\r\n                           if (source._guozhanguess) {\r\n                              if (!source._guozhanguess.contains(i)) {\r\n                                 node.classList.add('transparent');\r\n                              }\r\n                           }\r\n                           node._source = source;\r\n                           node.listen(ui.click.identitycircle);\r\n                        }\r\n                        else {\r\n                           node.listen(function () {\r\n                              var info = this.link;\r\n                              info[0].firstChild.innerHTML = info[1];\r\n                              info[0].dataset.color = info[2];\r\n                              _status.clicked = false;\r\n                           });\r\n                        }\r\n\r\n                        node.link = [this, list[i], i];\r\n                        uiintro.add(node);\r\n                     }\r\n                  };\r\n                  ui.click.touchpop();\r\n                  ui.click.intro.call(this, {\r\n                     clientX: (rect.left + rect.width) * game.documentZoom,\r\n                     clientY: (rect.top) * game.documentZoom\r\n                  });\r\n                  // var nodes=[];\r\n                  // _status.clickingidentity=[this.parentNode,nodes];\r\n                  // var num=1;\r\n                  // var dy=30;\r\n                  // if(get.is.phoneLayout()){\r\n                  //     dy=45;\r\n                  // }\r\n                  // for(var i in list){\r\n                  //     if(this.firstChild.innerHTML!=list[i]){\r\n                  //         var node=ui.create.div('.identity.hidden.pointerdiv',this.parentNode,ui.click.identity2);\r\n                  //         ui.create.div(node).innerHTML=list[i];\r\n                  //         node.dataset.color=i;\r\n                  //         ui.refresh(node);\r\n                  //         node.show();\r\n                  //         var transstr='translateY('+((num++)*dy)+'px)';\r\n                  //         if(get.is.phoneLayout()){\r\n                  //             transstr+=' scale(1.3)';\r\n                  //         }\r\n                  //         if(get.is.newLayout()&&this.parentNode.classList.contains('linked')){\r\n                  //             transstr+=' rotate(90deg)';\r\n                  //         }\r\n                  //         node.style.transform=transstr;\r\n                  //         nodes.push(node);\r\n                  //     }\r\n                  // }\r\n               }\r\n            },\r\n            identity2: function () {\r\n               if (_status.clickingidentity) {\r\n                  _status.clicked = true;\r\n                  var player = _status.clickingidentity[0];\r\n                  var nodes = _status.clickingidentity[1];\r\n                  player.node.identity.dataset.color = this.dataset.color;\r\n                  player.node.identity.firstChild.innerHTML = this.firstChild.innerHTML;\r\n                  for (var i = 0; i < nodes.length; i++) {\r\n                     nodes[i].delete();\r\n                     nodes[i].style.transform = '';\r\n                  }\r\n                  delete _status.clickingidentity;\r\n               }\r\n            },\r\n            roundmenu: function () {\r\n               game.closeConnectMenu();\r\n               switch (lib.config.round_menu_func) {\r\n                  case 'system':\r\n                     game.closePopped();\r\n                     ui.system1.classList.add('shown');\r\n                     ui.system2.classList.add('shown');\r\n                     game.closeMenu();\r\n                     ui.click.shortcut();\r\n                     break;\r\n                  case 'menu':\r\n                     if (ui.click.configMenu) {\r\n                        game.closePopped();\r\n                        game.pause2();\r\n                        ui.click.configMenu();\r\n                        ui.system1.classList.remove('shown');\r\n                        ui.system2.classList.remove('shown');\r\n                     }\r\n                     break;\r\n                  case 'pause':\r\n                     ui.click.pause();\r\n                     break;\r\n                  case 'auto':\r\n                     ui.click.auto();\r\n                     break;\r\n               }\r\n               _status.clicked = true;\r\n            },\r\n            pausehistory: function () {\r\n               if (!lib.config.auto_popped_history) return;\r\n               if (!ui.sidebar.childNodes.length) return;\r\n               var uiintro = ui.create.dialog('hidden');\r\n               uiintro.style.maxHeight = '400px';\r\n               uiintro.add(ui.sidebar);\r\n               return uiintro;\r\n            },\r\n            pauseconfig: function () {\r\n               if (!lib.config.auto_popped_config) return;\r\n               if (get.is.phoneLayout()) return;\r\n               var uiintro = ui.create.dialog('hidden');\r\n               uiintro.listen(function (e) {\r\n                  e.stopPropagation();\r\n               });\r\n\r\n               var rows = Math.floor(lib.config.all.mode.length / 3);\r\n               uiintro.type = 'config';\r\n               var modes = lib.config.modeorder || lib.config.all.mode.slice(0);\r\n               for (var i = 0; i < modes.length; i++) {\r\n                  if (!lib.config.all.mode.contains(modes[i])) {\r\n                     modes.splice(i--, 1);\r\n                  }\r\n               }\r\n               for (var k = 0; k < rows; k++) {\r\n                  var node = ui.create.div('.newgame.pointernode');\r\n                  for (var i = 0; i < 3 && i + k * 3 < modes.length; i++) {\r\n                     var thismode = modes[i + k * 3];\r\n                     var div = ui.create.div(thismode == (_status.sourcemode || lib.config.mode) ? '.underlinenode.on' : '.underlinenode', node);\r\n                     div.innerHTML = lib.translate[thismode];\r\n                     div.link = thismode;\r\n                     div.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', function () {\r\n                        game.saveConfig('mode', this.link);\r\n                        localStorage.setItem(lib.configprefix + 'directstart', true);\r\n                        game.reload();\r\n                     });\r\n                  }\r\n                  uiintro.add(node);\r\n               }\r\n\r\n               return uiintro;\r\n            },\r\n            cardPileButton: function () {\r\n               var uiintro = ui.create.dialog('hidden');\r\n               uiintro.listen(function (e) {\r\n                  e.stopPropagation();\r\n               });\r\n               var num;\r\n               if (game.online) {\r\n                  num = _status.cardPileNum || 0;\r\n               }\r\n               else {\r\n                  num = ui.cardPile.childNodes.length;\r\n               }\r\n               uiintro.add('剩余 <span style=\"font-family:' + 'xinwei' + '\">' + num);\r\n\r\n               if (_status.connectMode) return uiintro;\r\n               uiintro.add('<div class=\"text center\">轮数 <span style=\"font-family:xinwei\">' + game.roundNumber + '</span>&nbsp;&nbsp;&nbsp;&nbsp;洗牌 <span style=\"font-family:xinwei\">' + game.shuffleNumber + '</div>');\r\n               uiintro.add('<div class=\"text center\">弃牌堆</div>');\r\n               if (ui.discardPile.childNodes.length) {\r\n                  var list = [];\r\n                  for (var i = 0; i < ui.discardPile.childNodes.length; i++) {\r\n                     list.unshift(ui.discardPile.childNodes[i]);\r\n                  }\r\n                  uiintro.addSmall([list, 'card']);\r\n               }\r\n               else {\r\n                  uiintro.add('<div class=\"text center\" style=\"padding-bottom:3px\">无</div>');\r\n               }\r\n               return uiintro;\r\n            },\r\n            chat: function () {\r\n               ui.system1.classList.add('shown');\r\n               ui.system2.classList.add('shown');\r\n\r\n               var uiintro = ui.create.dialog('hidden');\r\n               uiintro.listen(function (e) {\r\n                  e.stopPropagation();\r\n               });\r\n\r\n               var list = ui.create.div('.caption');\r\n               if (get.is.phoneLayout()) {\r\n                  list.style.maxHeight = '110px';\r\n               }\r\n               else {\r\n                  list.style.maxHeight = '220px';\r\n               }\r\n               list.style.overflow = 'scroll';\r\n               lib.setScroll(list);\r\n               uiintro.contentContainer.style.overflow = 'hidden';\r\n\r\n               var input;\r\n               var addEntry = function (info, clear) {\r\n                  if (list._chatempty) {\r\n                     list.innerHTML = '';\r\n                     delete list._chatempty;\r\n                  }\r\n                  var node = ui.create.div('.text.chat');\r\n                  node.innerHTML = info[0] + ': ' + info[1];\r\n                  list.appendChild(node);\r\n                  list.scrollTop = list.scrollHeight;\r\n                  uiintro.style.height = uiintro.content.scrollHeight + 'px';\r\n               }\r\n               _status.addChatEntry = addEntry;\r\n               _status.addChatEntry._origin = uiintro;\r\n               if (lib.chatHistory.length) {\r\n                  for (var i = 0; i < lib.chatHistory.length; i++) {\r\n                     addEntry(lib.chatHistory[i]);\r\n                  }\r\n               }\r\n               else {\r\n                  list._chatempty = true;\r\n                  list.appendChild(ui.create.div('.text.center', '无聊天记录'))\r\n               }\r\n               uiintro.add(list);\r\n               uiintro.style.height = uiintro.content.offsetHeight + 'px';\r\n               list.scrollTop = list.scrollHeight;\r\n\r\n               if (!_status.chatValue) _status.chatValue = '';\r\n               var node = uiintro.add('<input type=\"text\" value=\"' + _status.chatValue + '\">');\r\n               node.style.paddingTop = 0;\r\n               node.style.marginBottom = '16px';\r\n               input = node.firstChild;\r\n               input.style.width = 'calc(100% - 20px)';\r\n               input.onchange = function () {\r\n                  _status.chatValue = input.value;\r\n               }\r\n               input.onkeydown = function (e) {\r\n                  if (e.keyCode == 13 && input.value) {\r\n                     var player = game.me;\r\n                     var str = input.value;\r\n                     if (!player) {\r\n                        if (game.connectPlayers) {\r\n                           if (game.online) {\r\n                              for (var i = 0; i < game.connectPlayers.length; i++) {\r\n                                 if (game.connectPlayers[i].playerid == game.onlineID) {\r\n                                    player = game.connectPlayers[i]; break;\r\n                                 }\r\n                              }\r\n                           }\r\n                           else {\r\n                              player = game.connectPlayers[0];\r\n                           }\r\n                        }\r\n                     }\r\n                     if (!player) return;\r\n                     if (get.is.banWords(input.value)) {\r\n                        player.say(input.value);\r\n                        input.value = '';\r\n                        _status.chatValue = '';\r\n                     }\r\n                     else {\r\n                        if (game.online) {\r\n                           game.send('chat', game.onlineID, str);\r\n                        }\r\n                        else {\r\n                           lib.element.player.chat.call(player, str);\r\n                        }\r\n                        input.value = '';\r\n                        _status.chatValue = '';\r\n                     }\r\n                  }\r\n                  e.stopPropagation();\r\n               }\r\n               uiintro._onopen = function () {\r\n                  input.focus();\r\n                  list.scrollTop = list.scrollHeight;\r\n               };\r\n               uiintro._heightfixed = true;\r\n               var emotionTitle = ui.create.div('.text.center', '聊天表情', function () {\r\n                  if (emotionTitle.innerHTML == '快捷语音') {\r\n                     emotionTitle.innerHTML = '聊天表情';\r\n                     list2.remove();\r\n                     list3.remove();\r\n                     uiintro.add(list1);\r\n                     while (list2.childNodes.length) {\r\n                        list2.firstChild.remove();\r\n                     }\r\n                  }\r\n                  else {\r\n                     emotionTitle.innerHTML = '快捷语音';\r\n                     list1.remove();\r\n                     list2.remove();\r\n                     uiintro.add(list3);\r\n                  }\r\n               });\r\n               uiintro.add(emotionTitle);\r\n               var list1 = ui.create.div('');\r\n               if (get.is.phoneLayout()) {\r\n                  list1.style.height = '110px';\r\n               }\r\n               else {\r\n                  list1.style.height = '150px';\r\n               }\r\n               list1.style.overflow = 'scroll';\r\n               lib.setScroll(list1);\r\n               uiintro.add(list1);\r\n               uiintro.style.height = uiintro.content.scrollHeight + 'px';\r\n               var list2 = ui.create.div('');\r\n               if (get.is.phoneLayout()) {\r\n                  list2.style.height = '110px';\r\n               }\r\n               else {\r\n                  list2.style.height = '150px';\r\n               }\r\n               list2.style.overflow = 'scroll';\r\n               lib.setScroll(list2);\r\n               //uiintro.add(list2);\r\n               for (var i in lib.emotionList) {\r\n                  var emotionPack = ui.create.div('.card.fullskin', '<img src=\"' + lib.assetURL + 'image/emotion/' + i + '/1.gif\" width=\"50\" height=\"50\">', function () {\r\n                     emotionTitle.innerHTML = get.translation(this.pack);\r\n                     for (var j = 1; j <= lib.emotionList[this.pack]; j++) {\r\n                        var emotionButton = ui.create.div('.card.fullskin', '<img src=\"' + lib.assetURL + 'image/emotion/' + this.pack + '/' + j + '.gif\" width=\"50\" height=\"50\">', function () {\r\n                           var player = game.me;\r\n                           if (!player) {\r\n                              if (game.connectPlayers) {\r\n                                 if (game.online) {\r\n                                    for (var i = 0; i < game.connectPlayers.length; i++) {\r\n                                       if (game.connectPlayers[i].playerid == game.onlineID) {\r\n                                          player = game.connectPlayers[i]; break;\r\n                                       }\r\n                                    }\r\n                                 }\r\n                                 else {\r\n                                    player = game.connectPlayers[0];\r\n                                 }\r\n                              }\r\n                           }\r\n                           if (!player) return;\r\n                           if (game.online) {\r\n                              game.send('emotion', game.onlineID, this.pack, this.emotionID);\r\n                           }\r\n                           else {\r\n                              lib.element.player.emotion.apply(player, [this.pack, this.emotionID]);\r\n                           }\r\n                        });\r\n                        emotionButton.emotionID = j;\r\n                        emotionButton.pack = this.pack;\r\n                        emotionButton.style.height = '50px';\r\n                        emotionButton.style.width = '50px';\r\n                        list2.appendChild(emotionButton);\r\n                     }\r\n                     list1.remove();\r\n                     uiintro.add(list2);\r\n                  });\r\n                  emotionPack.pack = i;\r\n                  emotionPack.style.height = '50px';\r\n                  emotionPack.style.width = '50px';\r\n                  list1.appendChild(emotionPack);\r\n               }\r\n               list1.scrollTop = list1.scrollHeight;\r\n               uiintro.style.height = uiintro.content.scrollHeight + 'px';\r\n               var list3 = ui.create.div('.caption');\r\n               if (get.is.phoneLayout()) {\r\n                  list3.style.height = '110px';\r\n               }\r\n               else {\r\n                  list3.style.height = '150px';\r\n               }\r\n               list3.style.overflow = 'scroll';\r\n               lib.setScroll(list3);\r\n               for (var i = 0; i < lib.quickVoice.length; i++) {\r\n                  var node = ui.create.div('.text.chat', function () {\r\n                     var player = game.me;\r\n                     var str = this.innerHTML;\r\n                     if (!player) {\r\n                        if (game.connectPlayers) {\r\n                           if (game.online) {\r\n                              for (var i = 0; i < game.connectPlayers.length; i++) {\r\n                                 if (game.connectPlayers[i].playerid == game.onlineID) {\r\n                                    player = game.connectPlayers[i]; break;\r\n                                 }\r\n                              }\r\n                           }\r\n                           else {\r\n                              player = game.connectPlayers[0];\r\n                           }\r\n                        }\r\n                     }\r\n                     if (!player) return;\r\n                     if (game.online) {\r\n                        game.send('chat', game.onlineID, str);\r\n                     }\r\n                     else {\r\n                        lib.element.player.chat.call(player, str);\r\n                     }\r\n                  });\r\n                  node.innerHTML = lib.quickVoice[i];\r\n                  list3.appendChild(node);\r\n               }\r\n               list3.scrollTop = list1.scrollHeight;\r\n               return uiintro;\r\n            },\r\n            volumn: function () {\r\n               var uiintro = ui.create.dialog('hidden');\r\n               uiintro.listen(function (e) {\r\n                  e.stopPropagation();\r\n               });\r\n               uiintro.add('背景音乐');\r\n               var vol1 = ui.create.div('.volumn');\r\n               uiintro.add(vol1);\r\n               for (var i = 0; i < 8; i++) {\r\n                  var span = document.createElement('span');\r\n                  span.link = i + 1;\r\n                  span.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.volumn_background);\r\n                  if (i < lib.config.volumn_background) {\r\n                     span.innerHTML = '●';\r\n                  }\r\n                  else {\r\n                     span.innerHTML = '○';\r\n                  }\r\n                  vol1.appendChild(span);\r\n               }\r\n               uiintro.add('游戏音效');\r\n\r\n               var vol2 = ui.create.div('.volumn');\r\n               uiintro.add(vol2);\r\n               for (var i = 0; i < 8; i++) {\r\n                  var span = document.createElement('span');\r\n                  span.link = i + 1;\r\n                  span.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.volumn_audio);\r\n                  if (i < lib.config.volumn_audio) {\r\n                     span.innerHTML = '●';\r\n                  }\r\n                  else {\r\n                     span.innerHTML = '○';\r\n                  }\r\n                  vol2.appendChild(span);\r\n               }\r\n               uiintro.add(ui.create.div('.placeholder'));\r\n               return uiintro;\r\n            },\r\n            volumn_background: function (e) {\r\n               if (_status.dragged) return;\r\n               var volume = this.link;\r\n               if (volume === 1 && lib.config.volumn_background === 1) {\r\n                  volume = 0;\r\n               }\r\n               game.saveConfig('volumn_background', volume);\r\n               ui.backgroundMusic.volume = volume / 8;\r\n               for (var i = 0; i < 8; i++) {\r\n                  if (i < lib.config.volumn_background) {\r\n                     this.parentNode.childNodes[i].innerHTML = '●';\r\n                  }\r\n                  else {\r\n                     this.parentNode.childNodes[i].innerHTML = '○';\r\n                  }\r\n               }\r\n               e.stopPropagation();\r\n            },\r\n            volumn_audio: function (e) {\r\n               if (_status.dragged) return;\r\n               var volume = this.link;\r\n               if (volume === 1 && lib.config.volumn_audio === 1) {\r\n                  volume = 0;\r\n               }\r\n               game.saveConfig('volumn_audio', volume);\r\n               for (var i = 0; i < 8; i++) {\r\n                  if (i < lib.config.volumn_audio) {\r\n                     this.parentNode.childNodes[i].innerHTML = '●';\r\n                  }\r\n                  else {\r\n                     this.parentNode.childNodes[i].innerHTML = '○';\r\n                  }\r\n               }\r\n               e.stopPropagation();\r\n            },\r\n            hoverpopped: function () {\r\n               if (this._uiintro) {\r\n                  return;\r\n               }\r\n               if (!this._poppedfunc) {\r\n                  return;\r\n               }\r\n               ui.click.touchpop(this.forceclick);\r\n               var uiintro = this._poppedfunc();\r\n               if (!uiintro) return;\r\n               if (ui.currentpopped && ui.currentpopped._uiintro) {\r\n                  ui.currentpopped._uiintro.delete();\r\n                  delete ui.currentpopped._uiintro;\r\n               }\r\n               ui.currentpopped = this;\r\n               uiintro.classList.add('popped');\r\n               uiintro.classList.add('hoverdialog');\r\n               uiintro.classList.add('static');\r\n               this._uiintro = uiintro;\r\n\r\n               ui.window.appendChild(uiintro);\r\n               var width = this._poppedwidth || 330;\r\n               uiintro.style.width = width + 'px';\r\n               if (get.is.phoneLayout()) {\r\n                  width *= 1.3;\r\n               }\r\n\r\n               if (uiintro._heightfixed) {\r\n                  uiintro.style.height = uiintro.content.scrollHeight + 'px';\r\n               }\r\n               else {\r\n                  var height = this._poppedheight || uiintro.content.scrollHeight;\r\n                  var height2 = ui.window.offsetHeight - 260;\r\n                  if (get.is.phoneLayout()) {\r\n                     height2 = (ui.window.offsetHeight - 80) / 1.3;\r\n                  }\r\n                  uiintro.style.height = Math.min(height2, height) + 'px';\r\n               }\r\n               if (get.is.phoneLayout()) {\r\n                  uiintro.style.top = '70px';\r\n               }\r\n               else {\r\n                  uiintro.style.top = '50px';\r\n               }\r\n               var left = this.parentNode.offsetLeft + this.offsetLeft + this.offsetWidth / 2 - width / 2;\r\n               if (left < 10) {\r\n                  left = 10;\r\n               }\r\n               else if (left + width > ui.window.offsetWidth - 10) {\r\n                  left = ui.window.offsetWidth - width - 10;\r\n               }\r\n               uiintro.style.left = left + 'px';\r\n               uiintro._poppedorigin = this;\r\n               if (!lib.config.touchscreen) {\r\n                  uiintro.addEventListener('mouseleave', ui.click.leavehoverpopped);\r\n               }\r\n               ui.click.shortcut(false);\r\n               if (uiintro._onopen) {\r\n                  uiintro._onopen();\r\n               }\r\n               if (this._paused2 && !lib.config.touchscreen) {\r\n                  game.pause2();\r\n                  uiintro.classList.add('static');\r\n                  var layer = ui.create.div('.poplayer', ui.window);\r\n                  var clicklayer = function (e) {\r\n                     uiintro.delete();\r\n                     layer.remove();\r\n                     game.resume2();\r\n                     e.stopPropagation();\r\n                     return false;\r\n                  }\r\n                  uiintro.style.zIndex = 21;\r\n                  layer.onclick = clicklayer;\r\n                  layer.oncontextmenu = clicklayer;\r\n                  uiintro.addEventListener('mouseleave', clicklayer);\r\n                  uiintro.addEventListener('click', clicklayer);\r\n               }\r\n            },\r\n            hoverpopped_leave: function () {\r\n               this._poppedalready = false;\r\n            },\r\n            leavehoverpopped: function () {\r\n               if (_status.dragged) return;\r\n               if (this.classList.contains('noleave')) return;\r\n               this.delete();\r\n               var button = this._poppedorigin;\r\n\r\n               var uiintro = this;\r\n               setTimeout(function () {\r\n                  if (button._uiintro == uiintro) {\r\n                     delete button._uiintro;\r\n                  }\r\n               }, 500);\r\n\r\n            },\r\n            dierevive: function () {\r\n               if (game.me.isDead()) {\r\n                  game.me.revive(Math.max(1, game.me.maxHp));\r\n                  game.me.draw(2);\r\n               }\r\n               else {\r\n                  if (ui.revive) {\r\n                     ui.revive.close();\r\n                     delete ui.revive;\r\n                  }\r\n               }\r\n            },\r\n            dieswap: function () {\r\n               if (game.me.isDead()) {\r\n                  _status.clicked = true;\r\n                  var i, translation, intro, str;\r\n                  if (ui.intro) {\r\n                     ui.intro.close();\r\n                     if (ui.intro.source == 'dieswap') {\r\n                        delete ui.intro;\r\n                        ui.control.show();\r\n                        game.resume2();\r\n                        return;\r\n                     }\r\n                  }\r\n                  game.pause2();\r\n                  ui.control.hide();\r\n                  ui.intro = ui.create.dialog();\r\n                  ui.intro.source = 'dieswap';\r\n\r\n                  var players = [];\r\n                  for (var i = 0; i < game.players.length; i++) {\r\n                     if (game.players[i].isAlive()) {\r\n                        players.push(game.players[i]);\r\n                     }\r\n                  }\r\n                  ui.intro.add(players, true);\r\n                  var buttons = ui.intro.querySelectorAll('.button');\r\n                  for (var i = 0; i < buttons.length; i++) {\r\n                     buttons[i].addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.dieswap2);\r\n                  }\r\n               }\r\n               else {\r\n                  if (ui.swap) {\r\n                     ui.swap.close();\r\n                     delete ui.swap;\r\n                  }\r\n               }\r\n            },\r\n            dieswap2: function () {\r\n               if (_status.dragged) return;\r\n               game.swapPlayer(this.link);\r\n            },\r\n            touchconfirm: function () {\r\n               _status.touchconfirmed = true;\r\n               document.removeEventListener('touchstart', ui.click.touchconfirm);\r\n            },\r\n            windowtouchstart: function (e) {\r\n               if (window.inSplash) return;\r\n               if (e.touches[0] && lib.config.swipe && e.touches.length < 2) {\r\n                  _status._swipeorigin = {\r\n                     clientX: e.touches[0].clientX,\r\n                     clientY: e.touches[0].clientY,\r\n                     time: get.utc()\r\n                  }\r\n               }\r\n               // if(window.ForceTouch&&!_status.paused2&&!_status.forcetouchinterval&&lib.config.enable_pressure){\r\n               //     _status.forcetouchinterval=setInterval(ui.click.forcetouch,30);\r\n               // }\r\n            },\r\n            windowtouchmove: function (e) {\r\n               e.preventDefault();\r\n               if (window.inSplash) return;\r\n               if (_status.draggingroundmenu) {\r\n                  delete _status._swipeorigin;\r\n                  if (ui.roundmenu._dragorigin && ui.roundmenu._dragtransform && e.touches.length) {\r\n                     var translate = ui.roundmenu._dragtransform.slice(0);\r\n                     var dx = e.touches[0].clientX / game.documentZoom - ui.roundmenu._dragorigin.clientX / game.documentZoom;\r\n                     var dy = e.touches[0].clientY / game.documentZoom - ui.roundmenu._dragorigin.clientY / game.documentZoom;\r\n                     translate[0] += dx;\r\n                     translate[1] += dy;\r\n                     if (dx * dx + dy * dy > 100) {\r\n                        if (ui.roundmenu._resetTimeout) {\r\n                           clearTimeout(ui.roundmenu._resetTimeout);\r\n                           delete ui.roundmenu._resetTimeout;\r\n                        }\r\n                     }\r\n                     ui.roundmenu._dragtouches = e.touches[0];\r\n                     ui.click.checkroundtranslate(translate);\r\n                  }\r\n                  _status.clicked = true;\r\n               }\r\n               else if (_status.draggingtouchdialog) {\r\n                  delete _status._swipeorigin;\r\n                  if (_status.draggingtouchdialog._dragorigin && _status.draggingtouchdialog._dragtransform && e.touches.length) {\r\n                     var translate = _status.draggingtouchdialog._dragtransform.slice(0);\r\n                     var dx = e.touches[0].clientX / game.documentZoom - _status.draggingtouchdialog._dragorigin.clientX / game.documentZoom;\r\n                     var dy = e.touches[0].clientY / game.documentZoom - _status.draggingtouchdialog._dragorigin.clientY / game.documentZoom;\r\n                     translate[0] += dx;\r\n                     translate[1] += dy;\r\n                     _status.draggingtouchdialog._dragtouches = e.touches[0];\r\n                     ui.click.checkdialogtranslate(translate, _status.draggingtouchdialog);\r\n                  }\r\n                  _status.clicked = true;\r\n               }\r\n               else if (_status._swipeorigin && e.touches[0]) {\r\n                  _status._swipeorigin.touches = e.touches[0];\r\n               }\r\n\r\n               if (_status.mousedragging && e.touches.length) {\r\n                  e.preventDefault();\r\n                  var item = document.elementFromPoint(e.touches[0].clientX, e.touches[0].clientY);\r\n                  if (game.chess && ui.selected.cards.length) {\r\n                     var itemtype = get.itemtype(item);\r\n                     if (itemtype != 'card' && itemtype != 'button') {\r\n                        var ex = e.touches[0].clientX / game.documentZoom - ui.arena.offsetLeft;\r\n                        var ey = e.touches[0].clientY / game.documentZoom - ui.arena.offsetTop;\r\n                        for (var i = 0; i < game.players.length; i++) {\r\n                           var left = -ui.chessContainer.chessLeft + ui.chess.offsetLeft + game.players[i].getLeft();\r\n                           var top = -ui.chessContainer.chessTop + ui.chess.offsetTop + game.players[i].getTop();\r\n                           var width = game.players[i].offsetWidth;\r\n                           var height = game.players[i].offsetHeight;\r\n                           if (ex > left && ex < left + width && ey > top && ey < top + height) {\r\n                              item = game.players[i];\r\n                              break;\r\n                           }\r\n                        }\r\n                     }\r\n                  }\r\n                  while (item) {\r\n                     if (lib.config.enable_touchdragline && _status.mouseleft && !game.chess) {\r\n                        ui.canvas.width = ui.arena.offsetWidth;\r\n                        ui.canvas.height = ui.arena.offsetHeight;\r\n                        var ctx = ui.ctx;\r\n                        ctx.shadowBlur = 5;\r\n                        ctx.shadowColor = 'rgba(0,0,0,0.3)';\r\n                        ctx.strokeStyle = 'white';\r\n                        ctx.lineWidth = 3;\r\n                        ctx.setLineDash([8, 2]);\r\n\r\n                        ctx.beginPath();\r\n\r\n                        ctx.moveTo(_status.mousedragging.clientX / game.documentZoom - ui.arena.offsetLeft, _status.mousedragging.clientY / game.documentZoom - ui.arena.offsetTop);\r\n\r\n                        if (_status.multitarget) {\r\n                           for (var i = 0; i < _status.lastdragchange.length; i++) {\r\n                              var exy = _status.lastdragchange[i]._lastdragchange;\r\n                              ctx.lineTo(exy[0], exy[1]);\r\n                           }\r\n                        }\r\n                        if (!_status.selectionfull) {\r\n                           ctx.lineTo(e.touches[0].clientX / game.documentZoom - ui.arena.offsetLeft, e.touches[0].clientY / game.documentZoom - ui.arena.offsetTop);\r\n                        }\r\n                        ctx.stroke();\r\n                        if (!_status.multitarget) {\r\n                           for (var i = 0; i < _status.lastdragchange.length; i++) {\r\n                              ctx.moveTo(_status.mousedragging.clientX / game.documentZoom - ui.arena.offsetLeft, _status.mousedragging.clientY / game.documentZoom - ui.arena.offsetTop);\r\n                              var exy = _status.lastdragchange[i]._lastdragchange;\r\n                              ctx.lineTo(exy[0], exy[1]);\r\n                              ctx.stroke();\r\n                           }\r\n                        }\r\n                     }\r\n\r\n                     if (item == _status.mousedragorigin) {\r\n                        if (_status.mouseleft) {\r\n                           _status.mousedragging = null;\r\n                           _status.mousedragorigin = null;\r\n                           _status.clicked = false;\r\n                           game.uncheck();\r\n                           game.check();\r\n                           _status.clicked = true;\r\n                        }\r\n                        return;\r\n                     }\r\n                     var itemtype = get.itemtype(item);\r\n                     if (itemtype == 'card' || itemtype == 'button' || itemtype == 'player') {\r\n                        _status.mouseleft = true;\r\n                        if (ui.selected.cards.length) {\r\n                           ui.selected.cards[0].updateTransform(true, 100);\r\n                        }\r\n                        var ex = e.touches[0].clientX / game.documentZoom - ui.arena.offsetLeft;\r\n                        var ey = e.touches[0].clientY / game.documentZoom - ui.arena.offsetTop;\r\n                        var exx = ex, eyy = ey;\r\n                        if (game.chess) {\r\n                           ex -= -ui.chessContainer.chessLeft + ui.chess.offsetLeft;\r\n                           ey -= -ui.chessContainer.chessTop + ui.chess.offsetTop;\r\n                        }\r\n                        if (itemtype != 'player' || game.chess || (ex > item.offsetLeft && ex < item.offsetLeft + item.offsetWidth &&\r\n                           ey > item.offsetTop && ey < item.offsetTop + item.offsetHeight)) {\r\n                           var targetfixed = false;\r\n                           if (itemtype == 'player') {\r\n                              if (get.select(_status.event.selectTarget)[1] == -1) {\r\n                                 targetfixed = true;\r\n                              }\r\n                           }\r\n                           if (!targetfixed && item.classList.contains('selectable') && _status.dragstatuschanged != item) {\r\n                              _status.mouseleft = true;\r\n                              _status.dragstatuschanged = item;\r\n                              _status.clicked = false;\r\n                              _status.dragged = false;\r\n                              var notbefore = itemtype == 'player' && !item.classList.contains('selected');\r\n                              ui.click[itemtype].call(item);\r\n                              if (item.classList.contains('selected')) {\r\n                                 if (notbefore) {\r\n                                    _status.lastdragchange.push(item);\r\n                                    item._lastdragchange = [exx, eyy];\r\n                                    if (lib.falseitem) {\r\n                                       var from = [_status.mousedragging.clientX / game.documentZoom - ui.arena.offsetLeft, _status.mousedragging.clientY / game.documentZoom - ui.arena.offsetTop];\r\n                                       var to = [exx, eyy];\r\n                                       var node = ui.create.div('.linexy.hidden');\r\n                                       node.style.left = from[0] + 'px';\r\n                                       node.style.top = from[1] + 'px';\r\n                                       node.style.transitionDuration = '0.3s';\r\n                                       node.style.backgroundColor = 'white';\r\n                                       var dy = to[1] - from[1];\r\n                                       var dx = to[0] - from[0];\r\n                                       var deg = Math.atan(Math.abs(dy) / Math.abs(dx)) / Math.PI * 180;\r\n                                       if (dx >= 0) {\r\n                                          if (dy <= 0) {\r\n                                             deg += 90;\r\n                                          }\r\n                                          else {\r\n                                             deg = 90 - deg;\r\n                                          }\r\n                                       }\r\n                                       else {\r\n                                          if (dy <= 0) {\r\n                                             deg = 270 - deg;\r\n                                          }\r\n                                          else {\r\n                                             deg += 270;\r\n                                          }\r\n                                       }\r\n                                       node.style.transform = 'rotate(' + (-deg) + 'deg) scaleY(0)';\r\n                                       node.style.height = get.xyDistance(from, to) + 'px';\r\n                                       if (game.chess) {\r\n                                          ui.chess.appendChild(node);\r\n                                       }\r\n                                       else {\r\n                                          ui.arena.appendChild(node);\r\n                                       }\r\n                                       ui.refresh(node);\r\n                                       node.show();\r\n                                       node.style.transform = 'rotate(' + (-deg) + 'deg) scaleY(1)';\r\n                                       ui.touchlines.push(node);\r\n                                       node._origin = item;\r\n                                    }\r\n                                 }\r\n                              }\r\n                              else {\r\n                                 _status.lastdragchange.remove(item);\r\n                                 for (var i = 0; i < ui.touchlines.length; i++) {\r\n                                    if (ui.touchlines[i]._origin == item) {\r\n                                       ui.touchlines[i].delete();\r\n                                       ui.touchlines.splice(i--, 1);\r\n                                    }\r\n                                 }\r\n                              }\r\n                              _status.selectionfull = true;\r\n                              if (_status.event.filterButton && ui.selected.buttons.length < get.select(_status.event.selectButton)[1]) {\r\n                                 _status.selectionfull = false;\r\n                              }\r\n                              else if (_status.event.filterCard && ui.selected.cards.length < get.select(_status.event.selectCard)[1]) {\r\n                                 _status.selectionfull = false;\r\n                              }\r\n                              else if (_status.event.filterTarget && ui.selected.targets.length < get.select(_status.event.selectTarget)[1]) {\r\n                                 _status.selectionfull = false;\r\n                              }\r\n                           }\r\n                        }\r\n                        return;\r\n                     }\r\n                     item = item.parentNode;\r\n                  }\r\n                  _status.mouseleft = true;\r\n                  _status.dragstatuschanged = null;\r\n               }\r\n            },\r\n            windowtouchend: function (e) {\r\n               delete _status.force;\r\n               // if(_status.forcetouchinterval){\r\n               //     clearInterval(_status.forcetouchinterval);\r\n               //     delete _status.forcetouchinterval;\r\n               // }\r\n               if (window.inSplash) return;\r\n               if (e.touches.length == 1 && !_status.dragged && !_status.draggingtouchdialog) {\r\n                  ui.click.pause();\r\n               }\r\n               if (_status.draggingroundmenu) {\r\n                  delete _status._swipeorigin;\r\n                  if (ui.roundmenu._resetTimeout) {\r\n                     clearTimeout(ui.roundmenu._resetTimeout);\r\n                     delete ui.roundmenu._resetTimeout;\r\n                  }\r\n                  var translate;\r\n                  if (ui.roundmenu._dragorigin && ui.roundmenu._dragtransform && ui.roundmenu._dragtouches) {\r\n                     var dx = ui.roundmenu._dragtouches.clientX / game.documentZoom - ui.roundmenu._dragorigin.clientX / game.documentZoom;\r\n                     var dy = ui.roundmenu._dragtouches.clientY / game.documentZoom - ui.roundmenu._dragorigin.clientY / game.documentZoom;\r\n                     if (dx * dx + dy * dy < 1000) {\r\n                        ui.click.roundmenu();\r\n                        ui.roundmenu._dragtransform = ui.roundmenu._dragorigintransform;\r\n                        translate = ui.roundmenu._dragtransform;\r\n                        ui.roundmenu.style.transform = 'translate(' + translate[0] + 'px,' + translate[1] + 'px)';\r\n                     }\r\n                     else {\r\n                        translate = ui.roundmenu._dragtransform;\r\n                        translate[0] += dx;\r\n                        translate[1] += dy;\r\n                        ui.click.checkroundtranslate();\r\n                     }\r\n                     delete ui.roundmenu._dragorigin;\r\n                  }\r\n                  else {\r\n                     ui.click.roundmenu();\r\n                  }\r\n                  _status.clicked = false;\r\n                  game.saveConfig('roundmenu_transform', translate);\r\n                  delete _status.draggingroundmenu;\r\n               }\r\n               else if (_status.draggingtouchdialog) {\r\n                  delete _status._swipeorigin;\r\n                  var translate;\r\n                  if (_status.draggingtouchdialog._dragorigin && _status.draggingtouchdialog._dragtransform && _status.draggingtouchdialog._dragtouches) {\r\n                     var dx = _status.draggingtouchdialog._dragtouches.clientX / game.documentZoom - _status.draggingtouchdialog._dragorigin.clientX / game.documentZoom;\r\n                     var dy = _status.draggingtouchdialog._dragtouches.clientY / game.documentZoom - _status.draggingtouchdialog._dragorigin.clientY / game.documentZoom;\r\n                     translate = _status.draggingtouchdialog._dragtransform;\r\n                     translate[0] += dx;\r\n                     translate[1] += dy;\r\n                     ui.click.checkdialogtranslate(null, _status.draggingtouchdialog);\r\n\r\n                     delete _status.draggingtouchdialog._dragorigin;\r\n                  }\r\n                  _status.clicked = false;\r\n                  game.saveConfig('dialog_transform', translate);\r\n                  delete _status.draggingtouchdialog;\r\n                  _status.justdragged = true;\r\n                  setTimeout(function () {\r\n                     _status.justdragged = false;\r\n                  }, 500);\r\n               }\r\n               else if (_status._swipeorigin && !_status.paused2 && !_status.mousedragging && _status._swipeorigin.touches && !_status.filterCharacter) {\r\n                  if (get.utc() - _status._swipeorigin.time < 500) {\r\n                     var dx = _status._swipeorigin.touches.clientX / game.documentZoom - _status._swipeorigin.clientX / game.documentZoom;\r\n                     var dy = _status._swipeorigin.touches.clientY / game.documentZoom - _status._swipeorigin.clientY / game.documentZoom;\r\n                     var goswipe = function (action) {\r\n                        game.closeConnectMenu();\r\n                        switch (action) {\r\n                           case 'system':\r\n                              game.closePopped();\r\n                              ui.system1.classList.add('shown');\r\n                              ui.system2.classList.add('shown');\r\n                              game.closeMenu();\r\n                              ui.click.shortcut();\r\n                              break;\r\n                           case 'menu':\r\n                              if (ui.click.configMenu) {\r\n                                 game.closePopped();\r\n                                 game.pause2();\r\n                                 ui.click.configMenu();\r\n                                 ui.system1.classList.remove('shown');\r\n                                 ui.system2.classList.remove('shown');\r\n                              }\r\n                              break;\r\n                           case 'pause':\r\n                              ui.click.pause();\r\n                              break;\r\n                           case 'auto':\r\n                              ui.click.auto();\r\n                              break;\r\n                           case 'chat':\r\n                              game.closeMenu();\r\n                              if (ui.chatButton) {\r\n                                 ui.click.hoverpopped.call(ui.chatButton);\r\n                              }\r\n                              break;\r\n                        }\r\n                     }\r\n                     if (Math.abs(dx) < 100) {\r\n                        if (dy < -200) {\r\n                           goswipe(lib.config.swipe_up);\r\n                        }\r\n                        else if (dy > 200) {\r\n                           goswipe(lib.config.swipe_down);\r\n                        }\r\n                     }\r\n                     else if (Math.abs(dy) < 100) {\r\n                        if (dx < -200) {\r\n                           goswipe(lib.config.swipe_left);\r\n                        }\r\n                        else if (dx > 200) {\r\n                           goswipe(lib.config.swipe_right);\r\n                        }\r\n                     }\r\n                  }\r\n               }\r\n               var tmpflag = false;\r\n               _status.mousedown = false;\r\n               _status.clicked = false;\r\n               if (_status.mousedragging && _status.mouseleft) {\r\n                  if (game.check()) {\r\n                     if (ui.confirm) {\r\n                        ui.confirm.close();\r\n                     }\r\n                     ui.click.ok();\r\n                     ui.canvas.width = ui.arena.offsetWidth;\r\n                     ui.canvas.height = ui.arena.offsetHeight;\r\n                  }\r\n                  else {\r\n                     game.uncheck();\r\n                     game.check();\r\n                  }\r\n               }\r\n               else if (_status.mousedragging && _status.mousedragorigin) {\r\n                  tmpflag = _status.mousedragorigin;\r\n               }\r\n               _status.lastdragchange.length = 0;\r\n               _status.mousedragging = null;\r\n               _status.mouseleft = false;\r\n               _status.mousedragorigin = null;\r\n               _status.dragstatuschanged = false;\r\n               while (ui.touchlines.length) {\r\n                  ui.touchlines.shift().delete();\r\n               }\r\n               if (tmpflag) {\r\n                  game.check();\r\n               }\r\n               _status.dragged = false;\r\n               _status.clicked = false;\r\n            },\r\n            checkroundtranslate: function (translate) {\r\n               var translate = translate || ui.roundmenu._dragtransform;\r\n               if (translate[1] + ui.roundmenu._position[1] + 50 + ui.arena.offsetTop > ui.window.offsetHeight) {\r\n                  translate[1] = ui.window.offsetHeight - (ui.roundmenu._position[1] + 50) - ui.arena.offsetTop;\r\n               }\r\n               else if (translate[1] + ui.roundmenu._position[1] + ui.arena.offsetTop < 0) {\r\n                  translate[1] = -ui.roundmenu._position[1] - ui.arena.offsetTop;\r\n               }\r\n               if (translate[0] + ui.roundmenu._position[0] + 50 + ui.arena.offsetLeft > ui.window.offsetWidth) {\r\n                  translate[0] = ui.window.offsetWidth - (ui.roundmenu._position[0] + 50) - ui.arena.offsetLeft;\r\n               }\r\n               else if (translate[0] + ui.roundmenu._position[0] + ui.arena.offsetLeft < 0) {\r\n                  translate[0] = -ui.roundmenu._position[0] - ui.arena.offsetLeft;\r\n               }\r\n               ui.roundmenu.style.transform = 'translate(' + translate[0] + 'px,' + translate[1] + 'px)';\r\n            },\r\n            checkdialogtranslate: function (translate, dialog) {\r\n               var translate = translate || dialog._dragtransform;\r\n               if (Math.sqrt(translate[0] * translate[0] + translate[1] * translate[1]) < 10) {\r\n                  translate[0] = 0;\r\n                  translate[1] = 0;\r\n               }\r\n               dialog.style.transform = 'translate(' + translate[0] + 'px,' + translate[1] + 'px)';\r\n            },\r\n            windowmousewheel: function (e) {\r\n               _status.tempunpopup = e;\r\n            },\r\n            windowmousemove: function (e) {\r\n               if (window.inSplash) return;\r\n               if (_status.tempunpopup) {\r\n                  if (get.evtDistance(_status.tempunpopup, e) > 5) {\r\n                     delete _status.tempunpopup;\r\n                  }\r\n               }\r\n               if (e.button == 2) return;\r\n               var dialogs = document.querySelectorAll('#window>.dialog.popped:not(.static)');\r\n               for (var i = 0; i < dialogs.length; i++) {\r\n                  dialogs[i].delete();\r\n               }\r\n               var node = _status.currentmouseenter;\r\n               var sourceitem = document.elementFromPoint(e.clientX, e.clientY);\r\n               if (game.chess && ui.selected.cards.length) {\r\n                  var itemtype = get.itemtype(sourceitem);\r\n                  if (itemtype != 'card' && itemtype != 'button') {\r\n                     for (var i = 0; i < game.players.length; i++) {\r\n                        var ex = e.clientX / game.documentZoom - ui.arena.offsetLeft;\r\n                        var ey = e.clientY / game.documentZoom - ui.arena.offsetTop;\r\n                        var left = -ui.chessContainer.chessLeft + ui.chess.offsetLeft + game.players[i].getLeft();\r\n                        var top = -ui.chessContainer.chessTop + ui.chess.offsetTop + game.players[i].getTop();\r\n                        var width = game.players[i].offsetWidth;\r\n                        var height = game.players[i].offsetHeight;\r\n                        if (ex > left && ex < left + width && ey > top && ey < top + height) {\r\n                           sourceitem = game.players[i];\r\n                           break;\r\n                        }\r\n                     }\r\n                  }\r\n               }\r\n               var item = sourceitem;\r\n               if (_status.mousedragging) {\r\n                  e.preventDefault();\r\n                  if (lib.config.enable_dragline) {\r\n                     // var i=0;\r\n                     // var startPoint0=[_status.mousedragging.clientX/game.documentZoom-ui.arena.offsetLeft,_status.mousedragging.clientY/game.documentZoom-ui.arena.offsetTop];\r\n                     // var startPoint=startPoint0;\r\n                     // var endPoint;\r\n                     // if(_status.multitarget){\r\n                     //     for(;i<_status.lastdragchange.length;i++){\r\n                     //         var exy=_status.lastdragchange[i]._lastdragchange;\r\n                     //         endPoint=[exy[0],exy[1]];\r\n                     //         _status.dragline[i]=game.linexy(startPoint.concat(endPoint),'drag',_status.dragline[i]);\r\n                     //         startPoint=endPoint;\r\n                     //     }\r\n                     // }\r\n                     // if(!_status.selectionfull){\r\n                     //     endPoint=[e.clientX/game.documentZoom-ui.arena.offsetLeft,e.clientY/game.documentZoom-ui.arena.offsetTop];\r\n                     //     _status.dragline[i]=game.linexy(startPoint.concat(endPoint),'drag',_status.dragline[i]);\r\n                     //     startPoint=endPoint;\r\n                     //     i++;\r\n                     // }\r\n                     // if(!_status.multitarget){\r\n                     //     for(var j=0;j<_status.lastdragchange.length;j++){\r\n                     //         i+=j;\r\n                     //         var exy=_status.lastdragchange[j]._lastdragchange;\r\n                     //         _status.dragline[i]=game.linexy(startPoint0.concat([exy[0],exy[1]]),'drag',_status.dragline[i]);\r\n                     //     }\r\n                     // }\r\n                     // var remained=_status.dragline.splice(i+1);\r\n                     // for(var j=0;j<remained.length;j++){\r\n                     //     if(remained[j]) remained[j].remove();\r\n                     // }\r\n\r\n                     ui.canvas.width = ui.arena.offsetWidth;\r\n                     ui.canvas.height = ui.arena.offsetHeight;\r\n                     var ctx = ui.ctx;\r\n                     ctx.shadowBlur = 5;\r\n                     ctx.shadowColor = 'rgba(0,0,0,0.3)';\r\n                     ctx.strokeStyle = 'white';\r\n                     ctx.lineWidth = 3;\r\n                     ctx.setLineDash([8, 2]);\r\n\r\n                     ctx.beginPath();\r\n\r\n                     ctx.moveTo(_status.mousedragging.clientX / game.documentZoom - ui.arena.offsetLeft, _status.mousedragging.clientY / game.documentZoom - ui.arena.offsetTop);\r\n                     if (_status.multitarget) {\r\n                        for (var i = 0; i < _status.lastdragchange.length; i++) {\r\n                           var exy = _status.lastdragchange[i]._lastdragchange;\r\n                           ctx.lineTo(exy[0], exy[1]);\r\n                        }\r\n                     }\r\n                     if (!_status.selectionfull) {\r\n                        ctx.lineTo(e.clientX / game.documentZoom - ui.arena.offsetLeft, e.clientY / game.documentZoom - ui.arena.offsetTop);\r\n                     }\r\n                     ctx.stroke();\r\n                     if (!_status.multitarget) {\r\n                        for (var i = 0; i < _status.lastdragchange.length; i++) {\r\n                           ctx.moveTo(_status.mousedragging.clientX / game.documentZoom - ui.arena.offsetLeft, _status.mousedragging.clientY / game.documentZoom - ui.arena.offsetTop);\r\n                           var exy = _status.lastdragchange[i]._lastdragchange;\r\n                           ctx.lineTo(exy[0], exy[1]);\r\n                           ctx.stroke();\r\n                        }\r\n                     }\r\n                  }\r\n\r\n                  while (item) {\r\n                     if (item == _status.mousedragorigin) {\r\n                        if (_status.mouseleft) {\r\n                           _status.mousedragging = null;\r\n                           _status.mousedragorigin = null;\r\n                           _status.clicked = false;\r\n                           if (_status.event.type == 'phase' && !_status.event.skill && ui.confirm) {\r\n                              ui.confirm.classList.add('removing');\r\n                           }\r\n                           game.uncheck();\r\n                           game.check();\r\n                           _status.clicked = true;\r\n                        }\r\n                        return;\r\n                     }\r\n                     var itemtype = get.itemtype(item);\r\n                     if (itemtype == 'card' || itemtype == 'button' || itemtype == 'player') {\r\n                        _status.mouseleft = true;\r\n                        if (ui.selected.cards.length) {\r\n                           ui.selected.cards[0].updateTransform(true, 100);\r\n                        }\r\n                        var ex = e.clientX / game.documentZoom - ui.arena.offsetLeft;\r\n                        var ey = e.clientY / game.documentZoom - ui.arena.offsetTop;\r\n                        var exx = ex, eyy = ey;\r\n                        if (game.chess) {\r\n                           ex -= -ui.chessContainer.chessLeft + ui.chess.offsetLeft;\r\n                           ey -= -ui.chessContainer.chessTop + ui.chess.offsetTop;\r\n                        }\r\n                        if (itemtype != 'player' || game.chess || (ex > item.offsetLeft && ex < item.offsetLeft + item.offsetWidth &&\r\n                           ey > item.offsetTop && ey < item.offsetTop + item.offsetHeight)) {\r\n                           var targetfixed = false;\r\n                           if (itemtype == 'player') {\r\n                              if (get.select(_status.event.selectTarget)[1] == -1) {\r\n                                 targetfixed = true;\r\n                              }\r\n                           }\r\n                           if (!targetfixed && item.classList.contains('selectable') && _status.dragstatuschanged != item) {\r\n                              _status.mouseleft = true;\r\n                              _status.dragstatuschanged = item;\r\n                              _status.clicked = false;\r\n                              var notbefore = itemtype == 'player' && !item.classList.contains('selected');\r\n                              ui.click[itemtype].call(item);\r\n                              if (item.classList.contains('selected')) {\r\n                                 if (notbefore) {\r\n                                    _status.lastdragchange.push(item);\r\n                                    item._lastdragchange = [exx, eyy];\r\n                                 }\r\n                              }\r\n                              else {\r\n                                 _status.lastdragchange.remove(item);\r\n                              }\r\n                              _status.selectionfull = true;\r\n                              if (_status.event.filterButton && ui.selected.buttons.length < get.select(_status.event.selectButton)[1]) {\r\n                                 _status.selectionfull = false;\r\n                              }\r\n                              else if (_status.event.filterCard && ui.selected.cards.length < get.select(_status.event.selectCard)[1]) {\r\n                                 _status.selectionfull = false;\r\n                              }\r\n                              else if (_status.event.filterTarget && ui.selected.targets.length < get.select(_status.event.selectTarget)[1]) {\r\n                                 _status.selectionfull = false;\r\n                              }\r\n                           }\r\n                        }\r\n                        return;\r\n                     }\r\n                     item = item.parentNode;\r\n                  }\r\n                  if (!_status.mouseleft) {\r\n                     _status.mouseleft = true;\r\n                     game.check();\r\n                     for (var i = 0; i < ui.selected.cards.length; i++) {\r\n                        ui.selected.cards[i].updateTransform(true);\r\n                     }\r\n                  }\r\n                  _status.dragstatuschanged = null;\r\n               }\r\n               else {\r\n                  while (item) {\r\n                     if (item == node && !node._mouseentercreated) {\r\n                        ui.click.mouseentercancel();\r\n                        var hoveration;\r\n                        if (typeof node._hoveration == 'number') {\r\n                           hoveration = node._hoveration;\r\n                        }\r\n                        else {\r\n                           hoveration = parseInt(lib.config.hoveration);\r\n                           if (node.classList.contains('button') ||\r\n                              (node.parentNode && node.parentNode.parentNode) == ui.me) {\r\n                              hoveration += 500;\r\n                           }\r\n                        }\r\n                        _status._mouseentertimeout = setTimeout(function () {\r\n                           if (_status.currentmouseenter != node || node._mouseentercreated || _status.tempunpopup ||\r\n                              _status.mousedragging || _status.mousedown || !node.offsetWidth || !node.offsetHeight) {\r\n                              return;\r\n                           }\r\n                           if (node._hoverfunc && !node._nopup) {\r\n                              var dialog = node._hoverfunc.call(node, e);\r\n                              if (dialog) {\r\n                                 dialog.classList.add('popped');\r\n                                 ui.window.appendChild(dialog);\r\n                                 lib.placePoppedDialog(dialog, e);\r\n                                 if (node._hoverwidth) {\r\n                                    dialog.style.width = node._hoverwidth + 'px';\r\n                                    dialog._hovercustomed = true;\r\n                                 }\r\n                                 node._mouseenterdialog = dialog;\r\n                                 node._mouseentercreated = true;\r\n                              }\r\n                           }\r\n                        }, hoveration);\r\n                        break;\r\n                     }\r\n                     item = item.parentNode;\r\n                  }\r\n                  if (_status.draggingdialog) {\r\n                     var ddialog = _status.draggingdialog;\r\n                     if (ddialog._dragorigin && ddialog._dragtransform) {\r\n                        var translate = ddialog._dragtransform.slice(0);\r\n                        translate[0] += e.clientX / game.documentZoom - ddialog._dragorigin.clientX / game.documentZoom;\r\n                        translate[1] += e.clientY / game.documentZoom - ddialog._dragorigin.clientY / game.documentZoom;\r\n                        ui.click.checkdialogtranslate(translate, ddialog);\r\n                     }\r\n                     _status.clicked = true;\r\n                  }\r\n                  if (_status.draggingroundmenu) {\r\n                     if (ui.roundmenu._dragorigin && ui.roundmenu._dragtransform) {\r\n                        var translate = ui.roundmenu._dragtransform.slice(0);\r\n                        translate[0] += e.clientX / game.documentZoom - ui.roundmenu._dragorigin.clientX / game.documentZoom;\r\n                        translate[1] += e.clientY / game.documentZoom - ui.roundmenu._dragorigin.clientY / game.documentZoom;\r\n                        ui.click.checkroundtranslate(translate);\r\n                     }\r\n                     _status.clicked = true;\r\n                  }\r\n               }\r\n            },\r\n            windowmousedown: function (e) {\r\n               if (window.inSplash) return;\r\n               if (!ui.window) return;\r\n               if (e.button == 2) return;\r\n               _status.mousedown = true;\r\n               var dialogs = ui.window.querySelectorAll('#window>.dialog.popped:not(.static)');\r\n               for (var i = 0; i < dialogs.length; i++) {\r\n                  dialogs[i].delete();\r\n               }\r\n               var sourceitem = document.elementFromPoint(e.clientX, e.clientY);\r\n               var item = sourceitem;\r\n               while (item) {\r\n                  var itemtype = get.itemtype(item);\r\n                  if (itemtype == 'button') break;\r\n                  if (itemtype == 'dialog' &&\r\n                     !item.classList.contains('popped') &&\r\n                     !item.classList.contains('fixed')) {\r\n                     var ddialog = item;\r\n                     _status.draggingdialog = ddialog;\r\n                     ddialog._dragorigin = e;\r\n                     if (!ddialog._dragtransform) {\r\n                        ddialog._dragtransform = [0, 0];\r\n                     }\r\n                     return;\r\n                  }\r\n                  if (item == ui.roundmenu) {\r\n                     _status.draggingroundmenu = true;\r\n                     ui.roundmenu._dragorigin = e;\r\n                     if (!ui.roundmenu._dragtransform) {\r\n                        ui.roundmenu._dragtransform = [0, 0];\r\n                     }\r\n                     return;\r\n                  }\r\n                  item = item.parentNode;\r\n               }\r\n\r\n               var evt = _status.event;\r\n               if (!lib.config.enable_drag) return;\r\n               if (!ui.arena.classList.contains('selecting')) return;\r\n               if (!evt.isMine()) return;\r\n\r\n               item = sourceitem;\r\n               while (item) {\r\n                  var itemtype = get.itemtype(item);\r\n                  if (itemtype == 'card' || itemtype == 'button' || itemtype == 'player') {\r\n                     if (item.classList.contains('selectable') &&\r\n                        !item.classList.contains('selected') &&\r\n                        !item.classList.contains('noclick')) {\r\n                        _status.clicked = false;\r\n                        ui.click[itemtype].call(item);\r\n                        if (item.classList.contains('selected')) {\r\n                           _status.mousedragging = e;\r\n                           _status.mousedragorigin = item;\r\n                           _status.mouseleft = false;\r\n                           _status.selectionfull = false;\r\n                           _status.multitarget = false;\r\n                           _status.lastmouseutc = get.utc();\r\n                           ui.arena.classList.add('dragging');\r\n                        }\r\n                     }\r\n                     return;\r\n                  }\r\n                  item = item.parentNode;\r\n               }\r\n            },\r\n            cardtouchstart: function (e) {\r\n               if (e.touches.length != 1) return;\r\n               if (!lib.config.enable_drag) return;\r\n               if (!this.parentNode) return;\r\n               if (!this.parentNode.parentNode) return;\r\n               if (this.parentNode.parentNode.parentNode != ui.me) return;\r\n               if (this.parentNode.parentNode.classList.contains('scrollh')) return;\r\n               if (this.classList.contains('selectable') &&\r\n                  !this.classList.contains('selected') &&\r\n                  !this.classList.contains('noclick')) {\r\n                  this._waitingfordrag = {\r\n                     clientX: e.touches[0].clientX,\r\n                     clientY: e.touches[0].clientY\r\n                  };\r\n               }\r\n            },\r\n            cardtouchmove: function (e) {\r\n               ui.click.longpresscancel.call(this);\r\n               if (this._waitingfordrag) {\r\n                  var drag = this._waitingfordrag;\r\n                  _status.clicked = false;\r\n                  _status.touchnocheck = true;\r\n                  ui.click.card.call(this);\r\n                  _status.touchnocheck = false;\r\n                  if (this.classList.contains('selected')) {\r\n                     _status.mousedragging = drag;\r\n                     _status.mousedragorigin = this;\r\n                     _status.mouseleft = false;\r\n                     _status.selectionfull = false;\r\n                     _status.multitarget = false;\r\n                  }\r\n                  delete this._waitingfordrag;\r\n               }\r\n            },\r\n            windowmouseup: function (e) {\r\n               delete _status.force;\r\n               // if(_status.forcetouchinterval){\r\n               //     clearInterval(_status.forcetouchinterval);\r\n               //     delete _status.forcetouchinterval;\r\n               // }\r\n               if (window.inSplash) return;\r\n               if (_status.draggingdialog) {\r\n                  var ddialog = _status.draggingdialog;\r\n                  var translate;\r\n                  if (ddialog._dragorigin && ddialog._dragtransform) {\r\n                     translate = ddialog._dragtransform;\r\n                     translate[0] += e.clientX / game.documentZoom - ddialog._dragorigin.clientX / game.documentZoom;\r\n                     translate[1] += e.clientY / game.documentZoom - ddialog._dragorigin.clientY / game.documentZoom;\r\n                     ui.click.checkdialogtranslate(null, ddialog);\r\n                     delete ddialog._dragorigin;\r\n                  }\r\n                  game.saveConfig('dialog_transform', translate);\r\n                  delete _status.draggingdialog;\r\n               }\r\n               if (_status.draggingroundmenu) {\r\n                  var translate;\r\n                  if (ui.roundmenu._dragorigin && ui.roundmenu._dragtransform) {\r\n                     var dx = e.clientX / game.documentZoom - ui.roundmenu._dragorigin.clientX / game.documentZoom;\r\n                     var dy = e.clientY / game.documentZoom - ui.roundmenu._dragorigin.clientY / game.documentZoom;\r\n                     if (dx * dx + dy * dy < 25) {\r\n                        ui.click.roundmenu();\r\n                     }\r\n                     translate = ui.roundmenu._dragtransform;\r\n                     translate[0] += dx;\r\n                     translate[1] += dy;\r\n                     ui.click.checkroundtranslate();\r\n                     delete ui.roundmenu._dragorigin;\r\n                  }\r\n                  game.saveConfig('roundmenu_transform', translate);\r\n                  delete _status.draggingroundmenu;\r\n               }\r\n               if (e.button == 2) {\r\n                  if (_status.mousedragging) {\r\n                     _status.mousedragging = null;\r\n                     _status.mouseleft = false;\r\n                     _status.mousedragorigin = null;\r\n                     _status.dragstatuschanged = false;\r\n                     game.uncheck();\r\n                     game.check();\r\n                     _status.noright = true;\r\n                  }\r\n               }\r\n               else {\r\n                  var tmpflag = false;\r\n                  _status.mousedown = false;\r\n                  for (var i = 0; i < ui.selected.cards.length; i++) {\r\n                     ui.selected.cards[i].updateTransform(true);\r\n                  }\r\n                  if (_status.mousedragging && _status.mouseleft) {\r\n                     if (game.check()) {\r\n                        if (ui.confirm) {\r\n                           ui.confirm.close();\r\n                        }\r\n                        ui.click.ok();\r\n                     }\r\n                     else {\r\n                        game.uncheck();\r\n                        game.check();\r\n                     }\r\n                  }\r\n                  else if (_status.mousedragging && _status.mousedragorigin) {\r\n                     tmpflag = _status.mousedragorigin;\r\n                  }\r\n                  _status.lastdragchange.length = 0;\r\n                  _status.mousedragging = null;\r\n                  _status.mouseleft = false;\r\n                  _status.mousedragorigin = null;\r\n                  _status.dragstatuschanged = false;\r\n                  if (ui.arena) {\r\n                     ui.canvas.width = ui.arena.offsetWidth;\r\n                     ui.canvas.height = ui.arena.offsetHeight;\r\n                  }\r\n                  if (tmpflag) {\r\n                     ui.click[get.itemtype(tmpflag)].call(tmpflag);\r\n                     game.check();\r\n                  }\r\n                  // ui.updatehl();\r\n               }\r\n               if (ui.arena) {\r\n                  ui.arena.classList.remove('dragging');\r\n               }\r\n            },\r\n            mousemove: function () {\r\n               if (!lib.config.hover_handcard && this.parentNode && this.parentNode.parentNode == ui.me) {\r\n                  return;\r\n               }\r\n               if (!_status.currentmouseenter) {\r\n                  _status.currentmouseenter = this;\r\n               }\r\n            },\r\n            mouseenter: function () {\r\n               if (!lib.config.hover_handcard && this.parentNode && this.parentNode.parentNode == ui.me) {\r\n                  return;\r\n               }\r\n               _status.currentmouseenter = this;\r\n            },\r\n            mouseleave: function () {\r\n               ui.click.mouseentercancel();\r\n               if (_status.currentmouseenter == this) {\r\n                  _status.currentmouseenter = null;\r\n               }\r\n               this._mouseentercreated = false;\r\n            },\r\n            mousedown: function () {\r\n               ui.click.mouseentercancel();\r\n               if (_status.currentmouseenter == this) {\r\n                  _status.currentmouseenter = null;\r\n               }\r\n               this._mouseentercreated = true;\r\n            },\r\n            mouseentercancel: function () {\r\n               if (_status._mouseentertimeout) {\r\n                  clearTimeout(_status._mouseentertimeout);\r\n                  delete _status._mouseentertimeout\r\n               }\r\n            },\r\n            hoverplayer: function (e) {\r\n               var node = get.nodeintro(this, true);\r\n               if (node) node.style.zIndex = 21;\r\n               return node;\r\n            },\r\n            longpressdown: function (e) {\r\n               if (_status.longpressed) return;\r\n               if (this._longpresstimeout) {\r\n                  clearTimeout(this._longpresstimeout);\r\n               }\r\n               if (lib.config.longpress_info) {\r\n                  this._longpresstimeout = setTimeout(ui.click.longpresscallback, 500);\r\n               }\r\n               this._longpressevent = e;\r\n               if (_status.longpressing && _status.longpressing != this) {\r\n                  ui.click.longpresscancel.call(_status.longpressing);\r\n               }\r\n               // if(window.ForceTouch&&!_status.forcetouchinterval&&lib.config.enable_pressure){\r\n               //     _status.forcetouchinterval=setInterval(ui.click.forcetouch,30);\r\n               // }\r\n               _status.longpressing = this;\r\n            },\r\n            longpresscallback: function () {\r\n               if (!_status.longpressing) return;\r\n               var node = _status.longpressing;\r\n               var func = node._longpresscallback;\r\n               var e = node._longpressevent;\r\n               if (!func || !e) return;\r\n               clearTimeout(node._longpresstimeout);\r\n               _status.force = true;\r\n               delete _status.longpressing;\r\n               delete node._longpresstimeout;\r\n               delete node._longpressevent;\r\n               if (_status.mousedragging && _status.mouseleft) return;\r\n               if (!_status.longpressed) {\r\n                  _status.longpressed = true;\r\n                  setTimeout(function () {\r\n                     _status.longpressed = false;\r\n                  }, 500);\r\n                  func.call(node, e);\r\n                  if (lib.config.touchscreen && lib.config.enable_drag && !node._waitingfordrag) {\r\n                     _status.mousedragging = null;\r\n                     _status.mousedragorigin = null;\r\n                     _status.clicked = false;\r\n                     game.uncheck();\r\n                     game.check();\r\n                     _status.clicked = true;\r\n                  }\r\n                  delete node._waitingfordrag;\r\n                  ui.click.touchpop();\r\n               }\r\n            },\r\n            longpresscancel: function () {\r\n               if (this._longpresstimeout) {\r\n                  clearTimeout(this._longpresstimeout);\r\n                  delete this._longpresstimeout;\r\n               }\r\n               delete this._longpressevent;\r\n               if (_status.longpressing == this) {\r\n                  delete _status.longpressing;\r\n               }\r\n            },\r\n            window: function () {\r\n               var clicked = _status.clicked;\r\n               var dialogtouched = false;\r\n               if (_status.dialogtouched) {\r\n                  _status.dialogtouched = false;\r\n                  dialogtouched = true;\r\n               }\r\n               if (_status.dragged) return;\r\n               if (_status.touchpopping) return;\r\n               if (_status.reloading) return;\r\n               if (_status.clicked || _status.clicked2) {\r\n                  _status.clicked = false;\r\n                  _status.clicked2 = false;\r\n               }\r\n               else {\r\n                  if (_status.clickingidentity) {\r\n                     for (var i = 0; i < _status.clickingidentity[1].length; i++) {\r\n                        _status.clickingidentity[1][i].delete();\r\n                        _status.clickingidentity[1][i].style.transform = '';\r\n                     }\r\n                     delete _status.clickingidentity;\r\n                  }\r\n                  if (!_status.event.isMine) return;\r\n                  if (ui.controls.length) {\r\n                     ui.updatec();\r\n                  }\r\n                  if (_status.editing) {\r\n                     if (_status.editing.innerHTML.length) {\r\n                        _status.editing.link = _status.editing.innerHTML;\r\n                     }\r\n                     _status.editing.innerHTML = get.translation(_status.editing.link);\r\n                     delete _status.editing;\r\n                  }\r\n                  else if (_status.choosing) {\r\n                     if (!_status.choosing.expand) {\r\n                        _status.choosing.parentNode.style.height = '';\r\n                        _status.choosing.nextSibling.delete();\r\n                        _status.choosing.previousSibling.show();\r\n                        delete _status.choosing;\r\n                     }\r\n                  }\r\n                  else if (ui.intro) {\r\n                     ui.intro.close();\r\n                     delete ui.intro;\r\n                     ui.control.show();\r\n                     game.resume2();\r\n                  }\r\n                  else if ((_status.event.isMine() || _status.event.forceMine) && !dialogtouched) {\r\n                     if (_status.event.custom.replace.window) {\r\n                        _status.event.custom.replace.window();\r\n                     }\r\n                     else {\r\n                        if (_status.event.skill && _status.event.name == 'chooseToUse') {\r\n                           ui.click.cancel();\r\n                        }\r\n                        else {\r\n                           game.uncheck();\r\n                           game.check();\r\n                        }\r\n                     }\r\n                  }\r\n                  if (!ui.shortcut.classList.contains('hidden')) {\r\n                     ui.click.shortcut(false);\r\n                  }\r\n                  if (get.is.phoneLayout() && ui.menuContainer && ui.menuContainer.classList.contains('hidden')) {\r\n                     if (ui.system2.classList.contains('shown')) {\r\n                        _status.removinground = true;\r\n                        setTimeout(function () {\r\n                           _status.removinground = false;\r\n                        }, 200);\r\n                     }\r\n                     ui.arena.classList.remove('phonetop');\r\n                     ui.system1.classList.remove('shown');\r\n                     ui.system2.classList.remove('shown');\r\n                     // if(ui.chessinfo){\r\n                     //     ui.chessinfo.classList.remove('zoomed');\r\n                     // }\r\n                  }\r\n               }\r\n               if (_status.tempunpop) {\r\n                  _status.tempunpop = false;\r\n               }\r\n               else {\r\n                  game.closePopped();\r\n               }\r\n               if (_status.event.custom && _status.event.custom.add.window) {\r\n                  _status.event.custom.add.window(clicked);\r\n               }\r\n            },\r\n            toggle: function () {\r\n               if (_status.dragged) return;\r\n               if (this.parentNode.classList.contains('disabled')) return;\r\n               _status.tempunpop = true;\r\n               if (this.link) {\r\n                  this.link = false;\r\n                  this.classList.remove('on');\r\n                  if (this.additionalCommand) this.additionalCommand(false, this.parentNode);\r\n               }\r\n               else {\r\n                  this.link = true;\r\n                  this.classList.add('on');\r\n                  if (this.additionalCommand) this.additionalCommand(true, this.parentNode);\r\n               }\r\n            },\r\n            editor: function () {\r\n               if (_status.dragged) return;\r\n               if (_status.editing) return;\r\n               _status.clicked = true;\r\n               this.innerHTML = '';\r\n               _status.editing = this;\r\n               if (this.additionalCommand) this.additionalCommand(this);\r\n            },\r\n            switcher: function () {\r\n               if (_status.dragged) return;\r\n               if (this.parentNode.classList.contains('disabled')) return;\r\n               if (_status.choosing) return;\r\n               _status.clicked = true;\r\n               _status.tempunpop = true;\r\n               this.previousSibling.hide();\r\n               var node = ui.create.div('.switcher', this.parentNode).animate('start');\r\n               for (var i = 0; i < this.choice.length; i++) {\r\n                  var choice = ui.create.div('.pointerdiv', node);\r\n                  choice.innerHTML = get.translation(this.choice[i]);\r\n                  choice.link = this.choice[i];\r\n                  choice.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.choice);\r\n               }\r\n               // this.parentNode.style.height=(node.offsetHeight)+'px';\r\n               _status.choosing = this;\r\n               if (!_status.choosing.expand) {\r\n                  _status.choosing.expand = true;\r\n                  setTimeout(function () {\r\n                     _status.choosing.expand = false;\r\n                  }, 500);\r\n               }\r\n            },\r\n            choice: function () {\r\n               if (_status.dragged) return;\r\n               if (!_status.choosing) return;\r\n               _status.choosing.link = this.link;\r\n               _status.choosing.innerHTML = get.translation(this.link);\r\n               this.parentNode.parentNode.style.height = '';\r\n               this.parentNode.delete();\r\n               _status.choosing.previousSibling.show();\r\n               delete _status.choosing;\r\n               if (this.parentNode.parentNode.querySelector('.toggle').additionalCommand) {\r\n                  this.parentNode.parentNode.querySelector('.toggle').additionalCommand(this.link, this.parentNode.parentNode);\r\n               }\r\n            },\r\n            button: function () {\r\n               if (_status.dragged) return;\r\n               if (_status.clicked) return;\r\n               if (_status.tempNoButton) return;\r\n               if (_status.draggingtouchdialog) return;\r\n               if (this.classList.contains('noclick')) return;\r\n               if (_status.justdragged) return;\r\n               _status.clicked = true;\r\n               var custom = _status.event.custom;\r\n               if (custom.replace.button) {\r\n                  custom.replace.button(this);\r\n                  return;\r\n               }\r\n               if (!_status.event.isMine()) return;\r\n               if (this.classList.contains('selectable') == false) return;\r\n               if (this.classList.contains('selected')) {\r\n                  ui.selected.buttons.remove(this);\r\n                  this.classList.remove('selected');\r\n                  if (_status.multitarget || _status.event.complexSelect) {\r\n                     game.uncheck();\r\n                     game.check();\r\n                  }\r\n               }\r\n               else {\r\n                  this.classList.add('selected');\r\n                  ui.selected.buttons.add(this);\r\n               }\r\n               if (custom.add.button) {\r\n                  custom.add.button();\r\n               }\r\n               game.check();\r\n            },\r\n            touchintro: function () {\r\n               var rect = this.getBoundingClientRect();\r\n               ui.click.touchpop();\r\n               ui.click.intro.call(this, {\r\n                  clientX: rect.left + 18,\r\n                  clientY: rect.top + 12\r\n               });\r\n               _status.clicked = false;\r\n            },\r\n            /**\r\n             * 卡牌点击事件\r\n             * @callback\r\n             */\r\n            card: function () {\r\n               delete this._waitingfordrag;\r\n               if (_status.dragged) return;\r\n               if (_status.clicked) return;\r\n               if (ui.intro) return;\r\n               _status.clicked = true;\r\n               if (this.parentNode && (this.parentNode.classList.contains('judges') || this.parentNode.classList.contains('marks'))) {\r\n                  var rect = this.getBoundingClientRect();\r\n                  ui.click.touchpop();\r\n                  ui.click.intro.call(this, {\r\n                     clientX: rect.left + 18,\r\n                     clientY: rect.top + 12\r\n                  });\r\n                  _status.clicked = false;\r\n                  return;\r\n               }\r\n               var custom = _status.event.custom;\r\n               if (custom.replace.card) {\r\n                  custom.replace.card(this);\r\n                  return;\r\n               }\r\n               if (this.classList.contains('selectable') == false) return;\r\n               if (this.classList.contains('selected')) {\r\n                  ui.selected.cards.remove(this);\r\n                  if (_status.multitarget || _status.event.complexSelect) {\r\n                     game.uncheck();\r\n                     game.check();\r\n                  }\r\n                  else {\r\n                     this.classList.remove('selected');\r\n                     this.updateTransform();\r\n                  }\r\n               }\r\n               else {\r\n                  ui.selected.cards.add(this);\r\n                  this.classList.add('selected');\r\n                  this.updateTransform(true);\r\n               }\r\n               if (game.chess && get.config('show_range') && !_status.event.skill && this.classList.contains('selected') &&\r\n                  _status.event.isMine() && _status.event.name == 'chooseToUse') {\r\n                  var player = _status.event.player;\r\n                  var range = get.info(this).range;\r\n                  if (range) {\r\n                     if (typeof range.attack === 'number') {\r\n                        player.createRangeShadow(Math.min(8, player.getAttackRange(true) + range.attack - 1));\r\n                     }\r\n                     else if (typeof range.global === 'number') {\r\n                        player.createRangeShadow(Math.min(8, player.getGlobalFrom() + range.global));\r\n                     }\r\n                  }\r\n               }\r\n               if (custom.add.card) {\r\n                  custom.add.card();\r\n               }\r\n               game.check();\r\n\r\n               if (lib.config.popequip && get.is.phoneLayout() &&\r\n                  arguments[0] != 'popequip' && ui.arena && ui.arena.classList.contains('selecting') &&\r\n                  this.parentNode && this.parentNode.classList.contains('popequip')) {\r\n                  var rect = this.getBoundingClientRect();\r\n                  ui.click.touchpop();\r\n                  ui.click.intro.call(this.parentNode, {\r\n                     clientX: rect.left + 18,\r\n                     clientY: rect.top + 12\r\n                  });\r\n               }\r\n            },\r\n            avatar: function () {\r\n               if (!lib.config.doubleclick_intro) return;\r\n               if (this.parentNode.isUnseen(0)) return;\r\n               if (!lib.character[this.parentNode.name]) return;\r\n               if (!ui.menuContainer) return;\r\n               var avatar = this;\r\n               var player = this.parentNode;\r\n               if (!game.players.contains(player) && !game.dead.contains(player)) return;\r\n               if (!this._doubleClicking) {\r\n                  this._doubleClicking = true;\r\n                  setTimeout(function () {\r\n                     avatar._doubleClicking = false;\r\n                  }, 500);\r\n                  return;\r\n               }\r\n               // ui.click.skin(this,player.name);\r\n               game.pause2();\r\n               ui.click.charactercard(player.name, null, null, true, this);\r\n            },\r\n            avatar2: function () {\r\n               if (!lib.config.doubleclick_intro) return;\r\n               if (this.parentNode.classList.contains('unseen2')) return;\r\n               if (!lib.character[this.parentNode.name2]) return;\r\n               if (!ui.menuContainer) return;\r\n               var avatar = this;\r\n               var player = this.parentNode;\r\n               if (!game.players.contains(player) && !game.dead.contains(player)) return;\r\n               if (!this._doubleClicking) {\r\n                  this._doubleClicking = true;\r\n                  setTimeout(function () {\r\n                     avatar._doubleClicking = false;\r\n                  }, 500);\r\n                  return;\r\n               }\r\n               // ui.click.skin(this,player.name2);\r\n               game.pause2();\r\n               ui.click.charactercard(player.name2, null, null, true, this);\r\n            },\r\n            connectroom: function (e) {\r\n               if (_status.dragged) return;\r\n               if (_status.clicked) return;\r\n               if (ui.intro) return;\r\n               if (this.roomfull) {\r\n                  alert('房间已满');\r\n               }\r\n               else if (this.roomgaming && !game.onlineID) {\r\n                  if (this.config && this.config.observe) {\r\n                     alert('房间暂时不可旁观');\r\n                  }\r\n                  else {\r\n                     alert('房间不允许旁观');\r\n                  }\r\n               }\r\n               else if (!this.roomempty && this.version != lib.versionOL) {\r\n                  if (this.version > lib.versionOL) {\r\n                     alert('加入失败：你的游戏版本过低');\r\n                  }\r\n                  else {\r\n                     alert('加入失败：房主的游戏版本过低');\r\n                  }\r\n               }\r\n               else {\r\n                  if (!_status.enteringroom) {\r\n                     _status.enteringroom = true;\r\n                     _status.enteringroomserver = this.serving;\r\n                     game.send('server', 'enter', this.key, get.connectNickname(), lib.config.connect_avatar);\r\n                  }\r\n               }\r\n            },\r\n            player: function () {\r\n               return ui.click.target.apply(this, arguments);\r\n            },\r\n            target: function (e) {\r\n               if (_status.dragged) return;\r\n               if (_status.clicked) return;\r\n               if (ui.intro) return;\r\n               if (this.classList.contains('connect')) {\r\n                  if (game.online) {\r\n                     if (game.onlinezhu) {\r\n                        if (!this.playerid && game.connectPlayers) {\r\n                           if (['versus', 'doudizhu', 'longlaoguan'].contains(lib.configOL.mode)) return;\r\n                           if (lib.configOL.mode == 'identity' && lib.configOL.identity_mode == 'zhong') return;\r\n                           if (!this.classList.contains('unselectable2') && lib.configOL.number <= 2) return;\r\n                           this.classList.toggle('unselectable2')\r\n                           if (this.classList.contains('unselectable2')) {\r\n                              lib.configOL.number--;\r\n                           }\r\n                           else {\r\n                              lib.configOL.number++;\r\n                           }\r\n                           game.send('changeNumConfig', lib.configOL.number,\r\n                              game.connectPlayers.indexOf(this), this.classList.contains('unselectable2'));\r\n                        }\r\n                     }\r\n                     return;\r\n                  }\r\n                  if (this.playerid) {\r\n                     if (this.ws) {\r\n                        if (confirm('是否踢出' + this.nickname + '？')) {\r\n                           var id = get.id();\r\n                           this.ws.send(function (id) {\r\n                              if (game.ws) {\r\n                                 game.ws.close();\r\n                                 game.saveConfig('reconnect_info');\r\n                                 game.saveConfig('banned_info', id);\r\n                              }\r\n                           }, id);\r\n                           lib.node.banned.push(id);\r\n                        }\r\n                     }\r\n                  }\r\n                  else {\r\n                     if (['versus', 'doudizhu', 'longlaoguan', 'single'].contains(lib.configOL.mode)) return;\r\n                     if (lib.configOL.mode == 'identity' && (lib.configOL.identity_mode == 'zhong' || lib.configOL.identity_mode == 'purple')) return;\r\n                     if (!this.classList.contains('unselectable2') && lib.configOL.number <= 2) return;\r\n                     this.classList.toggle('unselectable2')\r\n                     if (this.classList.contains('unselectable2')) {\r\n                        lib.configOL.number--;\r\n                     }\r\n                     else {\r\n                        lib.configOL.number++;\r\n                     }\r\n                     game.send('server', 'config', lib.configOL);\r\n                     game.updateWaiting();\r\n                  }\r\n                  return;\r\n               }\r\n               _status.clicked = true;\r\n               var custom = _status.event.custom;\r\n               if (custom.replace.target) {\r\n                  custom.replace.target(this, e);\r\n                  return;\r\n               }\r\n               if (this.classList.contains('selectable') == false) return;\r\n               this.unprompt();\r\n               if (this.classList.contains('selected')) {\r\n                  ui.selected.targets.remove(this);\r\n                  if (_status.multitarget || _status.event.complexSelect) {\r\n                     game.uncheck();\r\n                     game.check();\r\n                  }\r\n                  else {\r\n                     this.classList.remove('selected');\r\n                  }\r\n               }\r\n               else {\r\n                  ui.selected.targets.add(this);\r\n                  if (_status.event.name == 'chooseTarget' || _status.event.name == 'chooseToUse' || _status.event.name == 'chooseCardTarget') {\r\n                     var targetprompt = null;\r\n                     if (_status.event.targetprompt) {\r\n                        targetprompt = _status.event.targetprompt;\r\n                     }\r\n                     else if (_status.event.skill && !get.info(_status.event.skill).viewAs) {\r\n                        targetprompt = get.info(_status.event.skill).targetprompt;\r\n                     }\r\n                     else if (_status.event.name == 'chooseToUse') {\r\n                        var currentcard = get.card();\r\n                        if (currentcard) {\r\n                           targetprompt = get.info(currentcard).targetprompt;\r\n                        }\r\n                     }\r\n                     if (targetprompt) {\r\n                        if (Array.isArray(targetprompt)) {\r\n                           targetprompt = targetprompt[Math.min(targetprompt.length - 1, ui.selected.targets.indexOf(this))];\r\n                        }\r\n                        else if (typeof targetprompt == 'function') {\r\n                           targetprompt = targetprompt(this);\r\n                        }\r\n                        if (targetprompt && typeof targetprompt == 'string') {\r\n                           this.prompt(targetprompt);\r\n                        }\r\n                     }\r\n                  }\r\n                  this.classList.add('selected');\r\n               }\r\n               if (custom.add.target) {\r\n                  custom.add.target();\r\n               }\r\n               game.check();\r\n            },\r\n            control2: function () {\r\n               if (this.childNodes.length == 1 && !this._doubleclick) {\r\n                  ui.click.control.call(this.firstChild);\r\n               }\r\n            },\r\n            control: function () {\r\n               if (_status.dragged) return;\r\n               if (ui.control.classList.contains('hidden')) return;\r\n               var node = this.parentNode;\r\n               if (node) {\r\n                  if (node._doubleclick) {\r\n                     return;\r\n                  }\r\n                  else {\r\n                     node._doubleclick = true;\r\n                     setTimeout(function () {\r\n                        node._doubleclick = false;\r\n                     }, 500);\r\n                  }\r\n                  if (node.classList.contains('hidden')) return;\r\n                  if (node.classList.contains('removing')) return;\r\n                  if (node.classList.contains('disabled')) return;\r\n               }\r\n               if (ui.intro) {\r\n                  ui.intro.close();\r\n                  delete ui.intro;\r\n               }\r\n               _status.clicked = true;\r\n               if (this.parentNode.custom) {\r\n                  this.parentNode.custom(this.link, this);\r\n                  return;\r\n               }\r\n               if (this.link == 'ok') {\r\n                  ui.click.ok(this);\r\n               }\r\n               else if (this.link == 'cancel') {\r\n                  ui.click.cancel(this);\r\n               }\r\n               else {\r\n                  _status.event.result = {\r\n                     buttons: ui.selected.buttons.slice(0),\r\n                     cards: ui.selected.cards.slice(0),\r\n                     targets: ui.selected.targets.slice(0),\r\n                     control: this.link,\r\n                     links: get.links(ui.selected.buttons)\r\n                  };\r\n                  if (this.parentNode.close != false) {\r\n                     game.uncheck();\r\n                     this.parentNode.close();\r\n                  }\r\n                  game.resume();\r\n               }\r\n            },\r\n            dialogcontrol: function () {\r\n               _status.event.result = {\r\n                  buttons: ui.selected.buttons.slice(0),\r\n                  cards: ui.selected.cards.slice(0),\r\n                  targets: ui.selected.targets.slice(0),\r\n                  control: this.link,\r\n                  links: get.links(ui.selected.buttons)\r\n               };\r\n               game.resume();\r\n            },\r\n            skill: function (skill) {\r\n               var info = get.info(skill);\r\n               var Evt = _status.event;\r\n               Evt.backup(skill);\r\n               if (info.filterCard && info.discard != false && info.lose != false && !info.viewAs) {\r\n                  var cards = Evt.player.getCards(Evt.position);\r\n                  for (var i = 0; i < cards.length; i++) {\r\n                     if (!lib.filter.cardDiscardable(cards[i], Evt.player)) {\r\n                        cards[i].uncheck('useSkill');\r\n                     }\r\n                  }\r\n               }\r\n               if (typeof Evt.skillDialog == 'object') {\r\n                  Evt.skillDialog.close();\r\n               }\r\n               if (Evt.isMine()) {\r\n                  Evt.skillDialog = true;\r\n               }\r\n               game.uncheck();\r\n               game.check();\r\n               if (Evt.skillDialog) {\r\n                  var str = get.translation(skill);\r\n                  if (info.prompt) {\r\n                     var str2;\r\n                     if (typeof info.prompt == 'function') {\r\n                        str2 = info.prompt(Evt);\r\n                     }\r\n                     else {\r\n                        str2 = info.prompt;\r\n                     }\r\n                     Evt.skillDialog = ui.create.dialog(str, '<div><div style=\"width:100%;text-align:center\">' + str2 + '</div></div>');\r\n                     if (info.longprompt) {\r\n                        Evt.skillDialog.forcebutton = true;\r\n                        ui.update();\r\n                     }\r\n                  }\r\n                  else if (info.promptfunc) {\r\n                     Evt.skillDialog = ui.create.dialog(str, '<div><div style=\"width:100%\">' + info.promptfunc(Evt, Evt.player) + '</div></div>');\r\n                  }\r\n                  else if (lib.dynamicTranslate[skill] || lib.translate[skill + '_info']) {\r\n                     Evt.skillDialog = ui.create.dialog(str, '<div><div style=\"width:100%\">' + get.skillInfoTranslation(skill, _status.event.player) + '</div></div>');\r\n                  }\r\n               }\r\n            },\r\n            /**\r\n             * 玩家/ai确认选择的函数\r\n             * @function\r\n             * @param {?HTMLDivElement} node 调用确认函数的节点，如果不为null，对`node`的父节点调用`close()`函数\r\n             */\r\n            ok: function (node) {\r\n               var Evt = _status.event;\r\n               if (Evt.custom.replace.confirm) {\r\n                  Evt.custom.replace.confirm(true); return;\r\n               }\r\n               Evt.result = {\r\n                  buttons: ui.selected.buttons.slice(0),//选择的按钮\r\n                  cards: ui.selected.cards.slice(0),//选择的牌\r\n                  targets: ui.selected.targets.slice(0),//选择的目标\r\n                  confirm: 'ok',//确认\r\n                  bool: true,\r\n                  links: get.links(ui.selected.buttons)\r\n               };\r\n               if (node) {\r\n                  node.parentNode.close();\r\n               }\r\n               if (Evt.skill) {\r\n                  Evt.result.skill = Evt.skill;\r\n                  if (typeof get.info(Evt.skill).viewAs == 'function') Evt.result.card = get.info(Evt.skill).viewAs(Evt.result.cards, Evt.player);\r\n                  else Evt.result.card = get.copy(get.info(Evt.skill).viewAs);\r\n                  if (Evt.result.cards.length == 1 && Evt.result.card) {\r\n                     Evt.result.card.suit = get.suit(Evt.result.cards[0]);\r\n                     Evt.result.card.number = get.number(Evt.result.cards[0]);\r\n                  }\r\n                  if (Evt.skillDialog && get.objtype(Evt.skillDialog) == 'div') {\r\n                     Evt.skillDialog.close();\r\n                  }\r\n                  var cards = Evt.player.getCards('hej');\r\n                  for (var i = 0; i < cards.length; i++) {\r\n                     cards[i].recheck('useSkill');\r\n                  }\r\n                  Evt.restore();\r\n               }\r\n               else if (Evt.name == 'chooseToUse' || Evt.name == 'chooseToRespond') {\r\n                  Evt.result.card = get.autoViewAs(Evt.result.cards[0]);\r\n               }\r\n               if (ui.skills) ui.skills.close();\r\n               if (ui.skills2) ui.skills2.close();\r\n               if (ui.skills3) ui.skills3.close();\r\n               game.uncheck();\r\n               if (Evt.custom.add.confirm) {\r\n                  Evt.custom.add.confirm(true);\r\n               }\r\n               game.resume();\r\n            },\r\n            /**\r\n             * 托管按钮点击函数\r\n             * @function\r\n             * @param {?HTMLDivElement} node 调用确认函数的节点，如果不为null，对`node`的父节点调用`close()`函数\r\n             */\r\n            cancel: function (node) {\r\n               var Evt = _status.event;\r\n               if (Evt.custom.replace.confirm) {\r\n                  Evt.custom.replace.confirm(false); return;\r\n               }\r\n               if (Evt.skill && !Evt.norestore) {\r\n                  if (Evt.skillDialog && get.objtype(Evt.skillDialog) == 'div') {\r\n                     Evt.skillDialog.close();\r\n                  }\r\n                  if (typeof Evt.dialog == 'string' && Evt.isMine()) {\r\n                     Evt.dialog = ui.create.dialog(Evt.dialog);\r\n                  }\r\n                  if (_status.event.type == 'phase' && ui.confirm) {\r\n                     ui.confirm.classList.add('removing');\r\n                  }\r\n                  // ui.control.animate('nozoom',100);\r\n                  Evt.restore();\r\n                  var cards = Evt.player.getCards('hej');\r\n                  for (var i = 0; i < cards.length; i++) {\r\n                     cards[i].recheck('useSkill');\r\n                  }\r\n                  game.uncheck();\r\n                  game.check();\r\n                  return;\r\n               }\r\n               Evt.result = {\r\n                  confirm: 'cancel',\r\n                  bool: false\r\n               };\r\n               if (node) {\r\n                  node.parentNode.close();\r\n               }\r\n               if (ui.skills) ui.skills.close();\r\n               if (ui.skills2) ui.skills2.close();\r\n               if (ui.skills3) ui.skills3.close();\r\n               game.uncheck();\r\n               if (Evt.custom.add.confirm) {\r\n                  Evt.custom.add.confirm(true);\r\n               }\r\n               game.resume();\r\n            },\r\n            logv: function (e) {\r\n               if (_status.currentlogv) {\r\n                  if (_status.currentlogv == this) return;\r\n                  if (_status.logvtimeout) {\r\n                     clearTimeout(_status.logvtimeout);\r\n                  }\r\n                  var that = this;\r\n                  _status.logvtimeout = setTimeout(function () {\r\n                     if (!_status.currentlogv) {\r\n                        _status.currentlogv = that;\r\n                        ui.click.intro.call(that, e);\r\n                     }\r\n                  }, 200);\r\n                  this.logvtimeout = _status.logvtimeout;\r\n               }\r\n               else {\r\n                  _status.currentlogv = this;\r\n                  ui.click.intro.call(this, e);\r\n               }\r\n            },\r\n            logvleave: function () {\r\n               if (_status.currentlogv == this) {\r\n                  setTimeout(function () {\r\n                     delete _status.currentlogv;\r\n                  }, 150);\r\n               }\r\n               if (this.logvtimeout) {\r\n                  clearTimeout(this.logvtimeout);\r\n                  if (_status.logvtimeout == this.logvtimeout) {\r\n                     delete _status.logvtimeout;\r\n                  }\r\n                  delete this.logvtimeout;\r\n               }\r\n            },\r\n            charactercard: function (name, sourcenode, noedit, resume, avatar) {\r\n               if (_status.dragged) return;\r\n               if (lib.config.theme != 'simple') {\r\n                  ui.window.classList.add('shortcutpaused');\r\n                  ui.menuContainer.classList.add('forceopaque');\r\n               }\r\n               else {\r\n                  ui.window.classList.add('systempaused');\r\n                  ui.menuContainer.classList.add('transparent2');\r\n               }\r\n               if (lib.config.blur_ui) {\r\n                  ui.arena.classList.add('blur');\r\n                  ui.system.classList.add('blur');\r\n                  ui.menuContainer.classList.add('blur');\r\n               }\r\n               var layer = ui.create.div('.popup-container');\r\n               var clicklayer = function (e) {\r\n                  if (_status.touchpopping) return;\r\n                  if (_status.dragged) return;\r\n                  ui.window.classList.remove('shortcutpaused');\r\n                  ui.window.classList.remove('systempaused');\r\n                  ui.menuContainer.classList.remove('forceopaque');\r\n                  ui.menuContainer.classList.remove('transparent2');\r\n                  ui.arena.classList.remove('blur');\r\n                  ui.system.classList.remove('blur');\r\n                  ui.menuContainer.classList.remove('blur');\r\n                  this.delete();\r\n                  e.stopPropagation();\r\n                  if (resume) game.resume2();\r\n                  return false;\r\n               }\r\n               var uiintro = ui.create.div('.menubg.charactercard', layer);\r\n               var playerbg = ui.create.div('.menubutton.large.ava', uiintro);\r\n               var bg = ui.create.div('.avatar', playerbg, function () {\r\n                  if (changeskinfunc) {\r\n                     changeskinfunc();\r\n                  }\r\n               }).setBackground(name, 'character');\r\n               var changeskinfunc = null;\r\n               var nameskin = name;\r\n               var nameskin2 = name;\r\n               var gzbool = false;\r\n               if (nameskin.indexOf('gz_shibing') == 0) {\r\n                  nameskin = nameskin.slice(3, 11);\r\n               }\r\n               else if (nameskin.indexOf('gz_') == 0) {\r\n                  nameskin = nameskin.slice(3);\r\n                  gzbool = true;\r\n               }\r\n               var changeskin = function () {\r\n                  var node = ui.create.div('.changeskin', '可换肤', playerbg);\r\n                  var avatars = ui.create.div('.avatars', playerbg);\r\n                  changeskinfunc = function () {\r\n                     playerbg.classList.add('scroll');\r\n                     if (node._created) {\r\n                        return;\r\n                     }\r\n                     node._created = true;\r\n                     var createButtons = function (num) {\r\n                        if (!num) return;\r\n                        if (num >= 4) {\r\n                           avatars.classList.add('scroll');\r\n                           if (lib.config.touchscreen) {\r\n                              lib.setScroll(avatars);\r\n                           }\r\n                        }\r\n                        for (var i = 0; i <= num; i++) {\r\n                           var button = ui.create.div(avatars, function () {\r\n                              playerbg.classList.remove('scroll');\r\n                              if (this._link) {\r\n                                 lib.config.skin[nameskin] = this._link;\r\n                                 bg.style.backgroundImage = this.style.backgroundImage;\r\n                                 if (sourcenode) sourcenode.style.backgroundImage = this.style.backgroundImage;\r\n                                 if (avatar) avatar.style.backgroundImage = this.style.backgroundImage;\r\n                                 game.saveConfig('skin', lib.config.skin);\r\n                              }\r\n                              else {\r\n                                 delete lib.config.skin[nameskin];\r\n                                 if (gzbool && lib.character[nameskin2][4].contains('gzskin') && lib.config.mode_config.guozhan.guozhanSkin) {\r\n                                    bg.setBackground(nameskin2, 'character');\r\n                                    if (sourcenode) sourcenode.setBackground(nameskin2, 'character');\r\n                                    if (avatar) avatar.setBackground(nameskin2, 'character');\r\n                                 }\r\n                                 else {\r\n                                    bg.setBackground(nameskin, 'character');\r\n                                    if (sourcenode) sourcenode.setBackground(nameskin, 'character');\r\n                                    if (avatar) avatar.setBackground(nameskin, 'character');\r\n                                 }\r\n                                 game.saveConfig('skin', lib.config.skin);\r\n                              }\r\n                           });\r\n                           button._link = i;\r\n                           if (i) {\r\n                              button.setBackgroundImage('image/skin/' + nameskin + '/' + i + '.jpg');\r\n                           }\r\n                           else {\r\n                              if (gzbool && lib.character[nameskin2][4].contains('gzskin') && lib.config.mode_config.guozhan.guozhanSkin) button.setBackground(nameskin2, 'character', 'noskin');\r\n                              else button.setBackground(nameskin, 'character', 'noskin');\r\n                           }\r\n                        }\r\n                     };\r\n                     var num = 1;\r\n                     var loadImage = function () {\r\n                        var img = new Image();\r\n                        img.onload = function () {\r\n                           num++;\r\n                           loadImage();\r\n                        }\r\n                        img.onerror = function () {\r\n                           num--;\r\n                           createButtons(num);\r\n                        }\r\n                        img.src = lib.assetURL + 'image/skin/' + nameskin + '/' + num + '.jpg';\r\n                     }\r\n                     if (lib.config.change_skin) {\r\n                        loadImage();\r\n                     }\r\n                     else {\r\n                        createButtons(lib.skin[nameskin]);\r\n                     }\r\n                  };\r\n               };\r\n               if (lib.config.change_skin) {\r\n                  var img = new Image();\r\n                  img.onload = changeskin;\r\n                  img.src = lib.assetURL + 'image/skin/' + nameskin + '/1.jpg';\r\n               }\r\n               else if (lib.config.debug && lib.skin[nameskin]) {\r\n                  changeskin();\r\n               }\r\n               var ban = ui.create.div('.menubutton.large.ban.character', uiintro, '禁用', function (e) {\r\n                  if (this.classList.contains('unselectable')) return;\r\n                  if (typeof noedit == 'string') {\r\n                     this.classList.toggle('active');\r\n                     var bannedname = noedit + '_banned';\r\n                     if (!lib.config[bannedname]) {\r\n                        lib.config[bannedname] = [];\r\n                     }\r\n                     if (this.classList.contains('active')) {\r\n                        lib.config[bannedname].add(name);\r\n                     }\r\n                     else {\r\n                        lib.config[bannedname].remove(name);\r\n                     }\r\n                     game.saveConfig(bannedname, lib.config[bannedname]);\r\n                     ban.updateBanned();\r\n                  }\r\n                  else {\r\n                     ui.click.touchpop();\r\n                     ui.click.intro.call(this, e);\r\n                     _status.clicked = true;\r\n                  }\r\n               });\r\n               ban.link = name;\r\n               ban._banning = 'offline';\r\n               ban.updateBanned = function () {\r\n                  if (noedit === true) return;\r\n                  if (lib.config[get.mode() + '_banned'] && lib.config[get.mode() + '_banned'].contains(name)) {\r\n                     ban.classList.add('active');\r\n                  }\r\n                  else {\r\n                     ban.classList.remove('active');\r\n                  }\r\n                  if (sourcenode && sourcenode.updateBanned) {\r\n                     sourcenode.updateBanned();\r\n                  }\r\n               };\r\n               ban.updateBanned();\r\n               var fav = ui.create.div('.menubutton.large.fav', uiintro, '收藏', function () {\r\n                  if (this.classList.contains('unselectable')) return;\r\n                  this.classList.toggle('active');\r\n                  if (this.classList.contains('active')) {\r\n                     lib.config.favouriteCharacter.add(name);\r\n                  }\r\n                  else {\r\n                     lib.config.favouriteCharacter.remove(name);\r\n                  }\r\n                  game.saveConfig('favouriteCharacter', lib.config.favouriteCharacter);\r\n               });\r\n               if (noedit === true) {\r\n                  fav.classList.add('unselectable');\r\n                  ban.classList.add('unselectable');\r\n               }\r\n               else if (lib.config.favouriteCharacter.contains(name)) {\r\n                  fav.classList.add('active');\r\n               }\r\n               var intro = ui.create.div('.charactercontainer', uiintro);\r\n               if (get.characterIntro(name).length) {\r\n                  var intro0 = ui.create.div('.characterintro', get.characterIntro(name), intro);\r\n               }\r\n               if (get.characterTag(name).length) {\r\n                  var intro1 = ui.create.div('.characterintro.intro1', get.characterTag(name), intro);\r\n               }\r\n               var intro2 = ui.create.div('.characterintro.intro2', intro);\r\n               var list = get.character(name, 3) || [];\r\n               var skills = ui.create.div('.characterskill', intro);\r\n               if (lib.config.touchscreen) {\r\n                  lib.setScroll(intro);\r\n                  lib.setScroll(intro2);\r\n                  lib.setScroll(skills);\r\n               }\r\n\r\n               if (lib.config.mousewheel) {\r\n                  skills.onmousewheel = ui.click.mousewheel;\r\n               }\r\n               var clickSkill = function (e) {\r\n                  var current = this.parentNode.querySelector('.active');\r\n                  if (current) {\r\n                     current.classList.remove('active');\r\n                  }\r\n                  this.classList.add('active');\r\n                  intro2.innerHTML = '<span style=\"font-weight:bold;margin-right:5px\">' + get.translation(this.link) + '</span>' + get.skillInfoTranslation(this.link);\r\n                  var info = get.info(this.link);\r\n                  var skill = this.link;\r\n                  var playername = this.linkname;\r\n                  var skillnode = this;\r\n                  if (info.derivation) {\r\n                     var derivation = info.derivation;\r\n                     if (typeof derivation == 'string') {\r\n                        derivation = [derivation];\r\n                     }\r\n                     for (var i = 0; i < derivation.length; i++) {\r\n                        intro2.innerHTML += '<br><br><span style=\"font-weight:bold;margin-right:5px\">' + get.translation(derivation[i]) + '</span>' + get.skillInfoTranslation(derivation[i]);\r\n                     }\r\n                  }\r\n                  if (info.alter) {\r\n                     intro2.innerHTML += '<br><br><div class=\"hrefnode skillversion\"></div>';\r\n                     var skillversionnode = intro2.querySelector('.hrefnode.skillversion');\r\n                     if (lib.config.vintageSkills.contains(skill)) {\r\n                        skillversionnode.innerHTML = '切换至新版';\r\n                     }\r\n                     else {\r\n                        skillversionnode.innerHTML = '切换至旧版';\r\n                     }\r\n                     skillversionnode.listen(function () {\r\n                        if (lib.config.vintageSkills.contains(skill)) {\r\n                           lib.config.vintageSkills.remove(skill);\r\n                           lib.translate[skill + '_info'] = lib.translate[skill + '_info_alter'];\r\n                        }\r\n                        else {\r\n                           lib.config.vintageSkills.push(skill);\r\n                           lib.translate[skill + '_info'] = lib.translate[skill + '_info_origin'];\r\n                        }\r\n                        game.saveConfig('vintageSkills', lib.config.vintageSkills);\r\n                        clickSkill.call(skillnode, 'init');\r\n                     });\r\n                  }\r\n                  if (lib.config.background_speak && e !== 'init') {\r\n                     var audioname = this.link;\r\n                     if (info.audioname2 && info.audioname2[playername]) {\r\n                        audioname = info.audioname2[playername];\r\n                        info = lib.skill[audioname];\r\n                     }\r\n                     var audioinfo = info.audio;\r\n                     var that = this;\r\n                     var getIndex = function (i) {\r\n                        if (typeof that.audioindex != 'number') {\r\n                           that.audioindex = i;\r\n                        }\r\n                        that.audioindex++;\r\n                        if (that.audioindex > i) {\r\n                           that.audioindex = 1;\r\n                        }\r\n                        return that.audioindex;\r\n                     };\r\n                     if (typeof audioinfo == 'string') {\r\n                        if (audioinfo.indexOf('ext:') == 0) {\r\n                           audioinfo = audioinfo.split(':');\r\n                           if (audioinfo.length == 3) {\r\n                              if (audioinfo[2] == 'true') {\r\n                                 game.playAudio('..', 'extension', audioinfo[1], audioname);\r\n                              }\r\n                              else {\r\n                                 audioinfo[2] = parseInt(audioinfo[2]);\r\n                                 if (audioinfo[2]) {\r\n                                    game.playAudio('..', 'extension', audioinfo[1], audioname + getIndex(audioinfo[2]));\r\n                                 }\r\n                              }\r\n                           }\r\n                           return;\r\n                        }\r\n                        else {\r\n                           audioname = audioinfo;\r\n                           if (lib.skill[audioinfo]) {\r\n                              audioinfo = lib.skill[audioinfo].audio;\r\n                           }\r\n                        }\r\n                     }\r\n                     else if (Array.isArray(audioinfo)) {\r\n                        audioname = audioinfo[0];\r\n                        audioinfo = audioinfo[1];\r\n                     }\r\n                     if (typeof audioinfo == 'number') {\r\n                        if (Array.isArray(info.audioname) && info.audioname.contains(playername)) audioname = audioname + '_' + playername;\r\n                        game.playAudio('skill', audioname + getIndex(audioinfo));\r\n                     }\r\n                     else if (audioinfo) {\r\n                        if (Array.isArray(info.audioname) && info.audioname.contains(playername)) audioname = audioname + '_' + playername;\r\n                        game.playAudio('skill', audioname);\r\n                     }\r\n                     else if ( true && info.audio !== false) {\r\n                        if (Array.isArray(info.audioname) && info.audioname.contains(playername)) audioname = audioname + '_' + playername;\r\n                        game.playSkillAudio(audioname, getIndex(2));\r\n                     }\r\n                  }\r\n               }\r\n               var initskill = false;\r\n               for (var i = 0; i < list.length; i++) {\r\n                  if (!get.info(list[i]) || get.info(list[i]).nopop) continue;\r\n                  if (!lib.translate[list[i]] || !lib.translate[list[i] + '_info']) continue;\r\n                  var skilltrans = get.translation(list[i]);\r\n                  if (skilltrans.indexOf('&nbsp;') == 0) {\r\n                     skilltrans = skilltrans.slice(6);\r\n                  }\r\n                  var current = ui.create.div('.menubutton.large', skills, clickSkill, skilltrans);\r\n                  current.link = list[i];\r\n                  current.linkname = name;\r\n                  if (!initskill) {\r\n                     initskill = true;\r\n                     clickSkill.call(current, 'init');\r\n                  }\r\n               }\r\n\r\n               uiintro.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.touchpop);\r\n               layer.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', clicklayer);\r\n               ui.window.appendChild(layer);\r\n            },\r\n            /**\r\n             * 详细信息弹窗\r\n             * @function\r\n             * @param {(MouseEvent|TouchEvent)} e \r\n             * @returns {(undefined|false|HTMLDivElement)}\r\n             */\r\n            intro: function (e) {\r\n               if (_status.dragged) return;\r\n               _status.clicked = true;\r\n               if (this.classList.contains('player') && !this.name) {\r\n                  return;\r\n               }\r\n               if (this.parentNode == ui.historybar) {\r\n                  if (ui.historybar.style.zIndex == '22') {\r\n                     if (_status.removePop) {\r\n                        if (_status.removePop(this) == false) return;\r\n                     }\r\n                     else {\r\n                        return;\r\n                     }\r\n                  }\r\n                  ui.historybar.style.zIndex = 22;\r\n               }\r\n               var uiintro;\r\n               if (this.classList.contains('card') && this.parentNode &&\r\n                  this.parentNode.classList.contains('equips') && get.is.phoneLayout() &&\r\n                  !get.is.mobileMe(this.parentNode.parentNode)) {\r\n                  uiintro = get.nodeintro(this.parentNode.parentNode, false, e);\r\n               }\r\n               uiintro = uiintro || get.nodeintro(this, false, e);\r\n               if (!uiintro) return;\r\n               uiintro.classList.add('popped');\r\n               uiintro.classList.add('static');\r\n               ui.window.appendChild(uiintro);\r\n               var layer = ui.create.div('.poplayer', ui.window);\r\n               var clicklayer = function (e) {\r\n                  if (_status.touchpopping) return;\r\n                  delete ui.throwEmotion;\r\n                  delete _status.removePop;\r\n                  uiintro.delete();\r\n                  this.remove();\r\n                  ui.historybar.style.zIndex = '';\r\n                  delete _status.currentlogv;\r\n                  if (!ui.arena.classList.contains('menupaused') && !uiintro.noresume) game.resume2();\r\n                  if (e && e.stopPropagation) e.stopPropagation();\r\n                  if (uiintro._onclose) {\r\n                     uiintro._onclose();\r\n                  }\r\n                  return false;\r\n               }\r\n               layer.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', clicklayer);\r\n               if (!lib.config.touchscreen) layer.oncontextmenu = clicklayer;\r\n               if (this.parentNode == ui.historybar && lib.config.touchscreen) {\r\n                  var rect = this.getBoundingClientRect();\r\n                  e = { clientX: 0, clientY: rect.top + 30 };\r\n               }\r\n               lib.placePoppedDialog(uiintro, e);\r\n               if (this.parentNode == ui.historybar) {\r\n                  if (lib.config.show_history == 'right') {\r\n                     uiintro.style.left = (ui.historybar.offsetLeft - 230) + 'px';\r\n                  }\r\n                  else {\r\n                     uiintro.style.left = (ui.historybar.offsetLeft + 60) + 'px';\r\n                  }\r\n               }\r\n               uiintro.style.zIndex = 21;\r\n               var clickintro = function () {\r\n                  if (_status.touchpopping) return;\r\n                  delete _status.removePop;\r\n                  layer.remove();\r\n                  this.delete();\r\n                  ui.historybar.style.zIndex = '';\r\n                  delete _status.currentlogv;\r\n                  if (!ui.arena.classList.contains('menupaused') && !uiintro.noresume) game.resume2();\r\n                  if (uiintro._onclose) {\r\n                     uiintro._onclose();\r\n                  }\r\n               };\r\n               var currentpop = this;\r\n               _status.removePop = function (node) {\r\n                  if (node == currentpop) return false;\r\n                  layer.remove();\r\n                  uiintro.delete();\r\n                  delete _status.removePop;\r\n                  return true;\r\n               };\r\n               if (uiintro.clickintro) {\r\n                  uiintro.listen(function () {\r\n                     _status.clicked = true;\r\n                  });\r\n                  uiintro._clickintro = clicklayer;\r\n               }\r\n               else if (!lib.config.touchscreen) {\r\n                  uiintro.addEventListener('mouseleave', clickintro);\r\n                  uiintro.addEventListener('click', clickintro);\r\n               }\r\n               else if (uiintro.touchclose) {\r\n                  uiintro.listen(clickintro);\r\n               }\r\n               uiintro._close = clicklayer;\r\n\r\n               game.pause2();\r\n               return uiintro;\r\n            },\r\n            intro2: function () {\r\n               if (ui.intro) {\r\n                  ui.intro.close();\r\n                  if (ui.intro.source == this) {\r\n                     delete ui.intro;\r\n                     ui.control.show();\r\n                     game.resume2();\r\n                     return;\r\n                  }\r\n               }\r\n            },\r\n            /**\r\n             * 托管按钮点击函数\r\n             * @function\r\n             */\r\n            auto: function () {\r\n               if (ui.auto.classList.contains('hidden') && arguments[0] !== 'forced') return;\r\n               if (_status.paused2) return;\r\n               ui.click.shortcut(false);\r\n               if (!_status.auto) {\r\n                  _status.auto = true;\r\n                  ui.auto.classList.add('glow');\r\n                  ui.arena.classList.add('auto');\r\n\r\n                  if (_status.imchoosing && _status.paused) {\r\n                     if (ui.confirm) ui.confirm.close();\r\n                     ui.control.hide();\r\n                     if (_status.event.switchToAuto) {\r\n                        _status.event.switchToAuto();\r\n                     }\r\n                     else {\r\n                        if (_status.paused && _status.imchoosing) {\r\n                           game.uncheck();\r\n                           _status.event.redo();\r\n                        }\r\n                     }\r\n                     game.resume();\r\n                  }\r\n                  else if (_status.event.switchToAuto) {\r\n                     _status.event.switchToAuto();\r\n                  }\r\n                  if (game.online) {\r\n                     game.send('auto');\r\n                  }\r\n                  else if (_status.connectMode) {\r\n                     game.broadcastAll(function (player) {\r\n                        player.setNickname(player.nickname + ' - 托管');\r\n                     }, game.me);\r\n                  }\r\n               }\r\n               else {\r\n                  if (game.notMe) return;\r\n                  ui.control.show();\r\n                  _status.auto = false;\r\n                  ui.auto.classList.remove('glow');\r\n                  ui.arena.classList.remove('auto');\r\n\r\n                  if (game.online) {\r\n                     game.send('unauto');\r\n                  }\r\n                  else if (_status.connectMode) {\r\n                     game.broadcastAll(function (player) {\r\n                        player.setNickname(player.nickname);\r\n                     }, game.me);\r\n                  }\r\n               }\r\n            },\r\n            /**\r\n             * 无懈按钮点击函数\r\n             * @function\r\n             */\r\n            wuxie: function () {\r\n               if (this.classList.contains('hidden')) return;\r\n               this.classList.toggle('glow');\r\n               if (this.classList.contains('glow') && _status.event.type == 'wuxie' &&\r\n                  _status.event.isMine() && ui.confirm && _status.imchoosing) {\r\n                  ui.click.cancel(ui.confirm.lastChild);\r\n               }\r\n            },\r\n            tempnowuxie: function () {\r\n               if (this.classList.contains('hidden')) return;\r\n               this.classList.toggle('glow');\r\n               if (this.classList.contains('glow') && _status.event.type == 'wuxie' &&\r\n                  _status.event.isMine() && ui.confirm && _status.imchoosing) {\r\n                  var triggerevent = _status.event.getTrigger();\r\n                  if (triggerevent && this._origin == triggerevent.parent.id) {\r\n                     if (triggerevent.targets && triggerevent.num == triggerevent.targets.length - 1) {\r\n                        this.close();\r\n                     }\r\n                  }\r\n                  ui.click.cancel(ui.confirm.lastChild);\r\n               }\r\n            },\r\n            pause: function () {\r\n               if (_status.paused2) return;\r\n               if (_status.nopause) return;\r\n               if (!_status.video) {\r\n                  if (ui.pause.classList.contains('hidden')) return;\r\n                  if (!_status.gameStarted) return;\r\n               }\r\n               ui.system.hide();\r\n               game.pause2();\r\n               var node = ui.create.pause().animate('start');\r\n               ui.sidebar3.innerHTML = '';\r\n               if (lib.config.show_discardpile) {\r\n                  for (var i = 0; i < ui.discardPile.childNodes.length; i++) {\r\n                     var div = ui.create.div(ui.sidebar3);\r\n                     div.innerHTML = get.translation(ui.discardPile.childNodes[i]);\r\n                     ui.sidebar3.insertBefore(div, ui.sidebar3.firstChild);\r\n                  }\r\n               }\r\n               node.appendChild(ui.sidebar);\r\n               node.appendChild(ui.sidebar3);\r\n               ui.historybar.classList.add('paused');\r\n               ui.arena.classList.add('paused');\r\n               ui.window.classList.add('touchinfohidden');\r\n               ui.time.hide();\r\n               if (game.onpause) {\r\n                  game.onpause();\r\n               }\r\n            },\r\n            resume: function (e) {\r\n               if (_status.pausing) return;\r\n               if (_status.dragged) return;\r\n               if (_status.clicked) return;\r\n               this.delete();\r\n               ui.system.show();\r\n               ui.time.show();\r\n               ui.historybar.classList.remove('paused');\r\n               ui.arena.classList.remove('paused');\r\n               ui.window.classList.remove('touchinfohidden');\r\n               game.resume2();\r\n               e.stopPropagation();\r\n               if (game.onresume) {\r\n                  game.onresume();\r\n               }\r\n               return false;\r\n            },\r\n            config: function () {\r\n               if (!ui.click.configMenu) return;\r\n               if (_status.paused2) _status.config2 = false;\r\n               else _status.config2 = true;\r\n\r\n               _status.clicked = true;\r\n               game.pause2();\r\n               ui.click.configMenu();\r\n               ui.system1.classList.remove('shown');\r\n               ui.system2.classList.remove('shown');\r\n            },\r\n            swap: function () {\r\n               if (_status.dragged) return;\r\n               if (this.classList.contains('dead')) return;\r\n               if (_status.over) return;\r\n               if (ui.auto) ui.auto.show();\r\n               if (ui.wuxie) ui.wuxie.show();\r\n               game.swapPlayer(this);\r\n            },\r\n            mousewheel: function (evt) {\r\n               if (this.firstChild && this.firstChild.classList.contains('handcards') &&\r\n                  !this.classList.contains('scrollh')) return;\r\n               var node = this;\r\n               var num = this._scrollnum || 6;\r\n               var speed = this._scrollspeed || 16;\r\n               clearInterval(node.interval);\r\n               if (evt.detail > 0 || evt.wheelDelta < 0) {\r\n                  node.interval = setInterval(function () {\r\n                     if (num-- && Math.abs(node.scrollLeft + node.clientWidth - node.scrollWidth) > 0) {\r\n                        node.scrollLeft += speed;\r\n                     }\r\n                     else {\r\n                        clearInterval(node.interval);\r\n                     }\r\n                  }, 16);\r\n               }\r\n               else {\r\n                  node.interval = setInterval(function () {\r\n                     if (num-- && node.scrollLeft > 0) {\r\n                        node.scrollLeft -= speed;\r\n                     }\r\n                     else {\r\n                        clearInterval(node.interval);\r\n                     }\r\n                  }, 16);\r\n               }\r\n            },\r\n            touchStart: function (e) {\r\n               this.startX = e.touches[0].clientX / game.documentZoom;\r\n               this.startY = e.touches[0].clientY / game.documentZoom;\r\n               _status.dragged = false;\r\n            },\r\n            dialogtouchStart: function (e) {\r\n               ui.click.touchStart.call(this, e);\r\n               _status.dialogtouched = true;\r\n            },\r\n            touchScroll: function (e) {\r\n               if (_status.mousedragging) return;\r\n               if (_status.draggingtouchdialog) return;\r\n               if (!_status.dragged) {\r\n                  if (Math.abs(e.touches[0].clientX / game.documentZoom - this.startX) > 10 ||\r\n                     Math.abs(e.touches[0].clientY / game.documentZoom - this.startY) > 10) {\r\n                     _status.dragged = true;\r\n                  }\r\n               }\r\n               if ((this == ui.handcards1Container || this == ui.handcards2Container) && !this.classList.contains('scrollh')) {\r\n                  e.preventDefault();\r\n               }\r\n               else if (lib.device == 'ios' && this.scrollHeight <= this.offsetHeight + 5 && this.scrollWidth <= this.offsetWidth + 5) {\r\n                  e.preventDefault();\r\n               }\r\n               else {\r\n                  delete _status._swipeorigin;\r\n                  e.stopPropagation();\r\n               }\r\n            },\r\n            autoskill: function (bool, node) {\r\n               var list = lib.config.autoskilllist;\r\n               if (bool) {\r\n                  list.remove(node.link);\r\n               }\r\n               else {\r\n                  list.add(node.link);\r\n               }\r\n               game.saveConfig('autoskilllist', list);\r\n            },\r\n            skillbutton: function () {\r\n               this.func(this.link);\r\n            },\r\n            autoskill2: function (e) {\r\n               this.classList.toggle('on');\r\n               var list = [];\r\n               if (lib.skill[this.link].frequent) {\r\n                  list.push(this.link);\r\n               }\r\n               if (lib.skill[this.link].subfrequent) {\r\n                  for (var i = 0; i < lib.skill[this.link].subfrequent.length; i++) {\r\n                     list.push(this.link + '_' + lib.skill[this.link].subfrequent[i]);\r\n                  }\r\n               }\r\n               for (var i = 0; i < list.length; i++) {\r\n                  if (this.classList.contains('on')) {\r\n                     lib.config.autoskilllist.remove(list[i]);\r\n                  }\r\n                  else {\r\n                     lib.config.autoskilllist.add(list[i]);\r\n                  }\r\n               }\r\n               game.saveConfig('autoskilllist', lib.config.autoskilllist);\r\n               ui.click.touchpop();\r\n               e.stopPropagation();\r\n            },\r\n            hiddenskill: function (e) {\r\n               this.classList.toggle('on');\r\n               var hidden = lib.skill[this.link].preHidden;\r\n               if (Array.isArray(hidden)) {\r\n                  if (this.classList.contains('on')) {\r\n                     _status.prehidden_skills.removeArray(hidden);\r\n                  }\r\n                  else {\r\n                     _status.prehidden_skills.addArray(hidden);\r\n                  }\r\n               }\r\n               if (this.classList.contains('on')) {\r\n                  _status.prehidden_skills.remove(this.link);\r\n               }\r\n               else {\r\n                  _status.prehidden_skills.add(this.link);\r\n               }\r\n               ui.click.touchpop();\r\n               e.stopPropagation();\r\n            },\r\n            rightplayer: function (e) {\r\n               if (this._nopup) return false;\r\n               if (_status.clickedplayer) {\r\n                  return false;\r\n               }\r\n\r\n               if (this._mouseenterdialog && this._mouseenterdialog.parentNode) {\r\n                  this._mouseenterdialog.delete();\r\n               }\r\n               else {\r\n                  ui.click.intro.call(this, e);\r\n               }\r\n               _status.clickedplayer = true;\r\n               _status.clicked = false;\r\n               ui.click.longpresscancel.call(this);\r\n               return false;\r\n            },\r\n            right: function (e) {\r\n               if (window.inSplash) return false;\r\n               if (lib.config.touchscreen) return;\r\n               if (_status.noright) {\r\n                  _status.noright = false;\r\n                  return false;\r\n               }\r\n               if (_status.clickedplayer) {\r\n                  _status.clickedplayer = false;\r\n                  return;\r\n               }\r\n               game.closePopped();\r\n               switch (lib.config.right_click) {\r\n                  case 'shortcut': ui.click.shortcut(); break;\r\n                  case 'pause': ui.click.pause(); break;\r\n                  case 'auto': ui.click.auto(); break;\r\n                  case 'config': ui.click.config(); break;\r\n               }\r\n               e.preventDefault();\r\n               return false;\r\n            }\r\n         },\r\n         /**\r\n          * 当前被选择的对象\r\n          * 在游戏中非常有用的对象\r\n          * ui.selected = {buttons: [被选择的按钮], cards: [被选择的卡牌], targets: [被选择的角色]},\r\n          * @type {!Object}\r\n          */\r\n         selected: {\r\n            buttons: [], cards: [], targets: []\r\n         },\r\n         /**\r\n          * 清除残留ui\r\n          * 例如：被使用或打出的牌，会显示并停留在画面中央，直到ui.clear将其清除\r\n          * @function\r\n          */\r\n         clear: function () {\r\n            game.addVideo('uiClear');\r\n            var thrown = document.getElementsByClassName('thrown');\r\n            var nodes = [];\r\n            var i;\r\n            for (i = 0; i < thrown.length; i++) {\r\n               nodes.push(thrown[i]);\r\n            }\r\n            for (i = 0; i < nodes.length; i++) {\r\n               if (!nodes[i].fixed) nodes[i].delete();\r\n            }\r\n         },\r\n         updatec: function () {\r\n            if (_status.noupdatec) return;\r\n            var length = 0;\r\n            var controls = [];\r\n            var widths = [];\r\n            var add = function (node, first) {\r\n               var thiswidth = parseInt(node.style.width);\r\n               if (thiswidth) {\r\n                  thiswidth += 8;\r\n                  length += thiswidth;\r\n                  if (first) {\r\n                     widths.unshift(thiswidth);\r\n                  }\r\n                  else {\r\n                     widths.push(thiswidth);\r\n                  }\r\n               }\r\n               else {\r\n                  length += node.offsetWidth;\r\n                  if (first) {\r\n                     widths.unshift(node.offsetWidth);\r\n                  }\r\n                  else {\r\n                     widths.push(node.offsetWidth);\r\n                  }\r\n               }\r\n               if (first) {\r\n                  controls.unshift(node);\r\n               }\r\n               else {\r\n                  controls.push(node);\r\n               }\r\n            }\r\n            var stayleft = null;\r\n            for (var i = 0; i < ui.control.childNodes.length; i++) {\r\n               if (ui.control.childNodes[i].classList.contains('removing')) continue;\r\n               if (!stayleft && lib.config.wuxie_right && ui.control.childNodes[i].stayleft) {\r\n                  stayleft = ui.control.childNodes[i];\r\n               }\r\n               else {\r\n                  add(ui.control.childNodes[i]);\r\n               }\r\n            }\r\n            if (stayleft) {\r\n               var fullwidth = 0;\r\n               var fullright = (game.layout == 'long' || game.layout == 'long2' || game.chess || (game.layout != 'nova' && parseInt(ui.arena.dataset.number) <= 5));\r\n               for (var i = 0; i < widths.length; i++) {\r\n                  fullwidth += widths[i] + 6;\r\n                  if (get.is.phoneLayout()) fullwidth += 6;\r\n               }\r\n               fullwidth /= 2;\r\n               fullwidth += stayleft.offsetWidth;\r\n               if (get.is.phoneLayout()) {\r\n                  fullwidth += 18;\r\n               }\r\n               else {\r\n                  fullwidth += 12;\r\n               }\r\n               if (fullright) {\r\n                  fullwidth += 124;\r\n                  if ((game.layout == 'long2' || game.layout == 'nova') && ui.arena.dataset.number == '8' && get.mode() != 'boss') {\r\n                     fullwidth += game.me.getLeft();\r\n                  }\r\n               }\r\n               else {\r\n                  fullwidth += 154;\r\n               }\r\n               if (game.layout != 'default' && game.layout != 'newlayout' && ui.arena.offsetWidth / 2 >= fullwidth) {\r\n                  var current_offset = stayleft._offset;\r\n                  if (fullright) {\r\n                     stayleft._offset = Math.ceil(-ui.arena.offsetWidth / 2) + 135;\r\n                     if ((game.layout == 'long2' || game.layout == 'nova') && ui.arena.dataset.number == '8' && get.mode() != 'boss') {\r\n                        stayleft._offset += game.me.getLeft();\r\n                     }\r\n                  }\r\n                  else {\r\n                     stayleft._offset = Math.ceil(-ui.arena.offsetWidth / 2) + 165;\r\n                  }\r\n                  if (current_offset != stayleft._offset) {\r\n                     stayleft.animate('controlpressdownx', 500);\r\n                     stayleft.style.transform = 'translateX(' + stayleft._offset + 'px)';\r\n                  }\r\n               }\r\n               else {\r\n                  add(stayleft, true);\r\n               }\r\n            }\r\n            if (!controls.length) return;\r\n            var offset = -length / 2;\r\n            var control = controls.shift();\r\n            if (control._offset != offset) {\r\n               control.animate('controlpressdownx', 500);\r\n               control.style.transform = 'translateX(' + offset + 'px)';\r\n               control._offset = offset;\r\n            }\r\n            while (controls.length) {\r\n               var control = controls.shift();\r\n               var width = widths.shift();\r\n               offset += width + 6;\r\n               if (get.is.phoneLayout()) {\r\n                  offset += 6;\r\n               }\r\n               if (control._offset != offset) {\r\n                  control.animate('controlpressdownx', 500);\r\n                  control.style.transform = 'translateX(' + offset + 'px)';\r\n                  control._offset = offset;\r\n               }\r\n            }\r\n         },\r\n         updatex: function () {\r\n            ui.update.apply(this, arguments);\r\n            ui.updatehl();\r\n            for (var i = 0; i < lib.onresize.length; i++) {\r\n               lib.onresize[i]();\r\n            }\r\n            var cfg = game.documentZoom / game.deviceZoom;\r\n            ui.updated();\r\n            game.documentZoom = cfg * game.deviceZoom;\r\n            ui.updatez();\r\n            delete ui._updatexr;\r\n         },\r\n         updatexr: function () {\r\n            if (ui._updatexr) {\r\n               clearTimeout(ui._updatexr);\r\n            }\r\n            ui._updatexr = setTimeout(ui.updatex, 500);\r\n         },\r\n         /**\r\n          * 更新标记位置\r\n          * @function\r\n          * @param {GameCores.GameObjects.Player} player 要更新的角色\r\n          * @param {HTMLDivElement} nodes 父节点，对其中作为标记的子节点变换位置\r\n          * @param {?number} start 起始子节点[>=0]，从该子节点开始变换位置\r\n          * @param {?boolean} inv 是否反向，如果为true表示反向，如果为false或未指定则默认正向；正向为X轴的正方向，如果沿Y轴位移，不做变换\r\n          */\r\n         updatejm: function (player, nodes, start, inv) {\r\n            if (typeof start != 'number') {\r\n               start = 0;\r\n            }\r\n            var str;\r\n            if (get.is.mobileMe(player) || game.layout == 'default' || player.classList.contains('linked')) {\r\n               str = 'translateX(';\r\n               if (inv) {\r\n                  str += '-';\r\n               }\r\n            }\r\n            else {\r\n               str = 'translateY(';\r\n            }\r\n            var num = 0;\r\n            for (var i = 0; i < nodes.childElementCount; i++) {\r\n               var node = nodes.childNodes[i];\r\n               if (i < start) {\r\n                  node.style.transform = '';\r\n               }\r\n               else if (node.classList.contains('removing')) {\r\n                  start++;\r\n               }\r\n               else {\r\n                  ui.refresh(node);\r\n                  node.classList.remove('drawinghidden');\r\n                  node._transform = str + ((i - start) * 28) + 'px)';\r\n                  node.style.transform = node._transform;\r\n               }\r\n            }\r\n         },\r\n         /**\r\n          * 更新角色标记\r\n          * @function\r\n          * @param {?GameCores.GameObjects.Player} player 要更新的角色，如果未指定则对全部角色更新\r\n          */\r\n         updatem: function (player) {\r\n            if (player) {\r\n               var start = 0;\r\n               if (!player.classList.contains('linked2') || !ui.arena.classList.contains('nolink')) {\r\n                  start = 1;\r\n               }\r\n               ui.updatejm(player, player.node.marks, start, get.is.mobileMe(player));\r\n            }\r\n            else {\r\n               for (var i = 0; i < game.players.length; i++) {\r\n                  ui.updatem(game.players[i]);\r\n               }\r\n            }\r\n         },\r\n         /**\r\n          * 更新角色判定标记\r\n          * @function\r\n          * @param {?GameCores.GameObjects.Player} player 要更新的角色，如果未指定则对全部角色更新\r\n          */\r\n         updatej: function (player) {\r\n            if (player) {\r\n               ui.updatejm(player, player.node.judges);\r\n            }\r\n            else {\r\n               for (var i = 0; i < game.players.length; i++) {\r\n                  ui.updatej(game.players[i]);\r\n               }\r\n            }\r\n         },\r\n         updatehl: function () {\r\n            if (!game.me) return;\r\n            if (!ui.handcards1Container || !ui.handcards2Container) return;\r\n            if (!ui.handcards1Container.childNodes.length) return;\r\n            var hs1 = [], hs2 = [];\r\n            for (var i = 0; i < ui.handcards1Container.firstChild.childElementCount; i++) {\r\n               if (!ui.handcards1Container.firstChild.childNodes[i].classList.contains('removing')) {\r\n                  hs1.push(ui.handcards1Container.firstChild.childNodes[i]);\r\n               }\r\n            }\r\n            for (var i = 0; i < ui.handcards2Container.firstChild.childElementCount; i++) {\r\n               if (!ui.handcards2Container.firstChild.childNodes[i].classList.contains('removing')) {\r\n                  hs2.push(ui.handcards2Container.firstChild.childNodes[i]);\r\n               }\r\n            }\r\n            var offset1, offset12 = 0;\r\n            if (!lib.config.fold_card) {\r\n               offset1 = 112;\r\n               ui.handcards1Container.classList.add('scrollh');\r\n            }\r\n            else {\r\n               offset1 = Math.min(112, (ui.handcards1Container.offsetWidth - 128) / (hs1.length - 1));\r\n               if (hs1.length > 1 && offset1 < 32) {\r\n                  offset1 = 32;\r\n                  ui.handcards1Container.classList.add('scrollh');\r\n               }\r\n               else {\r\n                  ui.handcards1Container.classList.remove('scrollh');\r\n               }\r\n            }\r\n            if (offset1 < 100) {\r\n               offset12 = 100 - offset1;\r\n            }\r\n            for (var i = 0; i < hs1.length; i++) {\r\n               hs1[i].style.transform = 'translateX(' + (i * offset1) + 'px)';\r\n               hs1[i]._transform = 'translateX(' + (i * offset1) + 'px)';\r\n               ui.refresh(hs1[i]);\r\n               hs1[i].classList.remove('drawinghidden');\r\n               if (offset12 > 40) {\r\n                  offset12 = 90 - hs1[i].node.info.offsetWidth;\r\n                  hs1[i].node.info.querySelector('span').style.display = 'none';\r\n                  if (hs1[i].node.name.classList.contains('long')) {\r\n                     hs1[i].node.name.style.transform = 'translateY(16px)  scale(0.85)';\r\n                     hs1[i].node.name.style.transformOrigin = 'top left';\r\n                  }\r\n                  else {\r\n                     hs1[i].node.name.style.transform = 'translateY(16px)';\r\n                  }\r\n                  hs1[i].node.info.style.transform = 'translateX(-' + offset12 + 'px) translateY(-3px)';\r\n               }\r\n               else {\r\n                  hs1[i].node.info.querySelector('span').style.display = '';\r\n                  hs1[i].node.name.style.transform = '';\r\n                  hs1[i].node.name.style.transformOrigin = '';\r\n                  hs1[i].node.info.style.transform = 'translateX(-' + offset12 + 'px)';\r\n               }\r\n            }\r\n            ui.handcards1Container.firstChild.style.width = (offset1 * (hs1.length - 1) + 118) + 'px';\r\n\r\n            var offset2, offset22 = 0;\r\n            if (!lib.config.fold_card) {\r\n               offset2 = 112;\r\n               ui.handcards2Container.classList.add('scrollh');\r\n            }\r\n            else {\r\n               offset2 = Math.min(112, (ui.handcards2Container.offsetWidth - 128) / (hs2.length - 1));\r\n               if (hs2.length > 1 && offset2 < 32) {\r\n                  offset2 = 32;\r\n                  ui.handcards2Container.classList.add('scrollh');\r\n               }\r\n               else {\r\n                  ui.handcards2Container.classList.remove('scrollh');\r\n               }\r\n            }\r\n            if (offset2 < 100) {\r\n               offset22 = 100 - offset2;\r\n            }\r\n            for (var i = 0; i < hs2.length; i++) {\r\n               hs2[i].style.transform = 'translateX(' + (i * offset2) + 'px)';\r\n               hs2[i]._transform = 'translateX(' + (i * offset2) + 'px)';\r\n               ui.refresh(hs2[i]);\r\n               hs2[i].classList.remove('drawinghidden');\r\n               if (offset22 > 40) {\r\n                  offset22 = 90 - hs2[i].node.info.offsetWidth;\r\n                  hs2[i].node.info.querySelector('span').style.display = 'none';\r\n                  if (hs2[i].node.name.classList.contains('long')) {\r\n                     hs2[i].node.name.style.transform = 'translateY(16px)  scale(0.85)';\r\n                     hs2[i].node.name.style.transformOrigin = 'top left';\r\n                  }\r\n                  else {\r\n                     hs2[i].node.name.style.transform = 'translateY(16px)';\r\n                  }\r\n                  hs2[i].node.info.style.transform = 'translateX(-' + offset22 + 'px) translateY(-3px)';\r\n               }\r\n               else {\r\n                  hs2[i].node.info.querySelector('span').style.display = '';\r\n                  hs2[i].node.name.style.transform = '';\r\n                  hs2[i].node.name.style.transformOrigin = '';\r\n                  hs2[i].node.info.style.transform = 'translateX(-' + offset22 + 'px)';\r\n               }\r\n            }\r\n            ui.handcards2Container.firstChild.style.width = (offset2 * (hs2.length - 1) + 118) + 'px';\r\n         },\r\n         /**\r\n          * 更新角色手牌\r\n          * @function\r\n          * @param {?boolean} compute 是否重新计算位置，如果为true则计算\r\n          */\r\n         updateh: function (compute) {\r\n            if (!game.me) return;\r\n            if (!ui.handcards1Container) return;\r\n            if (lib.config.low_performance) {\r\n               if (compute) {\r\n                  ui.updatehl();\r\n                  setTimeout(ui.updatehl, 1000);\r\n               }\r\n               return;\r\n            }\r\n            if (compute) {\r\n               ui.handcards1Container._handcardsWidth = ui.handcards1Container.offsetWidth;\r\n               ui.handcards2Container._handcardsWidth = ui.handcards2Container.offsetWidth;\r\n            }\r\n            ui.updatehx(game.me.node.handcards1);\r\n            ui.updatehx(game.me.node.handcards2);\r\n         },\r\n         updatehx: function (node) {\r\n            var width = node.parentNode._handcardsWidth;\r\n            var num = node.childElementCount - node.getElementsByClassName('removing').length;\r\n            node.classList.remove('fold0');\r\n            node.classList.remove('fold1');\r\n            node.classList.remove('fold2');\r\n            node.classList.remove('fold3');\r\n            if (num * 78 + 40 >= width) {\r\n               // node.dataset.fold=3;\r\n               node.classList.add('fold3');\r\n            }\r\n            else if (num * 93 + 25 >= width) {\r\n               // node.dataset.fold=2;\r\n               node.classList.add('fold2');\r\n            }\r\n            else if (num * 112 + 6 >= width) {\r\n               // node.dataset.fold=1;\r\n               node.classList.add('fold1');\r\n            }\r\n            else {\r\n               // node.dataset.fold=0;\r\n               node.classList.add('fold0');\r\n            }\r\n         },\r\n         /**\r\n          * 更新设备缩放比例\r\n          * @function\r\n          */\r\n         updated: function () {\r\n            if (document.documentElement.offsetWidth < 900 || document.documentElement.offsetHeight < 500) {\r\n               /**\r\n                * 设备缩放比例\r\n                * @type {number}\r\n                */\r\n               game.deviceZoom = Math.min(\r\n                  Math.round(document.documentElement.offsetWidth / 98) / 10,//?? 98?\r\n                  Math.round(document.documentElement.offsetHeight / 50) / 10\r\n               );\r\n            }\r\n            else {\r\n               game.deviceZoom = 1;\r\n            }\r\n         },\r\n         /**\r\n          * 根据{@link game.documenZoom}调整document大小\r\n          * @function\r\n          */\r\n         updatez: function () {\r\n            var width = document.documentElement.offsetWidth;\r\n            var height = document.documentElement.offsetHeight;\r\n            var zoom = game.documentZoom;\r\n            if (zoom != 1) {\r\n               document.body.style.width = Math.round(width / zoom) + 'px';\r\n               document.body.style.height = Math.round(height / zoom) + 'px';\r\n               document.body.style.transform = 'scale(' + (Math.floor(zoom * 100) / 100) + ')';\r\n            }\r\n            else {\r\n               document.body.style.width = width + 'px';\r\n               document.body.style.height = height + 'px';\r\n               document.body.style.transform = '';\r\n            }\r\n         },\r\n         /**\r\n          * 更新UI，弹窗\r\n          * @function\r\n          */\r\n         update: function () {\r\n            for (var i = 0; i < ui.updates.length; i++) {\r\n               ui.updates[i]();\r\n            }\r\n            if (ui.dialog && !ui.dialog.classList.contains('noupdate')) {\r\n               if (game.chess) {\r\n                  if (ui.dialog.content.scrollHeight < 240 && (!ui.dialog.buttons || !ui.dialog.buttons.length) && !ui.dialog.forcebutton) {\r\n                     ui.dialog.style.height = ui.dialog.content.offsetHeight + 'px';\r\n                     ui.dialog.classList.add('slim');\r\n                  }\r\n                  else {\r\n                     ui.dialog.style.height = '';\r\n                     ui.dialog.classList.remove('slim');\r\n                  }\r\n               }\r\n               else {\r\n                  if ((!ui.dialog.buttons || !ui.dialog.buttons.length) && !ui.dialog.forcebutton && ui.dialog.classList.contains('fullheight') == false && get.mode() != 'stone') {\r\n                     ui.dialog.classList.add('nobutton');\r\n                     if (ui.dialog.content.offsetHeight < 240) {\r\n                        if (!ui.dialog._heightset) {\r\n                           ui.dialog._heightset = ui.dialog.style.height || true;\r\n                        }\r\n                        ui.dialog.style.height = ui.dialog.content.offsetHeight + 'px';\r\n                        if (lib.config.show_log != 'off') {\r\n                           ui.dialog.classList.add('scroll1');\r\n                           ui.dialog.classList.add('scroll2');\r\n                           return;\r\n                        }\r\n                     }\r\n                     else {\r\n                        if (typeof ui.dialog._heightset == 'string') {\r\n                           ui.dialog.style.height = ui.dialog._heightset;\r\n                        }\r\n                        else if (ui.dialog._heightset) {\r\n                           ui.dialog.style.height = '';\r\n                        }\r\n                        delete ui.dialog._heightset;\r\n                     }\r\n                  }\r\n                  else {\r\n                     if (typeof ui.dialog._heightset == 'string') {\r\n                        ui.dialog.style.height = ui.dialog._heightset;\r\n                     }\r\n                     else if (ui.dialog._heightset) {\r\n                        ui.dialog.style.height = '';\r\n                     }\r\n                     delete ui.dialog._heightset;\r\n                     ui.dialog.classList.remove('nobutton');\r\n                  }\r\n               }\r\n               var height1 = ui.dialog.content.offsetHeight;\r\n               var height2 = ui.dialog.contentContainer.offsetHeight;\r\n               if (game.chess) {\r\n                  if (height1 < 240) {\r\n                     ui.dialog.style.height = height1 + 'px';\r\n                  }\r\n               }\r\n               else {\r\n                  if (!ui.dialog.forcebutton && !ui.dialog._scrollset && (height1 <= 190 || (height2 >= height1 && height2 >= 210))) {\r\n                     ui.dialog.classList.remove('scroll1');\r\n                     ui.dialog.classList.remove('scroll2');\r\n                  }\r\n                  else {\r\n                     ui.dialog.classList.add('scroll1');\r\n                     ui.dialog.classList.add('scroll2');\r\n                     if (game.layout != 'default') {\r\n                        ui.dialog.style.height = Math.min(height1, ((game.layout == 'long2' || game.layout == 'nova') && ui.arena.classList.contains('choose-character')) ? 380 : 350) + 'px';\r\n                        ui.dialog._scrollset = true;\r\n                     }\r\n                  }\r\n                  if (game.layout == 'long2' || game.layout == 'nova') {\r\n                     if (height1 + 240 >= ui.arena.offsetHeight) {\r\n                        ui.dialog.classList.add('scroll3');\r\n                     }\r\n                     else {\r\n                        ui.dialog.classList.remove('scroll3');\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n         },\r\n         recycle: function (node, key) {\r\n            if (!ui._recycle) ui._recycle = {};\r\n            if (typeof node == 'string') {\r\n               return ui._recycle[node]\r\n            }\r\n            ui._recycle[key] = node;\r\n         },\r\n      }\r\n   }\r\n}\n\n//# sourceURL=webpack:///./game/ui.js?")},"./main.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _e_jszip_min__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @e/jszip.min */ "./extension/jszip.min.js");\n/* harmony import */ var _e_jszip_min__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_e_jszip_min__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _game_Game__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./game/Game */ "./game/Game.js");\n\r\n\r\nwindow.JSZip = (_e_jszip_min__WEBPACK_IMPORTED_MODULE_0___default())\r\nconsole.log(_game_Game__WEBPACK_IMPORTED_MODULE_1__["default"])\r\n_game_Game__WEBPACK_IMPORTED_MODULE_1__["default"].vkFun()\n\n//# sourceURL=webpack:///./main.js?')},"./methods/_game_connect.js":module=>{eval("let { game, ui, get, ai, lib, _status } = vkCore\r\n/**联机类game方法 */\r\nmodule.exports = {\r\n    waitForPlayer: function (func) {\r\n        var next = game.createEvent('waitForPlayer', false);\r\n        next.func = func;\r\n        next.setContent('waitForPlayer');\r\n    },\r\n    countDown: function (time, onEnd) {\r\n        time = parseInt(time);\r\n        if (!time) return;\r\n        if (time <= 0) return;\r\n        var current = time;\r\n        ui.timer.set(current, 1);\r\n        _status.countDown = setInterval(function () {\r\n            if (--current) {\r\n                ui.timer.set(current, current / time);\r\n            }\r\n            else {\r\n                ui.timer.set(0, 0);\r\n                clearInterval(_status.countDown);\r\n                delete _status.countDown;\r\n                if (onEnd) onEnd();\r\n            }\r\n        }, 1000);\r\n    },\r\n    countChoose: function (clear) {\r\n        if (_status.imchoosing) {\r\n            return;\r\n        }\r\n        _status.imchoosing = true;\r\n        if (_status.connectMode && !_status.countDown) {\r\n            ui.timer.show();\r\n            var num;\r\n            //这么一大行都是为了祢衡\r\n            if (_status.event && _status.event.name == 'chooseToUse' && _status.event.type == 'phase' &&\r\n                _status.event.player && _status.event.player.forceCountChoose &&\r\n                typeof _status.event.player.forceCountChoose.phaseUse == 'number') {\r\n                num = _status.event.player.forceCountChoose.phaseUse;\r\n            }\r\n            else if (_status.connectMode) {\r\n                num = lib.configOL.choose_timeout;\r\n                if (ui.arena && ui.arena.classList.contains('choose-character') && lib.configOL.chooseCharacter_timeout) {\r\n                    num = parseInt(num) * 5;\r\n                }\r\n            }\r\n            else {\r\n                num = get.config('choose_timeout');\r\n            }\r\n            game.countDown(parseInt(num), function () {\r\n                ui.click.auto();\r\n                ui.timer.hide();\r\n            });\r\n            if (!game.online && game.me) {\r\n                if (_status.event.getParent().skillHidden) {\r\n                    for (var i = 0; i < game.players.length; i++) {\r\n                        game.players[i].showTimer();\r\n                    }\r\n                    game.me._hide_all_timer = true;\r\n                }\r\n                else if (!_status.event._global_waiting) {\r\n                    game.me.showTimer();\r\n                }\r\n            }\r\n        }\r\n        else if (_status.event.player.forceCountChoose && _status.event.isMine() && !_status.countDown) {\r\n            var info = _status.event.player.forceCountChoose;\r\n            var num;\r\n            if (_status.event.name == 'chooseToUse' && _status.event.type == 'phase' && typeof info.phaseUse == 'number') {\r\n                num = info.phaseUse;\r\n            }\r\n            else if (typeof info[_status.event.name] == 'number') {\r\n                num = info[_status.event.name]\r\n            }\r\n            else if (info.default) {\r\n                num = info.default;\r\n            }\r\n            else return;\r\n            var finish = function () {\r\n                if (_status.event.endButton) {\r\n                    if (_status.event.skill) {\r\n                        ui.click.cancel();\r\n                    }\r\n                    ui.click.cancel();\r\n                }\r\n                else {\r\n                    if (ui.confirm && ui.confirm.str) {\r\n                        if (ui.confirm.str.indexOf('c') != -1) {\r\n                            ui.click.cancel();\r\n                        }\r\n                        else if (ui.confirm.str.indexOf('o') != -1) {\r\n                            ui.click.ok();\r\n                        }\r\n                    }\r\n                    else if (['chooseControl', 'chooseBool'].contains(_status.event.name) && _status.paused) {\r\n                        _status.event.result = 'ai';\r\n                        game.resume();\r\n                    }\r\n                    else {\r\n                        ui.click.auto('forced');\r\n                        setTimeout(function () {\r\n                            ui.click.auto('forced');\r\n                        }, 200);\r\n                    }\r\n                }\r\n                ui.timer.hide();\r\n            };\r\n            if (!num) {\r\n                ui.timer.hide();\r\n                game.uncheck();\r\n                setTimeout(finish, 200);\r\n            }\r\n            else {\r\n                ui.timer.show();\r\n                game.countDown(num, finish);\r\n            }\r\n        }\r\n    },\r\n    stopCountChoose: function () {\r\n        if (_status.countDown) {\r\n            clearInterval(_status.countDown);\r\n            delete _status.countDown;\r\n            ui.timer.hide();\r\n        }\r\n        if (_status.connectMode && !game.online && game.me) {\r\n            if (game.me._hide_all_timer) {\r\n                delete game.me._hide_all_timer;\r\n                for (var i = 0; i < game.players.length; i++) {\r\n                    game.players[i].hideTimer();\r\n                }\r\n            }\r\n            else if (!_status.event._global_waiting) {\r\n                game.me.hideTimer();\r\n            }\r\n        }\r\n    },\r\n    connect: function (ip, callback) {\r\n        if (game.online) return;\r\n        var withport = false;\r\n        var index = ip.lastIndexOf(':');\r\n        if (index != -1) {\r\n            index = parseFloat(ip.slice(index + 1));\r\n            if (index && Math.floor(index) == index) {\r\n                withport = true;\r\n            }\r\n        }\r\n        if (!withport) {\r\n            //ip=ip+':8080';\r\n            if ('https:' != document.location.protocol)\r\n                ip = ip + ':8080';\r\n        }\r\n        _status.connectCallback = callback;\r\n        try {\r\n            if (game.ws) {\r\n                game.ws._nocallback = true;\r\n                game.ws.close();\r\n                delete game.ws;\r\n            }\r\n            var ishttps = 'https:' == document.location.protocol ? true : false;\r\n            if (ishttps) {\r\n                //alert(\"这是一个https请求\");\r\n                game.ws = new WebSocket('wss://' + ip + '/wss/');\r\n            } else {\r\n                //alert(\"这是一个http请求\");\r\n                game.ws = new WebSocket('ws://' + ip + '');\r\n            }\r\n            //game.ws=new WebSocket('ws://'+ip+'');\r\n        }\r\n        catch (e) {\r\n            alert('错误：无效联机地址');\r\n            if (callback) {\r\n                callback(false);\r\n            }\r\n            return;\r\n        }\r\n        game.ws.onopen = lib.element.ws.onopen;\r\n        game.ws.onmessage = lib.element.ws.onmessage;\r\n        game.ws.onerror = lib.element.ws.onerror;\r\n        game.ws.onclose = lib.element.ws.onclose;\r\n        _status.ip = ip;\r\n    },\r\n    send: function () {\r\n        if (game.observe && arguments[0] != 'reinited') return;\r\n        if (game.ws) {\r\n            var args = Array.from(arguments);\r\n            if (typeof args[0] == 'function') {\r\n                args.unshift('exec');\r\n            }\r\n            game.ws.send(JSON.stringify(get.stringifiedResult(args)));\r\n        }\r\n    },\r\n    sendTo: function (id, message) {\r\n        var ws = { wsid: id };\r\n        for (var i in lib.element.nodews) {\r\n            ws[i] = lib.element.nodews[i];\r\n        }\r\n        var client = {\r\n            ws: ws,\r\n            id: ws.wsid,\r\n            closed: false\r\n        };\r\n        for (var i in lib.element.client) {\r\n            client[i] = lib.element.client[i];\r\n        }\r\n        client.send(message);\r\n    },\r\n}\n\n//# sourceURL=webpack:///./methods/_game_connect.js?")},"./methods/_game_detect.js":module=>{eval("let { game, ui, get, ai, lib, _status } = vkCore\r\n/**检测类game方法 */\r\nmodule.exports = {\r\n    /**\r\n     * 判定是否存在满足条件的角色\r\n     * @param {?Function} func 用于筛选的函数\r\n     * @returns {!boolean} 是否存在\r\n     */\r\n    hasPlayer: function (func) {\r\n        for (var i = 0; i < game.players.length; i++) {\r\n            if (game.players[i].isOut()) continue;\r\n            if (func(game.players[i])) return true;\r\n        }\r\n        return false;\r\n    },\r\n    /**\r\n     * 判定是否存在满足条件的角色（包括已死亡角色）\r\n     * @param {?Function} func 用于筛选的函数\r\n     * @returns {!boolean} 是否存在\r\n     */\r\n    hasPlayer2: function (func) {\r\n        var players = game.players.slice(0).concat(game.dead);\r\n        for (var i = 0; i < players.length; i++) {\r\n            if (players[i].isOut()) continue;\r\n            if (func(players[i])) return true;\r\n        }\r\n        return false;\r\n    },\r\n    /**\r\n     * 获取满足条件的角色\r\n     * @param {?Function} func 用于筛选的函数\r\n     * @returns {Array<HTMLDivElement>} 由满足条件的角色组成的数组\r\n     */\r\n    countPlayer: function (func) {\r\n        var num = 0;\r\n        if (typeof func != 'function') {\r\n            func = lib.filter.all;\r\n        }\r\n        for (var i = 0; i < game.players.length; i++) {\r\n            if (game.players[i].isOut()) continue;\r\n            var result = func(game.players[i]);\r\n            if (typeof result == 'number') {\r\n                num += result;\r\n            }\r\n            else if (result) {\r\n                num++;\r\n            }\r\n        }\r\n        return num;\r\n    },\r\n    /**\r\n     * 获取满足条件的角色（包括已死亡角色）\r\n     * @param {?Function} func 用于筛选的函数\r\n     * @returns {Array<HTMLDivElement>} 由满足条件的角色组成的数组\r\n     */\r\n    countPlayer2: function (func) {\r\n        var num = 0;\r\n        if (typeof func != 'function') {\r\n            func = lib.filter.all;\r\n        }\r\n        var players = game.players.slice(0).concat(game.dead);\r\n        for (var i = 0; i < players.length; i++) {\r\n            if (players[i].isOut()) continue;\r\n            var result = func(players[i]);\r\n            if (typeof result == 'number') {\r\n                num += result;\r\n            }\r\n            else if (result) {\r\n                num++;\r\n            }\r\n        }\r\n        return num;\r\n    },\r\n    filterPlayer: function (func, list) {\r\n        if (!Array.isArray(list)) {\r\n            list = [];\r\n        }\r\n        if (typeof func != 'function') {\r\n            func = lib.filter.all;\r\n        }\r\n        for (var i = 0; i < game.players.length; i++) {\r\n            if (game.players[i].isOut()) continue;\r\n            if (func(game.players[i])) {\r\n                list.add(game.players[i]);\r\n            }\r\n        }\r\n        return list;\r\n    },\r\n    filterPlayer2: function (func, list) {\r\n        if (!Array.isArray(list)) {\r\n            list = [];\r\n        }\r\n        if (typeof func != 'function') {\r\n            func = lib.filter.all;\r\n        }\r\n        var players = game.players.slice(0).concat(game.dead);\r\n        for (var i = 0; i < players.length; i++) {\r\n            if (players[i].isOut()) continue;\r\n            if (func(players[i])) {\r\n                list.add(players[i]);\r\n            }\r\n        }\r\n        return list;\r\n    },\r\n    findPlayer: function (func) {\r\n        for (var i = 0; i < game.players.length; i++) {\r\n            if (game.players[i].isOut()) continue;\r\n            if (func(game.players[i])) {\r\n                return game.players[i];\r\n            }\r\n        }\r\n        return null;\r\n    },\r\n    findPlayer2: function (func) {\r\n        var players = game.players.slice(0).concat(game.dead);\r\n        for (var i = 0; i < players.length; i++) {\r\n            if (players[i].isOut()) continue;\r\n            if (func(players[i])) {\r\n                return players[i];\r\n            }\r\n        }\r\n        return null;\r\n    },\r\n    findCards: function (func, all) {\r\n        var cards = [];\r\n        for (var i in lib.card) {\r\n            if (!lib.translate[i + '_info']) continue;\r\n            if (lib.card[i].mode && lib.card[i].mode.contains(lib.config.mode) == false) continue;\r\n            if (!all && !lib.inpile.contains(i)) continue;\r\n            if (func(i, lib.card[i])) {\r\n                cards.push(i);\r\n            }\r\n        }\r\n        return cards;\r\n    },\r\n    /**\r\n     * 用 countPlayer 计算场上存在的势力数\r\n     * @returns {!number} 势力数\r\n     */\r\n    countGroup: function () {\r\n        var list = lib.group.slice(0);\r\n        return game.countPlayer(function (current) {\r\n            if (list.contains(current.group)) {\r\n                list.remove(current.group);\r\n                return true;\r\n            }\r\n        });\r\n    },\r\n}\n\n//# sourceURL=webpack:///./methods/_game_detect.js?")},"./methods/entry.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filter */ "./methods/filter.js");\n/* harmony import */ var _filter__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_filter__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _sort__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sort */ "./methods/sort.js");\n/* harmony import */ var _sort__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_sort__WEBPACK_IMPORTED_MODULE_1__);\n\r\n\n\n//# sourceURL=webpack:///./methods/entry.js?')},"./methods/filter.js":()=>{eval("{\r\n  /**\r\n   * 用于简单筛选的回调函数组\r\n   * @namespace\r\n   */\r\n  let { game, ui, get, ai, lib, _status } = window.vkCore\r\n  lib.filter = {\r\n    all: function () {\r\n      return true;\r\n    },\r\n    buttonIncluded: function (button) {\r\n      return !(_status.event.excludeButton && _status.event.excludeButton.contains(button));\r\n    },\r\n    filterButton: function (button) {\r\n      return true;\r\n    },\r\n    /**\r\n     * 检测角色A能否使用某卡牌救治角色B\r\n     * @function\r\n     * @param {!GameCores.GameObjects.Card} card 检测卡牌\r\n     * @param {!GameCores.GameObjects.Player} player 卡牌使用者(角色A)\r\n     * @param {!GameCores.GameObjects.Player} target 卡牌目标(角色B)\r\n     * @returns {!boolean} 如果可触发，返回true；否则返回false\r\n     */\r\n    cardSavable: function (card, player, target) {\r\n      var mod2 = game.checkMod(card, player, 'unchanged', 'cardEnabled2', player);\r\n      if (mod2 != 'unchanged') return mod2;\r\n      var mod = game.checkMod(card, player, target, 'unchanged', 'cardSavable', player);\r\n      if (mod != 'unchanged') return mod;\r\n      var savable = get.info(card).savable;\r\n      if (typeof savable == 'function') savable = savable(card, player, target);\r\n      return savable;\r\n    },\r\n    /**\r\n     * 检测技能的trigger事件是否可触发\r\n     * @function\r\n     * @param {!GameCores.Bases.Event} event 父事件\r\n     * @param {!GameCores.GameObjects.Player} player 触发对象(角色)\r\n     * @param {!string} name 触发器名/触发条件，即triggername\r\n     * @param {!string} skill 技能ID\r\n     * @returns {!boolean} 如果可触发，返回true；否则返回false\r\n     */\r\n    filterTrigger: function (event, player, name, skill) {\r\n      if (player._hookTrigger) {\r\n        for (let i = 0; i < player._hookTrigger.length; i++) {\r\n          let info = lib.skill[player._hookTrigger[i]].hookTrigger;\r\n          if (info) {\r\n            if (info.block && info.block(event, player, name, skill)) {\r\n              return false;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      var fullskills = game.expandSkills(player.getSkills().concat(lib.skill.global));\r\n      var info = get.info(skill);\r\n      if ((info.noHidden || get.mode() != 'guozhan') && !fullskills.contains(skill)) {\r\n        return false;\r\n      }\r\n      if (!info.trigger) return false;\r\n      var bool = false;\r\n      var has = function (obj) {\r\n        if (typeof obj == 'string') return obj == name;\r\n        else if (obj.contains(name)) return true;\r\n        return false;\r\n      }\r\n      for (let i in info.trigger) {//check trigger\r\n        if ((i == 'global' || player == event[i]) && has(info.trigger[i])) {\r\n          bool = true; break;\r\n        }\r\n      }\r\n      if (!bool) return false;\r\n      if (info.filter && !info.filter(event, player, name)) {\r\n        return false;\r\n      }\r\n      if (event._notrigger.contains(player) && !lib.skill.global.contains(skill)) {\r\n        return false;\r\n      }\r\n      if (typeof info.usable == 'number' && player.hasSkill('counttrigger') &&\r\n        player.storage.counttrigger && player.storage.counttrigger[skill] >= info.usable) {\r\n        return false;\r\n      }\r\n      if (info.round && player.storage[skill + '_roundcount'] > 0) {\r\n        return false;\r\n      }\r\n      return true;\r\n    },\r\n    characterDisabled: function (i, libCharacter) {\r\n      if (!lib.character[i] || lib.character[i][4] && lib.character[i][4].contains('forbidai')) return true;\r\n      if (lib.character[i][4] && lib.character[i][4].contains('unseen')) return true;\r\n      if (lib.config.forbidai.contains(i)) return true;\r\n      if (lib.characterFilter[i] && !lib.characterFilter[i](get.mode())) return true;\r\n      if (_status.connectMode) {\r\n        if (lib.configOL.banned.contains(i) || lib.connectBanned.contains(i)) return true;\r\n        if (lib.configOL.protect_beginner && get.is.banForBeginner(i)) return true;\r\n        var double_character = false;\r\n        if (lib.configOL.mode == 'guozhan') {\r\n          double_character = true;\r\n        }\r\n        else if (lib.configOL.double_character && (lib.configOL.mode == 'identity' || lib.configOL.mode == 'stone')) {\r\n          double_character = true;\r\n        }\r\n        else if (lib.configOL.double_character_jiange && (lib.configOL.mode == 'versus' && _status.mode == 'jiange')) {\r\n          double_character = true;\r\n        }\r\n        if (double_character && lib.config.forbiddouble.contains(i)) {\r\n          return true;\r\n        }\r\n        // if(lib.configOL.ban_weak){\r\n        //     if(lib.config.replacecharacter[i]&&libCharacter&&libCharacter[lib.config.replacecharacter[i]]) return true;\r\n        //     if(lib.config.forbidall.contains(i)) return true;\r\n        //     if(!double_character&&get.rank(i,true)<=2){\r\n        //         return true;\r\n        //     }\r\n        // }\r\n        // if(lib.configOL.ban_strong&&get.rank(i,true)>=8){\r\n        //     return true;\r\n        // }\r\n      }\r\n      else {\r\n        if (lib.config.banned.contains(i)) return true;\r\n        var double_character = false;\r\n        if (get.mode() == 'guozhan') {\r\n          double_character = true;\r\n        }\r\n        else if (get.config('double_character') && (lib.config.mode == 'identity' || lib.config.mode == 'stone')) {\r\n          double_character = true;\r\n        }\r\n        else if (get.config('double_character_jiange') && (lib.config.mode == 'versus' && _status.mode == 'jiange')) {\r\n          double_character = true;\r\n        }\r\n        if (double_character && lib.config.forbiddouble.contains(i)) {\r\n          return true;\r\n        }\r\n        // if(get.config('ban_weak')){\r\n        //     if(lib.config.replacecharacter[i]&&lib.character[lib.config.replacecharacter[i]]) return true;\r\n        //     if(lib.config.forbidall.contains(i)) return true;\r\n        //     if(!double_character&&get.rank(i,true)<=2){\r\n        //         return true;\r\n        //     }\r\n        // }\r\n        // if(get.config('ban_strong')&&get.rank(i,true)>=8){\r\n        //     return true;\r\n        // }\r\n      }\r\n    },\r\n    characterDisabled2: function (i) {\r\n      var info = lib.character[i];\r\n      if (!info) return true;\r\n      if (info[4]) {\r\n        if (info[4].contains('boss')) return true;\r\n        if (info[4].contains('hiddenboss')) return true;\r\n        if (info[4].contains('minskin')) return true;\r\n        if (info[4].contains('unseen')) return true;\r\n        if (info[4].contains('forbidai') && (!_status.event.isMine || !_status.event.isMine())) return true;\r\n        if (lib.characterFilter[i] && !lib.characterFilter[i](get.mode())) return true;\r\n      }\r\n      return false;\r\n    },\r\n    skillDisabled: function (skill) {\r\n      if (!lib.translate[skill] || !lib.translate[skill + '_info']) return true;\r\n      var info = lib.skill[skill];\r\n      if (info && !info.unique && !info.temp && !info.sub && !info.fixed && !info.vanish) {\r\n        return false;\r\n      }\r\n      return true;\r\n    },\r\n    cardEnabled: function (card, player, event) {\r\n      if (player == undefined) player = _status.event.player;\r\n      if (!player) return false;\r\n      var mod2 = game.checkMod(card, player, 'unchanged', 'cardEnabled2', player);\r\n      if (mod2 != 'unchanged') return mod2;\r\n      card = get.autoViewAs(card, null, player);\r\n      if (event === 'forceEnable') {\r\n        var mod = game.checkMod(card, player, 'unchanged', 'cardEnabled', player);\r\n        if (mod != 'unchanged') return mod;\r\n        return true;\r\n      }\r\n      else {\r\n        var filter = get.info(card).enable;\r\n        if (!filter) return;\r\n        var mod = game.checkMod(card, player, 'unchanged', 'cardEnabled', player);\r\n        if (mod != 'unchanged') return mod;\r\n        if (typeof filter == 'boolean') return filter;\r\n        if (typeof filter == 'function') return filter(card, player, event);\r\n      }\r\n    },\r\n    cardRespondable: function (card, player, event) {\r\n      event = event || _status.event;\r\n      if (event.name != 'chooseToRespond') return true;\r\n      var source = event.getParent().player;\r\n      if (source && source != player) {\r\n        if (source.hasSkillTag('norespond', false, [card, player, event], true)) {\r\n          return false;\r\n        }\r\n      }\r\n      if (player == undefined) player = _status.event.player;\r\n      var mod2 = game.checkMod(card, player, 'unchanged', 'cardEnabled2', player);\r\n      if (mod2 != 'unchanged') return mod2;\r\n      var mod = game.checkMod(card, player, 'unchanged', 'cardRespondable', player);\r\n      if (mod != 'unchanged') return mod;\r\n      return true;\r\n    },\r\n    cardUsable2: function (card, player, event) {\r\n      card = get.autoViewAs(card, null, player);\r\n      var info = get.info(card);\r\n      if (info.updateUsable == 'phaseUse') {\r\n        event = event || _status.event;\r\n        if (player != _status.event.player) return true;\r\n        if (event.getParent().name != 'phaseUse') return true;\r\n        if (event.getParent().player != player) return true;\r\n      }\r\n      var num = info.usable;\r\n      if (typeof num == 'function') num = num(card, player);\r\n      num = game.checkMod(card, player, num, 'cardUsable', player);\r\n      if (typeof num != 'number') return true;\r\n      else return (player.countUsed(card) < num);\r\n    },\r\n    cardUsable: function (card, player, event) {\r\n      card = get.autoViewAs(card, null, player);\r\n      var info = get.info(card);\r\n      event = event || _status.event;\r\n      if (player != _status.event.player) return true;\r\n      if (info.updateUsable == 'phaseUse') {\r\n        if (event.getParent().name != 'phaseUse') return true;\r\n        if (event.getParent().player != player) return true;\r\n      }\r\n      event.addCount_extra = true;\r\n      var num = info.usable;\r\n      if (typeof num == 'function') num = num(card, player);\r\n      num = game.checkMod(card, player, num, 'cardUsable', player);\r\n      if (typeof num != 'number') return true;\r\n      if (player.countUsed(card) < num) return true;\r\n      if (game.hasPlayer(function (current) {\r\n        return game.checkMod(card, player, current, false, 'cardUsableTarget', player);\r\n      })) {\r\n        return true;\r\n      }\r\n      return false;\r\n    },\r\n    cardDiscardable: function (card, player, event) {\r\n      event = event || _status.event;\r\n      if (typeof event != 'string') event = event.getParent().name;\r\n      var mod = game.checkMod(card, player, event, 'unchanged', 'cardDiscardable', player);\r\n      if (mod != 'unchanged') return mod;\r\n      return true;\r\n    },\r\n    canBeDiscarded: function (card, player, target, event) {\r\n      event = event || _status.event;\r\n      if (typeof event != 'string') event = event.getParent().name;\r\n      var mod = game.checkMod(card, player, target, event, 'unchanged', 'canBeDiscarded', target);\r\n      if (mod != 'unchanged') return mod;\r\n      return true;\r\n    },\r\n    canBeGained: function (card, player, target, event) {\r\n      event = event || _status.event;\r\n      if (typeof event != 'string') event = event.getParent().name;\r\n      var mod = game.checkMod(card, player, target, event, 'unchanged', 'canBeGained', target);\r\n      if (mod != 'unchanged') return mod;\r\n      return true;\r\n    },\r\n    cardAiIncluded: function (card) {\r\n      if (_status.event.isMine()) return true;\r\n      return (_status.event._aiexclude.contains(card) == false);\r\n    },\r\n    filterCard: function (card, player, event) {\r\n      var info = get.info(card);\r\n      //if(info.toself&&!lib.filter.targetEnabled(card,player,player)) return false;\r\n      if (player == undefined) player = _status.event.player;\r\n      if (!lib.filter.cardEnabled(card, player, event) || !lib.filter.cardUsable(card, player, event)) return false;\r\n      if (info.notarget) return true;\r\n      var range;\r\n      var select = get.copy(info.selectTarget);\r\n      if (select == undefined) {\r\n        if (info.filterTarget == undefined) return true;\r\n        range = [1, 1];\r\n      }\r\n      else if (typeof select == 'number') range = [select, select];\r\n      else if (get.itemtype(select) == 'select') range = select;\r\n      else if (typeof select == 'function') range = select(card, player);\r\n      if (!range[1]) console.log(card, select, range)\r\n      game.checkMod(card, player, range, 'selectTarget', player);\r\n      if (!range || range[1] != -1) return true;\r\n      var filterTarget = (event && event.filterTarget) ? event.filterTarget : lib.filter.filterTarget;\r\n      return game.hasPlayer(function (current) {\r\n        return filterTarget(card, player, current);\r\n      });\r\n    },\r\n    targetEnabledx: function (card, player, target) {\r\n      if (!card) return false;\r\n      if (_status.event.addCount_extra && !lib.filter.cardUsable2(card, player) && !game.checkMod(card, player, target, false, 'cardUsableTarget', player)) return false;\r\n      return lib.filter.targetEnabled.apply(this, arguments);\r\n    },\r\n    targetEnabled: function (card, player, target) {\r\n      if (!card) return false;\r\n      var info = get.info(card);\r\n      var filter = info.filterTarget;\r\n      var mod = game.checkMod(card, player, target, 'unchanged', 'playerEnabled', player);\r\n      if (mod == false) return false;\r\n      if (!info.singleCard || ui.selected.targets.length == 0) {\r\n        var mod = game.checkMod(card, player, target, 'unchanged', 'targetEnabled', target);\r\n        if (mod != 'unchanged') return mod;\r\n      }\r\n      if (typeof filter == 'boolean') return filter;\r\n      if (typeof filter == 'function') return filter(card, player, target);\r\n    },\r\n    targetEnabled2: function (card, player, target) {\r\n      if (lib.filter.targetEnabled(card, player, target)) return true;\r\n      if (!card) return false;\r\n\r\n      if (game.checkMod(card, player, target, 'unchanged', 'playerEnabled', player) == false) return false;\r\n      if (game.checkMod(card, player, target, 'unchanged', 'targetEnabled', target) == false) return false;\r\n\r\n      var filter = get.info(card).modTarget;\r\n      if (typeof filter == 'boolean') return filter;\r\n      if (typeof filter == 'function') return filter(card, player, target);\r\n      return false;\r\n    },\r\n    targetEnabled3: function (card, player, target) {\r\n      if (!card) return false;\r\n      var info = get.info(card);\r\n\r\n      if (info.filterTarget == true) return true;\r\n      if (typeof info.filterTarget == 'function' && info.filterTarget(card, player, target)) return true;\r\n\r\n      if (info.modTarget == true) return true;\r\n      if (typeof info.modTarget == 'function' && info.modTarget(card, player, target)) return true;\r\n      return false;\r\n    },\r\n    targetInRange: function (card, player, target) {\r\n      var mod = game.checkMod(card, player, target, 'unchanged', 'targetInRange', player);\r\n      var extra = 0;\r\n      if (mod != 'unchanged') {\r\n        if (typeof mod == 'boolean') return mod;\r\n        if (typeof mod == 'number') extra = mod;\r\n      }\r\n      var info = get.info(card);\r\n      var range = info.range;\r\n      var outrange = info.outrange;\r\n      if (range == undefined && outrange == undefined) return true;\r\n\r\n      if (player.hasSkill('undist') || target.hasSkill('undist')) return false;\r\n      for (var i in range) {\r\n        if (i == 'attack') {\r\n          if (player.inRange(target)) return true;\r\n          var range2 = player.getAttackRange();\r\n          if (range2 <= 0) return false;\r\n          var distance = get.distance(player, target) + extra;\r\n          if (range[i] <= distance - range2) return false;\r\n        }\r\n        else {\r\n          var distance = get.distance(player, target, i) + extra;\r\n          if (range[i] < distance) return false;\r\n        }\r\n      }\r\n      for (var i in outrange) {\r\n        if (i == 'attack') {\r\n          var range2 = player.getAttackRange();\r\n          if (range2 <= 0) return false;\r\n          var distance = get.distance(player, target) + extra;\r\n          if (outrange[i] > distance - range2 + 1) return false;\r\n        }\r\n        else {\r\n          var distance = get.distance(player, target, i) + extra;\r\n          if (outrange[i] > distance) return false;\r\n        }\r\n      }\r\n      return true;\r\n    },\r\n    filterTarget: function (card, player, target) {\r\n      return (lib.filter.targetEnabledx(card, player, target) &&\r\n        lib.filter.targetInRange(card, player, target));\r\n    },\r\n    filterTarget2: function (card, player, target) {\r\n      return (lib.filter.targetEnabled2(card, player, target) &&\r\n        lib.filter.targetInRange(card, player, target));\r\n    },\r\n    notMe: function (card, player, target) {\r\n      return player != target;\r\n    },\r\n    isMe: function (card, player, target) {\r\n      return player == target;\r\n    },\r\n    attackFrom: function (card, player, target) {\r\n      return get.distance(player, target, 'attack') <= 1;\r\n    },\r\n    globalFrom: function (card, player, target) {\r\n      return get.distance(player, target) <= 1;\r\n    },\r\n    selectCard: function () {\r\n      return [1, 1];\r\n    },\r\n    selectTarget: function () {\r\n      var card = get.card(), player = get.player();\r\n      if (card == undefined) return;\r\n      var range;\r\n      var select = get.copy(get.info(card).selectTarget);\r\n      if (select == undefined) {\r\n        if (get.info(card).filterTarget == undefined) return [0, 0];\r\n        range = [1, 1];\r\n      }\r\n      else if (typeof select == 'number') range = [select, select];\r\n      else if (get.itemtype(select) == 'select') range = select;\r\n      else if (typeof select == 'function') range = select(card, player);\r\n      game.checkMod(card, player, range, 'selectTarget', player);\r\n      return range;\r\n    },\r\n    judge: function (card, player, target) {\r\n      var judges = target.getCards('j');\r\n      for (var i = 0; i < judges.length; i++) {\r\n        if ((judges[i].viewAs || judges[i].name) == card.name) return false;\r\n      }\r\n      return true;\r\n    },\r\n    autoRespondSha: function () {\r\n      return !this.player.hasSha(true);\r\n    },\r\n    autoRespondShan: function () {\r\n      return !this.player.hasShan();\r\n    },\r\n    wuxieSwap: function (event) {\r\n      if (event.type == 'wuxie') {\r\n        if (ui.wuxie && ui.wuxie.classList.contains('glow')) {\r\n          return true;\r\n        }\r\n        if (ui.tempnowuxie && ui.tempnowuxie.classList.contains('glow') && event.state > 0) {\r\n          var triggerevent = event.getTrigger();\r\n          if (triggerevent) {\r\n            if (ui.tempnowuxie._origin == triggerevent.parent.id) {\r\n              return true;\r\n            }\r\n          }\r\n          else if (ui.tempnowuxie._origin == _status.event.id2) {\r\n            return true;\r\n          }\r\n        }\r\n        if (!_status.connectMode && lib.config.wuxie_self && event.getParent().state) {\r\n          var tw = event.getTrigger().parent;\r\n          if (tw.player.isUnderControl(true) && !tw.player.hasSkillTag('noautowuxie') &&\r\n            tw.targets && tw.targets.length == 1 && !tw.noai) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\n\n//# sourceURL=webpack:///./methods/filter.js?")},"./methods/sort.js":()=>{eval("{\r\n  /**\r\n   * 用于简单排序的回调函数组\r\n   * @name sort\r\n   * @namespace\r\n   */\r\n  let { game, ui, get, ai, lib, _status } = window.vkCore\r\n  lib.sort = {\r\n    /**\r\n     * 将角色按照势力排列\r\n     * @name sort.character\r\n     * @function\r\n     */\r\n    character: function (a, b) {\r\n      var getGroup = function (name) {\r\n        var group = get.is.double(name, true);\r\n        if (group) return group[0];\r\n        return lib.character[name][1];\r\n      },\r\n        groupSort = function (name) {\r\n          if (!lib.character[name]) return 50;\r\n          var group = getGroup(name);\r\n          if (group == 'shen') return -1;\r\n          var list = get.groups();\r\n          if (list.contains(group)) return list.indexOf(group);\r\n          return 49;\r\n        };\r\n      var del = groupSort(a) - groupSort(b);\r\n      if (del != 0) return del;\r\n      var aa = a, bb = b;\r\n      if (a.indexOf('_') != -1) {\r\n        a = a.slice(a.indexOf('_') + 1);\r\n      }\r\n      if (b.indexOf('_') != -1) {\r\n        b = b.slice(b.indexOf('_') + 1);\r\n      }\r\n      if (a != b) {\r\n        return a > b ? 1 : -1;\r\n      }\r\n      return aa > bb ? 1 : -1;\r\n    },\r\n    /**\r\n     * 将卡牌按照类型排列\r\n     * @name sort.card\r\n     * @function\r\n     */\r\n    card: function (a, b) {\r\n      var typeSort = function (name) {\r\n        var type = get.type(name);\r\n        if (!type) return 10;\r\n        if (type == 'basic') return -1;\r\n        if (type == 'trick') return 0;\r\n        if (type == 'delay') return 1;\r\n        if (type == 'equip') {\r\n          var type2 = get.subtype(name);\r\n          if (type2 && type2.slice) return 1 + parseInt(type2.slice(5) || 7);\r\n          return 8.5\r\n        }\r\n        return 9;\r\n      }\r\n      var del = typeSort(a) - typeSort(b);\r\n      if (del != 0) return del;\r\n      var aa = a, bb = b;\r\n      if (a.indexOf('_') != -1) {\r\n        a = a.slice(a.indexOf('_') + 1);\r\n      }\r\n      if (b.indexOf('_') != -1) {\r\n        b = b.slice(b.indexOf('_') + 1);\r\n      }\r\n      if (a != b) {\r\n        return a > b ? 1 : -1;\r\n      }\r\n      return aa > bb ? 1 : -1;\r\n    },\r\n    random: function () {\r\n      return (Math.random() - 0.5);\r\n    },\r\n    /**\r\n     * 将角色按照距离排列\r\n     * @name sort.seat\r\n     * @function\r\n     */\r\n    seat: function (a, b) {\r\n      var player = lib.tempSortSeat || _status.event.player;\r\n      var delta = get.distance(player, a, 'absolute') - get.distance(player, b, 'absolute');\r\n      if (delta) return delta;\r\n      delta = parseInt(a.dataset.position) - parseInt(b.dataset.position);\r\n      if (player.side == game.me.side) return delta;\r\n      return -delta;\r\n    },\r\n    position: function (a, b) {\r\n      return parseInt(a.dataset.position) - parseInt(b.dataset.position);\r\n    },\r\n    priority: function (a, b) {\r\n      var i1 = get.info(a[0]), i2 = get.info(b[0]);\r\n      if (i1.priority == undefined) i1.priority = 0;\r\n      if (i2.priority == undefined) i2.priority = 0;\r\n      if (i1.priority == i2.priority) {\r\n        if (i1.forced == undefined && i2.forced == undefined) return 0;\r\n        if (i1.forced && i2.forced) return 0;\r\n        if (i1.forced) return 1;\r\n        if (i2.forced) return -1;\r\n      }\r\n      return i2.priority - i1.priority;\r\n    },\r\n    number: function (a, b) {\r\n      return get.number(a) - get.number(b);\r\n    },\r\n    number2: function (a, b) {\r\n      return get.number(b) - get.number(a);\r\n    },\r\n    capt: function (a, b) {\r\n      var aa = a, bb = b;\r\n      if (aa.indexOf('_') != -1) {\r\n        aa = aa.slice(aa.indexOf('_') + 1);\r\n      }\r\n      if (bb.indexOf('_') != -1) {\r\n        bb = bb.slice(bb.indexOf('_') + 1);\r\n      }\r\n      if (aa != bb) {\r\n        return aa > bb ? 1 : -1;\r\n      }\r\n      return a > b ? 1 : -1;\r\n    },\r\n    name: function (a, b) {\r\n      if (a > b) return 1;\r\n      if (a < b) return -1;\r\n      return 0;\r\n    }\r\n  }\r\n}\n\n//# sourceURL=webpack:///./methods/sort.js?")},"../../node_modules/bufferutil/fallback.js":module=>{"use strict";eval("\n\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\nconst mask = (source, mask, output, offset, length) => {\n  for (var i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n};\n\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\nconst unmask = (buffer, mask) => {\n  // Required until https://github.com/nodejs/node/issues/9006 is resolved.\n  const length = buffer.length;\n  for (var i = 0; i < length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n};\n\nmodule.exports = { mask, unmask };\n\n\n//# sourceURL=webpack:///../../node_modules/bufferutil/fallback.js?")},"../../node_modules/bufferutil/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\ntry {\n  module.exports = __webpack_require__(/*! node-gyp-build */ "../../node_modules/node-gyp-build/index.js")(__dirname);\n} catch (e) {\n  module.exports = __webpack_require__(/*! ./fallback */ "../../node_modules/bufferutil/fallback.js");\n}\n\n\n//# sourceURL=webpack:///../../node_modules/bufferutil/index.js?')},"../../node_modules/electron/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("const fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\n\nconst pathFile = path.join(__dirname, 'path.txt');\n\nfunction getElectronPath () {\n  let executablePath;\n  if (fs.existsSync(pathFile)) {\n    executablePath = fs.readFileSync(pathFile, 'utf-8');\n  }\n  if (process.env.ELECTRON_OVERRIDE_DIST_PATH) {\n    return path.join(process.env.ELECTRON_OVERRIDE_DIST_PATH, executablePath || 'electron');\n  }\n  if (executablePath) {\n    return path.join(__dirname, 'dist', executablePath);\n  } else {\n    throw new Error('Electron failed to install correctly, please delete node_modules/electron and try installing again');\n  }\n}\n\nmodule.exports = getElectronPath();\n\n\n//# sourceURL=webpack:///../../node_modules/electron/index.js?")},"../../node_modules/node-gyp-build/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("var fs = __webpack_require__(/*! fs */ \"fs\")\nvar path = __webpack_require__(/*! path */ \"path\")\nvar os = __webpack_require__(/*! os */ \"os\")\n\n// Workaround to fix webpack's build warnings: 'the request of a dependency is an expression'\nvar runtimeRequire =  true ? require : 0 // eslint-disable-line\n\nvar vars = (process.config && process.config.variables) || {}\nvar prebuildsOnly = !!process.env.PREBUILDS_ONLY\nvar abi = process.versions.modules // TODO: support old node where this is undef\nvar runtime = isElectron() ? 'electron' : 'node'\nvar arch = os.arch()\nvar platform = os.platform()\nvar libc = process.env.LIBC || (isAlpine(platform) ? 'musl' : 'glibc')\nvar armv = process.env.ARM_VERSION || (arch === 'arm64' ? '8' : vars.arm_version) || ''\nvar uv = (process.versions.uv || '').split('.')[0]\n\nmodule.exports = load\n\nfunction load (dir) {\n  return runtimeRequire(load.path(dir))\n}\n\nload.path = function (dir) {\n  dir = path.resolve(dir || '.')\n\n  try {\n    var name = runtimeRequire(path.join(dir, 'package.json')).name.toUpperCase().replace(/-/g, '_')\n    if (process.env[name + '_PREBUILD']) dir = process.env[name + '_PREBUILD']\n  } catch (err) {}\n\n  if (!prebuildsOnly) {\n    var release = getFirst(path.join(dir, 'build/Release'), matchBuild)\n    if (release) return release\n\n    var debug = getFirst(path.join(dir, 'build/Debug'), matchBuild)\n    if (debug) return debug\n  }\n\n  var prebuild = resolve(dir)\n  if (prebuild) return prebuild\n\n  var nearby = resolve(path.dirname(process.execPath))\n  if (nearby) return nearby\n\n  var target = [\n    'platform=' + platform,\n    'arch=' + arch,\n    'runtime=' + runtime,\n    'abi=' + abi,\n    'uv=' + uv,\n    armv ? 'armv=' + armv : '',\n    'libc=' + libc,\n    'node=' + process.versions.node,\n    process.versions.electron ? 'electron=' + process.versions.electron : '',\n     true ? 'webpack=true' : 0 // eslint-disable-line\n  ].filter(Boolean).join(' ')\n\n  throw new Error('No native build was found for ' + target + '\\n    loaded from: ' + dir + '\\n')\n\n  function resolve (dir) {\n    // Find matching \"prebuilds/<platform>-<arch>\" directory\n    var tuples = readdirSync(path.join(dir, 'prebuilds')).map(parseTuple)\n    var tuple = tuples.filter(matchTuple(platform, arch)).sort(compareTuples)[0]\n    if (!tuple) return\n\n    // Find most specific flavor first\n    var prebuilds = path.join(dir, 'prebuilds', tuple.name)\n    var parsed = readdirSync(prebuilds).map(parseTags)\n    var candidates = parsed.filter(matchTags(runtime, abi))\n    var winner = candidates.sort(compareTags(runtime))[0]\n    if (winner) return path.join(prebuilds, winner.file)\n  }\n}\n\nfunction readdirSync (dir) {\n  try {\n    return fs.readdirSync(dir)\n  } catch (err) {\n    return []\n  }\n}\n\nfunction getFirst (dir, filter) {\n  var files = readdirSync(dir).filter(filter)\n  return files[0] && path.join(dir, files[0])\n}\n\nfunction matchBuild (name) {\n  return /\\.node$/.test(name)\n}\n\nfunction parseTuple (name) {\n  // Example: darwin-x64+arm64\n  var arr = name.split('-')\n  if (arr.length !== 2) return\n\n  var platform = arr[0]\n  var architectures = arr[1].split('+')\n\n  if (!platform) return\n  if (!architectures.length) return\n  if (!architectures.every(Boolean)) return\n\n  return { name, platform, architectures }\n}\n\nfunction matchTuple (platform, arch) {\n  return function (tuple) {\n    if (tuple == null) return false\n    if (tuple.platform !== platform) return false\n    return tuple.architectures.includes(arch)\n  }\n}\n\nfunction compareTuples (a, b) {\n  // Prefer single-arch prebuilds over multi-arch\n  return a.architectures.length - b.architectures.length\n}\n\nfunction parseTags (file) {\n  var arr = file.split('.')\n  var extension = arr.pop()\n  var tags = { file: file, specificity: 0 }\n\n  if (extension !== 'node') return\n\n  for (var i = 0; i < arr.length; i++) {\n    var tag = arr[i]\n\n    if (tag === 'node' || tag === 'electron' || tag === 'node-webkit') {\n      tags.runtime = tag\n    } else if (tag === 'napi') {\n      tags.napi = true\n    } else if (tag.slice(0, 3) === 'abi') {\n      tags.abi = tag.slice(3)\n    } else if (tag.slice(0, 2) === 'uv') {\n      tags.uv = tag.slice(2)\n    } else if (tag.slice(0, 4) === 'armv') {\n      tags.armv = tag.slice(4)\n    } else if (tag === 'glibc' || tag === 'musl') {\n      tags.libc = tag\n    } else {\n      continue\n    }\n\n    tags.specificity++\n  }\n\n  return tags\n}\n\nfunction matchTags (runtime, abi) {\n  return function (tags) {\n    if (tags == null) return false\n    if (tags.runtime !== runtime && !runtimeAgnostic(tags)) return false\n    if (tags.abi !== abi && !tags.napi) return false\n    if (tags.uv && tags.uv !== uv) return false\n    if (tags.armv && tags.armv !== armv) return false\n    if (tags.libc && tags.libc !== libc) return false\n\n    return true\n  }\n}\n\nfunction runtimeAgnostic (tags) {\n  return tags.runtime === 'node' && tags.napi\n}\n\nfunction compareTags (runtime) {\n  // Precedence: non-agnostic runtime, abi over napi, then by specificity.\n  return function (a, b) {\n    if (a.runtime !== b.runtime) {\n      return a.runtime === runtime ? -1 : 1\n    } else if (a.abi !== b.abi) {\n      return a.abi ? -1 : 1\n    } else if (a.specificity !== b.specificity) {\n      return a.specificity > b.specificity ? -1 : 1\n    } else {\n      return 0\n    }\n  }\n}\n\nfunction isElectron () {\n  if (process.versions && process.versions.electron) return true\n  if (process.env.ELECTRON_RUN_AS_NODE) return true\n  return typeof window !== 'undefined' && window.process && window.process.type === 'renderer'\n}\n\nfunction isAlpine (platform) {\n  return platform === 'linux' && fs.existsSync('/etc/alpine-release')\n}\n\n// Exposed for unit tests\n// TODO: move to lib\nload.parseTags = parseTags\nload.matchTags = matchTags\nload.compareTags = compareTags\nload.parseTuple = parseTuple\nload.matchTuple = matchTuple\nload.compareTuples = compareTuples\n\n\n//# sourceURL=webpack:///../../node_modules/node-gyp-build/index.js?")},"../../node_modules/utf-8-validate/fallback.js":module=>{"use strict";eval("\n\n/**\n * Checks if a given buffer contains only correct UTF-8.\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\n * Markus Kuhn.\n *\n * @param {Buffer} buf The buffer to check\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\n * @public\n */\nfunction isValidUTF8(buf) {\n  const len = buf.length;\n  let i = 0;\n\n  while (i < len) {\n    if ((buf[i] & 0x80) === 0x00) {  // 0xxxxxxx\n      i++;\n    } else if ((buf[i] & 0xe0) === 0xc0) {  // 110xxxxx 10xxxxxx\n      if (\n        i + 1 === len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i] & 0xfe) === 0xc0  // overlong\n      ) {\n        return false;\n      }\n\n      i += 2;\n    } else if ((buf[i] & 0xf0) === 0xe0) {  // 1110xxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 2 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80 ||  // overlong\n        buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0  // surrogate (U+D800 - U+DFFF)\n      ) {\n        return false;\n      }\n\n      i += 3;\n    } else if ((buf[i] & 0xf8) === 0xf0) {  // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 3 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i + 3] & 0xc0) !== 0x80 ||\n        buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80 ||  // overlong\n        buf[i] === 0xf4 && buf[i + 1] > 0x8f || buf[i] > 0xf4  // > U+10FFFF\n      ) {\n        return false;\n      }\n\n      i += 4;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = isValidUTF8;\n\n\n//# sourceURL=webpack:///../../node_modules/utf-8-validate/fallback.js?")},"../../node_modules/utf-8-validate/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\ntry {\n  module.exports = __webpack_require__(/*! node-gyp-build */ "../../node_modules/node-gyp-build/index.js")(__dirname);\n} catch (e) {\n  module.exports = __webpack_require__(/*! ./fallback */ "../../node_modules/utf-8-validate/fallback.js");\n}\n\n\n//# sourceURL=webpack:///../../node_modules/utf-8-validate/index.js?')},"../../node_modules/ws/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nconst WebSocket = __webpack_require__(/*! ./lib/websocket */ "../../node_modules/ws/lib/websocket.js");\n\nWebSocket.createWebSocketStream = __webpack_require__(/*! ./lib/stream */ "../../node_modules/ws/lib/stream.js");\nWebSocket.Server = __webpack_require__(/*! ./lib/websocket-server */ "../../node_modules/ws/lib/websocket-server.js");\nWebSocket.Receiver = __webpack_require__(/*! ./lib/receiver */ "../../node_modules/ws/lib/receiver.js");\nWebSocket.Sender = __webpack_require__(/*! ./lib/sender */ "../../node_modules/ws/lib/sender.js");\n\nWebSocket.WebSocket = WebSocket;\nWebSocket.WebSocketServer = WebSocket.Server;\n\nmodule.exports = WebSocket;\n\n\n//# sourceURL=webpack:///../../node_modules/ws/index.js?')},"../../node_modules/ws/lib/buffer-util.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nconst { EMPTY_BUFFER } = __webpack_require__(/*! ./constants */ "../../node_modules/ws/lib/constants.js");\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nfunction concat(list, totalLength) {\n  if (list.length === 0) return EMPTY_BUFFER;\n  if (list.length === 1) return list[0];\n\n  const target = Buffer.allocUnsafe(totalLength);\n  let offset = 0;\n\n  for (let i = 0; i < list.length; i++) {\n    const buf = list[i];\n    target.set(buf, offset);\n    offset += buf.length;\n  }\n\n  if (offset < totalLength) return target.slice(0, offset);\n\n  return target;\n}\n\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\nfunction _mask(source, mask, output, offset, length) {\n  for (let i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n}\n\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\nfunction _unmask(buffer, mask) {\n  for (let i = 0; i < buffer.length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n}\n\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} buf The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n * @public\n */\nfunction toArrayBuffer(buf) {\n  if (buf.byteLength === buf.buffer.byteLength) {\n    return buf.buffer;\n  }\n\n  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n}\n\n/**\n * Converts `data` to a `Buffer`.\n *\n * @param {*} data The data to convert\n * @return {Buffer} The buffer\n * @throws {TypeError}\n * @public\n */\nfunction toBuffer(data) {\n  toBuffer.readOnly = true;\n\n  if (Buffer.isBuffer(data)) return data;\n\n  let buf;\n\n  if (data instanceof ArrayBuffer) {\n    buf = Buffer.from(data);\n  } else if (ArrayBuffer.isView(data)) {\n    buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n  } else {\n    buf = Buffer.from(data);\n    toBuffer.readOnly = false;\n  }\n\n  return buf;\n}\n\ntry {\n  const bufferUtil = __webpack_require__(/*! bufferutil */ "../../node_modules/bufferutil/index.js");\n\n  module.exports = {\n    concat,\n    mask(source, mask, output, offset, length) {\n      if (length < 48) _mask(source, mask, output, offset, length);\n      else bufferUtil.mask(source, mask, output, offset, length);\n    },\n    toArrayBuffer,\n    toBuffer,\n    unmask(buffer, mask) {\n      if (buffer.length < 32) _unmask(buffer, mask);\n      else bufferUtil.unmask(buffer, mask);\n    }\n  };\n} catch (e) /* istanbul ignore next */ {\n  module.exports = {\n    concat,\n    mask: _mask,\n    toArrayBuffer,\n    toBuffer,\n    unmask: _unmask\n  };\n}\n\n\n//# sourceURL=webpack:///../../node_modules/ws/lib/buffer-util.js?')},"../../node_modules/ws/lib/constants.js":module=>{"use strict";eval("\n\nmodule.exports = {\n  BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],\n  EMPTY_BUFFER: Buffer.alloc(0),\n  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',\n  kForOnEventAttribute: Symbol('kIsForOnEventAttribute'),\n  kListener: Symbol('kListener'),\n  kStatusCode: Symbol('status-code'),\n  kWebSocket: Symbol('websocket'),\n  NOOP: () => {}\n};\n\n\n//# sourceURL=webpack:///../../node_modules/ws/lib/constants.js?")},"../../node_modules/ws/lib/event-target.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst { kForOnEventAttribute, kListener } = __webpack_require__(/*! ./constants */ \"../../node_modules/ws/lib/constants.js\");\n\nconst kCode = Symbol('kCode');\nconst kData = Symbol('kData');\nconst kError = Symbol('kError');\nconst kMessage = Symbol('kMessage');\nconst kReason = Symbol('kReason');\nconst kTarget = Symbol('kTarget');\nconst kType = Symbol('kType');\nconst kWasClean = Symbol('kWasClean');\n\n/**\n * Class representing an event.\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @throws {TypeError} If the `type` argument is not specified\n   */\n  constructor(type) {\n    this[kTarget] = null;\n    this[kType] = type;\n  }\n\n  /**\n   * @type {*}\n   */\n  get target() {\n    return this[kTarget];\n  }\n\n  /**\n   * @type {String}\n   */\n  get type() {\n    return this[kType];\n  }\n}\n\nObject.defineProperty(Event.prototype, 'target', { enumerable: true });\nObject.defineProperty(Event.prototype, 'type', { enumerable: true });\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {Number} [options.code=0] The status code explaining why the\n   *     connection was closed\n   * @param {String} [options.reason=''] A human-readable string explaining why\n   *     the connection was closed\n   * @param {Boolean} [options.wasClean=false] Indicates whether or not the\n   *     connection was cleanly closed\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kCode] = options.code === undefined ? 0 : options.code;\n    this[kReason] = options.reason === undefined ? '' : options.reason;\n    this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get code() {\n    return this[kCode];\n  }\n\n  /**\n   * @type {String}\n   */\n  get reason() {\n    return this[kReason];\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get wasClean() {\n    return this[kWasClean];\n  }\n}\n\nObject.defineProperty(CloseEvent.prototype, 'code', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'reason', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'wasClean', { enumerable: true });\n\n/**\n * Class representing an error event.\n *\n * @extends Event\n */\nclass ErrorEvent extends Event {\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.error=null] The error that generated this event\n   * @param {String} [options.message=''] The error message\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kError] = options.error === undefined ? null : options.error;\n    this[kMessage] = options.message === undefined ? '' : options.message;\n  }\n\n  /**\n   * @type {*}\n   */\n  get error() {\n    return this[kError];\n  }\n\n  /**\n   * @type {String}\n   */\n  get message() {\n    return this[kMessage];\n  }\n}\n\nObject.defineProperty(ErrorEvent.prototype, 'error', { enumerable: true });\nObject.defineProperty(ErrorEvent.prototype, 'message', { enumerable: true });\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.data=null] The message content\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kData] = options.data === undefined ? null : options.data;\n  }\n\n  /**\n   * @type {*}\n   */\n  get data() {\n    return this[kData];\n  }\n}\n\nObject.defineProperty(MessageEvent.prototype, 'data', { enumerable: true });\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} type A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @param {Object} [options] An options object specifies characteristics about\n   *     the event listener\n   * @param {Boolean} [options.once=false] A `Boolean` indicating that the\n   *     listener should be invoked at most once after being added. If `true`,\n   *     the listener would be automatically removed when invoked.\n   * @public\n   */\n  addEventListener(type, listener, options = {}) {\n    let wrapper;\n\n    if (type === 'message') {\n      wrapper = function onMessage(data, isBinary) {\n        const event = new MessageEvent('message', {\n          data: isBinary ? data : data.toString()\n        });\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else if (type === 'close') {\n      wrapper = function onClose(code, message) {\n        const event = new CloseEvent('close', {\n          code,\n          reason: message.toString(),\n          wasClean: this._closeFrameReceived && this._closeFrameSent\n        });\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else if (type === 'error') {\n      wrapper = function onError(error) {\n        const event = new ErrorEvent('error', {\n          error,\n          message: error.message\n        });\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else if (type === 'open') {\n      wrapper = function onOpen() {\n        const event = new Event('open');\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else {\n      return;\n    }\n\n    wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];\n    wrapper[kListener] = listener;\n\n    if (options.once) {\n      this.once(type, wrapper);\n    } else {\n      this.on(type, wrapper);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} type A string representing the event type to remove\n   * @param {Function} handler The listener to remove\n   * @public\n   */\n  removeEventListener(type, handler) {\n    for (const listener of this.listeners(type)) {\n      if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {\n        this.removeListener(type, listener);\n        break;\n      }\n    }\n  }\n};\n\nmodule.exports = {\n  CloseEvent,\n  ErrorEvent,\n  Event,\n  EventTarget,\n  MessageEvent\n};\n\n\n//# sourceURL=webpack:///../../node_modules/ws/lib/event-target.js?")},"../../node_modules/ws/lib/extension.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst { tokenChars } = __webpack_require__(/*! ./validation */ \"../../node_modules/ws/lib/validation.js\");\n\n/**\n * Adds an offer to the map of extension offers or a parameter to the map of\n * parameters.\n *\n * @param {Object} dest The map of extension offers or parameters\n * @param {String} name The extension or parameter name\n * @param {(Object|Boolean|String)} elem The extension parameters or the\n *     parameter value\n * @private\n */\nfunction push(dest, name, elem) {\n  if (dest[name] === undefined) dest[name] = [elem];\n  else dest[name].push(elem);\n}\n\n/**\n * Parses the `Sec-WebSocket-Extensions` header into an object.\n *\n * @param {String} header The field value of the header\n * @return {Object} The parsed object\n * @public\n */\nfunction parse(header) {\n  const offers = Object.create(null);\n  let params = Object.create(null);\n  let mustUnescape = false;\n  let isEscaping = false;\n  let inQuotes = false;\n  let extensionName;\n  let paramName;\n  let start = -1;\n  let code = -1;\n  let end = -1;\n  let i = 0;\n\n  for (; i < header.length; i++) {\n    code = header.charCodeAt(i);\n\n    if (extensionName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (\n        i !== 0 &&\n        (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n      ) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        const name = header.slice(start, end);\n        if (code === 0x2c) {\n          push(offers, name, params);\n          params = Object.create(null);\n        } else {\n          extensionName = name;\n        }\n\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else if (paramName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (code === 0x20 || code === 0x09) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        push(params, header.slice(start, end), true);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        start = end = -1;\n      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {\n        paramName = header.slice(start, i);\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else {\n      //\n      // The value of a quoted-string after unescaping must conform to the\n      // token ABNF, so only token characters are valid.\n      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\n      //\n      if (isEscaping) {\n        if (tokenChars[code] !== 1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n        if (start === -1) start = i;\n        else if (!mustUnescape) mustUnescape = true;\n        isEscaping = false;\n      } else if (inQuotes) {\n        if (tokenChars[code] === 1) {\n          if (start === -1) start = i;\n        } else if (code === 0x22 /* '\"' */ && start !== -1) {\n          inQuotes = false;\n          end = i;\n        } else if (code === 0x5c /* '\\' */) {\n          isEscaping = true;\n        } else {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n        inQuotes = true;\n      } else if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\n        if (end === -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        let value = header.slice(start, end);\n        if (mustUnescape) {\n          value = value.replace(/\\\\/g, '');\n          mustUnescape = false;\n        }\n        push(params, paramName, value);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        paramName = undefined;\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    }\n  }\n\n  if (start === -1 || inQuotes || code === 0x20 || code === 0x09) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  if (end === -1) end = i;\n  const token = header.slice(start, end);\n  if (extensionName === undefined) {\n    push(offers, token, params);\n  } else {\n    if (paramName === undefined) {\n      push(params, token, true);\n    } else if (mustUnescape) {\n      push(params, paramName, token.replace(/\\\\/g, ''));\n    } else {\n      push(params, paramName, token);\n    }\n    push(offers, extensionName, params);\n  }\n\n  return offers;\n}\n\n/**\n * Builds the `Sec-WebSocket-Extensions` header field value.\n *\n * @param {Object} extensions The map of extensions and parameters to format\n * @return {String} A string representing the given object\n * @public\n */\nfunction format(extensions) {\n  return Object.keys(extensions)\n    .map((extension) => {\n      let configurations = extensions[extension];\n      if (!Array.isArray(configurations)) configurations = [configurations];\n      return configurations\n        .map((params) => {\n          return [extension]\n            .concat(\n              Object.keys(params).map((k) => {\n                let values = params[k];\n                if (!Array.isArray(values)) values = [values];\n                return values\n                  .map((v) => (v === true ? k : `${k}=${v}`))\n                  .join('; ');\n              })\n            )\n            .join('; ');\n        })\n        .join(', ');\n    })\n    .join(', ');\n}\n\nmodule.exports = { format, parse };\n\n\n//# sourceURL=webpack:///../../node_modules/ws/lib/extension.js?")},"../../node_modules/ws/lib/limiter.js":module=>{"use strict";eval("\n\nconst kDone = Symbol('kDone');\nconst kRun = Symbol('kRun');\n\n/**\n * A very simple job queue with adjustable concurrency. Adapted from\n * https://github.com/STRML/async-limiter\n */\nclass Limiter {\n  /**\n   * Creates a new `Limiter`.\n   *\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\n   *     to run concurrently\n   */\n  constructor(concurrency) {\n    this[kDone] = () => {\n      this.pending--;\n      this[kRun]();\n    };\n    this.concurrency = concurrency || Infinity;\n    this.jobs = [];\n    this.pending = 0;\n  }\n\n  /**\n   * Adds a job to the queue.\n   *\n   * @param {Function} job The job to run\n   * @public\n   */\n  add(job) {\n    this.jobs.push(job);\n    this[kRun]();\n  }\n\n  /**\n   * Removes a job from the queue and runs it if possible.\n   *\n   * @private\n   */\n  [kRun]() {\n    if (this.pending === this.concurrency) return;\n\n    if (this.jobs.length) {\n      const job = this.jobs.shift();\n\n      this.pending++;\n      job(this[kDone]);\n    }\n  }\n}\n\nmodule.exports = Limiter;\n\n\n//# sourceURL=webpack:///../../node_modules/ws/lib/limiter.js?")},"../../node_modules/ws/lib/permessage-deflate.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\n\nconst bufferUtil = __webpack_require__(/*! ./buffer-util */ \"../../node_modules/ws/lib/buffer-util.js\");\nconst Limiter = __webpack_require__(/*! ./limiter */ \"../../node_modules/ws/lib/limiter.js\");\nconst { kStatusCode } = __webpack_require__(/*! ./constants */ \"../../node_modules/ws/lib/constants.js\");\n\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\nconst kPerMessageDeflate = Symbol('permessage-deflate');\nconst kTotalLength = Symbol('total-length');\nconst kCallback = Symbol('callback');\nconst kBuffers = Symbol('buffers');\nconst kError = Symbol('error');\n\n//\n// We limit zlib concurrency, which prevents severe memory fragmentation\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n// and https://github.com/websockets/ws/issues/1202\n//\n// Intentionally global; it's the global thread pool that's an issue.\n//\nlet zlibLimiter;\n\n/**\n * permessage-deflate implementation.\n */\nclass PerMessageDeflate {\n  /**\n   * Creates a PerMessageDeflate instance.\n   *\n   * @param {Object} [options] Configuration options\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\n   *     for, or request, a custom client window size\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\n   *     acknowledge disabling of client context takeover\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\n   *     calls to zlib\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\n   *     use of a custom server window size\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\n   *     disabling of server context takeover\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\n   *     messages should not be compressed if context takeover is disabled\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\n   *     deflate\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\n   *     inflate\n   * @param {Boolean} [isServer=false] Create the instance in either server or\n   *     client mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */\n  constructor(options, isServer, maxPayload) {\n    this._maxPayload = maxPayload | 0;\n    this._options = options || {};\n    this._threshold =\n      this._options.threshold !== undefined ? this._options.threshold : 1024;\n    this._isServer = !!isServer;\n    this._deflate = null;\n    this._inflate = null;\n\n    this.params = null;\n\n    if (!zlibLimiter) {\n      const concurrency =\n        this._options.concurrencyLimit !== undefined\n          ? this._options.concurrencyLimit\n          : 10;\n      zlibLimiter = new Limiter(concurrency);\n    }\n  }\n\n  /**\n   * @type {String}\n   */\n  static get extensionName() {\n    return 'permessage-deflate';\n  }\n\n  /**\n   * Create an extension negotiation offer.\n   *\n   * @return {Object} Extension parameters\n   * @public\n   */\n  offer() {\n    const params = {};\n\n    if (this._options.serverNoContextTakeover) {\n      params.server_no_context_takeover = true;\n    }\n    if (this._options.clientNoContextTakeover) {\n      params.client_no_context_takeover = true;\n    }\n    if (this._options.serverMaxWindowBits) {\n      params.server_max_window_bits = this._options.serverMaxWindowBits;\n    }\n    if (this._options.clientMaxWindowBits) {\n      params.client_max_window_bits = this._options.clientMaxWindowBits;\n    } else if (this._options.clientMaxWindowBits == null) {\n      params.client_max_window_bits = true;\n    }\n\n    return params;\n  }\n\n  /**\n   * Accept an extension negotiation offer/response.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Object} Accepted configuration\n   * @public\n   */\n  accept(configurations) {\n    configurations = this.normalizeParams(configurations);\n\n    this.params = this._isServer\n      ? this.acceptAsServer(configurations)\n      : this.acceptAsClient(configurations);\n\n    return this.params;\n  }\n\n  /**\n   * Releases all resources used by the extension.\n   *\n   * @public\n   */\n  cleanup() {\n    if (this._inflate) {\n      this._inflate.close();\n      this._inflate = null;\n    }\n\n    if (this._deflate) {\n      const callback = this._deflate[kCallback];\n\n      this._deflate.close();\n      this._deflate = null;\n\n      if (callback) {\n        callback(\n          new Error(\n            'The deflate stream was closed while data was being processed'\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   *  Accept an extension negotiation offer.\n   *\n   * @param {Array} offers The extension negotiation offers\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsServer(offers) {\n    const opts = this._options;\n    const accepted = offers.find((params) => {\n      if (\n        (opts.serverNoContextTakeover === false &&\n          params.server_no_context_takeover) ||\n        (params.server_max_window_bits &&\n          (opts.serverMaxWindowBits === false ||\n            (typeof opts.serverMaxWindowBits === 'number' &&\n              opts.serverMaxWindowBits > params.server_max_window_bits))) ||\n        (typeof opts.clientMaxWindowBits === 'number' &&\n          !params.client_max_window_bits)\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n\n    if (!accepted) {\n      throw new Error('None of the extension offers can be accepted');\n    }\n\n    if (opts.serverNoContextTakeover) {\n      accepted.server_no_context_takeover = true;\n    }\n    if (opts.clientNoContextTakeover) {\n      accepted.client_no_context_takeover = true;\n    }\n    if (typeof opts.serverMaxWindowBits === 'number') {\n      accepted.server_max_window_bits = opts.serverMaxWindowBits;\n    }\n    if (typeof opts.clientMaxWindowBits === 'number') {\n      accepted.client_max_window_bits = opts.clientMaxWindowBits;\n    } else if (\n      accepted.client_max_window_bits === true ||\n      opts.clientMaxWindowBits === false\n    ) {\n      delete accepted.client_max_window_bits;\n    }\n\n    return accepted;\n  }\n\n  /**\n   * Accept the extension negotiation response.\n   *\n   * @param {Array} response The extension negotiation response\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsClient(response) {\n    const params = response[0];\n\n    if (\n      this._options.clientNoContextTakeover === false &&\n      params.client_no_context_takeover\n    ) {\n      throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n    }\n\n    if (!params.client_max_window_bits) {\n      if (typeof this._options.clientMaxWindowBits === 'number') {\n        params.client_max_window_bits = this._options.clientMaxWindowBits;\n      }\n    } else if (\n      this._options.clientMaxWindowBits === false ||\n      (typeof this._options.clientMaxWindowBits === 'number' &&\n        params.client_max_window_bits > this._options.clientMaxWindowBits)\n    ) {\n      throw new Error(\n        'Unexpected or invalid parameter \"client_max_window_bits\"'\n      );\n    }\n\n    return params;\n  }\n\n  /**\n   * Normalize parameters.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Array} The offers/response with normalized parameters\n   * @private\n   */\n  normalizeParams(configurations) {\n    configurations.forEach((params) => {\n      Object.keys(params).forEach((key) => {\n        let value = params[key];\n\n        if (value.length > 1) {\n          throw new Error(`Parameter \"${key}\" must have only a single value`);\n        }\n\n        value = value[0];\n\n        if (key === 'client_max_window_bits') {\n          if (value !== true) {\n            const num = +value;\n            if (!Number.isInteger(num) || num < 8 || num > 15) {\n              throw new TypeError(\n                `Invalid value for parameter \"${key}\": ${value}`\n              );\n            }\n            value = num;\n          } else if (!this._isServer) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else if (key === 'server_max_window_bits') {\n          const num = +value;\n          if (!Number.isInteger(num) || num < 8 || num > 15) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n          value = num;\n        } else if (\n          key === 'client_no_context_takeover' ||\n          key === 'server_no_context_takeover'\n        ) {\n          if (value !== true) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else {\n          throw new Error(`Unknown parameter \"${key}\"`);\n        }\n\n        params[key] = value;\n      });\n    });\n\n    return configurations;\n  }\n\n  /**\n   * Decompress data. Concurrency limited.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  decompress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._decompress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Compress data. Concurrency limited.\n   *\n   * @param {Buffer} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  compress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._compress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _decompress(data, fin, callback) {\n    const endpoint = this._isServer ? 'client' : 'server';\n\n    if (!this._inflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._inflate = zlib.createInflateRaw({\n        ...this._options.zlibInflateOptions,\n        windowBits\n      });\n      this._inflate[kPerMessageDeflate] = this;\n      this._inflate[kTotalLength] = 0;\n      this._inflate[kBuffers] = [];\n      this._inflate.on('error', inflateOnError);\n      this._inflate.on('data', inflateOnData);\n    }\n\n    this._inflate[kCallback] = callback;\n\n    this._inflate.write(data);\n    if (fin) this._inflate.write(TRAILER);\n\n    this._inflate.flush(() => {\n      const err = this._inflate[kError];\n\n      if (err) {\n        this._inflate.close();\n        this._inflate = null;\n        callback(err);\n        return;\n      }\n\n      const data = bufferUtil.concat(\n        this._inflate[kBuffers],\n        this._inflate[kTotalLength]\n      );\n\n      if (this._inflate._readableState.endEmitted) {\n        this._inflate.close();\n        this._inflate = null;\n      } else {\n        this._inflate[kTotalLength] = 0;\n        this._inflate[kBuffers] = [];\n\n        if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n          this._inflate.reset();\n        }\n      }\n\n      callback(null, data);\n    });\n  }\n\n  /**\n   * Compress data.\n   *\n   * @param {Buffer} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _compress(data, fin, callback) {\n    const endpoint = this._isServer ? 'server' : 'client';\n\n    if (!this._deflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._deflate = zlib.createDeflateRaw({\n        ...this._options.zlibDeflateOptions,\n        windowBits\n      });\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      this._deflate.on('data', deflateOnData);\n    }\n\n    this._deflate[kCallback] = callback;\n\n    this._deflate.write(data);\n    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\n      if (!this._deflate) {\n        //\n        // The deflate stream was closed while data was being processed.\n        //\n        return;\n      }\n\n      let data = bufferUtil.concat(\n        this._deflate[kBuffers],\n        this._deflate[kTotalLength]\n      );\n\n      if (fin) data = data.slice(0, data.length - 4);\n\n      //\n      // Ensure that the callback will not be called again in\n      // `PerMessageDeflate#cleanup()`.\n      //\n      this._deflate[kCallback] = null;\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n        this._deflate.reset();\n      }\n\n      callback(null, data);\n    });\n  }\n}\n\nmodule.exports = PerMessageDeflate;\n\n/**\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction deflateOnData(chunk) {\n  this[kBuffers].push(chunk);\n  this[kTotalLength] += chunk.length;\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction inflateOnData(chunk) {\n  this[kTotalLength] += chunk.length;\n\n  if (\n    this[kPerMessageDeflate]._maxPayload < 1 ||\n    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload\n  ) {\n    this[kBuffers].push(chunk);\n    return;\n  }\n\n  this[kError] = new RangeError('Max payload size exceeded');\n  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';\n  this[kError][kStatusCode] = 1009;\n  this.removeListener('data', inflateOnData);\n  this.reset();\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\n *\n * @param {Error} err The emitted error\n * @private\n */\nfunction inflateOnError(err) {\n  //\n  // There is no need to call `Zlib#close()` as the handle is automatically\n  // closed when an error is emitted.\n  //\n  this[kPerMessageDeflate]._inflate = null;\n  err[kStatusCode] = 1007;\n  this[kCallback](err);\n}\n\n\n//# sourceURL=webpack:///../../node_modules/ws/lib/permessage-deflate.js?")},"../../node_modules/ws/lib/receiver.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst { Writable } = __webpack_require__(/*! stream */ \"stream\");\n\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"../../node_modules/ws/lib/permessage-deflate.js\");\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  kStatusCode,\n  kWebSocket\n} = __webpack_require__(/*! ./constants */ \"../../node_modules/ws/lib/constants.js\");\nconst { concat, toArrayBuffer, unmask } = __webpack_require__(/*! ./buffer-util */ \"../../node_modules/ws/lib/buffer-util.js\");\nconst { isValidStatusCode, isValidUTF8 } = __webpack_require__(/*! ./validation */ \"../../node_modules/ws/lib/validation.js\");\n\nconst GET_INFO = 0;\nconst GET_PAYLOAD_LENGTH_16 = 1;\nconst GET_PAYLOAD_LENGTH_64 = 2;\nconst GET_MASK = 3;\nconst GET_DATA = 4;\nconst INFLATING = 5;\n\n/**\n * HyBi Receiver implementation.\n *\n * @extends Writable\n */\nclass Receiver extends Writable {\n  /**\n   * Creates a Receiver instance.\n   *\n   * @param {Object} [options] Options object\n   * @param {String} [options.binaryType=nodebuffer] The type for binary data\n   * @param {Object} [options.extensions] An object containing the negotiated\n   *     extensions\n   * @param {Boolean} [options.isServer=false] Specifies whether to operate in\n   *     client or server mode\n   * @param {Number} [options.maxPayload=0] The maximum allowed message length\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   */\n  constructor(options = {}) {\n    super();\n\n    this._binaryType = options.binaryType || BINARY_TYPES[0];\n    this._extensions = options.extensions || {};\n    this._isServer = !!options.isServer;\n    this._maxPayload = options.maxPayload | 0;\n    this._skipUTF8Validation = !!options.skipUTF8Validation;\n    this[kWebSocket] = undefined;\n\n    this._bufferedBytes = 0;\n    this._buffers = [];\n\n    this._compressed = false;\n    this._payloadLength = 0;\n    this._mask = undefined;\n    this._fragmented = 0;\n    this._masked = false;\n    this._fin = false;\n    this._opcode = 0;\n\n    this._totalPayloadLength = 0;\n    this._messageLength = 0;\n    this._fragments = [];\n\n    this._state = GET_INFO;\n    this._loop = false;\n  }\n\n  /**\n   * Implements `Writable.prototype._write()`.\n   *\n   * @param {Buffer} chunk The chunk of data to write\n   * @param {String} encoding The character encoding of `chunk`\n   * @param {Function} cb Callback\n   * @private\n   */\n  _write(chunk, encoding, cb) {\n    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\n\n    this._bufferedBytes += chunk.length;\n    this._buffers.push(chunk);\n    this.startLoop(cb);\n  }\n\n  /**\n   * Consumes `n` bytes from the buffered data.\n   *\n   * @param {Number} n The number of bytes to consume\n   * @return {Buffer} The consumed bytes\n   * @private\n   */\n  consume(n) {\n    this._bufferedBytes -= n;\n\n    if (n === this._buffers[0].length) return this._buffers.shift();\n\n    if (n < this._buffers[0].length) {\n      const buf = this._buffers[0];\n      this._buffers[0] = buf.slice(n);\n      return buf.slice(0, n);\n    }\n\n    const dst = Buffer.allocUnsafe(n);\n\n    do {\n      const buf = this._buffers[0];\n      const offset = dst.length - n;\n\n      if (n >= buf.length) {\n        dst.set(this._buffers.shift(), offset);\n      } else {\n        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\n        this._buffers[0] = buf.slice(n);\n      }\n\n      n -= buf.length;\n    } while (n > 0);\n\n    return dst;\n  }\n\n  /**\n   * Starts the parsing loop.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  startLoop(cb) {\n    let err;\n    this._loop = true;\n\n    do {\n      switch (this._state) {\n        case GET_INFO:\n          err = this.getInfo();\n          break;\n        case GET_PAYLOAD_LENGTH_16:\n          err = this.getPayloadLength16();\n          break;\n        case GET_PAYLOAD_LENGTH_64:\n          err = this.getPayloadLength64();\n          break;\n        case GET_MASK:\n          this.getMask();\n          break;\n        case GET_DATA:\n          err = this.getData(cb);\n          break;\n        default:\n          // `INFLATING`\n          this._loop = false;\n          return;\n      }\n    } while (this._loop);\n\n    cb(err);\n  }\n\n  /**\n   * Reads the first two bytes of a frame.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getInfo() {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(2);\n\n    if ((buf[0] & 0x30) !== 0x00) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'RSV2 and RSV3 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_2_3'\n      );\n    }\n\n    const compressed = (buf[0] & 0x40) === 0x40;\n\n    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'RSV1 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_1'\n      );\n    }\n\n    this._fin = (buf[0] & 0x80) === 0x80;\n    this._opcode = buf[0] & 0x0f;\n    this._payloadLength = buf[1] & 0x7f;\n\n    if (this._opcode === 0x00) {\n      if (compressed) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n      }\n\n      if (!this._fragmented) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'invalid opcode 0',\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n      }\n\n      this._opcode = this._fragmented;\n    } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n      if (this._fragmented) {\n        this._loop = false;\n        return error(\n          RangeError,\n          `invalid opcode ${this._opcode}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n      }\n\n      this._compressed = compressed;\n    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n      if (!this._fin) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'FIN must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_FIN'\n        );\n      }\n\n      if (compressed) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n      }\n\n      if (this._payloadLength > 0x7d) {\n        this._loop = false;\n        return error(\n          RangeError,\n          `invalid payload length ${this._payloadLength}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\n        );\n      }\n    } else {\n      this._loop = false;\n      return error(\n        RangeError,\n        `invalid opcode ${this._opcode}`,\n        true,\n        1002,\n        'WS_ERR_INVALID_OPCODE'\n      );\n    }\n\n    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n    this._masked = (buf[1] & 0x80) === 0x80;\n\n    if (this._isServer) {\n      if (!this._masked) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'MASK must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_MASK'\n        );\n      }\n    } else if (this._masked) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'MASK must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_MASK'\n      );\n    }\n\n    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\n    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\n    else return this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+16).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getPayloadLength16() {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    this._payloadLength = this.consume(2).readUInt16BE(0);\n    return this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+64).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getPayloadLength64() {\n    if (this._bufferedBytes < 8) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(8);\n    const num = buf.readUInt32BE(0);\n\n    //\n    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n    // if payload length is greater than this number.\n    //\n    if (num > Math.pow(2, 53 - 32) - 1) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'Unsupported WebSocket frame: payload length > 2^53 - 1',\n        false,\n        1009,\n        'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'\n      );\n    }\n\n    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\n    return this.haveLength();\n  }\n\n  /**\n   * Payload length has been read.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  haveLength() {\n    if (this._payloadLength && this._opcode < 0x08) {\n      this._totalPayloadLength += this._payloadLength;\n      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'Max payload size exceeded',\n          false,\n          1009,\n          'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n        );\n      }\n    }\n\n    if (this._masked) this._state = GET_MASK;\n    else this._state = GET_DATA;\n  }\n\n  /**\n   * Reads mask bytes.\n   *\n   * @private\n   */\n  getMask() {\n    if (this._bufferedBytes < 4) {\n      this._loop = false;\n      return;\n    }\n\n    this._mask = this.consume(4);\n    this._state = GET_DATA;\n  }\n\n  /**\n   * Reads data bytes.\n   *\n   * @param {Function} cb Callback\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  getData(cb) {\n    let data = EMPTY_BUFFER;\n\n    if (this._payloadLength) {\n      if (this._bufferedBytes < this._payloadLength) {\n        this._loop = false;\n        return;\n      }\n\n      data = this.consume(this._payloadLength);\n\n      if (\n        this._masked &&\n        (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0\n      ) {\n        unmask(data, this._mask);\n      }\n    }\n\n    if (this._opcode > 0x07) return this.controlMessage(data);\n\n    if (this._compressed) {\n      this._state = INFLATING;\n      this.decompress(data, cb);\n      return;\n    }\n\n    if (data.length) {\n      //\n      // This message is not compressed so its length is the sum of the payload\n      // length of all fragments.\n      //\n      this._messageLength = this._totalPayloadLength;\n      this._fragments.push(data);\n    }\n\n    return this.dataMessage();\n  }\n\n  /**\n   * Decompresses data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Function} cb Callback\n   * @private\n   */\n  decompress(data, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    perMessageDeflate.decompress(data, this._fin, (err, buf) => {\n      if (err) return cb(err);\n\n      if (buf.length) {\n        this._messageLength += buf.length;\n        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\n          return cb(\n            error(\n              RangeError,\n              'Max payload size exceeded',\n              false,\n              1009,\n              'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n            )\n          );\n        }\n\n        this._fragments.push(buf);\n      }\n\n      const er = this.dataMessage();\n      if (er) return cb(er);\n\n      this.startLoop(cb);\n    });\n  }\n\n  /**\n   * Handles a data message.\n   *\n   * @return {(Error|undefined)} A possible error\n   * @private\n   */\n  dataMessage() {\n    if (this._fin) {\n      const messageLength = this._messageLength;\n      const fragments = this._fragments;\n\n      this._totalPayloadLength = 0;\n      this._messageLength = 0;\n      this._fragmented = 0;\n      this._fragments = [];\n\n      if (this._opcode === 2) {\n        let data;\n\n        if (this._binaryType === 'nodebuffer') {\n          data = concat(fragments, messageLength);\n        } else if (this._binaryType === 'arraybuffer') {\n          data = toArrayBuffer(concat(fragments, messageLength));\n        } else {\n          data = fragments;\n        }\n\n        this.emit('message', data, true);\n      } else {\n        const buf = concat(fragments, messageLength);\n\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n          this._loop = false;\n          return error(\n            Error,\n            'invalid UTF-8 sequence',\n            true,\n            1007,\n            'WS_ERR_INVALID_UTF8'\n          );\n        }\n\n        this.emit('message', buf, false);\n      }\n    }\n\n    this._state = GET_INFO;\n  }\n\n  /**\n   * Handles a control message.\n   *\n   * @param {Buffer} data Data to handle\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  controlMessage(data) {\n    if (this._opcode === 0x08) {\n      this._loop = false;\n\n      if (data.length === 0) {\n        this.emit('conclude', 1005, EMPTY_BUFFER);\n        this.end();\n      } else if (data.length === 1) {\n        return error(\n          RangeError,\n          'invalid payload length 1',\n          true,\n          1002,\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\n        );\n      } else {\n        const code = data.readUInt16BE(0);\n\n        if (!isValidStatusCode(code)) {\n          return error(\n            RangeError,\n            `invalid status code ${code}`,\n            true,\n            1002,\n            'WS_ERR_INVALID_CLOSE_CODE'\n          );\n        }\n\n        const buf = data.slice(2);\n\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n          return error(\n            Error,\n            'invalid UTF-8 sequence',\n            true,\n            1007,\n            'WS_ERR_INVALID_UTF8'\n          );\n        }\n\n        this.emit('conclude', code, buf);\n        this.end();\n      }\n    } else if (this._opcode === 0x09) {\n      this.emit('ping', data);\n    } else {\n      this.emit('pong', data);\n    }\n\n    this._state = GET_INFO;\n  }\n}\n\nmodule.exports = Receiver;\n\n/**\n * Builds an error object.\n *\n * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\n * @param {String} message The error message\n * @param {Boolean} prefix Specifies whether or not to add a default prefix to\n *     `message`\n * @param {Number} statusCode The status code\n * @param {String} errorCode The exposed error code\n * @return {(Error|RangeError)} The error\n * @private\n */\nfunction error(ErrorCtor, message, prefix, statusCode, errorCode) {\n  const err = new ErrorCtor(\n    prefix ? `Invalid WebSocket frame: ${message}` : message\n  );\n\n  Error.captureStackTrace(err, error);\n  err.code = errorCode;\n  err[kStatusCode] = statusCode;\n  return err;\n}\n\n\n//# sourceURL=webpack:///../../node_modules/ws/lib/receiver.js?")},"../../node_modules/ws/lib/sender.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls$\" }] */\n\n\n\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst { randomFillSync } = __webpack_require__(/*! crypto */ \"crypto\");\n\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"../../node_modules/ws/lib/permessage-deflate.js\");\nconst { EMPTY_BUFFER } = __webpack_require__(/*! ./constants */ \"../../node_modules/ws/lib/constants.js\");\nconst { isValidStatusCode } = __webpack_require__(/*! ./validation */ \"../../node_modules/ws/lib/validation.js\");\nconst { mask: applyMask, toBuffer } = __webpack_require__(/*! ./buffer-util */ \"../../node_modules/ws/lib/buffer-util.js\");\n\nconst maskBuffer = Buffer.alloc(4);\n\n/**\n * HyBi Sender implementation.\n */\nclass Sender {\n  /**\n   * Creates a Sender instance.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The connection socket\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   * @param {Function} [generateMask] The function used to generate the masking\n   *     key\n   */\n  constructor(socket, extensions, generateMask) {\n    this._extensions = extensions || {};\n\n    if (generateMask) {\n      this._generateMask = generateMask;\n      this._maskBuffer = Buffer.alloc(4);\n    }\n\n    this._socket = socket;\n\n    this._firstFragment = true;\n    this._compress = false;\n\n    this._bufferedBytes = 0;\n    this._deflating = false;\n    this._queue = [];\n  }\n\n  /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {Buffer} data The data to frame\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @return {Buffer[]} The framed data as a list of `Buffer` instances\n   * @public\n   */\n  static frame(data, options) {\n    let mask;\n    let merge = false;\n    let offset = 2;\n    let skipMasking = false;\n\n    if (options.mask) {\n      mask = options.maskBuffer || maskBuffer;\n\n      if (options.generateMask) {\n        options.generateMask(mask);\n      } else {\n        randomFillSync(mask, 0, 4);\n      }\n\n      skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;\n      if (options.readOnly && !skipMasking) merge = true;\n\n      offset = 6;\n    }\n\n    let payloadLength = data.length;\n\n    if (data.length >= 65536) {\n      offset += 8;\n      payloadLength = 127;\n    } else if (data.length > 125) {\n      offset += 2;\n      payloadLength = 126;\n    }\n\n    const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);\n\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n    if (options.rsv1) target[0] |= 0x40;\n\n    target[1] = payloadLength;\n\n    if (payloadLength === 126) {\n      target.writeUInt16BE(data.length, 2);\n    } else if (payloadLength === 127) {\n      target[2] = target[3] = 0;\n      target.writeUIntBE(data.length, 4, 6);\n    }\n\n    if (!options.mask) return [target, data];\n\n    target[1] |= 0x80;\n    target[offset - 4] = mask[0];\n    target[offset - 3] = mask[1];\n    target[offset - 2] = mask[2];\n    target[offset - 1] = mask[3];\n\n    if (skipMasking) return [target, data];\n\n    if (merge) {\n      applyMask(data, mask, target, offset, data.length);\n      return [target];\n    }\n\n    applyMask(data, mask, data, 0, data.length);\n    return [target, data];\n  }\n\n  /**\n   * Sends a close message to the other peer.\n   *\n   * @param {Number} [code] The status code component of the body\n   * @param {(String|Buffer)} [data] The message component of the body\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  close(code, data, mask, cb) {\n    let buf;\n\n    if (code === undefined) {\n      buf = EMPTY_BUFFER;\n    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\n      throw new TypeError('First argument must be a valid error code number');\n    } else if (data === undefined || !data.length) {\n      buf = Buffer.allocUnsafe(2);\n      buf.writeUInt16BE(code, 0);\n    } else {\n      const length = Buffer.byteLength(data);\n\n      if (length > 123) {\n        throw new RangeError('The message must not be greater than 123 bytes');\n      }\n\n      buf = Buffer.allocUnsafe(2 + length);\n      buf.writeUInt16BE(code, 0);\n\n      if (typeof data === 'string') {\n        buf.write(data, 2);\n      } else {\n        buf.set(data, 2);\n      }\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doClose, buf, mask, cb]);\n    } else {\n      this.doClose(buf, mask, cb);\n    }\n  }\n\n  /**\n   * Frames and sends a close message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  doClose(data, mask, cb) {\n    this.sendFrame(\n      Sender.frame(data, {\n        fin: true,\n        rsv1: false,\n        opcode: 0x08,\n        mask,\n        maskBuffer: this._maskBuffer,\n        generateMask: this._generateMask,\n        readOnly: false\n      }),\n      cb\n    );\n  }\n\n  /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  ping(data, mask, cb) {\n    const buf = toBuffer(data);\n\n    if (buf.length > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doPing, buf, mask, toBuffer.readOnly, cb]);\n    } else {\n      this.doPing(buf, mask, toBuffer.readOnly, cb);\n    }\n  }\n\n  /**\n   * Frames and sends a ping message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  doPing(data, mask, readOnly, cb) {\n    this.sendFrame(\n      Sender.frame(data, {\n        fin: true,\n        rsv1: false,\n        opcode: 0x09,\n        mask,\n        maskBuffer: this._maskBuffer,\n        generateMask: this._generateMask,\n        readOnly\n      }),\n      cb\n    );\n  }\n\n  /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  pong(data, mask, cb) {\n    const buf = toBuffer(data);\n\n    if (buf.length > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doPong, buf, mask, toBuffer.readOnly, cb]);\n    } else {\n      this.doPong(buf, mask, toBuffer.readOnly, cb);\n    }\n  }\n\n  /**\n   * Frames and sends a pong message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  doPong(data, mask, readOnly, cb) {\n    this.sendFrame(\n      Sender.frame(data, {\n        fin: true,\n        rsv1: false,\n        opcode: 0x0a,\n        mask,\n        maskBuffer: this._maskBuffer,\n        generateMask: this._generateMask,\n        readOnly\n      }),\n      cb\n    );\n  }\n\n  /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\n   *     or text\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\n   *     compress `data`\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  send(data, options, cb) {\n    const buf = toBuffer(data);\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n    let opcode = options.binary ? 2 : 1;\n    let rsv1 = options.compress;\n\n    if (this._firstFragment) {\n      this._firstFragment = false;\n      if (\n        rsv1 &&\n        perMessageDeflate &&\n        perMessageDeflate.params[\n          perMessageDeflate._isServer\n            ? 'server_no_context_takeover'\n            : 'client_no_context_takeover'\n        ]\n      ) {\n        rsv1 = buf.length >= perMessageDeflate._threshold;\n      }\n      this._compress = rsv1;\n    } else {\n      rsv1 = false;\n      opcode = 0;\n    }\n\n    if (options.fin) this._firstFragment = true;\n\n    if (perMessageDeflate) {\n      const opts = {\n        fin: options.fin,\n        rsv1,\n        opcode,\n        mask: options.mask,\n        maskBuffer: this._maskBuffer,\n        generateMask: this._generateMask,\n        readOnly: toBuffer.readOnly\n      };\n\n      if (this._deflating) {\n        this.enqueue([this.dispatch, buf, this._compress, opts, cb]);\n      } else {\n        this.dispatch(buf, this._compress, opts, cb);\n      }\n    } else {\n      this.sendFrame(\n        Sender.frame(buf, {\n          fin: options.fin,\n          rsv1: false,\n          opcode,\n          mask: options.mask,\n          maskBuffer: this._maskBuffer,\n          generateMask: this._generateMask,\n          readOnly: toBuffer.readOnly\n        }),\n        cb\n      );\n    }\n  }\n\n  /**\n   * Dispatches a data message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     `data`\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  dispatch(data, compress, options, cb) {\n    if (!compress) {\n      this.sendFrame(Sender.frame(data, options), cb);\n      return;\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    this._bufferedBytes += data.length;\n    this._deflating = true;\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\n      if (this._socket.destroyed) {\n        const err = new Error(\n          'The socket was closed while data was being compressed'\n        );\n\n        if (typeof cb === 'function') cb(err);\n\n        for (let i = 0; i < this._queue.length; i++) {\n          const callback = this._queue[i][4];\n\n          if (typeof callback === 'function') callback(err);\n        }\n\n        return;\n      }\n\n      this._bufferedBytes -= data.length;\n      this._deflating = false;\n      options.readOnly = false;\n      this.sendFrame(Sender.frame(buf, options), cb);\n      this.dequeue();\n    });\n  }\n\n  /**\n   * Executes queued send operations.\n   *\n   * @private\n   */\n  dequeue() {\n    while (!this._deflating && this._queue.length) {\n      const params = this._queue.shift();\n\n      this._bufferedBytes -= params[1].length;\n      Reflect.apply(params[0], this, params.slice(1));\n    }\n  }\n\n  /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */\n  enqueue(params) {\n    this._bufferedBytes += params[1].length;\n    this._queue.push(params);\n  }\n\n  /**\n   * Sends a frame.\n   *\n   * @param {Buffer[]} list The frame to send\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  sendFrame(list, cb) {\n    if (list.length === 2) {\n      this._socket.cork();\n      this._socket.write(list[0]);\n      this._socket.write(list[1], cb);\n      this._socket.uncork();\n    } else {\n      this._socket.write(list[0], cb);\n    }\n  }\n}\n\nmodule.exports = Sender;\n\n\n//# sourceURL=webpack:///../../node_modules/ws/lib/sender.js?")},"../../node_modules/ws/lib/stream.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst { Duplex } = __webpack_require__(/*! stream */ \"stream\");\n\n/**\n * Emits the `'close'` event on a stream.\n *\n * @param {Duplex} stream The stream.\n * @private\n */\nfunction emitClose(stream) {\n  stream.emit('close');\n}\n\n/**\n * The listener of the `'end'` event.\n *\n * @private\n */\nfunction duplexOnEnd() {\n  if (!this.destroyed && this._writableState.finished) {\n    this.destroy();\n  }\n}\n\n/**\n * The listener of the `'error'` event.\n *\n * @param {Error} err The error\n * @private\n */\nfunction duplexOnError(err) {\n  this.removeListener('error', duplexOnError);\n  this.destroy();\n  if (this.listenerCount('error') === 0) {\n    // Do not suppress the throwing behavior.\n    this.emit('error', err);\n  }\n}\n\n/**\n * Wraps a `WebSocket` in a duplex stream.\n *\n * @param {WebSocket} ws The `WebSocket` to wrap\n * @param {Object} [options] The options for the `Duplex` constructor\n * @return {Duplex} The duplex stream\n * @public\n */\nfunction createWebSocketStream(ws, options) {\n  let terminateOnDestroy = true;\n\n  const duplex = new Duplex({\n    ...options,\n    autoDestroy: false,\n    emitClose: false,\n    objectMode: false,\n    writableObjectMode: false\n  });\n\n  ws.on('message', function message(msg, isBinary) {\n    const data =\n      !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;\n\n    if (!duplex.push(data)) ws.pause();\n  });\n\n  ws.once('error', function error(err) {\n    if (duplex.destroyed) return;\n\n    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n    //\n    // - If the `'error'` event is emitted before the `'open'` event, then\n    //   `ws.terminate()` is a noop as no socket is assigned.\n    // - Otherwise, the error is re-emitted by the listener of the `'error'`\n    //   event of the `Receiver` object. The listener already closes the\n    //   connection by calling `ws.close()`. This allows a close frame to be\n    //   sent to the other peer. If `ws.terminate()` is called right after this,\n    //   then the close frame might not be sent.\n    terminateOnDestroy = false;\n    duplex.destroy(err);\n  });\n\n  ws.once('close', function close() {\n    if (duplex.destroyed) return;\n\n    duplex.push(null);\n  });\n\n  duplex._destroy = function (err, callback) {\n    if (ws.readyState === ws.CLOSED) {\n      callback(err);\n      process.nextTick(emitClose, duplex);\n      return;\n    }\n\n    let called = false;\n\n    ws.once('error', function error(err) {\n      called = true;\n      callback(err);\n    });\n\n    ws.once('close', function close() {\n      if (!called) callback(err);\n      process.nextTick(emitClose, duplex);\n    });\n\n    if (terminateOnDestroy) ws.terminate();\n  };\n\n  duplex._final = function (callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._final(callback);\n      });\n      return;\n    }\n\n    // If the value of the `_socket` property is `null` it means that `ws` is a\n    // client websocket and the handshake failed. In fact, when this happens, a\n    // socket is never assigned to the websocket. Wait for the `'error'` event\n    // that will be emitted by the websocket.\n    if (ws._socket === null) return;\n\n    if (ws._socket._writableState.finished) {\n      callback();\n      if (duplex._readableState.endEmitted) duplex.destroy();\n    } else {\n      ws._socket.once('finish', function finish() {\n        // `duplex` is not destroyed here because the `'end'` event will be\n        // emitted on `duplex` after this `'finish'` event. The EOF signaling\n        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n        callback();\n      });\n      ws.close();\n    }\n  };\n\n  duplex._read = function () {\n    if (ws.isPaused) ws.resume();\n  };\n\n  duplex._write = function (chunk, encoding, callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._write(chunk, encoding, callback);\n      });\n      return;\n    }\n\n    ws.send(chunk, callback);\n  };\n\n  duplex.on('end', duplexOnEnd);\n  duplex.on('error', duplexOnError);\n  return duplex;\n}\n\nmodule.exports = createWebSocketStream;\n\n\n//# sourceURL=webpack:///../../node_modules/ws/lib/stream.js?")},"../../node_modules/ws/lib/subprotocol.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nconst { tokenChars } = __webpack_require__(/*! ./validation */ \"../../node_modules/ws/lib/validation.js\");\n\n/**\n * Parses the `Sec-WebSocket-Protocol` header into a set of subprotocol names.\n *\n * @param {String} header The field value of the header\n * @return {Set} The subprotocol names\n * @public\n */\nfunction parse(header) {\n  const protocols = new Set();\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (i; i < header.length; i++) {\n    const code = header.charCodeAt(i);\n\n    if (end === -1 && tokenChars[code] === 1) {\n      if (start === -1) start = i;\n    } else if (\n      i !== 0 &&\n      (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n    ) {\n      if (end === -1 && start !== -1) end = i;\n    } else if (code === 0x2c /* ',' */) {\n      if (start === -1) {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n\n      if (end === -1) end = i;\n\n      const protocol = header.slice(start, end);\n\n      if (protocols.has(protocol)) {\n        throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n      }\n\n      protocols.add(protocol);\n      start = end = -1;\n    } else {\n      throw new SyntaxError(`Unexpected character at index ${i}`);\n    }\n  }\n\n  if (start === -1 || end !== -1) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  const protocol = header.slice(start, i);\n\n  if (protocols.has(protocol)) {\n    throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n  }\n\n  protocols.add(protocol);\n  return protocols;\n}\n\nmodule.exports = { parse };\n\n\n//# sourceURL=webpack:///../../node_modules/ws/lib/subprotocol.js?")},"../../node_modules/ws/lib/validation.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\n//\n// Allowed token characters:\n//\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\n//\n// tokenChars[32] === 0 // ' '\n// tokenChars[33] === 1 // '!'\n// tokenChars[34] === 0 // '\"'\n// ...\n//\n// prettier-ignore\nconst tokenChars = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127\n];\n\n/**\n * Checks if a status code is allowed in a close frame.\n *\n * @param {Number} code The status code\n * @return {Boolean} `true` if the status code is valid, else `false`\n * @public\n */\nfunction isValidStatusCode(code) {\n  return (\n    (code >= 1000 &&\n      code <= 1014 &&\n      code !== 1004 &&\n      code !== 1005 &&\n      code !== 1006) ||\n    (code >= 3000 && code <= 4999)\n  );\n}\n\n/**\n * Checks if a given buffer contains only correct UTF-8.\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\n * Markus Kuhn.\n *\n * @param {Buffer} buf The buffer to check\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\n * @public\n */\nfunction _isValidUTF8(buf) {\n  const len = buf.length;\n  let i = 0;\n\n  while (i < len) {\n    if ((buf[i] & 0x80) === 0) {\n      // 0xxxxxxx\n      i++;\n    } else if ((buf[i] & 0xe0) === 0xc0) {\n      // 110xxxxx 10xxxxxx\n      if (\n        i + 1 === len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i] & 0xfe) === 0xc0 // Overlong\n      ) {\n        return false;\n      }\n\n      i += 2;\n    } else if ((buf[i] & 0xf0) === 0xe0) {\n      // 1110xxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 2 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong\n        (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)\n      ) {\n        return false;\n      }\n\n      i += 3;\n    } else if ((buf[i] & 0xf8) === 0xf0) {\n      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 3 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i + 3] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong\n        (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||\n        buf[i] > 0xf4 // > U+10FFFF\n      ) {\n        return false;\n      }\n\n      i += 4;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\ntry {\n  const isValidUTF8 = __webpack_require__(/*! utf-8-validate */ \"../../node_modules/utf-8-validate/index.js\");\n\n  module.exports = {\n    isValidStatusCode,\n    isValidUTF8(buf) {\n      return buf.length < 150 ? _isValidUTF8(buf) : isValidUTF8(buf);\n    },\n    tokenChars\n  };\n} catch (e) /* istanbul ignore next */ {\n  module.exports = {\n    isValidStatusCode,\n    isValidUTF8: _isValidUTF8,\n    tokenChars\n  };\n}\n\n\n//# sourceURL=webpack:///../../node_modules/ws/lib/validation.js?")},"../../node_modules/ws/lib/websocket-server.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls|https$\" }] */\n\n\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst { createHash } = __webpack_require__(/*! crypto */ \"crypto\");\n\nconst extension = __webpack_require__(/*! ./extension */ \"../../node_modules/ws/lib/extension.js\");\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"../../node_modules/ws/lib/permessage-deflate.js\");\nconst subprotocol = __webpack_require__(/*! ./subprotocol */ \"../../node_modules/ws/lib/subprotocol.js\");\nconst WebSocket = __webpack_require__(/*! ./websocket */ \"../../node_modules/ws/lib/websocket.js\");\nconst { GUID, kWebSocket } = __webpack_require__(/*! ./constants */ \"../../node_modules/ws/lib/constants.js\");\n\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\n\nconst RUNNING = 0;\nconst CLOSING = 1;\nconst CLOSED = 2;\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\n   *     pending connections\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n   *     track clients\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\n   * @param {String} [options.host] The hostname where to bind the server\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n   *     size\n   * @param {Boolean} [options.noServer=false] Enable no server mode\n   * @param {String} [options.path] Accept only connections matching this path\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n   *     permessage-deflate\n   * @param {Number} [options.port] The port where to bind the server\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n   *     server to use\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @param {Function} [options.verifyClient] A hook to reject connections\n   * @param {Function} [callback] A listener for the `listening` event\n   */\n  constructor(options, callback) {\n    super();\n\n    options = {\n      maxPayload: 100 * 1024 * 1024,\n      skipUTF8Validation: false,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null,\n      ...options\n    };\n\n    if (\n      (options.port == null && !options.server && !options.noServer) ||\n      (options.port != null && (options.server || options.noServer)) ||\n      (options.server && options.noServer)\n    ) {\n      throw new TypeError(\n        'One and only one of the \"port\", \"server\", or \"noServer\" options ' +\n          'must be specified'\n      );\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(\n        options.port,\n        options.host,\n        options.backlog,\n        callback\n      );\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      const emitConnection = this.emit.bind(this, 'connection');\n\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, emitConnection);\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) {\n      this.clients = new Set();\n      this._shouldEmitClose = false;\n    }\n\n    this.options = options;\n    this._state = RUNNING;\n  }\n\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n  address() {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n\n  /**\n   * Stop the server from accepting new connections and emit the `'close'` event\n   * when all existing connections are closed.\n   *\n   * @param {Function} [cb] A one-time listener for the `'close'` event\n   * @public\n   */\n  close(cb) {\n    if (this._state === CLOSED) {\n      if (cb) {\n        this.once('close', () => {\n          cb(new Error('The server is not running'));\n        });\n      }\n\n      process.nextTick(emitClose, this);\n      return;\n    }\n\n    if (cb) this.once('close', cb);\n\n    if (this._state === CLOSING) return;\n    this._state = CLOSING;\n\n    if (this.options.noServer || this.options.server) {\n      if (this._server) {\n        this._removeListeners();\n        this._removeListeners = this._server = null;\n      }\n\n      if (this.clients) {\n        if (!this.clients.size) {\n          process.nextTick(emitClose, this);\n        } else {\n          this._shouldEmitClose = true;\n        }\n      } else {\n        process.nextTick(emitClose, this);\n      }\n    } else {\n      const server = this._server;\n\n      this._removeListeners();\n      this._removeListeners = this._server = null;\n\n      //\n      // The HTTP/S server was created internally. Close it, and rely on its\n      // `'close'` event.\n      //\n      server.close(() => {\n        emitClose(this);\n      });\n    }\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle(req) {\n    if (this.options.path) {\n      const index = req.url.indexOf('?');\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n\n      if (pathname !== this.options.path) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade(req, socket, head, cb) {\n    socket.on('error', socketOnError);\n\n    const key =\n      req.headers['sec-websocket-key'] !== undefined\n        ? req.headers['sec-websocket-key']\n        : false;\n    const version = +req.headers['sec-websocket-version'];\n\n    if (\n      req.method !== 'GET' ||\n      req.headers.upgrade.toLowerCase() !== 'websocket' ||\n      !key ||\n      !keyRegex.test(key) ||\n      (version !== 8 && version !== 13) ||\n      !this.shouldHandle(req)\n    ) {\n      return abortHandshake(socket, 400);\n    }\n\n    const secWebSocketProtocol = req.headers['sec-websocket-protocol'];\n    let protocols = new Set();\n\n    if (secWebSocketProtocol !== undefined) {\n      try {\n        protocols = subprotocol.parse(secWebSocketProtocol);\n      } catch (err) {\n        return abortHandshake(socket, 400);\n      }\n    }\n\n    const secWebSocketExtensions = req.headers['sec-websocket-extensions'];\n    const extensions = {};\n\n    if (\n      this.options.perMessageDeflate &&\n      secWebSocketExtensions !== undefined\n    ) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = extension.parse(secWebSocketExtensions);\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        return abortHandshake(socket, 400);\n      }\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin:\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.socket.authorized || req.socket.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(\n            extensions,\n            key,\n            protocols,\n            req,\n            socket,\n            head,\n            cb\n          );\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {Object} extensions The accepted extensions\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Set} protocols The subprotocols\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @throws {Error} If called more than once with the same socket\n   * @private\n   */\n  completeUpgrade(extensions, key, protocols, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    if (socket[kWebSocket]) {\n      throw new Error(\n        'server.handleUpgrade() was called more than once with the same ' +\n          'socket, possibly due to a misconfiguration'\n      );\n    }\n\n    if (this._state > RUNNING) return abortHandshake(socket, 503);\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${digest}`\n    ];\n\n    const ws = new WebSocket(null);\n\n    if (protocols.size) {\n      //\n      // Optionally call external protocol selection handler.\n      //\n      const protocol = this.options.handleProtocols\n        ? this.options.handleProtocols(protocols, req)\n        : protocols.values().next().value;\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws._protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = extension.format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n\n    ws.setSocket(socket, head, {\n      maxPayload: this.options.maxPayload,\n      skipUTF8Validation: this.options.skipUTF8Validation\n    });\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => {\n        this.clients.delete(ws);\n\n        if (this._shouldEmitClose && !this.clients.size) {\n          process.nextTick(emitClose, this);\n        }\n      });\n    }\n\n    cb(ws, req);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when\n *     called\n * @private\n */\nfunction addListeners(server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners() {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */\nfunction emitClose(server) {\n  server._state = CLOSED;\n  server.emit('close');\n}\n\n/**\n * Handle premature socket errors.\n *\n * @private\n */\nfunction socketOnError() {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\nfunction abortHandshake(socket, code, message, headers) {\n  if (socket.writable) {\n    message = message || http.STATUS_CODES[code];\n    headers = {\n      Connection: 'close',\n      'Content-Type': 'text/html',\n      'Content-Length': Buffer.byteLength(message),\n      ...headers\n    };\n\n    socket.write(\n      `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n        Object.keys(headers)\n          .map((h) => `${h}: ${headers[h]}`)\n          .join('\\r\\n') +\n        '\\r\\n\\r\\n' +\n        message\n    );\n  }\n\n  socket.removeListener('error', socketOnError);\n  socket.destroy();\n}\n\n\n//# sourceURL=webpack:///../../node_modules/ws/lib/websocket-server.js?")},"../../node_modules/ws/lib/websocket.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Readable$\" }] */\n\n\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst { randomBytes, createHash } = __webpack_require__(/*! crypto */ \"crypto\");\nconst { Readable } = __webpack_require__(/*! stream */ \"stream\");\nconst { URL } = __webpack_require__(/*! url */ \"url\");\n\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"../../node_modules/ws/lib/permessage-deflate.js\");\nconst Receiver = __webpack_require__(/*! ./receiver */ \"../../node_modules/ws/lib/receiver.js\");\nconst Sender = __webpack_require__(/*! ./sender */ \"../../node_modules/ws/lib/sender.js\");\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  GUID,\n  kForOnEventAttribute,\n  kListener,\n  kStatusCode,\n  kWebSocket,\n  NOOP\n} = __webpack_require__(/*! ./constants */ \"../../node_modules/ws/lib/constants.js\");\nconst {\n  EventTarget: { addEventListener, removeEventListener }\n} = __webpack_require__(/*! ./event-target */ \"../../node_modules/ws/lib/event-target.js\");\nconst { format, parse } = __webpack_require__(/*! ./extension */ \"../../node_modules/ws/lib/extension.js\");\nconst { toBuffer } = __webpack_require__(/*! ./buffer-util */ \"../../node_modules/ws/lib/buffer-util.js\");\n\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\nconst subprotocolRegex = /^[!#$%&'*+\\-.0-9A-Z^_`|a-z~]+$/;\nconst protocolVersions = [8, 13];\nconst closeTimeout = 30 * 1000;\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|URL)} address The URL to which to connect\n   * @param {(String|String[])} [protocols] The subprotocols\n   * @param {Object} [options] Connection options\n   */\n  constructor(address, protocols, options) {\n    super();\n\n    this._binaryType = BINARY_TYPES[0];\n    this._closeCode = 1006;\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = EMPTY_BUFFER;\n    this._closeTimer = null;\n    this._extensions = {};\n    this._paused = false;\n    this._protocol = '';\n    this._readyState = WebSocket.CONNECTING;\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n\n    if (address !== null) {\n      this._bufferedAmount = 0;\n      this._isServer = false;\n      this._redirects = 0;\n\n      if (protocols === undefined) {\n        protocols = [];\n      } else if (!Array.isArray(protocols)) {\n        if (typeof protocols === 'object' && protocols !== null) {\n          options = protocols;\n          protocols = [];\n        } else {\n          protocols = [protocols];\n        }\n      }\n\n      initAsClient(this, address, protocols, options);\n    } else {\n      this._isServer = true;\n    }\n  }\n\n  /**\n   * This deviates from the WHATWG interface since ws doesn't support the\n   * required default \"blob\" type (instead we define a custom \"nodebuffer\"\n   * type).\n   *\n   * @type {String}\n   */\n  get binaryType() {\n    return this._binaryType;\n  }\n\n  set binaryType(type) {\n    if (!BINARY_TYPES.includes(type)) return;\n\n    this._binaryType = type;\n\n    //\n    // Allow to change `binaryType` on the fly.\n    //\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get bufferedAmount() {\n    if (!this._socket) return this._bufferedAmount;\n\n    return this._socket._writableState.length + this._sender._bufferedBytes;\n  }\n\n  /**\n   * @type {String}\n   */\n  get extensions() {\n    return Object.keys(this._extensions).join();\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get isPaused() {\n    return this._paused;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onclose() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onerror() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onopen() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onmessage() {\n    return null;\n  }\n\n  /**\n   * @type {String}\n   */\n  get protocol() {\n    return this._protocol;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get readyState() {\n    return this._readyState;\n  }\n\n  /**\n   * @type {String}\n   */\n  get url() {\n    return this._url;\n  }\n\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Object} options Options object\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Number} [options.maxPayload=0] The maximum allowed message size\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @private\n   */\n  setSocket(socket, head, options) {\n    const receiver = new Receiver({\n      binaryType: this.binaryType,\n      extensions: this._extensions,\n      isServer: this._isServer,\n      maxPayload: options.maxPayload,\n      skipUTF8Validation: options.skipUTF8Validation\n    });\n\n    this._sender = new Sender(socket, this._extensions, options.generateMask);\n    this._receiver = receiver;\n    this._socket = socket;\n\n    receiver[kWebSocket] = this;\n    socket[kWebSocket] = this;\n\n    receiver.on('conclude', receiverOnConclude);\n    receiver.on('drain', receiverOnDrain);\n    receiver.on('error', receiverOnError);\n    receiver.on('message', receiverOnMessage);\n    receiver.on('ping', receiverOnPing);\n    receiver.on('pong', receiverOnPong);\n\n    socket.setTimeout(0);\n    socket.setNoDelay();\n\n    if (head.length > 0) socket.unshift(head);\n\n    socket.on('close', socketOnClose);\n    socket.on('data', socketOnData);\n    socket.on('end', socketOnEnd);\n    socket.on('error', socketOnError);\n\n    this._readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n\n  /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */\n  emitClose() {\n    if (!this._socket) {\n      this._readyState = WebSocket.CLOSED;\n      this.emit('close', this._closeCode, this._closeMessage);\n      return;\n    }\n\n    if (this._extensions[PerMessageDeflate.extensionName]) {\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this._receiver.removeAllListeners();\n    this._readyState = WebSocket.CLOSED;\n    this.emit('close', this._closeCode, this._closeMessage);\n  }\n\n  /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|--\x3e|close frame|--\x3e|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+--\x3e|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} [code] Status code explaining why the connection is closing\n   * @param {(String|Buffer)} [data] The reason why the connection is\n   *     closing\n   * @public\n   */\n  close(code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (\n        this._closeFrameSent &&\n        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)\n      ) {\n        this._socket.end();\n      }\n\n      return;\n    }\n\n    this._readyState = WebSocket.CLOSING;\n    this._sender.close(code, data, !this._isServer, (err) => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n\n      this._closeFrameSent = true;\n\n      if (\n        this._closeFrameReceived ||\n        this._receiver._writableState.errorEmitted\n      ) {\n        this._socket.end();\n      }\n    });\n\n    //\n    // Specify a timeout for the closing handshake to complete.\n    //\n    this._closeTimer = setTimeout(\n      this._socket.destroy.bind(this._socket),\n      closeTimeout\n    );\n  }\n\n  /**\n   * Pause the socket.\n   *\n   * @public\n   */\n  pause() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = true;\n    this._socket.pause();\n  }\n\n  /**\n   * Send a ping.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the ping is sent\n   * @public\n   */\n  ping(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a pong.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the pong is sent\n   * @public\n   */\n  pong(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Resume the socket.\n   *\n   * @public\n   */\n  resume() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = false;\n    if (!this._receiver._writableState.needDrain) this._socket.resume();\n  }\n\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n   *     text\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\n   *     `data`\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when data is written out\n   * @public\n   */\n  send(data, options, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    const opts = {\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true,\n      fin: true,\n      ...options\n    };\n\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\n  }\n\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this._socket) {\n      this._readyState = WebSocket.CLOSING;\n      this._socket.destroy();\n    }\n  }\n}\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n[\n  'binaryType',\n  'bufferedAmount',\n  'extensions',\n  'isPaused',\n  'protocol',\n  'readyState',\n  'url'\n].forEach((property) => {\n  Object.defineProperty(WebSocket.prototype, property, { enumerable: true });\n});\n\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n['open', 'error', 'close', 'message'].forEach((method) => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    enumerable: true,\n    get() {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) return listener[kListener];\n      }\n\n      return null;\n    },\n    set(handler) {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) {\n          this.removeListener(method, listener);\n          break;\n        }\n      }\n\n      if (typeof handler !== 'function') return;\n\n      this.addEventListener(method, handler, {\n        [kForOnEventAttribute]: true\n      });\n    }\n  });\n});\n\nWebSocket.prototype.addEventListener = addEventListener;\nWebSocket.prototype.removeEventListener = removeEventListener;\n\nmodule.exports = WebSocket;\n\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|URL)} address The URL to which to connect\n * @param {Array} protocols The subprotocols\n * @param {Object} [options] Connection options\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n *     redirects\n * @param {Function} [options.generateMask] The function used to generate the\n *     masking key\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n *     handshake request\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n *     size\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n *     allowed\n * @param {String} [options.origin] Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n *     permessage-deflate\n * @param {Number} [options.protocolVersion=13] Value of the\n *     `Sec-WebSocket-Version` header\n * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n *     not to skip UTF-8 validation for text and close messages\n * @private\n */\nfunction initAsClient(websocket, address, protocols, options) {\n  const opts = {\n    protocolVersion: protocolVersions[1],\n    maxPayload: 100 * 1024 * 1024,\n    skipUTF8Validation: false,\n    perMessageDeflate: true,\n    followRedirects: false,\n    maxRedirects: 10,\n    ...options,\n    createConnection: undefined,\n    socketPath: undefined,\n    hostname: undefined,\n    protocol: undefined,\n    timeout: undefined,\n    method: undefined,\n    host: undefined,\n    path: undefined,\n    port: undefined\n  };\n\n  if (!protocolVersions.includes(opts.protocolVersion)) {\n    throw new RangeError(\n      `Unsupported protocol version: ${opts.protocolVersion} ` +\n        `(supported versions: ${protocolVersions.join(', ')})`\n    );\n  }\n\n  let parsedUrl;\n\n  if (address instanceof URL) {\n    parsedUrl = address;\n    websocket._url = address.href;\n  } else {\n    try {\n      parsedUrl = new URL(address);\n    } catch (e) {\n      throw new SyntaxError(`Invalid URL: ${address}`);\n    }\n\n    websocket._url = address;\n  }\n\n  const isSecure = parsedUrl.protocol === 'wss:';\n  const isUnixSocket = parsedUrl.protocol === 'ws+unix:';\n  let invalidURLMessage;\n\n  if (parsedUrl.protocol !== 'ws:' && !isSecure && !isUnixSocket) {\n    invalidURLMessage =\n      'The URL\\'s protocol must be one of \"ws:\", \"wss:\", or \"ws+unix:\"';\n  } else if (isUnixSocket && !parsedUrl.pathname) {\n    invalidURLMessage = \"The URL's pathname is empty\";\n  } else if (parsedUrl.hash) {\n    invalidURLMessage = 'The URL contains a fragment identifier';\n  }\n\n  if (invalidURLMessage) {\n    const err = new SyntaxError(invalidURLMessage);\n\n    if (websocket._redirects === 0) {\n      throw err;\n    } else {\n      emitErrorAndClose(websocket, err);\n      return;\n    }\n  }\n\n  const defaultPort = isSecure ? 443 : 80;\n  const key = randomBytes(16).toString('base64');\n  const get = isSecure ? https.get : http.get;\n  const protocolSet = new Set();\n  let perMessageDeflate;\n\n  opts.createConnection = isSecure ? tlsConnect : netConnect;\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n    'Sec-WebSocket-Version': opts.protocolVersion,\n    'Sec-WebSocket-Key': key,\n    Connection: 'Upgrade',\n    Upgrade: 'websocket',\n    ...opts.headers\n  };\n  opts.path = parsedUrl.pathname + parsedUrl.search;\n  opts.timeout = opts.handshakeTimeout;\n\n  if (opts.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(\n      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},\n      false,\n      opts.maxPayload\n    );\n    opts.headers['Sec-WebSocket-Extensions'] = format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n  if (protocols.length) {\n    for (const protocol of protocols) {\n      if (\n        typeof protocol !== 'string' ||\n        !subprotocolRegex.test(protocol) ||\n        protocolSet.has(protocol)\n      ) {\n        throw new SyntaxError(\n          'An invalid or duplicated subprotocol was specified'\n        );\n      }\n\n      protocolSet.add(protocol);\n    }\n\n    opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');\n  }\n  if (opts.origin) {\n    if (opts.protocolVersion < 13) {\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\n    } else {\n      opts.headers.Origin = opts.origin;\n    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isUnixSocket) {\n    const parts = opts.path.split(':');\n\n    opts.socketPath = parts[0];\n    opts.path = parts[1];\n  }\n\n  let req = (websocket._req = get(opts));\n\n  if (opts.timeout) {\n    req.on('timeout', () => {\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\n    });\n  }\n\n  req.on('error', (err) => {\n    if (req === null || req.aborted) return;\n\n    req = websocket._req = null;\n    emitErrorAndClose(websocket, err);\n  });\n\n  req.on('response', (res) => {\n    const location = res.headers.location;\n    const statusCode = res.statusCode;\n\n    if (\n      location &&\n      opts.followRedirects &&\n      statusCode >= 300 &&\n      statusCode < 400\n    ) {\n      if (++websocket._redirects > opts.maxRedirects) {\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\n        return;\n      }\n\n      req.abort();\n\n      let addr;\n\n      try {\n        addr = new URL(location, address);\n      } catch (e) {\n        const err = new SyntaxError(`Invalid URL: ${location}`);\n        emitErrorAndClose(websocket, err);\n        return;\n      }\n\n      initAsClient(websocket, addr, protocols, options);\n    } else if (!websocket.emit('unexpected-response', req, res)) {\n      abortHandshake(\n        websocket,\n        req,\n        `Unexpected server response: ${res.statusCode}`\n      );\n    }\n  });\n\n  req.on('upgrade', (res, socket, head) => {\n    websocket.emit('upgrade', res);\n\n    //\n    // The user may have closed the connection from a listener of the `upgrade`\n    // event.\n    //\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\n\n    req = websocket._req = null;\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n      return;\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    let protError;\n\n    if (serverProt !== undefined) {\n      if (!protocolSet.size) {\n        protError = 'Server sent a subprotocol but none was requested';\n      } else if (!protocolSet.has(serverProt)) {\n        protError = 'Server sent an invalid subprotocol';\n      }\n    } else if (protocolSet.size) {\n      protError = 'Server sent no subprotocol';\n    }\n\n    if (protError) {\n      abortHandshake(websocket, socket, protError);\n      return;\n    }\n\n    if (serverProt) websocket._protocol = serverProt;\n\n    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\n\n    if (secWebSocketExtensions !== undefined) {\n      if (!perMessageDeflate) {\n        const message =\n          'Server sent a Sec-WebSocket-Extensions header but no extension ' +\n          'was requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      let extensions;\n\n      try {\n        extensions = parse(secWebSocketExtensions);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      const extensionNames = Object.keys(extensions);\n\n      if (\n        extensionNames.length !== 1 ||\n        extensionNames[0] !== PerMessageDeflate.extensionName\n      ) {\n        const message = 'Server indicated an extension that was not requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      try {\n        perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      websocket._extensions[PerMessageDeflate.extensionName] =\n        perMessageDeflate;\n    }\n\n    websocket.setSocket(socket, head, {\n      generateMask: opts.generateMask,\n      maxPayload: opts.maxPayload,\n      skipUTF8Validation: opts.skipUTF8Validation\n    });\n  });\n}\n\n/**\n * Emit the `'error'` and `'close'` event.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {Error} The error to emit\n * @private\n */\nfunction emitErrorAndClose(websocket, err) {\n  websocket._readyState = WebSocket.CLOSING;\n  websocket.emit('error', err);\n  websocket.emitClose();\n}\n\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */\nfunction netConnect(options) {\n  options.path = options.socketPath;\n  return net.connect(options);\n}\n\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */\nfunction tlsConnect(options) {\n  options.path = undefined;\n\n  if (!options.servername && options.servername !== '') {\n    options.servername = net.isIP(options.host) ? '' : options.host;\n  }\n\n  return tls.connect(options);\n}\n\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n *     abort or the socket to destroy\n * @param {String} message The error message\n * @private\n */\nfunction abortHandshake(websocket, stream, message) {\n  websocket._readyState = WebSocket.CLOSING;\n\n  const err = new Error(message);\n  Error.captureStackTrace(err, abortHandshake);\n\n  if (stream.setHeader) {\n    stream.abort();\n\n    if (stream.socket && !stream.socket.destroyed) {\n      //\n      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n      // called after the request completed. See\n      // https://github.com/websockets/ws/issues/1869.\n      //\n      stream.socket.destroy();\n    }\n\n    stream.once('abort', websocket.emitClose.bind(websocket));\n    websocket.emit('error', err);\n  } else {\n    stream.destroy(err);\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\n    stream.once('close', websocket.emitClose.bind(websocket));\n  }\n}\n\n/**\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {*} [data] The data to send\n * @param {Function} [cb] Callback\n * @private\n */\nfunction sendAfterClose(websocket, data, cb) {\n  if (data) {\n    const length = toBuffer(data).length;\n\n    //\n    // The `_bufferedAmount` property is used only when the peer is a client and\n    // the opening handshake fails. Under these circumstances, in fact, the\n    // `setSocket()` method is not called, so the `_socket` and `_sender`\n    // properties are set to `null`.\n    //\n    if (websocket._socket) websocket._sender._bufferedBytes += length;\n    else websocket._bufferedAmount += length;\n  }\n\n  if (cb) {\n    const err = new Error(\n      `WebSocket is not open: readyState ${websocket.readyState} ` +\n        `(${readyStates[websocket.readyState]})`\n    );\n    cb(err);\n  }\n}\n\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {Buffer} reason The reason for closing\n * @private\n */\nfunction receiverOnConclude(code, reason) {\n  const websocket = this[kWebSocket];\n\n  websocket._closeFrameReceived = true;\n  websocket._closeMessage = reason;\n  websocket._closeCode = code;\n\n  if (websocket._socket[kWebSocket] === undefined) return;\n\n  websocket._socket.removeListener('data', socketOnData);\n  process.nextTick(resume, websocket._socket);\n\n  if (code === 1005) websocket.close();\n  else websocket.close(code, reason);\n}\n\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */\nfunction receiverOnDrain() {\n  const websocket = this[kWebSocket];\n\n  if (!websocket.isPaused) websocket._socket.resume();\n}\n\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */\nfunction receiverOnError(err) {\n  const websocket = this[kWebSocket];\n\n  if (websocket._socket[kWebSocket] !== undefined) {\n    websocket._socket.removeListener('data', socketOnData);\n\n    //\n    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n    // https://github.com/websockets/ws/issues/1940.\n    //\n    process.nextTick(resume, websocket._socket);\n\n    websocket.close(err[kStatusCode]);\n  }\n\n  websocket.emit('error', err);\n}\n\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */\nfunction receiverOnFinish() {\n  this[kWebSocket].emitClose();\n}\n\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {Buffer|ArrayBuffer|Buffer[])} data The message\n * @param {Boolean} isBinary Specifies whether the message is binary or not\n * @private\n */\nfunction receiverOnMessage(data, isBinary) {\n  this[kWebSocket].emit('message', data, isBinary);\n}\n\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */\nfunction receiverOnPing(data) {\n  const websocket = this[kWebSocket];\n\n  websocket.pong(data, !websocket._isServer, NOOP);\n  websocket.emit('ping', data);\n}\n\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */\nfunction receiverOnPong(data) {\n  this[kWebSocket].emit('pong', data);\n}\n\n/**\n * Resume a readable stream\n *\n * @param {Readable} stream The readable stream\n * @private\n */\nfunction resume(stream) {\n  stream.resume();\n}\n\n/**\n * The listener of the `net.Socket` `'close'` event.\n *\n * @private\n */\nfunction socketOnClose() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('close', socketOnClose);\n  this.removeListener('data', socketOnData);\n  this.removeListener('end', socketOnEnd);\n\n  websocket._readyState = WebSocket.CLOSING;\n\n  let chunk;\n\n  //\n  // The close frame might not have been received or the `'end'` event emitted,\n  // for example, if the socket was destroyed due to an error. Ensure that the\n  // `receiver` stream is closed after writing any remaining buffered data to\n  // it. If the readable side of the socket is in flowing mode then there is no\n  // buffered data as everything has been already written and `readable.read()`\n  // will return `null`. If instead, the socket is paused, any possible buffered\n  // data will be read as a single chunk.\n  //\n  if (\n    !this._readableState.endEmitted &&\n    !websocket._closeFrameReceived &&\n    !websocket._receiver._writableState.errorEmitted &&\n    (chunk = websocket._socket.read()) !== null\n  ) {\n    websocket._receiver.write(chunk);\n  }\n\n  websocket._receiver.end();\n\n  this[kWebSocket] = undefined;\n\n  clearTimeout(websocket._closeTimer);\n\n  if (\n    websocket._receiver._writableState.finished ||\n    websocket._receiver._writableState.errorEmitted\n  ) {\n    websocket.emitClose();\n  } else {\n    websocket._receiver.on('error', receiverOnFinish);\n    websocket._receiver.on('finish', receiverOnFinish);\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction socketOnData(chunk) {\n  if (!this[kWebSocket]._receiver.write(chunk)) {\n    this.pause();\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'end'` event.\n *\n * @private\n */\nfunction socketOnEnd() {\n  const websocket = this[kWebSocket];\n\n  websocket._readyState = WebSocket.CLOSING;\n  websocket._receiver.end();\n  this.end();\n}\n\n/**\n * The listener of the `net.Socket` `'error'` event.\n *\n * @private\n */\nfunction socketOnError() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('error', socketOnError);\n  this.on('error', NOOP);\n\n  if (websocket) {\n    websocket._readyState = WebSocket.CLOSING;\n    this.destroy();\n  }\n}\n\n\n//# sourceURL=webpack:///../../node_modules/ws/lib/websocket.js?")},crypto:n=>{"use strict";n.exports=require("crypto")},events:n=>{"use strict";n.exports=require("events")},fs:n=>{"use strict";n.exports=require("fs")},http:n=>{"use strict";n.exports=require("http")},https:n=>{"use strict";n.exports=require("https")},net:n=>{"use strict";n.exports=require("net")},os:n=>{"use strict";n.exports=require("os")},path:n=>{"use strict";n.exports=require("path")},stream:n=>{"use strict";n.exports=require("stream")},tls:n=>{"use strict";n.exports=require("tls")},url:n=>{"use strict";n.exports=require("url")},zlib:n=>{"use strict";n.exports=require("zlib")}},__webpack_module_cache__={};function __webpack_require__(n){var r=__webpack_module_cache__[n];if(void 0!==r)return r.exports;var e=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n].call(e.exports,e,e.exports,__webpack_require__),e.exports}__webpack_require__.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return __webpack_require__.d(r,{a:r}),r},__webpack_require__.d=(n,r)=>{for(var e in r)__webpack_require__.o(r,e)&&!__webpack_require__.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:r[e]})},__webpack_require__.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),__webpack_require__.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./main.js")})();