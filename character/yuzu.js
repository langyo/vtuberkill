/*! For license information please see yuzu.js.LICENSE.txt */
(()=>{"use strict";var __webpack_modules__={"./yuzu.ts":()=>{eval("\r\nwindow.game.import('character', function (lib, game, ui, get, ai, _status) {\r\n    class toSkill {\r\n        constructor(type, obj, ...arg) {\r\n            this.type = type;\r\n            if (type === 'active') {\r\n                this.enable = 'phaseUse';\r\n            }\r\n            for (let i in obj) {\r\n                this[i] = obj[i];\r\n            }\r\n            for (let i of arg) {\r\n                if (typeof i === 'string') {\r\n                    if (i.split(':').length == 2) {\r\n                        let v = i.split(':');\r\n                        this[v[0]] = v[1];\r\n                    }\r\n                    else\r\n                        this[i] = true;\r\n                }\r\n            }\r\n        }\r\n        set(...arg) {\r\n            for (let i = 0; i < arg.length; i++) {\r\n                if (Array.isArray(arg[i]))\r\n                    this.set(...arg[i]);\r\n                else if (typeof arg[i] === 'string' && arg[i + 1] !== undefined) {\r\n                    this[arg[i]] = arg[i + 1];\r\n                }\r\n            }\r\n            return this;\r\n        }\r\n        setT(tri, method) {\r\n            if (typeof tri === 'string')\r\n                tri = [tri];\r\n            if (tri instanceof Array)\r\n                tri = { player: tri };\r\n            for (let i in tri) {\r\n                if (!Array.isArray(tri[i])) {\r\n                    tri[i] = [tri[i]];\r\n                }\r\n            }\r\n            if (method instanceof Array) {\r\n                for (let i in tri) {\r\n                    let v = tri[i];\r\n                    if (!Array.isArray(v)) {\r\n                        tri[i] = [v];\r\n                    }\r\n                    let vb = tri[i];\r\n                    if (vb instanceof Array) {\r\n                        tri[i] = vb.map(t => {\r\n                            return method.map(m => t + m);\r\n                        }).vkflat();\r\n                    }\r\n                }\r\n            }\r\n            else if (typeof method === 'string') {\r\n                for (let i in tri) {\r\n                    let v = tri[i];\r\n                    if (!Array.isArray(v)) {\r\n                        tri[i] = [v];\r\n                    }\r\n                    let vb = tri[i];\r\n                    if (vb instanceof Array) {\r\n                        tri[i] = vb.map(t => {\r\n                            return t + method;\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            return this.set('trigger', Object.assign(Object.assign({}, this.trigger), tri));\r\n        }\r\n    }\r\n    return {\r\n        name: \"yuzu\",\r\n        connect: true,\r\n        character: {\r\n            xinyuelan: ['female', 'qun', 4, ['chisha', 'wujian'], ['guoV']],\r\n            Shiranekoyuki: ['female', 'qun', 4, ['jvliu', 'wuxia'], ['riV']],\r\n            TsukushiAria: ['female', 'qun', 3, ['tatongling', 'yumeng'], ['riV']],\r\n            AoiYui: ['female', 'qun', 3, ['suyuan', 'mujian'], ['riV']],\r\n            NachoNeko: ['female', 'qun', 4, ['cirong', 'maoyu'], ['riV']],\r\n            Melody: ['female', 'vshojo', 4, ['kuangbiao', 'leizhu', 'tonggan'], ['zhu', 'yingV']],\r\n            ShishiroBotan: ['female', 'holo', 4, ['sbliedan', 'buqiang']],\r\n            PinkyPopHepburn: ['female', 'qun', 4, ['pphpanfeng', 'lanyue']],\r\n            Shiratama: ['female', 'qun', 4, ['meihua', 'shentian'],],\r\n            KotobukiYume: ['female', 'qun', 4, ['xuanquan', 'rusu'],],\r\n            shanbao: ['female', 'qun', 4, ['test', 'fengxu'], ['guoV']],\r\n            qiudi: ['female', 'qun', 3, ['xiangnuo'], ['guoV']],\r\n            Xiaorou: ['female', 'xuyan', 3, ['rouqing', 'guangying'], ['guoV']],\r\n            Ailurus: ['female', 'xuyan', 4, ['aldanyan', 'lunao'], ['guoV']],\r\n            lanruo: ['female', 'hunmiao', 3, ['dieyuan', 'shengyang'], ['guoV']],\r\n            lanre: ['female', 'hunmiao', 3, ['daoyi', 'shengyin'], ['guoV']],\r\n            hunmiaomiao: ['female', 'hunmiao', 3, ['xiuyou', 'jiyuan'], ['guoV']],\r\n            caicai: ['female', 'qun', 5, ['tibing', 'guangtui'], ['guoV']],\r\n            ByakuyaMayoi: ['female', 'chaos', 4, ['bykuangxin'], ['guoV']],\r\n            Mamoru: ['male', 'chaos', '-3/3', ['shoumi', 'yanwang'], ['guoV']],\r\n            AchikitaChinami: ['female', 'nijisanji', 3, ['yingkuo', 'shengni'],],\r\n            HayamiSaki: ['female', 'paryi', 4, ['tuncai', 'zhidu'], ['zhu', 'guoV']],\r\n            KiyoInga: ['female', 'paryi', 4, ['huanxi', 'celv'], ['yingV']],\r\n            shanguangpika: ['female', 'qun', 4, ['yikai', 'pkyuanjun'], ['guoV']],\r\n            Taffy: ['female', 'qun', 3, ['qianqi', 'chutan'], ['guoV']],\r\n            CierraRunis: ['female', 'qun', 3, ['minghuahongxiao']],\r\n            RinaHayashi: ['female', 'qun', 3, ['xilv', 'bana'], ['guoV']],\r\n            Kira: ['female', 'qun', 4, ['weiguang', 'liangqin'], ['guoV']],\r\n            Kino: ['female', 'HappyElements', 4, ['xiandu', 'yexi'], ['guoV']],\r\n            tangjiuxia: ['female', 'HappyElements', 4, ['jiuxian', 'yujian'], ['guoV']],\r\n            liqingge: ['female', 'HappyElements', 4, ['tage'], ['guoV']],\r\n            JingujiTamamo: ['female', 'HappyElements', 3, ['aowei', 'meizhan'], ['zhu', 'guoV']],\r\n            iiivan: ['female', 'xuefeng', 4, ['shuipo', 'pianchao'], ['guoV']],\r\n            shenxiaoya: ['female', 'xuefeng', 4, ['xyshixi', 'wenxin'], ['guoV']],\r\n            yizhiYY: ['male', 'psp', 4, ['bianshi'], ['guoV', 'P_SP']],\r\n            AkumaYuu: ['male', 'psp', 4, ['akjianwu', 'tongzhao'], ['guoV', 'P_SP']],\r\n            AiTeN: ['male', 'psp', 4, ['langfei', 'xieyun'], ['guoV', 'P_SP']],\r\n            shengge: ['female', 'psp', 4, ['dixian', 'gumei'], ['guoV', 'P_SP', 'doublegroup:psp:qun']],\r\n            airuisi: ['female', 'Tencent', 4, ['maozhi', 'baifei'], ['zhu', 'guoV']],\r\n            aibai: ['female', 'Tencent', 3, ['bianyin', 'shabai'], ['guoV']],\r\n            wenjing: ['female', 'Tencent', 4, ['zaiying', 'zhengen'], ['guoV']],\r\n            xingtong: ['female', 'Tencent', 4, ['jiezou', 'xtguyong'], ['guoV']],\r\n            wula: ['female', 'lucca', 4, ['dizuo', 'hongtie'], ['guoV']],\r\n            yunyuluan: ['female', 'lucca', 4, ['jiujiu', 'qitong'], ['guoV']],\r\n            dusongziGin: ['female', 'qun', 3, ['danqing', 'gaiqu'], ['guoV']],\r\n            Muri: ['female', 'VirtuaReal', 3, ['lique', 'zhangdeng'], ['guoV']],\r\n            xiaoke: ['female', 'VirtuaReal', '3/4', ['dianying', 'ganfen'], ['guoV']],\r\n            Hanser: ['female', 'VirtuaReal', 3, ['naiwei', 'cishan'], ['guoV']],\r\n            Mayumi: ['female', 'VirtuaReal', 4, ['jinzhou', 'gouhun'], ['guoV']],\r\n            Ruruna: ['female', 'VirtuaReal', 4, ['miluan', 'shenjiao'], ['guoV']],\r\n            ap_Nana7mi: ['female', 'VirtuaReal', 4, ['niyou', 'shalu'], ['guoV']],\r\n            ap_Azusa: ['female', 'VirtuaReal', 3, ['puyu', 'appojian'], ['guoV']],\r\n            qingzezi: ['female', 'qun', 4, ['menghuan', 'gengu'], ['guoV']],\r\n            KurumiUsa: ['female', 'Providence', 4, ['jidou', 'duotian'], ['guoV']],\r\n            NanaseUnia: ['female', 'Providence', 4, ['qisui'], ['guoV']],\r\n            Shirako: ['female', 'Providence', 4, ['jufu', 'qihun'], ['guoV', 'doublegroup:Providence:qun']],\r\n            linxi: ['female', 'qun', 5, ['lilian', 'zihuai'], ['guoV']],\r\n            AmemachiF: ['female', 'RedC', 3, ['ciling', 'xiyu'], ['guoV']],\r\n            zhongguobanai: ['female', 'NetEase', 4, ['liying', 'fuyu'], ['guoV']],\r\n            RIKO: ['female', 'NetEase', 4, ['tieyu'], ['guoV']],\r\n            YamaUsagi: ['female', 'NetEase', 3, ['zhengmeng', 'wadao'], ['guoV']],\r\n            xinkeniang: ['female', 'qun', 4, ['daimao', 'hongtou'], ['zhu', 'guoV']],\r\n            azhun: ['female', 'qun', 3, ['tianqi', 'yubao', 'butaizhun'], ['guoV']],\r\n            Ruki: ['female', 'VirtuaReal', 4, ['beixie', 'hunzhan'], ['guoV']],\r\n        },\r\n        characterSort: {\r\n            yuzu: {\r\n                TEST: ['Ruki'],\r\n            }\r\n        },\r\n        characterIntro: {},\r\n        characterTitle: {\r\n            Shiratama: '#y幼术师',\r\n            liqingge: '#y战斗吧歌姬！',\r\n            JingujiTamamo: '#y战斗吧歌姬！',\r\n            Kino: '#yNebula-Beat',\r\n            tangjiuxia: '#yNebula-Beat',\r\n        },\r\n        skill: {\r\n            chisha: {\r\n                audio: true,\r\n                trigger: { player: 'phaseZhunbeiBegin' },\r\n                filter(Evt, player) {\r\n                    return !player.isMaxHandcard(true);\r\n                },\r\n                check(Evt, player) {\r\n                    let list = game.filterPlayer(cur => cur.isMaxHandcard()).sortBySeat();\r\n                    return (list[0].countCards('h') - player.countCards('h')) >= 1;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    let num = 1, list = game.filterPlayer(cur => cur.isMaxHandcard());\r\n                    num += (list[0].countCards('h') - player.countCards('h'));\r\n                    Evt.cards = get.cards(num);\r\n                    'step 1';\r\n                    player.gain(Evt.cards, 'draw');\r\n                    'step 2';\r\n                    player.addTempSkill('chisha_cardDisable');\r\n                },\r\n                subSkill: {\r\n                    cardDisable: {\r\n                        mark: true,\r\n                        intro: { content: '不能使用本回合摸到的牌' },\r\n                        mod: {\r\n                            cardEnabled(card, player) {\r\n                                return lib.skill.chisha_cardDisable.mod.cardSavable.apply(this, arguments);\r\n                            },\r\n                            cardSavable(card, player) {\r\n                                if (!card.cards)\r\n                                    return;\r\n                                let cards = [], hs = player.getCards('h');\r\n                                player.getHistory('gain', evt => {\r\n                                    if (evt.getParent().name != 'draw')\r\n                                        return false;\r\n                                    for (let i of evt.cards) {\r\n                                        if (hs.includes(i))\r\n                                            cards.add(i);\r\n                                    }\r\n                                });\r\n                                let num = cards.length;\r\n                                cards.removeArray(card.cards);\r\n                                if (cards.length < num)\r\n                                    return false;\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            wujian: {\r\n                trigger: {\r\n                    player: 'damageAfter', source: 'damageAfter'\r\n                },\r\n                logTarget(Evt, player) {\r\n                    if (player == Evt.source)\r\n                        return [player, Evt.player];\r\n                    return [player, Evt.source];\r\n                },\r\n                check(Evt, player) {\r\n                    return (player.countCards('h') - (player == Evt.source ? Evt.player : Evt.source).countCards('h')) <= 1;\r\n                },\r\n                filter(Evt, player) {\r\n                    return Evt.source && player.countCards('h') > (player == Evt.source ? Evt.player : Evt.source).countCards('h');\r\n                },\r\n                content() {\r\n                    if (player == trigger.source)\r\n                        Evt.target = trigger.player;\r\n                    else\r\n                        Evt.target = trigger.source;\r\n                    player.swapHandcards(Evt.target);\r\n                },\r\n            },\r\n            jvliu: {\r\n                trigger: {\r\n                    global: 'useCard'\r\n                },\r\n                filter(Evt, player) {\r\n                    return get.type(Evt.card) != 'basic' && Evt.player != player;\r\n                },\r\n                check(Evt, player) {\r\n                    if (get.attitude(player, Evt.player) > 0) {\r\n                        return false;\r\n                    }\r\n                    if (get.tag(Evt.card, 'respondSha') && Evt.targets.includes(player)) {\r\n                        if (player.countCards('h', { name: 'sha' }) == 0) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    else if (get.tag(Evt.card, 'respondShan') && Evt.targets.includes(player)) {\r\n                        if (player.countCards('h', { name: 'shan' }) == 0) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    else if (get.tag(Evt.card, 'damage') && Evt.targets.includes(player)) {\r\n                        if (Evt.card.name == 'shuiyanqijunx')\r\n                            return player.countCards('e') == 0;\r\n                        return true;\r\n                    }\r\n                    else if ((Evt.card.name == 'shunshou' || (get.subtype(Evt.card) === 'equip2' && Evt.player.isEmpty(2))) && player.hp > 2) {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    'step 0';\r\n                    player.loseHp(1);\r\n                    'step 1';\r\n                    trigger.cancel();\r\n                    game.delayx();\r\n                },\r\n            },\r\n            wuxia: {\r\n                unique: true,\r\n                juexingji: true,\r\n                forced: true,\r\n                trigger: {\r\n                    player: 'phaseZhunbei'\r\n                },\r\n                firstDo: true,\r\n                filter(Evt, player) {\r\n                    return player.hp == 1;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.awakenSkill('wuxia');\r\n                    player.gainMaxHp();\r\n                    'step 1';\r\n                    player.recover();\r\n                    'step 2';\r\n                    if (player.countCards('h') >= 3)\r\n                        player.chooseToDiscard(3, true);\r\n                    else\r\n                        player.removeSkill('jvliu');\r\n                    'step 3';\r\n                    player.setAvatar('Shiranekoyuki', 'Shiranekoyuki1');\r\n                    player.addSkill('wuxia_yuanyao');\r\n                },\r\n                derivation: 'wuxia_yuanyao',\r\n                involve: 'jvliu',\r\n            },\r\n            wuxia_yuanyao: {\r\n                filter(Evt, player) {\r\n                    if (player.countCards('h') > player.maxHp || player.countCards('h') == player.hp)\r\n                        return false;\r\n                    return (player.getStat('skill').wuxia_yuanyao || 0) < game.countPlayer(cur => cur.sex == 'female');\r\n                },\r\n                inherit: 'yuanyao',\r\n            },\r\n            beixie: {\r\n                trigger: { global: 'gameDrawBegin', player: 'enterGame' },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    Evt.togain = [];\r\n                    for (let i = 0; i < ui.cardPile.childElementCount; i++) {\r\n                        Evt.togain.push(ui.cardPile.childNodes[i]);\r\n                    }\r\n                    'step 1';\r\n                    player.chooseButton(['是否获得其中的一张牌？', Evt.togain]);\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        player.logSkill(Evt.name);\r\n                        player.gain(result.links, 'draw', 'log');\r\n                        if (get.subtype(result.links[0]) == 'equip1') {\r\n                            player.equip(result.links[0]);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            hunzhan: {\r\n                trigger: { global: 'damageAfter' },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    'step 0';\r\n                    trigger.player.chooseToUse({\r\n                        filterCard(card, player) {\r\n                            return lib.filter.filterCard.apply(this, arguments);\r\n                        },\r\n                        prompt: get.prompt2('hunzhan')\r\n                    });\r\n                    'step 1';\r\n                    if (result.cards && result.cards.length) {\r\n                        player.draw();\r\n                    }\r\n                }\r\n            },\r\n            danqing: new toSkill('trigger', {\r\n                trigger: {\r\n                    player: 'damageAfter', source: 'damageAfter'\r\n                },\r\n                init(player, skill) {\r\n                    var _a;\r\n                    var _b;\r\n                    (_a = (_b = player.storage)[skill]) !== null && _a !== void 0 ? _a : (_b[skill] = []);\r\n                },\r\n                filter: function (Evt, player) {\r\n                    return game.countPlayer(cur => !player.getStorage('danqing')[0].includes(cur));\r\n                },\r\n                direct: true,\r\n                content: function () {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.chooseTarget(get.prompt2('danqing'), function (card, player, target) {\r\n                        return !player.getStorage('danqing')[0].includes(target);\r\n                    }, function (target) {\r\n                        return get.attitude2(target);\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        Evt.target = result.targets[0];\r\n                        let card2 = get.cardPile(function (card) { return card.name == 'jiu'; }, ['cardPile', 'discardPile']);\r\n                        if (card2) {\r\n                            player.logSkill('danqing', Evt.target);\r\n                            Evt.target.gain(card2, 'draw', 'log');\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    if (!Evt.target.hasSkill('danqing_Used'))\r\n                        Evt.target.addSkill('danqing_Used');\r\n                    if (player.storage.danqing[0]) {\r\n                        if (player.storage.danqing[0].includes('first')) {\r\n                            player.storage.danqing[0].remove('first');\r\n                            let card2 = get.cardPile(function (card) { return card.name == 'jiu'; }, ['cardPile', 'discardPile']);\r\n                            if (card2) {\r\n                                Evt.target.gain(card2, 'draw', 'log');\r\n                            }\r\n                        }\r\n                        player.storage.danqing[0].push(Evt.target);\r\n                    }\r\n                },\r\n                group: 'danqing_count',\r\n                subSkill: {\r\n                    count: new toSkill('trigger', {\r\n                        content() {\r\n                            var _a;\r\n                            var _b;\r\n                            (_a = (_b = player.storage).danqing) !== null && _a !== void 0 ? _a : (_b.danqing = []);\r\n                            player.storage.danqing.unshift(['first']);\r\n                        }\r\n                    }, 'direct', 'silent').setT({ global: 'phaseBefore' }),\r\n                    Used: new toSkill('mark', {\r\n                        intro: {\r\n                            content: '已成为过『蛋擎』的目标'\r\n                        }\r\n                    }, 'locked', 'mark')\r\n                },\r\n            }).setT({ player: 'damageAfter', source: 'damageAfter' }),\r\n            gaiqu: new toSkill('trigger', {\r\n                filter: function (Evt, player) {\r\n                    return player.countCards('h') < player.storage.gaiqu_count;\r\n                },\r\n                content: function () {\r\n                    'step 0';\r\n                    delete player.storage.gaiqu_count;\r\n                    player.awakenSkill('gaiqu');\r\n                    player.unmarkSkill('gaiqu_count');\r\n                    player.gainMaxHp();\r\n                    'step 1';\r\n                    player.recover();\r\n                    'step 2';\r\n                    if (player.countCards('h') > 2)\r\n                        player.chooseToDiscard(3, true);\r\n                    else\r\n                        player.removeSkill('danqing');\r\n                    'step 3';\r\n                    game.filterPlayer(cur => { if (cur.hasSkill('danqing_Used') && !cur.hasSkill('songxing'))\r\n                        cur.addSkill('songxing'); });\r\n                },\r\n                group: 'gaiqu_count',\r\n                subSkill: {\r\n                    count: new toSkill('trigger', {\r\n                        intro: {\r\n                            content: '已使用#张【酒】'\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return get.name(Evt.card) === 'jiu';\r\n                        },\r\n                        content() {\r\n                            var _a;\r\n                            var _b;\r\n                            (_a = (_b = player.storage).gaiqu_count) !== null && _a !== void 0 ? _a : (_b.gaiqu_count = 0);\r\n                            player.storage.gaiqu_count++;\r\n                            player.markSkill('gaiqu_count');\r\n                        }\r\n                    }, 'forced').setT('useCardAfter')\r\n                },\r\n                derivation: 'songxing',\r\n                involve: 'danqing',\r\n            }, 'unique', 'juexingji', 'forced', 'firstDo').setT('phaseZhunbei'),\r\n            songxing: new toSkill('regard', {\r\n                init(player, skill) {\r\n                    player.storage[skill] = [];\r\n                },\r\n                hiddenCard(player, name) {\r\n                    if (!player.countCards('hs', { name: 'jiu' }))\r\n                        return false;\r\n                    let list = get.inpile('trick', card => {\r\n                        if (player.storage.songxing.contains(card))\r\n                            return false;\r\n                        return true;\r\n                    });\r\n                    for (let i of list) {\r\n                        if (i == name)\r\n                            return true;\r\n                    }\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.countCards('hs', { name: 'jiu' });\r\n                },\r\n                chooseButton: {\r\n                    dialog(Evt, player) {\r\n                        let list = get.inpile('trick2', card => {\r\n                            if (player.storage.songxing.contains(card))\r\n                                return false;\r\n                            return true;\r\n                        });\r\n                        for (let i of list) {\r\n                            list[i] = ['锦囊', '', list[i]];\r\n                        }\r\n                        if (list.length == 0) {\r\n                            return ui.create.dialog('『松星』已无可用牌');\r\n                        }\r\n                        return ui.create.dialog('『松星』', [list, 'vcard']);\r\n                    },\r\n                    filter(button, player) {\r\n                        return _status.event.getParent().filterCard({ name: button.link[2] }, player, _status.event.getParent());\r\n                    },\r\n                    check(button) {\r\n                        let player = _status.event.player;\r\n                        if (button.link[2] == 'wugu')\r\n                            return 0;\r\n                        let effect = player.getUseValue(button.link[2]);\r\n                        if (effect > 0)\r\n                            return effect;\r\n                        return 0;\r\n                    },\r\n                    backup(links, player) {\r\n                        return {\r\n                            filterCard(card) {\r\n                                return get.name(card) === 'jiu';\r\n                            },\r\n                            selectCard: 1,\r\n                            popname: true,\r\n                            check(card) {\r\n                                return 6 - get.value(card);\r\n                            },\r\n                            position: 'hs',\r\n                            viewAs: { name: links[0][2] },\r\n                            onuse(result, player) {\r\n                                player.storage.songxing.add(result.card.name);\r\n                            },\r\n                        };\r\n                    },\r\n                    prompt(links, player) {\r\n                        return `###『松星』###将一张【酒】当做【${get.translation(links[0][3]) || ''}${get.translation(links[0][2])}】使用`;\r\n                    }\r\n                },\r\n                group: 'songxing_clear',\r\n                subSkill: {\r\n                    clear: new toSkill('trigger', {\r\n                        content() {\r\n                            player.storage.songxing = [];\r\n                        }\r\n                    }, 'direct', 'silent').setT({ global: 'phaseAfter' }),\r\n                },\r\n            }, 'enable:chooseToUse'),\r\n            tatongling: new toSkill('trigger', {\r\n                intro: {\r\n                    content: 'cards',\r\n                    onunmark: 'throw',\r\n                },\r\n                init(player, skill) {\r\n                    var _a;\r\n                    var _b;\r\n                    (_a = (_b = player.storage)[skill]) !== null && _a !== void 0 ? _a : (_b[skill] = []);\r\n                },\r\n                check(Evt, player) {\r\n                    if (player.hasSkill('tatongling_used'))\r\n                        return false;\r\n                    if (Evt.player.isTurnedOver())\r\n                        return get.attitude(player, Evt.player) > 0;\r\n                    return get.attitude(player, Evt.player) < 0;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    Evt.target = trigger.player;\r\n                    let check = !Evt.target.isTurnedOver() && (get.attitude(Evt.target, player) >= 0 || Evt.target.needsToDiscard());\r\n                    Evt.target.chooseCard(2).set('ai', function (card) {\r\n                        if (!_status.event.check)\r\n                            return 0;\r\n                        return get.unuseful3(card);\r\n                    }).set('check', check).set('prompt', `『彤灵』：将两张手牌置于${get.translation(player)}武将牌上，否则翻面并回复一点体力`);\r\n                    'step 1';\r\n                    if ((_a = result.cards) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        Evt.target.$give(result.cards, player);\r\n                        Evt.target.lose(result.cards, ui.special, 'toStorage');\r\n                        player.markAuto('tatongling', result.cards);\r\n                    }\r\n                    else {\r\n                        Evt.target.turnOver();\r\n                        Evt.target.recover();\r\n                        player.addTempSkill('tatongling_used', 'phaseNext');\r\n                    }\r\n                },\r\n            }, 'logTarget:player', 'cardAround').setT({ global: 'loseHpAfter', source: 'damageAfter' }).set(['group', 'tatongling_gainBy'], ['subSkill', {\r\n                    gainBy: new toSkill('trigger', {\r\n                        content() {\r\n                            let cards = player.getStorage('tatongling');\r\n                            if (cards.length) {\r\n                                player.gain(cards);\r\n                                player.$give(cards, player, false);\r\n                                player.unmarkAuto('tatongling', cards);\r\n                            }\r\n                        },\r\n                    }, 'direct').setT(lib.phaseName, 'Skipped'),\r\n                    used: new toSkill('mark'),\r\n                }]),\r\n            yumeng: new toSkill('trigger', {\r\n                content() {\r\n                    \"step 0\";\r\n                    var check = player.countCards('h') > 2;\r\n                    player.chooseTarget(get.prompt2(`yumeng`), function (card, player, target) {\r\n                        if (player == target)\r\n                            return false;\r\n                        return true;\r\n                    }).set('check', check).set('ai', function (target) {\r\n                        if (!_status.event.check)\r\n                            return 0;\r\n                        return get.attitude(_status.event.player, target);\r\n                    });\r\n                    \"step 1\";\r\n                    if (result.bool) {\r\n                        player.logSkill('yumeng', result.targets);\r\n                        Evt.target = result.targets[0];\r\n                        Evt.target.storage.yumeng2 = player;\r\n                        Evt.target.addTempSkill('yumeng2', 'none');\r\n                        trigger.cancel();\r\n                        player.skip('phaseDraw');\r\n                    }\r\n                },\r\n            }, 'direct').setT('phaseJudgeBefore').set(['group', 'yumeng_clear'], ['subSkill', {\r\n                    clear: new toSkill('trigger', {\r\n                        content() {\r\n                            game.filterPlayer(cur => {\r\n                                if (cur.storage.yumeng2 === player)\r\n                                    cur.removeSkill('yumeng2');\r\n                            });\r\n                        },\r\n                    }, 'direct').setT('phaseBegin')\r\n                }]),\r\n            yumeng2: new toSkill('trigger', {\r\n                content() {\r\n                    trigger.cancel();\r\n                    trigger.player.loseHp(trigger.num);\r\n                }\r\n            }, 'forced', 'mark:character', 'onremove').setT('damageBefore').set(['intro', { content: '受到的伤害改为体力流失' }]),\r\n            suyuan: new toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'lose') {\r\n                        if (Evt.position != ui.discardPile)\r\n                            return false;\r\n                    }\r\n                    else {\r\n                        let evt = Evt.getParent();\r\n                        if (evt.name != 'orderingDiscard' || !evt.relatedEvent || evt.relatedEvent.player != player || !['useCard', 'respond'].includes(evt.relatedEvent.name))\r\n                            return false;\r\n                    }\r\n                    return get.suit3((Evt.cards2 || Evt.cards).filterInD('d')).length >= 3;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    let cards = (trigger.cards2 || trigger.cards).filterInD('d');\r\n                    Evt.cards = cards;\r\n                    player.chooseTarget(function (card, player, target) {\r\n                        if (player == target)\r\n                            return false;\r\n                        return true;\r\n                    }).set('ai', tar => {\r\n                        let att = get.attitude2(player, tar);\r\n                        if (tar.hp == 1)\r\n                            return att + get.damageEffect(tar, player, player);\r\n                        return (get.value(_status.event.cards, 'raw', tar) + tar.hp - 5) * att;\r\n                    }).set('cards', cards).set('createDialog', [get.prompt('suyuan'),\r\n                        'small', get.skillInfoTranslation('suyuan', player), '令一名其他角色获得这些牌',\r\n                        [cards, 'card']]);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.target = result.targets[0];\r\n                        player.logSkill('suyuan', Evt.target);\r\n                        let evt = trigger.getParent().relatedEvent;\r\n                        if ((trigger.name == 'discard' && !trigger.delay) || (evt === null || evt === void 0 ? void 0 : evt.name) == 'respond')\r\n                            game.delayx();\r\n                        Evt.target.damage('nosource');\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    Evt.target.storage.suyuan = Evt.cards.length;\r\n                    Evt.target.storage.suyuan2 = player;\r\n                    Evt.target.addTempSkill('suyuan2', 'none');\r\n                    Evt.target.gain(Evt.cards, 'gain2', 'log');\r\n                },\r\n            }, 'direct').setT({ player: 'loseAfter', global: 'cardsDiscardAfter' }),\r\n            suyuan2: new toSkill('mark', {\r\n                onremove: ['suyuan', 'suyuan2'],\r\n                filter(Evt, player) {\r\n                    return player.storage.suyuan2 === Evt.player && player.storage.suyuan;\r\n                },\r\n                content() {\r\n                    trigger.player.logSkill('suyuan', player);\r\n                    trigger.player.gainPlayerCard(player, true, player.storage.suyuan);\r\n                }\r\n            }, 'forced', 'mark:character').setT({ global: 'phaseZhunbeiBegin' }).set(['intro', { content: '在$的下个准备阶段由对方获得牌' }]),\r\n            mujian: new toSkill('trigger', {\r\n                content() {\r\n                    game.filterPlayer(cur => {\r\n                        cur.addSkill('mujian2');\r\n                    });\r\n                }\r\n            }, 'forced').setT('dieBegin'),\r\n            mujian2: new toSkill('trigger', {\r\n                content() {\r\n                    for (let v of game.dead) {\r\n                        if (v.isDead() && v.hasSkill('mujian')) {\r\n                            v.revive(1);\r\n                            v.logSkill('mujian');\r\n                            let next = game.createEvent('resetSkill');\r\n                            next.player = v;\r\n                            next.setContent([function () {\r\n                                    let list = get.gainableSkills((info, skill) => {\r\n                                        return info.enable === 'phaseUse' && !info.forceunique && !info.notemp && !player.hasSkill(skill);\r\n                                    });\r\n                                    player.discoverSkill(list);\r\n                                },\r\n                                function () {\r\n                                    let link = result.skill;\r\n                                    if (link) {\r\n                                        player.addTempSkill(link, 'dieBegin');\r\n                                    }\r\n                                }]);\r\n                        }\r\n                    }\r\n                }\r\n            }, 'locked', 'direct', 'silent').setT({ global: 'roundStart' }),\r\n            cirong: new toSkill('active', {\r\n                usable: 1,\r\n                filterTarget(card, player, target) {\r\n                    return get.distance(player, target, 'pure') <= 1;\r\n                },\r\n                discard: false,\r\n                prepare: 'give2',\r\n                content() {\r\n                    target.gain(cards, player);\r\n                },\r\n            }, 'filterCard'),\r\n            maoyu: new toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    if (player !== _status.currentPhase || Evt.player == player)\r\n                        return false;\r\n                    {\r\n                        let name = lib.skill.yiqu.process(Evt), info = lib.skill[name];\r\n                        if (info && !info.equipSkill && !info.ruleSkill)\r\n                            return lib.translate[name + '_info'];\r\n                    }\r\n                    {\r\n                        let name = lib.skill.yiqu.process(Evt.getParent()), info = lib.skill[name];\r\n                        if (info && !info.equipSkill && !info.ruleSkill)\r\n                            return lib.translate[name + '_info'];\r\n                    }\r\n                },\r\n                logTarget: 'player',\r\n                content: [function () {\r\n                        Evt.tar0 = trigger.player;\r\n                        Evt.tar1 = Evt.tar0.getNext();\r\n                        Evt.list = [`交给${get.translation(player)}两张牌`, `弃置一张牌，令${get.translation(Evt.tar1)}摸一张牌`];\r\n                        if (Evt.tar0.countCards('he') >= 2) {\r\n                            Evt.tar0.chooseControl('dialogcontrol', Evt.list, function () {\r\n                                return _status.event.att;\r\n                            }).set('att', get.attitude(Evt.tar0, player) > get.attitude(Evt.tar0, Evt.tar1) ? 0 : 1).set('prompt', '『猫羽』请选择一项');\r\n                        }\r\n                        else {\r\n                            Evt._result = { control: Evt.list[1] };\r\n                        }\r\n                    }, function () {\r\n                        switch (result.control) {\r\n                            case Evt.list[0]: {\r\n                                Evt.tar0.chooseCard(2, true, 'he', `交给${get.translation(player)}两张牌`);\r\n                                break;\r\n                            }\r\n                            case Evt.list[1]: {\r\n                                Evt.tar0.chooseToDiscard(true);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }, function () {\r\n                        if (result.cards.length === 2)\r\n                            player.gain(result.cards, Evt.tar0, 'giveAuto');\r\n                        else\r\n                            Evt.tar1.draw();\r\n                    }]\r\n            }).setT({ global: 'gainAfter' }),\r\n            chentu: {\r\n                enable: 'phaseUse',\r\n                position: 'h',\r\n                usable: 1,\r\n                filterCard: true,\r\n                selectCard: [1, Infinity],\r\n                complexCard: true,\r\n                check(card) {\r\n                    let player = _status.event.player;\r\n                    let nh = player.countCards('h') - ui.selected.cards.length;\r\n                    for (let i = 0; i < game.players.length; i++) {\r\n                        if (game.players[i].isOut() || game.players[i] == player)\r\n                            continue;\r\n                        if (game.players[i].countCards('h') < nh)\r\n                            return 12 - get.value(card);\r\n                    }\r\n                    return 5 - get.value(card);\r\n                },\r\n                content() {\r\n                    if (player.isMinHandcard()) {\r\n                        if (!player.storage.chentu)\r\n                            player.storage.chentu = 0;\r\n                        player.storage.chentu += cards.length;\r\n                        player.markSkill('chentu');\r\n                    }\r\n                },\r\n                marktext: 'yuki',\r\n                intro: {\r\n                    content(storage, player) {\r\n                        let str = '下个回合开始时，摸';\r\n                        str += get.cnNumber(player.storage.chentu * 2);\r\n                        str += '张牌';\r\n                        return str;\r\n                    },\r\n                },\r\n                group: ['chentu_drawBy'],\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: { player: 'phaseBegin' },\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            return player.storage.chentu;\r\n                        },\r\n                        content() {\r\n                            player.draw(player.storage.chentu * 2);\r\n                            player.unmarkSkill('chentu');\r\n                            delete player.storage.chentu;\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten: 1.3,\r\n                    order: 6,\r\n                    result: { player: 4 },\r\n                }\r\n            },\r\n            sishu: {\r\n                enable: 'chooseToUse',\r\n                filter(Evt, player) {\r\n                    if (player != _status.currentPhase)\r\n                        return false;\r\n                    if (!player.countCards('h', { suit: 'heart' }) ||\r\n                        !player.countCards('h', { suit: 'spade' }) ||\r\n                        !player.countCards('h', { suit: 'diamond' }) ||\r\n                        !player.countCards('h', { suit: 'club' }))\r\n                        return false;\r\n                    if (!game.hasPlayer(cur => cur != player)) {\r\n                        return false;\r\n                    }\r\n                    return Evt.filterCard({ name: 'sha' }, player, Evt) ||\r\n                        Evt.filterCard({ name: 'jiu' }, player, Evt) ||\r\n                        Evt.filterCard({ name: 'tao' }, player, Evt) ||\r\n                        Evt.filterCard({ name: 'shan' }, player, Evt);\r\n                },\r\n                chooseButton: {\r\n                    dialog(Evt, player) {\r\n                        let list = [];\r\n                        _status.event.skillBy = 'sishu';\r\n                        if (Evt.filterCard({ name: 'sha' }, player, Evt)) {\r\n                            list.push(['基本', '', 'sha']);\r\n                            list.push(['基本', '', 'sha', 'fire']);\r\n                            list.push(['基本', '', 'sha', 'thunder']);\r\n                        }\r\n                        if (Evt.filterCard({ name: 'tao' }, player, Evt)) {\r\n                            list.push(['基本', '', 'tao']);\r\n                        }\r\n                        if (Evt.filterCard({ name: 'jiu' }, player, Evt)) {\r\n                            list.push(['基本', '', 'jiu']);\r\n                        }\r\n                        if (Evt.filterCard({ name: 'shan' }, player, Evt)) {\r\n                            list.push(['基本', '', 'shan']);\r\n                        }\r\n                        delete _status.event.skillBy;\r\n                        return ui.create.dialog('饲鼠', [list, 'vcard'], 'hidden');\r\n                    },\r\n                    check(button) {\r\n                        let player = _status.event.player;\r\n                        let card = { name: button.link[2], nature: button.link[3] };\r\n                        if (card.name == 'jiu')\r\n                            return get.order({ name: 'jiu' });\r\n                        if (game.hasPlayer(cur => player.canUse(card, cur) && get.effect(cur, card, player, player) > 0)) {\r\n                            if (card.name == 'sha') {\r\n                                if (card.nature == 'fire')\r\n                                    return 2.95;\r\n                                else if (card.nature == 'fire')\r\n                                    return 2.92;\r\n                                else\r\n                                    return 2.9;\r\n                            }\r\n                            else if (card.name == 'tao' || card.name == 'shan') {\r\n                                return 4;\r\n                            }\r\n                        }\r\n                        return 0;\r\n                    },\r\n                    backup(links, player) {\r\n                        return {\r\n                            filterCard(card) {\r\n                                if (ui.selected.cards.length) {\r\n                                    for (let i of ui.selected.cards) {\r\n                                        if (get.suit(card) == get.suit(i))\r\n                                            return false;\r\n                                    }\r\n                                }\r\n                                return get.suit(card);\r\n                            },\r\n                            complexCard: true,\r\n                            viewAs: { name: links[0][2], nature: links[0][3], isCard: true },\r\n                            selectCard: 4,\r\n                            popname: true,\r\n                            log: false,\r\n                            precontent() {\r\n                                'step 0';\r\n                                var _a;\r\n                                Evt.cards = Evt.result.cards.slice(0);\r\n                                Evt.result.card.cards = [];\r\n                                Evt.result.cards = [];\r\n                                delete Evt.result.card.suit;\r\n                                delete Evt.result.card.number;\r\n                                'step 1';\r\n                                player.chooseTarget('选择收到这些牌的角色', true, lib.filter.notMe).ai = function (target) {\r\n                                    return get.attitude(player, target);\r\n                                };\r\n                                'step 2';\r\n                                if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                                    player.logSkill('sishu', result.targets);\r\n                                    player.give(Evt.cards, result.targets[0], true);\r\n                                }\r\n                            },\r\n                        };\r\n                    },\r\n                    prompt(links, player) {\r\n                        return `###选择交给其他角色的牌，以及${get.translation(links[0][3] || '')}${get.translation(links[0][2])}的目标###（注意是牌的目标。而不是收到牌的角色）`;\r\n                    }\r\n                },\r\n                mod: {\r\n                    cardEnabled(card, player) {\r\n                        if (player == _status.currentPhase && get.type(card) == 'basic' && (_status.event.skillBy != 'sishu' && _status.event.skill != 'sishu_backup'))\r\n                            return false;\r\n                    },\r\n                    cardSavable(card, player) {\r\n                        if (player == _status.currentPhase && get.type(card) == 'basic' && (_status.event.skillBy != 'sishu' && _status.event.skill != 'sishu_backup'))\r\n                            return false;\r\n                    },\r\n                },\r\n                ai: {\r\n                    order() {\r\n                        let player = _status.event.player;\r\n                        let Evt = _status.event;\r\n                        let nh = player.countCards('h');\r\n                        if (game.hasPlayer(cur => get.attitude(player, cur) > 0 && cur.countCards('h') < nh)) {\r\n                            if (Evt.type == 'dying') {\r\n                                if (Evt.filterCard({ name: 'tao' }, player, Evt)) {\r\n                                    return 0.5;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (Evt.filterCard({ name: 'tao' }, player, Evt) || Evt.filterCard({ name: 'shan' }, player, Evt)) {\r\n                                    return 4;\r\n                                }\r\n                                if (Evt.filterCard({ name: 'sha' }, player, Evt)) {\r\n                                    return 2.9;\r\n                                }\r\n                            }\r\n                        }\r\n                        return 0;\r\n                    },\r\n                    save: true,\r\n                    respondSha: true,\r\n                    respondShan: true,\r\n                    skillTagFilter(player, tag, arg) {\r\n                        return player.countCards('h') >= 4;\r\n                    },\r\n                    result: {\r\n                        player(player) {\r\n                            if (_status.event.type == 'dying') {\r\n                                return get.attitude(player, _status.event.dying);\r\n                            }\r\n                            else {\r\n                                return 1;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            test: {\r\n                trigger: {\r\n                    global: \"gameDrawAfter\",\r\n                    player: \"enterGame\",\r\n                },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return false;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    galgame.sce(\"jiaochen1\");\r\n                    'step 1';\r\n                    galgame.sce(\"jiaochen2\");\r\n                    'step 2';\r\n                    if (result.bool == \"如何导入Galgame插件\") {\r\n                        galgame.sce(\"daoru\");\r\n                    }\r\n                    if (result.bool == \"什么是事件？\") {\r\n                        galgame.sce(\"shijian\");\r\n                    }\r\n                    if (result.bool == \"请你介绍下color标签及字体\") {\r\n                        galgame.sce(\"color\");\r\n                    }\r\n                    if (result.bool == \"该怎么编写属于我的剧本？\") {\r\n                        galgame.sce(\"jvben\");\r\n                    }\r\n                    if (result.bool == \"请你介绍下booth标签\") {\r\n                        galgame.sce(\"booth\");\r\n                    }\r\n                    if (result.bool == \"请你介绍下right标签\") {\r\n                        galgame.sce(\"right\");\r\n                    }\r\n                    if (result.bool == \"请你介绍下choose标签\") {\r\n                        galgame.sce(\"choose\");\r\n                    }\r\n                    if (result.bool == \"请你介绍下none标签\") {\r\n                        galgame.sce(\"none\");\r\n                    }\r\n                    if (result.bool == \"请你介绍下cg标签\") {\r\n                        galgame.sce(\"cg\");\r\n                    }\r\n                    if (result.bool == \"请你介绍下audio标签\") {\r\n                        galgame.sce(\"audio\");\r\n                    }\r\n                    if (result.bool == \"请你介绍下music标签\") {\r\n                        galgame.sce(\"music\");\r\n                    }\r\n                    if (result.bool == \"请你介绍下background标签\") {\r\n                        galgame.sce(\"background\");\r\n                    }\r\n                    if (result.bool == \"请你介绍下特殊对话标签\") {\r\n                        galgame.sce(\"sp\");\r\n                    }\r\n                    if (result.bool == \"请你介绍下一般对话标签\") {\r\n                        galgame.sce(\"duihua\");\r\n                    }\r\n                    if (result.bool == \"什么是标签？\") {\r\n                        galgame.sce(\"biaoqian\");\r\n                    }\r\n                    if (result.bool == '我都明白了，谢谢') {\r\n                        galgame.sce(\"end\");\r\n                        Evt.finish();\r\n                    }\r\n                    else if (result.bool != \"请你介绍下booth标签\") {\r\n                        Evt.goto(1);\r\n                    }\r\n                    'step 3';\r\n                    if (result.bool == \"第一次？我们不是第一次见面嘛？\") {\r\n                        galgame.sce(\"one\");\r\n                    }\r\n                    'step 4';\r\n                    galgame.sce(\"booth2\");\r\n                    Evt.goto(1);\r\n                },\r\n            },\r\n            fengxu: {\r\n                trigger: {\r\n                    player: 'useCardToPlayered',\r\n                },\r\n                filter(Evt, player) {\r\n                    return Evt.targets.length == 1\r\n                        && Evt.target == Evt.targets[0]\r\n                        && Evt.target.countCards('hej');\r\n                },\r\n                check(Evt, player) {\r\n                    return get.attitude(player, Evt.target) <= 0\r\n                        || (get.attitude(player, Evt.target) > 0 && Evt.target.countCards('j'));\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.A = trigger.target;\r\n                    Evt.num = 0;\r\n                    'step 1';\r\n                    Evt.B = Evt.A.next;\r\n                    if (!Evt.A.countCards('hej'))\r\n                        Evt.finish();\r\n                    player.choosePlayerCard('hej', Evt.A, true).set('ai', function (button) {\r\n                        let player = _status.event.player, source = _status.event.target, target = source.next, link = button.link;\r\n                        if (get.position(link) == 'j') {\r\n                            if (target.canAddJudge(link))\r\n                                return get.effect(target, link, player, player) * get.attitude(player, target);\r\n                        }\r\n                        else if (get.position(link) == 'e') {\r\n                            let subtype = get.subtype(link);\r\n                            if (!target.getEquip(subtype))\r\n                                return get.effect(target, link, player, player) * get.attitude(player, target);\r\n                        }\r\n                        else {\r\n                            return get.value(link, target, 'raw') * get.attitude(player, target);\r\n                        }\r\n                    });\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        let card = result.links[0];\r\n                        if (get.position(card) == 'e') {\r\n                            let c = Evt.B.getEquip(get.subtype(card));\r\n                            if (c) {\r\n                                Evt.change = true;\r\n                                game.log(c, '掉落了');\r\n                            }\r\n                            Evt.B.equip(card);\r\n                        }\r\n                        else if (get.position(card) == 'j') {\r\n                            let cname = card.viewAs ? card.viewAs : get.name(card);\r\n                            Evt.B.getCards('j').forEach(function (c) {\r\n                                if (get.name(c) == cname) {\r\n                                    Evt.change = true;\r\n                                    game.log(c, '掉落了');\r\n                                    game.cardsDiscard(c);\r\n                                }\r\n                            });\r\n                            Evt.B.addJudge({ name: cname }, [card]);\r\n                        }\r\n                        else {\r\n                            Evt.B.gain(card, Evt.A);\r\n                        }\r\n                        Evt.A.$give(card, Evt.B);\r\n                        game.delay();\r\n                    }\r\n                    'step 3';\r\n                    if (Evt.change) {\r\n                        if (Evt.B == player && Evt.num)\r\n                            player.draw(Evt.num);\r\n                    }\r\n                    else if (Evt.num < 5) {\r\n                        Evt.A = Evt.B;\r\n                        Evt.num++;\r\n                        Evt.goto(1);\r\n                    }\r\n                }\r\n            },\r\n            xiangnuo: {\r\n                trigger: {\r\n                    player: ['loseAfter', 'equipEnd'],\r\n                    global: ['gainAfter', 'equipAfter', 'addJudgeAfter', 'loseAsyncAfter'],\r\n                },\r\n                direct: true,\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = 1;\r\n                },\r\n                filter(Evt, player) {\r\n                    var _a;\r\n                    if (player.storage.xiangnuo == 1) {\r\n                        return Evt.name == 'equip' && Evt.player == player;\r\n                    }\r\n                    else {\r\n                        let evt = Evt.getl(player);\r\n                        return (_a = evt === null || evt === void 0 ? void 0 : evt.es) === null || _a === void 0 ? void 0 : _a.length;\r\n                    }\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseTarget(get.prompt2('xiangnuo')).ai = function (target) {\r\n                        return get.attitude2(target) * (target.isMinHp() ? 4.5 : 2);\r\n                    };\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.storage.xiangnuo = player.storage.xiangnuo == 1 ? 2 : 1;\r\n                        let target = result.targets[0];\r\n                        target.draw(2);\r\n                        if (target.isMinHp())\r\n                            target.recover();\r\n                    }\r\n                },\r\n                group: 'xiangnuo2',\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (get.type(card) == 'equip' && !get.cardtag(card, 'gifts'))\r\n                                return [1, 3];\r\n                        }\r\n                    },\r\n                    expose: 0.5,\r\n                    threaten: 1.3\r\n                }\r\n            },\r\n            xiangnuo2: {\r\n                enable: 'phaseUse',\r\n                getResult(cards, player) {\r\n                    let l = cards.length, all = Math.pow(l, 2), list = [];\r\n                    for (let i = 1; i < all; i++) {\r\n                        let array = [];\r\n                        for (let j = 0; j < l; j++) {\r\n                            if (Math.floor((i % Math.pow(2, j + 1)) / Math.pow(2, j)) > 0)\r\n                                array.push(cards[j]);\r\n                        }\r\n                        let num = 0;\r\n                        for (let k of array) {\r\n                            num += get.number(k);\r\n                        }\r\n                        if (num == 12)\r\n                            list.push(array);\r\n                    }\r\n                    if (list.length) {\r\n                        list.sort(function (a, b) {\r\n                            if (a.length != b.length)\r\n                                return b.length - a.length;\r\n                            return get.value(a, player) - get.value(b, player);\r\n                        });\r\n                        return list[0];\r\n                    }\r\n                    return list;\r\n                },\r\n                usable: 1,\r\n                filterCard(card) {\r\n                    let num = 0;\r\n                    for (let i of ui.selected.cards) {\r\n                        num += get.number(i);\r\n                    }\r\n                    return get.number(card) + num <= 12;\r\n                },\r\n                complexCard: true,\r\n                selectCard() {\r\n                    let num = 0;\r\n                    for (let i of ui.selected.cards) {\r\n                        num += get.number(i);\r\n                    }\r\n                    if (num == 12)\r\n                        return ui.selected.cards.length;\r\n                    return ui.selected.cards.length + 2;\r\n                },\r\n                check(card) {\r\n                    let evt = _status.event;\r\n                    if (!evt.xiangnuo_choice)\r\n                        evt.xiangnuo_choice = lib.skill.xiangnuo2.getResult(evt.player.getCards('he'), evt.player);\r\n                    if (!evt.xiangnuo_choice.includes(card))\r\n                        return 0;\r\n                    return 1;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.draw(cards.length).gaintag = ['xiangnuo'];\r\n                    'step 1';\r\n                    player.storage.xiangnuo = player.storage.xiangnuo == 1 ? 2 : 1;\r\n                },\r\n                ai: {\r\n                    order: 5,\r\n                    result: { player: 1 },\r\n                },\r\n            },\r\n            tanghuang: {\r\n                trigger: { target: 'useCardToTargeted' },\r\n                logTarget: 'player',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    let source = Evt.player;\r\n                    if (source == player)\r\n                        return false;\r\n                    return true;\r\n                },\r\n                check(Evt, player) {\r\n                    let target = Evt.player;\r\n                    if (get.attitude(player, target) >= 0) {\r\n                        if ((player.hujia || player.getDamagedHp() >= 2) && player.hasSkillTag('xuefeng'))\r\n                            return true;\r\n                        if (get.attitude(player, target) > 0 && target.hujia && target.hasSkillTag('xuefeng'))\r\n                            return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.num = (player.getDamagedHp()) || 1;\r\n                    Evt.target = trigger.player;\r\n                    player.draw(Evt.num);\r\n                    game.delayx();\r\n                    'step 1';\r\n                    let list = [];\r\n                    if (Evt.target.countCards('he')) {\r\n                        list.push('你的牌', Evt.target.getCards('he'));\r\n                    }\r\n                    if (player.countCards('h')) {\r\n                        list.add(`${get.translation(player.name)}的牌`);\r\n                        list.push([player.getCards('h'), 'blank']);\r\n                    }\r\n                    if (player.countCards('e')) {\r\n                        list.add(`${get.translation(player.name)}的牌`);\r\n                        list.push(player.getCards('e'));\r\n                    }\r\n                    let chooseButton = Evt.target.chooseButton(Evt.num + 3, true, list);\r\n                    chooseButton.set('target', player);\r\n                    chooseButton.set('num', Evt.num);\r\n                    chooseButton.set('ai', function (button) {\r\n                        let player = _status.event.player, target = _status.event.target;\r\n                        let num = _status.event.num;\r\n                        let ps = [], ts = [];\r\n                        for (let i of ui.selected.buttons) {\r\n                            let card = i.link;\r\n                            if (target.getCards('he').includes(card))\r\n                                ts.push(card);\r\n                            else\r\n                                ps.push(card);\r\n                        }\r\n                        let card = button.link;\r\n                        let owner = get.owner(card), val = get.value(card) || 1;\r\n                        if (get.attitude(player, target) > 0) {\r\n                            if (target.hujia || player.hujia) { }\r\n                            else if (num % 2 == 0) {\r\n                                if (owner == ((ps.length > ts.length) ? target : player))\r\n                                    return 10 - val;\r\n                            }\r\n                        }\r\n                        if (owner == player) {\r\n                            if (target.hujia && target.hasSkillTag('xuefeng')) {\r\n                                if (ps.length > 1)\r\n                                    return 15 - val;\r\n                                return 12 - val;\r\n                            }\r\n                            return 7 - val;\r\n                        }\r\n                        else {\r\n                            if (player.hujia && player.hasSkillTag('xuefeng')) {\r\n                                if (ts.length > 1)\r\n                                    return 16 - val;\r\n                                return 11 - val;\r\n                            }\r\n                            return 5.5 - val;\r\n                        }\r\n                    });\r\n                    chooseButton.set('filterButton', function (button) {\r\n                        let player = _status.event.player;\r\n                        return lib.filter.canBeDiscarded(button.link, player, get.owner(button.link));\r\n                    });\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        let list = result.links, target = Evt.target;\r\n                        Evt.list1 = [];\r\n                        Evt.list2 = [];\r\n                        for (let i of list) {\r\n                            if (get.owner(i) == player) {\r\n                                Evt.list1.push(i);\r\n                            }\r\n                            else {\r\n                                Evt.list2.push(i);\r\n                            }\r\n                            ;\r\n                        }\r\n                        ;\r\n                        if (Evt.list1.length && Evt.list2.length) {\r\n                            target.discard(Evt.list2).delay = false;\r\n                            player.discard(Evt.list1);\r\n                        }\r\n                        else if (Evt.list2.length) {\r\n                            target.discard(Evt.list2);\r\n                        }\r\n                        else\r\n                            player.discard(Evt.list1);\r\n                        let dis = Evt.list1.length - Evt.list2.length;\r\n                        if (dis > 0) {\r\n                            Evt.dis = dis;\r\n                            Evt.more = player;\r\n                            Evt.less = target;\r\n                        }\r\n                        else if (dis < 0) {\r\n                            Evt.dis = -dis;\r\n                            Evt.more = target;\r\n                            Evt.less = player;\r\n                        }\r\n                    }\r\n                    ;\r\n                    'step 3';\r\n                    if (Evt.more) {\r\n                        Evt.less.damage();\r\n                        Evt.more.draw(Evt.dis);\r\n                    }\r\n                },\r\n            },\r\n            xiejiang: {\r\n                trigger: { player: ['drawEnd', 'changeHujiaEnd'] },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'draw')\r\n                        return Evt.num >= 2;\r\n                    else\r\n                        return Evt.num < 0 && _status.currentPhase;\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    if (trigger.name == 'draw') {\r\n                        player.changeHujia();\r\n                    }\r\n                    else {\r\n                        _status.currentPhase.draw(2);\r\n                    }\r\n                },\r\n                ai: {\r\n                    tag: {\r\n                        xuefeng: 1,\r\n                    }\r\n                }\r\n            },\r\n            lache: {\r\n                trigger: { player: ['recoverAfter', 'discardAfter', 'changeHujiaEnd'] },\r\n                logTarget(Evt, player) {\r\n                    if (Evt.name == 'recover')\r\n                        return _status.currentPhase;\r\n                    return player;\r\n                },\r\n                filter(Evt, player) {\r\n                    var _a;\r\n                    if (Evt.name == 'recover')\r\n                        return (_a = _status.currentPhase) === null || _a === void 0 ? void 0 : _a.isIn();\r\n                    else if (player.hp < player.maxHp) {\r\n                        if (Evt.name == 'discard')\r\n                            return Evt.cards.length >= 2;\r\n                        else\r\n                            return Evt.num < 0;\r\n                    }\r\n                },\r\n                prompt2(Evt, player) {\r\n                    if (Evt.name == 'recover')\r\n                        return '令其摸两张牌';\r\n                    return '回复一点体力';\r\n                },\r\n                check(Evt, player) {\r\n                    if (Evt.name == 'recover')\r\n                        return get.attitude(player, _status.currentPhase) > 0;\r\n                    else\r\n                        return true;\r\n                },\r\n                content() {\r\n                    if (trigger.name == 'recover') {\r\n                        _status.currentPhase.draw(2);\r\n                    }\r\n                    else {\r\n                        if (_status.currentPhase != player)\r\n                            player.draw(Math.abs(trigger.num || trigger.cards.length));\r\n                        player.recover();\r\n                    }\r\n                },\r\n            },\r\n            danfu: {\r\n                trigger: { player: ['phaseJieshuBegin', 'changeHujiaAfter'] },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'phaseJieshu')\r\n                        return !player.getStat('damage');\r\n                    else\r\n                        return Evt.num < 0 && _status.currentPhase;\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    if (trigger.name == 'phaseJieshu') {\r\n                        player.loseHp();\r\n                        player.changeHujia();\r\n                    }\r\n                    else {\r\n                        for (let i = 0; i > trigger.num; i--) {\r\n                            _status.currentPhase.draw();\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    tag: {\r\n                        xuefeng: 1,\r\n                    }\r\n                }\r\n            },\r\n            shuipo: {\r\n                trigger: { player: ['discardAfter', 'changeHujiaEnd', 'useCardAfter'] },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'useCard')\r\n                        return get.type2(Evt.card) == 'trick' && !player.hasSkill('shuipo_used');\r\n                    else if (Evt.name == 'discard')\r\n                        return Evt.cards.length >= 3;\r\n                    else\r\n                        return !player.hujia;\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    if (trigger.name == 'useCard') {\r\n                        player.loseHp();\r\n                        player.chooseToDiscard([1, Infinity], 'he', true, '『水魄』：请弃置任意张牌');\r\n                        player.addTempSkill('shuipo_used', 'phaseNext');\r\n                    }\r\n                    else {\r\n                        player.recover();\r\n                        player.draw();\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    used: {},\r\n                },\r\n                ai: {\r\n                    tag: {\r\n                        xuefeng: 1,\r\n                    }\r\n                }\r\n            },\r\n            ming_pianchao: {},\r\n            pianchao: {\r\n                mod: {\r\n                    aiValue(player, card, num) {\r\n                        if (card.hasGaintag && card.hasGaintag('ming_') && player.hasUseTarget(card))\r\n                            return num / (10 * player.getUseValue(card));\r\n                    },\r\n                },\r\n                trigger: { player: ['loseHpAfter', 'discardEnd'] },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'loseHp')\r\n                        return player.countCards('h', card => !card.hasGaintag('ming_')) >= 2;\r\n                    else {\r\n                        return player.getHistory('lose', evt => {\r\n                            if (evt.getParent() != Evt)\r\n                                return false;\r\n                            for (let i in evt.gaintag_map) {\r\n                                if (evt.gaintag_map[i].includes('ming_'))\r\n                                    return true;\r\n                            }\r\n                            return false;\r\n                        }).length > 0;\r\n                    }\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    if (trigger.name == 'loseHp') {\r\n                        player.chooseCard('h', `###${get.prompt('pianchao')}###亮出两张手牌并获得1点护甲`, 2, card => !card.hasGaintag('ming_'));\r\n                    }\r\n                    else {\r\n                        Evt.cards = trigger.cards.filter(card => player.getHistory('lose', evt => {\r\n                            if (evt.getParent() != trigger)\r\n                                return false;\r\n                            if (evt.gaintag_map[card.cardid] && evt.gaintag_map[card.cardid].includes('ming_'))\r\n                                return true;\r\n                            return false;\r\n                        }).length > 0);\r\n                        let next = player.chooseCardButton(1, `###${get.prompt('pianchao')}###使用其中一张牌`, Evt.cards);\r\n                        next.set('filterButton', function (button) {\r\n                            let player = _status.event.player;\r\n                            return player.hasUseTarget(button.link);\r\n                        });\r\n                        next.set('ai', function (button) {\r\n                            let player = _status.event.player;\r\n                            return player.getUseValue(button.link);\r\n                        });\r\n                    }\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        if (trigger.name == 'loseHp') {\r\n                            player.logSkill('pianchao');\r\n                            player.addGaintag(result.cards, 'ming_pianchao');\r\n                            player.changeHujia();\r\n                        }\r\n                        else {\r\n                            player.logSkill('pianchao');\r\n                            player.chooseUseTarget(result.links[0], true, 'nopopup');\r\n                            player.addTempSkill('pianchao_phaseUseBy', 'none');\r\n                        }\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    phaseUseBy: {\r\n                        mark: true,\r\n                        marktext: '片',\r\n                        intro: { content: '于下个额定阶段结束后进行一个额外的出牌阶段' },\r\n                        trigger: { global: 'phaseNext' },\r\n                        forced: true,\r\n                        content() {\r\n                            player.removeSkill('pianchao_phaseUseBy');\r\n                            player.phaseUse();\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            xyshixi: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filterTarget: true,\r\n                content() {\r\n                    'step 0';\r\n                    target.damage();\r\n                    'step 1';\r\n                    target.recover();\r\n                },\r\n                ai: {\r\n                    tag: {\r\n                        xuefeng: 1,\r\n                    }\r\n                }\r\n            },\r\n            wenxin: {\r\n                mod: {\r\n                    aiValue(player, card, num) {\r\n                        if (card.hasGaintag && card.hasGaintag('ming_') && player.hasUseTarget(card))\r\n                            return num / (10 * player.getUseValue(card));\r\n                    },\r\n                },\r\n                trigger: { player: 'phaseJieshuEnd' },\r\n                filter(Evt, player) {\r\n                    return game.hasPlayer(cur => cur.hasHistory('recover', evt => evt.player == cur && evt.result));\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.targets = game.filterPlayer(cur => cur.hasHistory('recover', evt => evt.player == cur && evt.result));\r\n                    game.asyncDraw(Evt.targets);\r\n                },\r\n                subSkill: {\r\n                    phaseUseBy: {\r\n                        mark: true,\r\n                        marktext: '片',\r\n                        intro: { content: '于下个额定阶段结束后进行一个额外的出牌阶段' },\r\n                        trigger: { global: 'phaseNext' },\r\n                        forced: true,\r\n                        content() {\r\n                            player.removeSkill('pianchao_phaseUseBy');\r\n                            player.phaseUse();\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            yankui: {\r\n                trigger: { global: 'phaseZhunbei' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return player != Evt.player && player.countCards('he', card => !player.storage.yankui_mark\r\n                        || !player.storage.yankui_mark.includes(get.type2(card))) > 1 && Evt.player.countGainableCards(player, 'h');\r\n                },\r\n                check(Evt, player) {\r\n                    if (player.hasUnknown(4))\r\n                        return false;\r\n                    return true;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.player;\r\n                    game.broadcastAll(function (player) {\r\n                        player.chooseToDiscard(get.prompt2('yankui'), 'he', card => !player.storage.yankui_mark\r\n                            || !player.storage.yankui_mark.includes(get.type2(card))).ai = card => {\r\n                            let player = _status.event.player, target = _status.event.getTrigger().player, use = 0;\r\n                            if (player.hasUseTarget(card))\r\n                                use += player.getUseValue(card) * 2;\r\n                            if (get.attitude(player, target) < 1)\r\n                                return 6 - get.useful(card) + use;\r\n                            return 0;\r\n                        };\r\n                    }, player);\r\n                    'step 1';\r\n                    if (result.cards && result.cards.length) {\r\n                        player.logSkill(Evt.target);\r\n                        if (!player.storage.yankui_mark)\r\n                            player.storage.yankui_mark = [];\r\n                        for (let i = 0; i < result.cards.length; i++) {\r\n                            player.storage.yankui_mark.add(get.type2(result.cards[0]));\r\n                        }\r\n                        let next = player.gainPlayerCard(Evt.target, 'h', true, 'visibleMove');\r\n                        next.set('visible', true);\r\n                        next.set('ai', function (button) {\r\n                            let player = _status.event.player, target = _status.event.getTrigger().player;\r\n                            if (get.attitude(player, target) > 0) {\r\n                                if (target.countCards('h', { name: 'sha' }) > 1 && get.type(button.link) != 'basic' && get.name(button.link) != 'sha')\r\n                                    return 6 + get.value(button.link);\r\n                                if (target.countCards('j') && target.needsToDiscard() && get.type(button.link) != 'basic')\r\n                                    return 5 + get.value(button.link);\r\n                            }\r\n                            return get.value(button.link);\r\n                        });\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool && result.links) {\r\n                        player.addTempSkill('yankui_mark', 'roundStart');\r\n                        Evt.card = result.links[0];\r\n                        if (get.type(Evt.card) != 'basic') {\r\n                            Evt.target.skip('phaseJudge');\r\n                            Evt.target.skip('phaseDiscard');\r\n                            Evt.target.addTempSkill('yankui1');\r\n                        }\r\n                        else {\r\n                            Evt.target.addTempSkill('yankui2');\r\n                        }\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    mark: {\r\n                        mark: true,\r\n                        marktext: '魇',\r\n                        intro: {\r\n                            name: '魇窥',\r\n                            content(storage, player) {\r\n                                let str = '<ul style=\"padding-top:0;margin-top:0\"><p>本轮次已弃置的牌类型</p>';\r\n                                for (let i = 0; i < storage.length; i++) {\r\n                                    str += '<li>' + get.translation(storage[i]);\r\n                                }\r\n                                str += '</ul>';\r\n                                return str;\r\n                            },\r\n                        },\r\n                        onremove(player, skill) {\r\n                            player.unmarkSkill(skill);\r\n                            delete player.storage[skill];\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            yankui1: {\r\n                mark: true,\r\n                marktext: '魇',\r\n                intro: { name: '魇窥 - 非基本牌', content: '跳过本回合下一个判定阶段和弃牌阶段' },\r\n            },\r\n            yankui2: {\r\n                mod: {\r\n                    cardUsable(card, player, num) {\r\n                        if (card.name == 'sha')\r\n                            return num + 1;\r\n                    },\r\n                },\r\n                mark: true,\r\n                marktext: '魇',\r\n                intro: { name: '魇窥 - 基本牌', content: '本回合内可以多使用一张【杀】' },\r\n            },\r\n            huiyuan: {\r\n                audio: 4,\r\n                trigger: { global: 'useCard1' },\r\n                filter(Evt, player) {\r\n                    return player.countCards('h') < Evt.player.countCards('h') && get.type(Evt.card) == 'basic';\r\n                },\r\n                usable: 1,\r\n                check(Evt, player) {\r\n                    return get.attitude(player, Evt.player) > 0;\r\n                },\r\n                content() {\r\n                    game.asyncDraw([player, trigger.player]);\r\n                },\r\n            },\r\n            suoshi: {\r\n                audio: 2,\r\n                trigger: { player: 'damageBegin3' },\r\n                filter(Evt, player) {\r\n                    return player.countCards('h');\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    let list = game.filterPlayer(cur => {\r\n                        return cur.isMaxHandcard();\r\n                    });\r\n                    player.chooseCardTarget({\r\n                        prompt: get.prompt2('suoshi'),\r\n                        position: 'h',\r\n                        filterTarget(card, player, target) {\r\n                            return player != target && target.isMaxHandcard();\r\n                        },\r\n                        filterCard: lib.filter.cardDiscardable,\r\n                        ai1(card) {\r\n                            if (_status.event.goon)\r\n                                return 6 - get.value(card);\r\n                            return 0;\r\n                        },\r\n                        ai2(target) {\r\n                            let player = _status.event.player;\r\n                            return get.attitude(player, target);\r\n                        },\r\n                        goon: !player.isMinHandcard() && (player.countCards('h') < 3 && get.attitude(player, list[0]) > 0),\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        Evt.cards = result.cards.slice(0);\r\n                        Evt.target = result.targets[0];\r\n                        player.logSkill('suoshi', Evt.target);\r\n                        player.give(Evt.cards, Evt.target);\r\n                    }\r\n                },\r\n                group: ['suoshi_addDam'],\r\n                subSkill: {\r\n                    addDam: {\r\n                        trigger: { player: 'damageBegin' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return !player.isMinHandcard();\r\n                        },\r\n                        content() {\r\n                            trigger.num++;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            paryi: {\r\n                marktext: \"P\",\r\n                locked: true,\r\n                intro: {\r\n                    name: '帕里家常',\r\n                    content(storage, player, skill) {\r\n                        return `已经历了${storage}次『天扉』`;\r\n                    },\r\n                },\r\n            },\r\n            tiantang: {\r\n                audio: 2,\r\n                priority: 987,\r\n                global: 'paryi',\r\n                trigger: {\r\n                    global: 'phaseBegin'\r\n                },\r\n                filter(Evt, player) {\r\n                    if (player.countCards('he') < (Evt.player.storage.paryi || 1))\r\n                        return false;\r\n                    return true;\r\n                },\r\n                check(Evt, player) {\r\n                    if (player.storage.haoren !== true)\r\n                        return (Evt.player.storage.paryi || 1) <= 2 && get.attitude(player, Evt.player) < 1 && !Evt.player.hasJudge('lebu');\r\n                    return Evt.player.needsToDiscard() && get.attitude(player, Evt.player) < 0 || Evt.player.countCards('h') == 0 && Evt.player.getHandcardLimit() >= 3 && get.attitude(player, Evt.player) >= 0;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    let num = trigger.player.storage.paryi || 1;\r\n                    if (player.storage.haoren === true)\r\n                        player.chooseCard(num, 'he', `『天扉』：重铸${get.cnNumber(num)}张牌`).ai = get.unuseful3;\r\n                    else\r\n                        player.chooseToDiscard(num, 'he', `『天扉』：弃置${get.cnNumber(num)}张牌`).ai = get.unuseful2;\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.target = trigger.player;\r\n                        if (player.storage.haoren !== true) {\r\n                            player.addMark('haoren');\r\n                        }\r\n                        else {\r\n                            player.lose(result.cards, ui.discardPile).set('visible', true);\r\n                            player.$throw(result.cards, 1000);\r\n                            game.log(player, '将', result.cards, '置入了弃牌堆');\r\n                            player.draw(result.cards.length);\r\n                        }\r\n                        let target = Evt.target;\r\n                        if (target.storage.paryi) {\r\n                            target.storage.paryi++;\r\n                        }\r\n                        else {\r\n                            target.storage.paryi = 1;\r\n                        }\r\n                        target.markSkill('paryi');\r\n                        Evt.videoId = lib.status.videoId++;\r\n                        let suitlist = [\r\n                            ['heart', '', 'heart', 'heart'],\r\n                            ['diamond', '', 'diamond', 'diamond'],\r\n                            ['club', '', 'club', 'club'],\r\n                            ['spade', '', 'spade', 'spade']\r\n                        ];\r\n                        game.broadcastAll(function (id, suitlist) {\r\n                            let dialog = ui.create.dialog('『天扉』声明');\r\n                            dialog.addText('花色');\r\n                            dialog.add([suitlist, 'vcard']);\r\n                            dialog.videoId = id;\r\n                        }, Evt.videoId, suitlist);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    player.chooseButton().set('dialog', Evt.videoId);\r\n                    'step 3';\r\n                    game.broadcastAll('closeDialog', Evt.videoId);\r\n                    if (result.bool) {\r\n                        Evt.tiantang = result.links[0][2];\r\n                        player.chat(get.translation(Evt.tiantang));\r\n                        game.log(player, '声明了', Evt.tiantang);\r\n                        let list = [`观看${get.translation(Evt.target)}的手牌${player.awakenedSkills.includes('haoren') ? '并重铸' : '并弃置'}其一张${get.translation(Evt.tiantang)}牌，令其执行一个额外的出牌阶段`,\r\n                            `令${get.translation(Evt.target)}摸两张牌，然后其只能使用${get.translation(Evt.tiantang)}的牌直到回合结束`];\r\n                        player.chooseControl('dialogcontrol', list).set('ai', function () {\r\n                            return 1;\r\n                        }).set('prompt', '『天扉』：选择一项');\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 4';\r\n                    switch (result.index) {\r\n                        case 0: {\r\n                            let next = player[player.storage.haoren === true ? 'choosePlayerCard' : 'discardPlayerCard'](`『天扉』：${player.storage.haoren === true ? '重铸' : '弃置'}一张声明花色的牌`, Evt.target, 'he').set('visible', true).set('complexSelect', true);\r\n                            next.set('filterButton', function (button) {\r\n                                return get.suit(button.link) == _status.event.suit;\r\n                            });\r\n                            next.set('suit', Evt.tiantang);\r\n                            if (Evt.target.countCards('he', card => get.suit(card) == Evt.tiantang)) {\r\n                                next.set('forced', true);\r\n                            }\r\n                            break;\r\n                        }\r\n                        case 1: {\r\n                            Evt.target.draw(2, player);\r\n                            Evt.target.addTempSkill('tiantangzhifei_xianzhi', 'phaseEnd');\r\n                            Evt.target.storage.tiantangzhifei_xianzhi = Evt.tiantang;\r\n                            Evt.target.syncStorage('tiantangzhifei_xianzhi');\r\n                            Evt.finish();\r\n                            break;\r\n                        }\r\n                    }\r\n                    'step 5';\r\n                    if (player.storage.haoren === true && result.bool && result.cards) {\r\n                        Evt.target.lose(result.cards, ui.discardPile).set('visible', true);\r\n                        Evt.target.$throw(result.cards, 1000);\r\n                        game.log(Evt.target, '将', result.cards, '置入了弃牌堆');\r\n                        Evt.target.draw(result.cards.length);\r\n                    }\r\n                    if (player.storage.haoren === true) {\r\n                        Evt.target.addTempSkill('tiantangzhifei_yisheng', 'phaseUseEnd');\r\n                    }\r\n                    Evt.target.phaseUse();\r\n                },\r\n            },\r\n            tiantangzhifei: {\r\n                subSkill: {\r\n                    yisheng: {\r\n                        mark: true,\r\n                        marktext: \"流\",\r\n                        intro: {\r\n                            name: '回流',\r\n                            content(storage, player, skill) {\r\n                                return '暂时获得技能『引流』';\r\n                            },\r\n                        },\r\n                        inherit: 'yinliu',\r\n                    },\r\n                    xianzhi: {\r\n                        mark: true,\r\n                        marktext: \"断\",\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '断臂',\r\n                            content(storage, player, skill) {\r\n                                return '只能使用花色为' + get.translation(storage) + '的牌';\r\n                            },\r\n                        },\r\n                        onremove: true,\r\n                        mod: {\r\n                            cardEnabled(card, player, now) {\r\n                                if (get.suit(card) != player.storage.tiantangzhifei_xianzhi)\r\n                                    return false;\r\n                            },\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            haoren: {\r\n                audio: true,\r\n                skillAnimation: true,\r\n                animationStr: '好人一生',\r\n                unique: true,\r\n                juexingji: true,\r\n                forced: true,\r\n                init(player) {\r\n                    player.storage.haoren = 0;\r\n                },\r\n                marktext: \"井\",\r\n                intro: {\r\n                    name: '挖井人',\r\n                    content(storage, player, skill) {\r\n                        return `已发动了${storage}次『天扉』`;\r\n                    },\r\n                },\r\n                trigger: { player: 'tiantangAfter' },\r\n                filter(Evt, player) {\r\n                    return player.storage.haoren > game.countPlayer();\r\n                },\r\n                content() {\r\n                    player.loseMaxHp();\r\n                    player.storage.haoren = true;\r\n                    player.awakenSkill('haoren');\r\n                    player.unmarkSkill('haoren');\r\n                },\r\n                ai: {\r\n                    combo: 'tiantang',\r\n                },\r\n            },\r\n            shengya: {\r\n                audio: 4,\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = true;\r\n                },\r\n                marktext: \"卒\",\r\n                intro: {\r\n                    name: '职业生涯结束',\r\n                    content(storage, player, skill) {\r\n                        return '失去『职业生涯』直到下个回合开始';\r\n                    },\r\n                },\r\n                trigger: { player: 'useCardAfter' },\r\n                priority: 996,\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return player.storage.shengya && player.isPhaseUsing() && get.color(Evt.card) == 'red';\r\n                },\r\n                content() {\r\n                    Evt.cards = get.cards(1);\r\n                    game.cardsGotoOrdering(Evt.cards);\r\n                    player.showCards(Evt.cards);\r\n                    game.delay(1);\r\n                    player.gain(Evt.cards);\r\n                    if (get.suit(Evt.cards[0]) == 'club') {\r\n                        player.loseHp();\r\n                        player.storage.shengya = false;\r\n                        player.markSkill('shengya');\r\n                    }\r\n                },\r\n                group: 'shengya_init',\r\n                subSkill: {\r\n                    init: {\r\n                        trigger: { player: 'phaseBefore' },\r\n                        silent: true,\r\n                        forced: true,\r\n                        priority: 996,\r\n                        content() {\r\n                            if (!player.storage.shengya) {\r\n                                player.storage.shengya = true;\r\n                                player.unmarkSkill('shengya');\r\n                            }\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            liangshan: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                marktext: \"汉\",\r\n                intro: {\r\n                    name: '好汉歌',\r\n                    content: 'cards',\r\n                    onunmark: 'throw',\r\n                },\r\n                cardAround: true,\r\n                trigger: { global: 'drawEnd' },\r\n                priority: 996,\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && player == _status.currentPhase && Evt.player.getHistory('gain').length == 1;\r\n                },\r\n                content() {\r\n                    let card = game.cardsGotoSpecial(get.cards()).cards[0];\r\n                    game.log(player, '将', card, '置于武将牌上');\r\n                    player.storage.liangshan.push(card);\r\n                    player.$draw(card);\r\n                    game.delay();\r\n                    player.markSkill('liangshan');\r\n                },\r\n                group: ['liangshan_use', 'liangshan_save'],\r\n                subSkill: {\r\n                    use: {\r\n                        trigger: { global: 'phaseBegin' },\r\n                        priority: 996,\r\n                        check(Evt, player) {\r\n                            if (player.hasUnknown(1))\r\n                                return false;\r\n                            return get.attitude(player, Evt.player) > 0;\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return player.storage.liangshan.length;\r\n                        },\r\n                        prompt2: '一名角色回合开始时，你可以交给其一张你武将牌上的牌，视为其使用了一张【酒】。',\r\n                        content() {\r\n                            'step 0';\r\n                            player.chooseCardButton('交给其一张你武将牌上的牌', 1, player.storage.liangshan);\r\n                            'step 1';\r\n                            if (result.bool) {\r\n                                let card = result.links;\r\n                                player.$give(card, trigger.player, false);\r\n                                game.log(player, '将', card, '交给了', trigger.player);\r\n                                trigger.player.gain(card);\r\n                                trigger.player.chooseUseTarget({ name: 'jiu' }, true, 'noTargetDelay', 'nodelayx');\r\n                                player.storage.liangshan.remove(card);\r\n                                player.markSkill('liangshan');\r\n                            }\r\n                        }\r\n                    },\r\n                    save: {\r\n                        trigger: { global: 'dying' },\r\n                        priority: 996,\r\n                        check(Evt, player) {\r\n                            return get.attitude(player, Evt.player) > 0;\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return Evt.player.hp <= 0 && player.storage.liangshan.length;\r\n                        },\r\n                        prompt2: '一名角色濒死时，你可以交给其一张你武将牌上的牌，视为其使用了一张【酒】。',\r\n                        content() {\r\n                            'step 0';\r\n                            player.chooseCardButton('交给其一张你武将牌上的一张牌', 1, player.storage.liangshan);\r\n                            'step 1';\r\n                            if (result.bool) {\r\n                                let card = result.links;\r\n                                player.$give(card, trigger.player, false);\r\n                                game.log(player, '将', card, '交给了', trigger.player);\r\n                                trigger.player.gain(card);\r\n                                trigger.player.chooseUseTarget({ name: 'jiu' }, true, 'noTargetDelay', 'nodelayx');\r\n                                player.storage.liangshan.remove(card);\r\n                                player.markSkill('liangshan');\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            chongshi: {\r\n                trigger: { player: 'shaBegin' },\r\n                priority: 996,\r\n                frequent: true,\r\n                content() {\r\n                    game.asyncDraw([player, trigger.target]);\r\n                }\r\n            },\r\n            guanzhai: {\r\n                audio: 5,\r\n                trigger: { global: 'phaseEnd' },\r\n                priority: 997,\r\n                prompt2(Evt, player) {\r\n                    let target = Evt.player;\r\n                    return `可以观看其手牌，并获得其中至多${target.hasSkill('zhai') ? target.countMark('zhai') + 1 : 1}张牌`;\r\n                },\r\n                logTarget: 'player',\r\n                filter(Evt, player) {\r\n                    let num = Evt.player.countUsed(null, true);\r\n                    return Evt.player != player && Evt.player.countCards('h') && num < (Evt.player.hasSkill('zhai') ? Evt.player.countMark('zhai') + 2 : 2);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    let str = `###『观宅』###获得其中至多${trigger.player.hasSkill('zhai') ? trigger.player.countMark('zhai') + 1 : 1}张牌`;\r\n                    player.choosePlayerCard(trigger.player, [1, (trigger.player.hasSkill('zhai') ? trigger.player.countMark('zhai') + 1 : 1)], 'h').set('visible', true).set('prompt', str);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.logSkill('guanzhai', trigger.player, true, true, false);\r\n                        player.gain(result.cards, trigger.player, 'giveAuto');\r\n                    }\r\n                },\r\n            },\r\n            zhai: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = 0;\r\n                },\r\n                marktext: '宅',\r\n                intro: {\r\n                    name: '直往欲女',\r\n                    name2: '观宅',\r\n                    content(storage, player, skill) {\r\n                        return `下个回合中，『观宅』（）内的数值+${storage}。`;\r\n                    },\r\n                },\r\n                mark: true,\r\n                onremove: true,\r\n            },\r\n            zhishu: {\r\n                audio: 3,\r\n                trigger: { player: ['phaseUseBegin', 'changeHp'] },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h');\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    let next = player.chooseCardTarget().set('prompt', get.prompt2('zhishu'));\r\n                    next.set('filterTarget', function (card, player, target) {\r\n                        return target != player;\r\n                    });\r\n                    next.set('ai2', function (target) {\r\n                        let player = _status.event.player;\r\n                        return 7 - get.attitude(player, target);\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.target = result.targets[0];\r\n                        player.logSkill('zhishu', Evt.target);\r\n                        player.showCards(result.cards, '『直抒』展示手牌');\r\n                        game.delayx();\r\n                        Evt.target.chooseCard('he', `是否交给${get.translation(player)}一张花色为${get.translation(get.suit(result.cards[0]))}的牌？`, function (card, player) {\r\n                            return get.suit(card) == _status.event.suit;\r\n                        }).set('suit', get.suit(result.cards[0]));\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        player.gain(result.cards[0], Evt.target, 'giveAuto');\r\n                    }\r\n                    else {\r\n                        Evt.target.addTempSkill('zhai', { player: 'phaseAfter' });\r\n                        Evt.target.addMark('zhai', 1);\r\n                        game.log(Evt.target, '拒绝交给', player, '相同花色的牌');\r\n                    }\r\n                },\r\n                ai: {\r\n                    combo: 'guanzhai',\r\n                },\r\n            },\r\n            yuxia: {\r\n                audio: 4,\r\n                hiddenCard(player, name) {\r\n                    if (!lib.skill.yuxia.filter(false, player))\r\n                        return false;\r\n                    let list = get.inpile('trick');\r\n                    for (let i = 0; i < list.length; i++) {\r\n                        if (list[i] == name)\r\n                            return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                enable: 'chooseToUse',\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') >= 3;\r\n                },\r\n                chooseButton: {\r\n                    dialog(Evt, player) {\r\n                        let list = get.inpile('trick');\r\n                        for (let i = 0; i < list.length; i++) {\r\n                            list[i] = ['锦囊', '', list[i]];\r\n                        }\r\n                        return ui.create.dialog('『玉匣』', [list, 'vcard']);\r\n                    },\r\n                    filter(button, player) {\r\n                        return _status.event.getParent().filterCard({ name: button.link[2], nature: button.link[3] }, player, _status.event.getParent());\r\n                    },\r\n                    check(button) {\r\n                        let player = _status.event.player;\r\n                        if (player.countCards('h', button.link[2]) > 0)\r\n                            return 0;\r\n                        if (['wugu', 'jingluo'].includes(button.link[2]))\r\n                            return 0;\r\n                        let effect = player.getUseValue(button.link[2]);\r\n                        if (effect > 0)\r\n                            return effect;\r\n                        return 0;\r\n                    },\r\n                    backup(links, player) {\r\n                        return {\r\n                            audio: 'yuxia',\r\n                            filterCard(card) {\r\n                                return true;\r\n                            },\r\n                            selectCard: 3,\r\n                            forceAuto() {\r\n                                return ui.selected.cards.length == 3;\r\n                            },\r\n                            popname: true,\r\n                            check(card) {\r\n                                return 7 - get.value(card);\r\n                            },\r\n                            position: 'hes',\r\n                            viewAs: { name: links[0][2], nature: links[0][3] },\r\n                        };\r\n                    },\r\n                    prompt(links, player) {\r\n                        return `###『玉匣』###将三张牌当做【${get.translation(links[0][3]) || ''}${get.translation(links[0][2])}】使用`;\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 6,\r\n                    result: {\r\n                        player(player) {\r\n                            let players = game.filterPlayer();\r\n                            for (let i = 0; i < players.length; i++) {\r\n                                if (players[i] != player && get.attitude(player, players[i]) > 0) {\r\n                                    return 0.5;\r\n                                }\r\n                            }\r\n                            return 0;\r\n                        }\r\n                    },\r\n                },\r\n                group: 'yuxia_after',\r\n                subSkill: {\r\n                    after: {\r\n                        trigger: { player: 'useCardEnd' },\r\n                        priority: 66,\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            return Evt.cards.length == 3 && Evt.skill == 'yuxia_backup' && Evt.cards.filterInD().length;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            Evt.cards = trigger.cards.filterInD();\r\n                            player.chooseCardButton([0, 3], true, Evt.cards, '『玉匣』：可以按顺序将卡牌置于牌堆顶（先选择的在上）').set('ai', function (button) {\r\n                                let player = _status.event.player;\r\n                                let now = _status.currentPhase;\r\n                                let next = now.getNext();\r\n                                let att = get.attitude(player, next);\r\n                                let card = button.link;\r\n                                let judge = next.getCards('j')[ui.selected.buttons.length];\r\n                                if (judge) {\r\n                                    return get.judge(judge)(card) * att;\r\n                                }\r\n                                return next.getUseValue(card) * att;\r\n                            });\r\n                            'step 1';\r\n                            if (result.bool && result.links) {\r\n                                let list = result.links.slice(0);\r\n                                if (list.length) {\r\n                                    Evt.cards.removeArray(list);\r\n                                }\r\n                                while (list.length) {\r\n                                    ui.cardPile.insertBefore(list.pop(), ui.cardPile.firstChild);\r\n                                }\r\n                                game.log(player, '将牌放在牌堆顶');\r\n                                if (Evt.cards.length) {\r\n                                    game.cardsDiscard(Evt.cards);\r\n                                    game.log(Evt.cards, '进入了弃牌堆');\r\n                                }\r\n                            }\r\n                            else {\r\n                                game.cardsDiscard(Evt.cards);\r\n                                game.log(Evt.cards, '进入了弃牌堆');\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            lianjue: {\r\n                init(player, skill) {\r\n                    player.storage[skill] = [];\r\n                },\r\n                marktext: '崛',\r\n                intro: {\r\n                    content: 'cards',\r\n                    name: '以『连崛』使用过的锦囊牌',\r\n                },\r\n                trigger: { player: 'phaseEnd' },\r\n                priority: 66,\r\n                frequent: true,\r\n                prompt2: '你可以选择一项：令至多三名角色各摸一张牌；或视为使用一张未以此法使用过的通常锦囊牌。',\r\n                filter(Evt, player) {\r\n                    return (Math.abs(player.storage.lianjue_start - player.countCards('h')) % 3 == 0);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.chooseControlList(['令至多三名角色各摸一张牌', '视为使用一张未以此使用过的通常锦囊牌'], function () {\r\n                        return 1;\r\n                    });\r\n                    'step 1';\r\n                    switch (result.index) {\r\n                        case 0: {\r\n                            player.chooseTarget([1, 3], '令至多三名角色各摸一张牌').set('ai', function (target) {\r\n                                let att = get.attitude(_status.event.player, target);\r\n                                if (att > 1) {\r\n                                    return att;\r\n                                }\r\n                                return 0;\r\n                            });\r\n                            Evt.goto(2);\r\n                            break;\r\n                        }\r\n                        case 1: {\r\n                            Evt.videoId = lib.status.videoId++;\r\n                            let list = [];\r\n                            for (let i = 0; i < lib.inpile.length; i++) {\r\n                                let name = lib.inpile[i];\r\n                                let reapeat = 0;\r\n                                if (player.storage.lianjue.length) {\r\n                                    player.storage.lianjue.forEach(function (his) {\r\n                                        if (get.name(his) == name)\r\n                                            reapeat++;\r\n                                    });\r\n                                }\r\n                                if (reapeat || name == 'wuxie' || name == 'jinchan')\r\n                                    continue;\r\n                                else if (get.type(name) == 'trick')\r\n                                    list.push(['锦囊', '', name]);\r\n                            }\r\n                            game.broadcastAll(function (id, list) {\r\n                                let dialog = ui.create.dialog('使用一张未以此使用过的通常锦囊牌', [list, 'vcard']);\r\n                                dialog.videoId = id;\r\n                            }, Evt.videoId, list);\r\n                            Evt.goto(3);\r\n                            break;\r\n                        }\r\n                    }\r\n                    'step 2';\r\n                    if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        game.asyncDraw(result.targets);\r\n                    }\r\n                    Evt.finish();\r\n                    'step 3';\r\n                    let next = player.chooseButton(1);\r\n                    next.set('dialog', Evt.videoId);\r\n                    next.set('ai', function (button) {\r\n                        return player.getUseValue({ name: button.link[2], isCard: true });\r\n                    });\r\n                    'step 4';\r\n                    game.broadcastAll('closeDialog', Evt.videoId);\r\n                    if (result.bool) {\r\n                        let card = result.links[0];\r\n                        player.chooseUseTarget({ name: card[2] }, true);\r\n                        player.storage.lianjue.add(game.createCard(card[2]));\r\n                        player.syncStorage('lianjue');\r\n                        player.markSkill('lianjue');\r\n                    }\r\n                },\r\n                group: ['lianjue_start'],\r\n                subSkill: {\r\n                    start: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = 0;\r\n                        },\r\n                        trigger: { player: 'phaseBefore' },\r\n                        firstDo: true,\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        priority: 66,\r\n                        content() {\r\n                            player.storage.lianjue_start = player.countCards('h');\r\n                        },\r\n                    },\r\n                },\r\n                mod: {\r\n                    aiOrder(player, card, num) {\r\n                        if (typeof card == 'object' && player == _status.currentPhase && !player.needsToDiscard() && Math.abs(player.storage.lianjue_start - player.countCards('h')) % 3 == 0) {\r\n                            return num - 10;\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            changxiang: {\r\n                zhuSkill: true,\r\n                trigger: { global: 'dying' },\r\n                priority: 66,\r\n                filter(Evt, player) {\r\n                    if (!player.hasZhuSkill('changxiang'))\r\n                        return false;\r\n                    return Evt.player.hp <= 0 && Evt.player != player && Evt.player.group == player.group && player.countCards('he') >= player.hp;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseToDiscard(player.hp);\r\n                    'step 1';\r\n                    if (result.bool)\r\n                        player.useCard({ name: 'tao' }, trigger.player);\r\n                }\r\n            },\r\n            xhhuanshi: {\r\n                mark: true,\r\n                locked: true,\r\n                intro: {\r\n                    name: '幻士',\r\n                    content: 'cards',\r\n                    onunmark: 'throw',\r\n                },\r\n                cardAround: true,\r\n            },\r\n            huange: {\r\n                trigger: { global: 'phaseBegin' },\r\n                round: 1,\r\n                priority: 996,\r\n                filter(Evt, player) {\r\n                    return game.countPlayer(cur => cur.hp > 0 && cur.hp !== Infinity);\r\n                },\r\n                check(Evt, player) {\r\n                    if (Evt.player != player && get.attitude(player, Evt.player) < 0 && Evt.player.inRange(player))\r\n                        return true;\r\n                    return Evt.player == player && game.roundNumber > 1 && player.hasUseTarget('sha') && !player.needsToDiscard();\r\n                },\r\n                popup: false,\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    let next = player.chooseTarget('###『幻歌』###选择一名角色，摸取其体力值的牌', true, function (card, player, target) {\r\n                        return target.hp > 0 && target.hp !== Infinity;\r\n                    });\r\n                    next.set('ai', function (target) {\r\n                        let num = target.hp;\r\n                        if (player.storage.qishi === true)\r\n                            num += target.hp;\r\n                        if (player.inRange(target))\r\n                            return num - get.attitude(player, target);\r\n                        else\r\n                            return num - (get.attitude(player, target) / 2);\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        player.logSkill('huange', result.targets);\r\n                        player.draw(result.targets[0].hp);\r\n                        player.storage.huange_disc = result.targets[0];\r\n                        player.markSkill('huange_disc');\r\n                        player.addTempSkill('huange_disc');\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    disc: {\r\n                        mark: 'character',\r\n                        intro: {\r\n                            name: '幻歌',\r\n                            content: '回合结束时弃置$体力值的牌',\r\n                        },\r\n                        trigger: { global: 'phaseEnd' },\r\n                        priority: 996,\r\n                        onremove: true,\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return player.countDiscardableCards(player, 'he');\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            if (player.storage.huange_disc.isIn() && player.countCards('he')) {\r\n                                let prompt2 = '';\r\n                                if (player.storage.qishi === true)\r\n                                    prompt2 += '将' + get.cnNumber(player.storage.huange_disc.hp) + '张牌置于武将牌上';\r\n                                else {\r\n                                    prompt2 += '弃置' + get.cnNumber(player.storage.huange_disc.hp) + '张牌';\r\n                                }\r\n                                player.chooseCard('he', `###『幻歌』###${prompt2}`, player.storage.huange_disc.hp, true, lib.filter.cardDiscardable);\r\n                            }\r\n                            else {\r\n                                Evt.goto(2);\r\n                            }\r\n                            'step 1';\r\n                            if (result.bool) {\r\n                                if (player.storage.qishi === true) {\r\n                                    Evt.cards = result.cards;\r\n                                    player.lose(result.cards, ui.special, 'toStorage');\r\n                                    player.$give(Evt.cards, player, false);\r\n                                    player.markAuto('xhhuanshi', Evt.cards);\r\n                                }\r\n                                else {\r\n                                    player.discard(result.cards);\r\n                                }\r\n                            }\r\n                            'step 2';\r\n                            player.unmarkSkill('huange_disc');\r\n                            delete player.storage.huange_disc;\r\n                        },\r\n                    }\r\n                },\r\n            },\r\n            qishi: {\r\n                audio: true,\r\n                skillAnimation: true,\r\n                animationStr: '希望之花',\r\n                unique: true,\r\n                juexingji: true,\r\n                forced: true,\r\n                trigger: { global: 'roundEnd' },\r\n                firstDo: true,\r\n                priority: 996,\r\n                filter(Evt, player) {\r\n                    return player.storage.qishi_date && player.storage.qishi_date.includes(player) && player.storage.qishi_date.length > 1;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.unmarkSkill('qishi_date');\r\n                    player.loseMaxHp();\r\n                    Evt.cards = [];\r\n                    'step 1';\r\n                    let next = player.judge(card => {\r\n                        if (get.color(card) == 'black')\r\n                            return -1.5;\r\n                        return 1.5;\r\n                    });\r\n                    next.set('callback', function () {\r\n                        Evt.getParent().orderingCards.remove(card);\r\n                    });\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        Evt.cards.push(result.card);\r\n                        Evt.goto(1);\r\n                    }\r\n                    else {\r\n                        Evt.cards.push(result.card);\r\n                    }\r\n                    'step 3';\r\n                    for (let i = 0; i < Evt.cards.length; i++) {\r\n                        if (get.position(Evt.cards[i], true) != 'o') {\r\n                            Evt.cards.splice(i, 1);\r\n                            i--;\r\n                        }\r\n                    }\r\n                    if (Evt.cards.length) {\r\n                        player.$gain2(Evt.cards, false);\r\n                        player.markAuto('xhhuanshi', Evt.cards);\r\n                    }\r\n                    'step 4';\r\n                    player.storage.qishi = true;\r\n                    player.awakenSkill('qishi');\r\n                    player.addSkill('xiban');\r\n                },\r\n                derivation: 'xiban',\r\n                group: ['qishi_date', 'qishi_update'],\r\n                subSkill: {\r\n                    date: {\r\n                        mark: true,\r\n                        intro: {\r\n                            name: '奇誓',\r\n                            content(storage, player, skill) {\r\n                                let str = '本轮内';\r\n                                if (storage.includes(player))\r\n                                    str += ' 已受到伤害';\r\n                                if (storage != [player])\r\n                                    str += ' 已造成伤害';\r\n                                return str;\r\n                            },\r\n                            onunmark(storage, player) {\r\n                                if (storage && storage.length) {\r\n                                    storage.length = 0;\r\n                                }\r\n                            },\r\n                        },\r\n                        trigger: { player: 'damageEnd', source: 'damageEnd' },\r\n                        firstDo: true,\r\n                        priority: 996,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            if (player.storage.qishi === true)\r\n                                return false;\r\n                            if (player.storage.qishi_date && player.storage.qishi_date.includes(Evt.player))\r\n                                return false;\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            if (!player.storage.qishi_date)\r\n                                player.storage.qishi_date = [];\r\n                            player.storage.qishi_date.add(trigger.player);\r\n                            player.markSkill('qishi_date');\r\n                        },\r\n                    },\r\n                    update: {\r\n                        trigger: { global: 'roundStart' },\r\n                        lastDo: true,\r\n                        priority: 996,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            if (player.storage.qishi === true)\r\n                                return false;\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            player.unmarkSkill('qishi_date');\r\n                        }\r\n                    },\r\n                },\r\n                ai: {\r\n                    combo: 'huange',\r\n                },\r\n            },\r\n            xiban: {\r\n                trigger: { global: 'phaseEnd' },\r\n                priority: 99,\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && Evt.player.getHistory('sourceDamage').length && player.hp <= player.storage.xhhuanshi.length;\r\n                },\r\n                check(Evt, player) {\r\n                    return player.isDamaged() || get.attitude(player, Evt.player) < 0;\r\n                },\r\n                logTarget(Evt, player) {\r\n                    return Evt.player;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.player;\r\n                    player.chooseCardButton(`###『系绊』###可以弃置${get.cnNumber(player.hp)}张「士」 对${get.translation(Evt.target)}发动技能`, player.hp, player.storage.xhhuanshi);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.cards = result.links.slice(0);\r\n                        player.unmarkAuto('xhhuanshi', Evt.cards);\r\n                        player.$throw(Evt.cards, 1000);\r\n                        game.cardsGotoOrdering(Evt.cards);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    let next = Evt.target.chooseToDiscard('he', Evt.cards.length);\r\n                    if (player.isHealthy()) {\r\n                        next.set('forced', true);\r\n                    }\r\n                    else {\r\n                        next.set('prompt2', `取消则令${get.translation(player)}回复一点体力`);\r\n                    }\r\n                    next.set('source', player);\r\n                    next.set('ai', card => {\r\n                        let source = _status.event.source;\r\n                        let player = _status.event.player;\r\n                        if (source.isDamaged() && get.recoverEffect(source, player, player) >= 0)\r\n                            return -1;\r\n                        return 7 - get.value(card);\r\n                    });\r\n                    'step 3';\r\n                    if (!result.bool) {\r\n                        player.recover(Evt.target);\r\n                    }\r\n                },\r\n                ai: {\r\n                    combo: 'huange',\r\n                },\r\n            },\r\n            yongtuan: {\r\n                audio: true,\r\n                skillAnimation: true,\r\n                animationStr: '一袋米要扛几楼',\r\n                unique: true,\r\n                limited: true,\r\n                zhuSkill: true,\r\n                trigger: { player: 'xibanAfter' },\r\n                priority: 66,\r\n                filter(Evt, player) {\r\n                    if (!player.hasZhuSkill('yongtuan'))\r\n                        return false;\r\n                    return Evt.cards.length;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    let next = player.chooseTarget(true, function (card, player, tar) {\r\n                        return tar.group == _status.event.player.group;\r\n                    });\r\n                    next.set('ai', function (target) {\r\n                        return get.attitude(_status.event.player, target);\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        result.targets[0].gain(trigger.cards);\r\n                        player.storage.yongtuan = true;\r\n                        player.awakenSkill('yongtuan');\r\n                    }\r\n                },\r\n                ai: {\r\n                    combo: 'huange',\r\n                },\r\n            },\r\n            niaoji: {\r\n                audio: true,\r\n                audioname: ['jike'],\r\n                trigger: { source: 'damageEnd', player: 'damageEnd' },\r\n                priority: 99,\r\n                lastDo: true,\r\n                check(Evt, player) {\r\n                    if (Evt.source && Evt.source == player)\r\n                        return get.attitude(player, Evt.player) < 1;\r\n                    return true;\r\n                },\r\n                frequent: true,\r\n                prompt(Evt, player) {\r\n                    if (Evt.source && Evt.source == player)\r\n                        return `对${get.translation(Evt.player)}造成伤害，${get.prompt('niaoji')}`;\r\n                    return '受到来自' + get.translation(Evt.source) + '的伤害，' + get.prompt('niaoji');\r\n                },\r\n                filter(Evt, player) {\r\n                    return Evt.source;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    let func;\r\n                    Evt.target = (player == trigger.source) ? trigger.player : trigger.source;\r\n                    if (!Evt.target || !Evt.target.isIn() || Evt.target.countCards('he') <= 0) {\r\n                        func = function (result) {\r\n                            if (get.suit(result) == 'spade')\r\n                                return 0;\r\n                            if (get.suit(result) == 'heart')\r\n                                return 2;\r\n                            return -1;\r\n                        };\r\n                    }\r\n                    else {\r\n                        func = function (result) {\r\n                            if (get.suit(result) == 'spade')\r\n                                return 2;\r\n                            if (get.suit(result) == 'heart')\r\n                                return 2;\r\n                            return -1;\r\n                        };\r\n                    }\r\n                    player.judge(func);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.num = player.getDamagedHp() + 1;\r\n                        if (result.suit == 'spade') {\r\n                            if ([player.name, player.name1].includes('Yousa')) {\r\n                                let audio = 'niaoji_spade' + Math.ceil(3 * Math.random());\r\n                                game.playAudio('skill', audio);\r\n                                game.broadcast(function (audio) {\r\n                                    game.playAudio('skill', audio);\r\n                                }, audio);\r\n                            }\r\n                            player.discardPlayerCard(`###『鸟肌』###弃置${get.translation(Evt.target)}${get.cnNumber(Evt.num)}张牌`, Evt.target, Evt.num, true, 'he');\r\n                        }\r\n                        else if (result.suit == 'heart') {\r\n                            if ([player.name, player.name1].includes('Yousa')) {\r\n                                let audio = 'niaoji_heart' + Math.ceil(3 * Math.random());\r\n                                game.playAudio('skill', audio);\r\n                                game.broadcast(function (audio) {\r\n                                    game.playAudio('skill', audio);\r\n                                }, audio);\r\n                            }\r\n                            player.draw(Evt.num);\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            ysxiangxing: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h') > 0;\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    if (player.inRange(target))\r\n                        return true;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    let next = player.chooseCardButton('###『翔星』###按顺序将卡牌置于牌堆顶（先选择的在上）', player.getCards('h'), player.countCards('h'), true);\r\n                    next.set('forceAuto', function () {\r\n                        return ui.selected.buttons.length == _status.event.player.countCards('h');\r\n                    });\r\n                    next.set('ai', function (button) {\r\n                        if (get.suit(button.link) == 'heart')\r\n                            return 8 + Math.random();\r\n                        if (get.suit(button.link) == 'spade')\r\n                            return 6 + Math.random();\r\n                        return 4 + Math.random();\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length))\r\n                        Evt.cards = result.links.slice(0);\r\n                    else\r\n                        Evt.finish();\r\n                    game.delay();\r\n                    'step 2';\r\n                    player.lose(Evt.cards, ui.special);\r\n                    'step 3';\r\n                    let cards = Evt.cards;\r\n                    game.log(player, '将' + get.cnNumber(cards.length) + '张牌放在牌堆顶');\r\n                    while (cards.length > 0) {\r\n                        ui.cardPile.insertBefore(cards.pop().fix(), ui.cardPile.firstChild);\r\n                    }\r\n                    game.updateRoundNumber();\r\n                    'step 4';\r\n                    target.damage(player);\r\n                },\r\n                ai: {\r\n                    order(item, player) {\r\n                        if (player.countCards('h', { suit: 'heart' }))\r\n                            return 4;\r\n                        else\r\n                            return 1;\r\n                    },\r\n                    result: {\r\n                        player(player, target) {\r\n                            let num = -player.countCards('h');\r\n                            if (player.countCards('h', { suit: 'heart' }))\r\n                                num += (player.getDamagedHp() + 1);\r\n                            return num;\r\n                        },\r\n                        target(player, target) {\r\n                            if (target.hasSkill('shenyou'))\r\n                                return 0;\r\n                            return get.damageEffect(target, player, target);\r\n                        }\r\n                    },\r\n                    expose: 0.2,\r\n                },\r\n            },\r\n            naiwei: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    if (target.isMinHp() || target.isMaxHp())\r\n                        return true;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    Evt.map = ['recover', 'loseHp'];\r\n                    if (target.isMinHp() && target.isMaxHp()) {\r\n                        player.chooseControl('recover_hp', 'lose_hp', function () {\r\n                            if (_status.event.check)\r\n                                return 0;\r\n                            return 1;\r\n                        }).set('prompt', '令目标执行：').set('check', get.recoverEffect(target, player, player) > 0);\r\n                    }\r\n                    else {\r\n                        Evt.type = target.isMinHp() ? 0 : 1;\r\n                        Evt.goto(2);\r\n                    }\r\n                    'step 1';\r\n                    Evt.type = result.control == 'recover_hp' ? 0 : 1;\r\n                    'step 2';\r\n                    target[Evt.map[Evt.type]]();\r\n                    'step 3';\r\n                    if (Evt.type) {\r\n                        if (game.countPlayer(cur => {\r\n                            return cur.isMinHp;\r\n                        }) < 2)\r\n                            return;\r\n                    }\r\n                    else {\r\n                        if (game.countPlayer(cur => {\r\n                            return cur.isMaxHp;\r\n                        }) < 2)\r\n                            return;\r\n                    }\r\n                    player.chooseTarget(function (card, player, target) {\r\n                        let change = _status.event.change;\r\n                        if (change == 'recover')\r\n                            return target.isMaxHp();\r\n                        return target.isMinHp();\r\n                    }, function (target) {\r\n                        let player = _status.event.player;\r\n                        let change = _status.event.change;\r\n                        if (change == 'recover')\r\n                            return 1 - get.attitude(player, target);\r\n                        return get.recoverEffect(target, player, player);\r\n                    }).set('prompt', '###『奶味天使』###可以执行另一项').set('change', Evt.map[Evt.type]);\r\n                    'step 4';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        player.line(result.targets);\r\n                        result.targets[0][[...Evt.map].reverse()[Evt.type]]();\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 6,\r\n                    result: {\r\n                        target(player, target) {\r\n                            let eff0 = get.recoverEffect(target, player, target);\r\n                            let eff1 = -2;\r\n                            if (target.isMinHp() && target.isMaxHp()) {\r\n                                if (get.attitude(player, target) > 0)\r\n                                    return Math.max(eff0, eff1);\r\n                                return Math.min(eff0, eff1);\r\n                            }\r\n                            if (target.isMinHp())\r\n                                return eff0;\r\n                            return eff1;\r\n                        }\r\n                    },\r\n                    expose: 0.2,\r\n                },\r\n            },\r\n            cishan: {\r\n                trigger: { player: 'phaseDrawBegin1' },\r\n                filter(Evt, player) {\r\n                    return !Evt.numFixed && player.countCards('h') > 0;\r\n                },\r\n                check(Evt, player) {\r\n                    return player.countCards('h') >= 4;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    trigger.changeToZero();\r\n                    'step 1';\r\n                    player.draw(player.countCards('h'));\r\n                    Evt.targets = game.filterPlayer().sortBySeat(player);\r\n                    'step 2';\r\n                    Evt.target = Evt.targets.shift();\r\n                    if (Evt.target.canCompare(player)) {\r\n                        Evt.target.chooseBool(`###是否与${get.translation(player)}拼点？###若赢可以获得${get.translation(player)}的一张牌`).set('ai', function () {\r\n                            if (!_status.event.check)\r\n                                return 0;\r\n                            return 1;\r\n                        }).set('check', get.attitude(Evt.target, player) < 0);\r\n                    }\r\n                    else\r\n                        Evt.goto(5);\r\n                    'step 3';\r\n                    if (result.bool) {\r\n                        Evt.target.line(player);\r\n                        Evt.target.chooseToCompare(player);\r\n                    }\r\n                    else\r\n                        Evt.goto(5);\r\n                    'step 4';\r\n                    if (result.bool) {\r\n                        if (player.countGainableCards(Evt.target, 'he')) {\r\n                            Evt.target.gainPlayerCard(player, true);\r\n                        }\r\n                    }\r\n                    'step 5';\r\n                    if (Evt.targets.length)\r\n                        Evt.goto(2);\r\n                },\r\n            },\r\n            tianyi: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                mark: true,\r\n                intro: {\r\n                    name: '衣',\r\n                    content: 'cards',\r\n                    onunmark: 'throw',\r\n                },\r\n                cardAround: true,\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return !player.getEquip(2);\r\n                },\r\n                filterCard(card, player) {\r\n                    return true;\r\n                },\r\n                check(card) {\r\n                    return 7 - get.value(card);\r\n                },\r\n                discard: false,\r\n                visible: true,\r\n                toStorage: true,\r\n                content() {\r\n                    'step 0';\r\n                    player.$give(cards, player, false);\r\n                    player.markAuto('tianyi', cards);\r\n                    game.log(player, '将', cards, '置于武将牌上');\r\n                },\r\n                group: ['tianyi_drawBy', 'tianyi_cancelBy', 'tianyi_clear'],\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: { player: 'useCard', target: 'useCardToTarget' },\r\n                        priority: 77,\r\n                        lastDo: true,\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            var _a, _b;\r\n                            if (get.type2(Evt.card) != 'trick')\r\n                                return false;\r\n                            if ((_b = (_a = player.storage) === null || _a === void 0 ? void 0 : _a.tianyi_drawBy) === null || _b === void 0 ? void 0 : _b.includes(get.suit(Evt.card)))\r\n                                return false;\r\n                            return player.storage.tianyi.length && get.suit(player.storage.tianyi[0]) != get.suit(Evt.card);\r\n                        },\r\n                        content() {\r\n                            player.draw();\r\n                            if (!player.storage.tianyi_drawBy)\r\n                                player.storage.tianyi_drawBy = [];\r\n                            player.storage.tianyi_drawBy.add(get.suit(trigger.card));\r\n                        }\r\n                    },\r\n                    cancelBy: {\r\n                        trigger: { target: 'useCardToTarget' },\r\n                        priority: 77,\r\n                        lastDo: true,\r\n                        check(Evt, player) {\r\n                            return get.effect(player, Evt.card, Evt.player, player) < -1;\r\n                        },\r\n                        prompt(Evt) {\r\n                            return `被${get.translation(Evt.card)}指定为目标，${get.prompt('tianyi')}`;\r\n                        },\r\n                        filter(Evt, player) {\r\n                            if (get.type2(Evt.card) != 'trick')\r\n                                return false;\r\n                            return player.storage.tianyi.length && get.suit(player.storage.tianyi[0]) == get.suit(Evt.card);\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            player.unmarkSkill('tianyi');\r\n                            'step 1';\r\n                            trigger.getParent().cancel();\r\n                            'step 2';\r\n                            player.gain(trigger.getParent().cards, 'giveAuto');\r\n                        }\r\n                    },\r\n                    clear: {\r\n                        trigger: { global: ['gameDrawAfter', 'phaseAfter'], player: ['enterGame', 'phaseZhunbeiBegin'] },\r\n                        direct: true,\r\n                        firstDo: true,\r\n                        content() {\r\n                            'step 0';\r\n                            if (trigger.name == 'phase') {\r\n                                delete player.storage.tianyi_drawBy;\r\n                                Evt.finish();\r\n                            }\r\n                            else if (trigger.name == 'phaseZhunbei' && player.storage.tianyi.length) {\r\n                                Evt.moveCard = true;\r\n                            }\r\n                            'step 1';\r\n                            player.unmarkSkill('tianyi');\r\n                            'step 2';\r\n                            if (Evt.moveCard == true) {\r\n                                player.moveCard(`###${get.prompt('tianyi')}###可以移动场上的一张牌`);\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                ai: { order: 4, result: { player: 1 } },\r\n            },\r\n            nveyu: {\r\n                trigger: { source: 'damageEnd' },\r\n                priority: 77,\r\n                usable: 1,\r\n                lastDo: true,\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    trigger.player.recover();\r\n                    'step 1';\r\n                    game.asyncDraw([player, trigger.player]);\r\n                    'step 2';\r\n                    player.storage.nveyu_eff = trigger.player;\r\n                    player.addTempSkill('nveyu_eff');\r\n                },\r\n                subSkill: {\r\n                    eff: {\r\n                        mark: 'character',\r\n                        intro: {\r\n                            name: '虐语',\r\n                            content: '对$使用牌无距离与次数限制',\r\n                        },\r\n                        mod: {\r\n                            targetInRange(card, player, target) {\r\n                                if (target == player.storage.nveyu_eff)\r\n                                    return true;\r\n                            },\r\n                            cardUsableTarget(card, player, target) {\r\n                                if (player.storage.nveyu_eff == target)\r\n                                    return true;\r\n                            },\r\n                        },\r\n                        onremove: true,\r\n                    }\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        player(card, player, target, current) {\r\n                            if (get.tag(card, 'damage') == 1 && !target)\r\n                                console.warn(card, target);\r\n                            if (target) {\r\n                                if (get.tag(card, 'damage') == 1 && !player.hasSkill('nveyu_eff') && !target.hujia && target.hp > 1) {\r\n                                    if (target.hasSkillTag('maixie'))\r\n                                        return [1, 1, 0, 3];\r\n                                    return [1, 1, 0, 1];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            gonggan: {\r\n                trigger: { global: 'phaseBegin' },\r\n                priority: 23,\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && player.countCards('h') > 0;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseCard('h', get.prompt2('gonggan')).set('ai', card => {\r\n                        if (get.number(card) > 10)\r\n                            return 8 - get.value(card) + Math.random();\r\n                        if (player.countCards('h') >= 3)\r\n                            return 5 - get.value(card) + Math.random();\r\n                        if (player.countCards('h') == 1)\r\n                            return -get.value(card) + Math.random();\r\n                        return 2 - get.value(card) + Math.random();\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.logSkill('gonggan', trigger.player);\r\n                        Evt.card = result.cards[0];\r\n                        player.showHandcards('『奇癖共感』展示手牌');\r\n                        game.delay(1);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    let suitlist = [\r\n                        ['heart', '', 'heart', 'heart', 'div2'],\r\n                        ['diamond', '', 'diamond', 'diamond', 'div2'],\r\n                        ['club', '', 'club', 'club', 'div2'],\r\n                        ['spade', '', 'spade', 'spade', 'div2']\r\n                    ];\r\n                    game.broadcastAll(function (id, suitlist) {\r\n                        let dialog = ui.create.dialog('奇癖共感 声明');\r\n                        dialog.addText('花色');\r\n                        dialog.add([suitlist, 'vcard']);\r\n                        dialog.videoId = id;\r\n                    }, Evt.videoId, suitlist);\r\n                    'step 3';\r\n                    let next = trigger.player.chooseButton(1, true);\r\n                    next.set('dialog', Evt.videoId);\r\n                    next.set('ai', function (button) {\r\n                        let num = 0;\r\n                        _status.event.cards.forEach(card => {\r\n                            if (get.suit(card) == button.link[2])\r\n                                num++;\r\n                        });\r\n                        return num + Math.random();\r\n                    });\r\n                    next.set('cards', player.getCards('h'));\r\n                    'step 4';\r\n                    game.broadcastAll('closeDialog', Evt.videoId);\r\n                    if (result.bool) {\r\n                        player.storage.gonggan = result.links[0][2];\r\n                        trigger.player.chat(get.translation(player.storage.gonggan));\r\n                        game.log(trigger.player, '猜测为', player.storage.gonggan);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 5';\r\n                    if (player.storage.gonggan == get.suit(Evt.card)) {\r\n                        trigger.player.gain(Evt.card, player, 'giveAuto');\r\n                        let suit = 'gonggan_' + get.suit(Evt.card);\r\n                        player.storage.gonggan_num = get.number(Evt.card);\r\n                        player.addTempSkill(suit);\r\n                    }\r\n                    else {\r\n                        player.storage.gonggan_num = 12;\r\n                    }\r\n                    lib.translate['gonggan_num_bg'] = player.storage.gonggan_num;\r\n                    player.addTempSkill('gonggan_num');\r\n                },\r\n                subSkill: {\r\n                    heart: {\r\n                        marktext: '♥',\r\n                        mark: true,\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '奇癖共感',\r\n                            content: '手牌视为♥',\r\n                        },\r\n                        mod: {\r\n                            suit(card, suit) {\r\n                                if (suit != 'heart')\r\n                                    return 'heart';\r\n                            },\r\n                        }\r\n                    },\r\n                    spade: {\r\n                        marktext: '♠',\r\n                        mark: true,\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '奇癖共感',\r\n                            content: '手牌视为♠',\r\n                        },\r\n                        mod: {\r\n                            suit(card, suit) {\r\n                                if (suit != 'spade')\r\n                                    return 'spade';\r\n                            },\r\n                        }\r\n                    },\r\n                    diamond: {\r\n                        marktext: '♦',\r\n                        mark: true,\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '奇癖共感',\r\n                            content: '手牌视为♦',\r\n                        },\r\n                        mod: {\r\n                            suit(card, suit) {\r\n                                if (suit != 'diamond')\r\n                                    return 'diamond';\r\n                            },\r\n                        }\r\n                    },\r\n                    club: {\r\n                        marktext: '♣',\r\n                        mark: true,\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '奇癖共感',\r\n                            content: '手牌视为♣',\r\n                        },\r\n                        mod: {\r\n                            suit(card, suit) {\r\n                                if (suit != 'club')\r\n                                    return 'club';\r\n                            },\r\n                        }\r\n                    },\r\n                    num: {\r\n                        mark: true,\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '奇癖共感',\r\n                            content: '手牌视为#',\r\n                        },\r\n                        onremove: true,\r\n                        mod: {\r\n                            number(card, player, number) {\r\n                                return number = player.storage.gonggan_num;\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            yeyu: {\r\n                group: ['yeyu_sha', 'yeyu_trick'],\r\n                subSkill: {\r\n                    sha: {\r\n                        trigger: { global: 'useCard2' },\r\n                        priority: 23,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            if (Evt.player == player || get.name(Evt.card) != 'sha')\r\n                                return false;\r\n                            return (get.name(Evt.card) == 'sha') && player.countDiscardableCards(player, 'he');\r\n                        },\r\n                        prompt2: '你可以弃置一张点数大于此【杀】的牌取消之',\r\n                        content() {\r\n                            'step 0';\r\n                            let next = player.chooseToDiscard('he', '弃置一张点数大于此【杀】的牌取消之');\r\n                            next.set('filterCard', function (card, player) {\r\n                                return get.number(card, player) > _status.event.num;\r\n                            });\r\n                            next.set('num', get.number(trigger.card));\r\n                            'step 1';\r\n                            if (result.bool) {\r\n                                player.logSkill('yeyu', trigger.player);\r\n                                trigger.cancel();\r\n                            }\r\n                        },\r\n                    },\r\n                    trick: {\r\n                        trigger: { global: 'useCard2' },\r\n                        priority: 23,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            var _a;\r\n                            let card = Evt.card;\r\n                            let info = get.info(card);\r\n                            if (info.allowMultiple == false)\r\n                                return false;\r\n                            if (Evt.player == player || get.type(Evt.card) != 'trick')\r\n                                return false;\r\n                            return ((_a = Evt === null || Evt === void 0 ? void 0 : Evt.targets) === null || _a === void 0 ? void 0 : _a.length) && player.countCards('h', { suit: 'club' });\r\n                        },\r\n                        prompt2: '你可以重铸一张梅花牌为之增加或减少一名目标',\r\n                        content() {\r\n                            'step 0';\r\n                            let next = player.chooseCard('he', '重铸一张梅花牌');\r\n                            next.set('filterCard', function (card, player) {\r\n                                return get.suit(card, player) == 'club';\r\n                            });\r\n                            'step 1';\r\n                            if (result.bool) {\r\n                                player.logSkill('yeyu');\r\n                                player.lose(result.cards, ui.discardPile).set('visible', true);\r\n                                player.$throw(result.cards);\r\n                                game.log(player, '将', result.cards, '置入了弃牌堆');\r\n                                player.draw();\r\n                                let prompt2 = `为${get.translation(trigger.card)}增加或减少一个目标`;\r\n                                player.chooseTarget(get.prompt('yeyu'), true, function (card, player, target) {\r\n                                    let source = _status.event.source;\r\n                                    if (_status.event.targets.includes(target))\r\n                                        return true;\r\n                                    return lib.filter.targetEnabled2(_status.event.card, source, target) && lib.filter.targetInRange(_status.event.card, source, target);\r\n                                }).set('prompt2', prompt2).set('ai', function (target) {\r\n                                    let player = _status.event.player, source = _status.event.source;\r\n                                    return get.effect(target, _status.event.card, source, player) * (_status.event.targets.includes(target) ? -1 : 1);\r\n                                }).set('targets', trigger.targets).set('card', trigger.card).set('source', trigger.player);\r\n                            }\r\n                            else {\r\n                                Evt.finish();\r\n                            }\r\n                            'step 2';\r\n                            if (!Evt.isMine())\r\n                                game.delayx();\r\n                            Evt.targets = result.targets;\r\n                            'step 3';\r\n                            if (Evt.targets) {\r\n                                player.logSkill('yeyu', Evt.targets);\r\n                                if (trigger.targets.includes(Evt.targets[0]))\r\n                                    trigger.targets.removeArray(Evt.targets);\r\n                                else\r\n                                    trigger.targets.addArray(Evt.targets);\r\n                            }\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            huawen: {\r\n                audio: 2,\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h') > 0;\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    return target != player && target.countCards('h') > 0 && target.sex == 'female';\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.storage.huawen.add(target);\r\n                    Evt.list1 = player.getCards('h');\r\n                    Evt.list2 = target.getCards('h');\r\n                    game.broadcastAll(function (id, list1, list2, player, target) {\r\n                        let dialog = ui.create.dialog('『花吻交染』交换花色、点数、种类相同的牌各一张');\r\n                        dialog.addText(get.translation(player) + '的手牌');\r\n                        dialog.add([list1, 'card']);\r\n                        dialog.addText(get.translation(target) + '的手牌');\r\n                        dialog.add([list2, 'card']);\r\n                        dialog.videoId = id;\r\n                    }, Evt.videoId, Evt.list1, Evt.list2, player, target);\r\n                    game.delay(1);\r\n                    'step 1';\r\n                    let next = player.chooseButton(true).set('target', target).set('list1', Evt.list1).set('list2', Evt.list2);\r\n                    next.set('dialog', Evt.videoId);\r\n                    next.set('selectButton', function () {\r\n                        if (ui.selected.buttons.length % 2 == 1) {\r\n                            return [ui.selected.buttons.length + 1, ui.selected.buttons.length + 1];\r\n                        }\r\n                        return [0, 6];\r\n                    });\r\n                    next.set('filterButton', function (button) {\r\n                        let now = button.link;\r\n                        let links = ui.selected.buttons.map(function (button) {\r\n                            return button.link;\r\n                        });\r\n                        return _status.event.process(links, now);\r\n                    });\r\n                    next.set('switchToAuto', function () {\r\n                        _status.event.result = 'ai';\r\n                    }).set('processAI', function () {\r\n                        let player = _status.event.player;\r\n                        let target = _status.event.target;\r\n                        let list1 = _status.event.list1.slice(0);\r\n                        let list2 = _status.event.list2.slice(0);\r\n                        let cards = list1.concat(list2);\r\n                        let links = [];\r\n                        if (get.attitude(player, target) < 0) {\r\n                            let saves = list2.filter(card => ['tao', 'jiu', 'zong'].includes(get.name(card)));\r\n                            if (target.hp == 1 || player.hp == 1 || saves.length) {\r\n                                let dones = [];\r\n                                saves.forEach(function (save) {\r\n                                    list1.forEach(card => {\r\n                                        if (_status.event.process([save], card)) {\r\n                                            dones.add(save);\r\n                                            dones.add(card);\r\n                                        }\r\n                                    });\r\n                                });\r\n                                links.addArray(dones.splice(0, 2));\r\n                            }\r\n                        }\r\n                        else {\r\n                            let dones = [];\r\n                            for (let i = 0; i < list1.length; i++) {\r\n                                let done = [list1[i]];\r\n                                let choices = cards.slice(0).remove(list1[i]);\r\n                                for (let j = 0; j < choices.length; j++) {\r\n                                    if (done.length == 6)\r\n                                        break;\r\n                                    if (_status.event.process(done, choices[j])) {\r\n                                        done.push(choices[j]);\r\n                                        choices.remove(choices[j]);\r\n                                        j = 0;\r\n                                    }\r\n                                }\r\n                                if (done.length % 2 == 1)\r\n                                    done.pop();\r\n                                dones.push(done);\r\n                            }\r\n                            if (dones.length > 0) {\r\n                                dones.sort(function (a, b) {\r\n                                    return b.length - a.length;\r\n                                });\r\n                                links.addArray(dones[0]);\r\n                            }\r\n                        }\r\n                        return {\r\n                            bool: true,\r\n                            links: links,\r\n                        };\r\n                    });\r\n                    next.set('process', function (selected, now) {\r\n                        let last = selected.slice(0);\r\n                        let over = {\r\n                            type2: 0,\r\n                            suit: 0,\r\n                            number: 0\r\n                        };\r\n                        let going = [];\r\n                        let overOne = 0;\r\n                        let pack = 0;\r\n                        if (last.length % 2 == 1) {\r\n                            pack = selected[selected.length - 1];\r\n                        }\r\n                        for (let i = 0; i < last.length; i += 2) {\r\n                            if (!last[i + 1])\r\n                                continue;\r\n                            let go = [];\r\n                            for (let j in over) {\r\n                                if (get[j](last[i]) == get[j](last[i + 1])) {\r\n                                    go.add(j);\r\n                                }\r\n                            }\r\n                            if (!go.length)\r\n                                continue;\r\n                            for (let j = 0; j < go.length; j++) {\r\n                                going.add(go[j]);\r\n                                over[go[j]] += (1 / go.length);\r\n                            }\r\n                        }\r\n                        let list1 = _status.event.list1;\r\n                        let list2 = _status.event.list2;\r\n                        for (let j in over) {\r\n                            overOne = Math.max(over[j] - 1, overOne);\r\n                        }\r\n                        if (!pack) {\r\n                            if (list1.includes(now)) {\r\n                                for (let i = 0; i < list2.length; i++) {\r\n                                    for (let j in over) {\r\n                                        if (over[j] + overOne >= 1 || (going.includes(j) && going.length * 2 <= last.length))\r\n                                            continue;\r\n                                        if (get[j](list2[i]) == get[j](now)) {\r\n                                            return true;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (list2.includes(now)) {\r\n                                for (let i = 0; i < list1.length; i++) {\r\n                                    for (let j in over) {\r\n                                        if (over[j] + overOne >= 1 || (going.includes(j) && going.length * 2 <= last.length))\r\n                                            continue;\r\n                                        if (get[j](list1[i]) == get[j](now)) {\r\n                                            return true;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (list1.includes(pack)) {\r\n                                if (!list2.includes(now))\r\n                                    return false;\r\n                                for (let j in over) {\r\n                                    if (over[j] + overOne >= 1 || (going.includes(j) && going.length * 2 <= last.length))\r\n                                        continue;\r\n                                    if (get[j](pack) == get[j](now)) {\r\n                                        return true;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (list2.includes(pack)) {\r\n                                if (!list1.includes(now))\r\n                                    return false;\r\n                                for (let j in over) {\r\n                                    if (over[j] + overOne >= 1 || (going.includes(j) && going.length * 2 <= last.length))\r\n                                        continue;\r\n                                    if (get[j](pack) == get[j](now)) {\r\n                                        return true;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        return false;\r\n                    });\r\n                    'step 2';\r\n                    game.broadcastAll('closeDialog', Evt.videoId);\r\n                    if (result.bool && result.links) {\r\n                        let cards1 = result.links.slice(0), cards2 = result.links.slice(0);\r\n                        cards1 = cards1.filter(card => Evt.list1.includes(card));\r\n                        cards2 = cards2.filter(card => Evt.list2.includes(card));\r\n                        if (cards1.length && cards2.length && cards1.length == cards2.length) {\r\n                            Evt.num = cards1.length;\r\n                            player.gain(cards2, target, 'giveAuto').set('visible', true);\r\n                            target.gain(cards1, player, 'giveAuto').set('visible', true);\r\n                            game.asyncDraw([player, target], Evt.num);\r\n                        }\r\n                        if (!Evt.num || Evt.num < 3) {\r\n                            player.loseHp();\r\n                            target.loseHp();\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                },\r\n                group: 'huawen_clear',\r\n                ai: {\r\n                    order: 8.5,\r\n                    result: {\r\n                        target(player, target) {\r\n                            if (target.countCards('h') >= 3) {\r\n                                return 2;\r\n                            }\r\n                            else if (target.countCards('h') >= 1) {\r\n                                return 0;\r\n                            }\r\n                            else if (target.hp == 1) {\r\n                                return -2;\r\n                            }\r\n                            else {\r\n                                return -1;\r\n                            }\r\n                        },\r\n                        player(player, target) {\r\n                            if (player.countCards('h') >= 3) {\r\n                                return 2;\r\n                            }\r\n                            else if (player.countCards('h') >= 1) {\r\n                                return 0;\r\n                            }\r\n                            else if (player.hp == 1) {\r\n                                return -1;\r\n                            }\r\n                            else {\r\n                                return -0.5;\r\n                            }\r\n                        },\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { global: 'phaseAfter' },\r\n                        priority: 23,\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            var _a, _b;\r\n                            if ((_b = (_a = player.storage) === null || _a === void 0 ? void 0 : _a.huawen) === null || _b === void 0 ? void 0 : _b.length) {\r\n                                player.storage.huawen.length = 0;\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            liaohu: {\r\n                audio: 2,\r\n                trigger: { global: 'phaseEnd' },\r\n                priority: 23,\r\n                filter(Evt, player) {\r\n                    return player.getStat('damage');\r\n                },\r\n                check(Evt, player) {\r\n                    var _a, _b;\r\n                    return get.recoverEffect((((_b = (_a = player.storage) === null || _a === void 0 ? void 0 : _a.huawen) === null || _b === void 0 ? void 0 : _b.length) ? player.storage.huawen[0] : player), player, player) > 0;\r\n                },\r\n                content() {\r\n                    var _a, _b;\r\n                    if (player.getStat().skill.huawen != undefined) {\r\n                        if ((_b = (_a = player.storage) === null || _a === void 0 ? void 0 : _a.huawen) === null || _b === void 0 ? void 0 : _b.length) {\r\n                            player.storage.huawen[0].recover();\r\n                        }\r\n                    }\r\n                    else {\r\n                        player.recover();\r\n                    }\r\n                },\r\n            },\r\n            huangran: {\r\n                trigger: { player: 'damageBegin4' },\r\n                priority: 99,\r\n                filter(Evt, player) {\r\n                    return Evt.num >= 2 && Evt.nature == 'fire' && game.hasPlayer(cur => {\r\n                        return cur != player && get.distance(player, cur) <= 1;\r\n                    });\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseTarget('###『煌燃』###选择一名角色与自己平摊伤害', function (card, player, target) {\r\n                        return target != player && get.distance(player, target) <= 1;\r\n                    }).set('ai', function (target) {\r\n                        return 1 - get.attitude(player, target) + Math.random();\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        if (trigger.num % 2 == 0) {\r\n                            trigger.num /= 2;\r\n                            result.targets[0].damage(trigger.num, trigger.source, 'fire');\r\n                            Evt.finish();\r\n                        }\r\n                        else {\r\n                            trigger.num--;\r\n                            trigger.num /= 2;\r\n                            result.targets[0].damage(trigger.num, trigger.source, 'fire');\r\n                            player.chooseTarget(true, '###『煌燃』###分配多余的一点伤害').set('ai', function (target) {\r\n                                return 1 - get.attitude(player, target) < 0 + Math.random();\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        result.targets[0].damage(1, trigger.source, 'fire');\r\n                    }\r\n                },\r\n                group: 'huangran_drawBy',\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: { global: 'damageEnd' },\r\n                        priority: 99,\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            if (Evt.player.hasSkill('huangran_shao'))\r\n                                return false;\r\n                            return Evt.nature == 'fire' && Evt.getParent().name == 'huangran';\r\n                        },\r\n                        content() {\r\n                            player.draw();\r\n                            trigger.player.addTempSkill('huangran_shao', 'huangranAfter');\r\n                        },\r\n                    },\r\n                    shao: {},\r\n                }\r\n            },\r\n            yinzhen: {\r\n                group: ['yinzhen_fire', 'yinzhen_includes', 'yinzhen_getC'],\r\n                subSkill: {\r\n                    fire: {\r\n                        trigger: { global: 'damageBegin1' },\r\n                        priority: 999,\r\n                        usable: 1,\r\n                        forced: true,\r\n                        content() {\r\n                            trigger.nature = 'fire';\r\n                        },\r\n                    },\r\n                    includes: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = [];\r\n                        },\r\n                        trigger: { global: 'phaseBefore' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            player.storage.yinzhen_includes.length = 0;\r\n                            game.hasPlayer(cur => {\r\n                                if (cur != player) {\r\n                                    player.storage.yinzhen_includes.push(cur);\r\n                                    player.storage.yinzhen_includes.push(get.distance(cur, player));\r\n                                }\r\n                            });\r\n                        },\r\n                    },\r\n                    getC: {\r\n                        trigger: { global: 'phaseAfter' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            for (let i = 0; i < (player.storage.yinzhen_includes.length); i += 2) {\r\n                                if (get.distance(player.storage.yinzhen_includes[i], player) < player.storage.yinzhen_includes[i + 1]) {\r\n                                    player.logSkill('yinzhen', player.storage.yinzhen_includes[i]);\r\n                                    player.gainPlayerCard('h', player.storage.yinzhen_includes[i], true).set('visible', true);\r\n                                }\r\n                            }\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            senhu: {\r\n                group: 'senhu_tengjia2',\r\n                locked: true,\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target) {\r\n                            if (player == target && get.subtype(card) == 'equip2') {\r\n                                if (get.equipValue(card) <= 7.5)\r\n                                    return 0;\r\n                            }\r\n                            if (!target.isEmpty(2))\r\n                                return;\r\n                            return lib.skill.bagua_skill.ai.effect.target.apply(this, arguments);\r\n                        }\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    tengjia1: {\r\n                        equipSkill: true,\r\n                        noHidden: true,\r\n                        inherit: 'tengjia1',\r\n                        filter(Evt, player) {\r\n                            if (!player.isEmpty(2))\r\n                                return false;\r\n                            return true;\r\n                        },\r\n                    },\r\n                    tengjia2: {\r\n                        equipSkill: true,\r\n                        noHidden: true,\r\n                        inherit: 'tengjia2',\r\n                        filter(Evt, player) {\r\n                            if (!player.isEmpty(2))\r\n                                return false;\r\n                            return Evt.nature == 'fire';\r\n                        },\r\n                    },\r\n                    tengjia3: {\r\n                        equipSkill: true,\r\n                        noHidden: true,\r\n                        inherit: 'tengjia3',\r\n                        filter(Evt, player) {\r\n                            if (!player.isEmpty(2))\r\n                                return false;\r\n                            return true;\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            tiaolian: {\r\n                trigger: { player: 'useCardToPlayer', target: 'useCardToTarget' },\r\n                usable: 1,\r\n                clickChange: '休眠',\r\n                clickable(player) {\r\n                    if (player.storage.tiaolian_clickChange === undefined)\r\n                        player.storage.tiaolian_clickChange = false;\r\n                    else\r\n                        player.storage.tiaolian_clickChange = !player.storage.tiaolian_clickChange;\r\n                },\r\n                clickableFilter(player) {\r\n                    return player.storage.tiaolian_clickChange !== false;\r\n                },\r\n                filter(Evt, player) {\r\n                    if (player.storage.tiaolian_clickChange === false)\r\n                        return false;\r\n                    if (Evt.player == player && !Evt.targets.filter(cur => {\r\n                        return player.canCompare(cur);\r\n                    }).length)\r\n                        return false;\r\n                    if (Evt.player != player && !player.canCompare(Evt.player))\r\n                        return false;\r\n                    return player.countCards('h') > 0;\r\n                },\r\n                check(Evt, player) {\r\n                    if (Evt.player == player && Evt.targets.filter(cur => {\r\n                        return player.canCompare(cur) && get.attitude(player, cur) < 1;\r\n                    }))\r\n                        return 1;\r\n                    if (Evt.player != player)\r\n                        return get.attitude(player, Evt.player) < 1;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    if (trigger.targets.includes(player) && trigger.player != player) {\r\n                        player.chooseToCompare(trigger.player);\r\n                    }\r\n                    'step 1';\r\n                    if (trigger.targets.includes(player) && trigger.player != player) {\r\n                        if (result.bool) {\r\n                            trigger.getParent().targets.remove(player);\r\n                            game.log(trigger.card, '不会对', player, '生效');\r\n                            if (trigger.getParent().targets.length == 0)\r\n                                trigger.getParent().cancel();\r\n                        }\r\n                        else {\r\n                            trigger.getParent().directHit.add(player);\r\n                            game.log(player, '不能响应', trigger.getParent().card);\r\n                        }\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    Evt.targets = trigger.targets;\r\n                    let next = player.chooseTarget('###『咆咲』###选择拼点的对象', true);\r\n                    next.set('filterTarget', function (card, player, target) {\r\n                        return player.canCompare(target) && _status.event.targets.includes(target);\r\n                    });\r\n                    next.set('ai', function (target) {\r\n                        return 7 - get.attitude2(target);\r\n                    });\r\n                    next.set('selectTarget', [1, Infinity]);\r\n                    next.set('multitarget', true);\r\n                    next.set('multiline', true);\r\n                    next.set('targets', Evt.targets);\r\n                    'step 3';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        player.chooseToCompare(result.targets).callback = lib.skill.tiaolian.callback;\r\n                    }\r\n                },\r\n                callback() {\r\n                    if (Evt.num1 <= Evt.num2) {\r\n                        Evt.getParent().getTrigger().excluded.add(target);\r\n                        game.log(Evt.getParent().getTrigger().card, '不会对', target, '生效');\r\n                        game.delay();\r\n                    }\r\n                    else {\r\n                        Evt.getParent().getTrigger().directHit.add(target);\r\n                        game.log(target, '不能响应', Evt.getParent().getTrigger().card);\r\n                        game.delay();\r\n                    }\r\n                },\r\n            },\r\n            jiaku: {\r\n                trigger: { player: ['chooseToCompareAfter', 'compareMultipleAfter'], target: ['chooseToCompareAfter', 'compareMultipleAfter'] },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return !Evt.iwhile;\r\n                },\r\n                content() {\r\n                    if (player == trigger.player) {\r\n                        if (trigger.num1 > trigger.num2) {\r\n                            player.gainPlayerCard('###『生笹』###获得对方的一张牌', trigger.target, true);\r\n                        }\r\n                        else {\r\n                            player.draw();\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (trigger.num2 > trigger.num1) {\r\n                            player.gainPlayerCard('###『生笹』###获得对方的一张牌', trigger.player, true);\r\n                        }\r\n                        else {\r\n                            player.draw();\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            shencha: {\r\n                trigger: { player: 'phaseZhunbeiBegin' },\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                check(Evt, player) {\r\n                    return player.countCards('j') > 0;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    Evt.num = 3 + player.countCards('j');\r\n                    Evt.getE = (player.countCards('e') == 0);\r\n                    'step 1';\r\n                    Evt.cards = get.cards(Evt.num);\r\n                    'step 2';\r\n                    let prompt2 = '获得其中至多两张基础牌';\r\n                    let selectButton = [0, 2];\r\n                    if (Evt.getE) {\r\n                        prompt2 += ',装备其中至多两张装备牌';\r\n                        selectButton[1] += 2;\r\n                    }\r\n                    let next = player.chooseCardButton(Evt.cards, '###『审查』###' + prompt2);\r\n                    next.set('selectButton', selectButton);\r\n                    next.set('filterButton', function (button) {\r\n                        let type = get.type2(button.link);\r\n                        let geting = [0, 0];\r\n                        for (let i = 0; i < ui.selected.buttons.length; i++) {\r\n                            if (get.type2(ui.selected.buttons[i].link) == 'basic')\r\n                                geting[0]++;\r\n                            if (get.type2(ui.selected.buttons[i].link) == 'equip')\r\n                                geting[1]++;\r\n                        }\r\n                        return (type == 'basic' && geting[0] < 2) || (_status.event.getE && type == 'equip' && geting[1] < 2);\r\n                    });\r\n                    next.set('getE', Evt.getE);\r\n                    next.set('ai', function (button) {\r\n                        return get.value(button.link, _status.event.player) + Math.random();\r\n                    });\r\n                    'step 3';\r\n                    if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        let cards = result.links.slice(0);\r\n                        Evt.cards.removeArray(cards);\r\n                        let basics = cards.filter(card => get.type(card) == 'basic');\r\n                        let equips = cards.filter(card => get.type(card) == 'equip');\r\n                        player.gain(basics, 'gain2');\r\n                        equips.forEach(function (equip) {\r\n                            player.equip(equip);\r\n                        });\r\n                    }\r\n                    'step 4';\r\n                    player.skip('phaseDraw');\r\n                    if (Evt.cards.length == 0)\r\n                        Evt.finish();\r\n                    if (Evt.cards.length == 1)\r\n                        Evt.goto(7);\r\n                    'step 5';\r\n                    player.chooseCardButton('###『权力审查』###请选择置于牌堆底的顺序（先选择的在下）', Evt.cards, Evt.cards.length, true);\r\n                    'step 6';\r\n                    Evt.cards = result.links.slice(0);\r\n                    'step 7';\r\n                    let cards = Evt.cards;\r\n                    game.log(player, '将' + get.cnNumber(cards.length) + '张牌置于牌堆底');\r\n                    while (cards.length) {\r\n                        ui.cardPile.appendChild(cards.pop().fix());\r\n                    }\r\n                    game.updateRoundNumber();\r\n                },\r\n            },\r\n            helesta: {\r\n                audio: 'yubing',\r\n                trigger: { player: 'damageBegin3' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return Evt.num && player.countDiscardableCards(player, 'e');\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.discardPlayerCard(`###${get.prompt('helesta')}###可以弃置装备区的一张牌使伤害-1`, player, 'e').set('ai', function () {\r\n                        if (player.isDamaged() || player.countCards('e') == 1)\r\n                            return 5 + Math.random();\r\n                        return Math.random() - 0.2;\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        trigger.num--;\r\n                    }\r\n                    ;\r\n                },\r\n                ai: {\r\n                    noe: true,\r\n                    reverseEquip: true,\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (get.type(card) == 'equip' && !get.cardtag(card, 'gifts'))\r\n                                return [1, 3];\r\n                        }\r\n                    }\r\n                },\r\n                group: 'helesta_iceshaBy',\r\n                subSkill: {\r\n                    iceshaBy: {\r\n                        trigger: {\r\n                            player: 'loseAfter',\r\n                            global: ['equipAfter', 'addJudgeAfter', 'gainAfter'],\r\n                        },\r\n                        filter(Evt, player) {\r\n                            var _a;\r\n                            let evt = Evt.getl(player);\r\n                            return ((_a = evt === null || evt === void 0 ? void 0 : evt.es) === null || _a === void 0 ? void 0 : _a.length) > 0 && player.hasUseTarget({ name: 'sha', nature: 'ice', isCard: true });\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            'step 0';\r\n                            var _a;\r\n                            player.chooseUseTarget('###' + get.prompt('helesta') + '###视为使用一张冰【杀】并摸一张牌', { name: 'sha', nature: 'ice', isCard: true }, false);\r\n                            'step 1';\r\n                            if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                                player.logSkill('helesta');\r\n                                player.draw();\r\n                            }\r\n                        },\r\n                    }\r\n                },\r\n            },\r\n            chuangzuo: {},\r\n            zhongli: {\r\n                audio: 3,\r\n                audioname: ['jike'],\r\n                mark: true,\r\n                intro: {\r\n                    name: '本回合因『重力牵引』获得的牌',\r\n                    content: 'cards',\r\n                    onunmark(storage, player) {\r\n                        if (storage && storage.length) {\r\n                            storage.length = 0;\r\n                        }\r\n                    },\r\n                },\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                trigger: { player: 'phaseUseAfter' },\r\n                priority: 99,\r\n                lastDo: true,\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    let func = function (result) {\r\n                        if (get.type(result) == 'equip')\r\n                            return 2;\r\n                        return 0;\r\n                    };\r\n                    player.judge(func).callback = lib.skill.zhongli.callback;\r\n                    'step 1';\r\n                    if (result.judge > 0) {\r\n                        if (!Evt.cards)\r\n                            Evt.cards = [];\r\n                        Evt.cards.add(result.card);\r\n                        Evt.goto(0);\r\n                    }\r\n                    'step 2';\r\n                    if (Evt.cards && Evt.cards.length) {\r\n                        for (let i = 0; i < Evt.cards.length; i++) {\r\n                            if (!player.storage.zhongli.includes(Evt.cards[i])) {\r\n                                Evt.newPhaseUse = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 3';\r\n                    if (Evt.newPhaseUse) {\r\n                        player.markAuto('zhongli', Evt.cards);\r\n                        if (player.maxHp > 1)\r\n                            player.loseMaxHp();\r\n                        player.phaseUse();\r\n                    }\r\n                    'step 4';\r\n                    let stat = player.getStat();\r\n                    for (let i in stat.skill) {\r\n                        let bool = false;\r\n                        let info = lib.skill[i];\r\n                        if (info.enable != undefined) {\r\n                            if (typeof info.enable == 'string' && info.enable == 'phaseUse')\r\n                                bool = true;\r\n                            else if (typeof info.enable == 'object' && info.enable.includes('phaseUse'))\r\n                                bool = true;\r\n                        }\r\n                        if (bool)\r\n                            stat.skill[i] = 0;\r\n                    }\r\n                },\r\n                callback() {\r\n                    if (get.type(Evt.judgeResult.name) == 'equip') {\r\n                        player.gain(card, 'gain2');\r\n                    }\r\n                },\r\n                group: 'zhongli_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { global: 'gameDrawAfter', player: ['enterGame', 'phaseAfter'] },\r\n                        direct: true,\r\n                        lastDo: true,\r\n                        priority: 666,\r\n                        content() {\r\n                            player.unmarkSkill('zhongli');\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            xinhuo: {\r\n                audio: 2,\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') >= 2;\r\n                },\r\n                filterCard: true,\r\n                position: 'he',\r\n                selectCard: 2,\r\n                check(card) {\r\n                    let player = _status.event.player;\r\n                    if (get.type(card) == 'equip') {\r\n                        if (typeof get.info(card).onLose == 'function')\r\n                            return 9 + Math.random();\r\n                        else\r\n                            return 7 + Math.random();\r\n                    }\r\n                    if (get.name(card) == 'sha' && player.countCards('h', { name: 'sha' }) == 1)\r\n                        return 0;\r\n                    return 7 - get.value(card) / 2;\r\n                },\r\n                discard: false,\r\n                toStorage: true,\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    let next = player.chooseCardButton('###『薪火相传』###按顺序将卡牌置于牌堆顶（先选择的在上）', cards, 2, true);\r\n                    next.set('forceAuto', function () {\r\n                        return ui.selected.buttons.length == 2;\r\n                    });\r\n                    next.set('ai', function (button) {\r\n                        if (get.type(button.link) == 'equip') {\r\n                            if (typeof get.info(button.link).onLose == 'function')\r\n                                return 10 + Math.random();\r\n                            else\r\n                                return 7 + Math.random();\r\n                        }\r\n                        if (get.name(button.link) == 'sha' && player.countCards('h', { name: 'sha' }) == 1)\r\n                            return 0;\r\n                        return 7 - get.value(button.link) / 2 + Math.random();\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length))\r\n                        cards = result.links.slice(0);\r\n                    'step 2';\r\n                    game.log(Evt.target, '将' + get.cnNumber(cards.length) + '张牌放在牌堆顶');\r\n                    while (cards.length > 0) {\r\n                        ui.cardPile.insertBefore(cards.pop().fix(), ui.cardPile.firstChild);\r\n                    }\r\n                    game.updateRoundNumber();\r\n                    'step 3';\r\n                    if (player.hasSkill('xinhuo_chuanhuo')) {\r\n                        player.storage.xinhuo_chuanhuo++;\r\n                        player.updateMarks();\r\n                    }\r\n                    else {\r\n                        player.addTempSkill('xinhuo_chuanhuo');\r\n                        player.storage.xinhuo_chuanhuo = 1;\r\n                        let buff = '.player_buff';\r\n                        game.broadcastAll(function (player, buff) {\r\n                            player.node.xinhuo = ui.create.div(buff, player.node.avatar);\r\n                        }, player, buff);\r\n                    }\r\n                },\r\n                mod: {\r\n                    aiOrder(player, card, num) {\r\n                        if (typeof card == 'object' && player == _status.currentPhase && get.type2(card) == 'trick' && get.info(card).notarget !== true && !player.needsToDiscard()) {\r\n                            let evt = player.getStat().card;\r\n                            for (let i in evt) {\r\n                                if (evt[i] && get.type2(evt[i]) == 'trick') {\r\n                                    return num - 7;\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                ai: {\r\n                    order(item, player) {\r\n                        let cards = Object.entries(player.getStat().card);\r\n                        for (let i = 0; i < cards.length; i++) {\r\n                            if (get.type(cards[i][0]) == 'basic') {\r\n                                if (player.hasSha() && player.countCards('he') >= 3 && (!player.storage.xinhuo_chuanhuo || player.storage.xinhuo_chuanhuo < 2)) {\r\n                                    return 7.1;\r\n                                }\r\n                            }\r\n                        }\r\n                        return 0;\r\n                    },\r\n                    result: { player: 1 },\r\n                },\r\n                subSkill: {\r\n                    chuanhuo: {\r\n                        audio: 3,\r\n                        trigger: { player: 'useCard' },\r\n                        forced: true,\r\n                        onremove(player) {\r\n                            if (player.node.xinhuo) {\r\n                                player.node.xinhuo.delete();\r\n                                delete player.node.xinhuo;\r\n                            }\r\n                            player.unmarkSkill('xinhuo_chuanhuo');\r\n                            delete player.storage.xinhuo_chuanhuo;\r\n                        },\r\n                        mod: {\r\n                            selectTarget(card, player, range) {\r\n                                if (range[1] == -1)\r\n                                    return;\r\n                                range[1] += player.storage.xinhuo_chuanhuo;\r\n                            },\r\n                            cardUsable(card, player, num) {\r\n                                return true;\r\n                            },\r\n                            targetInRange(card, player, target, now) {\r\n                                return true;\r\n                            },\r\n                        },\r\n                        content() {\r\n                            player.removeSkill('xinhuo_chuanhuo');\r\n                        },\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '下一张使用的牌无距离和次数限制且可额外指定$名目标',\r\n                            markcount(storage, player) {\r\n                                return player.storage.xinhuo_chuanhuo;\r\n                            }\r\n                        },\r\n                        ai: {\r\n                            useSha: 1,\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            weizhuang: {\r\n                audio: 2,\r\n                trigger: { player: 'useCardAfter' },\r\n                locked: true,\r\n                direct: true,\r\n                lastDo: true,\r\n                filter(Evt, player) {\r\n                    return (get.type2(Evt.card) == 'trick' || get.type2(Evt.card) == 'basic') && Evt.targets.length > 0;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    if (!player.hasMark('weizhuang')) {\r\n                        player.markSkill('weizhuang');\r\n                    }\r\n                    'step 1';\r\n                    if (get.type2(trigger.card) == 'basic' && player.getHistory('useCard', evt => {\r\n                        return get.type2(evt.card) == 'basic';\r\n                    }).length > 1) {\r\n                        player.logSkill('weizhuang');\r\n                        player.draw(trigger.targets.length);\r\n                    }\r\n                    else if (get.type2(trigger.card) == 'trick' && player.getHistory('useCard', evt => {\r\n                        return get.type2(evt.card) == 'trick';\r\n                    }).length > 1) {\r\n                        player.logSkill('weizhuang_discard');\r\n                        player.chooseToDiscard(trigger.targets.length, 'he', true);\r\n                    }\r\n                },\r\n                mark: true,\r\n                intro: {\r\n                    content: '使用基本牌/锦囊牌指定目标时，摸/弃X张牌（X为此牌指定的目标数）',\r\n                },\r\n                group: ['weizhuang_clear'],\r\n                subSkill: {\r\n                    discard: {},\r\n                    clear: {\r\n                        trigger: { global: 'gameDrawAfter', player: ['enterGame', 'phaseAfter'] },\r\n                        direct: true,\r\n                        firstDo: true,\r\n                        priority: 666,\r\n                        content() {\r\n                            player.unmarkSkill('weizhuang');\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            liebo: {\r\n                trigger: { player: 'useCardBefore' },\r\n                filter(Evt, player) {\r\n                    return get.color(Evt.card, player) == 'black';\r\n                },\r\n                priority: 12,\r\n                forced: true,\r\n                content() {\r\n                    if (!trigger.directHit)\r\n                        trigger.directHit = [];\r\n                    trigger.directHit.addArray(game.players);\r\n                },\r\n                ai: {\r\n                    threaten: 1.5,\r\n                    effect: {\r\n                        player(card, player, target, current) {\r\n                            if (get.color(card) == 'black' && get.tag(card, 'damage')) {\r\n                                if (player.countDiscardableCards(target, 'e'))\r\n                                    return [1, -0.5, 1, -1];\r\n                                return [1, 1, 1, -1];\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                group: 'liebo_drawBy',\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: { source: 'damage' },\r\n                        filter(Evt, player) {\r\n                            let evt = Evt.getParent();\r\n                            if (evt.name == '_lianhuan')\r\n                                evt = Evt.getTrigger().getParent(2);\r\n                            else\r\n                                evt = evt.getParent();\r\n                            if (evt.addedSkill && evt.addedSkill.includes('liebo'))\r\n                                return false;\r\n                            return get.color(Evt.card, player) == 'black';\r\n                        },\r\n                        priority: 12,\r\n                        forced: true,\r\n                        content() {\r\n                            'step 0';\r\n                            let evt = trigger.getParent();\r\n                            if (evt.name == '_lianhuan')\r\n                                evt = trigger.getTrigger().getParent(2);\r\n                            else\r\n                                evt = evt.getParent();\r\n                            evt.addedSkill || (evt.addedSkill = []);\r\n                            evt.addedSkill.add('liebo');\r\n                            player.draw();\r\n                            'step 1';\r\n                            game.broadcastAll(function (player, target) {\r\n                                player.discardPlayerCard('e', target);\r\n                            }, trigger.player, player);\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            zhongjizhimeng: {\r\n                audio: true,\r\n                audioname: ['jike'],\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filterCard: true,\r\n                position: 'he',\r\n                check(card) {\r\n                    return 7 - get.value(card);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    let next = player.chooseCard('h', true, '『重机织梦』：展示一张手牌');\r\n                    next.set('ai', card => {\r\n                        let player = _status.event.player;\r\n                        if (get.suit(card) == 'red' && player.hasUseTarget(card))\r\n                            return 5 + get.order(card);\r\n                        if (player.hasUseTarget(card))\r\n                            return 2 + get.order(card);\r\n                        return 6 - get.value(card);\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.cards = result.cards;\r\n                        player.showCards(Evt.cards, '『重机织梦』展示手牌');\r\n                        player.addGaintag(Evt.cards, 'zhongjizhimeng');\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                },\r\n                mod: {\r\n                    color(card, player, color) {\r\n                        if (!card.cards || card.cards.length != 1)\r\n                            return;\r\n                        for (let i of card.cards) {\r\n                            if (i.hasGaintag('zhongjizhimeng')) {\r\n                                if (color == 'red')\r\n                                    return 'black';\r\n                                else if (color == 'black')\r\n                                    return 'red';\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                ai: { order: 10, player: 1 },\r\n                group: ['zhongjizhimeng_lose', 'zhongjizhimeng_clear'],\r\n                subSkill: {\r\n                    lose: {\r\n                        trigger: { player: 'loseAfter' },\r\n                        filter(Evt, player) {\r\n                            for (let i in Evt.gaintag_map) {\r\n                                if (Evt.gaintag_map[i].includes('zhongjizhimeng'))\r\n                                    return true;\r\n                            }\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            'step 0';\r\n                            player.chooseTarget('###' + get.prompt('zhongjizhimeng') + '###令一名角色回复1点体力或摸两张牌').set('ai', function (target) {\r\n                                return get.attitude(_status.event.player, target);\r\n                            });\r\n                            'step 1';\r\n                            if (result.bool) {\r\n                                Evt.target = result.targets[0];\r\n                                Evt.target.classList.add('glow');\r\n                            }\r\n                            else {\r\n                                Evt.finish();\r\n                            }\r\n                            'step 2';\r\n                            let controls = ['摸两张牌', '回复一点体力', '取消选择'];\r\n                            player.chooseControl(controls).set('ai', function () {\r\n                                return _status.event.index;\r\n                            }).set('index', 0);\r\n                            'step 3';\r\n                            Evt.target.classList.remove('glow');\r\n                            switch (result.index) {\r\n                                case 0: {\r\n                                    player.logSkill('zhongjizhimeng', Evt.target);\r\n                                    Evt.target.draw(2);\r\n                                    break;\r\n                                }\r\n                                case 1: {\r\n                                    player.logSkill('zhongjizhimeng', Evt.target);\r\n                                    Evt.target.recover(player);\r\n                                    break;\r\n                                }\r\n                                case 2: {\r\n                                    Evt.goto(0);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    clear: {\r\n                        trigger: { player: ['phaseAfter'] },\r\n                        direct: true,\r\n                        firstDo: true,\r\n                        content() {\r\n                            player.removeGaintag('zhongjizhimeng');\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            miaomiao: {\r\n                trigger: { source: 'damageBegin3' },\r\n                priority: 3,\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return Evt.num == 1;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    let check = 1;\r\n                    check -= get.recoverEffect(trigger.player, player, player);\r\n                    player.chooseTarget('『流泪喵喵』：令目标摸两张牌（取消则改本次伤害为回复）', function (card, player, target) {\r\n                        return target == _status.event.target0;\r\n                    }).set('ai', function (target) {\r\n                        if (_status.event.check > 0)\r\n                            return 0;\r\n                        return 1;\r\n                    }).set('check', check).set('target0', trigger.player);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        result.targets[0].draw(2);\r\n                        Evt.goto(3);\r\n                    }\r\n                    else {\r\n                        trigger.cancel(true);\r\n                    }\r\n                    'step 2';\r\n                    trigger.player.recover(player);\r\n                    'step 3';\r\n                    if (player.hasSkill('chengneng_used')) {\r\n                        player.draw();\r\n                    }\r\n                },\r\n                mod: {\r\n                    aiOrder(player, card, num) {\r\n                        if (typeof card == 'object' && player == _status.currentPhase && !player.needsToDiscard()) {\r\n                            return num - 10;\r\n                        }\r\n                    },\r\n                },\r\n                ai: {\r\n                    notricksource: true,\r\n                    effect: {\r\n                        player(card, player, target, current) {\r\n                            if (get.tag(card, 'damage') == 1) {\r\n                                let num = get.recoverEffect(target, player, player);\r\n                                return [0, num, 0, num];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            chengneng: {\r\n                trigger: { global: 'damageBegin3' },\r\n                priority: 3,\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return Evt.num && Evt.player != player && player.countDiscardableCards(player, 'he');\r\n                },\r\n                check(Evt, player) {\r\n                    if (Evt.num == 1)\r\n                        return get.recoverEffect(Evt.player, player, player);\r\n                    return 0;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseToDiscard(get.prompt2('chengneng'), 'he');\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.addTempSkill('chengneng_used');\r\n                        if (trigger.source == player)\r\n                            Evt.goto(3);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    trigger.source = player;\r\n                    Evt.finish();\r\n                    'step 3';\r\n                    trigger.cancel();\r\n                    'step 4';\r\n                    trigger.player.loseHp(trigger.num);\r\n                },\r\n                subSkill: {\r\n                    used: {\r\n                        mark: true,\r\n                        marktext: \"龙\",\r\n                        intro: {\r\n                            name: '逞能龙息',\r\n                            content: '本回合已发动『逞能龙息』',\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            shenglang: {\r\n                enable: 'phaseUse',\r\n                viewAs: { name: 'juedou' },\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.hasCard(card => get.name(card) == 'sha');\r\n                },\r\n                filterCard(card, player) {\r\n                    return get.name(card) == 'sha';\r\n                },\r\n                check(card) {\r\n                    return 8 - get.value(card);\r\n                },\r\n                ai: {\r\n                    basic: {\r\n                        order: 10\r\n                    },\r\n                    directHit_ai: true,\r\n                    skillTagFilter(player, tag, arg) {\r\n                        if (tag == 'directHit_ai') {\r\n                            if (arg && get.name(arg.card) == 'juedou')\r\n                                return true;\r\n                            return false;\r\n                        }\r\n                    },\r\n                    result: { player: 1 },\r\n                },\r\n                group: 'shenglang_drawBy',\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: { player: 'phaseEnd' },\r\n                        priority: 7,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            let num = 0, going = 0;\r\n                            game.getGlobalHistory('cardMove', evt => {\r\n                                if (evt == Evt || (evt.name != 'lose' && evt.name != 'cardsDiscard'))\r\n                                    return false;\r\n                                if (evt.player == player)\r\n                                    going++;\r\n                                if (evt.name == 'lose' && evt.position != ui.discardPile)\r\n                                    return false;\r\n                                for (let i = 0; i < evt.cards.length; i++) {\r\n                                    let card = evt.cards[i];\r\n                                    if (get.name(card) == 'sha' && get.suit(card) == 'spade')\r\n                                        num++;\r\n                                }\r\n                            }, Evt);\r\n                            return going && num;\r\n                        },\r\n                        content() {\r\n                            let num = 0;\r\n                            game.getGlobalHistory('cardMove', evt => {\r\n                                if (evt == Evt || (evt.name != 'lose' && evt.name != 'cardsDiscard'))\r\n                                    return false;\r\n                                if (evt.name == 'lose' && evt.position != ui.discardPile)\r\n                                    return false;\r\n                                for (let i = 0; i < evt.cards.length; i++) {\r\n                                    let card = evt.cards[i];\r\n                                    if (get.name(card) == 'sha' && get.suit(card) == 'spade')\r\n                                        num++;\r\n                                }\r\n                            }, Evt);\r\n                            Evt.num = num;\r\n                            player.logSkill('shenglang');\r\n                            player.draw(Evt.num);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            nodao: {\r\n                audio: 2,\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    return !player.getEquip(1) && player.countCards('h', 'sha') > 0;\r\n                },\r\n                filterCard: { name: 'sha' },\r\n                prepare(cards, player) {\r\n                    player.$throw(cards, 1000);\r\n                    game.log(player, '将', cards, '置入了弃牌堆');\r\n                },\r\n                discard: false,\r\n                loseTo: 'discardPile',\r\n                visible: true,\r\n                delay: 0.5,\r\n                content() {\r\n                    'step 0';\r\n                    player.draw();\r\n                    'step 1';\r\n                    if (result && get.itemtype(result) == 'cards') {\r\n                        for (let i of result) {\r\n                            if (get.subtype(i) == 'equip1') {\r\n                                Evt.card = i;\r\n                                player.chooseBool('『无刀之咎』：是否装备' + get.translation(Evt.card) + '并回复一点体力？');\r\n                            }\r\n                        }\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        player.equip(Evt.card);\r\n                        player.recover();\r\n                    }\r\n                },\r\n                ai: {\r\n                    basic: {\r\n                        order: 2\r\n                    },\r\n                    result: {\r\n                        player(player, target) {\r\n                            if (player.getStat().card.juedou)\r\n                                return 1;\r\n                            else\r\n                                return 0.5;\r\n                        },\r\n                    },\r\n                },\r\n                mod: {\r\n                    aiOrder(player, card, num) {\r\n                        if (get.itemtype(card) == 'card' && get.subtype(card) == 'equip1')\r\n                            return (num > 1 ? 1 : num);\r\n                    },\r\n                    aiValue(player, card, num) {\r\n                        if (get.itemtype(card) == 'card' && get.subtype(card) == 'equip1')\r\n                            return num / 10;\r\n                        if (get.itemtype(card) == 'card' && player.getStat().card.juedou && get.name(card) == 'sha')\r\n                            return num / 10;\r\n                    },\r\n                },\r\n            },\r\n            ming_echi: {},\r\n            echi: {\r\n                trigger: {\r\n                    global: \"gainAfter\",\r\n                },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    if (Evt.player == player)\r\n                        return false;\r\n                    let evt = Evt.getParent('phaseDraw');\r\n                    if (!evt || evt.name != 'phaseDraw') {\r\n                        return Evt.cards && Evt.cards.length > 0 && Evt.player.hp >= player.hp;\r\n                    }\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.tar = trigger.player;\r\n                    let check = get.attitude(player, Evt.player) < 0;\r\n                    player.chooseCard(get.prompt2('echi', Evt.tar), function (card, player, target) {\r\n                        return !card.hasGaintag('ming_');\r\n                    }).set('logSkill', ['echi', Evt.tar]).set('ai', card => {\r\n                        if (!_status.event.check)\r\n                            return 0;\r\n                        if (get.type(card) == 'equip')\r\n                            return 12 - get.value(card);\r\n                        return 8 - get.value(card);\r\n                    }).set('check', check);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.cardtype = get.type2(result.cards[0]);\r\n                        player.showCards(result.cards, '『阿斥』：亮出手牌');\r\n                        player.addGaintag(result.cards, 'ming_echi');\r\n                        player.$give(result.cards, player, false);\r\n                        game.delayx();\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    let type = Evt.cardtype;\r\n                    Evt.tar.chooseToDiscard('弃置一张为' + get.translation(type) + '牌的牌或失去一点体力', function (card, player, target) {\r\n                        return get.type2(card) == _status.event.type;\r\n                    }).set('ai', card => {\r\n                        if (player.hp == 1)\r\n                            return 11 - get.value(card);\r\n                        return 6 - get.value(card);\r\n                    }).set('type', type);\r\n                    'step 3';\r\n                    if (!result.bool) {\r\n                        Evt.tar.loseHp();\r\n                    }\r\n                }\r\n            },\r\n            mudu: {\r\n                trigger: {\r\n                    global: ['phaseZhunbeiEnd', 'phaseJudgeEnd', 'phaseDrawEnd', 'phaseUseEnd', 'phaseDiscardEnd', 'phaseJieshuEnd']\r\n                },\r\n                filter(Evt, player) {\r\n                    if (Evt.player == player || Evt.player.countCards('he') < 2)\r\n                        return false;\r\n                    if (player.getHistory('lose', evt => {\r\n                        return evt.getParent(Evt.name) == Evt;\r\n                    }).length >= 1)\r\n                        return true;\r\n                    return false;\r\n                },\r\n                check(Evt, player) {\r\n                    return get.attitude(player, Evt.player) <= 0;\r\n                },\r\n                popup: false,\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    Evt.tar = trigger.player;\r\n                    player.choosePlayerCard(Evt.tar, 'he', 2, '移除' + get.translation(Evt.tar) + '两张牌', true).set('ai', function (button) {\r\n                        let info = get.info(button.link);\r\n                        if (info.onLose && get.position(button.link) == 'e')\r\n                            return 0;\r\n                        return get.value(button.link, player, 'raw');\r\n                    }).set('logSkill', ['mudu', Evt.tar]);\r\n                    'step 1';\r\n                    if ((_a = result === null || result === void 0 ? void 0 : result.links) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        let str = 'mudu_card' + player.playerid;\r\n                        if (Evt.tar.storage[str]) {\r\n                            Evt.tar.storage[str] = Evt.tar.storage[str].concat(result.links);\r\n                        }\r\n                        else {\r\n                            Evt.tar.storage[str] = result.links.slice(0);\r\n                        }\r\n                        Evt.tar.addSkill('mudu_card');\r\n                        Evt.tar.lose(result.links, ui.special, 'toStorage');\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    card: {\r\n                        mark: true,\r\n                        trigger: {\r\n                            global: 'phaseEnd'\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return true;\r\n                        },\r\n                        forced: true,\r\n                        intro: {\r\n                            content: 'cardCount',\r\n                            onunmark(storage, player) {\r\n                                if (storage && storage.length) {\r\n                                    player.$throw(storage, 1000);\r\n                                    game.cardsDiscard(storage);\r\n                                    game.log(storage, '被置入了弃牌堆');\r\n                                    storage.length = 0;\r\n                                }\r\n                            },\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            let keys = Object.keys(player.storage);\r\n                            for (let i = 0; i < keys.length; i++) {\r\n                                if (keys[i].indexOf('mudu_card') == 0)\r\n                                    keys[i] = keys[i].slice(9);\r\n                                else\r\n                                    keys.splice(i--, 1);\r\n                            }\r\n                            Evt.keys = keys;\r\n                            'step 1';\r\n                            let key = Evt.keys.pop(), source = game.filterPlayer(cur => { return cur.playerid == key; });\r\n                            let str = 'mudu_card' + key;\r\n                            if (!source.length) {\r\n                                player.gain(player.storage[str], 'fromStorage');\r\n                                delete player.storage[str];\r\n                            }\r\n                            else {\r\n                                source = source[0];\r\n                                player.chooseButton(['选择收回的牌', player.storage[str], 'hidden'], true).set('callback', function (player, result) {\r\n                                    let cards = player.storage[str].slice(0).removeArray(result.links);\r\n                                    let source = _status.event.source;\r\n                                    player.gain(result.links);\r\n                                    if (source.isIn()) {\r\n                                        player.$give(cards, source);\r\n                                        source.gain(cards);\r\n                                    }\r\n                                    delete player.storage[str];\r\n                                }).set('source', source);\r\n                            }\r\n                            if (Evt.keys.length > 0)\r\n                                Evt.redo();\r\n                            else\r\n                                player.removeSkill('mudu_card');\r\n                        },\r\n                    },\r\n                },\r\n                ai: {\r\n                    threaten: 1.3\r\n                }\r\n            },\r\n            yingkuo: {\r\n                trigger: {\r\n                    player: ['gainAfter', 'equipAfter'],\r\n                },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'equip' && Evt.swapped)\r\n                        return false;\r\n                    return game.hasPlayer(cur => {\r\n                        if (cur == player)\r\n                            return false;\r\n                        if (Evt.name == 'equip')\r\n                            return cur.countCards('e') == player.countCards('e');\r\n                        else\r\n                            return cur.countCards('h') == player.countCards('h');\r\n                    });\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseTarget(get.prompt2('yingkuo'), function (card, player, target) {\r\n                        if (player == target)\r\n                            return false;\r\n                        if (_status.event.type == 'equip')\r\n                            return target.countCards('e') == player.countCards('e');\r\n                        else\r\n                            return target.countCards('h') == player.countCards('h');\r\n                    }).set('ai', function (target) {\r\n                        return -get.attitude2(target);\r\n                    }).set('type', trigger.name);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.tar = result.targets[0];\r\n                        player.logSkill('yingkuo', Evt.tar);\r\n                        Evt.tar.chooseToDiscard((trigger.name == 'equip' ? 'e' : 'h'), true);\r\n                    }\r\n                }\r\n            },\r\n            shengni: {\r\n                enable: 'chooseToUse',\r\n                viewAs(cards, player) {\r\n                    if (player.storage.shengni_cardsDis) {\r\n                        let cur = player.storage.shengni_cardsDis[0];\r\n                        return {\r\n                            name: get.name(cur),\r\n                            suit: get.suit(cur),\r\n                            number: get.number(cur),\r\n                            nature: get.nature(cur),\r\n                        };\r\n                    }\r\n                    return null;\r\n                },\r\n                filter(Evt, player) {\r\n                    let filter = Evt.filterCard;\r\n                    if (!player.storage.shengni_cardsDis || !player.storage.shengni_cardsDis.length)\r\n                        return false;\r\n                    return filter(player.storage.shengni_cardsDis[0], player, Evt);\r\n                },\r\n                check(card) {\r\n                    let player = _status.event.player;\r\n                    return player.getUseValue(player.storage.shengni_cardsDis[0]) > player.getUseValue(card);\r\n                },\r\n                filterCard(card, player, Evt) {\r\n                    if (player.hasSkill('shengni_used'))\r\n                        return true;\r\n                    return false;\r\n                },\r\n                selectCard() {\r\n                    let player = _status.event.player;\r\n                    if (player.hasSkill('shengni_used'))\r\n                        return 1;\r\n                    return -1;\r\n                },\r\n                precontent() {\r\n                    player.addTempSkill('shengni_used');\r\n                },\r\n                ignoreMod: true,\r\n                position: 'h',\r\n                group: ['shengni_cardsDis', 'shengni_cardsDis2'],\r\n                subSkill: {\r\n                    used: {},\r\n                    cardsDis: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = [];\r\n                        },\r\n                        marktext: '拟',\r\n                        intro: {\r\n                            name: '声拟',\r\n                            content(storage, player) {\r\n                                if (!storage)\r\n                                    return '上一次进入弃牌堆的牌不满足条件';\r\n                                return '上一次进入弃牌堆的基本牌/通常锦囊牌为' + get.translation(storage);\r\n                            }\r\n                        },\r\n                        trigger: { global: ['loseAfter', 'cardsDiscardAfter'] },\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            if (Evt.name == 'cardsDiscard' && (Evt.getParent().name != 'orderingDiscard'\r\n                                || (!Evt.getParent().relatedEvent || !Evt.getParent().relatedEvent.player || Evt.getParent().relatedEvent.name == 'judge'\r\n                                    || Evt.getParent().relatedEvent.player == player)))\r\n                                return false;\r\n                            if (Evt.name == 'lose' && (Evt.position != ui.discardPile\r\n                                || Evt.player == player))\r\n                                return false;\r\n                            return Evt.cards.filter(card => get.position(card, true) == 'd'\r\n                                && ['basic', 'trick'].includes(get.type(card))).length > 0;\r\n                        },\r\n                        content() {\r\n                            let cards = trigger.cards.filter(card => get.position(card, true) == 'd' && ['basic', 'trick'].includes(get.type(card)));\r\n                            player.storage.shengni_cardsDis = [cards.pop()];\r\n                            player.markSkill('shengni_cardsDis');\r\n                        },\r\n                    },\r\n                    cardsDis2: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = [];\r\n                        },\r\n                        trigger: { global: ['loseAfter', 'cardsDiscardAfter'] },\r\n                        direct: true,\r\n                        firstDo: true,\r\n                        filter(Evt, player) {\r\n                            return Evt.cards.filter(card => get.position(card, true) == 'd').length > 0;\r\n                        },\r\n                        content() {\r\n                            delete player.storage.shengni_cardsDis;\r\n                            player.markSkill('shengni_cardsDis');\r\n                        },\r\n                    },\r\n                },\r\n                ai: {\r\n                    threaten: 1.3\r\n                }\r\n            },\r\n            zhuqiao: {\r\n                audio: 5,\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = 0;\r\n                },\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    return player.storage.zhuqiao < 24;\r\n                },\r\n                check(card, cards) {\r\n                    let player = _status.event.player;\r\n                    if (player.storage.zhuqiao_addCard && player.storage.zhuqiao_addCard.includes(get.suit(card)))\r\n                        return 6 - get.value(card);\r\n                    return 9 - get.value(card);\r\n                },\r\n                filterCard: true,\r\n                prepare(cards, player) {\r\n                    player.$throw(cards, 1000);\r\n                    game.log(player, '将', cards, '置入了弃牌堆');\r\n                },\r\n                position: 'he',\r\n                discard: false,\r\n                loseTo: 'discardPile',\r\n                visible: true,\r\n                delay: 0.5,\r\n                content() {\r\n                    player.draw();\r\n                    player.storage.zhuqiao += get.number(cards[0]);\r\n                    if (!player.hasSkill('zhuqiao_addCard'))\r\n                        player.addTempSkill('zhuqiao_addCard');\r\n                    if (!player.storage.zhuqiao_addCard)\r\n                        player.storage.zhuqiao_addCard = [];\r\n                    player.storage.zhuqiao_addCard.add(get.suit(cards[0]));\r\n                    player.markSkill('zhuqiao_addCard');\r\n                },\r\n                ai: {\r\n                    basic: {\r\n                        order: 1,\r\n                    },\r\n                    result: {\r\n                        player: 0.5,\r\n                    },\r\n                    threaten: 1.5\r\n                },\r\n                group: ['zhuqiao_clear'],\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { player: 'phaseAfter' },\r\n                        priority: 24,\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            player.storage.zhuqiao = 0;\r\n                        },\r\n                    },\r\n                    addCard: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = [];\r\n                        },\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '本回合重铸牌的花色：$',\r\n                        },\r\n                        trigger: { player: 'phaseEnd' },\r\n                        priority: 24,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            return game.countPlayer(cur => {\r\n                                return player.storage.zhuqiao_addCard.length > cur.countCards('h');\r\n                            });\r\n                        },\r\n                        onremove(player) {\r\n                            delete player.storage.zhuqiao_addCard;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            var _a;\r\n                            Evt.num = player.storage.zhuqiao_addCard.length;\r\n                            player.chooseTarget('###' + get.prompt('zhuqiao') + '###令一名角色将手牌数补至' + get.cnNumber(Evt.num) + '张', function (card, player, target) {\r\n                                return _status.event.num > target.countCards('h');\r\n                            }).set('ai', function (target) {\r\n                                let player = _status.event.player;\r\n                                return (_status.event.num - target.countCards('h')) * get.attitude(player, target);\r\n                            }).set('num', Evt.num);\r\n                            'step 1';\r\n                            if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                                Evt.target = result.targets[0];\r\n                                player.logSkill('zhuqiao', Evt.target);\r\n                                Evt.target.gain(get.cards(Evt.num - Evt.target.countCards('h')), 'draw');\r\n                            }\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            pojie: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = 0;\r\n                },\r\n                trigger: {\r\n                    global: ['loseAfter', 'equipAfter'],\r\n                },\r\n                marktext: \"戒\",\r\n                mark: true,\r\n                intro: {\r\n                    content: '弃牌阶段改为弃置#张牌',\r\n                },\r\n                filter(Evt, player) {\r\n                    var _a;\r\n                    if (player != _status.currentPhase)\r\n                        return false;\r\n                    if (Evt.name == 'equip') {\r\n                        return true;\r\n                    }\r\n                    return (_a = Evt === null || Evt === void 0 ? void 0 : Evt.es) === null || _a === void 0 ? void 0 : _a.length;\r\n                },\r\n                content() {\r\n                    player.draw();\r\n                    player.addMark('pojie', 1, false);\r\n                },\r\n                group: 'pojie_phaseDiscard',\r\n                subSkill: {\r\n                    phaseDiscard: {\r\n                        trigger: { player: ['phaseDiscardBegin', 'phaseEnd'] },\r\n                        direct: true,\r\n                        lastDo: true,\r\n                        priority: 2,\r\n                        filter(Evt, player) {\r\n                            return player.storage.pojie > 0;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            if (trigger.name == 'phaseDiscard') {\r\n                                player.logSkill('pojie');\r\n                                if (!trigger.num)\r\n                                    trigger.num = player.storage.pojie;\r\n                            }\r\n                            'step 1';\r\n                            player.storage.pojie = 0;\r\n                            player.unmarkSkill('pojie');\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            dazhen: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.getEquip(1);\r\n                },\r\n                filterCard(card, player) {\r\n                    return get.subtype(card) == 'equip1';\r\n                },\r\n                discard: false,\r\n                lose: false,\r\n                position: 'e',\r\n                filterTarget(card, player, target) {\r\n                    return target != player;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.$give(cards, target, false);\r\n                    target.equip(cards[0]);\r\n                    'step 1';\r\n                    Evt.num = Math.abs(player.getHandcardLimit() - player.countCards('h'));\r\n                    target.chooseToDiscard('『大振』：需要弃置' + get.cnNumber(Evt.num) + '张牌', Evt.num, 'he', true);\r\n                },\r\n                ai: {\r\n                    order: 6,\r\n                    result: {\r\n                        target(player, target) {\r\n                            if (player.countCards('h') > player.getHandcardLimit()) {\r\n                                return -1;\r\n                            }\r\n                            else {\r\n                                return 0;\r\n                            }\r\n                        },\r\n                        player(player, target) {\r\n                            if (target.getEquip(1))\r\n                                return 1;\r\n                            else\r\n                                return -0.5;\r\n                        },\r\n                    },\r\n                    threaten: 1.2,\r\n                },\r\n            },\r\n            tuncai: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = true;\r\n                },\r\n                trigger: {\r\n                    player: 'discardAfter',\r\n                    global: 'drawAfter',\r\n                },\r\n                round: 1,\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'draw')\r\n                        return Evt.player != player && player.storage.tuncai;\r\n                    else\r\n                        return Evt.cards.length && !player.storage.tuncai;\r\n                },\r\n                check(Evt, player) {\r\n                    if (player.storage.tuncai == true)\r\n                        return Evt.num >= 2;\r\n                    return true;\r\n                },\r\n                popup: false,\r\n                content() {\r\n                    'step 0';\r\n                    if (trigger.name == 'draw') {\r\n                        player.logSkill('tuncai', player);\r\n                        player.draw(trigger.num);\r\n                        player.storage.tuncai = !player.storage.tuncai;\r\n                        Evt.finish();\r\n                    }\r\n                    else\r\n                        player.chooseTarget(get.prompt2('tuncai'), function (card, player, target) {\r\n                            if (player == target)\r\n                                return false;\r\n                            return target.countCards('he');\r\n                        }).set('ai', function (target) {\r\n                            return -get.attitude2(target);\r\n                        });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.tar = result.targets[0];\r\n                        player.logSkill('tuncai', Evt.tar);\r\n                        player.storage.tuncai = !player.storage.tuncai;\r\n                        Evt.tar.chooseToDiscard(trigger.cards.length, true, 'he');\r\n                    }\r\n                }\r\n            },\r\n            zhidu: {\r\n                trigger: { global: ['damageAfter', 'dying'] },\r\n                zhuSkill: true,\r\n                filter(Evt, player) {\r\n                    if (!player.hasZhuSkill('zhidu') || Evt.player.group != player.group)\r\n                        return false;\r\n                    if (Evt.name == 'damage')\r\n                        return Evt.num >= 2;\r\n                    return true;\r\n                },\r\n                content() {\r\n                    player.storage.tuncai = !player.storage.tuncai;\r\n                    game.delay();\r\n                    let roundname = 'tuncai_roundcount';\r\n                    if (player.hasMark(roundname)) {\r\n                        player.popup('重置');\r\n                        let next = game.createEvent('resetSkill');\r\n                        [next.player, next.resetSkill] = [player, 'tuncai'];\r\n                        next.setContent('resetRound');\r\n                    }\r\n                },\r\n                ai: {\r\n                    combo: 'tuncai',\r\n                    threaten: 1.3\r\n                }\r\n            },\r\n            huanxi: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = true;\r\n                },\r\n                trigger: {\r\n                    player: ['phaseUseBegin', 'phaseUseEnd'],\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.countCards('h') > 0;\r\n                },\r\n                check(Evt, player) {\r\n                    let cards = player.getCards('h');\r\n                    let value = 0;\r\n                    for (let i of cards) {\r\n                        value += get.value(i);\r\n                    }\r\n                    value /= player.countCards('h');\r\n                    return (value < 6 && player.countCards('h') == player.hp) || value < 4;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.cards = player.getCards('h');\r\n                    player.discard(Evt.cards);\r\n                    'step 1';\r\n                    player.draw(Evt.cards.length);\r\n                    'step 2';\r\n                    let names = Evt.cards.map(function (i) {\r\n                        return get.name(i);\r\n                    });\r\n                    if (!trigger.huanxi) {\r\n                        trigger.huanxi = names;\r\n                    }\r\n                    else {\r\n                        if (trigger.huanxi.length + names.length == trigger.huanxi.addArray(names).length) {\r\n                            if (player.hasSkill('celv_cardDisable')) {\r\n                                let next = game.createEvent('resetSkill');\r\n                                [next.player, next.resetSkill] = [player, 'celv'];\r\n                                next.setContent(function () {\r\n                                    player.popup('重置');\r\n                                    player.removeSkill('celv_cardDisable');\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            celv: {\r\n                trigger: { player: ['changeHp', 'discardAfter'] },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'changeHp')\r\n                        return Evt.num < 0;\r\n                    return Evt.cards.length == player.hp;\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseTarget(get.prompt2('celv'), function (card, player, target) {\r\n                        if (player == target)\r\n                            return false;\r\n                        return target.countGainableCards(player, 'h');\r\n                    }).set('ai', function (target) {\r\n                        let player = _status.event.player;\r\n                        return get.effect(target, { name: 'shunshou_copy2' }, player, player);\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.tar = result.targets[0];\r\n                        player.logSkill('celv', Evt.tar);\r\n                        player.gainPlayerCard(Evt.tar, 'h', true, 'visibleMove');\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        let card = result.cards[0];\r\n                        player.showCards(card, '『册吕』获得手牌');\r\n                        if (!player.storage.celv_cardDisable)\r\n                            player.storage.celv_cardDisable = [];\r\n                        player.storage.celv_cardDisable.add(get.name(card));\r\n                        if (!player.hasSkill('celv_cardDisable'))\r\n                            player.addSkill('celv_cardDisable');\r\n                        player.markSkill('celv_cardDisable');\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    cardDisable: {\r\n                        marktext: '吕',\r\n                        intro: {\r\n                            name: '春绿',\r\n                            content: '不能使用或打出：$'\r\n                        },\r\n                        onremove: true,\r\n                        mod: {\r\n                            cardEnabled2(card, player) {\r\n                                if (player.storage.celv_cardDisable.includes(get.name(card, player)))\r\n                                    return false;\r\n                            },\r\n                        },\r\n                    }\r\n                },\r\n                ai: {\r\n                    combo: 'tuncai',\r\n                    threaten: 1.3\r\n                }\r\n            },\r\n            mianmo: {\r\n                audio: 3,\r\n                trigger: { player: 'useCard1' },\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('mianmo_used'))\r\n                        return false;\r\n                    return Evt.targets && Evt.targets.length && Evt.cards && Evt.cards.length;\r\n                },\r\n                direct: true,\r\n                firstDo: true,\r\n                priority: 4,\r\n                content() {\r\n                    'step 0';\r\n                    Evt.num = 0;\r\n                    for (let i = 0; i < trigger.cards.length; i++) {\r\n                        Evt.num += get.number(trigger.cards[i], player);\r\n                    }\r\n                    Evt.card = trigger.cards[0];\r\n                    let next = player.chooseTarget();\r\n                    next.set('prompt', get.prompt2('mianmo').replace('之点数或合计点数', Evt.num));\r\n                    next.set('filterTarget', function () {\r\n                        return true;\r\n                    });\r\n                    next.set('complexTarget', true);\r\n                    next.set('selectTarget', function () {\r\n                        let num = _status.event.num, sum = 0;\r\n                        for (let j = 0; j < ui.selected.targets.length; j++) {\r\n                            sum += ui.selected.targets[j].hp;\r\n                        }\r\n                        if (num == sum)\r\n                            return [0, ui.selected.targets.length];\r\n                        else\r\n                            return [ui.selected.targets.length + 1, ui.selected.targets.length + 1];\r\n                    });\r\n                    next.set('num', Evt.num);\r\n                    next.set('ai', function (target) {\r\n                        let trigger = _status.event.getTrigger();\r\n                        let player = _status.event.player;\r\n                        return get.effect(target, trigger.card, player, player);\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.targets = result.targets.slice(0);\r\n                        player.logSkill('mianmo', Evt.targets);\r\n                        if (player.storage.tiaolv_up && player.storage.tiaolv_up.includes(Evt.card))\r\n                            Evt.goto(4);\r\n                        if (player.storage.tiaolv_down && player.storage.tiaolv_down.includes(Evt.card))\r\n                            Evt.goto(6);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    if (Evt.targets.includes(player)) {\r\n                        if (!player.canUse(Evt.card, player))\r\n                            Evt.targets.remove(player);\r\n                    }\r\n                    else {\r\n                        player.addTempSkill('mianmo_used');\r\n                    }\r\n                    'step 3';\r\n                    trigger.targets = Evt.targets;\r\n                    Evt.finish();\r\n                    'step 4';\r\n                    player.chooseBool('眠魔：是否令目标各摸一张牌？').set('ai', function () {\r\n                        let player = _status.event.player;\r\n                        if (_status.event.targets.includes(player))\r\n                            return true;\r\n                        return false;\r\n                    }).set('targets', Evt.targets);\r\n                    'step 5';\r\n                    if (result.bool) {\r\n                        game.asyncDraw(Evt.targets);\r\n                    }\r\n                    Evt.goto(2);\r\n                    'step 6';\r\n                    player.chooseBool('眠魔：是否令目标横置？').set('ai', function () {\r\n                        return true;\r\n                    });\r\n                    'step 7';\r\n                    if (result.bool) {\r\n                        Evt.targets.forEach(function (tar) {\r\n                            if (!tar.isLinked())\r\n                                tar.link();\r\n                        });\r\n                    }\r\n                    Evt.goto(2);\r\n                },\r\n                subSkill: {\r\n                    used: {},\r\n                },\r\n            },\r\n            tiaolv: {\r\n                audio: 4,\r\n                trigger: { player: 'useCard1' },\r\n                filter(Evt, player) {\r\n                    return Evt.cards && Evt.cards.length == 1;\r\n                },\r\n                firstDo: true,\r\n                direct: true,\r\n                priority: 5,\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseControl(['增加', '减少', 'cancel2']).set('prompt', get.prompt2('tiaolv'));\r\n                    'step 1';\r\n                    if (result.control != 'cancel2') {\r\n                        player.logSkill('tiaolv');\r\n                        switch (result.control) {\r\n                            case '增加':\r\n                                player.storage.tiaolv_up.addArray(trigger.cards);\r\n                                break;\r\n                            case '减少':\r\n                                player.storage.tiaolv_down.addArray(trigger.cards);\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                },\r\n                group: ['tiaolv_up', 'tiaolv_down'],\r\n                subSkill: {\r\n                    up: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = [];\r\n                        },\r\n                        trigger: { player: 'useCardAfter' },\r\n                        firstDo: true,\r\n                        silent: true,\r\n                        direct: true,\r\n                        priority: 5,\r\n                        content() {\r\n                            if (player.storage[Evt.name].length)\r\n                                player.storage[Evt.name].length = 0;\r\n                        },\r\n                        mod: {\r\n                            number(card, player, number) {\r\n                                let num = player.getDamagedHp() || 1;\r\n                                if (player.storage.tiaolv_up.includes(card))\r\n                                    return number + num;\r\n                            },\r\n                        },\r\n                    },\r\n                    down: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = [];\r\n                        },\r\n                        trigger: { player: 'useCardAfter' },\r\n                        firstDo: true,\r\n                        silent: true,\r\n                        direct: true,\r\n                        priority: 5,\r\n                        content() {\r\n                            if (player.storage[Evt.name].length)\r\n                                player.storage[Evt.name].length = 0;\r\n                        },\r\n                        mod: {\r\n                            number(card, player, number) {\r\n                                let num = player.getDamagedHp() || 1;\r\n                                if (player.storage.tiaolv_down.includes(card))\r\n                                    return number - num;\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            niwei: {\r\n                marktext: '弼',\r\n                intro: {\r\n                    name: '味增弼佐',\r\n                    content(storage, player) {\r\n                        let str = '<ul style=\"padding-top:0;margin-top:0\"><p>本回合变为逆位的牌名</p>';\r\n                        for (let i = 0; i < storage.length; i++) {\r\n                            str += '<li>' + get.translation(storage[i]);\r\n                        }\r\n                        str += '</ul>';\r\n                        return str;\r\n                    },\r\n                },\r\n                onremove(player, skill) {\r\n                    player.unmarkSkill(skill);\r\n                    delete player.storage[skill];\r\n                },\r\n            },\r\n            ming_niwei: {\r\n                trigger: { global: ['shaBegin', 'shanBegin', 'taoBegin', 'jiuBegin'] },\r\n                direct: true,\r\n                lastDo: true,\r\n                priority: 3,\r\n                filter(Evt, player) {\r\n                    if (Evt.player.hasSkill('niwei') && Evt.player.storage.niwei && Evt.player.storage.niwei.includes(Evt.name))\r\n                        return true;\r\n                    if (Evt.player != player)\r\n                        return false;\r\n                    let loser = player.getHistory('lose', evt => {\r\n                        return (evt.type == 'use' && evt.getParent().card && evt.getParent().card == Evt.card);\r\n                    });\r\n                    loser = loser[loser.length - 1];\r\n                    if (loser.getParent()) {\r\n                        if (Evt.getParent() == loser.getParent()) {\r\n                            for (let i in loser.gaintag_map) {\r\n                                if (loser.gaintag_map[i].includes('ming_niwei'))\r\n                                    return true;\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                content() {\r\n                    let fun = lib.card['niwei_' + trigger.name].content;\r\n                    if (fun)\r\n                        trigger.setContent(fun);\r\n                },\r\n                ai: {\r\n                    threaten: 0.8,\r\n                }\r\n            },\r\n            xuanxu: {\r\n                audio: 4,\r\n                global: 'xuanxu_put',\r\n                group: 'ming_niwei',\r\n                trigger: { player: 'phaseUseBegin' },\r\n                direct: true,\r\n                lastDo: true,\r\n                priority: 3,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h', card => get.type(card) == 'basic'\r\n                        && !card.hasGaintag('ming_'));\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseCard(get.prompt2('xuanxu'), [1, Infinity], card => {\r\n                        return get.type(card) == 'basic' && !card.hasGaintag('ming_');\r\n                    }).set('ai', card => {\r\n                        return 7 - get.useful(card);\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool && result.cards && result.cards.length) {\r\n                        Evt.cards = result.cards.slice(0);\r\n                        player.showCards(Evt.cards, '『玄虚映实』亮出手牌');\r\n                        player.addGaintag(Evt.cards, 'ming_niwei');\r\n                        game.delayx();\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    put: {\r\n                        mod: {\r\n                            targetEnabled(card, player, target, now) {\r\n                                if (!card.cards)\r\n                                    return;\r\n                                for (let i of card.cards) {\r\n                                    if (!i.hasGaintag('ming_niwei'))\r\n                                        return;\r\n                                }\r\n                                if (now === false)\r\n                                    return true;\r\n                                let info = get.info(card), filter = info.filterTarget, range = info.range, outrange = info.outrange;\r\n                                if (typeof filter == 'boolean')\r\n                                    return !filter;\r\n                                if (range == undefined && outrange == undefined) {\r\n                                    if (typeof filter == 'function') {\r\n                                        return !filter(card, player, target);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    return lib.filter.targetInRange(card, player, target) || !filter(card, player, target);\r\n                                }\r\n                            },\r\n                        }\r\n                    }\r\n                },\r\n                mod: {\r\n                    playerEnabled(card, player, target, now) {\r\n                        if (!card.cards)\r\n                            return;\r\n                        for (let i of card.cards) {\r\n                            if (!i.hasGaintag('ming_niwei'))\r\n                                return;\r\n                        }\r\n                        let info = get.info(card), filter = info.filterTarget, range = info.range, outrange = info.outrange;\r\n                        if (typeof filter == 'boolean')\r\n                            return !filter;\r\n                        if (range == undefined && outrange == undefined) {\r\n                            if (typeof filter == 'function') {\r\n                                return !filter(card, player, target);\r\n                            }\r\n                        }\r\n                        else {\r\n                            return lib.filter.targetInRange(card, player, target) || !filter(card, player, target);\r\n                        }\r\n                    },\r\n                    selectTarget(card, player, range) {\r\n                        if (!card.cards)\r\n                            return;\r\n                        for (let i of card.cards) {\r\n                            if (!i.hasGaintag('ming_niwei'))\r\n                                return;\r\n                        }\r\n                        if (range[1] == -1)\r\n                            range[1] = 1;\r\n                    },\r\n                    targetInRange(card, player, target, now) {\r\n                        if (!card.cards)\r\n                            return;\r\n                        for (let i of card.cards) {\r\n                            if (!i.hasGaintag('ming_niwei'))\r\n                                return;\r\n                        }\r\n                        if (_status.niweing)\r\n                            return;\r\n                        _status.niwei = true;\r\n                        if (typeof now == 'boolean')\r\n                            return !now;\r\n                        return lib.filter.targetInRange(card, player, target);\r\n                        delete _status.niwei;\r\n                    },\r\n                    ignoredHandcard(card, player) {\r\n                        if (card.hasGaintag('ming_niwei')) {\r\n                            return true;\r\n                        }\r\n                    },\r\n                    cardDiscardable(card, player, name) {\r\n                        if (name == 'phaseDiscard' && card.hasGaintag('ming_niwei')) {\r\n                            return false;\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            weizeng: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                trigger: { global: 'phaseBegin' },\r\n                direct: true,\r\n                lastDo: true,\r\n                priority: 3,\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && player.countCards('h', card => get.type(card) == 'basic' && card.hasGaintag('ming_'));\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    Evt.target = trigger.player;\r\n                    player.chooseCard(get.prompt2('weizeng'), [1, Infinity], card => {\r\n                        return get.type(card) == 'basic' && card.hasGaintag('ming_');\r\n                    }).set('ai', card => {\r\n                        if (card.hasGaintag('ming_niwei') || ['shan', 'tao'].includes(get.name(card)))\r\n                            return 0;\r\n                        return Math.random() - 0.2;\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool && result.cards && result.cards.length) {\r\n                        Evt.cards = result.cards.slice(0);\r\n                        player.chooseButton(true, Evt.cards.length, ['按顺序将卡牌置于牌堆顶（先选择的在上）', Evt.cards]).set('ai', function (button) {\r\n                            let value = get.value(button.link);\r\n                            if (_status.event.reverse)\r\n                                return value;\r\n                            return -value;\r\n                        }).set('reverse', ((_status.currentPhase) ? get.attitude(player, _status.currentPhase) > 0 : false));\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        Evt.linkcards = result.links.slice(0);\r\n                        player.lose(Evt.cards, ui.special);\r\n                        Evt.target.addTempSkill('weizeng_put');\r\n                        Evt.target.addTempSkill('niwei');\r\n                        Evt.target.storage.weizeng_put = [];\r\n                        Evt.target.storage.weizeng_put.addArray(Evt.cards);\r\n                        game.log(player, '将', Evt.cards, '置于牌堆顶');\r\n                    }\r\n                    'step 3';\r\n                    let cards = Evt.linkcards;\r\n                    while (cards.length) {\r\n                        ui.cardPile.insertBefore(cards.pop().fix(), ui.cardPile.firstChild);\r\n                    }\r\n                    game.updateRoundNumber();\r\n                },\r\n                subSkill: {\r\n                    put: {\r\n                        trigger: { player: 'gainAfter' },\r\n                        direct: true,\r\n                        lastDo: true,\r\n                        priority: 3,\r\n                        filter(Evt, player) {\r\n                            if (player.storage.weizeng_put && player.storage.weizeng_put.length) {\r\n                                for (let i = 0; i < Evt.cards.length; i++) {\r\n                                    if (player.storage.weizeng_put.includes(Evt.cards[i])) {\r\n                                        return true;\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            Evt.cards = [];\r\n                            if (!player.storage.niwei)\r\n                                player.storage.niwei = [];\r\n                            for (let i = 0; i < trigger.cards.length; i++) {\r\n                                if (player.storage.weizeng_put.includes(trigger.cards[i])) {\r\n                                    player.storage.niwei.add(trigger.cards[i].name);\r\n                                    Evt.cards.includes(trigger.cards.splice(i--, 1));\r\n                                }\r\n                            }\r\n                            'step 1';\r\n                            player.markSkill('niwei');\r\n                            player.storage.weizeng_put.removeArray(Evt.cards);\r\n                        },\r\n                        onremove: true,\r\n                    }\r\n                },\r\n            },\r\n            aswusheng: {\r\n                init(player, skill) {\r\n                    player.storage[skill] = 0;\r\n                },\r\n                trigger: { player: ['useCard', 'respond'] },\r\n                direct: true,\r\n                frequent: true,\r\n                priority: 5,\r\n                filter(Evt, player) {\r\n                    return get.type(Evt.card) == 'basic' || player.storage.aswusheng > 0;\r\n                },\r\n                logTarget(Evt, player) {\r\n                    if (Evt.name == 'respond')\r\n                        return Evt.source;\r\n                    if (['sha', 'qi', 'jiu', 'tao'].includes(Evt.card.name))\r\n                        return Evt.targets[0];\r\n                    if (Evt.respondTo)\r\n                        return Evt.respondTo[0];\r\n                },\r\n                mark: true,\r\n                intro: {\r\n                    content: '连续使用或打出了&张基本牌',\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    if (get.type(trigger.card) != 'basic' && player.storage.aswusheng > 0) {\r\n                        player.storage.aswusheng = 0;\r\n                        player.markSkill('aswusheng');\r\n                        Evt.finish();\r\n                    }\r\n                    Evt.num = player.storage.aswusheng;\r\n                    'step 1';\r\n                    let goto = false;\r\n                    let logTarget = get.copy(lib.skill.aswusheng.logTarget);\r\n                    let target = logTarget(trigger, player);\r\n                    player.storage.aswusheng++;\r\n                    player.markSkill('aswusheng');\r\n                    switch (Evt.num) {\r\n                        case 0:\r\n                            goto = (trigger.name == 'useCard');\r\n                            break;\r\n                        case 1:\r\n                            goto = true;\r\n                            break;\r\n                        case 2:\r\n                            goto = (target.countGainableCards(player, 'he') > 0);\r\n                            break;\r\n                        case 3:\r\n                            goto = (player.hp < player.maxHp);\r\n                            break;\r\n                        default: break;\r\n                    }\r\n                    if (goto) {\r\n                        Evt.target = target;\r\n                        let next = player.chooseBool(get.prompt2('aswusheng').replace(Evt.num, '<span class=\"yellowtext\">' + Evt.num + '</span>'));\r\n                        next.set('ai', function () { return 1; });\r\n                        next.set('frequentSkill', Evt.name);\r\n                    }\r\n                    else {\r\n                        Evt.finish(0);\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool || Evt.frequent) {\r\n                        player.logSkill(Evt.name, Evt.target);\r\n                        switch (Evt.num) {\r\n                            case 0:\r\n                                {\r\n                                    if (trigger.addCount !== false) {\r\n                                        trigger.addCount = false;\r\n                                        let stat = player.getStat();\r\n                                        if (stat && stat.card && stat.card[trigger.card.name])\r\n                                            stat.card[trigger.card.name]--;\r\n                                    }\r\n                                }\r\n                                ;\r\n                                break;\r\n                            case 1:\r\n                                {\r\n                                    player.draw();\r\n                                }\r\n                                ;\r\n                                break;\r\n                            case 2:\r\n                                player.gainPlayerCard(Evt.target, 'he');\r\n                                break;\r\n                            case 3:\r\n                                player.recover();\r\n                                break;\r\n                        }\r\n                    }\r\n                },\r\n                mod: {\r\n                    aiOrder(player, card, num) {\r\n                        if (typeof card == 'object' && player == _status.currentPhase) {\r\n                            if (get.type(card) != 'basic') {\r\n                                if (player.storage.aswusheng == 0)\r\n                                    return num - 2;\r\n                                if (player.countCards('hs', { name: 'sha' }) >= 2 && player.storage.aswusheng == 1)\r\n                                    return num + 10;\r\n                            }\r\n                            else if (get.name(card) != 'sha') {\r\n                                if (player.countCards('hs', { name: 'sha' }) == 1 && player.storage.aswusheng == 1)\r\n                                    return num + 6;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                ai: {\r\n                    presha: true,\r\n                    threaten(player, target) {\r\n                        if (player.countCards('hs'))\r\n                            return 0.8;\r\n                    },\r\n                    skillTagFilter(player) {\r\n                        return player.countCards('hs', { name: 'sha' }) > 1 && [0, 2].includes(player.storage.aswusheng);\r\n                    }\r\n                }\r\n            },\r\n            gunxun: {\r\n                enable: 'phaseUse',\r\n                init(player, skill) {\r\n                    var _a;\r\n                    (_a = player.storage)[skill] || (_a[skill] = 1);\r\n                },\r\n                filter(Evt, player) {\r\n                    if (player.storage.gunxun === 1)\r\n                        return player.countCards('h', card => !card.hasGaintag('ming_') && get.color(card) == 'red');\r\n                    return player.countCards('h', card => !card.hasGaintag('ming_') && get.color(card) == 'black');\r\n                },\r\n                selectCard: [1, Infinity],\r\n                filterCard(card, player) {\r\n                    if (player.storage.gunxun === 1)\r\n                        return !card.hasGaintag('ming_') && get.color(card) == 'red';\r\n                    return !card.hasGaintag('ming_') && get.color(card) == 'black';\r\n                },\r\n                check(card) {\r\n                    let player = _status.event.player;\r\n                    if (player.storage.gunxun === 1 && player.countCards('hs', 'sha') < 2)\r\n                        return 6 - get.value(card);\r\n                    if (player.storage.gunxun === 2 && player.countCards('hs', 'shan') > 1)\r\n                        return 2 - get.value(card);\r\n                    return 5 - get.value(card);\r\n                },\r\n                discard: false,\r\n                lose: false,\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.showCards(cards, '『棍训』亮出手牌');\r\n                    if (player.storage.gunxun === 1)\r\n                        player.addGaintag(cards, 'ming_gunxunsha');\r\n                    else\r\n                        player.addGaintag(cards, 'ming_gunxunshan');\r\n                    game.delayx();\r\n                    'step 1';\r\n                    player.storage.gunxun = [2, 1][player.storage.gunxun - 1];\r\n                    let num = cards.length;\r\n                    if (game.hasPlayer(cur => cur.countCards('e') < num)) {\r\n                        player.chooseTarget('『棍训』：令装备区牌数少于 ' + get.cnNumber(num) + ' 的一名角色失去所有非锁定技直到回合结束', function (card, player, target) {\r\n                            return target.countCards('e') < _status.event.num;\r\n                        }).set('num', num).set('ai', function (target) {\r\n                            let player = _status.event.player;\r\n                            return -get.attitude(player, target) + Math.random();\r\n                        });\r\n                    }\r\n                    'step 2';\r\n                    if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        let target = result.targets[0];\r\n                        Evt.target = target;\r\n                        if (!target.hasSkill('fengyin')) {\r\n                            target.addTempSkill('fengyin');\r\n                        }\r\n                    }\r\n                },\r\n                mod: {\r\n                    cardname(card, player) {\r\n                        if (card.hasGaintag && card.hasGaintag('ming_gunxunshan'))\r\n                            return 'shan';\r\n                        if (card.hasGaintag && card.hasGaintag('ming_gunxunsha'))\r\n                            return 'sha';\r\n                    },\r\n                },\r\n                ai: {\r\n                    order: 7.5,\r\n                    result: { player: 0.5 },\r\n                }\r\n            },\r\n            quanyu: {\r\n                audio: 6,\r\n                trigger: { global: 'useCard1' },\r\n                clickChange: '休眠',\r\n                clickable(player) {\r\n                    if (player.storage.quanyu_clickChange === undefined)\r\n                        player.storage.quanyu_clickChange = false;\r\n                    else\r\n                        player.storage.quanyu_clickChange = !player.storage.quanyu_clickChange;\r\n                },\r\n                clickableFilter(player) {\r\n                    return player.storage.quanyu_clickChange !== false;\r\n                },\r\n                filter(Evt, player) {\r\n                    if (player.storage.quanyu_clickChange === false)\r\n                        return false;\r\n                    let suit = get.suit(Evt.card);\r\n                    return Evt.cards && Evt.cards.length && suit != 'none' && Evt.player != player && !player.countCards('h', card => suit == get.suit(card));\r\n                },\r\n                check(Evt, player) {\r\n                    let handcards = player.getCards('h');\r\n                    let num = 4 - get.suit3(handcards).length;\r\n                    if (player.hp < num)\r\n                        return false;\r\n                    if (['shandian', 'du'].includes(Evt.card.name))\r\n                        return false;\r\n                    if (Evt.targets && Evt.targets.length && get.attitude(player, Evt.player) < 0) {\r\n                        for (let i = 0; i < Evt.targets.length; i++) {\r\n                            if (get.effect(Evt.targets[i], Evt.card, Evt.player, player) < 0)\r\n                                return true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        return get.attitude(player, Evt.player) < 0;\r\n                    }\r\n                },\r\n                prompt2(Evt, player) {\r\n                    return '你可以获得' + get.translation(Evt.player) + '使用的' + get.translation(Evt.card) + '，然后你展示所有手牌，每缺少一种花色便受到1点无来源的伤害。';\r\n                },\r\n                addDialog(Evt, player) {\r\n                    return Evt.cards;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    trigger.cancel();\r\n                    Evt.cards = trigger.cards;\r\n                    Evt.target = trigger.player;\r\n                    player.gain(Evt.cards, Evt.target, 'gain2');\r\n                    'step 1';\r\n                    player.showHandcards('『全域』展示手牌');\r\n                    let handcards = player.getCards('h');\r\n                    Evt.num = 4 - get.suit3(handcards).length;\r\n                    'step 2';\r\n                    if (Evt.num > 0) {\r\n                        player.damage(Evt.num, 'nosource');\r\n                    }\r\n                },\r\n                ai: {\r\n                    expose: 0.2,\r\n                },\r\n            },\r\n            wulian: {\r\n                audio: true,\r\n                enable: 'phaseUse',\r\n                unique: true,\r\n                limited: true,\r\n                filter(Evt, player) {\r\n                    return player.isDamaged();\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.storage.wulian = true;\r\n                    player.awakenSkill('wulian');\r\n                    player.draw(player.getDamagedHp());\r\n                    'step 1';\r\n                    player.addTempSkill('lianpo', 'roundStart');\r\n                },\r\n                derivation: 'lianpo',\r\n                ai: {\r\n                    order(item, player) {\r\n                        if (player.getDamagedHp() >= 3)\r\n                            return 10;\r\n                        return 0;\r\n                    },\r\n                    result: { player: 2 },\r\n                }\r\n            },\r\n            lianpo: {\r\n                audio: 4,\r\n                trigger: { global: 'phaseAfter' },\r\n                frequent: true,\r\n                onremove: true,\r\n                filter(Evt, player) {\r\n                    return player.getStat('kill') > 0;\r\n                },\r\n                content() {\r\n                    player.insertPhase();\r\n                },\r\n            },\r\n            yehua: {\r\n                audio: 3,\r\n                trigger: { player: 'phaseBegin' },\r\n                filter(Evt, player) {\r\n                    return !player.isMaxHandcard(true);\r\n                },\r\n                check(Evt, player) {\r\n                    let list = game.filterPlayer(cur => {\r\n                        return cur.isMaxHandcard();\r\n                    }).sortBySeat();\r\n                    return (list[0].countCards('h') - player.countCards('h')) >= 1;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    let num = 1, list = game.filterPlayer(cur => cur.isMaxHandcard());\r\n                    num += (list[0].countCards('h') - player.countCards('h'));\r\n                    Evt.cards = get.cards(num);\r\n                    'step 1';\r\n                    player.gain(Evt.cards, 'draw');\r\n                    'step 2';\r\n                    player.turnOver();\r\n                },\r\n            },\r\n            fengqing: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = 1;\r\n                },\r\n                trigger: { player: ['linkBegin', 'turnOverBegin'] },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                process(change) {\r\n                    switch (change) {\r\n                        case 1:\r\n                            return '其下个准备阶段视为使用了【酒】';\r\n                            break;\r\n                        case 2:\r\n                            return '其下个准备阶段视为使用了【桃】';\r\n                            break;\r\n                        case 3:\r\n                            return '其跳过本回合的判定和弃牌阶段';\r\n                            break;\r\n                    }\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    Evt.change = player.storage.fengqing;\r\n                    player.chooseTarget(get.prompt('fengqing')).set('ai', function (target) {\r\n                        let player = _status.event.player;\r\n                        let change = _status.event.change;\r\n                        switch (change) {\r\n                            case 1:\r\n                                return get.effect(target, { name: 'jiu' }, target, player) || target == player;\r\n                                break;\r\n                            case 2:\r\n                                return get.effect(target, { name: 'tao' }, target, player);\r\n                                break;\r\n                            case 3: {\r\n                                if (target != _status.currentPhase)\r\n                                    return 0;\r\n                                if (target.countCards('j') > 0)\r\n                                    return 2 * get.attitude(player, target) + Math.random();\r\n                                return get.attitude(player, target) + Math.random();\r\n                                break;\r\n                            }\r\n                        }\r\n                        return get.attitude(player, target) + Math.random();\r\n                    }).set('prompt2', lib.skill.fengqing.process(Evt.change)).set('change', Evt.change);\r\n                    'step 1';\r\n                    if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        Evt.target = result.targets[0];\r\n                        player.logSkill('fengqing', Evt.target);\r\n                        switch (Evt.change) {\r\n                            case 1:\r\n                                Evt.target.addSkill('fengqing_jiu');\r\n                                break;\r\n                            case 2:\r\n                                Evt.target.addSkill('fengqing_tao');\r\n                                break;\r\n                            case 3: {\r\n                                Evt.target.skip('phaseJudge');\r\n                                Evt.target.skip('phaseDiscard');\r\n                                break;\r\n                            }\r\n                        }\r\n                        player.storage.fengqing = (player.storage.fengqing == 3) ? 1 : player.storage.fengqing + 1;\r\n                    }\r\n                },\r\n                effect: {\r\n                    target(card, player, target, current) {\r\n                        if (['tiesuo', 'lulitongxin'].includes(card.name)) {\r\n                            return [1, 2];\r\n                        }\r\n                    },\r\n                },\r\n                subSkill: {\r\n                    jiu: {\r\n                        audio: 2,\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '下个准备阶段视为使用了【酒】'\r\n                        },\r\n                        trigger: { player: 'phaseZhunbeiEnd' },\r\n                        forced: true,\r\n                        onremove: true,\r\n                        popup: '风情-酒',\r\n                        audioname: ['EQueen'],\r\n                        filter(Evt, player) {\r\n                            return lib.filter.filterCard({ name: 'jiu', isCard: false }, player, Evt);\r\n                        },\r\n                        content() {\r\n                            player.chooseUseTarget({ name: 'jiu' }, true, 'noTargetDelay');\r\n                            player.removeSkill(Evt.name);\r\n                        },\r\n                    },\r\n                    tao: {\r\n                        audio: 2,\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '下个准备阶段视为使用了【桃】'\r\n                        },\r\n                        trigger: { player: 'phaseZhunbeiEnd' },\r\n                        forced: true,\r\n                        onremove: true,\r\n                        popup: '风情-桃',\r\n                        audioname: ['EQueen'],\r\n                        filter(Evt, player) {\r\n                            return true;\r\n                            return lib.filter.filterCard({ name: 'tao', isCard: false }, player, Evt);\r\n                        },\r\n                        content() {\r\n                            player.chooseUseTarget({ name: 'tao' }, true, 'noTargetDelay');\r\n                            player.removeSkill(Evt.name);\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            huangjia: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = true;\r\n                },\r\n                locked: true,\r\n                notemp: true,\r\n                mark: true,\r\n                marktext: '👠',\r\n                intro: {\r\n                    mark(dialog, content, player) {\r\n                        dialog.addText('已成为皇珈骑士');\r\n                    },\r\n                    onunmark(storage, player) {\r\n                        if (storage) {\r\n                            storage = undefined;\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            shixi: {\r\n                marktext: '时',\r\n                intro: {\r\n                    mark(dialog, content, player) {\r\n                        dialog.addText('时隙:初始手牌');\r\n                        let list = player.storage.shixi.slice(0);\r\n                        dialog.addSmall(list);\r\n                    },\r\n                    content: 'cards',\r\n                    onunmark(storage, player) {\r\n                        if (storage && storage.length) {\r\n                            storage.length = 0;\r\n                        }\r\n                    },\r\n                },\r\n                trigger: { global: 'phaseLoopBefore', player: 'enterGame' },\r\n                forced: true,\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    return !player.storage.shixi;\r\n                },\r\n                content() {\r\n                    let cards = player.getCards('h');\r\n                    if (cards.length) {\r\n                        if (!player.storage.shixi)\r\n                            player.storage.shixi = [];\r\n                        player.showCards(cards, '时隙:记录初始手牌');\r\n                        player.storage.shixi.addArray(cards);\r\n                        player.markSkill('shixi');\r\n                    }\r\n                },\r\n                group: ['shixi_mark', 'shixi_draw'],\r\n                subSkill: {\r\n                    mark: {\r\n                        marktext: '隙',\r\n                        intro: {\r\n                            mark(dialog, content, player) {\r\n                                dialog.addText('时隙:已指定');\r\n                                let list = player.storage.shixi_mark.slice(0);\r\n                                dialog.addSmall(list);\r\n                            },\r\n                            content: 'cards',\r\n                            onunmark(storage, player) {\r\n                                if (storage && storage.length) {\r\n                                    storage.length = 0;\r\n                                }\r\n                            },\r\n                        },\r\n                        trigger: { global: ['loseAfter', 'cardsDiscardAfter'] },\r\n                        filter(Evt, player) {\r\n                            var _a;\r\n                            let record = player.getStorage('shixi').slice(0);\r\n                            if (!record)\r\n                                return false;\r\n                            let check = cur => (player.storage.yuezhi === true && cur.storage.huangjia) || cur == player;\r\n                            if (Evt.name == 'cardsDiscard' && (Evt.getParent().name != 'orderingDiscard'\r\n                                || (!((_a = Evt.getParent().relatedEvent) === null || _a === void 0 ? void 0 : _a.player) || Evt.getParent().relatedEvent.name == 'judge'\r\n                                    || !check(Evt.getParent().relatedEvent.player))))\r\n                                return false;\r\n                            if (Evt.name == 'lose' && (Evt.position != ui.discardPile\r\n                                || !check(Evt.player)))\r\n                                return false;\r\n                            let list = Evt.cards.filter(card => {\r\n                                if (Evt.js && Evt.js.includes(card))\r\n                                    return false;\r\n                                for (let i = 0; i < record.length; i++) {\r\n                                    if (player.storage.shixi_mark && player.storage.shixi_mark.includes(record[i]))\r\n                                        continue;\r\n                                    if (get.suit(record[i]) == get.suit(card))\r\n                                        return true;\r\n                                }\r\n                            });\r\n                            return list.length > 0;\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            'step 0';\r\n                            let record = player.getStorage('shixi').slice(0);\r\n                            let list = trigger.cards.filter(card => {\r\n                                for (let i of record) {\r\n                                    if (player.storage.shixi_mark && player.storage.shixi_mark.includes(i))\r\n                                        continue;\r\n                                    if (get.suit(i) == get.suit(card))\r\n                                        return true;\r\n                                }\r\n                            });\r\n                            Evt.record = record;\r\n                            Evt.list = list;\r\n                            Evt.num = 0;\r\n                            'step 1';\r\n                            if (Evt.list[Evt.num]) {\r\n                                if (player.storage.shixi_mark)\r\n                                    Evt.record.removeArray(player.storage.shixi_mark);\r\n                                let filterButtons = Evt.record.filter(card => get.suit(Evt.list[Evt.num]) == get.suit(card));\r\n                                if (Evt.record.length) {\r\n                                    if (lib.config.autoskilllist.includes('shixi')) {\r\n                                        player.chooseButton(['###' + get.prompt('shixi') + '###选择要指定的牌（与' + get.translation(Evt.list[Evt.num])\r\n                                                + '花色相同）', Evt.record]).set('filterButton', function (button) {\r\n                                            let card = _status.event.card;\r\n                                            return get.suit(button.link) == get.suit(card);\r\n                                        }).set('ai', function (button) {\r\n                                            return get.value(button.link) + 2 * Math.random();\r\n                                        }).set('card', Evt.list[Evt.num]);\r\n                                    }\r\n                                    else if (filterButtons.length) {\r\n                                        Evt._result = { bool: true, links: [filterButtons.shift()] };\r\n                                    }\r\n                                }\r\n                                ;\r\n                            }\r\n                            'step 2';\r\n                            if (result.bool && result.links) {\r\n                                if (!player.storage.shixi_mark)\r\n                                    player.storage.shixi_mark = [];\r\n                                player.storage.shixi_mark.addArray(result.links);\r\n                                player.markSkill('shixi_mark');\r\n                            }\r\n                            Evt.num++;\r\n                            if (Evt.list[Evt.num])\r\n                                Evt.goto(1);\r\n                        },\r\n                    },\r\n                    draw: {\r\n                        trigger: {\r\n                            global: ['phaseZhunbeiEnd', 'phaseJudgeEnd', 'phaseDrawEnd', 'phaseUseEnd', 'phaseDiscardEnd', 'phaseJieshuEnd']\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return player.storage.shixi_mark && player.storage.shixi_mark.length;\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            'step 0';\r\n                            Evt.num = Math.floor(player.storage.shixi_mark.length / 2);\r\n                            'step 1';\r\n                            if (Evt.num > 0) {\r\n                                player.logSkill('shixi');\r\n                                player.draw(Evt.num);\r\n                                player.unmarkSkill('shixi_mark');\r\n                            }\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            xueta: {\r\n                audio: 6,\r\n                trigger: { player: ['useCard', 'respond'] },\r\n                filter(Evt, player) {\r\n                    if (player.countCards('he') == 0)\r\n                        return false;\r\n                    return Array.isArray(Evt.respondTo) && Evt.respondTo[0] && Evt.respondTo[0] != player;\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.respondTo[0];\r\n                    player.chooseToDiscard('he', get.prompt2('xueta')).set('ai', card => {\r\n                        if (!_status.event.check)\r\n                            return 1 - get.value(card);\r\n                        return 8 - get.value(card);\r\n                    }).set('logSkill', ['xueta', Evt.target, 'fire']).set('check', (get.attitude(player, Evt.target) > 0 || !Evt.target.storage.yuezhi));\r\n                    'step 1';\r\n                    if (result.bool && result.cards && result.cards.length) {\r\n                        Evt.target.draw(2);\r\n                        Evt.target.addSkill('huangjia');\r\n                    }\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target) {\r\n                            if (!player.storage.huangjia) {\r\n                                if (get.attitude(player, target) > 0 && get.attitude(target, player) > 0) {\r\n                                    if (get.tag(card, 'respondShan') && target.countCards('hs', 'shan') && target.countCards('he') > target.countCards('h', 'shan')) {\r\n                                        return [1, 2, 1, 1];\r\n                                    }\r\n                                    if (get.tag(card, 'respondSha') && target.countCards('hs', 'sha') && target.countCards('he') > target.countCards('h', 'sha')) {\r\n                                        if (card.name == 'juedou')\r\n                                            return;\r\n                                        return [1, 2, 1, 1];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            yuezhi: {\r\n                audio: true,\r\n                skillAnimation: true,\r\n                animationStr: '音乐珈',\r\n                unique: true,\r\n                juexingji: true,\r\n                forced: true,\r\n                trigger: { player: 'phaseBegin' },\r\n                filter(Evt, player) {\r\n                    let num = game.countPlayer(cur => cur.storage.huangjia === true);\r\n                    return num >= player.hp || num >= player.countCards('h');\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.gainMaxHp();\r\n                    player.awakenSkill('yuezhi');\r\n                    player.storage.yuezhi = true;\r\n                    'step 1';\r\n                    let record = player.storage.shixi.slice(0);\r\n                    record.forEach(card => {\r\n                        if (get.position(card, true) == 'd')\r\n                            player.gain(card, 'draw');\r\n                        else {\r\n                            player.recover();\r\n                            player.draw(2);\r\n                        }\r\n                        game.delay(0.4);\r\n                    });\r\n                },\r\n                ai: {\r\n                    combo: 'shixi'\r\n                }\r\n            },\r\n            yiqu: {\r\n                trigger: { global: ['chooseTargetAfter', 'chooseCardTargetAfter', 'chooseUseTargetAfter', 'useSkillAfter'] },\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    if (Evt.player == player)\r\n                        return false;\r\n                    let name = lib.skill.yiqu.process(Evt), info = lib.skill[name];\r\n                    if (!info || info.equipSkill || info.ruleSkill)\r\n                        return false;\r\n                    let result = Evt.result, targets = [];\r\n                    if (Evt.name == 'useSkill')\r\n                        targets = Evt.targets || [Evt.target];\r\n                    else if (!result || result.bool != true)\r\n                        return false;\r\n                    else {\r\n                        targets = result.targets.slice(0);\r\n                    }\r\n                    return lib.translate[name + '_info'] && !player.hasSkill(name) && targets.includes(player);\r\n                },\r\n                prompt2(Evt, player) {\r\n                    let name = lib.skill.yiqu.process(Evt);\r\n                    return '你可以获得『' + get.translation(name) + '』，直到下次进入濒死状态';\r\n                },\r\n                process(Evt) {\r\n                    let name = Evt.skill || Evt.getParent().name;\r\n                    if (name.length > 3) {\r\n                        let index = name.indexOf('_', 4);\r\n                        if (index > 3)\r\n                            name = name.substring(0, index);\r\n                    }\r\n                    return name;\r\n                },\r\n                content() {\r\n                    let name = lib.skill.yiqu.process(trigger);\r\n                    player.flashAvatar('yiqu', get.name(trigger.player));\r\n                    player.addSkillLog(name);\r\n                    player.addAdditionalSkill('yiqu', name, true);\r\n                },\r\n                group: 'yiqu_beDying',\r\n                subSkill: {\r\n                    beDying: {\r\n                        trigger: { player: 'dyingBefore' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return player.additionalSkills['yiqu'];\r\n                        },\r\n                        content() {\r\n                            player.removeAdditionalSkill('yiqu');\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            wanxian: {\r\n                audio: 2,\r\n                trigger: { global: 'dying' },\r\n                forced: true,\r\n                check() {\r\n                    return false;\r\n                },\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && Evt.reason && Evt.reason.source && player == Evt.parent.source\r\n                        && player.additionalSkills['yiqu'] && player.additionalSkills['yiqu'].length;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.num = player.additionalSkills['yiqu'].length;\r\n                    player.removeAdditionalSkill('yiqu');\r\n                    'step 1';\r\n                    player.draw(Evt.num);\r\n                },\r\n                ai: {\r\n                    combo: 'yiqu',\r\n                },\r\n            },\r\n            juehuo: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill]) {\r\n                        player.storage[skill] = {\r\n                            ms: [],\r\n                            ans: []\r\n                        };\r\n                    }\r\n                },\r\n                locked: true,\r\n                notemp: true,\r\n                marktext: '绝',\r\n                intro: {\r\n                    mark(dialog, content, player) {\r\n                        if (player.storage.juehuo.ms && player.storage.juehuo.ms.length) {\r\n                            let list = player.storage.juehuo.ms.slice(0);\r\n                            dialog.addText('明置绝活');\r\n                            dialog.addSmall(list);\r\n                        }\r\n                        if (player.storage.juehuo.ans && player.storage.juehuo.ans.length) {\r\n                            if (player.isUnderControl(true)) {\r\n                                let list = player.storage.juehuo.ans.slice(0);\r\n                                dialog.addText('暗置绝活');\r\n                                dialog.addSmall(list);\r\n                            }\r\n                            else {\r\n                                dialog.addText('暗置绝活（' + get.cnNumber(player.storage.juehuo.ans.length) + '张）');\r\n                            }\r\n                        }\r\n                    },\r\n                    content: 'cards',\r\n                    onunmark(storage, player) {\r\n                        if ((storage && storage.ms && storage.ms.length) || (storage && storage.ans && storage.ans.length)) {\r\n                            let cards = storage.ms.concat(storage.ans);\r\n                            player.$throw(cards, 1000);\r\n                            game.cardsDiscard(cards);\r\n                            game.log(cards, '被置入了弃牌堆');\r\n                            storage.ms.length = 0;\r\n                            storage.ans.length = 0;\r\n                        }\r\n                    },\r\n                },\r\n                cardAround: ['ms', 'ans']\r\n            },\r\n            zhiyue: {\r\n                audio: 8,\r\n                trigger: { player: 'useCardEnd' },\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    if (player.storage.juehuo.ans && player.storage.juehuo.ms) {\r\n                        let card = Evt.card, list1 = player.storage.juehuo.ans.slice(0), list2 = player.storage.juehuo.ms.slice(0);\r\n                        for (let i = 0; i < list1.length; i++) {\r\n                            if (get.type2(list1[i]) == get.type2(card))\r\n                                return true;\r\n                        }\r\n                        for (let i = 0; i < list2.length; i++) {\r\n                            if (get.suit(list2[i]) == get.suit(card))\r\n                                return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    Evt.card = trigger.card;\r\n                    let list1 = player.storage.juehuo.ans.slice(0), list2 = player.storage.juehuo.ms.slice(0);\r\n                    let list = ['『指月』：选择绝活翻面'];\r\n                    if (list1.length) {\r\n                        list.push('暗置绝活');\r\n                        list.push([list1, 'card']);\r\n                    }\r\n                    if (list2.length) {\r\n                        list.push('明置绝活');\r\n                        list.push([list2, 'card']);\r\n                    }\r\n                    list.push('hidden');\r\n                    Evt.list1 = list1;\r\n                    Evt.list2 = list2;\r\n                    let next = player.chooseButton(list);\r\n                    next.set('selectButton', [1, Evt.list2.length + 1]);\r\n                    next.set('filterButton', function (button) {\r\n                        let card = _status.event.card, evt = _status.event.getParent(), now = button.link;\r\n                        if (evt.list1 && evt.list1.length && evt.list1.includes(now)) {\r\n                            let selected = ui.selected.buttons;\r\n                            if (selected.length) {\r\n                                for (let i = 0; i < selected.length; i++) {\r\n                                    if (evt.list1.includes(selected[i].link))\r\n                                        return false;\r\n                                }\r\n                            }\r\n                            return get.type2(now) == get.type2(card);\r\n                        }\r\n                        if (evt.list2 && evt.list2.length && evt.list2.includes(now)) {\r\n                            return get.suit(now) == get.suit(card);\r\n                        }\r\n                    });\r\n                    next.set('card', Evt.card);\r\n                    'step 1';\r\n                    if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        let cards1 = result.links.slice(0), cards2 = result.links.slice(0);\r\n                        cards1 = cards1.filter(card => Evt.list1.includes(card));\r\n                        cards2 = cards2.filter(card => Evt.list2.includes(card));\r\n                        Evt.cards = cards1.concat(cards2);\r\n                        if (cards1.length == Evt.list1.length) {\r\n                            Evt.cards.push(get.cards()[0]);\r\n                        }\r\n                        if (cards2.length) {\r\n                            player.draw(cards2.length);\r\n                        }\r\n                        lib.skill.zhiyue.process(player, Evt.cards);\r\n                        game.delay(0.5);\r\n                    }\r\n                },\r\n                process(player, cards) {\r\n                    let storage = player.getStorage('juehuo');\r\n                    if (storage.ans && storage.ms) {\r\n                        let drawAutos = [];\r\n                        for (let i = 0; i < cards.length; i++) {\r\n                            if (storage.ms.includes(cards[i])) {\r\n                                player.$give(cards[i], player, false);\r\n                                storage.ms.remove(cards[i]);\r\n                                storage.ans.push(cards[i]);\r\n                            }\r\n                            else if (storage.ans.includes(cards[i])) {\r\n                                player.$give(cards[i], player, false);\r\n                                storage.ans.remove(cards[i]);\r\n                                storage.ms.push(cards[i]);\r\n                            }\r\n                            else {\r\n                                drawAutos.add(cards[i]);\r\n                                game.cardsGotoSpecial(cards[i]);\r\n                                storage.ans.push(cards[i]);\r\n                            }\r\n                        }\r\n                        if (drawAutos.length)\r\n                            player.$drawAuto(drawAutos);\r\n                        player.markSkill('juehuo');\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten: 1.5\r\n                },\r\n                mod: {\r\n                    aiOrder(player, card, num) {\r\n                        if (typeof card == 'object' && player.storage.juehuo) {\r\n                            let suit = get.suit(card), type = get.type2(card), ans = player.storage.juehuo.ans.slice(0), ms = player.storage.juehuo.ms.slice(0);\r\n                            for (let i = 0; i < ans.length; i++) {\r\n                                if (get.type2(ans[i]) == type)\r\n                                    return num + 7;\r\n                            }\r\n                            for (let i = 0; i < ms.length; i++) {\r\n                                if (get.suit(ms[i]) == suit)\r\n                                    return num + 5;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                group: ['juehuo', 'zhiyue_start'],\r\n                subSkill: {\r\n                    start: {\r\n                        forced: true,\r\n                        priority: 10,\r\n                        trigger: {\r\n                            global: 'gameStart',\r\n                            player: 'enterGame',\r\n                        },\r\n                        content() {\r\n                            Evt.cards = get.cards();\r\n                            game.playAudio('skill', 'zhiyue0');\r\n                            lib.skill.zhiyue.process(player, Evt.cards);\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            zhengniu: {\r\n                audio: 4,\r\n                trigger: { player: ['linkBefore', 'recoverBefore', 'drawBefore'] },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    if (!player.storage.juehuo\r\n                        || !(player.storage.juehuo.ans && player.storage.juehuo.ans.length\r\n                            || player.storage.juehuo.ms && player.storage.juehuo.ms.length))\r\n                        return false;\r\n                    if (!Evt.source || get.itemtype(Evt.source) != 'player' || Evt.source == player)\r\n                        return false;\r\n                    if (Evt.name == 'link')\r\n                        return !player.isLinked();\r\n                    return true;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.source;\r\n                    let check = get.attitude(player, Evt.target) > 0, list1 = player.storage.juehuo.ans.slice(0), list2 = player.storage.juehuo.ms.slice(0);\r\n                    let list = ['###' + get.prompt('zhengniu') + '###选择交给' + get.translation(Evt.target) + '的绝活'];\r\n                    if (list1.length) {\r\n                        list.push('暗置绝活');\r\n                        list.push([list1, 'card']);\r\n                    }\r\n                    if (list2.length) {\r\n                        list.push('明置绝活');\r\n                        list.push([list2, 'card']);\r\n                    }\r\n                    list.push('hidden');\r\n                    player.chooseButton(list).set('filterButton', function (button) {\r\n                        return true;\r\n                    }).set('selectButton', [1, Infinity]).set('ai', function (button) {\r\n                        if (!_status.event.check)\r\n                            return -1;\r\n                        if ((ui.dialog.buttons.length - ui.selected.buttons.length) <= 3)\r\n                            return -1;\r\n                        return get.value(button.link);\r\n                    }).set('check', check);\r\n                    'step 1';\r\n                    if (result.bool && result.links) {\r\n                        player.logSkill('zhengniu');\r\n                        player.storage.juehuo.ans.removeArray(result.links);\r\n                        player.storage.juehuo.ms.removeArray(result.links);\r\n                        player.$give(result.links, Evt.target);\r\n                        Evt.target.gain(result.links);\r\n                        player.updateMarks();\r\n                    }\r\n                },\r\n            },\r\n            juxiao: {\r\n                trigger: { player: 'damageEnd' },\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                frequent: true,\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.chooseTarget([1, 2], true, '###『句销』：令至多两名角色各摸一张牌###摸牌的角色不能使用【杀】直到回合结束').set('ai', function (target) {\r\n                        let att = get.attitude(_status.event.player);\r\n                        if (target == _status.currentPhase && (target.hasSha() || target.hasSkillTag('useSha'))) {\r\n                            if (target.hasS)\r\n                                return 2 - att;\r\n                        }\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        player.logSkill('juxiao', result.targets);\r\n                        game.asyncDraw(result.targets);\r\n                        result.targets.forEach(function (tar) {\r\n                            tar.addTempSkill('juxiao_xiao');\r\n                        });\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    xiao: {\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '无法使用杀直到回合结束'\r\n                        },\r\n                        mod: {\r\n                            cardEnabled(card) {\r\n                                if (card.name == 'sha')\r\n                                    return false;\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    expose: 0.1,\r\n                    threaten: 0.8,\r\n                    maixie: true,\r\n                }\r\n            },\r\n            shshenyan: {\r\n                audio: 6,\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h');\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.showHandcards();\r\n                    game.delayx();\r\n                    if (!player.storage.shshenyan)\r\n                        player.storage.shshenyan = [];\r\n                    'step 1';\r\n                    player.chooseCard('h', '『神言』:弃置一种牌名的牌', true).set('ai', card => {\r\n                        if (['sha'].includes(card.name))\r\n                            return 5;\r\n                        if (!['sha', 'tao'].includes(card.name) && get.type(card) == 'basic')\r\n                            return 6 - get.value(card);\r\n                        return 1;\r\n                    });\r\n                    'step 2';\r\n                    if (result.bool && result.cards) {\r\n                        Evt.cname = get.name(result.cards[0]);\r\n                        Evt.discard = player.discard(player.getCards('h', Evt.cname));\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 3';\r\n                    if (Evt.discard.cards) {\r\n                        let cards = Evt.discard.cards;\r\n                        cards.forEach(card => {\r\n                            player.storage.shshenyan.add(get.suit(card));\r\n                        });\r\n                        player.draw(cards.length);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 4';\r\n                    if (player.storage.shshenyan) {\r\n                        if (!player.hasSkill('shshenyan_mark'))\r\n                            player.addTempSkill('shshenyan_mark', 'phaseUseAfter');\r\n                        player.markSkill('shshenyan_mark');\r\n                        let num = player.storage.shshenyan.length, list = get.inpile('trick');\r\n                        for (let i = 0; i < list.length; i++) {\r\n                            if (get.translation(list[i]).length != num) {\r\n                                list.splice(i--, 1);\r\n                            }\r\n                            else\r\n                                list[i] = ['锦囊', '', list[i]];\r\n                        }\r\n                        if (list.length) {\r\n                            player.chooseButton(['是否选择一张长度' + num + '的锦囊牌视为使用之？', [list, 'vcard'], 'hidden']).set('ai', function (button) {\r\n                                let card = { name: button.link[2] }, value = get.value(card);\r\n                                return value;\r\n                            });\r\n                        }\r\n                    }\r\n                    'step 5';\r\n                    if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        player.chooseUseTarget({ name: result.links[0][2] }, true);\r\n                    }\r\n                    else {\r\n                        if (Evt.cname == 'sha') {\r\n                            let next = game.createEvent('resetSkill');\r\n                            [next.player] = [player];\r\n                            next.setContent(function () {\r\n                                player.popup('重置');\r\n                                game.log(player, '重置了『神言』');\r\n                                player.getStat('skill').shshenyan--;\r\n                            });\r\n                        }\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    mark: {\r\n                        marktext: \"言\",\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '神言',\r\n                            content(storage, player, skill) {\r\n                                if (player.storage.shshenyan.length) {\r\n                                    return '本阶段『神言』的弃置花色：' + get.translation(player.storage.shshenyan);\r\n                                }\r\n                            },\r\n                        },\r\n                        onremove(player) {\r\n                            player.storage.shshenyan.length = 0;\r\n                        },\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 6,\r\n                    result: {\r\n                        player: 1,\r\n                    },\r\n                },\r\n            },\r\n            zhezhuan: {\r\n                enable: 'chooseToUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('he', { type: ['trick', 'delay'] }) >= 1;\r\n                },\r\n                hiddenCard(player, name) {\r\n                    if (typeof lib.card[name].yingbian_prompt != 'string')\r\n                        return false;\r\n                    return name != 'du' && get.type(name) == 'basic' && player.countCards('he', { type: ['trick', 'delay'] });\r\n                },\r\n                chooseButton: {\r\n                    dialog(Evt, player) {\r\n                        let dialog = ui.create.dialog('辙转', 'hidden');\r\n                        dialog.add('应变标签');\r\n                        let table = document.createElement('div');\r\n                        let list0 = ['yingbian_kongchao', 'yingbian_canqu', 'yingbian_fujia', 'yingbian_zhuzhan'];\r\n                        table.classList.add('add-setting');\r\n                        table.style.margin = '0';\r\n                        table.style.width = '100%';\r\n                        table.style.position = 'relative';\r\n                        for (let i of list0) {\r\n                            let td = ui.create.div('.shadowed.reduce_radius.pointerdiv.tdnode');\r\n                            td.innerHTML = '<span>' + get.translation(i + '_tag') + '</span>';\r\n                            td.link = i;\r\n                            td.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.button);\r\n                            for (let j in lib.element.button) {\r\n                                td[j] = lib.element.button[i];\r\n                            }\r\n                            table.appendChild(td);\r\n                            dialog.buttons.add(td);\r\n                        }\r\n                        dialog.content.appendChild(table);\r\n                        dialog.add('卡牌转换');\r\n                        let list1 = [];\r\n                        for (let i = 0; i < lib.inpile.length; i++) {\r\n                            let name = lib.inpile[i];\r\n                            if (name == 'du')\r\n                                continue;\r\n                            if (!lib.card[name].yingbian_prompt)\r\n                                continue;\r\n                            if (name == 'sha') {\r\n                                list1.push(['基本', '', 'sha']);\r\n                                list1.push(['基本', '', 'sha', 'fire']);\r\n                            }\r\n                            else if (get.type(name) == 'trick') {\r\n                                if (!player.countCards('h', { name: name }))\r\n                                    continue;\r\n                                list1.push(['锦囊', '', name]);\r\n                            }\r\n                            else if (get.type(name) == 'basic') {\r\n                                list1.push(['基本', '', name]);\r\n                            }\r\n                            ;\r\n                        }\r\n                        dialog.add([list1, 'vcard']);\r\n                        return dialog;\r\n                    },\r\n                    filter(button, player) {\r\n                        if (ui.selected.buttons.length && typeof button.link == typeof ui.selected.buttons[0].link)\r\n                            return false;\r\n                        if (typeof button.link == 'object') {\r\n                            let evt = _status.event.getParent(), name = button.link[2];\r\n                            if (evt.filterCard && typeof evt.filterCard == 'function') {\r\n                                return evt.filterCard({ name: name, isCard: true }, player);\r\n                            }\r\n                            return lib.filter.filterCard({ name: name, isCard: true }, player, evt);\r\n                        }\r\n                        return true;\r\n                    },\r\n                    select: 2,\r\n                    check(button) {\r\n                        let player = _status.event.player;\r\n                        if (typeof button.link == 'string') {\r\n                            switch (button.link) {\r\n                                case 'yingbian_kongchao':\r\n                                    return 4.5;\r\n                                    break;\r\n                                case 'yingbian_canqu':\r\n                                    return player.hp == 1;\r\n                                    break;\r\n                                case 'yingbian_fujia':\r\n                                    return 4.3;\r\n                                    break;\r\n                                case 'yingbian_zhuzhan':\r\n                                    return (3 - player.hp) * 1.5;\r\n                                    break;\r\n                            }\r\n                        }\r\n                        let name = button.link[2], evt = _status.event.getParent();\r\n                        if (get.type(name) == 'basic') {\r\n                            if (name == 'shan')\r\n                                return 2;\r\n                            if (evt.type == 'dying') {\r\n                                if (get.attitude(player, evt.dying) < 2)\r\n                                    return false;\r\n                                return 1.9;\r\n                            }\r\n                            if (evt.type == 'phase')\r\n                                return player.getUseValue({ name: name, nature: button.link[3], isCard: true });\r\n                            return 1;\r\n                        }\r\n                        let effect = player.getUseValue(button.link[2]);\r\n                        if (effect > 0)\r\n                            return effect;\r\n                        return 0;\r\n                    },\r\n                    backup(links, player) {\r\n                        if (typeof links[1] == 'string')\r\n                            links.reverse();\r\n                        let yingbian = [links[0], ['yingbian_damage', 'yingbian_gain'].randomGet()];\r\n                        let name = links[1][2], nature = links[1][3];\r\n                        return {\r\n                            filterCard(card, player) {\r\n                                if (get.type2(card) != 'trick')\r\n                                    return false;\r\n                                if (get.type2(name) == 'trick')\r\n                                    return get.name(card) == name;\r\n                                return true;\r\n                            },\r\n                            selectCard: 1,\r\n                            yingbian: yingbian,\r\n                            viewAs: {\r\n                                cardid: get.id(),\r\n                                name: name,\r\n                                nature: nature,\r\n                                isCard: true,\r\n                            },\r\n                            popname: true,\r\n                            precontent() {\r\n                                player.logSkill('zhezhuan');\r\n                                let yingbian = lib.skill.zhezhuan_backup.yingbian;\r\n                                console.log(_status, _status.cardtag);\r\n                                _status.cardtag[yingbian[0]].add(Evt.result.card.cardid);\r\n                                _status.cardtag[yingbian[1]].add(Evt.result.card.cardid);\r\n                            },\r\n                        };\r\n                    },\r\n                    prompt(links, player) {\r\n                        if (typeof links[1] == 'string')\r\n                            links.reverse();\r\n                        let yingbian = links[0], name = links[1][2], nature = links[1][3];\r\n                        return '视为使用一张带有' + get.translation(yingbian + '_tag') + '标签的' + (get.translation(nature) || '') + '【' + get.translation(name) + '】';\r\n                    },\r\n                },\r\n                ai: {\r\n                    order: 12,\r\n                    result: {\r\n                        player: 1\r\n                    },\r\n                    threaten: 1.5\r\n                },\r\n                group: 'zhezhuan_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { player: 'useCard1' },\r\n                        forced: true,\r\n                        popup: false,\r\n                        firstDo: true,\r\n                        priority: 333,\r\n                        content() {\r\n                            if (_status.cardtag.yuzu && _status.cardtag.yuzu.length)\r\n                                delete _status.cardtag.yuzu;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            setu: {\r\n                mark: true,\r\n                intro: {\r\n                    name: '涩涂',\r\n                    content: 'cards',\r\n                    onunmark: 'throw',\r\n                },\r\n                cardAround: true,\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') >= 2;\r\n                },\r\n                filterCard(card) {\r\n                    let num = 0;\r\n                    for (let i of ui.selected.cards) {\r\n                        num += get.number(i);\r\n                    }\r\n                    return get.number(card) + num < 18;\r\n                },\r\n                discard: false,\r\n                toStorage: true,\r\n                delay: false,\r\n                visible: true,\r\n                complexCard: true,\r\n                selectCard: [1, Infinity],\r\n                check(card) {\r\n                    if (get.number(card) <= 2)\r\n                        return 2 + get.number(card) - get.value(card);\r\n                    return 7 - get.value(card);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.markAuto('setu', cards);\r\n                    'step 1';\r\n                    let setus = player.storage.setu;\r\n                    Evt.num = setus.length;\r\n                    let num = 1;\r\n                    for (let i of setus) {\r\n                        num *= get.number(i);\r\n                    }\r\n                    if (num > 100)\r\n                        Evt.going = true;\r\n                    'step 2';\r\n                    if (Evt.going === true) {\r\n                        player.unmarkSkill('setu');\r\n                        player.draw(Evt.num);\r\n                        player.chooseTarget('『涩涂』：对一名角色造成一点伤害', true).set('ai', function (target) {\r\n                            let player = _status.event.player;\r\n                            return get.damageEffect(target, player, player);\r\n                        });\r\n                    }\r\n                    'step 3';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        Evt.target = result.targets[0];\r\n                        Evt.target.damage('nocard');\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 7.5,\r\n                    result: {\r\n                        player: 1,\r\n                    },\r\n                    threaten: 1.5\r\n                }\r\n            },\r\n            junxu: {\r\n                trigger: { player: 'useCard' },\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    return player.getHistory('useCard').length == player.hp;\r\n                },\r\n                content() {\r\n                    player.chooseDrawRecover(2, 1, true, function () {\r\n                        if (player.hp == 1 && player.isDamaged())\r\n                            return 'recover_hp';\r\n                        if (_status.event.check)\r\n                            return 'draw_card';\r\n                        if (player.isDamaged() && player.isPhaseUsing() && player.countCards('hs', card => {\r\n                            return player.getUseValue({ name: 'sha', isCard: true }) > 0;\r\n                        }) >= 2)\r\n                            return 'recover_hp';\r\n                        return 'draw_card';\r\n                    }).set('check', get.tag(trigger.card, 'recover') >= 1 && trigger.targets.includes(player));\r\n                },\r\n                ai: {\r\n                    threaten: 1.5,\r\n                    noShan: true,\r\n                    skillTagFilter(player, tag, arg) {\r\n                        if (tag == 'noShan') {\r\n                            if (player.isHealthy())\r\n                                return true;\r\n                            return false;\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            jingniang: {\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    return player.countCards('he');\r\n                },\r\n                filterCard: true,\r\n                check(card) {\r\n                    if (get.name(card) == 'sha')\r\n                        return 1 - get.value(card);\r\n                    return 7 - get.value(card);\r\n                },\r\n                content() {\r\n                    player.addTempSkill('jingniang_addDam');\r\n                    player.addMark('jingniang');\r\n                },\r\n                intro: {\r\n                    name: '醉酒',\r\n                    content: 'mark'\r\n                },\r\n                position: 'he',\r\n                marktext: '酿',\r\n                subSkill: {\r\n                    addDam: {\r\n                        trigger: { player: 'useCard1' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return Evt.card && Evt.card.name == 'sha' && player.countMark('jingniang');\r\n                        },\r\n                        content() {\r\n                            trigger.baseDamage += player.countMark('jingniang');\r\n                            if (trigger.addCount !== false) {\r\n                                trigger.addCount = false;\r\n                                if (player.stat[player.stat.length - 1].card.sha > 0) {\r\n                                    player.stat[player.stat.length - 1].card.sha--;\r\n                                }\r\n                            }\r\n                        },\r\n                        onremove(player, skill) {\r\n                            player.removeMark('jingniang', player.countMark('jingniang'), false);\r\n                        },\r\n                    },\r\n                },\r\n                ai: {\r\n                    order: 4,\r\n                    result: {\r\n                        player(player, target) {\r\n                            if (player.getUseValue({ name: 'sha', isCard: true }) > 0 && player.countCards('hs', 'sha') >= 2) {\r\n                                return 1;\r\n                            }\r\n                        },\r\n                    },\r\n                    threaten: 1.2\r\n                }\r\n            },\r\n            tuhui: {\r\n                group: ['tuhuiA', 'tuhuiB'],\r\n            },\r\n            tuhuiA: {\r\n                trigger: { source: 'damageEnd' },\r\n                round: 1,\r\n                filter(Evt, player) {\r\n                    return Evt.player.isIn() && Evt.player != player;\r\n                },\r\n                check(Evt, player) {\r\n                    return get.attitude(player, Evt.player) > 0;\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    'step 0';\r\n                    Evt.targets = [player];\r\n                    Evt.targets.add(trigger.player);\r\n                    Evt.num = player.storage.fuyou ? 2 : 1;\r\n                    'step 1';\r\n                    Evt.target = Evt.targets.shift();\r\n                    Evt.recover = Evt.target.recover(Evt.num);\r\n                    'step 2';\r\n                    if (!Evt.recover.result)\r\n                        Evt.target.draw(Evt.num);\r\n                    if (Evt.targets.length)\r\n                        Evt.goto(1);\r\n                },\r\n                ai: {\r\n                    threaten: 1.6,\r\n                    effect: {\r\n                        player(card, player, target, current) {\r\n                            if (get.tag(card, 'damage') == 1 && !player.hasMark('tuhui_roundname') && !target.hujia && target.hp > 1 && get.attitude(player, target) > 0) {\r\n                                if (target != player) {\r\n                                    if (target.hasSkillTag('maixie'))\r\n                                        return [1, 1, 0, 3];\r\n                                    return [1, 1, 0, 0.5];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            tuhuiB: {\r\n                trigger: { player: 'damageEnd' },\r\n                round: 1,\r\n                filter(Evt, player) {\r\n                    return Evt.source && Evt.source.isIn() && Evt.source != player;\r\n                },\r\n                check(Evt, player) {\r\n                    return get.attitude(player, Evt.source) > 0;\r\n                },\r\n                logTarget: 'source',\r\n                content() {\r\n                    'step 0';\r\n                    Evt.targets = [player];\r\n                    Evt.targets.add(trigger.source);\r\n                    Evt.num = player.storage.fuyou ? 2 : 1;\r\n                    'step 1';\r\n                    Evt.target = Evt.targets.shift();\r\n                    Evt.recover = Evt.target.recover(Evt.num);\r\n                    'step 2';\r\n                    if (!Evt.recover.result)\r\n                        Evt.target.draw(Evt.num);\r\n                    if (Evt.targets.length)\r\n                        Evt.goto(1);\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (get.tag(card, 'damage') == 1 && !target.hasMark('tuhuiB_roundcount') && !target.hujia && target.hp > 1 && get.attitude(target, player) > 0) {\r\n                                if (target != player)\r\n                                    return [0, 0, 1, 1];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            fuyou: {\r\n                audio: true,\r\n                enable: 'phaseUse',\r\n                unique: true,\r\n                limited: true,\r\n                content() {\r\n                    'step 0';\r\n                    player.storage.fuyou = true;\r\n                    player.awakenSkill('fuyou');\r\n                    'step 1';\r\n                    {\r\n                        let roundname = 'tuhui_roundcount';\r\n                        if (player.hasMark(roundname)) {\r\n                            player.popup('重置');\r\n                            let next = game.createEvent('resetSkill');\r\n                            [next.player, next.resetSkill] = [player, 'tuhui'];\r\n                            next.setContent('resetRound');\r\n                            game.delayx();\r\n                        }\r\n                    }\r\n                    'step 2';\r\n                    {\r\n                        let roundname = 'tuhuiB_roundcount';\r\n                        if (player.hasMark(roundname)) {\r\n                            player.popup('重置');\r\n                            let next = game.createEvent('resetSkill');\r\n                            [next.player, next.resetSkill] = [player, 'tuhuiB'];\r\n                            next.setContent('resetRound');\r\n                            game.delayx();\r\n                        }\r\n                    }\r\n                    'step 3';\r\n                    game.filterPlayer(cur => {\r\n                        cur.addTempSkill('fuyou2');\r\n                    });\r\n                },\r\n                ai: {\r\n                    order(item, player) {\r\n                        if (player.hp >= 3 && game.countPlayer(cur => {\r\n                            return get.attitude(player, cur) < 0 && cur.hp <= 1;\r\n                        }))\r\n                            return 10;\r\n                        return 0;\r\n                    },\r\n                    result: { player: 1 },\r\n                }\r\n            },\r\n            fuyou2: {\r\n                mark: true,\r\n                locked: true,\r\n                marktext: '幼',\r\n                intro: {\r\n                    name: '复幼',\r\n                    content: '无法回复体力',\r\n                },\r\n                trigger: {\r\n                    player: 'recoverBegin'\r\n                },\r\n                content() {\r\n                    trigger.cancel();\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (get.tag(card, 'recover'))\r\n                                return 'zeroplayertarget';\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            yinxu: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = true;\r\n                },\r\n                hiddenCard(player, name) {\r\n                    if (name == 'sha' && lib.inpile.includes(name)) {\r\n                        if (player.storage.yinxu == true)\r\n                            return player.countCards('h', { type: ['trick', 'delay'] });\r\n                        if (player.storage.yinxu == false)\r\n                            return player.countCards('h', { type: 'equip' });\r\n                    }\r\n                },\r\n                enable: ['chooseToUse'],\r\n                filter(Evt, player) {\r\n                    return lib.inpile.includes('sha');\r\n                },\r\n                filterCard(card, player) {\r\n                    if (!player.storage.yinxu)\r\n                        return get.type(card) == 'equip';\r\n                    return get.type2(card) == 'trick';\r\n                },\r\n                selectCard: 1,\r\n                check(card) {\r\n                    return 6 - get.value(card);\r\n                },\r\n                position: 'hes',\r\n                viewAs: { name: 'sha' },\r\n                onuse(result, player) {\r\n                    player.storage.yinxu = !player.storage.yinxu;\r\n                },\r\n                mod: {\r\n                    targetInRange(card, player, target) {\r\n                        if (_status.event.skill == 'yinxu')\r\n                            return true;\r\n                    },\r\n                    cardUsable(card, player, num) {\r\n                        if (_status.event.skillBy == 'yinxu' || _status.event.skill == 'yinxu')\r\n                            return Infinity;\r\n                    },\r\n                },\r\n                ai: {\r\n                    useSha: 1,\r\n                    result: { player: 1 },\r\n                },\r\n                group: 'yinxu_shaMiss',\r\n                subSkill: {\r\n                    shaMiss: {\r\n                        trigger: { player: 'shaMiss' },\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            return Evt.skill == 'yinxu';\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            player.chooseTarget('『吟虚』：令你或' + get.translation(trigger.target) + '调整手牌至上限', function (card, player, target) {\r\n                                if (![player, _status.event.target0].includes(target))\r\n                                    return false;\r\n                                return target.getHandcardLimit() != target.countCards('h');\r\n                            }, function (target) {\r\n                                let player = _status.event.player;\r\n                                return (target.getHandcardLimit() - target.countCards('h')) * get.attitude(player, target);\r\n                            }).set('target0', trigger.target);\r\n                            'step 1';\r\n                            if (result.bool) {\r\n                                Evt.target = result.targets[0];\r\n                                player.logSkill('yinxu', Evt.target);\r\n                                let num = Evt.target.getHandcardLimit() - Evt.target.countCards('h');\r\n                                if (num > 0) {\r\n                                    Evt.target.draw(num);\r\n                                }\r\n                                else if (num < -0) {\r\n                                    Evt.target.chooseToDiscard(-num, true);\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            maozhi: {\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('maozhi_used'))\r\n                        return false;\r\n                    return player.countCards('he') > 0;\r\n                },\r\n                filterCard(card) {\r\n                    for (let i = 0; i < ui.selected.cards.length; i++) {\r\n                        if (get.type2(card) == get.type2(ui.selected.cards[i]))\r\n                            return false;\r\n                    }\r\n                    return true;\r\n                },\r\n                check(card) {\r\n                    if (ui.selected.cards.length)\r\n                        return 7 - get.value(card);\r\n                    return 5 - get.value(card);\r\n                },\r\n                complexCard: true,\r\n                selectCard: 2,\r\n                position: 'he',\r\n                filterTarget(card, player, target) {\r\n                    return target != player;\r\n                },\r\n                discard: true,\r\n                content() {\r\n                    'step 0';\r\n                    Evt.suits = get.suit3(cards);\r\n                    if (get.color3(cards).length <= 1)\r\n                        player.addTempSkill('maozhi_used');\r\n                    'step 1';\r\n                    if (Evt.suits.includes('heart')) {\r\n                        target.loseHp();\r\n                        target.draw(3);\r\n                        game.delay(0.5);\r\n                    }\r\n                    'step 2';\r\n                    if (Evt.suits.includes('diamond')) {\r\n                        if (target.hasUseTarget('sha')) {\r\n                            target.chooseUseTarget('sha', true, false, '『茆织』：视为使用一张【杀】');\r\n                            game.delay(0.5);\r\n                        }\r\n                    }\r\n                    'step 3';\r\n                    if (Evt.suits.includes('spade')) {\r\n                        target.showHandcards('『茆织』展示手牌');\r\n                        target.link(true);\r\n                        game.delay(0.5);\r\n                    }\r\n                    'step 4';\r\n                    if (Evt.suits.includes('club')) {\r\n                        target.chooseCard('he', [3, Infinity], true, '『茆织』：重铸至少三张牌').ai = get.unuseful3;\r\n                        game.delay(0.5);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 5';\r\n                    if (result.bool && result.cards) {\r\n                        target.lose(result.cards, ui.discardPile).set('visible', true);\r\n                        target.$throw(result.cards);\r\n                        game.log(target, '将', result.cards, '置入了弃牌堆');\r\n                        target.draw(result.cards.length);\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 2,\r\n                    result: {\r\n                        target(player, target) {\r\n                            let cards = ui.selected.cards;\r\n                            let suits = get.suit3(cards);\r\n                            if (target.hp == 1 && suits.includes('heart'))\r\n                                return -1;\r\n                            let result = 0;\r\n                            if (suits.includes('heart')) {\r\n                                if (target.countCards('h') < 3)\r\n                                    result += 1;\r\n                                else\r\n                                    result -= 0.2;\r\n                            }\r\n                            if (suits.includes('diamond')) {\r\n                                result += target.getUseValue({ name: 'sha' }) / 2;\r\n                            }\r\n                            if (suits.includes('spade')) {\r\n                                if (!target.isLinked())\r\n                                    result -= 0.5;\r\n                            }\r\n                            if (suits.includes('club')) {\r\n                                if (target.countCards('h') < 3)\r\n                                    result -= 0.2;\r\n                                else\r\n                                    result += 1;\r\n                            }\r\n                            return result;\r\n                        }\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    used: {}\r\n                }\r\n            },\r\n            baifei: {\r\n                marktext: '妃',\r\n                intro: {\r\n                    name: '已发动『拜妃』的目标角色',\r\n                    mark(dialog, storage, player) {\r\n                        if (storage && storage.length) {\r\n                            let name = storage.map(cur => get.name(cur));\r\n                            dialog.addSmall([name, 'character']);\r\n                        }\r\n                    },\r\n                    content(storage, player) {\r\n                        return '已『拜妃』' + get.cnNumber(storage.length) + '名角色';\r\n                    },\r\n                },\r\n                trigger: { source: 'damageAfter', player: 'damageAfter' },\r\n                zhuSkill: true,\r\n                logTarget(Evt, player) {\r\n                    if (player == Evt.source)\r\n                        return [player, Evt.player];\r\n                    return [player, Evt.source];\r\n                },\r\n                filter(Evt, player) {\r\n                    if (!player.hasZhuSkill('baifei'))\r\n                        return false;\r\n                    let characters = player.getStorage('baifei');\r\n                    if (player == Evt.source)\r\n                        return !characters.includes(Evt.player);\r\n                    else if (Evt.source)\r\n                        return !characters.includes(Evt.source);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    if (!player.storage.baifei)\r\n                        player.storage.baifei = [];\r\n                    if (player == trigger.source)\r\n                        Evt.target = trigger.player;\r\n                    else\r\n                        Evt.target = trigger.source;\r\n                    player.chooseDrawRecover(2, 1, true);\r\n                    'step 1';\r\n                    if (result) {\r\n                        player.storage.baifei.add(Evt.target);\r\n                        player.markSkill('baifei');\r\n                    }\r\n                },\r\n            },\r\n            bianyin: {\r\n                trigger: { player: 'useCardBegin' },\r\n                filter(Evt, player) {\r\n                    return Evt.cards && Evt.cards.length == 1;\r\n                },\r\n                usable: 1,\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseCard('he', get.prompt2('bianyin'), true);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.suit = get.suit(result.cards[0]);\r\n                        player.lose(result.cards, ui.discardPile).set('visible', true);\r\n                        player.$throw(result.cards, 1000);\r\n                        game.log(player, '将', result.cards, '置入了弃牌堆');\r\n                        player.draw();\r\n                        trigger.card.suit = Evt.suit;\r\n                        trigger.cards[0].suit = Evt.suit;\r\n                    }\r\n                },\r\n            },\r\n            shabai: {\r\n                trigger: {\r\n                    player: ['loseAfter'],\r\n                    global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter'],\r\n                },\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    var _a;\r\n                    let evt = Evt.getl(player);\r\n                    return (_a = evt === null || evt === void 0 ? void 0 : evt.cards) === null || _a === void 0 ? void 0 : _a.filter(card => {\r\n                        if (_status.currentPhase == player)\r\n                            return get.color(card) == 'red';\r\n                        return get.color(card) == 'black';\r\n                    }).length;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    let evt = trigger.getl(player);\r\n                    Evt.num = evt.cards.filter(card => {\r\n                        if (_status.currentPhase == player)\r\n                            return get.color(card) == 'red';\r\n                        return get.color(card) == 'black';\r\n                    }).length;\r\n                    'step 1';\r\n                    if (_status.currentPhase == player) {\r\n                        player.draw();\r\n                    }\r\n                    else {\r\n                        player.moveCard();\r\n                    }\r\n                    'step 2';\r\n                    if (_status.currentPhase != player && !result.bool) {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 3';\r\n                    if (--Evt.num > 0)\r\n                        Evt.goto(1);\r\n                },\r\n            },\r\n            zaiying: {\r\n                trigger: {\r\n                    global: \"gainAfter\",\r\n                },\r\n                logTarget: 'player',\r\n                filter(Evt, player) {\r\n                    if (Evt.player == player)\r\n                        return false;\r\n                    return _status.currentPhase == player && player.canCompare(Evt.player);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.tar = trigger.player;\r\n                    player.chooseToCompare([Evt.tar]).callback = lib.skill.zaiying.callback;\r\n                },\r\n                callback() {\r\n                    if (Evt.winner == player) {\r\n                        player.drawTo(player.getHandcardLimit());\r\n                    }\r\n                    else {\r\n                        player.recover();\r\n                    }\r\n                    if (Evt.winner == target) {\r\n                        target.drawTo(target.getHandcardLimit());\r\n                    }\r\n                    else {\r\n                        target.recover();\r\n                    }\r\n                },\r\n                group: 'zaiying_phaseUse',\r\n                subSkill: {\r\n                    phaseUse: {\r\n                        enable: 'phaseUse',\r\n                        usable: 1,\r\n                        filterTarget(card, player, target) {\r\n                            return player.canCompare(target);\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return player.countCards('h') > 0;\r\n                        },\r\n                        content() {\r\n                            player.chooseToCompare([target]).callback = lib.skill.zaiying.callback;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            zhengen: {\r\n                intro: {\r\n                    name: '已发动『政恩』的目标角色',\r\n                    mark(dialog, storage, player) {\r\n                        if (storage && storage.length) {\r\n                            let name = storage.map(cur => {\r\n                                return get.name(cur);\r\n                            });\r\n                            dialog.addSmall([name, 'character']);\r\n                        }\r\n                    },\r\n                    content(storage, player) {\r\n                        return '已『政恩』' + get.cnNumber(storage.length) + '名角色';\r\n                    },\r\n                },\r\n                forced: true,\r\n                dutySkill: true,\r\n                trigger: { source: 'damageAfter', player: 'damageAfter' },\r\n                logTarget(Evt, player) {\r\n                    if (player == Evt.source)\r\n                        return [player, Evt.player];\r\n                    return [player, Evt.source];\r\n                },\r\n                filter(Evt, player) {\r\n                    let characters = player.getStorage('zhengen');\r\n                    if (player == Evt.source)\r\n                        return player.countCards('h') && Evt.player.countDiscardableCards(player, 'ej') && !characters.includes(Evt.player);\r\n                    else if (Evt.source)\r\n                        return player.countCards('h') && Evt.source.countDiscardableCards(player, 'ej') && !characters.includes(Evt.source);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    if (!player.storage.zhengen)\r\n                        player.storage.zhengen = [];\r\n                    if (!player.storage.zhengen_achieve)\r\n                        player.storage.zhengen_achieve = [];\r\n                    if (player == trigger.source)\r\n                        Evt.target = trigger.player;\r\n                    else\r\n                        Evt.target = trigger.source;\r\n                    player.chooseToDiscard(true, '『政恩』：弃置一张手牌');\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.storage.zhengen.addArray(result.cards);\r\n                        player.discardPlayerCard(Evt.target, 'ej', true);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    if (result.bool && result.links) {\r\n                        player.storage.zhengen.add(Evt.target);\r\n                        player.markSkill('zhengen');\r\n                        player.storage.zhengen_achieve.addArray(result.links);\r\n                        player.markSkill('zhengen_achieve');\r\n                    }\r\n                },\r\n                group: ['zhengen_achieve', 'zhengen_fail'],\r\n                subSkill: {\r\n                    achieve: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = [];\r\n                        },\r\n                        intro: {\r\n                            name: '已发动『政恩』的弃置卡牌',\r\n                            content: 'cards',\r\n                        },\r\n                        trigger: { global: 'gainAfter' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            let cards = player.getStorage('zhengen_achieve');\r\n                            let check = false;\r\n                            cards.forEach(card => {\r\n                                let num = get.number(card);\r\n                                if (cards.filter(cur => get.number(cur) == num).length >= 4)\r\n                                    check = true;\r\n                            });\r\n                            return check;\r\n                        },\r\n                        skillAnimation: true,\r\n                        animationColor: 'wood',\r\n                        content() {\r\n                            'step 0';\r\n                            game.log(player, '成功完成使命');\r\n                            let num = player.countCards('h') - player.getHandcardLimit();\r\n                            if (num > 0) {\r\n                                player.draw(num);\r\n                            }\r\n                            else if (num < 0) {\r\n                                player.chooseToDiscard(num);\r\n                            }\r\n                            'step 1';\r\n                            player.storage.zhengen = [];\r\n                            player.markSkill('zhengen');\r\n                            player.storage.zhengen_achieve = [];\r\n                            player.markSkill('zhengen_achieve');\r\n                        },\r\n                    },\r\n                    fail: {\r\n                        trigger: { player: 'recoverAfter' },\r\n                        direct: true,\r\n                        forceDie: true,\r\n                        filter(Evt, player) {\r\n                            return Evt.result && player.isHealthy() && player.countCards('h') > 0;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            game.log(player, '使命失败');\r\n                            player.storage.zhengen = [];\r\n                            player.unmarkSkill('zhengen');\r\n                            player.storage.zhengen_achieve = [];\r\n                            player.unmarkSkill('zhengen_achieve');\r\n                            player.awakenSkill('zhengen');\r\n                            Evt.num = player.countCards('h');\r\n                            player.chooseTarget(Evt.num, '『政恩』：令' + get.cnNumber(Evt.num) + '名角色横置', true, function (card, player, target) {\r\n                                return !target.isLinked();\r\n                            }, function (target) {\r\n                                let player = _status.event.player, num = _status.event.num;\r\n                                return get.attitude(player, target) / 2 + num * get.damageEffect(target, player, player);\r\n                            }).set('num', Evt.num);\r\n                            'step 1';\r\n                            if (result.bool) {\r\n                                let targets = result.targets;\r\n                                player.logSkill('zhengen_fail', targets);\r\n                                while (targets.length) {\r\n                                    let target = targets.shift();\r\n                                    target.link();\r\n                                    target.draw();\r\n                                }\r\n                            }\r\n                            'step 2';\r\n                            player.damage(player.countCards('h'), 'fire');\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            jiezou: new toSkill('regard', {\r\n                mod: {\r\n                    maxHandcardFinal(player, num) {\r\n                        return num + game.countPlayer(cur => cur.inRangeOf(player));\r\n                    }\r\n                },\r\n                intro: {\r\n                    markcount(storage, player) {\r\n                        return game.countPlayer(cur => cur.inRangeOf(player));\r\n                    }\r\n                }\r\n            }),\r\n            xtguyong: new toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return game.hasPlayer(cur => cur.countCards('h') < player.countCards('h')\r\n                        || cur.countCards('e') < player.countCards('e')\r\n                        || cur.countCards('j') < player.countCards('j'));\r\n                },\r\n                content: [() => {\r\n                        player.chooseTarget(get.prompt2('xtguyong'), (card, player, tar) => tar.countCards('h') < player.countCards('h')\r\n                            || tar.countCards('e') < player.countCards('e')\r\n                            || tar.countCards('j') < player.countCards('j'), tar => tar.countCards('j') < player.countCards('j'));\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result === null || result === void 0 ? void 0 : result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('xtguyong', Evt.target);\r\n                            Evt.position = '';\r\n                            for (let i of ['h', 'e', 'j']) {\r\n                                if (Evt.target.countCards(i) < player.countCards(i))\r\n                                    Evt.position += i;\r\n                            }\r\n                            Evt.num = Evt.position.length;\r\n                            player.turnOver();\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (Evt.num === 0)\r\n                            Evt.finish();\r\n                        else {\r\n                            Evt.target.discardPlayerCard(player, Evt.num, Evt.position, true).set('filterButton', button => {\r\n                                for (var i = 0; i < ui.selected.buttons.length; i++) {\r\n                                    if (get.position(button.link) == get.position(ui.selected.buttons[i].link))\r\n                                        return false;\r\n                                }\r\n                                return true;\r\n                            });\r\n                        }\r\n                    }, () => {\r\n                        Evt.num = result.links.length;\r\n                        if (Evt.num === 0)\r\n                            Evt.finish();\r\n                        else {\r\n                            player.chooseTarget(`令攻击范围内至多${get.cnNumber(Evt.num)}名角色受到${Evt.num}点伤害`, [1, Evt.num], (card, player, tar) => tar.inRangeOf(player), tar => -get.attitude2(tar));\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result === null || result === void 0 ? void 0 : result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            Evt.targets = result.targets.slice(0);\r\n                        }\r\n                    }, () => {\r\n                        if (Evt.targets.length) {\r\n                            let target = Evt.targets.shift();\r\n                            player.line(target, 'fire');\r\n                            target.damage(Evt.num);\r\n                            Evt.redo();\r\n                        }\r\n                    }],\r\n            }, 'direct').setT('phaseZhunbeiBegin'),\r\n            dizuo: {\r\n                trigger: { player: 'useCard' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return get.type(Evt.card) == 'equip' && game.hasPlayer(cur => {\r\n                        return cur != player && get.distance(cur, player) <= 1;\r\n                    });\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.chooseTarget(get.prompt2('dizuo'), function (card, player, target) {\r\n                        return target != player && get.distance(target, player) <= 1;\r\n                    }, function (target) {\r\n                        let player = _status.event.player, att = get.attitude(player, target);\r\n                        if (att > 0 && target.countCards('he', { type: 'equip' }))\r\n                            return att * 2;\r\n                        if (!target.countCards('he', { type: 'equip' }) && player.hasCard(card => {\r\n                            if (get.info(card).selectTarget == '-1')\r\n                                return 0;\r\n                            return get.effect(target, card, player, player) > 0;\r\n                        }))\r\n                            return 1 - att / 2;\r\n                        return 0;\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        Evt.target = result.targets[0];\r\n                        player.logSkill('dizuo', Evt.target);\r\n                        game.delayx();\r\n                        Evt.target.chooseCard('he', { type: 'equip' }).set('ai', card => {\r\n                            return 6 - get.value(card);\r\n                        }).set('prompt', '『帝座』：将一张装备牌交给' + get.translation(player.name) + '并摸两张牌，或成为其下一张牌的额外目标');\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    if (result.bool && result.cards && result.cards.length) {\r\n                        Evt.target.give(result.cards, player, true);\r\n                        Evt.target.draw(2);\r\n                    }\r\n                    else {\r\n                        if (!Evt.target.hasSkill('dizuo_mark')) {\r\n                            Evt.target.addSkill('dizuo_mark');\r\n                            game.swapSeat(player, Evt.target);\r\n                        }\r\n                        player.storage.dizuo_addTarget = Evt.target;\r\n                        player.markSkill('dizuo_addTarget');\r\n                    }\r\n                },\r\n                group: 'dizuo_addTarget',\r\n                subSkill: {\r\n                    mark: {},\r\n                    addTarget: {\r\n                        mark: 'character',\r\n                        intro: {\r\n                            content: '下一张牌的额外目标：$'\r\n                        },\r\n                        trigger: { player: 'useCard1' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return player.storage.dizuo_addTarget;\r\n                        },\r\n                        logTarget(Evt, player) {\r\n                            return player.storage.dizuo_addTarget;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            if (trigger.targets && trigger.targets.length) {\r\n                                trigger.targets.add(player.storage.dizuo_addTarget);\r\n                            }\r\n                            'step 1';\r\n                            delete player.storage.dizuo_addTarget;\r\n                            player.unmarkSkill('dizuo_addTarget');\r\n                        },\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten: 1.1,\r\n                    effect: {\r\n                        player(card, player, target, current) {\r\n                            if (player.storage.dizuo_addTarget && target != player.storage.dizuo_addTarget) {\r\n                                _status.dizuo = true;\r\n                                let eff = get.effect(player.storage.dizuo_addTarget, card, player, player);\r\n                                delete _status.dizuo;\r\n                                if (current > 0 || eff > 0)\r\n                                    return [1, eff];\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            hongtie: {\r\n                trigger: { player: 'useCardToPlayered' },\r\n                filter(Evt, player) {\r\n                    if (!Evt.isFirstTarget)\r\n                        return false;\r\n                    if (Evt.targets.length % 2 != 0)\r\n                        return false;\r\n                    return true;\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.chooseTarget(get.prompt2('hongtie'), function (card, player, target) {\r\n                        return _status.event.targets.includes(target);\r\n                    }).set('ai', function (target) {\r\n                        let player = _status.event.player;\r\n                        return get.damageEffect(target, player, player);\r\n                    }).set('targets', trigger.targets);\r\n                    'step 1';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        Evt.target = result.targets[0];\r\n                        player.logSkill('hongtie', Evt.target);\r\n                        Evt.target.damage();\r\n                        game.delayx();\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten: 1.1,\r\n                },\r\n            },\r\n            jiujiu: {\r\n                trigger: { player: 'phaseUseBegin' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return player.countCards('he', { type: 'equip' });\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.chooseCardTarget({\r\n                        position: 'he',\r\n                        filterCard: { type: 'equip' },\r\n                        filterTarget(card, player, target) {\r\n                            return true;\r\n                        },\r\n                        ai2(target) {\r\n                            let player = _status.event.player, att = get.attitude(player, target);\r\n                            if (att > 0 && target.countCards('he', { type: 'equip' }) && !player.needsToDiscard())\r\n                                return att * 1.5;\r\n                            if (!target.countCards('he', { type: 'equip' }))\r\n                                return get.damageEffect(target, player, player) - 1;\r\n                            return 0;\r\n                        }\r\n                    }).set('prompt', get.prompt2('jiujiu'));\r\n                    'step 1';\r\n                    if (result.bool && result.cards && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        Evt.target = result.targets[0];\r\n                        Evt.card = result.cards[0];\r\n                        player.logSkill('jiujiu', Evt.target);\r\n                        player.lose(Evt.card, ui.special);\r\n                        game.delayx();\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    let card = Evt.card;\r\n                    ui.cardPile.insertBefore(card.fix(), ui.cardPile.firstChild);\r\n                    game.updateRoundNumber();\r\n                    trigger.cancel();\r\n                    'step 3';\r\n                    Evt.target.chooseCard('he', { type: 'equip' }).set('ai', card => {\r\n                        return 8 - get.value(card);\r\n                    }).set('prompt', '『臼啾』：将一张装备牌交给' + get.translation(player.name) + '并摸两张牌，或受到一点伤害');\r\n                    'step 4';\r\n                    if (result.bool && result.cards && result.cards.length) {\r\n                        Evt.target.give(result.cards, player, true);\r\n                        Evt.target.draw(2);\r\n                    }\r\n                    else {\r\n                        player.line(Evt.target);\r\n                        Evt.target.damage('nocard');\r\n                    }\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        player(card, player, target, current) {\r\n                            if (player.storage.dizuo_addTarget && target != player.storage.dizuo_addTarget) {\r\n                                let eff = get.effect(player.storage.dizuo_addTarget, card, player, player);\r\n                                if (current > 0 || eff > 0)\r\n                                    return [1, eff];\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            qitong: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = true;\r\n                },\r\n                trigger: { player: 'phaseJieshuBegin' },\r\n                filter(Evt, player) {\r\n                    return player.getHistory('sourceDamage').length == 0;\r\n                },\r\n                logTarget(Evt, player) {\r\n                    return player.getNext();\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = player.getNext();\r\n                    if (player.storage.qitong) {\r\n                        player.swapEquip(Evt.target);\r\n                        Evt.finish();\r\n                    }\r\n                    else {\r\n                        game.swapSeat(player, Evt.target);\r\n                    }\r\n                    player.storage.qitong = !player.storage.qitong;\r\n                    'step 1';\r\n                    if ((player.next || player.getNext()) == _status.roundStart) {\r\n                        player.drawTo(player.getHandcardLimit());\r\n                        player.phaseUse();\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten: 1.1,\r\n                },\r\n            },\r\n            tianlve: {\r\n                audio: true,\r\n                trigger: { player: 'phaseUseBegin' },\r\n                priority: 199,\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.chooseTarget(get.prompt2('tianlve'), function (card, player, target) {\r\n                        return target != player;\r\n                    }, function (target) {\r\n                        let player = _status.event.player;\r\n                        return get.recoverEffect(target, player, player);\r\n                    });\r\n                    'step 1';\r\n                    if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        player.logSkill('tianlve', result.targets);\r\n                        Evt.target = result.targets[0];\r\n                        Evt.target.recover();\r\n                        player.storage.tianlve_pcr = Evt.target;\r\n                        player.addTempSkill('tianlve_pcr');\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    pcr: {\r\n                        mark: 'character',\r\n                        intro: {\r\n                            name: '甜略',\r\n                            content: '本阶段内你对$使用牌无距离限制，且指定其为唯一目标时，可以摸一张牌或增加一个额外目标',\r\n                        },\r\n                        onremove(player, skill) {\r\n                            player.unmarkSkill('tianlve_pcr');\r\n                            delete player.storage.tianlve_pcr;\r\n                        },\r\n                        trigger: { player: 'useCard' },\r\n                        priority: 199,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            let card = Evt.card, info = get.info(card);\r\n                            if (info.allowMultiple == false)\r\n                                return false;\r\n                            return Evt.targets && Evt.targets.length == 1 && Evt.targets[0] == player.storage.tianlve_pcr;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            var _a;\r\n                            let prompt2 = '为' + get.translation(trigger.card) + '增加一个目标';\r\n                            player.chooseTarget(get.prompt('tianlve'), function (card, player, target) {\r\n                                if (_status.event.targets.includes(target))\r\n                                    return false;\r\n                                return lib.filter.targetEnabled2(_status.event.card, player, target);\r\n                            }).set('prompt2', prompt2).set('ai', function (target) {\r\n                                let player = _status.event.player;\r\n                                return get.effect(target, _status.event.card, player, player);\r\n                            }).set('targets', trigger.targets).set('card', trigger.card);\r\n                            'step 1';\r\n                            if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                                if (!Evt.isMine())\r\n                                    game.delayx();\r\n                                Evt.targets = result.targets;\r\n                            }\r\n                            'step 2';\r\n                            if (Evt.targets) {\r\n                                player.logSkill('tianlve', Evt.targets);\r\n                                trigger.targets.addArray(Evt.targets);\r\n                            }\r\n                            else {\r\n                                player.draw();\r\n                            }\r\n                        },\r\n                        mod: {\r\n                            targetInRange(card, player, target) {\r\n                                if (target == player.storage.tianlve_pcr)\r\n                                    return true;\r\n                            },\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            luxian: {\r\n                audio: true,\r\n                group: 'P_SP',\r\n                trigger: { player: 'phaseZhunbeiBegin' },\r\n                unique: true,\r\n                limited: true,\r\n                skillAnimation: true,\r\n                animationColor: 'orange',\r\n                forceunique: true,\r\n                filter(Evt, player) {\r\n                    return player.isDamaged();\r\n                },\r\n                check(Evt, player) {\r\n                    return player.countCards('hes') >= 5 || player.hp <= 1;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a, _b;\r\n                    var _c;\r\n                    let list;\r\n                    if (_status.characterlist) {\r\n                        list = [];\r\n                        for (let i of _status.characterlist) {\r\n                            let info = lib.character[i];\r\n                            if (info[1] == 'psp' || info[4].includes('P_SP'))\r\n                                list.push(i);\r\n                        }\r\n                    }\r\n                    else if (_status.connectMode) {\r\n                        list = get.charactersOL(function (i) {\r\n                            let info = lib.character[i];\r\n                            return !(info[1] == 'psp' || info[4].includes('P_SP'));\r\n                        });\r\n                    }\r\n                    else {\r\n                        list = get.gainableCharacters(function (info) {\r\n                            return info[1] == 'psp' || info[4].includes('P_SP');\r\n                        });\r\n                    }\r\n                    let players = game.players.concat(game.dead);\r\n                    for (let i = 0; i < players.length; i++) {\r\n                        if (players[i] != player && players[i].group && players[i].group == 'psp') {\r\n                            list.add(players[i].name);\r\n                            list.add(players[i].name1);\r\n                            list.add(players[i].name2);\r\n                        }\r\n                    }\r\n                    list.remove(player.name);\r\n                    list.remove(player.name1);\r\n                    list.remove(player.name2);\r\n                    list.remove('Pudding');\r\n                    if (list.length) {\r\n                        player.chooseButton(true).set('ai', function (button) {\r\n                            return 5 || 0;\r\n                        }).set('createDialog', ['『颅祭』：获得其中一名角色所有技能', [list.randomGets(3), 'character']]);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 1';\r\n                    if ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        player.storage.luxian = true;\r\n                        player.awakenSkill('luxian');\r\n                        player.loseMaxHp();\r\n                        for (let i of result.links) {\r\n                            if (_status.characterlist) {\r\n                                _status.characterlist.remove(i);\r\n                            }\r\n                            let skills = lib.character[i][3];\r\n                            for (let j of skills) {\r\n                                player.addTempSkill(j, { player: 'phaseDiscardAfter' });\r\n                            }\r\n                            player.flashAvatar('luxian', i);\r\n                        }\r\n                        (_b = (_c = player.storage).luxian_pcr) !== null && _b !== void 0 ? _b : (_c.luxian_pcr = []);\r\n                        player.storage.luxian_pcr.addArray(result.links);\r\n                        player.storage.P_SP.addArray(result.links);\r\n                        player.addTempSkill('luxian_pcr', { player: 'phaseDiscardAfter' });\r\n                        player.markSkill('P_SP');\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    pcr: {\r\n                        onremove(player, skill) {\r\n                            let storage = player.getStorage(skill);\r\n                            if (player.hasSkill('P_SP', null, null, false) && storage.length) {\r\n                                if (_status.characterlist)\r\n                                    _status.characterlist.addArray(storage);\r\n                                player.storage.P_SP.removeArray(storage);\r\n                                if (player.storage.P_SP.length == 0) {\r\n                                    player.unmarkSkill('P_SP');\r\n                                }\r\n                                else {\r\n                                    player.markSkill('P_SP');\r\n                                }\r\n                                delete player.storage[skill];\r\n                            }\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            erni: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = 1;\r\n                },\r\n                group: ['erni_going', 'erni_change'],\r\n                hiddenCard(player, name) {\r\n                    switch (player.storage.erni) {\r\n                        case 1:\r\n                            if (name == 'sha')\r\n                                return player.countCards('h');\r\n                            break;\r\n                        case 2:\r\n                            if (name == 'shan')\r\n                                return player.countCards('h');\r\n                            break;\r\n                        case 3:\r\n                            if (name == 'tao')\r\n                                return player.countCards('h');\r\n                            break;\r\n                    }\r\n                },\r\n                ai: {\r\n                    useSha: 1,\r\n                    skillTagFilter(player, tag) {\r\n                        switch (tag) {\r\n                            case 'respondSha': {\r\n                                if (player.storage.erni != 1 || !player.countCards('h'))\r\n                                    return false;\r\n                                break;\r\n                            }\r\n                            case 'respondShan': {\r\n                                if (player.storage.erni != 2 || !player.countCards('h'))\r\n                                    return false;\r\n                                break;\r\n                            }\r\n                            case 'save': {\r\n                                if (player.storage.erni != 3 || !player.countCards('h'))\r\n                                    return false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    },\r\n                    result: { player: 1 },\r\n                    respondSha: true,\r\n                    respondShan: true,\r\n                    save: true,\r\n                },\r\n                subSkill: {\r\n                    going: {\r\n                        enable: ['chooseToUse', 'chooseToRespond'],\r\n                        prompt(Evt, player) {\r\n                            player || (player = Evt.player);\r\n                            let str = get.skillInfoTranslation('erni', player);\r\n                            return str;\r\n                        },\r\n                        viewAs(cards, player) {\r\n                            let name = null;\r\n                            let suit = get.suit(cards[0], player);\r\n                            switch (player.storage.erni) {\r\n                                case 1:\r\n                                    name = 'sha';\r\n                                    break;\r\n                                case 2:\r\n                                    name = 'shan';\r\n                                    break;\r\n                                case 3:\r\n                                    name = 'tao';\r\n                                    break;\r\n                            }\r\n                            if (name)\r\n                                return { name: name, suit: suit };\r\n                            return null;\r\n                        },\r\n                        viewAsFilter(player) {\r\n                            let cards = player.getCards('h');\r\n                            if (!cards.length)\r\n                                return false;\r\n                            let filter = Evt.filterCard;\r\n                            let name = null;\r\n                            switch (player.storage.erni) {\r\n                                case 1:\r\n                                    name = 'sha';\r\n                                    break;\r\n                                case 2:\r\n                                    name = 'shan';\r\n                                    break;\r\n                                case 3:\r\n                                    name = 'tao';\r\n                                    break;\r\n                            }\r\n                            for (let i of cards) {\r\n                                let suit = get.suit(i, player);\r\n                                if (filter({ name: name, suit: suit }, player, _status.event))\r\n                                    return true;\r\n                            }\r\n                            return false;\r\n                        },\r\n                        check(card) {\r\n                            return 7 - get.value(card);\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return player.countCards('h');\r\n                        },\r\n                        filterCard(card, player, Evt) {\r\n                            Evt = Evt || _status.event;\r\n                            let filter = Evt._backup.filterCard;\r\n                            let name = null;\r\n                            let suit = get.suit(card, player);\r\n                            switch (player.storage.erni) {\r\n                                case 1:\r\n                                    name = 'sha';\r\n                                    break;\r\n                                case 2:\r\n                                    name = 'shan';\r\n                                    break;\r\n                                case 3:\r\n                                    name = 'tao';\r\n                                    break;\r\n                            }\r\n                            if (filter({ name: name, suit: suit }, player, Evt))\r\n                                return true;\r\n                            return false;\r\n                        },\r\n                        precontent() {\r\n                            'step 0';\r\n                            Evt.cards = Evt.result.cards.slice(0);\r\n                            player.$throw(Evt.cards);\r\n                            player.lose(Evt.cards, ui.ordering);\r\n                            Evt.result.card.cards = [];\r\n                            Evt.result.cards = [];\r\n                            delete Evt.result.card.number;\r\n                            'step 1';\r\n                            game.broadcast(function () {\r\n                                ui.arena.classList.add('thrownhighlight');\r\n                            });\r\n                            let cards = Evt.cards;\r\n                            ui.arena.classList.add('thrownhighlight');\r\n                            game.addVideo('thrownhighlight1');\r\n                            player.showCards(cards, '『耳匿』展示手牌');\r\n                            while (cards.length) {\r\n                                ui.cardPile.insertBefore(cards.pop().fix(), ui.cardPile.firstChild);\r\n                            }\r\n                            game.updateRoundNumber();\r\n                            'step 2';\r\n                            game.broadcastAll(function () {\r\n                                ui.arena.classList.remove('thrownhighlight');\r\n                            });\r\n                            game.addVideo('thrownhighlight2');\r\n                            if (Evt.clear !== false) {\r\n                                game.broadcastAll(ui.clear);\r\n                            }\r\n                            if (player.storage.erni != 3)\r\n                                player.storage.erni++;\r\n                            else\r\n                                player.storage.erni = 1;\r\n                        },\r\n                    },\r\n                    change: {\r\n                        trigger: { player: ['shouruAfter', 'chonghuangAfter', 'baoxiaoAfter', 'tianlveAfter', 'luxianAfter', 'quankaiAfter', 'canxinAfter', 'useSkillAfter'] },\r\n                        priority: 199,\r\n                        prompt2: '转换一次『耳匿』',\r\n                        filter(Evt, player) {\r\n                            let name = Evt.name;\r\n                            if (name == 'useSkill')\r\n                                name = Evt.skill;\r\n                            if (['erni_change', 'erni_going'].includes(name))\r\n                                return false;\r\n                            let info = lib.skill[name];\r\n                            if (info.equipSkill || info.ruleSkill || info.silent)\r\n                                return false;\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            if (player.storage.erni != 3)\r\n                                player.storage.erni++;\r\n                            else\r\n                                player.storage.erni = 1;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            shouru: {\r\n                audio: 4,\r\n                trigger: { player: ['damageAfter', 'useCardAfter', 'respondAfter'] },\r\n                priority: 199,\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('shouru_used'))\r\n                        return false;\r\n                    return (Evt.name == 'damage' || ['useCard', 'respond'].includes(Evt.name) && Evt.skill == 'erni_going') && game.hasPlayer(cur => {\r\n                        return cur != player && get.distance(_status.currentPhase, cur, 'pure') == 1 && cur.countGainableCards(player, 'he');\r\n                    });\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    Evt.source = trigger.player;\r\n                    player.chooseTarget(get.prompt2('shouru'), true, function (card, player, target) {\r\n                        return target != player && get.distance(_status.currentPhase, target, 'pure') == 1 && target.countGainableCards(player, 'he');\r\n                    }, function (target) {\r\n                        let player = _status.event.player;\r\n                        return 8 - get.attitude(player, target);\r\n                    });\r\n                    'step 1';\r\n                    if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        player.addTempSkill('shouru_used');\r\n                        player.gainPlayerCard('he', result.targets[0], '『受乳』：获得其一张牌');\r\n                    }\r\n                },\r\n                ai: {\r\n                    expose: 0.1,\r\n                    threaten: 0.8,\r\n                },\r\n                involve: 'erni',\r\n                subSkill: {\r\n                    used: {}\r\n                },\r\n            },\r\n            chonghuang: {\r\n                audio: true,\r\n                group: 'P_SP',\r\n                trigger: { global: 'changeHp' },\r\n                unique: true,\r\n                limited: true,\r\n                skillAnimation: true,\r\n                animationColor: 'fire',\r\n                forceunique: true,\r\n                filter(Evt, player) {\r\n                    if (player.hasZhuSkill('yinzun') && Evt.player.group == player.group) {\r\n                        return Evt.player.hp == 1;\r\n                    }\r\n                    return Evt.player == player && player.hp == 1;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a, _b;\r\n                    var _c;\r\n                    let list;\r\n                    if (_status.characterlist) {\r\n                        list = [];\r\n                        for (let i of _status.characterlist) {\r\n                            let info = lib.character[i];\r\n                            if (info[1] == 'psp' || info[4].includes('P_SP'))\r\n                                list.push(i);\r\n                        }\r\n                    }\r\n                    else if (_status.connectMode) {\r\n                        list = get.charactersOL(function (i) {\r\n                            let info = lib.character[i];\r\n                            return !(info[1] == 'psp' || info[4].includes('P_SP'));\r\n                        });\r\n                    }\r\n                    else {\r\n                        list = get.gainableCharacters(function (info) {\r\n                            return info[1] == 'psp' || info[4].includes('P_SP');\r\n                        });\r\n                    }\r\n                    let players = game.players.concat(game.dead);\r\n                    for (let i = 0; i < players.length; i++) {\r\n                        if (players[i] != player && players[i].group && players[i].group == 'psp') {\r\n                            list.add(players[i].name);\r\n                            list.add(players[i].name1);\r\n                            list.add(players[i].name2);\r\n                        }\r\n                    }\r\n                    list.remove(player.name);\r\n                    list.remove(player.name1);\r\n                    list.remove(player.name2);\r\n                    list.remove('AyanaNana');\r\n                    if (list.length) {\r\n                        player.chooseButton(true).set('ai', function (button) {\r\n                            return 5 || 0;\r\n                        }).set('createDialog', ['『崇皇』：获得其中一名角色所有技能', [list.randomGets(3), 'character']]);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 1';\r\n                    if ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        player.storage.chonghuang = true;\r\n                        player.awakenSkill('chonghuang');\r\n                        player.loseMaxHp();\r\n                        for (let i of result.links) {\r\n                            if (_status.characterlist) {\r\n                                _status.characterlist.remove(result.links[i]);\r\n                            }\r\n                            let skills = lib.character[i][3];\r\n                            for (let j of skills) {\r\n                                player.addTempSkill(j, 'roundStart');\r\n                            }\r\n                            player.flashAvatar('chonghuang', i);\r\n                        }\r\n                        (_b = (_c = player.storage).chonghuang_kamen) !== null && _b !== void 0 ? _b : (_c.chonghuang_kamen = []);\r\n                        player.storage.chonghuang_kamen.addArray(result.links);\r\n                        player.storage.P_SP.addArray(result.links);\r\n                        player.addTempSkill('chonghuang_kamen', 'roundStart');\r\n                        player.markSkill('P_SP');\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    kamen: {\r\n                        onremove(player, skill) {\r\n                            let storage = player.getStorage(skill);\r\n                            if (player.hasSkill('P_SP', null, null, false) && storage.length) {\r\n                                if (_status.characterlist)\r\n                                    _status.characterlist.addArray(storage);\r\n                                player.storage.P_SP.removeArray(storage);\r\n                                if (player.storage.P_SP.length == 0) {\r\n                                    player.unmarkSkill('P_SP');\r\n                                }\r\n                                else {\r\n                                    player.markSkill('P_SP');\r\n                                }\r\n                                delete player.storage[skill];\r\n                            }\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            yinzun: {\r\n                unique: true,\r\n                zhuSkill: true,\r\n                involve: 'chonghuang',\r\n            },\r\n            jiren: {\r\n                audio: 6,\r\n                audioname: ['jike'],\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                content() {\r\n                    let func = function (result) {\r\n                        let num = 0;\r\n                        if (get.subtype(result) == 'equip1') {\r\n                            num += get.value(result, player, 'raw') / 2;\r\n                        }\r\n                        if (get.color(result) == 'red') {\r\n                            num += 1.5;\r\n                        }\r\n                        return num;\r\n                    };\r\n                    player.judge(func).callback = lib.skill.jiren.callback;\r\n                },\r\n                callback() {\r\n                    'step 0';\r\n                    if (Evt.judgeResult.color == 'red') {\r\n                        player.draw();\r\n                    }\r\n                    if (get.subtype(Evt.judgeResult.name) == 'equip1') {\r\n                        player.gain(card, 'gain2');\r\n                    }\r\n                    if (Evt.judgeResult.suit) {\r\n                        player.storage.jiren_going = [];\r\n                        player.storage.jiren_going.add(Evt.judgeResult.suit);\r\n                        if (!player.hasSkill('jiren_going'))\r\n                            player.addTempSkill('jiren_going');\r\n                        player.markSkill('jiren_going');\r\n                    }\r\n                },\r\n                group: 'jiren2',\r\n                ai: {\r\n                    threaten: 1.2,\r\n                    order: 16,\r\n                    result: { player: 1 },\r\n                },\r\n                subSkill: {\r\n                    going: {\r\n                        audio: false,\r\n                        marktext: \"祭\",\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '戮秋',\r\n                            content(storage, player, skill) {\r\n                                if (storage.length) {\r\n                                    return '本回合上一次『祭刃』判定结果：' + get.translation(storage);\r\n                                }\r\n                            },\r\n                        },\r\n                        onremove: true,\r\n                    },\r\n                }\r\n            },\r\n            jiren2: {\r\n                audio: false,\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    return player.getStat('skill').jiren;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.loseHp();\r\n                    'step 1';\r\n                    let next = game.createEvent('resetSkill');\r\n                    [next.player] = [player];\r\n                    next.setContent(function () {\r\n                        player.popup('重置');\r\n                        game.log(player, '重置了『祭刃』');\r\n                        player.getStat('skill').jiren--;\r\n                    });\r\n                },\r\n                ai: {\r\n                    order(item, player) {\r\n                        if (player.awakenedSkills.includes('canxin')) {\r\n                            if (player.isHealthy() || player.hp > 3)\r\n                                return 10;\r\n                        }\r\n                        else {\r\n                            if (player.storage.jiren_going && player.hp > 1) {\r\n                                let num = player.countCards('hs', card => {\r\n                                    let info = get.info(card);\r\n                                    if (info.allowMultiple == false)\r\n                                        return false;\r\n                                    return player.hasUseTarget(card);\r\n                                });\r\n                                if (num >= 3)\r\n                                    return -1;\r\n                                return num / player.countCards('hs') < (player.hp / 4);\r\n                            }\r\n                        }\r\n                    },\r\n                    result: {\r\n                        player(player, target) {\r\n                            if (player.hasUnknown(3) || player.hp === 1)\r\n                                return -0.1;\r\n                            if (!player.storage.jiren_going)\r\n                                return player.countCards('hs');\r\n                            else if (player.countCards('hs') >= 4)\r\n                                return 0.1;\r\n                            else\r\n                                return -1;\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            luqiu: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = 1;\r\n                },\r\n                trigger: { global: ['loseEnd', 'cardsDiscardEnd'] },\r\n                filter(Evt, player) {\r\n                    let record = player.storage.jiren_going;\r\n                    if (!record)\r\n                        return false;\r\n                    return Evt.cards && Evt.cards.filter(card => get.position(card, true) == 'd' && record.includes(get.suit(card))).length;\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    if (player.storage.luqiu == 1) {\r\n                        player.chooseTarget(get.prompt('luqiu') + '视为使用一张杀？', function (card, player, target) {\r\n                            return player.canUse('sha', target);\r\n                        }).set('ai', function (target) {\r\n                            let player = _status.event.player;\r\n                            return get.effect(target, { name: 'sha' }, player, player);\r\n                        }).set('prompt2', get.skillInfoTranslation('luqiu', player));\r\n                    }\r\n                    else if (player.storage.luqiu == 2) {\r\n                        player.chooseBool(function () {\r\n                            return 1;\r\n                        }).set('prompt', '###' + get.prompt('luqiu') + '摸一张牌###' + get.skillInfoTranslation('luqiu', player));\r\n                    }\r\n                    else {\r\n                        player.chooseCard('he').set('ai', card => {\r\n                            let player = _status.event.player;\r\n                            if (player.storage.jiren_going.includes(get.suit(card)))\r\n                                return 12 - get.value(card);\r\n                            return 10 - get.value(card);\r\n                        }).set('prompt', '###' + get.prompt('luqiu') + '弃一张牌###' + get.skillInfoTranslation('luqiu', player));\r\n                    }\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        if (player.storage.luqiu < 3)\r\n                            player.storage.luqiu++;\r\n                        else\r\n                            player.storage.luqiu = 1;\r\n                        if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)\r\n                            player.useCard({ name: 'sha' }, result.targets, false);\r\n                        else if (result.cards && result.cards.length)\r\n                            player.discard(result.cards);\r\n                        else\r\n                            player.draw();\r\n                    }\r\n                },\r\n                mod: {\r\n                    aiValue(player, card, num) {\r\n                        if (get.suit(card) && player.storage.jiren_going && player.storage.jiren_going.includes(get.suit(card)))\r\n                            return num / 10;\r\n                    },\r\n                    aiOrder(player, card, num) {\r\n                        if (get.suit(card) && player.storage.jiren_going && player.storage.jiren_going.includes(get.suit(card)))\r\n                            return num + 8;\r\n                    },\r\n                },\r\n                ai: {\r\n                    combo: 'jiren',\r\n                    useSha: 2,\r\n                    effect: {\r\n                        player(card, player) {\r\n                            if (get.suit(card) && player.storage.jiren_going && player.storage.jiren_going.includes(get.suit(card))) {\r\n                                if (get.name(card) == 'sha')\r\n                                    return [1, 3];\r\n                                return [1, 2];\r\n                            }\r\n                            if (get.name(card) == 'sha')\r\n                                return [1, 2];\r\n                        }\r\n                    },\r\n                    result: { player: 1 },\r\n                },\r\n            },\r\n            canxin: {\r\n                audio: 2,\r\n                trigger: { player: 'phaseUseEnd' },\r\n                unique: true,\r\n                limited: true,\r\n                skillAnimation: true,\r\n                animationColor: 'fire',\r\n                forceunique: true,\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') > 0 && player.isDamaged();\r\n                },\r\n                check(Evt, player) {\r\n                    return player.storage.jiren_going\r\n                        && player.countCards('he', card => get.tag(card, 'damage')) > 0 && player.isDamaged();\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.storage.canxin = true;\r\n                    player.awakenSkill('canxin');\r\n                    'step 1';\r\n                    let next = player.chooseCard('he', '###重铸一张牌###若你以此法重铸了【杀】或伤害类锦囊牌，重复此操作');\r\n                    next.set('ai', card => {\r\n                        if (get.tag(card, 'damage'))\r\n                            return 15 - get.value(card);\r\n                        return 6 - get.value(card);\r\n                    });\r\n                    'step 2';\r\n                    if (result.bool && result.cards) {\r\n                        player.lose(result.cards, ui.discardPile).set('visible', true);\r\n                        player.$throw(result.cards);\r\n                        game.log(player, '将', result.cards, '置入了弃牌堆');\r\n                        player.draw();\r\n                        let card = result.cards[0];\r\n                        if (get.tag(card, 'damage'))\r\n                            Evt.goto(1);\r\n                        else {\r\n                            player.recover();\r\n                            let evt = _status.event.getParent('phase');\r\n                            if (evt) {\r\n                                evt.finish();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            quankai: {\r\n                audio: 7,\r\n                trigger: { source: 'damageEnd' },\r\n                direct: true,\r\n                round: 1,\r\n                filter(Evt, player) {\r\n                    return Evt.player.isIn() && Evt.player.countDiscardableCards(player, 'hej');\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.discardPlayerCard(trigger.player, 'hej', get.prompt2('quankai'));\r\n                    'step 1';\r\n                    if ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        player.logSkill('quankai', trigger.player);\r\n                        player.storage.quankai = result.links.slice(0);\r\n                        player.markSkill('quankai');\r\n                    }\r\n                },\r\n                mark: true,\r\n                intro: { content: 'cards' },\r\n                group: 'quankai_gainBy',\r\n                subSkill: {\r\n                    gainBy: {\r\n                        trigger: { player: 'useCardAfter' },\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            let type = get.type2(Evt.card);\r\n                            return type == 'trick' && player.storage.quankai;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            player.chooseCardButton('从弃牌堆获得上次『拳开』的弃牌，否则重置『拳开』', 1, player.storage.quankai).set('filterButton', function (button) {\r\n                                return _status.event.list.includes(button.link);\r\n                            }).set('list', player.storage.quankai.filterInD('d')).set('ai', function (button) {\r\n                                return get.value(button.link) > 0;\r\n                            });\r\n                            'step 1';\r\n                            if (result.bool && result.links) {\r\n                                player.logSkill('quankai');\r\n                                player.gain(result.links, 'gain2');\r\n                            }\r\n                            else {\r\n                                let roundname = 'quankai_roundcount';\r\n                                if (player.hasMark(roundname)) {\r\n                                    player.popup('重置');\r\n                                    let next = game.createEvent('resetSkill');\r\n                                    [next.player, next.resetSkill] = [player, 'quankai'];\r\n                                    next.setContent('resetRound');\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            heyuan: {\r\n                audio: 2,\r\n                group: 'P_SP',\r\n                trigger: { player: 'phaseDrawBegin1' },\r\n                unique: true,\r\n                limited: true,\r\n                skillAnimation: true,\r\n                animationColor: 'fire',\r\n                forceunique: true,\r\n                filter(Evt, player) {\r\n                    return !Evt.numFixed && player.isDamaged();\r\n                },\r\n                check(Evt, player) {\r\n                    return player.countCards('hs', card => get.tag(card, 'damage')) >= 2;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    trigger.changeToZero();\r\n                    player.storage.heyuan = true;\r\n                    player.awakenSkill('heyuan');\r\n                    Evt.num = 1;\r\n                    'step 1';\r\n                    let list;\r\n                    if (_status.characterlist) {\r\n                        list = [];\r\n                        for (let i of _status.characterlist) {\r\n                            let info = lib.character[i];\r\n                            if (info[1] == 'psp' || info[4].includes('P_SP'))\r\n                                list.push(i);\r\n                        }\r\n                    }\r\n                    else if (_status.connectMode) {\r\n                        list = get.charactersOL(function (i) {\r\n                            let info = lib.character[i];\r\n                            return !(info[1] == 'psp' || info[4].includes('P_SP'));\r\n                        });\r\n                    }\r\n                    else {\r\n                        list = get.gainableCharacters(function (info) {\r\n                            return info[1] == 'psp' || info[4].includes('P_SP');\r\n                        });\r\n                    }\r\n                    let players = game.players.concat(game.dead);\r\n                    for (let i = 0; i < players.length; i++) {\r\n                        if (players[i] != player && players[i].group && players[i].group == 'psp') {\r\n                            list.add(players[i].name);\r\n                            list.add(players[i].name1);\r\n                            list.add(players[i].name2);\r\n                        }\r\n                    }\r\n                    list.remove(player.name);\r\n                    list.remove(player.name1);\r\n                    list.remove(player.name2);\r\n                    list.remove('KurenaiAkane');\r\n                    if (list.length) {\r\n                        player.chooseButton(true).set('ai', function (button) {\r\n                            return 5 || 0;\r\n                        }).set('createDialog', ['『合缘』：获得其中一名角色的所有' + (Evt.num > 0 ? '' : '非') + '限定技', [list.randomGets(3), 'character']]);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    if ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        for (let i of result.links) {\r\n                            if (_status.characterlist) {\r\n                                _status.characterlist.remove(result.links[i]);\r\n                            }\r\n                            let skills = lib.character[i][3];\r\n                            for (let j of skills) {\r\n                                if (Evt.num ? (lib.skill[j].limited) : (!lib.skill[j].limited)) {\r\n                                    player.addTempSkill(j, { player: 'phaseBegin' });\r\n                                }\r\n                            }\r\n                        }\r\n                        if (!player.storage.heyuan_qiyuan)\r\n                            player.storage.heyuan_qiyuan = [];\r\n                        player.storage.heyuan_qiyuan.addArray(result.links);\r\n                        player.storage.P_SP.addArray(result.links);\r\n                        player.flashAvatar('heyuan', result.links[0]);\r\n                        player.addTempSkill('heyuan_qiyuan', { player: 'phaseBegin' });\r\n                        player.markSkill('P_SP');\r\n                    }\r\n                    'step 3';\r\n                    if (Evt.num > 0) {\r\n                        Evt.num--;\r\n                        Evt.goto(1);\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    qiyuan: {\r\n                        onremove(player, skill) {\r\n                            let storage = player.getStorage(skill);\r\n                            if (player.hasSkill('P_SP', null, null, false) && storage.length) {\r\n                                if (_status.characterlist)\r\n                                    _status.characterlist.addArray(storage);\r\n                                player.storage.P_SP.removeArray(storage);\r\n                                if (player.storage.P_SP.length == 0) {\r\n                                    player.unmarkSkill('P_SP');\r\n                                }\r\n                                else {\r\n                                    player.markSkill('P_SP');\r\n                                }\r\n                                delete player.storage[skill];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            yangyao: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                audio: false,\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    let list = [];\r\n                    if (!player.isAuto)\r\n                        return true;\r\n                    for (let i = 0; i < ui.discardPile.childElementCount; i++) {\r\n                        let card = ui.discardPile.childNodes[i];\r\n                        if (player.getStorage('yangyao').includes(get.name(card)))\r\n                            continue;\r\n                        if (get.type2(card) == 'trick') {\r\n                            list.push(card);\r\n                        }\r\n                    }\r\n                    return list.length;\r\n                },\r\n                filterCard(card, player) {\r\n                    if (ui.selected.cards.length)\r\n                        return get.color(card) == get.color(ui.selected.cards[0]);\r\n                    return player.countCards('hes', { color: get.color(card) }) >= 2;\r\n                },\r\n                complexCard: true,\r\n                selectCard() {\r\n                    if (ui.selected.cards.length)\r\n                        return 2;\r\n                    return [0, 2];\r\n                },\r\n                filterTarget: true,\r\n                position: 'he',\r\n                content() {\r\n                    'step 0';\r\n                    if (!cards.length)\r\n                        player.loseHp();\r\n                    'step 1';\r\n                    let list = [];\r\n                    for (let i = 0; i < ui.discardPile.childElementCount; i++) {\r\n                        let card = ui.discardPile.childNodes[i];\r\n                        if (player.getStorage('yangyao').includes(get.name(card)))\r\n                            continue;\r\n                        if (get.type2(card) == 'trick') {\r\n                            list.push(card);\r\n                        }\r\n                    }\r\n                    if (list.length) {\r\n                        target.chooseCardButton('『秧耀』：选择获得一张锦囊牌', list, true).ai = function (button) {\r\n                            return get.value(button.link);\r\n                        };\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    if (result.bool && result.links) {\r\n                        if (!player.storage.yangyao)\r\n                            player.storage.yangyao = [];\r\n                        player.storage.yangyao.push(get.name(result.links[0]));\r\n                        target.gain(result.links, 'gain2', 'log');\r\n                    }\r\n                },\r\n                group: 'yangyao_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { global: 'phaseAfter' },\r\n                        priority: 23,\r\n                        filter(Evt, player) {\r\n                            return player.getStorage('yangyao').length;\r\n                        },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            player.getStorage('yangyao').length = 0;\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    order(item, player) {\r\n                        if (player.hp <= 1 && player.countCards('hes') <= 3)\r\n                            return 0;\r\n                        if (player.isHealthy() || player.hp > 3)\r\n                            return 9;\r\n                        return 2;\r\n                    },\r\n                    result: {\r\n                        player(player, target) {\r\n                            if (player.hp == 1)\r\n                                return -10;\r\n                            if (ui.selected.cards.length < 2) {\r\n                                return player.hp - 6;\r\n                            }\r\n                            return -2.5;\r\n                        },\r\n                        target(player, target) {\r\n                            let result = 0;\r\n                            for (let i = 0; i < ui.discardPile.childElementCount; i++) {\r\n                                let card = ui.discardPile.childNodes[i];\r\n                                if (player.getStorage('yangyao').includes(get.name(card)))\r\n                                    continue;\r\n                                if (get.type2(card) == 'trick') {\r\n                                    result = Math.max(result, get.value(card, target, 'raw'));\r\n                                }\r\n                            }\r\n                            return result;\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            shili: {\r\n                audio: true,\r\n                trigger: { global: 'phaseEnd' },\r\n                unique: true,\r\n                limited: true,\r\n                skillAnimation: true,\r\n                animationColor: 'wood',\r\n                forceunique: true,\r\n                filter(Evt, player) {\r\n                    if (!player.isDamaged())\r\n                        return false;\r\n                    let history = player.getHistory('useCard');\r\n                    for (let i = 0; i < history.length; i++) {\r\n                        if (get.type2(history[i].card) != 'basic')\r\n                            return true;\r\n                    }\r\n                },\r\n                check(Evt, player) {\r\n                    let history = player.getHistory('useCard');\r\n                    let num = 0;\r\n                    for (let i = 0; i < history.length; i++) {\r\n                        if (get.type2(history[i].card) != 'basic')\r\n                            num++;\r\n                    }\r\n                    if (player.hasUnknown(1))\r\n                        return false;\r\n                    return num >= 3;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    let history = player.getHistory('useCard'), num = 0;\r\n                    for (let i = 0; i < history.length; i++) {\r\n                        if (get.type2(history[i].card) != 'basic')\r\n                            num++;\r\n                    }\r\n                    Evt.num = num;\r\n                    player.storage.shili = true;\r\n                    player.awakenSkill('shili');\r\n                    player.chooseTarget('『拾璃』：令一名角色摸' + get.cnNumber(Evt.num) + '张牌并执行一个额外的出牌阶段', true, function (card, player, target) {\r\n                        return target.isIn();\r\n                    }).set('num', Evt.num).ai = function (target) {\r\n                        let att = get.attitude(_status.event.player, target);\r\n                        return att * _status.event.num;\r\n                    };\r\n                    'step 1';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        Evt.target = result.targets[0];\r\n                        Evt.target.draw(Evt.num);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    Evt.target.phaseUse();\r\n                },\r\n            },\r\n            akjianwu: {\r\n                trigger: { player: ['useCard', 'respond'] },\r\n                priority: 5,\r\n                filter(Evt, player) {\r\n                    let logTarget = get.copy(lib.skill.akjianwu.logTarget);\r\n                    let target = logTarget(Evt, player);\r\n                    return get.type(Evt.card) == 'basic' && player.canCompare(target);\r\n                },\r\n                check(Evt, player) {\r\n                    let logTarget = get.copy(lib.skill.akjianwu.logTarget);\r\n                    let target = logTarget(Evt, player);\r\n                    return get.attitude(player, target) < 0 || Evt.card.name == 'tao';\r\n                },\r\n                logTarget(Evt, player) {\r\n                    if (Evt.name == 'respond')\r\n                        return Evt.source;\r\n                    if (['sha', 'qi', 'jiu', 'tao'].includes(Evt.card.name))\r\n                        return Evt.targets[0];\r\n                    if (Evt.respondTo)\r\n                        return Evt.respondTo[0];\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    let logTarget = get.copy(lib.skill.akjianwu.logTarget);\r\n                    let target = logTarget(trigger, player);\r\n                    Evt.target = target;\r\n                    player.chooseToCompare(Evt.target);\r\n                    'step 1';\r\n                    if (result.winner && result.loser) {\r\n                        [Evt.winner, Evt.loser, Evt.card] = [result.winner, result.loser, trigger.card];\r\n                        let list = ['于' + get.translation(Evt.card) + '结算后获得之', '展示并获得对方的一张牌'], check = 1;\r\n                        if (Evt.card.cards && get.value(Evt.card.cards, Evt.winner, 'raw') > Evt.loser.countGainableCards(Evt.winner, 'he'))\r\n                            check = 0;\r\n                        Evt.winner.chooseControlList(list, true, function (Evt, player) {\r\n                            return _status.event.check;\r\n                        }).set('check', check);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    switch (result.index) {\r\n                        case 0: {\r\n                            if (Evt.card.cards && Evt.card.cards.length) {\r\n                                let next = game.createEvent('akjianwu_gain2');\r\n                                Evt.next.remove(next);\r\n                                trigger.after.push(next);\r\n                                [next.player, next.cards] = [Evt.winner, Evt.card.cards];\r\n                                next.setContent(lib.skill.akjianwu.akjianwu_gain2);\r\n                            }\r\n                            Evt.finish();\r\n                            break;\r\n                        }\r\n                        case 1: {\r\n                            if (Evt.loser.countGainableCards(Evt.winner, 'he') > 0)\r\n                                Evt.winner.gainPlayerCard(Evt.loser, 'he', true, 'visibleMove');\r\n                            break;\r\n                        }\r\n                    }\r\n                    'step 3';\r\n                    if (result.links) {\r\n                        Evt.winner.chooseToUse({\r\n                            cards: result.links,\r\n                            filterCard(card) {\r\n                                if (get.itemtype(card) != 'card' || !_status.event.cards || !_status.event.cards.includes(card))\r\n                                    return false;\r\n                                if (lib.filter.filterCard.apply(this, arguments)) {\r\n                                    if (card.name == 'sha')\r\n                                        return true;\r\n                                    let range = get.select(get.info(card).selectTarget);\r\n                                    if (range[0] == 1 && range[1] == 1)\r\n                                        return true;\r\n                                }\r\n                            },\r\n                            prompt: '是否使用获得牌中的一张？',\r\n                        });\r\n                    }\r\n                },\r\n                akjianwu_gain2() {\r\n                    'step 0';\r\n                    Evt.gains = cards.filter(card => card.isInPile());\r\n                    if (Evt.gains.length)\r\n                        player.gain(cards, 'gain2');\r\n                    'step 1';\r\n                    player.chooseToUse({\r\n                        cards: Evt.gains,\r\n                        filterCard(card) {\r\n                            if (get.itemtype(card) != 'card' || !_status.event.cards || !_status.event.cards.includes(card))\r\n                                return false;\r\n                            if (lib.filter.filterCard.apply(this, arguments)) {\r\n                                if (card.name == 'sha')\r\n                                    return true;\r\n                                let range = get.select(get.info(card).selectTarget);\r\n                                if (range[0] == 1 && range[1] == 1)\r\n                                    return true;\r\n                            }\r\n                        },\r\n                        prompt: '是否使用获得牌中的一张？',\r\n                    });\r\n                },\r\n                ai: {\r\n                    threaten(player, target) {\r\n                        if (target.countCards('hs') >= 2)\r\n                            return 0.7;\r\n                    },\r\n                }\r\n            },\r\n            tongzhao: {\r\n                audio: true,\r\n                group: 'P_SP',\r\n                unique: true,\r\n                limited: true,\r\n                skillAnimation: true,\r\n                animationColor: 'yami',\r\n                forceunique: true,\r\n                trigger: { player: ['chooseToCompareAfter', 'compareMultipleAfter'], target: ['chooseToCompareAfter', 'compareMultipleAfter'] },\r\n                filter(Evt, player) {\r\n                    if (!player.isDamaged())\r\n                        return false;\r\n                    if (Evt.preserve)\r\n                        return false;\r\n                    if (Evt.result.tie)\r\n                        return true;\r\n                    if (player == Evt.player) {\r\n                        return Evt.num1 <= Evt.num2;\r\n                    }\r\n                    else {\r\n                        return Evt.num1 >= Evt.num2;\r\n                    }\r\n                },\r\n                check(Evt, player) {\r\n                    if (player.hasUnknown(1))\r\n                        return Evt.result.tie;\r\n                    return player.countCards('hes') >= 4;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.storage.tongzhao = true;\r\n                    player.awakenSkill('tongzhao');\r\n                    if (trigger.result.tie) {\r\n                        Evt.num = 1;\r\n                    }\r\n                    'step 1';\r\n                    let list;\r\n                    if (_status.characterlist) {\r\n                        list = [];\r\n                        for (let i of _status.characterlist) {\r\n                            let info = lib.character[i];\r\n                            if (info[1] == 'psp' || info[4].includes('P_SP'))\r\n                                list.push(i);\r\n                        }\r\n                    }\r\n                    else if (_status.connectMode) {\r\n                        list = get.charactersOL(function (i) {\r\n                            let info = lib.character[i];\r\n                            return !(info[1] == 'psp' || info[4].includes('P_SP'));\r\n                        });\r\n                    }\r\n                    else {\r\n                        list = get.gainableCharacters(function (info) {\r\n                            return info[1] == 'psp' || info[4].includes('P_SP');\r\n                        });\r\n                    }\r\n                    let players = game.players.concat(game.dead);\r\n                    for (let i = 0; i < players.length; i++) {\r\n                        if (players[i] != player && players[i].group && players[i].group == 'psp') {\r\n                            list.add(players[i].name);\r\n                            list.add(players[i].name1);\r\n                            list.add(players[i].name2);\r\n                        }\r\n                    }\r\n                    list.remove(player.name);\r\n                    list.remove(player.name1);\r\n                    list.remove(player.name2);\r\n                    list.remove('AkumaYuu');\r\n                    if (list.length) {\r\n                        player.chooseButton(true).set('ai', function (button) {\r\n                            return 5 || 0;\r\n                        }).set('createDialog', ['『同召』：获得其中一名角色的所有技能', [list.randomGets(3), 'character']]);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    if ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        for (let i of result.links) {\r\n                            if (_status.characterlist) {\r\n                                _status.characterlist.remove(result.links[i]);\r\n                            }\r\n                            let skills = lib.character[i][3];\r\n                            for (let j of skills) {\r\n                                player.addTempSkill(j, { player: ['loseHpAfter', 'damageAfter'] });\r\n                            }\r\n                        }\r\n                        if (!player.storage.tongzhao_wangzuo)\r\n                            player.storage.tongzhao_wangzuo = [];\r\n                        player.storage.tongzhao_wangzuo.addArray(result.links);\r\n                        player.storage.P_SP.addArray(result.links);\r\n                        player.flashAvatar('tongzhao', result.links[0]);\r\n                        player.addTempSkill('tongzhao_wangzuo', { player: ['loseHpAfter', 'damageAfter'] });\r\n                        player.markSkill('P_SP');\r\n                    }\r\n                    'step 3';\r\n                    if (Evt.num > 0) {\r\n                        Evt.num--;\r\n                        Evt.goto(1);\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    wangzuo: {\r\n                        onremove(player, skill) {\r\n                            let storage = player.getStorage(skill);\r\n                            if (player.hasSkill('P_SP', null, null, false) && storage.length) {\r\n                                if (_status.characterlist)\r\n                                    _status.characterlist.addArray(storage);\r\n                                player.storage.P_SP.removeArray(storage);\r\n                                if (player.storage.P_SP.length == 0) {\r\n                                    player.unmarkSkill('P_SP');\r\n                                }\r\n                                else {\r\n                                    player.markSkill('P_SP');\r\n                                }\r\n                                delete player.storage[skill];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            langfei: new toSkill('trigger', {\r\n                filter: function (Evt, player) {\r\n                    return get.type(Evt.card) === 'trick' && get.tag(Evt.card, 'damage');\r\n                },\r\n                content: function () {\r\n                    trigger.baseDamage++;\r\n                },\r\n            }, 'usable').setT('useCard'),\r\n            xieyun: new toSkill('trigger', {\r\n                animationColor: 'yami',\r\n                filter(Evt, player) {\r\n                    return game.countPlayer(cur => {\r\n                        let skills = cur.getSkills(null, false, false);\r\n                        for (let i of skills) {\r\n                            if (i != 'xieyun' && lib.skill[i].limited && cur.awakenedSkills.contains(i)) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    });\r\n                },\r\n                check(Evt, player) {\r\n                    return game.countPlayer(cur => {\r\n                        let skills = cur.getSkills(null, false, false);\r\n                        for (let i of skills) {\r\n                            if (i != 'xieyun' && lib.skill[i].limited && cur.awakenedSkills.contains(i)) {\r\n                                return get.attitude(player, cur) >= 0;\r\n                            }\r\n                        }\r\n                    });\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.awakenSkill('xieyun');\r\n                    player.chooseTarget('选择『协韵』的目标', true, (card, player, tar) => {\r\n                        let skills = tar.getSkills(null, false, false);\r\n                        for (let i of skills) {\r\n                            if (i != 'xieyun' && lib.skill[i].limited && tar.awakenedSkills.contains(i)) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }, (tar) => {\r\n                        return get.attitude(player, tar) + 1;\r\n                    });\r\n                    'step 1';\r\n                    if ((_a = result === null || result === void 0 ? void 0 : result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        Evt.target = result.targets[0];\r\n                        let list = [];\r\n                        let skills = Evt.target.getSkills(null, false, false);\r\n                        for (let i of skills) {\r\n                            if (i != 'xieyun' && lib.skill[i].limited && Evt.target.awakenedSkills.contains(i)) {\r\n                                list.push(i);\r\n                            }\r\n                        }\r\n                        if (list.length == 1) {\r\n                            Evt.target.restoreSkill(list[0]);\r\n                            player.addSkill(list[0]);\r\n                        }\r\n                        else if (list.length > 1) {\r\n                            player.chooseControl(list).set('prompt', '选择一个限定技重置之');\r\n                        }\r\n                        else {\r\n                            Evt.finish();\r\n                        }\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    Evt.target.restoreSkill(result.control);\r\n                    player.addSkill(result.control);\r\n                }\r\n            }, 'unique', 'limited', 'skillAnimation', 'forceunique').setT('phaseUseBegin'),\r\n            bianshi: {\r\n                trigger: { global: 'phaseBegin' },\r\n                priority: 23,\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return Evt.player.hp >= player.hp && player.countCards('h', card => !card.hasGaintag('ming_'));\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    let check = get.attitude(player, trigger.player) <= 0 && trigger.player.countCards('h') >= 2;\r\n                    player.chooseCard('h', get.prompt2('bianshi'), card => !card.hasGaintag('ming_')).set('ai', card => {\r\n                        if (_status.event.check && get.type2(card) != 'equip')\r\n                            return 8 - get.value(card) + Math.random();\r\n                        else\r\n                            return 0;\r\n                    }).set('check', check);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.target = trigger.player;\r\n                        player.showCards(result.cards, '『辨识』亮出手牌');\r\n                        player.addGaintag(result.cards, 'ming_bianshi');\r\n                        game.delayx();\r\n                        player.logSkill('bianshi', Evt.target);\r\n                        Evt.target.storage.bianshi2 = get.type2(result.cards[0]);\r\n                        Evt.target.addTempSkill('bianshi2');\r\n                    }\r\n                }\r\n            },\r\n            bianshi2: {\r\n                trigger: { global: ['loseEnd', 'cardsDiscardEnd'] },\r\n                filter(Evt, player) {\r\n                    let record = player.storage.bianshi2;\r\n                    return Evt.cards && Evt.cards.filter(card => get.position(card, true) == 'd' && get.type2(card) == record).length > 0;\r\n                },\r\n                forced: true,\r\n                mark: true,\r\n                intro: { content: '指定的类型：$' },\r\n                onremove: ['bianshi', 'bianshi2'],\r\n                content() {\r\n                    'step 0';\r\n                    if (player.storage.bianshi && player.storage.bianshi >= 2) {\r\n                        player.chooseToDiscard('『辨识』弃牌', 'he', true);\r\n                        Evt.finish();\r\n                    }\r\n                    else {\r\n                        player.draw();\r\n                    }\r\n                    'step 1';\r\n                    if (!player.storage.bianshi)\r\n                        player.storage.bianshi = 1;\r\n                    else\r\n                        player.storage.bianshi++;\r\n                    'step 2';\r\n                    if (player.storage.bianshi === 2)\r\n                        player.loseHp();\r\n                }\r\n            },\r\n            ming_bianshi: {},\r\n            zhuxing: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.cards = get.cards(7);\r\n                    let list1 = Evt.cards.slice(0), list2 = player.getCards('h').slice(0);\r\n                    let list = ['『铸星』：选择进行替换的牌'];\r\n                    if (list1.length) {\r\n                        list.push('牌堆顶牌');\r\n                        list.push([list1, 'card']);\r\n                    }\r\n                    if (list2.length) {\r\n                        list.push('你的手牌');\r\n                        list.push([list2, 'card']);\r\n                    }\r\n                    list.push('hidden');\r\n                    Evt.list1 = list1;\r\n                    Evt.list2 = list2;\r\n                    let next = player.chooseButton(list, true).set('complexSelect', true);\r\n                    next.set('selectButton', function (button) {\r\n                        let ul = ui.selected.buttons.length;\r\n                        if (ul % 2 == 0)\r\n                            return [ul, ul + 1];\r\n                        return [ul + 2, ul + 2];\r\n                    });\r\n                    next.set('filterButton', function (button) {\r\n                        let evt = _status.event.getParent(), ul = ui.selected.buttons.length;\r\n                        if (ul > 0) {\r\n                            let pre = ui.selected.buttons[ul - 1].link;\r\n                            let now = button.link;\r\n                            if (evt.list2.includes(pre) && evt.list1.includes(now)) {\r\n                                return true;\r\n                            }\r\n                            if (evt.list1.includes(pre) && evt.list2.includes(now)) {\r\n                                return true;\r\n                            }\r\n                            return false;\r\n                        }\r\n                        return true;\r\n                    });\r\n                    next.set('switchToAuto', function () {\r\n                        _status.event.result = 'ai';\r\n                    }).set('processAI', function () {\r\n                        let evt = _status.event.getParent(), links = [], player = evt.player;\r\n                        evt.list1.sort(function (a, b) {\r\n                            return get.useful(b, player) - get.useful(a, player);\r\n                        });\r\n                        evt.list2.sort(function (a, b) {\r\n                            return get.useful(a, player) - get.useful(b, player);\r\n                        });\r\n                        for (let i = 0; i < Math.min(evt.list2.length, evt.list1.length); i++) {\r\n                            if (get.useful(evt.list1[i], player) - get.useful(evt.list2[i], player) >= 0)\r\n                                links.push(evt.list1[i], evt.list2[i]);\r\n                        }\r\n                        return {\r\n                            bool: true,\r\n                            links: links,\r\n                        };\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.cards1 = Evt.list1.filter(card => result.links.includes(card));\r\n                        Evt.cards2 = Evt.list2.filter(card => result.links.includes(card));\r\n                        Evt.num = Evt.cards1.length;\r\n                        player.lose(Evt.cards2, ui.special);\r\n                        player.gain(Evt.cards1, 'draw');\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    let cards = Evt.cards.map(card => Evt.cards1.includes(card) ? Evt.cards2[Evt.cards1.indexOf(card)] : card);\r\n                    while (cards.length) {\r\n                        ui.cardPile.insertBefore(cards.pop(), ui.cardPile.firstChild);\r\n                    }\r\n                },\r\n                ai: {\r\n                    order(item, player) {\r\n                        if (player.isDamaged() && player.countCards('he') >= 3)\r\n                            return 9;\r\n                        return 4;\r\n                    },\r\n                    result: {\r\n                        player(player, target) {\r\n                            return 1;\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            shanzhu: {\r\n                unique: true,\r\n                limited: true,\r\n                skillAnimation: true,\r\n                animationColor: 'yami',\r\n                forceunique: true,\r\n                trigger: { player: ['phaseJieshuBegin'] },\r\n                filter(Evt, player) {\r\n                    if (!player.isDamaged())\r\n                        return false;\r\n                    let cards = [];\r\n                    return player.getHistory('useCard', evt => {\r\n                        cards.addArray(evt.cards);\r\n                    });\r\n                    return cards.length;\r\n                },\r\n                check(Evt, player) {\r\n                    let cards = [];\r\n                    return player.getHistory('useCard', evt => {\r\n                        cards.addArray(evt.cards);\r\n                    });\r\n                    return cards.length > 4;\r\n                },\r\n                content() {\r\n                    player.storage.shanzhu = true;\r\n                    player.awakenSkill('shanzhu');\r\n                    let cards = [];\r\n                    player.getHistory('useCard', evt => {\r\n                        cards.addArray(evt.cards);\r\n                    });\r\n                    player.gain(cards, 'gain2', 'log');\r\n                },\r\n            },\r\n            P_SP: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                marktext: 'P',\r\n                intro: {\r\n                    onunmark(storage, player) {\r\n                        if (_status.characterlist)\r\n                            _status.characterlist.addArray(storage);\r\n                        storage = [];\r\n                    },\r\n                    mark(dialog, storage, player) {\r\n                        if (storage && storage.length) {\r\n                            dialog.addText('已叠加：' + get.cnNumber(storage.length) + '位P-SP角色');\r\n                            dialog.addSmall([storage, 'character']);\r\n                        }\r\n                    },\r\n                    content(storage, player) {\r\n                        return '已叠加：' + get.cnNumber(storage.length) + '位P-SP角色';\r\n                    },\r\n                    markcount(storage, player) {\r\n                        if (storage && storage.length)\r\n                            return storage.length;\r\n                        return 0;\r\n                    }\r\n                },\r\n            },\r\n            qianjiwanbian: {\r\n                audio: 4,\r\n                trigger: { source: 'damageAfter', player: 'phaseBegin' },\r\n                priority: 199,\r\n                frequent: true,\r\n                group: ['qianjiwanbian_change', 'qianjiwanbian_clear'],\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'damage' && Evt.getParent() && Evt.getParent().name != \"trigger\" && Evt.getParent(2) && Evt.getParent(2).qianjiwanbian)\r\n                        return false;\r\n                    return true;\r\n                },\r\n                gainable: ['前', '千', '钱', '签', '欠', '浅', '迁', '倩', '谦', '倩', '牵', '乾', '铅', '遣', '仟', '纤', '黔', '嵌', '钳', '歉', '虔', '谴', '堑',\r\n                    '技', '级', '及', '机', '祭', '集', '籍', '基', '即', '记', '急', '吉', '寄', '季', '极', '继', '计', '纪', '姬', '己',\r\n                    '挤', '剂', '济', '积', '击', '肌', '忌', '棘', '疾', '激', '际', '系', '寂', '迹', '脊', '辑', '藉', '稷', '戟', '骑', '悸', '觊', '嫉',\r\n                    '完', '玩', '晚', '碗', '万', '湾', '丸', '弯', '婉', '挽', '腕', '顽', '绾', '蜿', '宛',\r\n                    '边', '变', '便', '编', '遍', '扁', '辩', '鞭', '辨', '贬', '匾', '辫',\r\n                ],\r\n                content() {\r\n                    'step 0';\r\n                    if (!player.storage.qianjiwanbian_change)\r\n                        player.storage.qianjiwanbian_change = 'thunder';\r\n                    let list = lib.linked.slice(0);\r\n                    list.remove('kami');\r\n                    list.remove(player.storage.qianjiwanbian_change);\r\n                    Evt.map = {};\r\n                    for (let i = 0; i < list.length; i++) {\r\n                        Evt.map[get.rawName(list[i])] = list[i];\r\n                        list[i] = get.rawName(list[i]);\r\n                    }\r\n                    list.push('取消');\r\n                    player.chooseControl('dialogcontrol', list).set('ai', function () {\r\n                        return list.randomGets();\r\n                    }).set('prompt', '『千机万变』：将（' + (get.rawName(player.storage.qianjiwanbian_change)) + '）改写为：');\r\n                    'step 1';\r\n                    if (result.control != '取消') {\r\n                        player.storage.qianjiwanbian_change = Evt.map[result.control];\r\n                        let list = get.gainableSkills((info, skill) => {\r\n                            let name = get.translation(skill);\r\n                            for (let i = 0; i < name.length; i++) {\r\n                                if (lib.skill.qianjiwanbian.gainable.includes(name.substring(i, i + 1)))\r\n                                    return !info.notemp && !player.hasSkill(skill);\r\n                            }\r\n                        });\r\n                        list.add('qianjiwanbian');\r\n                        player.discoverSkill(list);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    let link = result.skill;\r\n                    if (link) {\r\n                        if (trigger.getParent().name != \"trigger\" && !trigger.getParent(2).qianjiwanbian)\r\n                            trigger.getParent(2).qianjiwanbian = true;\r\n                        if (link != 'qianjiwanbian') {\r\n                            player.addAdditionalSkill('qianjiwanbian', link, true);\r\n                            player.addSkillLog(link);\r\n                        }\r\n                        if (player.storage.qianjiwanbian_clear === true && Evt.reapeat != true) {\r\n                            Evt.reapeat = true;\r\n                            Evt.goto(2);\r\n                        }\r\n                        if (link == 'qianjiwanbian' && player.storage.qianjiwanbian_clear != true) {\r\n                            game.playAudio('skill', 'qianjiwanbian_mua');\r\n                            player.storage.qianjiwanbian_clear = true;\r\n                            game.log(player, '改写了', '#y『千机万变』');\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        player(card, player, target) {\r\n                            if (get.tag(card, 'damage'))\r\n                                return [1, 0.5];\r\n                        },\r\n                    },\r\n                    threaten: 3,\r\n                },\r\n                subSkill: {\r\n                    change: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = 'thunder';\r\n                        },\r\n                        trigger: { source: 'damageBegin2' },\r\n                        priority: 199,\r\n                        prompt(Evt) {\r\n                            let str = '可以将本次对' + get.translation(Evt.player) + '造成的伤害改为（';\r\n                            str += get.rawName(_status.event.player.storage.qianjiwanbian_change);\r\n                            str += '）属性';\r\n                            return str;\r\n                        },\r\n                        filter(Evt, player) {\r\n                            return player.storage.qianjiwanbian_change && Evt.nature != player.storage.qianjiwanbian_change;\r\n                        },\r\n                        content() {\r\n                            trigger.nature = player.storage.qianjiwanbian_change;\r\n                        }\r\n                    },\r\n                    clear: {\r\n                        audio: 4,\r\n                        trigger: { player: 'phaseBegin' },\r\n                        priority: 200,\r\n                        forced: true,\r\n                        silent: true,\r\n                        filter(Evt, player) {\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            player.storage.qianjiwanbian_clear = false;\r\n                            player.removeAdditionalSkill('qianjiwanbian');\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            ze: {\r\n                intro: {\r\n                    name: '『梦桓』：则',\r\n                    content: 'cards',\r\n                    onunmark: 'throw',\r\n                },\r\n                locked: true,\r\n                cardAround: true,\r\n            },\r\n            menghuan: {\r\n                forced: true,\r\n                priority: 10,\r\n                trigger: {\r\n                    global: ['gameStart', 'judgeEnd'],\r\n                    player: 'enterGame',\r\n                },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'judge')\r\n                        return get.position(Evt.result.card, true) == 'o';\r\n                    return true;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.cards = trigger.name == 'judge' ? [trigger.result.card] : get.cards();\r\n                    game.cardsGotoSpecial(Evt.cards);\r\n                    player.markAuto('ze', Evt.cards);\r\n                    player.$gain2(Evt.cards);\r\n                    'step 1';\r\n                    if (player.getStorage('ze').length > 6) {\r\n                        let discard = player.getStorage('ze').splice(0, 1);\r\n                        game.cardsDiscard(discard);\r\n                        player.markSkill('ze');\r\n                    }\r\n                },\r\n                mod: {\r\n                    aiOrder(player, card, num) {\r\n                        let card0 = player.getStorage('ze')[player.getHistory('useCard').length];\r\n                        if (card0 && (get.suit(card0) == get.suit(card) || get.type2(card0) == get.type2(card)))\r\n                            return num + 4;\r\n                    },\r\n                },\r\n                group: ['ze', 'menghuan_drawBy'],\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: { player: ['useCard'] },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            if (player.getStorage('ze')) {\r\n                                let card = player.getStorage('ze')[player.getHistory('useCard').length - 1];\r\n                                return card && (get.suit(card) == get.suit(Evt.card) || get.type2(card) == get.type2(Evt.card));\r\n                            }\r\n                        },\r\n                        content() {\r\n                            player.draw();\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            gengu: {\r\n                trigger: { player: 'changeHp' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h');\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseTarget(get.prompt2('gengu')).set('ai', function (target) {\r\n                        let player = _status.event.player;\r\n                        let att = get.attitude(player, target);\r\n                        if (!target.countCards('he'))\r\n                            return 0;\r\n                        if (target.hasCardAround())\r\n                            return att - 1;\r\n                        return -att;\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.target = result.targets[0];\r\n                        player.logSkill('gengu', Evt.target);\r\n                        Evt.target.judge(card => {\r\n                            if (get.color(card) == 'black' && !_status.event.player.hasCardAround())\r\n                                return -2;\r\n                            return 0;\r\n                        }).callback = lib.skill.gengu.callback;\r\n                    }\r\n                },\r\n                callback() {\r\n                    'step 0';\r\n                    if (Evt.judgeResult.color == 'black') {\r\n                        if (player.hasCardAround()) {\r\n                            player.chooseCard('he', true, '『亘古』：重铸一张牌').ai = get.unuseful3;\r\n                        }\r\n                        else {\r\n                            player.chooseToDiscard('he', true);\r\n                        }\r\n                    }\r\n                    'step 1';\r\n                    if (result.bool && result.cards) {\r\n                        player.lose(result.cards, ui.discardPile).set('visible', true);\r\n                        player.$throw(result.cards);\r\n                        game.log(player, '将', result.cards, '置入了弃牌堆');\r\n                        player.draw(result.cards.length);\r\n                    }\r\n                },\r\n            },\r\n            di: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill]) {\r\n                        player.storage[skill] = {\r\n                            left: [],\r\n                            right: []\r\n                        };\r\n                    }\r\n                },\r\n                locked: true,\r\n                intro: {\r\n                    mark(dialog, content, player) {\r\n                        if (player.storage.di.left && player.storage.di.left.length) {\r\n                            let list = player.storage.di.left.slice(0);\r\n                            dialog.addText('左侧「笛」');\r\n                            dialog.addSmall(list);\r\n                        }\r\n                        if (player.storage.di.right && player.storage.di.right.length) {\r\n                            let list = player.storage.di.right.slice(0);\r\n                            dialog.addText('右侧「笛」');\r\n                            dialog.addSmall(list);\r\n                        }\r\n                    },\r\n                    content: 'cards',\r\n                    onunmark(storage, player) {\r\n                        if ((storage && storage.left && storage.left.length) || (storage && storage.right && storage.right.length)) {\r\n                            let cards = storage.left.concat(storage.right);\r\n                            player.$throw(cards, 1000);\r\n                            game.cardsDiscard(cards);\r\n                            game.log(cards, '被置入了弃牌堆');\r\n                            storage.left.length = 0;\r\n                            storage.right.length = 0;\r\n                        }\r\n                    },\r\n                },\r\n                cardAround: ['left', 'right'],\r\n            },\r\n            dixian: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseControl('左侧', '右侧').set('prompt', '『笛鲜』：选择将牌堆顶牌置于').set('ai', function () {\r\n                        let player = _status.event.player;\r\n                        if (player.getStorage('di').left > 3)\r\n                            return 1;\r\n                        return 0;\r\n                    });\r\n                    'step 1';\r\n                    Evt.cards = get.cards();\r\n                    if (result.control == '左侧') {\r\n                        lib.skill.dixian.process(player, Evt.cards[0], 'left');\r\n                    }\r\n                    else {\r\n                        lib.skill.dixian.process(player, Evt.cards[0], 'right');\r\n                    }\r\n                },\r\n                process(player, card, method) {\r\n                    let storage = player.getStorage('di');\r\n                    if (storage.left && storage.right) {\r\n                        let num = 0, left = [], right = [];\r\n                        switch (method) {\r\n                            case 'use':\r\n                                for (let i of storage.left) {\r\n                                    if (get.type(card) == get.type(i)) {\r\n                                        left.push(i);\r\n                                        player.$give(i, player, false);\r\n                                        player.gain(i, 'log');\r\n                                        num++;\r\n                                    }\r\n                                }\r\n                                for (let i of storage.right) {\r\n                                    if (get.type(card) == get.type(i)) {\r\n                                        right.push(i);\r\n                                        player.$give(i, player, false);\r\n                                        player.gain(i, 'log');\r\n                                        num++;\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case 'left':\r\n                                player.$drawAuto(card);\r\n                                storage[method].add(card);\r\n                                for (let i of storage.right) {\r\n                                    if (get.color(card) == get.color(i)) {\r\n                                        right.push(i);\r\n                                        player.$give(i, player, false);\r\n                                        player.gain(i, 'log');\r\n                                        num++;\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case 'right':\r\n                                player.$drawAuto(card);\r\n                                storage[method].add(card);\r\n                                for (let i of storage.left) {\r\n                                    if (get.color(card) == get.color(i)) {\r\n                                        left.push(i);\r\n                                        player.$give(i, player, false);\r\n                                        player.gain(i, 'log');\r\n                                        num++;\r\n                                    }\r\n                                }\r\n                                break;\r\n                        }\r\n                        storage.left.removeArray(left);\r\n                        storage.right.removeArray(right);\r\n                        player.markSkill('di');\r\n                        if (num >= 3)\r\n                            player.useSkill('dixian');\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 4,\r\n                    result: {\r\n                        player: 1,\r\n                    },\r\n                },\r\n                group: ['di', 'dixian_useCard'],\r\n                subSkill: {\r\n                    useCard: {\r\n                        trigger: { player: 'useCardAfter' },\r\n                        direct: true,\r\n                        priority: 545,\r\n                        content() {\r\n                            lib.skill.dixian.process(player, trigger.cards[0], 'use');\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            gumei: {\r\n                trigger: { player: 'useCard' },\r\n                frequent: true,\r\n                filter(Evt) {\r\n                    return get.type2(Evt.card) == 'trick' && Evt.card.isCard;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseTarget(get.prompt2('gumei')).set('ai', function (target) {\r\n                        let player = _status.event.player;\r\n                        let att = get.attitude(player, target);\r\n                        if (target.hasCardAround())\r\n                            return att - 1;\r\n                        return -att;\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.target = result.targets[0];\r\n                        player.logSkill('gumei', Evt.target);\r\n                        if (Evt.target.hasCardAround()) {\r\n                            Evt.target.draw();\r\n                        }\r\n                        else {\r\n                            Evt.target.link();\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten: 1.4,\r\n                    noautowuxie: true,\r\n                }\r\n            },\r\n            jidou: new toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    if (!(Evt.card.name == 'juedou'))\r\n                        return false;\r\n                    return player == Evt.target || Evt.getParent().targets.length == 1;\r\n                },\r\n                content() {\r\n                    player.draw((player.hp === 1 || player.countCards('h') === 0) ? 3 : 1);\r\n                },\r\n            }, 'forced').setT({ player: 'useCardToPlayered', target: 'useCardToTargeted' }),\r\n            duotian: new toSkill('active', {\r\n                filter(Evt, player) {\r\n                    return lib.skill.duotian.computedCard().length && player.countCards('hs', { type: 'basic' });\r\n                },\r\n                computedCard() {\r\n                    let list = get.inpile('trick2', card => {\r\n                        let info = lib.card[card];\r\n                        if (!info)\r\n                            return false;\r\n                        if (info.toself === true)\r\n                            return true;\r\n                        if ((info.selectTarget && info.selectTarget !== 1)\r\n                            || info.notarget || info.multitarget)\r\n                            return false;\r\n                        return true;\r\n                    });\r\n                    return list;\r\n                },\r\n                chooseButton: {\r\n                    dialog(Evt, player) {\r\n                        let list = lib.skill.duotian.computedCard();\r\n                        for (let i of list) {\r\n                            list[i] = ['锦囊', '', list[i]];\r\n                        }\r\n                        return ui.create.dialog('『堕天』选择转化的锦囊', [list, 'vcard']);\r\n                    },\r\n                    filter(button, player) {\r\n                        return lib.filter.filterCard({ name: button.link[2] }, player, _status.event.getParent());\r\n                    },\r\n                    check(button) {\r\n                        return _status.event.player.getUseValue({ name: button.link[2] });\r\n                    },\r\n                    backup(links, player) {\r\n                        return {\r\n                            popname: true,\r\n                            position: 'hs',\r\n                            viewAs: { name: links[0][2] },\r\n                            check(card) {\r\n                                return 6 - get.value(card);\r\n                            },\r\n                            filterCard(card) {\r\n                                return get.type(card) == 'basic';\r\n                            },\r\n                            onuse(result, player) {\r\n                                let num = result.card.number;\r\n                                let targets = result.targets;\r\n                                if (num) {\r\n                                    if (num >= 6 && get.type(result.card) !== 'delay') {\r\n                                        let next = game.createEvent('duotianChangeTarget');\r\n                                        next.player = player;\r\n                                        next._trigger = result;\r\n                                        next.setContent(function () {\r\n                                            'step 0';\r\n                                            player.chooseTarget(get.prompt('duotian'), '为' + get.translation(trigger.card) + '增加一个目标', function (card, player, target) {\r\n                                                return !_status.event.sourcex.contains(target) && lib.filter.targetEnabled2(_status.event.card, player, target);\r\n                                            }).set('sourcex', trigger.targets).set('card', trigger.card);\r\n                                            'step 1';\r\n                                            if (result.bool) {\r\n                                                if (!Evt.isMine() && !_status.connectMode)\r\n                                                    game.delayx();\r\n                                                Evt.target = result.targets[0];\r\n                                            }\r\n                                            else {\r\n                                                Evt.finish();\r\n                                            }\r\n                                            'step 2';\r\n                                            player.logSkill('duotian', Evt.target);\r\n                                            trigger.targets.push(Evt.target);\r\n                                        });\r\n                                    }\r\n                                    if (num >= 12) {\r\n                                        let evt = _status.event.getParent('phaseUse');\r\n                                        if (evt && evt.name === 'phaseUse') {\r\n                                            let next = game.createEvent('duotianExtraStage');\r\n                                            next.player = player;\r\n                                            next.setContent(function () {\r\n                                                'step 0';\r\n                                                game.delay(1);\r\n                                                player.setAvatar('KurumiUsa', 'KurumiUsa1');\r\n                                                'step 1';\r\n                                                player.popup('额外出牌');\r\n                                                game.delay(0.5);\r\n                                                'step 2';\r\n                                                player.phaseUse();\r\n                                                'step 3';\r\n                                                player.setAvatar('KurumiUsa', 'KurumiUsa');\r\n                                            });\r\n                                            _status.event.next.remove(next);\r\n                                            evt.after.push(next);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                    },\r\n                    prompt(links, player) {\r\n                        return '将一张基本牌当做【' + get.translation(links[0][2]) + '】使用';\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 5,\r\n                    result: {\r\n                        player: 1\r\n                    }\r\n                }\r\n            }).set('usable', 1),\r\n            qisui: new toSkill('trigger', {\r\n                init(player, skill) {\r\n                    player.storage[skill] = [];\r\n                },\r\n                filter(Evt, player) {\r\n                    let targets = lib.skill.qisui.logTarget(Evt, player);\r\n                    return targets.length;\r\n                },\r\n                check(Evt, player) {\r\n                    let targets = lib.skill.qisui.logTarget(Evt, player);\r\n                    let num = 0;\r\n                    targets.forEach(target => {\r\n                        num += get.attitude(player, target);\r\n                    });\r\n                    return num >= 0;\r\n                },\r\n                logTarget(Evt, player) {\r\n                    var _a;\r\n                    let targets = [];\r\n                    if (_status.currentPhase === player)\r\n                        targets.push(Evt.player);\r\n                    if (Evt.player === player && ((_a = Evt.source) === null || _a === void 0 ? void 0 : _a.isIn()))\r\n                        targets.push(Evt.source);\r\n                    targets.removeArray(player.storage.qisui);\r\n                    return targets;\r\n                },\r\n                content() {\r\n                    let targets = lib.skill.qisui.logTarget(trigger, player);\r\n                    targets.forEach(target => {\r\n                        if (!target.hasSkill('lingjun'))\r\n                            target.addTempSkill('lingjun', { player: 'juedouBegin' });\r\n                        else\r\n                            trigger.num++;\r\n                    });\r\n                    player.storage.qisui.addArray(targets);\r\n                },\r\n                group: 'qisui_clear',\r\n                subSkill: {\r\n                    clear: new toSkill('trigger', {\r\n                        content() {\r\n                            if (player.hasSkill('lingjun'))\r\n                                player.setAvatar('NanaseUnia', 'NanaseUnia1');\r\n                            else\r\n                                player.setAvatar('NanaseUnia', 'NanaseUnia');\r\n                            player.storage.qisui = [];\r\n                        }\r\n                    }, 'direct', 'silent').setT({ global: 'phaseAfter' }),\r\n                },\r\n            }, 'derivation:lingjun').setT({ global: 'drawBegin' }),\r\n            lingjun: new toSkill('mark', {\r\n                intro: {\r\n                    content: '手牌中的【杀】视为【决斗】'\r\n                },\r\n                mod: {\r\n                    cardname(card, player, name) {\r\n                        if (get.position(card) === 'h' && name === 'sha')\r\n                            return 'juedou';\r\n                    }\r\n                }\r\n            }, 'mark'),\r\n            jufu: new toSkill('regard', {\r\n                chooseButton: {\r\n                    dialog() {\r\n                        let list = [['锦囊', '', 'wuzhong'], ['锦囊', '', 'wugu']];\r\n                        return ui.create.dialog('咀福', [list, 'vcard']);\r\n                    },\r\n                    filter(button, player) {\r\n                        let evt = _status.event.getParent();\r\n                        if (evt === null || evt === void 0 ? void 0 : evt.filterCard) {\r\n                            return evt.filterCard({ name: button.link[2] }, player, evt);\r\n                        }\r\n                        return true;\r\n                    },\r\n                    backup(links, player) {\r\n                        return {\r\n                            filterCard: { name: 'tao' },\r\n                            position: 'hs',\r\n                            selectCard: 1,\r\n                            viewAs: { name: links[0][2], nature: links[0][3] },\r\n                        };\r\n                    },\r\n                    prompt(links, player) {\r\n                        return '将一张【桃】做当【' + get.translation(links[0][2]) + '】使用';\r\n                    },\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.countCards('hs', 'tao');\r\n                },\r\n            }, 'enable:chooseToUse'),\r\n            qihun: new toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return game.countPlayer(cur => cur != player && cur.countCards('h'));\r\n                },\r\n                content: [function () {\r\n                        player.chooseTarget(get.prompt2('qihun'), function (card, player, target) {\r\n                            return target !== player && target.countCards('h');\r\n                        }).set('ai', target => {\r\n                            let player = _status.event.player, att = get.attitude2(target), reds = target.countCards('h', { color: 'red' });\r\n                            if (target.countCards('h', 'tao'))\r\n                                return -1.6 * reds * att;\r\n                            else if (target.group === player.group)\r\n                                return reds * att;\r\n                            return -0.4 * reds * att;\r\n                        });\r\n                    }, function () {\r\n                        var _a;\r\n                        if ((_a = result === null || result === void 0 ? void 0 : result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('qihun', Evt.target);\r\n                            Evt.target.showHandcards('『祈婚』展示手牌');\r\n                            Evt.cards = Evt.target.getCards('h', { color: 'red' });\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, function () {\r\n                        if (Evt.cards.length) {\r\n                            Evt.target.give(Evt.cards, player, true);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, function () {\r\n                        if (Evt.cards.filter(card => card.name === 'tao').length === 0) {\r\n                            if (player.group === Evt.target.group) {\r\n                                Evt.target.draw(Evt.cards.length);\r\n                                Evt.finish();\r\n                            }\r\n                            else {\r\n                                player.chooseCard(`交给${get.translation(Evt.target)}${get.cnNumber(Evt.cards.length)}张牌`, 'he', true, Evt.cards.length).set('ai', card => get.unuseful3(card));\r\n                            }\r\n                        }\r\n                    }, function () {\r\n                        var _a;\r\n                        if ((_a = result.cards) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            player.give(result.cards, Evt.target, true);\r\n                        }\r\n                    }]\r\n            }, '').setT('phaseUseEnd'),\r\n            lilian: {\r\n                trigger: { player: 'phaseBegin' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return player.maxHp;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseTarget(get.prompt2('lilian')).set('ai', target => {\r\n                        let player = _status.event.player;\r\n                        return get.attitude(player, target) - player.maxHp;\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.logSkill('lilian', Evt.target);\r\n                        Evt.target = result.targets[0];\r\n                        Evt.target.draw(player.maxHp);\r\n                        game.delayx();\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    let check = function () {\r\n                        for (let i = 0; i < game.players.length; i++) {\r\n                            if (game.players[i].isOut() || game.players[i] == player)\r\n                                continue;\r\n                            if (game.players[i].maxHp <= player.maxHp)\r\n                                return false;\r\n                        }\r\n                        return true;\r\n                    }();\r\n                    if (check) {\r\n                        player.setAvatar('linxi', 'linxi1');\r\n                    }\r\n                    else\r\n                        player.loseMaxHp();\r\n                    game.delayx();\r\n                },\r\n            },\r\n            zihuai: {\r\n                trigger: { player: 'discardAfter' },\r\n                priority: 199,\r\n                frequent: true,\r\n                round: 1,\r\n                filter(Evt, player) {\r\n                    return player.storage.zihuai_mark && Evt.cards.length >= player.storage.zihuai_mark;\r\n                },\r\n                content() {\r\n                    player.draw(player.storage.zihuai_mark);\r\n                },\r\n                group: ['zihuai_mark'],\r\n                subSkill: {\r\n                    mark: {\r\n                        direct: true,\r\n                        locked: true,\r\n                        marktext: '🎶',\r\n                        intro: {\r\n                            content: '上一次于弃牌阶段弃置的牌数：#'\r\n                        },\r\n                        trigger: { player: 'phaseDiscardEnd' },\r\n                        filter(Evt, player) {\r\n                            let cards = [];\r\n                            player.getHistory('lose', evt => {\r\n                                if ((evt === null || evt === void 0 ? void 0 : evt.type) == 'discard' && evt.getParent('phaseDiscard') == Evt && evt.hs)\r\n                                    cards.addArray(evt.cards);\r\n                            });\r\n                            return cards.length >= 1;\r\n                        },\r\n                        content() {\r\n                            let cards = [];\r\n                            player.getHistory('lose', evt => {\r\n                                if ((evt === null || evt === void 0 ? void 0 : evt.type) == 'discard' && evt.getParent('phaseDiscard') == trigger && evt.hs)\r\n                                    cards.addArray(evt.cards);\r\n                            });\r\n                            player.storage.zihuai_mark = cards.length;\r\n                            player.markSkill('zihuai_mark');\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            liying: {\r\n                trigger: { player: ['damageEnd', 'respondEnd'] },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    let source;\r\n                    if (Evt.name == 'damage')\r\n                        source = Evt.source;\r\n                    else if (Array.isArray(Evt.respondTo))\r\n                        source = Evt.respondTo[0];\r\n                    if (source) {\r\n                        return source != player && source.countCards('he') && source.hp > 0;\r\n                    }\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    if (trigger.name == 'damage')\r\n                        Evt.target = trigger.source;\r\n                    else\r\n                        Evt.target = trigger.respondTo[0];\r\n                    Evt.num = Evt.target.hp;\r\n                    player.gainPlayerCard(get.prompt2('liying'), 'he', Evt.target, Evt.target.hp).set('logSkill', ['liying', Evt.target]);\r\n                    'step 1';\r\n                    if (result.bool && Evt.num > 1) {\r\n                        player.chooseCard('he', '将' + get.cnNumber(Evt.num - 1) + '张牌交给' + get.translation(Evt.target), Evt.num - 1, true);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    if (result.bool && result.cards.length) {\r\n                        Evt.target.gain(result.cards, player, 'give');\r\n                        if (typeof player.storage.fuyu == 'number') {\r\n                            player.storage.fuyu += result.cards.length;\r\n                            player.markSkill('fuyu');\r\n                        }\r\n                        if (typeof player.storage.liying != 'number') {\r\n                            player.storage.liying = 0;\r\n                        }\r\n                        if (player.storage.liying >= 0) {\r\n                            player.storage.liying += result.cards.length;\r\n                            if (player.storage.liying >= 2) {\r\n                                let list = [];\r\n                                let type = player.storage.fuyu === true ? 'trick' : 'basic';\r\n                                for (let i of get.inpile(type)) {\r\n                                    if (lib.filter.cardUsable({ name: i }, player, Evt.getParent()) && player.hasUseTarget(i)) {\r\n                                        list.push([get.translation(type), '', i]);\r\n                                        if (i == 'sha') {\r\n                                            list.push(['基本', '', 'sha', 'fire']);\r\n                                            list.push(['基本', '', 'sha', 'thunder']);\r\n                                            list.push(['基本', '', 'sha', 'ice']);\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (list.length) {\r\n                                    player.chooseButton(['是否视为使用其中一张牌？', [list, 'vcard']]).set('ai', function (button) {\r\n                                        let player = _status.event.player;\r\n                                        let card = { name: button.link[2], nature: button.link[3] };\r\n                                        return player.getUseValue(card);\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    Evt.finish();\r\n                                }\r\n                                player.storage.liying = -1;\r\n                            }\r\n                            else {\r\n                                Evt.finish();\r\n                            }\r\n                        }\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 3';\r\n                    if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        let card = { name: result.links[0][2], nature: result.links[0][3] };\r\n                        player.chooseUseTarget(card, true);\r\n                    }\r\n                },\r\n                ai: {\r\n                    maixie: true,\r\n                },\r\n                group: ['liying_clear'],\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { global: 'phaseNext' },\r\n                        direct: true,\r\n                        locked: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        filter(Evt, player) {\r\n                            return player.storage.liying;\r\n                        },\r\n                        content() {\r\n                            player.storage.liying = 0;\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            fuyu: {\r\n                marktext: \"谕\",\r\n                intro: {\r\n                    content: '已通过『立影』给出了&张牌',\r\n                },\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = 0;\r\n                },\r\n                trigger: { player: 'phaseZhunbeiBegin' },\r\n                juexingji: true,\r\n                forced: true,\r\n                skillAnimation: true,\r\n                animationColor: 'thunder',\r\n                filter(Evt, player) {\r\n                    return player.storage.fuyu > 0 && player.storage.fuyu % 4 == 0;\r\n                },\r\n                content() {\r\n                    player.loseMaxHp();\r\n                    player.storage.fuyu = true;\r\n                    player.awakenSkill('fuyu');\r\n                },\r\n                ai: {\r\n                    combo: 'liying'\r\n                }\r\n            },\r\n            zhengmeng: new toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return !Evt.numFixed;\r\n                },\r\n                check(Evt, player) {\r\n                    return player.countCards('h') >= 2;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    trigger.changeToZero();\r\n                    player.turnOver();\r\n                    'step 1';\r\n                    player.throwDice();\r\n                    'step 2';\r\n                    player.draw(Evt.num);\r\n                    if (Evt.num === 6) {\r\n                        player.addMark('zhengmeng_addDamBy');\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    addDamBy: {\r\n                        intro: {\r\n                            content: '【杀】伤害+#'\r\n                        },\r\n                        trigger: { player: 'useCard' },\r\n                        forced: true,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            return ['sha'].contains(Evt.card.name) && player.countMark('zhengmeng_addDamBy');\r\n                        },\r\n                        content() {\r\n                            trigger.baseDamage += player.countMark('zhengmeng_addDamBy');\r\n                        }\r\n                    },\r\n                }\r\n            }, 'group:zhengmeng_addDamBy').setT('phaseDrawBegin1'),\r\n            wadao: new toSkill('trigger', {\r\n                filter: function (Evt, player) {\r\n                    return !player.isTurnedOver();\r\n                },\r\n                content: function () {\r\n                    'step 0';\r\n                    player.chooseTarget(get.prompt('wadao2'), function (card, player, target) {\r\n                        return target !== player;\r\n                    }).ai = target => {\r\n                        return get.attitude2(target);\r\n                    };\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.target = result.targets[0];\r\n                        player.logSkill('wadao', Evt.target);\r\n                        Evt.target.insertPhase();\r\n                    }\r\n                },\r\n                ai: {\r\n                    expose: 0.3,\r\n                }\r\n            }, 'direct').setT('turnOverAfter'),\r\n            tieyu: {\r\n                init(player, skill) {\r\n                    player.storage[skill] = 0;\r\n                },\r\n                intro: {\r\n                    content: '『铁驭』（）值偏差$',\r\n                },\r\n                trigger: { player: 'useCard2' },\r\n                frequent(Evt, player) {\r\n                    return get.type(Evt.card) == 'equip';\r\n                },\r\n                filter(Evt, player) {\r\n                    return (get.type(Evt.card) == 'equip' && (2 + player.storage.tieyu > 0))\r\n                        || player.countCards('he') > (3 + player.storage.tieyu);\r\n                },\r\n                check(Evt, player) {\r\n                    return get.type(Evt.card) == 'equip';\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a, _b;\r\n                    if (get.type(trigger.card) == 'equip') {\r\n                        player.draw(2 + player.storage.tieyu);\r\n                        Evt.finish();\r\n                    }\r\n                    else {\r\n                        player.chooseToDiscard(3 + player.storage.tieyu, true, '『铁驭』：请弃牌');\r\n                    }\r\n                    'step 1';\r\n                    if ((_a = result.cards) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        let color = get.color(result.cards);\r\n                        switch (color) {\r\n                            case 'red':\r\n                                let card = trigger.card;\r\n                                let info = get.info(card);\r\n                                if (['basic', 'trick'].includes(info.type) && info.allowMultiple !== false\r\n                                    && trigger.targets && !info.multitarget) {\r\n                                    if (game.hasPlayer(cur => !trigger.targets.includes(cur) && lib.filter.targetEnabled2(card, player, cur))) {\r\n                                        let prompt2 = '为' + get.translation(trigger.card) + '增加至多两个目标';\r\n                                        player.chooseTarget([1, 2], get.prompt('tieyu'), function (card, player, target) {\r\n                                            return !_status.event.targets.includes(target) && lib.filter.targetEnabled2(_status.event.card, player, target);\r\n                                        }).set('prompt2', prompt2).set('ai', function (target) {\r\n                                            let player = _status.event.player;\r\n                                            return get.effect(target, _status.event.card, player, player);\r\n                                        }).set('card', card).set('targets', trigger.targets);\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case 'black':\r\n                                game.log(trigger.card, '的数值+1');\r\n                                trigger.baseDamage++;\r\n                                break;\r\n                            case 'none':\r\n                                player.storage.tieyu--;\r\n                                player.markSkill('tieyu');\r\n                                if (2 - player.storage.tieyu <= 0)\r\n                                    player.setAvatar('RIKO', 'RIKO1');\r\n                                break;\r\n                        }\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool && ((_b = result.targets) === null || _b === void 0 ? void 0 : _b.length)) {\r\n                        if (!Evt.isMine())\r\n                            game.delayx();\r\n                        Evt.targets = result.targets;\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 3';\r\n                    if (Evt.targets) {\r\n                        player.logSkill('tieyu', Evt.targets);\r\n                        trigger.targets.addArray(Evt.targets);\r\n                    }\r\n                },\r\n            },\r\n            daimao: {\r\n                mod: {\r\n                    cardUsable(card, player, num) {\r\n                        if (!get.suit(card))\r\n                            return;\r\n                        let suits = get.suit3(player.getStorage('daimao_mark'));\r\n                        if (suits.includes(suits))\r\n                            return true;\r\n                    },\r\n                    targetInRange(card, player, target) {\r\n                        if (!get.suit(card))\r\n                            return;\r\n                        let suits = get.suit3(player.getStorage('daimao_mark'));\r\n                        if (suits.includes(suits))\r\n                            return true;\r\n                    }\r\n                },\r\n                enable: 'chooseToUse',\r\n                skillAnimation: 'epic',\r\n                locked: true,\r\n                filter(Evt, player) {\r\n                    if (Evt.type != 'dying')\r\n                        return false;\r\n                    if (player != Evt.dying)\r\n                        return false;\r\n                    return player.countCards('hes', card => {\r\n                        if (player.getStorage('daimao_mark').filter(function (daimao) {\r\n                            return get.suit(daimao) == get.suit(card);\r\n                        }).length == 0)\r\n                            return true;\r\n                    });\r\n                },\r\n                filterCard(card, player) {\r\n                    if (player.getStorage('daimao_mark').filter(function (daimao) {\r\n                        return get.suit(daimao) == get.suit(card);\r\n                    }).length == 0)\r\n                        return true;\r\n                },\r\n                position: 'he',\r\n                content() {\r\n                    'step 0';\r\n                    let audio = 'daimao_' + player.getStorage('daimao_mark').length;\r\n                    game.playAudio('skill', audio);\r\n                    game.broadcast(function (audio) {\r\n                        game.playAudio('skill', audio);\r\n                    }, audio);\r\n                    player.$give(cards, player);\r\n                    player.lose(cards, ui.special, 'toStorage');\r\n                    player.markAuto('daimao_mark', cards);\r\n                    'step 1';\r\n                    player.loseMaxHp();\r\n                    'step 2';\r\n                    player.recover(player.maxHp - player.hp);\r\n                    'step 3';\r\n                    player.draw(3);\r\n                },\r\n                ai: {\r\n                    skillTagFilter(player) {\r\n                        if (player.hp > 0)\r\n                            return false;\r\n                    },\r\n                    save: true,\r\n                    result: {\r\n                        player: 3,\r\n                    },\r\n                    threaten(player, target) {\r\n                        if (player.getStorage('daimao_mark') <= 2)\r\n                            return 0.8;\r\n                    }\r\n                },\r\n                group: ['daimao_mark', 'daimao_start'],\r\n                subSkill: {\r\n                    mark: {\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '呆毛',\r\n                            content: 'cards',\r\n                            onunmark: 'throw',\r\n                        },\r\n                        cardAround: true\r\n                    },\r\n                    start: {\r\n                        forced: true,\r\n                        priority: 10,\r\n                        trigger: {\r\n                            global: 'gameStart',\r\n                            player: 'enterGame',\r\n                        },\r\n                        content() {\r\n                            if (!player.storage.daimao_mark)\r\n                                player.storage.daimao_mark = [];\r\n                            let cards = get.cards();\r\n                            game.cardsGotoSpecial(cards);\r\n                            player.$gain2(cards);\r\n                            player.markAuto('daimao_mark', cards);\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            hongtou: {\r\n                group: ['hongtou2', 'hongtou_shan'],\r\n                unique: true,\r\n                zhuSkill: true,\r\n                filter(Evt, player) {\r\n                    if (!player.hasZhuSkill('hongtou') || !game.hasPlayer(cur => cur != player && cur.isGuoV()))\r\n                        return false;\r\n                    return !Evt.hongtou && (Evt.type != 'phase' || !player.hasSkill('hongtou3'));\r\n                },\r\n                enable: ['chooseToUse', 'chooseToRespond'],\r\n                viewAs: { name: 'sha' },\r\n                filterCard: () => false,\r\n                selectCard: -1,\r\n                ai: {\r\n                    order() {\r\n                        return get.order({ name: 'sha' }) + 0.3;\r\n                    },\r\n                    respondSha: true,\r\n                    skillTagFilter(player) {\r\n                        if (!player.hasZhuSkill('hongtou') || !game.hasPlayer(cur => cur != player && cur.isGuoV()))\r\n                            return false;\r\n                    },\r\n                },\r\n                subSkill: {\r\n                    shan: {\r\n                        unique: true,\r\n                        zhuSkill: true,\r\n                        trigger: { player: ['chooseToRespondBefore', 'chooseToUseBefore'] },\r\n                        filter(Evt, player) {\r\n                            if (Evt.responded)\r\n                                return false;\r\n                            if (player.storage.hongtou_shaning)\r\n                                return false;\r\n                            if (!player.hasZhuSkill('hongtou_shan'))\r\n                                return false;\r\n                            if (!Evt.filterCard({ name: 'shan' }, player, Evt))\r\n                                return false;\r\n                            return game.hasPlayer(cur => cur != player && cur.isGuoV());\r\n                        },\r\n                        check(Evt, player) {\r\n                            if (get.damageEffect(player, Evt.player, player) >= 0)\r\n                                return false;\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            \"step 0\";\r\n                            if (Evt.current == undefined)\r\n                                Evt.current = player.next;\r\n                            if (Evt.current == player) {\r\n                                Evt.finish();\r\n                            }\r\n                            else if (Evt.current.isGuoV()) {\r\n                                if ((Evt.current == game.me && !_status.auto) || (get.attitude(Evt.current, player) > 2) ||\r\n                                    Evt.current.isOnline()) {\r\n                                    player.storage.hongtou_shaning = true;\r\n                                    let next = Evt.current.chooseToRespond('是否替' + get.translation(player) + '打出一张闪？', { name: 'shan' });\r\n                                    next.set('ai', function () {\r\n                                        let Evt = _status.event;\r\n                                        return (get.attitude(Evt.player, Evt.source) - 2);\r\n                                    });\r\n                                    next.set('skillwarn', '替' + get.translation(player) + '打出一张闪');\r\n                                    next.autochoose = lib.filter.autoRespondShan;\r\n                                    next.set('source', player);\r\n                                }\r\n                            }\r\n                            \"step 1\";\r\n                            player.storage.hongtou_shaning = false;\r\n                            if (result.bool) {\r\n                                Evt.finish();\r\n                                trigger.result = { bool: true, card: { name: 'shan', isCard: true } };\r\n                                trigger.responded = true;\r\n                                trigger.animate = false;\r\n                                if (typeof Evt.current.ai.shown == 'number' && Evt.current.ai.shown < 0.95) {\r\n                                    Evt.current.ai.shown += 0.3;\r\n                                    if (Evt.current.ai.shown > 0.95)\r\n                                        Evt.current.ai.shown = 0.95;\r\n                                }\r\n                            }\r\n                            else {\r\n                                Evt.current = Evt.current.next;\r\n                                Evt.goto(0);\r\n                            }\r\n                        },\r\n                        ai: {\r\n                            respondShan: true,\r\n                            skillTagFilter(player) {\r\n                                if (player.storage.hongtou_shaning)\r\n                                    return false;\r\n                                if (!player.hasZhuSkill('hongtou_shan'))\r\n                                    return false;\r\n                                return game.hasPlayer(cur => cur != player && cur.isGuoV());\r\n                            },\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            hongtou2: {\r\n                trigger: { player: ['useCardBegin', 'respondBegin'] },\r\n                logTarget: 'targets',\r\n                filter(Evt, player) {\r\n                    return Evt.skill == 'hongtou';\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    \"step 0\";\r\n                    delete trigger.skill;\r\n                    trigger.getParent().set('hongtou', true);\r\n                    \"step 1\";\r\n                    if (Evt.current == undefined)\r\n                        Evt.current = player.next;\r\n                    if (Evt.current == player) {\r\n                        player.addTempSkill('hongtou3');\r\n                        Evt.finish();\r\n                        trigger.cancel();\r\n                        trigger.getParent().goto(0);\r\n                    }\r\n                    else if (Evt.current.isGuoV()) {\r\n                        let next = Evt.current.chooseToRespond('是否替' + get.translation(player) + '打出一张杀？', { name: 'sha' });\r\n                        next.set('ai', function () {\r\n                            let { player, source } = _status.event;\r\n                            return (get.attitude(player, source) - 2);\r\n                        });\r\n                        next.set('source', player);\r\n                        next.set('hongtou', true);\r\n                        next.set('skillwarn', '替' + get.translation(player) + '打出一张杀');\r\n                        next.noOrdering = true;\r\n                        next.autochoose = lib.filter.autoRespondSha;\r\n                    }\r\n                    else {\r\n                        Evt.current = Evt.current.next;\r\n                        Evt.redo();\r\n                    }\r\n                    \"step 2\";\r\n                    if (result.bool) {\r\n                        Evt.finish();\r\n                        trigger.card = result.card;\r\n                        trigger.cards = result.cards;\r\n                        trigger.throw = false;\r\n                        if (typeof Evt.current.ai.shown == 'number' && Evt.current.ai.shown < 0.95) {\r\n                            Evt.current.ai.shown += 0.3;\r\n                            if (Evt.current.ai.shown > 0.95)\r\n                                Evt.current.ai.shown = 0.95;\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.current = Evt.current.next;\r\n                        Evt.goto(1);\r\n                    }\r\n                }\r\n            },\r\n            hongtou3: {\r\n                trigger: { global: ['useCardAfter', 'useSkillAfter', 'phaseAfter'] },\r\n                silent: true,\r\n                charlotte: true,\r\n                filter(Evt) {\r\n                    return Evt.skill != 'hongtou';\r\n                },\r\n                content() {\r\n                    player.removeSkill('hongtou3');\r\n                }\r\n            },\r\n            tianqi: {\r\n                forced: true,\r\n                priority: 10,\r\n                trigger: {\r\n                    global: 'gameStart',\r\n                    player: 'enterGame',\r\n                },\r\n                content() {\r\n                    let cards = get.cards();\r\n                    game.cardsGotoSpecial(cards);\r\n                    player.$gain2(cards);\r\n                    player.markAuto('tianqi_mark', cards);\r\n                    player.addSkill('tianqi_mark');\r\n                },\r\n            },\r\n            tianqi_mark: {\r\n                locked: true,\r\n                intro: {\r\n                    name: '天气',\r\n                    content: 'cards',\r\n                    onunmark: 'throw',\r\n                },\r\n                cardAround: true\r\n            },\r\n            yubao: {\r\n                trigger: { global: 'phaseZhunbeiBegin' },\r\n                check(Evt, player) {\r\n                    return true;\r\n                },\r\n                filter(Evt, player) {\r\n                    return Evt.player.hasSkill('tianqi_mark');\r\n                },\r\n                frequent: true,\r\n                content() {\r\n                    'step 0';\r\n                    Evt.num = game.countPlayer(cur => cur.hasSkill('tianqi_mark'));\r\n                    Evt.cards = get.cards(Evt.num);\r\n                    player.chooseCardButton(Evt.num, Evt.cards, '『预报』：按顺序将卡牌置于牌堆顶（先选择的在上）').set('ai', function (button) {\r\n                        let player = _status.event.player, next = _status.currentPhase, att = get.attitude(player, next), card = button.link, judge = next.getCards('j')[ui.selected.buttons.length];\r\n                        if (judge) {\r\n                            return get.judge(judge)(card) * att;\r\n                        }\r\n                        return next.getUseValue(card) * att;\r\n                    }).set('phase', trigger.name);\r\n                    'step 1';\r\n                    let list;\r\n                    if (result.bool) {\r\n                        list = result.links.slice(0);\r\n                    }\r\n                    else {\r\n                        list = Evt.cards;\r\n                    }\r\n                    while (list.length) {\r\n                        ui.cardPile.insertBefore(list.pop(), ui.cardPile.firstChild);\r\n                    }\r\n                },\r\n            },\r\n            butaizhun: {\r\n                subSkill: { used: {} },\r\n                group: [\"butaizhun_guess\", \"butaizhun_respond\", \"butaizhun_wuxie\"],\r\n                enable: \"chooseToUse\",\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('butaizhun_used'))\r\n                        return false;\r\n                    if (!player.countCards('h'))\r\n                        return false;\r\n                    let list = ['sha', 'shan', 'tao', 'jiu', 'taoyuan', 'wugu', 'juedou', 'huogong', 'jiedao', 'tiesuo', 'guohe', 'shunshou', 'wuzhong', 'wanjian', 'nanman', 'haixiao', 'langyong', 'qinshi'];\r\n                    if (get.mode() == 'guozhan') {\r\n                        list = list.concat(['xietianzi', 'shuiyanqijunx', 'lulitongxin', 'lianjunshengyan', 'chiling', 'diaohulishan', 'yuanjiao', 'huoshaolianying']);\r\n                    }\r\n                    for (let i = 0; i < list.length; i++) {\r\n                        if (Evt.filterCard({ name: list[i] }, player))\r\n                            return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                chooseButton: {\r\n                    dialog() {\r\n                        let list = [];\r\n                        for (let i = 0; i < lib.inpile.length; i++) {\r\n                            let name = lib.inpile[i];\r\n                            if (name == 'wuxie')\r\n                                continue;\r\n                            if (name == 'sha') {\r\n                                list.push(['基本', '', 'sha']);\r\n                                list.push(['基本', '', 'sha', 'fire']);\r\n                                list.push(['基本', '', 'sha', 'thunder']);\r\n                                list.push(['基本', '', 'sha', 'ice']);\r\n                            }\r\n                            else if (get.type(name) == 'trick')\r\n                                list.push(['锦囊', '', name]);\r\n                            else if (get.type(name) == 'basic')\r\n                                list.push(['基本', '', name]);\r\n                        }\r\n                        return ui.create.dialog('不太准', [list, 'vcard']);\r\n                    },\r\n                    filter(button, player) {\r\n                        let evt = _status.event.getParent();\r\n                        if (evt === null || evt === void 0 ? void 0 : evt.filterCard) {\r\n                            return evt.filterCard({ name: button.link[2] }, player, evt);\r\n                        }\r\n                        return true;\r\n                    },\r\n                    backup(links, player) {\r\n                        return {\r\n                            filterCard: true,\r\n                            selectCard: 1,\r\n                            viewAs: { name: links[0][2], nature: links[0][3] },\r\n                        };\r\n                    },\r\n                    prompt(links, player) {\r\n                        return '将一张手牌做当' + get.translation(links[0][2]) + '使用';\r\n                    },\r\n                },\r\n                ai: {\r\n                    save: true,\r\n                    respondShan: true,\r\n                    fireAttack: true,\r\n                    skillTagFilter(player) {\r\n                        if (player.hasSkill('butaizhun_used'))\r\n                            return false;\r\n                    },\r\n                    threaten: 1.2,\r\n                },\r\n            },\r\n            butaizhun_guess: {\r\n                audio: 2,\r\n                trigger: {\r\n                    player: \"useCardBefore\",\r\n                },\r\n                filter(Evt, player) {\r\n                    return Evt.skill == \"butaizhun_backup\" || Evt.skill == \"butaizhun_wuxie\";\r\n                },\r\n                forced: true,\r\n                direct: true,\r\n                priority: 15,\r\n                content() {\r\n                    'step 0';\r\n                    player.logSkill('butaizhun_guess');\r\n                    player.addTempSkill('butaizhun_used');\r\n                    player.popup(trigger.card.name, 'metal');\r\n                    player.lose(trigger.cards, ui.special);\r\n                    player.line(trigger.targets, trigger.card.nature);\r\n                    trigger.line = false;\r\n                    trigger.animate = false;\r\n                    Evt.prompt = get.translation(player) + '声明了' + get.translation(trigger.card.name) + '，是否质疑？';\r\n                    Evt.guessers = game.filterPlayer(cur => cur != player && !cur.hasSkill('tianqi_mark'));\r\n                    Evt.guessers.sort(lib.sort.seat);\r\n                    game.broadcastAll(card => {\r\n                        _status.guhuoNode = card.copy('thrown');\r\n                        if (lib.config.cardback_style != 'default') {\r\n                            _status.guhuoNode.style.transitionProperty = 'none';\r\n                            ui.refresh(_status.guhuoNode);\r\n                            _status.guhuoNode.classList.add('infohidden');\r\n                            ui.refresh(_status.guhuoNode);\r\n                            _status.guhuoNode.style.transitionProperty = '';\r\n                        }\r\n                        else {\r\n                            _status.guhuoNode.classList.add('infohidden');\r\n                        }\r\n                        _status.guhuoNode.style.transform = 'perspective(600px) rotateY(180deg) translateX(0)';\r\n                        player.$throwordered2(_status.guhuoNode);\r\n                    }, trigger.cards[0]);\r\n                    Evt.onEnd01 = function () {\r\n                        _status.guhuoNode.removeEventListener('webkitTransitionEnd', Evt.onEnd01);\r\n                        _status.guhuoNode.style.transition = 'all ease-in 0.3s';\r\n                        _status.guhuoNode.style.transform = 'perspective(600px) rotateY(270deg) translateX(52px)';\r\n                        let onEnd = function () {\r\n                            _status.guhuoNode.classList.remove('infohidden');\r\n                            _status.guhuoNode.style.transition = 'all 0s';\r\n                            ui.refresh(_status.guhuoNode);\r\n                            _status.guhuoNode.style.transform = 'perspective(600px) rotateY(-90deg) translateX(52px)';\r\n                            ui.refresh(_status.guhuoNode);\r\n                            _status.guhuoNode.style.transition = '';\r\n                            ui.refresh(_status.guhuoNode);\r\n                            _status.guhuoNode.style.transform = '';\r\n                            _status.guhuoNode.removeEventListener('webkitTransitionEnd', onEnd);\r\n                        };\r\n                        _status.guhuoNode.listenTransition(onEnd);\r\n                    };\r\n                    'step 1';\r\n                    if (Evt.guessers.length == 0)\r\n                        Evt.goto(3);\r\n                    else {\r\n                        Evt.guessers[0].chooseControl('质疑', '不质疑').set('prompt', Evt.prompt).set('ai', function () {\r\n                            if (get.attitude(Evt.guessers[0], player) > 0)\r\n                                return '不质疑';\r\n                            return Math.random() < 0.5 ? '不质疑' : '质疑';\r\n                        });\r\n                    }\r\n                    'step 2';\r\n                    if (!result.control)\r\n                        result.control = '不质疑';\r\n                    Evt.guessers[0].chat(result.control);\r\n                    game.delay(1);\r\n                    if (result.control == '不质疑') {\r\n                        game.log(Evt.guessers[0], '#g不质疑');\r\n                        Evt.guessers.remove(Evt.guessers[0]);\r\n                        Evt.goto(1);\r\n                    }\r\n                    else {\r\n                        game.log(Evt.guessers[0], '#y质疑');\r\n                    }\r\n                    'step 3';\r\n                    game.broadcastAll(function (onEnd) {\r\n                        _status.guhuoNode.listenTransition(onEnd);\r\n                    }, Evt.onEnd01);\r\n                    'step 4';\r\n                    game.delay(3.2);\r\n                    'step 5';\r\n                    if (!Evt.guessers.length)\r\n                        Evt.finish();\r\n                    'step 6';\r\n                    if (trigger.card.name == trigger.cards[0].name) {\r\n                        Evt.guessers[0].popup('质疑错误', 'fire');\r\n                        let cards = get.cards();\r\n                        game.cardsGotoSpecial(cards);\r\n                        Evt.guessers[0].$gain2(cards);\r\n                        Evt.guessers[0].markAuto('tianqi_mark', cards);\r\n                        Evt.guessers[0].addSkill('tianqi_mark');\r\n                        game.log(Evt.guessers[0], '获得了', '#g「天气」');\r\n                    }\r\n                    else {\r\n                        Evt.guessers[0].popup('质疑正确', 'wood');\r\n                        game.log(player, '使用的', trigger.card, '作废了');\r\n                        game.cardsDiscard(trigger.cards);\r\n                        game.broadcastAll(ui.clear);\r\n                        trigger.cancel();\r\n                        if (trigger.name == 'useCard' && trigger.parent)\r\n                            trigger.parent.goto(0);\r\n                    }\r\n                    game.delay();\r\n                },\r\n            },\r\n            butaizhun_respond: {\r\n                trigger: {\r\n                    player: \"chooseToRespondBegin\",\r\n                },\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('butaizhun_used'))\r\n                        return false;\r\n                    if (Evt.responded)\r\n                        return false;\r\n                    if (!Evt.filterCard({ name: 'shan' }) && !Evt.filterCard({ name: 'sha' }))\r\n                        return false;\r\n                    if (!lib.filter.cardRespondable({ name: 'shan' }, player, Evt) && !lib.filter.cardRespondable({ name: 'sha' }, player, Evt))\r\n                        return false;\r\n                    if (!player.countCards('h'))\r\n                        return false;\r\n                    return true;\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    \"step 0\";\r\n                    if (trigger.filterCard({ name: 'shan' }) && lib.filter.cardRespondable({ name: 'shan' }, player, trigger))\r\n                        Evt.name = 'shan';\r\n                    else\r\n                        Evt.name = 'sha';\r\n                    player.chooseCard('是否发动【不太准】，将一张手牌当做' + get.translation(Evt.name) + '打出？');\r\n                    \"step 1\";\r\n                    if (result.bool) {\r\n                        player.logSkill('butaizhun_guess');\r\n                        player.addTempSkill('butaizhun_used');\r\n                        player.popup(Evt.name, 'metal');\r\n                        Evt.card = result.cards[0];\r\n                        player.lose(Evt.card, ui.special);\r\n                        Evt.prompt = get.translation(player) + '声明了' + get.translation(Evt.name) + '，是否质疑？';\r\n                        Evt.guessers = game.filterPlayer(cur => cur != player && !cur.hasSkill('tianqi_mark'));\r\n                        Evt.guessers.sort(lib.sort.seat);\r\n                        game.broadcastAll(card => {\r\n                            _status.guhuoNode = card.copy('thrown');\r\n                            if (lib.config.cardback_style != 'default') {\r\n                                _status.guhuoNode.style.transitionProperty = 'none';\r\n                                ui.refresh(_status.guhuoNode);\r\n                                _status.guhuoNode.classList.add('infohidden');\r\n                                ui.refresh(_status.guhuoNode);\r\n                                _status.guhuoNode.style.transitionProperty = '';\r\n                            }\r\n                            else {\r\n                                _status.guhuoNode.classList.add('infohidden');\r\n                            }\r\n                            _status.guhuoNode.style.transform = 'perspective(600px) rotateY(180deg) translateX(0)';\r\n                            player.$throwordered2(_status.guhuoNode);\r\n                        }, result.cards[0]);\r\n                        Evt.onEnd01 = function () {\r\n                            _status.guhuoNode.removeEventListener('webkitTransitionEnd', Evt.onEnd01);\r\n                            _status.guhuoNode.style.transition = 'all ease-in 0.3s';\r\n                            _status.guhuoNode.style.transform = 'perspective(600px) rotateY(270deg) translateX(52px)';\r\n                            let onEnd = function () {\r\n                                _status.guhuoNode.classList.remove('infohidden');\r\n                                _status.guhuoNode.style.transition = 'all 0s';\r\n                                ui.refresh(_status.guhuoNode);\r\n                                _status.guhuoNode.style.transform = 'perspective(600px) rotateY(-90deg) translateX(52px)';\r\n                                ui.refresh(_status.guhuoNode);\r\n                                _status.guhuoNode.style.transition = '';\r\n                                ui.refresh(_status.guhuoNode);\r\n                                _status.guhuoNode.style.transform = '';\r\n                                _status.guhuoNode.removeEventListener('webkitTransitionEnd', onEnd);\r\n                            };\r\n                            _status.guhuoNode.listenTransition(onEnd);\r\n                        };\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    \"step 2\";\r\n                    if (Evt.guessers.length == 0)\r\n                        Evt.goto(4);\r\n                    else {\r\n                        Evt.guessers[0].chooseControl('质疑', '不质疑').set('prompt', Evt.prompt).set('ai', function () {\r\n                            if (get.attitude(Evt.guessers[0], player) > 0)\r\n                                return '不质疑';\r\n                            return Math.random() < 0.5 ? '不质疑' : '质疑';\r\n                        });\r\n                    }\r\n                    \"step 3\";\r\n                    if (!result.control)\r\n                        result.control = '不质疑';\r\n                    Evt.guessers[0].chat(result.control);\r\n                    game.delay();\r\n                    if (result.control == '不质疑') {\r\n                        game.log(Evt.guessers[0], '#g不质疑');\r\n                        Evt.guessers.remove(Evt.guessers[0]);\r\n                        Evt.goto(2);\r\n                    }\r\n                    else {\r\n                        game.log(Evt.guessers[0], '#y质疑');\r\n                    }\r\n                    \"step 4\";\r\n                    game.broadcastAll(function (onEnd) {\r\n                        _status.guhuoNode.listenTransition(onEnd);\r\n                    }, Evt.onEnd01);\r\n                    \"step 5\";\r\n                    game.delay(3.2);\r\n                    if (!Evt.guessers.length)\r\n                        Evt.goto(7);\r\n                    \"step 6\";\r\n                    if (Evt.name == Evt.card.name) {\r\n                        Evt.guessers[0].popup('质疑错误', 'fire');\r\n                        let cards = get.cards();\r\n                        game.cardsGotoSpecial(cards);\r\n                        Evt.guessers[0].$gain2(cards);\r\n                        Evt.guessers[0].markAuto('tianqi_mark', cards);\r\n                        Evt.guessers[0].addSkill('tianqi_mark');\r\n                        game.log(Evt.guessers[0], '获得了', '#g「天气」牌');\r\n                    }\r\n                    else {\r\n                        Evt.guessers[0].popup('质疑正确', 'wood');\r\n                        game.log(player, '打出的', '#y' + get.translation(Evt.name), '作废了');\r\n                        game.cardsDiscard(Evt.card);\r\n                        Evt.finish();\r\n                    }\r\n                    \"step 7\";\r\n                    trigger.untrigger();\r\n                    trigger.responded = true;\r\n                    trigger.result = { bool: true, card: { name: Evt.name }, cards: [Evt.card], noanimate: true };\r\n                },\r\n                ai: {\r\n                    order: 4,\r\n                    useful: -1,\r\n                    value: -1,\r\n                },\r\n            },\r\n            butaizhun_wuxie: {\r\n                log: false,\r\n                silent: true,\r\n                popup: false,\r\n                enable: \"chooseToUse\",\r\n                filterCard: true,\r\n                viewAsFilter(player) {\r\n                    if (player.hasSkill('butaizhun_used'))\r\n                        return false;\r\n                    return player.countCards('h') > 0;\r\n                },\r\n                viewAs: {\r\n                    name: \"wuxie\",\r\n                },\r\n                check(card) {\r\n                    if (card.name == 'wuxie')\r\n                        return 1000;\r\n                    return 0;\r\n                },\r\n                prompt: \"将一张手牌当无懈可击使用\",\r\n                threaten: 1.2,\r\n            },\r\n            guangan: {\r\n                trigger: { global: 'useCard2' },\r\n                filter(Evt, player) {\r\n                    if (player.storage.guangan >= game.countPlayer() - 1)\r\n                        return false;\r\n                    return Evt.player == player && (Evt.targets.includes(player.getNext()) || player.getStorage('zonghe').filter(function (zonghe) {\r\n                        return Evt.targets.includes(zonghe);\r\n                    }).length) || (Evt.player == player.getPrevious() || player.getStorage('zonghe').includes(Evt.player)) && Evt.targets.includes(player);\r\n                },\r\n                frequent: true,\r\n                content() {\r\n                    'step 0';\r\n                    player.draw();\r\n                    if (!player.storage.guangan)\r\n                        player.storage.guangan = 0;\r\n                    player.storage.guangan++;\r\n                    'step 1';\r\n                    player.markSkill('guangan');\r\n                },\r\n                marktext: '叽',\r\n                intro: {\r\n                    content: '本轮次已摸了&张牌',\r\n                    markcount(storage, player) {\r\n                        return player.storage.guangan;\r\n                    }\r\n                },\r\n                group: 'guangan_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { global: 'roundStart' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        content() {\r\n                            delete player.storage.guangan;\r\n                            player.unmarkSkill('guangan');\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            lanxuan: {\r\n                mod: {\r\n                    targetInRange(card, player, target) {\r\n                        if (_status.event.logSkill == 'lanxuan')\r\n                            return true;\r\n                    },\r\n                    cardUsable(card, player, num) {\r\n                        if (_status.event.logSkill == 'lanxuan')\r\n                            return Infinity;\r\n                    },\r\n                },\r\n                trigger: { source: 'damageAfter' },\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('lanxuan_used1'))\r\n                        return false;\r\n                    return player.countCards('hs', card => player.hasUseTarget(card));\r\n                },\r\n                direct: true,\r\n                usable: 1,\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseToUse({\r\n                        filterCard(card, player) {\r\n                            return lib.filter.filterCard.apply(this, arguments);\r\n                        },\r\n                        prompt: get.prompt2('lanxuan')\r\n                    }).set('logSkill', ['lanxuan']).set('targetRequired', true);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.addTempSkill('lanxuan_used1');\r\n                    }\r\n                },\r\n                group: 'lanxuan_damageUse',\r\n                subSkill: {\r\n                    damageUse: {\r\n                        trigger: { player: 'damageAfter' },\r\n                        filter(Evt, player) {\r\n                            if (player.hasSkill('lanxuan_used2'))\r\n                                return false;\r\n                            return player.countCards('hs', card => player.hasUseTarget(card));\r\n                        },\r\n                        direct: true,\r\n                        usable: 1,\r\n                        content() {\r\n                            'step 0';\r\n                            player.chooseToUse({\r\n                                filterCard(card, player) {\r\n                                    return lib.filter.filterCard.apply(this, arguments);\r\n                                },\r\n                                prompt: get.prompt2('lanxuan')\r\n                            }).set('logSkill', ['lanxuan']).set('targetRequired', true);\r\n                            'step 1';\r\n                            if (result.bool) {\r\n                                player.addTempSkill('lanxuan_used2');\r\n                            }\r\n                        },\r\n                    },\r\n                    used1: {},\r\n                    used2: {},\r\n                },\r\n                ai: {\r\n                    threaten: 1.2,\r\n                }\r\n            },\r\n            zonghe: {\r\n                audio: true,\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                unique: true,\r\n                zhuSkill: true,\r\n                trigger: { global: 'gameDrawAfter', player: 'enterGame' },\r\n                filter(Evt, player) {\r\n                    if (!player.hasZhuSkill('zonghe'))\r\n                        return false;\r\n                    return game.hasPlayer(function (target) {\r\n                        return target != player && !player.getStorage('zonghe').includes(target)\r\n                            && (get.name(target) in lib.characterPack.clubs || target.group == 'qun');\r\n                    });\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.chooseTarget(get.prompt2('zonghe'), function (card, player, target) {\r\n                        return target != player && !player.getStorage('zonghe').includes(target)\r\n                            && (get.name(target) in lib.characterPack.clubs || target.group == 'qun');\r\n                    }).set('ai', function (target) {\r\n                        let player = _status.event.player;\r\n                        if (target != player.getNext())\r\n                            return 5 - get.attitude(player, target);\r\n                        return 3 - get.attitude(player, target);\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        Evt.target = result.targets[0];\r\n                        player.logSkill('zonghe', Evt.target);\r\n                        player.storage.zonghe.add(Evt.target);\r\n                        player.storage.zonghe_mark = Evt.target;\r\n                        player.addSkill('zonghe_mark');\r\n                    }\r\n                },\r\n                involve: 'guangan',\r\n                subSkill: {\r\n                    mark: {\r\n                        mark: 'character',\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '纵合',\r\n                            content: '对$发动『珖黯』时无视座次限制',\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            qiying: {\r\n                trigger: { player: 'damageAfter' },\r\n                filter(Evt, player) {\r\n                    if (player == _status.currentPhase)\r\n                        return false;\r\n                    return lib.filter.cardEnabled({ name: 'nanman' }, player);\r\n                },\r\n                check(Evt, player) {\r\n                    let effect = 0;\r\n                    let players = game.players.slice(0);\r\n                    if (player.isTurnedOver() || player.isPhaseUsing())\r\n                        effect += 3;\r\n                    for (let i = 0; i < players.length; i++) {\r\n                        if (players[i] != player && player.canUse('nanman', players[i]))\r\n                            effect += get.effect(players[i], { name: 'nanman' }, player, player);\r\n                    }\r\n                    return effect > 0;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.turnOver();\r\n                    'step 1';\r\n                    player.chooseUseTarget({ name: 'nanman' }, true);\r\n                }\r\n            },\r\n            hengxuan: {\r\n                trigger: { player: 'phaseJieshuBegin' },\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                check(Evt, player) {\r\n                    return true;\r\n                },\r\n                frequent: true,\r\n                content() {\r\n                    player.draw(2).gaintag = ['hengxuan'];\r\n                },\r\n                group: 'hengxuan_discardBy',\r\n                subSkill: {\r\n                    discardBy: {\r\n                        mod: {\r\n                            aiValue(player, card, num) {\r\n                                if (card.hasGaintag && card.hasGaintag('hengxuan'))\r\n                                    return num / 10;\r\n                            },\r\n                        },\r\n                        trigger: { target: \"useCardToTarget\" },\r\n                        filter(Evt, player) {\r\n                            return Evt.player != player && Evt.targets.length == 1 && player.countCards('h', (card) => card.hasGaintag('hengxuan'));\r\n                        },\r\n                        forced: true,\r\n                        content() {\r\n                            let hs = player.getCards('h', card => card.hasGaintag('hengxuan'));\r\n                            if (hs.length)\r\n                                player.discard(hs);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            shoumi: {\r\n                audio: 2,\r\n                trigger: { global: 'gameDrawAfter', player: ['enterGame', 'changeHp'] },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'changeHp')\r\n                        return Evt.num != 0;\r\n                    return true;\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    if (player.hp == 0) {\r\n                        let reason = trigger.getParent();\r\n                        delete player.nodying;\r\n                        if (trigger.num > 0)\r\n                            player.dying(reason);\r\n                    }\r\n                    else {\r\n                        player.nodying = true;\r\n                        if (player.hp < 0 && !player.hasSkill('shoumi_yingzi')) {\r\n                            player.addAdditionalSkill('shoumi', 'shoumi_yingzi');\r\n                        }\r\n                        else if (player.hp > 0 && !player.hasSkill('shoumi_guicai')) {\r\n                            player.addAdditionalSkill('shoumi', 'shoumi_guicai');\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, cur) {\r\n                            if (target.hp < 0) {\r\n                                if (get.tag(card, 'recover') > 0)\r\n                                    return [-1, 0];\r\n                                if (target.hp == -1)\r\n                                    return [1, -1];\r\n                                if (get.tag(card, 'damage') >= 1 || get.tag(card, 'loseHp'))\r\n                                    return [-1.5, 0];\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                involve: ['shoumi_yingzi', 'shoumi_guicai']\r\n            },\r\n            shoumi_yingzi: {\r\n                trigger: { player: 'phaseDrawBegin2' },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return !Evt.numFixed;\r\n                },\r\n                content() {\r\n                    trigger.num++;\r\n                },\r\n                ai: {\r\n                    threaten: 1.5\r\n                },\r\n                mod: {\r\n                    maxHandcardBase(player, num) {\r\n                        return player.maxHp;\r\n                    }\r\n                }\r\n            },\r\n            shoumi_guicai: {\r\n                trigger: { global: 'judge' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') > 0;\r\n                },\r\n                content() {\r\n                    \"step 0\";\r\n                    player.chooseCard(get.translation(trigger.player) + '的' + (trigger.judgestr || '') + '判定为' +\r\n                        get.translation(trigger.player.judging[0]) + '，' + get.prompt('shoumi_guicai'), 'he', card => {\r\n                        let player = _status.event.player;\r\n                        let mod2 = game.checkMod(card, player, 'unchanged', 'cardEnabled2', player);\r\n                        if (mod2 != 'unchanged')\r\n                            return mod2;\r\n                        let mod = game.checkMod(card, player, 'unchanged', 'cardRespondable', player);\r\n                        if (mod != 'unchanged')\r\n                            return mod;\r\n                        return true;\r\n                    }).set('ai', card => {\r\n                        let trigger = _status.event.getTrigger();\r\n                        let player = _status.event.player;\r\n                        let judging = _status.event.judging;\r\n                        let result = trigger.judge(card) - trigger.judge(judging);\r\n                        let attitude = get.attitude(player, trigger.player);\r\n                        if (attitude == 0 || result == 0)\r\n                            return 0;\r\n                        if (attitude > 0) {\r\n                            return result - get.value(card) / 2;\r\n                        }\r\n                        else {\r\n                            return -result - get.value(card) / 2;\r\n                        }\r\n                    }).set('judging', trigger.player.judging[0]);\r\n                    \"step 1\";\r\n                    if (result.bool) {\r\n                        player.respond(result.cards, 'shoumi_guicai', 'highlight', 'noOrdering');\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    \"step 2\";\r\n                    if (result.bool) {\r\n                        if (trigger.player.judging[0].clone) {\r\n                            trigger.player.judging[0].clone.classList.remove('thrownhighlight');\r\n                            game.broadcast(card => {\r\n                                if (card.clone) {\r\n                                    card.clone.classList.remove('thrownhighlight');\r\n                                }\r\n                            }, trigger.player.judging[0]);\r\n                            game.addVideo('deletenode', player, get.cardsInfo([trigger.player.judging[0].clone]));\r\n                        }\r\n                        game.cardsDiscard(trigger.player.judging[0]);\r\n                        trigger.player.judging[0] = result.cards[0];\r\n                        trigger.orderingCards.addArray(result.cards);\r\n                        game.log(trigger.player, '的判定牌改为', result.cards[0]);\r\n                        game.delay(2);\r\n                    }\r\n                },\r\n                ai: {\r\n                    rejudge: true,\r\n                    tag: {\r\n                        rejudge: 1,\r\n                    }\r\n                }\r\n            },\r\n            yanwang: {\r\n                trigger: { target: 'useCardToTarget' },\r\n                filter(Evt, player) {\r\n                    return Evt.player != player;\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.line(trigger.player, 'green');\r\n                    let check = get.recoverEffect(player, trigger.player, trigger.player);\r\n                    if (player.countCards('h') > 0)\r\n                        check += 0.5;\r\n                    check = check > 0;\r\n                    trigger.player.chooseBool(get.prompt2('yanwang', player)).set('choice', check > 0);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        trigger.player.logSkill('yanwang', player);\r\n                        player.recover(trigger.player);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    trigger.player.gainPlayerCard(player, 'h', true, 'visibleMove');\r\n                    'step 3';\r\n                    if (result.bool && result.links) {\r\n                        if (get.color(result.links[0]) == 'black') {\r\n                            if (!game.hasPlayer(cur => cur != player && cur != trigger.player && trigger.player.canUse('juedou', cur))) {\r\n                                Evt.finish();\r\n                                return;\r\n                            }\r\n                            Evt.source = trigger.player;\r\n                            player.chooseTarget(true, function (card, player, target) {\r\n                                let evt = _status.event.getParent();\r\n                                return evt.source.canUse({ name: 'juedou' }, target);\r\n                            }, '请选择一名角色，视为' + get.translation(trigger.player) + '对其使用【决斗】').set('ai', function (target) {\r\n                                let evt = _status.event.getParent();\r\n                                return get.effect(target, { name: 'juedou' }, evt.source, _status.event.player) - 2;\r\n                            });\r\n                        }\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 4';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        trigger.player.useCard({ name: 'juedou', isCard: true }, result.targets[0], 'noai');\r\n                    }\r\n                },\r\n            },\r\n            bykuangxin: {\r\n                audio: 2,\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                content() {\r\n                    'step 0';\r\n                    if (Evt.cards == undefined)\r\n                        Evt.cards = [];\r\n                    if (Evt.d10 == undefined)\r\n                        Evt.d10 = [];\r\n                    let next = player.judge(card => {\r\n                        if (get.number(card) > 10)\r\n                            return 1.5;\r\n                        return 0;\r\n                    });\r\n                    next.set('callback', function () {\r\n                        let evt = Evt.getParent('bykuangxin');\r\n                        if (get.number(card) > 10) {\r\n                            Evt.getParent().orderingCards.remove(card);\r\n                        }\r\n                        else {\r\n                            evt.d10.unshift(card);\r\n                            if (!evt.num) {\r\n                                evt.num = 0;\r\n                            }\r\n                            evt.num++;\r\n                            if (evt.d100 == undefined) {\r\n                                evt.d100 = 0;\r\n                                if (get.number(card) != 10)\r\n                                    evt.d100 += get.number(card);\r\n                            }\r\n                            else {\r\n                                if (get.number(card) != 10 || evt.d100 == 0)\r\n                                    evt.d100 += (get.number(card) * 10);\r\n                            }\r\n                            if (evt.num == 2) {\r\n                                player.chat('1d100=' + evt.d100);\r\n                                if (evt.d100 >= 96)\r\n                                    player.popup('大失败', 'yami');\r\n                                else if (evt.d100 <= 5)\r\n                                    player.popup('大成功', 'wood');\r\n                                else if (evt.d100 <= 40)\r\n                                    player.popup('成功', 'wood');\r\n                                else if (evt.d100 >= 61)\r\n                                    player.popup('失败', 'yami');\r\n                                game.delayx(1.5);\r\n                            }\r\n                        }\r\n                        game.delayx(0.2);\r\n                    });\r\n                    'step 1';\r\n                    if (Evt.num != 2) {\r\n                        Evt.card = get.cards()[0];\r\n                        if (Evt.videoId == undefined)\r\n                            Evt.videoId = lib.status.videoId++;\r\n                        if (result.number > 10)\r\n                            Evt.cards.push(result.card);\r\n                        for (let i of Evt.cards) {\r\n                            Evt.card = i;\r\n                            game.addVideo('judge1', player, [get.cardInfo(Evt.card), false, Evt.videoId]);\r\n                            game.broadcastAll(function (player, card, str, id, cardid) {\r\n                                let Evt;\r\n                                if (game.online) {\r\n                                    Evt = {};\r\n                                }\r\n                                else {\r\n                                    Evt = _status.event;\r\n                                }\r\n                                if (game.chess) {\r\n                                    Evt.node = card.copy('thrown', 'center', ui.arena).animate('start');\r\n                                }\r\n                                else {\r\n                                    Evt.node = player.$throwordered(card.copy(), true);\r\n                                }\r\n                                if (lib.cardOL)\r\n                                    lib.cardOL[cardid] = Evt.node;\r\n                                Evt.node.cardid = cardid;\r\n                                Evt.node.classList.add('thrownhighlight');\r\n                                ui.arena.classList.add('thrownhighlight');\r\n                                Evt.dialog = ui.create.dialog(str);\r\n                                Evt.dialog.classList.add('center');\r\n                                Evt.dialog.videoId = id;\r\n                            }, player, Evt.card, false, Evt.videoId, get.id());\r\n                        }\r\n                        game.addVideo('centernode', null, get.cardsInfo(Evt.cards));\r\n                        Evt.goto(0);\r\n                    }\r\n                    else {\r\n                        if (Evt.videoId) {\r\n                            game.addVideo('judge2', null, Evt.videoId);\r\n                            game.broadcast(function (id) {\r\n                                let dialog = get.idDialog(id);\r\n                                if (dialog) {\r\n                                    dialog.close();\r\n                                }\r\n                                ui.arena.classList.remove('thrownhighlight');\r\n                            }, Evt.videoId);\r\n                        }\r\n                        for (let i = 0; i < Evt.cards.length; i++) {\r\n                            if (get.position(Evt.cards[i], true) != 'o') {\r\n                                Evt.cards.splice(i, 1);\r\n                                i--;\r\n                            }\r\n                        }\r\n                        player.gain(Evt.cards, 'gain2').gaintag.add('bykuangxin');\r\n                    }\r\n                    'step 2';\r\n                    if (Evt.d100) {\r\n                        player.showCards(Evt.d10, '『狂信』判定结果：' + Evt.d100);\r\n                        if (Evt.d100 >= 96) {\r\n                            game.filterPlayer(cur => {\r\n                                if (cur != player)\r\n                                    player.randomGain('h', cur);\r\n                            });\r\n                        }\r\n                        else if (Evt.d100 <= 5) {\r\n                            player.draw(2);\r\n                            player.gainMaxHp(true);\r\n                        }\r\n                        else if (Evt.d100 <= 40) {\r\n                            player.recover();\r\n                        }\r\n                        else if (Evt.d100 <= 60) {\r\n                        }\r\n                        else if (Evt.d100 <= 95) {\r\n                            player.loseHp();\r\n                            if (player.needsToDiscard()) {\r\n                                player.chooseToDiscard(player.needsToDiscard(), true);\r\n                            }\r\n                        }\r\n                    }\r\n                    'step 3';\r\n                    if (Evt.d100) {\r\n                        if (Evt.d100 >= 96) {\r\n                            player.loseMaxHp(true);\r\n                            if (lib.config.background_audio) {\r\n                                game.playAudio('effect', 'damage2');\r\n                            }\r\n                            game.broadcast(function () {\r\n                                if (lib.config.background_audio) {\r\n                                    game.playAudio('effect', 'damage2');\r\n                                }\r\n                            });\r\n                            player.$damage(player);\r\n                        }\r\n                        else if (Evt.d100 >= 41 && Evt.d100 <= 60) {\r\n                            if (player.hasUseTarget('juedou')) {\r\n                                player.chooseUseTarget({ name: 'juedou', isCard: true }, true);\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 6,\r\n                    result: {\r\n                        player: 1\r\n                    }\r\n                },\r\n            },\r\n            rouqing: {\r\n                init(player, skill) {\r\n                    player.storage[skill] = 1;\r\n                    player.markSkill('rouqing');\r\n                },\r\n                marktext: '柔',\r\n                intro: {\r\n                    content(storage, player) {\r\n                        let str = '下一次发动『柔情』时，（）值为：';\r\n                        if (player.storage.rouqing > 4)\r\n                            str += get.cnNumber(0);\r\n                        else\r\n                            str += get.cnNumber(4 - player.storage.rouqing);\r\n                        return str;\r\n                    },\r\n                },\r\n                trigger: { global: 'changeHp' },\r\n                filter(Evt, player) {\r\n                    return Evt.num < 0;\r\n                },\r\n                usable: 1,\r\n                frequent(Evt, player) {\r\n                    return player == Evt.player;\r\n                },\r\n                check(Evt, player) {\r\n                    return get.attitude(player, Evt.player) > 0;\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    'step 0';\r\n                    Evt.num = -trigger.num;\r\n                    Evt.target = trigger.player;\r\n                    if (!player.storage.rouqing)\r\n                        player.storage.rouqing = 1;\r\n                    Evt.min = 4 - player.storage.rouqing;\r\n                    if (Evt.min < 0) {\r\n                        Evt.min = 0;\r\n                    }\r\n                    'step 1';\r\n                    Evt.num--;\r\n                    Evt.cards = get.cards(4);\r\n                    Evt.target.chooseCardButton([Evt.min, 4], true, Evt.cards, `『柔情』：选择至少(${get.cnNumber(Evt.min)})张牌置于牌堆底（先选择的在下）<br>\r\n\t\t\t\t\t然后获得未被选择的牌`).set('ai', function (button) {\r\n                        let min = 0;\r\n                        if (ui.selected.buttons.length >= Evt.min)\r\n                            min = -5;\r\n                        let player = _status.event.player, now = _status.currentPhase, next = now.getNext();\r\n                        let att = get.attitude(player, next), card = button.link;\r\n                        let judge = next.getCards('j')[ui.selected.buttons.length];\r\n                        if (judge) {\r\n                            return get.judge(judge)(card) * att + min;\r\n                        }\r\n                        return next.getUseValue(card) * att + min;\r\n                    }).set('min', Evt.min);\r\n                    'step 2';\r\n                    if (result.bool && result.links) {\r\n                        player.storage.rouqing = 1;\r\n                        player.markSkill('rouqing');\r\n                        let cards = result.links.slice(0);\r\n                        Evt.cards.removeArray(cards);\r\n                        game.log(Evt.target, '将' + get.cnNumber(cards.length) + '张牌置于牌堆底');\r\n                        while (cards.length) {\r\n                            ui.cardPile.appendChild(cards.pop().fix());\r\n                        }\r\n                        game.updateRoundNumber();\r\n                        if (Evt.cards.length) {\r\n                            Evt.target.gain(Evt.cards, 'gain2');\r\n                        }\r\n                    }\r\n                    'step 3';\r\n                    if (Evt.num > 0)\r\n                        Evt.goto(1);\r\n                },\r\n                ai: {\r\n                    threaten: 1.9,\r\n                    maixie: true,\r\n                    maixie_hp: true,\r\n                }\r\n            },\r\n            guangying: {\r\n                trigger: {\r\n                    player: 'loseAfter',\r\n                    global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter'],\r\n                },\r\n                filter(Evt, player) {\r\n                    var _a;\r\n                    if (Evt.getParent().name == 'useCard')\r\n                        return false;\r\n                    let evt = Evt.getl(player);\r\n                    return (_a = evt === null || evt === void 0 ? void 0 : evt.hs) === null || _a === void 0 ? void 0 : _a.length;\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    if (!player.storage.rouqing)\r\n                        player.storage.rouqing = 1;\r\n                    player.storage.rouqing++;\r\n                    player.markSkill('rouqing');\r\n                },\r\n                ai: {\r\n                    combo: 'rouqing'\r\n                },\r\n                group: 'guangying_recoverBy',\r\n                subSkill: {\r\n                    recoverBy: {\r\n                        trigger: {\r\n                            player: 'gainAfter',\r\n                        },\r\n                        filter(Evt, player) {\r\n                            var _a;\r\n                            return ((_a = Evt.cards) === null || _a === void 0 ? void 0 : _a.length) >= 4;\r\n                        },\r\n                        forced: true,\r\n                        content() {\r\n                            player.recover();\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            aldanyan: new toSkill('active', {\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') > 0;\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    if (target.hp >= player.hp)\r\n                        return true;\r\n                },\r\n                selectCard: 2,\r\n                discard: false,\r\n                prepare: 'give2',\r\n                content() {\r\n                    'step 0';\r\n                    target.gain(cards, player);\r\n                    'step 1';\r\n                    Evt.list = ['令' + get.translation(player) + '获得你的三张牌', '受到一点伤害'];\r\n                    target.chooseControl('dialogcontrol', Evt.list).set('ai', function () {\r\n                        let { player, source, controls } = _status.event;\r\n                        if (get.attitude(player, source) > 0 || player.countCards('he') == 0)\r\n                            return 0;\r\n                        if (get.damageEffect(player, source, player) < 0 && player.hp == 1)\r\n                            return 0;\r\n                        if (get.damageEffect(player, source, player) > 0)\r\n                            return 1;\r\n                        return controls.randomGet();\r\n                    }).set('source', player);\r\n                    'step 2';\r\n                    switch (result.control) {\r\n                        case Evt.list[0]: {\r\n                            player.gainPlayerCard(target, [1, 3], true, 'he', 'visible');\r\n                            break;\r\n                        }\r\n                        case Evt.list[1]: {\r\n                            target.damage(player);\r\n                            game.delayx();\r\n                            break;\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    order(item, player) {\r\n                        return 6;\r\n                    },\r\n                    result: {\r\n                        player(player, target) {\r\n                            return -1;\r\n                        },\r\n                        target(player, target) {\r\n                            if (target.countCards('he'))\r\n                                return -2;\r\n                            return get.damageEffect(target, player, target);\r\n                        }\r\n                    },\r\n                    threaten: 0.4,\r\n                    expose: 0.2,\r\n                },\r\n            }, 'filterCard'),\r\n            lunao: new toSkill('trigger', {\r\n                trigger: { source: 'damageBegin2' },\r\n                priority: 199,\r\n                content() {\r\n                    'step 0';\r\n                    let list = lib.linked.slice(0);\r\n                    list.remove('kami');\r\n                    list.remove(trigger.nature);\r\n                    Evt.map = {};\r\n                    for (let i = 0; i < list.length; i++) {\r\n                        Evt.map[get.rawName(list[i])] = list[i];\r\n                        list[i] = get.rawName(list[i]);\r\n                    }\r\n                    list.push('取消');\r\n                    player.chooseControl('dialogcontrol', list).set('ai', function () {\r\n                        return list.randomGets();\r\n                    }).set('prompt', get.prompt2('lunao'));\r\n                    'step 1';\r\n                    if (result.control != '取消') {\r\n                        Evt.target = trigger.player;\r\n                        player.logSkill('lunao', Evt.target);\r\n                        trigger.nature = Evt.map[result.control];\r\n                        trigger.num++;\r\n                        let halt = game.createEvent('halt');\r\n                        Evt.next.remove(halt);\r\n                        trigger.after.push(halt);\r\n                        halt.setContent(function () {\r\n                            var evt = _status.event.getParent('phaseUse');\r\n                            if (evt && evt.name == 'phaseUse') {\r\n                                evt.skipped = true;\r\n                            }\r\n                            var evt = _status.event.getParent('phase');\r\n                            if (evt && evt.name == 'phase') {\r\n                                evt.finish();\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                }\r\n            }, 'direct'),\r\n            zhazong: {\r\n                trigger: { player: 'phaseUseEnd' },\r\n                direct: true,\r\n                audio: 3,\r\n                filter(Evt, player) {\r\n                    return !player.hasHistory('useCard', evt => get.type2(evt.card) == 'basic' && evt.getParent('phaseUse') == Evt)\r\n                        || !player.hasHistory('useCard', evt => get.type2(evt.card) == 'equip' && evt.getParent('phaseUse') == Evt)\r\n                        || !player.hasHistory('useCard', evt => get.type2(evt.card) == 'trick' && evt.getParent('phaseUse') == Evt);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    let position = '';\r\n                    let str = '弃置一名角色';\r\n                    if (!player.hasHistory('useCard', evt => get.type2(evt.card) == 'basic' && evt.getParent('phaseUse') == trigger)) {\r\n                        position += 'h';\r\n                        str += ' 手牌区 ';\r\n                    }\r\n                    if (!player.hasHistory('useCard', evt => get.type2(evt.card) == 'equip' && evt.getParent('phaseUse') == trigger)) {\r\n                        position += 'e';\r\n                        str += ' 装备区 ';\r\n                    }\r\n                    if (!player.hasHistory('useCard', evt => get.type2(evt.card) == 'trick' && evt.getParent('phaseUse') == trigger)) {\r\n                        position += 'j';\r\n                        str += ' 判定区 ';\r\n                    }\r\n                    Evt.position = position;\r\n                    if (position.length) {\r\n                        str += '各至多一张牌';\r\n                        player.chooseTarget(get.prompt('zhazong'), function (card, player, target) {\r\n                            return target.countCards(_status.event.position);\r\n                        }).set('position', position).set('prompt2', str).set('ai', function (target) {\r\n                            let player = _status.event.player;\r\n                            let att = get.attitude(player, target);\r\n                            if (att < 0) {\r\n                                att = -Math.sqrt(-att);\r\n                            }\r\n                            else {\r\n                                att = Math.sqrt(att);\r\n                            }\r\n                            if (_status.event.position == 'h')\r\n                                return -att;\r\n                            return att * lib.card.guohe.ai.result.target(player, target);\r\n                        });\r\n                    }\r\n                    'step 1';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        player.logSkill('zhazong', result.targets);\r\n                        Evt.target = result.targets[0];\r\n                        player.discardPlayerCard(Evt.target, Evt.position, [1, Evt.position.length], true).set('filterButton', function (button) {\r\n                            for (let i = 0; i < ui.selected.buttons.length; i++) {\r\n                                if (get.position(button.link) == get.position(ui.selected.buttons[i].link))\r\n                                    return false;\r\n                            }\r\n                            return true;\r\n                        });\r\n                    }\r\n                }\r\n            },\r\n            mengnan: new toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    var _a;\r\n                    if (Evt.name == 'addJudge' && Evt.player == player)\r\n                        return true;\r\n                    let evt = Evt.getl(player);\r\n                    return ((_a = evt === null || evt === void 0 ? void 0 : evt.js) === null || _a === void 0 ? void 0 : _a.length) > 0 && !player.hasSkill('misuzu_zhongxing_haruko');\r\n                },\r\n                content() {\r\n                    let draw = false, num = 2;\r\n                    if (trigger.name == 'addJudge' && trigger.player == player)\r\n                        draw = true;\r\n                    let evt = trigger.getParent('phaseJudge');\r\n                    if ((evt === null || evt === void 0 ? void 0 : evt.name) == 'phaseJudge') {\r\n                        num = 1;\r\n                    }\r\n                    if (draw)\r\n                        player.draw(num);\r\n                    else\r\n                        player.chooseToDiscard(num, true);\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (get.name(card) == 'shandian') {\r\n                                return [1, 1];\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    yuenanBy: new toSkill('trigger', {\r\n                        filter(Evt, player) {\r\n                            return player.isAlive();\r\n                        },\r\n                        content() {\r\n                            player.removeSkill('mengnan');\r\n                            player.addSkill('yuenan');\r\n                        },\r\n                    }, 'forced').setT('dyingAfter')\r\n                }\r\n            }, 'forced', 'group:mengnan_yuenanBy', 'derivation:yuenan').setT({\r\n                player: ['loseAfter', 'addJudgeAfter'],\r\n                global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter'],\r\n            }),\r\n            lique: {\r\n                trigger: { target: 'useCardToTargeted' },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return get.type(Evt.card) != 'equip';\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.loseHp();\r\n                    'step 1';\r\n                    player.draw();\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (target.hp < 0)\r\n                                return [0, 1];\r\n                            if (get.type(card) != 'equip')\r\n                                return [1, 2];\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            zhangdeng: {\r\n                trigger: { player: 'dying' },\r\n                forced: true,\r\n                filter: (Evt, player) => true,\r\n                content() {\r\n                    player.recover();\r\n                    game.delayx();\r\n                },\r\n                ai: {\r\n                    maixie_defend: true,\r\n                    threaten(player, target) {\r\n                        if (target.hp == 1)\r\n                            return 0.6;\r\n                        return 1;\r\n                    },\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (target.hujia)\r\n                                return;\r\n                            if (player._zhangdeng_tmp)\r\n                                return;\r\n                            if (_status.event.getParent('useCard', true) || _status.event.getParent('_wuxie', true))\r\n                                return;\r\n                            if (get.tag(card, 'damage')) {\r\n                                let basic = player.storage.shangdong || 0;\r\n                                if (get.attitude(player, target) > 0 && target.hp > 1) {\r\n                                    return basic;\r\n                                }\r\n                                if (get.attitude(player, target) < 0 && !player.hasSkillTag('damageBonus', false, {\r\n                                    name: card ? card.name : null,\r\n                                    target: target,\r\n                                    card: card\r\n                                })) {\r\n                                    if (card.name == 'sha')\r\n                                        return;\r\n                                    let sha = false;\r\n                                    player._zhangdeng_tmp = true;\r\n                                    let num = player.countCards('h', card => {\r\n                                        if (card.name == 'sha') {\r\n                                            if (sha) {\r\n                                                return false;\r\n                                            }\r\n                                            else {\r\n                                                sha = true;\r\n                                            }\r\n                                        }\r\n                                        return get.effect(target, card, player, player) + basic > 0;\r\n                                    });\r\n                                    delete player._zhangdeng_tmp;\r\n                                    if (player.hasSkillTag('damage')) {\r\n                                        num++;\r\n                                    }\r\n                                    if (num < 2) {\r\n                                        let enemies = player.getEnemies();\r\n                                        if (enemies.length == 1 && enemies[0] == target && player.needsToDiscard()) {\r\n                                            return;\r\n                                        }\r\n                                        return basic;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            qiding: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter: (Evt, player) => player.countCards('h'),\r\n                filterTarget(card, player, target) {\r\n                    return player.inRange(target);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    target.viewHandcards(player);\r\n                    'step 1';\r\n                    Evt.list = ['受到一点伤害', '令' + get.translation(player) + '观看并获得你的一张牌，且防止其对你的伤害直到本回合结束'];\r\n                    target.chooseControl('dialogcontrol', Evt.list).set('ai', function () {\r\n                        let player = _status.event.player, source = _status.event.source, controls = _status.event.controls.slice(0);\r\n                        if (get.attitude(player, source) > 0 || player.countCards('he') == 0)\r\n                            return 1;\r\n                        if (get.damageEffect(player, source, player) < 0 && player.hp == 1)\r\n                            return 1;\r\n                        if (get.damageEffect(player, source, player) > 0)\r\n                            return 0;\r\n                        return controls.randomGet();\r\n                    }).set('source', player);\r\n                    'step 2';\r\n                    switch (result.control) {\r\n                        case Evt.list[0]: {\r\n                            target.damage(player);\r\n                            game.delayx();\r\n                            break;\r\n                        }\r\n                        case Evt.list[1]: {\r\n                            player.gainPlayerCard(target, 'he', 'visible');\r\n                            player.storage.qiding_respondDam = target;\r\n                            player.addTempSkill('qiding_respondDam');\r\n                            break;\r\n                        }\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    respondDam: {\r\n                        mark: 'character',\r\n                        intro: {\r\n                            name: '契定',\r\n                            content: '防止对$造成的伤害',\r\n                        },\r\n                        onremove: true,\r\n                        forced: true,\r\n                        trigger: { source: 'damageBegin' },\r\n                        filter(Evt, player) {\r\n                            return player.storage.qiding_respondDam == Evt.player;\r\n                        },\r\n                        content() {\r\n                            trigger.changeToZero();\r\n                        },\r\n                        ai: {\r\n                            effect: {\r\n                                player(card, player, target, current) {\r\n                                    if (target && target == player.storage.qiding_respondDam && get.tag(card, 'damage'))\r\n                                        return 'zeroplayertarget';\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 6,\r\n                    result: {\r\n                        target: -1,\r\n                    },\r\n                    threaten: 1.1,\r\n                }\r\n            },\r\n            chouxin: {\r\n                trigger: { player: 'loseEnd' },\r\n                filter(Evt, player) {\r\n                    if (!Evt.visible)\r\n                        return false;\r\n                    for (let i = 0; i < Evt.hs.length; i++) {\r\n                        if (get.suit(Evt.hs[i]) == 'heart')\r\n                            return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    if (player.isHealthy())\r\n                        player.loseHp();\r\n                    else\r\n                        player.recover();\r\n                    player.addTempSkill('chouxin_skipDiscard');\r\n                },\r\n                subSkill: {\r\n                    skipDiscard: {\r\n                        mark: true,\r\n                        intro: {\r\n                            name: '酬心',\r\n                            content: '跳过弃牌阶段',\r\n                        },\r\n                        trigger: { player: 'phaseDiscardBefore' },\r\n                        forced: true,\r\n                        content() {\r\n                            trigger.cancel();\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            jusheng: {\r\n                trigger: { global: 'phaseZhunbeiBegin' },\r\n                check(Evt, player) {\r\n                    return Evt.player.countCards('e') > player.countCards('e');\r\n                },\r\n                logTarget: 'player',\r\n                filter(Evt, player) {\r\n                    return (Evt.player.countCards('e') || player.countCards('e')) && player != Evt.player;\r\n                },\r\n                round: 1,\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    Evt.target = trigger.player;\r\n                    Evt.prenum = Evt.target.countCards('e');\r\n                    player.swapEquip(Evt.target);\r\n                    'step 1';\r\n                    if (Evt.target.countCards('e') > Evt.prenum) {\r\n                        Evt.target.storage.jusheng_shiyue = player;\r\n                        Evt.target.addTempSkill('jusheng_shiyue');\r\n                        Evt.finish();\r\n                    }\r\n                    else if (Evt.target.countCards('e') < Evt.prenum) {\r\n                        player.chooseTarget('『剧生』：令你或其调整手牌至与对方相同', true, function (card, player, target) {\r\n                            return _status.event.targets.includes(target);\r\n                        }, function (target) {\r\n                            let num = _status.event.targets.slice(0).remove(target)[0].countCards('h') - target.countCards('h');\r\n                            return get.attitude2(target) * num;\r\n                        }).set('targets', [player, Evt.target]);\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        let target = Evt.target;\r\n                        let num = player.countCards('h') - target.countCards('h');\r\n                        switch (result.targets[0]) {\r\n                            case player:\r\n                                if (num > 0)\r\n                                    player.chooseToDiscard(num, true);\r\n                                else if (num < -0)\r\n                                    player.draw(-num);\r\n                                break;\r\n                            case target:\r\n                                if (num > 0)\r\n                                    target.draw(num);\r\n                                else if (num < -0)\r\n                                    target.chooseToDiscard(-num, true);\r\n                                break;\r\n                        }\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    shiyue: {\r\n                        mark: 'character',\r\n                        intro: {\r\n                            name: '剧生',\r\n                            mark(dialog, content, player) {\r\n                                if (content) {\r\n                                    dialog.addAuto([content]);\r\n                                }\r\n                            },\r\n                            content: '被$发动了『剧生』',\r\n                        },\r\n                        onremove: true,\r\n                        trigger: { player: 'useCard2' },\r\n                        filter(Evt, player) {\r\n                            if (!player.storage.jusheng_shiyue.isIn())\r\n                                return false;\r\n                            return Evt.targets.includes(player) || Evt.targets.includes(player.storage.jusheng_shiyue);\r\n                        },\r\n                        direct: true,\r\n                        lastDo: true,\r\n                        content() {\r\n                            Evt.source = player.storage.jusheng_shiyue;\r\n                            player.line(Evt.source);\r\n                            Evt.source.chooseUseTarget({ name: 'sha', isCard: false }, false).set('logSkill', 'jusheng');\r\n                            game.delayx();\r\n                        },\r\n                        ai: {\r\n                            effect: {\r\n                                player(card, player, target, current) {\r\n                                    if (player.storage.jusheng_shiyue.isIn() && target) {\r\n                                        if ([player.storage.xingxu_shiyue, player].includes(target) && get.attitude(player, player.storage.jusheng_shiyue))\r\n                                            return [1, 0.5];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                ai: {\r\n                    expose: 0.2\r\n                },\r\n            },\r\n            xingqu: {\r\n                trigger: { global: 'dying' },\r\n                limited: true,\r\n                skillAnimation: true,\r\n                animationColor: 'yami',\r\n                check(Evt, player) {\r\n                    return get.attitude(player, Evt.player) > 0 || (get.attitude(player, Evt.player) > -1 && player.isDamaged());\r\n                },\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && Evt.reason && Evt.reason.source == player;\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.player;\r\n                    player.loseMaxHp();\r\n                    player.awakenSkill('xingqu');\r\n                    'step 1';\r\n                    Evt.target.recover();\r\n                    Evt.choice = get.gainableSkills().randomGets(3);\r\n                    Evt.prompt = '『星取』：选择一个技能';\r\n                    if (_status.connectMode)\r\n                        Evt.goto(5);\r\n                    'step 2';\r\n                    Evt.target.chooseButton([Evt.prompt, [Evt.choice, 'vcard']], true).set('ai', function (button) {\r\n                        return 1 + Math.random();\r\n                    });\r\n                    'step 3';\r\n                    Evt.tarSkill = result.links[0][2];\r\n                    player.chooseButton([Evt.prompt, [Evt.choice, 'vcard']], true).set('ai', function (button) {\r\n                        return 1 + Math.random();\r\n                    });\r\n                    'step 4';\r\n                    Evt.mySkill = result.links[0][2];\r\n                    Evt.goto(7);\r\n                    'step 5';\r\n                    let list = [[player, [Evt.prompt, [Evt.choice, 'vcard']], true],\r\n                        [Evt.target, [Evt.prompt, [Evt.choice, 'vcard']], true]];\r\n                    player.chooseButtonOL(list).set('switchToAuto', function () {\r\n                        _status.event.result = 'ai';\r\n                    }, function () { }, function () { return 1 + Math.random(); }).set('processAI', function () {\r\n                        let buttons = _status.event.dialog.buttons;\r\n                        return {\r\n                            bool: true,\r\n                            links: [buttons.randomGet().link],\r\n                        };\r\n                    });\r\n                    'step 6';\r\n                    Evt.mySkill = result[player.playerid].links[0][2];\r\n                    Evt.tarSkill = result[Evt.target.playerid].links[0][2];\r\n                    'step 7';\r\n                    player.popup(get.translation(Evt.mySkill));\r\n                    Evt.target.popup(get.translation(Evt.tarSkill));\r\n                    if (Evt.mySkill == Evt.tarSkill) {\r\n                        player.line2([Evt.target, player]);\r\n                        player.addAdditionalSkill('xingqu', 'xingqu2', true);\r\n                    }\r\n                    else {\r\n                        player.addSkillLog(Evt.tarSkill);\r\n                        player.addAdditionalSkill('xingqu', Evt.tarSkill, true);\r\n                    }\r\n                },\r\n            },\r\n            xingqu2: {\r\n                trigger: { source: 'damageBegin1' },\r\n                forced: true,\r\n                charlotte: true,\r\n                content() {\r\n                    trigger.num++;\r\n                },\r\n                mark: true,\r\n                intro: {\r\n                    content: '造成伤害时，此伤害+1',\r\n                },\r\n            },\r\n            xingxu: {\r\n                trigger: { global: 'phaseZhunbeiBegin' },\r\n                check(Evt, player) {\r\n                    if (get.attitude(player, Evt.player) >= 1) {\r\n                        return player.countCards('he') >= player.hp;\r\n                    }\r\n                    else {\r\n                        return player.countCards('he', card => get.value(card) <= 0) >= 2;\r\n                    }\r\n                    return false;\r\n                },\r\n                logTarget: 'player',\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') >= 2 && player != Evt.player;\r\n                },\r\n                round: 1,\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.player;\r\n                    player.chooseCard(2, true, 'he', '『星许』交给' + get.translation(Evt.target) + '两张牌').set('ai', card => {\r\n                        return _status.event.att >= 1 ? get.value(card) : -get.value(card);\r\n                    }).set('att', get.attitude(player, Evt.target));\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.cards = result.cards;\r\n                        player.give(Evt.cards, Evt.target, true);\r\n                        Evt.target.storage.xingxu_shiyue = player;\r\n                        Evt.target.storage.xingxu_shiyue2 = Evt.cards;\r\n                        Evt.target.addTempSkill('xingxu_shiyue');\r\n                        Evt.target.addTempSkill('xingxu_shiyue2');\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    shiyue: {\r\n                        mark: 'character',\r\n                        intro: {\r\n                            name: '星许',\r\n                            mark(dialog, content, player) {\r\n                                if (content) {\r\n                                    dialog.addAuto([content]);\r\n                                    dialog.addAuto(player.storage.xingxu_shiyue2);\r\n                                }\r\n                            },\r\n                            content: '被$发动了『星许』',\r\n                        },\r\n                        onremove: true,\r\n                        trigger: { player: 'phaseEnd' },\r\n                        filter(Evt, player) {\r\n                            if (!player.storage.xingxu_shiyue.isIn())\r\n                                return false;\r\n                            return player.getHistory('sourceDamage', evt => {\r\n                                return evt.player == player.storage.xingxu_shiyue;\r\n                            }).length;\r\n                        },\r\n                        forced: true,\r\n                        lastDo: true,\r\n                        content() {\r\n                            Evt.source = player.storage.xingxu_shiyue;\r\n                            player.line(Evt.source);\r\n                            Evt.source.recover(Evt.source);\r\n                            game.delayx();\r\n                        },\r\n                        ai: {\r\n                            effect: {\r\n                                player(card, player, target, current) {\r\n                                    if (target && target == player.storage.xingxu_shiyue && get.tag(card, 'damage') && !player.getHistory('sourceDamage', evt => {\r\n                                        return evt.player == player.storage.xingxu_shiyue;\r\n                                    }).length)\r\n                                        return [1, 0, 1, 1];\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    shiyue2: {\r\n                        onremove: true,\r\n                        trigger: { player: 'phaseEnd' },\r\n                        filter(Evt, player) {\r\n                            if (!player.storage.xingxu_shiyue.isIn())\r\n                                return false;\r\n                            let cards = player.storage.xingxu_shiyue2.slice(0);\r\n                            player.getHistory('useCard', evt => {\r\n                                cards.removeArray(evt.cards);\r\n                            });\r\n                            return cards.length == 1;\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            'step 0';\r\n                            player.line(Evt.source);\r\n                            game.delayx();\r\n                            Evt.source = player.storage.xingxu_shiyue;\r\n                            Evt.cards = player.storage.xingxu_shiyue2.slice(0);\r\n                            player.getHistory('useCard', evt => {\r\n                                Evt.cards.removeArray(evt.cards);\r\n                            });\r\n                            'step 1';\r\n                            if (Evt.cards.length == 1 && player.hasUseTarget(Evt.cards[0])) {\r\n                                Evt.source.chooseUseTarget(Evt.cards[0], '视为使用一张' + get.translation(Evt.cards[0]), true);\r\n                            }\r\n                        },\r\n                        mod: {\r\n                            aiOrder(player, card, num) {\r\n                                if (get.attitude(player, player.storage.xingxu_shiyue) > 1 && player.storage.xingxu_shiyue2) {\r\n                                    if (player.storage.xingxu_shiyue2.includes(card)\r\n                                        && player.getHistory('useCard', evt => player.storage.xingxu_shiyue2.includes(evt.card)).length == 1) {\r\n                                        if (player.needsToDiscard())\r\n                                            return num - 2;\r\n                                        else\r\n                                            return num - 8;\r\n                                    }\r\n                                }\r\n                            },\r\n                        },\r\n                    }\r\n                },\r\n                ai: {\r\n                    expose: 0.2\r\n                },\r\n            },\r\n            qingsui: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill]) {\r\n                        player.storage[skill] = 0;\r\n                    }\r\n                    player.addAdditionalSkill('qingsui', 'qingsui_jiai');\r\n                },\r\n                trigger: { player: ['useCardAfter', 'qingsui_shengyinAfter', 'qingsui_quanyuAfter'] },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'useCard')\r\n                        return Evt.skill == 'qingsui_jiai_backup';\r\n                    return true;\r\n                },\r\n                locked: true,\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    if (player.storage.qingsui == 2)\r\n                        player.storage.qingsui = 0;\r\n                    else\r\n                        player.storage.qingsui++;\r\n                    player.addAdditionalSkill('qingsui', ['qingsui_jiai', 'qingsui_shengyin', 'qingsui_quanyu'][player.storage.qingsui]);\r\n                    'step 1';\r\n                    if (player.storage.qingsui == 0) {\r\n                        Evt.target = _status.currentPhase;\r\n                        if (Evt.target.countGainableCards(player, 'he') && Evt.target != player) {\r\n                            player.line(Evt.target);\r\n                            player.gainPlayerCard(Evt.target, 'he');\r\n                        }\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    jiai: {\r\n                        inherit: \"jiai\",\r\n                        filter(Evt, player) {\r\n                            if (player.storage.qingsui != 0)\r\n                                return false;\r\n                            if (player.countCards('h') < 2)\r\n                                return false;\r\n                            let filterCard = Evt.filterCard || function (card, player, Evt) {\r\n                                return true;\r\n                            };\r\n                            let jiaiCards = [];\r\n                            for (let i = 0; i < lib.inpile.length; ++i) {\r\n                                if (get.type(lib.inpile[i]) != 'basic')\r\n                                    continue;\r\n                                let card = { name: lib.inpile[i] };\r\n                                if (filterCard(card, player, Evt)) {\r\n                                    jiaiCards.push(card);\r\n                                }\r\n                            }\r\n                            return jiaiCards.length > 0;\r\n                        },\r\n                    },\r\n                    shengyin: {\r\n                        inherit: \"shengyin\",\r\n                        filter(Evt, player) {\r\n                            if (player.storage.qingsui != 1)\r\n                                return false;\r\n                            return true;\r\n                        },\r\n                    },\r\n                    quanyu: {\r\n                        inherit: \"quanyu\",\r\n                        filter(Evt, player) {\r\n                            if (player.storage.qingsui != 2)\r\n                                return false;\r\n                            let suit = get.suit(Evt.card);\r\n                            return Evt.cards && Evt.cards.length && suit != 'none' && Evt.player != player && !player.countCards('h', card => suit == get.suit(card));\r\n                        },\r\n                    },\r\n                },\r\n                involve: ['jiai', 'shengyin', 'quanyu']\r\n            },\r\n            level: {\r\n                init(player, skill) {\r\n                    if (!player.storage.level) {\r\n                        player.storage.level = 1;\r\n                    }\r\n                },\r\n                marktext: '级',\r\n                intro: {\r\n                    content: '等级：#'\r\n                }\r\n            },\r\n            jinzhou: {\r\n                group: ['level'],\r\n                trigger: { player: 'loseEnd' },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return Evt.es.filter(card => get.subtype(card) == 'equip2').length;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    if (!player.storage.level) {\r\n                        player.storage.level = 1;\r\n                    }\r\n                    player.draw(player.storage.level);\r\n                    'step 1';\r\n                    game.playAudio('effect', 'hujia');\r\n                    game.broadcast(function () {\r\n                        game.playAudio('effect', 'hujia');\r\n                    });\r\n                    player.storage.level++;\r\n                    player.markSkill('level');\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (get.type(card) == 'equip' && get.subtype(card) == 'equip2')\r\n                                return [1, 2];\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            gouhun: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    if (!player.storage.level) {\r\n                        player.storage.level = 1;\r\n                    }\r\n                    let list = get.cards(player.storage.level + 2);\r\n                    Evt.list = list;\r\n                    player.showCards(list, '『勾魂』亮出牌');\r\n                    'step 1';\r\n                    Evt.cards = Evt.list.slice(0);\r\n                    player.chooseCardButton(Evt.list, '获得其中一种类型的牌<br>（取消则+1等级）');\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        let type = get.type2(result.links[0]), cards = Evt.cards.filter(card => get.type2(card) == type);\r\n                        player.showCards(cards, '『勾魂』获得牌');\r\n                        game.delayx();\r\n                        player.gain(cards, 'gain2', 'log').gaintag.add('gouhun');\r\n                        Evt.cards.removeArray(cards);\r\n                    }\r\n                    else {\r\n                        game.playAudio('effect', 'hujia');\r\n                        game.broadcast(function () {\r\n                            game.playAudio('effect', 'hujia');\r\n                        });\r\n                        player.storage.level++;\r\n                        player.markSkill('level');\r\n                    }\r\n                    'step 3';\r\n                    game.cardsDiscard(Evt.cards);\r\n                },\r\n                mod: {\r\n                    ignoredHandcard(card, player) {\r\n                        if (card.hasGaintag('gouhun') && get.type2(card) == 'trick') {\r\n                            return true;\r\n                        }\r\n                    },\r\n                    cardDiscardable(card, player, name) {\r\n                        if (name == 'phaseDiscard' && card.hasGaintag('gouhun') && get.type2(card) == 'trick') {\r\n                            return false;\r\n                        }\r\n                    },\r\n                    aiOrder(player, card, num) {\r\n                        if (get.itemtype(card) == 'card' && card.hasGaintag('gouhun') && get.type(card) == 'basic')\r\n                            return num + 0.1;\r\n                    },\r\n                },\r\n                group: ['level', 'gouhun_reCount'],\r\n                subSkill: {\r\n                    reCount: {\r\n                        trigger: { player: 'useCard1' },\r\n                        firstDo: true,\r\n                        silent: true,\r\n                        filter(Evt, player) {\r\n                            return get.type(Evt.card) == 'basic' && Evt.cards.length == 1 && player.getHistory('lose', evt => {\r\n                                if (evt.getParent() != Evt)\r\n                                    return false;\r\n                                for (let i in evt.gaintag_map) {\r\n                                    if (evt.gaintag_map[i].includes('gouhun'))\r\n                                        return true;\r\n                                }\r\n                                return false;\r\n                            }).length > 0;\r\n                        },\r\n                        content() {\r\n                            if (trigger.addCount !== false) {\r\n                                trigger.addCount = false;\r\n                                let stat = player.getStat().card;\r\n                                if (stat.sha)\r\n                                    stat.sha--;\r\n                            }\r\n                        },\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 5,\r\n                    result: {\r\n                        player: 1\r\n                    },\r\n                    threaten: 1.5\r\n                },\r\n            },\r\n            anyou: {\r\n                trigger: { player: ['phaseUseBegin', 'damageAfter'] },\r\n                priority: 199,\r\n                filter(Evt, player) {\r\n                    return game.countPlayer(cur => cur != player && get.distance(cur, player) <= 1);\r\n                },\r\n                check(Evt, player) {\r\n                    return player.hp > 1;\r\n                },\r\n                logTarget(Evt, player) {\r\n                    return game.filterPlayer(cur => cur != player && get.distance(cur, player) <= 1);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.targets = game.filterPlayer(cur => cur != player && get.distance(cur, player) <= 1);\r\n                    Evt.targets.sortBySeat(player);\r\n                    'step 1';\r\n                    Evt.target = Evt.targets.shift();\r\n                    Evt.target.chooseToUse();\r\n                    'step 2';\r\n                    if (result.bool || Evt.target.countCards('he') == 0) {\r\n                        Evt.goto(4);\r\n                    }\r\n                    else {\r\n                        Evt.target.chooseCard('he', true, '『暗友』：交给' + get.translation(player) + '一张牌');\r\n                    }\r\n                    'step 3';\r\n                    if (result.bool && result.cards) {\r\n                        Evt.target.give(result.cards, player, true);\r\n                    }\r\n                    'step 4';\r\n                    if (Evt.targets.length)\r\n                        Evt.goto(1);\r\n                },\r\n                group: ['anyou_drawBy'],\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: { target: 'useCardToTarget' },\r\n                        priority: 199,\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            let evt0 = Evt.getParent('anyou');\r\n                            let evt1 = Evt.getParent('chooseToUse');\r\n                            return (evt0 && evt0.name == 'anyou') && (evt1 && evt1.name == 'chooseToUse');\r\n                        },\r\n                        content() {\r\n                            player.draw();\r\n                        },\r\n                    },\r\n                },\r\n                ai: {\r\n                    maixie: true,\r\n                }\r\n            },\r\n            mingyou: {\r\n                trigger: { target: 'useCardToTarget' },\r\n                filter(Evt, player) {\r\n                    return Evt.player.getHistory('damage').length;\r\n                },\r\n                frequent(Evt, player) {\r\n                    return player.isDamaged() || Evt.player == player;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.targets = [player];\r\n                    Evt.targets.add(trigger.player);\r\n                    'step 1';\r\n                    Evt.targets.shift().recover();\r\n                    'step 2';\r\n                    if (Evt.targets.length)\r\n                        Evt.goto(1);\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (player.getHistory('damage').length)\r\n                                return [1, 2];\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            tingzhu: {\r\n                trigger: { source: 'damageAfter' },\r\n                priority: 199,\r\n                filter(Evt, player) {\r\n                    return Evt.getParent().type == 'card' && game.hasPlayer(cur => !Evt.getParent().targets.includes(cur));\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    let types = get.type3(_status.discarded);\r\n                    let check = game.hasPlayer(cur => !trigger.getParent().targets.includes(cur) && get.damageEffect(cur, player, player) > 0);\r\n                    player.chooseToDiscard(get.prompt2('tingzhu'), 'he', card => {\r\n                        console.log(_status.event.types);\r\n                        return !_status.event.types.includes(get.type(card));\r\n                    }).set('ai', card => {\r\n                        if (!_status.event.check)\r\n                            return -1;\r\n                        return 7 - get.value(card);\r\n                    }).set('types', types).set('check', check);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.chooseTarget('『庭柱』：选择一名角色对其造成伤害', true, function (card, player, target) {\r\n                            return !_status.event.targets.includes(target);\r\n                        }).set('targets', trigger.getParent().targets).set('ai', function (target) {\r\n                            let player = _status.event.player;\r\n                            return get.damageEffect(target, player, player) > 0;\r\n                        });\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        Evt.target = result.targets[0];\r\n                        player.logSkill('tingzhu', Evt.target);\r\n                        Evt.target.damage();\r\n                        game.delayx();\r\n                    }\r\n                },\r\n            },\r\n            xuemo: {\r\n                trigger: { source: 'damageBegin1' },\r\n                filter(Evt, player) {\r\n                    return Evt.player.hp > 0 && Evt.player.hp != player.hp;\r\n                },\r\n                check(Evt, player) {\r\n                    return (Math.min(Evt.player.hp, player.maxHp)) - player.hp > (get.attitude(player, Evt.player) / 4);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.num = trigger.player.hp - player.hp;\r\n                    player.changeHp(Evt.num);\r\n                    'step 1';\r\n                    trigger.num++;\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        player(card, player, target, current) {\r\n                            if (get.tag(card, 'damage') && target.hp > player.hp)\r\n                                return [1, 2];\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            miluan: new toSkill('active', {\r\n                usable: 1,\r\n                filterTarget(card, player, target) {\r\n                    return player.canCompare(target);\r\n                },\r\n                selectTarget: [1, 2],\r\n                content() {\r\n                    player.chooseToCompare(targets).callback = lib.skill.miluan.callback;\r\n                },\r\n                callback() {\r\n                    if (Evt.winner != player) {\r\n                        player.damage(target);\r\n                        player.draw(2);\r\n                    }\r\n                    if (Evt.winner != target) {\r\n                        target.damage(player);\r\n                        target.draw(2);\r\n                    }\r\n                },\r\n                ai: {\r\n                    order(item, player) {\r\n                        return 6;\r\n                    },\r\n                    result: {\r\n                        player(player, target) {\r\n                            if (player.hp === 1)\r\n                                return -2;\r\n                            return 1;\r\n                        },\r\n                        target(player, target) {\r\n                            if (target.hp === 1 || target.countCards('h') === 1)\r\n                                return get.damageEffect(target, player, target);\r\n                            return 2;\r\n                        }\r\n                    },\r\n                    threaten: 0.2\r\n                },\r\n            }, 'multitarget'),\r\n            shenjiao: new toSkill('trigger', {\r\n                trigger: { player: 'damageAfter' },\r\n                filter(Evt, player) {\r\n                    return Evt.num > 0;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.chooseTarget(get.prompt2('shenjiao')).set('ai', function (target) {\r\n                        let player = _status.event.player;\r\n                        return get.attitude(player, target) / ((target.storage.shenjiao_dam || 0) + 1);\r\n                    });\r\n                    'step 1';\r\n                    if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        Evt.target = result.targets[0];\r\n                        player.logSkill('shenjiao', Evt.target);\r\n                        Evt.target.hasSkill('shenjiao_dam') ? Evt.target.storage.shenjiao_dam++ : Evt.target.addTempSkill('shenjiao_dam');\r\n                    }\r\n                },\r\n            }, 'direct').set('subSkill', {\r\n                dam: new toSkill('mark', {\r\n                    init(player, skill) {\r\n                        if (!player.storage[skill]) {\r\n                            player.storage[skill] = 1;\r\n                        }\r\n                    },\r\n                    trigger: { player: 'damageBegin3' },\r\n                    content() {\r\n                        trigger.num -= player.storage.shenjiao_dam;\r\n                    },\r\n                    ai: {\r\n                        effect: {\r\n                            target(card, player, target, current) {\r\n                                if (get.tag(card, 'damage') && target.storage.shenjiao_dam)\r\n                                    return [1, -target.storage.shenjiao_dam];\r\n                            }\r\n                        },\r\n                    },\r\n                    intro: {\r\n                        content: '受到的伤害-#'\r\n                    }\r\n                }, 'forced', 'onremove', 'mark')\r\n            }),\r\n            mian: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill]) {\r\n                        player.storage[skill] = {\r\n                            ms: [],\r\n                            ans: []\r\n                        };\r\n                    }\r\n                },\r\n                locked: true,\r\n                notemp: true,\r\n                marktext: '面',\r\n                intro: {\r\n                    mark(dialog, content, player) {\r\n                        if (player.storage.mian.ms && player.storage.mian.ms.length) {\r\n                            let list = player.storage.mian.ms.slice(0);\r\n                            dialog.addText('明置面条');\r\n                            dialog.addSmall(list);\r\n                        }\r\n                        if (player.storage.mian.ans && player.storage.mian.ans.length) {\r\n                            if (player.isUnderControl(true)) {\r\n                                let list = player.storage.mian.ans.slice(0);\r\n                                dialog.addText('暗置面条');\r\n                                dialog.addSmall(list);\r\n                            }\r\n                            else {\r\n                                dialog.addText('暗置面条（' + get.cnNumber(player.storage.mian.ans.length) + '张）');\r\n                            }\r\n                        }\r\n                    },\r\n                    content: 'cards',\r\n                    onunmark(storage, player) {\r\n                        if ((storage && storage.ms && storage.ms.length) || (storage && storage.ans && storage.ans.length)) {\r\n                            let cards = storage.ms.concat(storage.ans);\r\n                            player.$throw(cards, 1000);\r\n                            game.cardsDiscard(cards);\r\n                            game.log(cards, '被置入了弃牌堆');\r\n                            storage.ms.length = 0;\r\n                            storage.ans.length = 0;\r\n                        }\r\n                    },\r\n                },\r\n                cardAround: ['ms', 'ans']\r\n            },\r\n            dianying: {\r\n                trigger: { player: 'damageBegin' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    if (!Evt.source || !Evt.source.isIn())\r\n                        return false;\r\n                    return player.storage.mian.ms && player.storage.mian.ms.length >= 3;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    let list2 = player.storage.mian.ms.slice(0), list = ['『店营』：可以暗置3碗或以上的面条'];\r\n                    if (list2 && list2.length) {\r\n                        list.push('明置面条');\r\n                        list.push([list2, 'card']);\r\n                    }\r\n                    list.push('hidden');\r\n                    Evt.source = trigger.source;\r\n                    let check = trigger.num == 1 && Evt.source.isFriendsOf(player);\r\n                    let next = player.chooseButton(list);\r\n                    next.set('selectButton', [3, Infinity]);\r\n                    next.set('source', Evt.source);\r\n                    next.set('ai', function (button) {\r\n                        if (!_status.event.check)\r\n                            return -1;\r\n                        let player = _status.event.player, source = _status.event.source;\r\n                        return get.value(button.link, source, 'raw');\r\n                    });\r\n                    next.set('check', check);\r\n                    'step 1';\r\n                    if (result.bool && result.links) {\r\n                        player.logSkill('dianying', Evt.source);\r\n                        lib.skill.dianying.process(player, result.links);\r\n                        trigger.num--;\r\n                        trigger.dianyingCards = result.links;\r\n                        player.addTempSkill('dianying_ifDamageZero');\r\n                        game.delay(0.5);\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    ifDamageZero: {\r\n                        trigger: { player: 'damageZero' },\r\n                        filter(Evt) {\r\n                            return Evt.dianyingCards;\r\n                        },\r\n                        forced: true,\r\n                        content() {\r\n                            Evt.source = trigger.source;\r\n                            Evt.cards = trigger.dianyingCards;\r\n                            player.storage.mian.ans.removeArray(Evt.cards);\r\n                            player.updateMarks();\r\n                            player.$give(Evt.cards, Evt.source);\r\n                            Evt.source.gain(Evt.cards, 'log');\r\n                        }\r\n                    }\r\n                },\r\n                process(player, cards) {\r\n                    let storage = player.getStorage('mian');\r\n                    if (storage.ans && storage.ms) {\r\n                        let giveAutos = [], drawAutos = [], source;\r\n                        for (let i = 0; i < cards.length; i++) {\r\n                            if (storage.ms.includes(cards[i])) {\r\n                                player.$give(cards[i], player, false);\r\n                                storage.ms.remove(cards[i]);\r\n                                storage.ans.push(cards[i]);\r\n                            }\r\n                            else if (storage.ans.includes(cards[i])) {\r\n                                player.$give(cards[i], player, false);\r\n                                storage.ans.remove(cards[i]);\r\n                                storage.ms.push(cards[i]);\r\n                            }\r\n                            else if (get.owner(cards[i])) {\r\n                                source = get.owner(cards[i]);\r\n                                giveAutos.add(cards[i]);\r\n                                storage.ans.push(cards[i]);\r\n                            }\r\n                            else {\r\n                                drawAutos.add(cards[i]);\r\n                                game.cardsGotoSpecial(cards[i]);\r\n                                storage.ans.push(cards[i]);\r\n                            }\r\n                        }\r\n                        if (drawAutos.length)\r\n                            player.$drawAuto(drawAutos);\r\n                        if (source && giveAutos.length) {\r\n                            source.$giveAuto(giveAutos, player);\r\n                        }\r\n                        player.markSkill('mian');\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten: 1.5\r\n                },\r\n                global: 'dianying2',\r\n                group: 'mian',\r\n            },\r\n            dianying2: {\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') && game.hasPlayer(cur => cur.hasSkill('dianying') && cur != player);\r\n                },\r\n                filterCard: true,\r\n                selectCard: [1, Infinity],\r\n                filterTarget(card, player, target) {\r\n                    return target.hasSkill('dianying') && target != player;\r\n                },\r\n                discard: false,\r\n                toStorage: true,\r\n                position: 'he',\r\n                usable: 1,\r\n                prompt() {\r\n                    let player = _status.event.player;\r\n                    let list = game.filterPlayer(cur => cur.hasSkill('dianying'));\r\n                    let str = '将至少一张牌交给' + get.translation(list);\r\n                    if (list.length > 1)\r\n                        str += '中的一人';\r\n                    return str;\r\n                },\r\n                complexCard: true,\r\n                check(card) {\r\n                    if (!ui.selected.cards.length)\r\n                        return 8 - get.value(card);\r\n                    return 6 - ui.selected.cards.length - get.value(card);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    lib.skill.dianying.process(target, cards);\r\n                    'step 1';\r\n                    let list1 = target.storage.mian.ans.slice(0);\r\n                    let list = ['『店营』：是否选择两碗面条明置'];\r\n                    if (list1.length) {\r\n                        list.push('暗置面条');\r\n                        if (target.isUnderControl(true))\r\n                            list.push([list1, 'card']);\r\n                        else {\r\n                            list1.randomSort();\r\n                            list.push([list1, 'blank']);\r\n                        }\r\n                    }\r\n                    list.push('hidden');\r\n                    let next = player.chooseButton(list);\r\n                    next.set('selectButton', 2);\r\n                    next.set('target', target);\r\n                    next.set('ai', function (button) {\r\n                        let player = _status.event.player;\r\n                        let target = _status.event.target;\r\n                        return get.attitude(player, target) <= 0 || get.recoverEffect(player, target, player) > 0;\r\n                    });\r\n                    'step 2';\r\n                    if (result.bool && result.links) {\r\n                        player.line(target);\r\n                        lib.skill.dianying.process(target, result.links);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 3';\r\n                    player.recover(target);\r\n                },\r\n                ai: {\r\n                    order: 6,\r\n                    result: {\r\n                        player(player, target) {\r\n                            let num = get.recoverEffect(player, target, player);\r\n                            if (target.getStorage('mian').ans.length <= 3)\r\n                                num += get.attitude(player, target) / 2;\r\n                            if (!player.needsToDiscard())\r\n                                num - 1;\r\n                            return num;\r\n                        },\r\n                        target(player, target) {\r\n                            if (target.getStorage('mian').ans.length > 6)\r\n                                return 0;\r\n                            if (target.getStorage('mian').ans.length > 3)\r\n                                return 0.5;\r\n                            return 2;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            ganfen: {\r\n                audio: 2,\r\n                trigger: { player: ['phaseJudgeBefore', 'phaseDrawBefore', 'phaseUseBefore', 'phaseDiscardBefore'] },\r\n                clickChange: '停业',\r\n                clickable(player) {\r\n                    if (player.storage.ganfen_clickChange === undefined)\r\n                        player.storage.ganfen_clickChange = false;\r\n                    else\r\n                        player.storage.ganfen_clickChange = !player.storage.ganfen_clickChange;\r\n                },\r\n                clickableFilter(player) {\r\n                    return player.storage.ganfen_clickChange !== false;\r\n                },\r\n                filter(Evt, player) {\r\n                    if (player.storage.ganfen_clickChange === false)\r\n                        return false;\r\n                    return player.hasSkill('mian');\r\n                },\r\n                prompt(Evt) {\r\n                    let str = get.prompt('ganfen');\r\n                    str += '跳过';\r\n                    str += get.translation(Evt.name);\r\n                    return str;\r\n                },\r\n                check(Evt, player) {\r\n                    if (['phaseDraw', 'phaseUse'].includes(Evt.name) || player.hp <= 1)\r\n                        return false;\r\n                    if (Evt.name == 'phaseJudge' && player.countCards('j') > 1)\r\n                        return true;\r\n                    return player.hp > 2 && player.countCards;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    trigger.cancel();\r\n                    'step 1';\r\n                    player.damage();\r\n                    'step 2';\r\n                    Evt.cards = get.cards(3);\r\n                    lib.skill.dianying.process(player, Evt.cards);\r\n                },\r\n                group: 'ganfen_fanmian',\r\n                subSkill: {\r\n                    fanmian: {\r\n                        trigger: { player: ['useCardAfter', 'respondAfter'] },\r\n                        filter(Evt, player) {\r\n                            if (player.storage.ganfen_clickChange === false)\r\n                                return false;\r\n                            if (player.storage.mian && (player.storage.mian.ans.length || player.storage.mian.ms.length)) {\r\n                                return get.type(Evt.card) == 'basic';\r\n                            }\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            'step 0';\r\n                            var _a;\r\n                            Evt.card = trigger.card;\r\n                            let list1 = player.storage.mian.ans.slice(0);\r\n                            let list = ['『擀奋』：选择面条翻面'];\r\n                            if (list1.length) {\r\n                                list.push('暗置面条');\r\n                                list.push([list1, 'card']);\r\n                            }\r\n                            list.push('hidden');\r\n                            Evt.list1 = list1;\r\n                            player.chooseButton(list);\r\n                            'step 1';\r\n                            if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                                player.logSkill('ganfen');\r\n                                lib.skill.dianying.process(player, result.links);\r\n                                game.delay(0.5);\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            niyou: {\r\n                trigger: { global: 'phaseEnd' },\r\n                priority: 49,\r\n                filter(Evt, player) {\r\n                    return player.getHistory('damage').length;\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    'step 0';\r\n                    game.delay(1);\r\n                    Evt.phaseUse = player.phaseUse();\r\n                    'step 1';\r\n                    if (!player.hasHistory('useCard', evt => {\r\n                        return evt.getParent('phaseUse') == Evt.phaseUse;\r\n                    })) {\r\n                        player.turnOver();\r\n                        player.draw(2);\r\n                    }\r\n                    else {\r\n                        player.markSkill('niyou');\r\n                        player.storage.niyou = player.storage.niyou ? (player.storage.niyou + 1) : 1;\r\n                    }\r\n                },\r\n                intro: {\r\n                    content: '心之壁厚度：#'\r\n                },\r\n                mod: {\r\n                    globalFrom(from, to, distance) {\r\n                        if (from.storage.niyou)\r\n                            return distance + from.storage.niyou;\r\n                    }\r\n                }\r\n            },\r\n            shalu: {\r\n                audio: 3,\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h') > 0;\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    if (!player.inRange(target))\r\n                        return true;\r\n                },\r\n                filterCard: true,\r\n                selectCard: -1,\r\n                content() {\r\n                    'step 0';\r\n                    target.damage('nocard');\r\n                    'step 1';\r\n                    if (target.hp > 0)\r\n                        player.draw(target.hp);\r\n                },\r\n                ai: {\r\n                    order(item, player) {\r\n                        if (player.countCards('h', { suit: 'heart' }))\r\n                            return 4;\r\n                        else\r\n                            return 1;\r\n                    },\r\n                    result: {\r\n                        player(player, target) {\r\n                            return target.hp - player.countCards('h');\r\n                        },\r\n                        target(player, target) {\r\n                            if (target.hasSkill('shenyou'))\r\n                                return 0;\r\n                            return get.damageEffect(target, player, target);\r\n                        }\r\n                    },\r\n                    expose: 0.2,\r\n                },\r\n            },\r\n            puyu: {\r\n                audio: true,\r\n                trigger: { player: 'phaseUseBegin' },\r\n                priority: 510,\r\n                filter(Evt, player) {\r\n                    return game.hasPlayer(cur => cur.countCards('he'));\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseTarget(get.prompt2('puyu'), function (card, player, target) {\r\n                        return target.countCards('he');\r\n                    }).set('ai', function (target) {\r\n                        let player = _status.event.player;\r\n                        return get.effect(target, { name: 'guohe_copy2' }, player, player);\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.target = result.targets[0];\r\n                        player.logSkill('puyu', Evt.target);\r\n                        Evt.target.chooseToDiscard('『璞玉』：请弃置一张牌', true, 'he').set('ai', card => {\r\n                            let player = _status.event.player, source = _status.event.source, num = 2;\r\n                            if (get.attitude(player, source) > 0 && source.getUseValue(card)) {\r\n                                if (source.countCards('h') > 3) {\r\n                                    num += 3 * get.value(card, source);\r\n                                }\r\n                                else if (source.countCards('h') > 0) {\r\n                                    num += get.value(card, source);\r\n                                }\r\n                            }\r\n                            num -= get.value(card, player);\r\n                            return num;\r\n                        }).set('source', player);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    if (result.bool && result.cards) {\r\n                        Evt.card = result.cards[0];\r\n                        player.storage.puyu_phaseEndBy = Evt.card;\r\n                        player.storage.puyu_phaseEndBy2 = [0, 0];\r\n                        player.addTempSkill('puyu_phaseEndBy', { player: 'phaseUseEnd' });\r\n                        game.delayx();\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    phaseEndBy: {\r\n                        mark: true,\r\n                        intro: {\r\n                            mark(dialog, storage, player) {\r\n                                if (storage) {\r\n                                    dialog.addSmall('所有手牌视为：');\r\n                                    dialog.addSmall([storage]);\r\n                                    dialog.addSmall('本阶段已使用' + player.storage.puyu_phaseEndBy2[0] + '张牌<br>' +\r\n                                        '所有角色已获得' + player.storage.puyu_phaseEndBy2[1] + '张牌');\r\n                                }\r\n                            },\r\n                        },\r\n                        mod: {\r\n                            cardname(card, player, name) {\r\n                                if (player.storage.puyu_phaseEndBy && get.position(card) == 'h')\r\n                                    return get.name(player.storage.puyu_phaseEndBy);\r\n                            },\r\n                        },\r\n                        onremove: ['puyu_phaseEndBy', 'puyu_phaseEndBy2'],\r\n                        trigger: { player: 'useCardAfter', global: 'gainAfter' },\r\n                        priority: 510,\r\n                        filter(Evt, player) {\r\n                            return game.hasPlayer(cur => cur.countCards('he'));\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            if (trigger.name == 'useCard')\r\n                                player.storage.puyu_phaseEndBy2[0]++;\r\n                            else\r\n                                player.storage.puyu_phaseEndBy2[1] += trigger.cards.length;\r\n                            if (player.storage.puyu_phaseEndBy2[0] >= 5, player.storage.puyu_phaseEndBy2[1] >= 10) {\r\n                                let evt = _status.event.getParent('phaseUse');\r\n                                if ((evt === null || evt === void 0 ? void 0 : evt.name) == 'phaseUse' && evt.player == player) {\r\n                                    evt.skipped = true;\r\n                                }\r\n                            }\r\n                            else\r\n                                player.markSkill('puyu_phaseEndBy');\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            appojian: {\r\n                audio: 3,\r\n                trigger: { source: 'damageAfter' },\r\n                priority: 199,\r\n                filter(Evt, player) {\r\n                    return Evt.getParent().type == 'card' && game.hasPlayer(cur => !Evt.getParent().targets.includes(cur));\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseTarget('『破茧』：令体力最多的一名角色失去体力', true, function (card, player, target) {\r\n                        return target.isMaxHp();\r\n                    }).set('ai', function (target) {\r\n                        return 1 - get.attitude2(target);\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        result.targets[0].loseHp();\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    player.chooseTarget('『破茧』：令体力最少的一名角色回复体力', true, function (card, player, target) {\r\n                        return target.isMinHp();\r\n                    }).set('ai', function (target) {\r\n                        let player = _status.event.player;\r\n                        return get.recoverEffect(target, player, player);\r\n                    });\r\n                    'step 3';\r\n                    if (result.bool) {\r\n                        result.targets[0].recover();\r\n                    }\r\n                    'step 4';\r\n                    if (player.isMaxHp() || player.isMinHp()) {\r\n                        let evt = _status.event.getParent('phaseUse');\r\n                        if ((evt === null || evt === void 0 ? void 0 : evt.name) == 'phaseUse') {\r\n                            evt.skipped = true;\r\n                        }\r\n                        let phase = _status.event.getParent('phase');\r\n                        if ((phase === null || phase === void 0 ? void 0 : phase.name) == 'phase') {\r\n                            phase.finish();\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        player(card, player, target, current) {\r\n                            if (get.tag(card, 'damage'))\r\n                                return [1, 2];\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            dieyuan: {\r\n                trigger: { global: 'recoverAfter' },\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && Evt.player.isIn();\r\n                },\r\n                check(Evt, player) {\r\n                    return get.attitude(player, Evt.player) > 0;\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.player;\r\n                    Evt.gainnum = Math.abs(Evt.target.hp - player.hp) || 1;\r\n                    Evt.target.draw(Evt.gainnum);\r\n                    'step 1';\r\n                    if (Evt.target.isIn()) {\r\n                        Evt.gainnum = Math.abs(Evt.target.hp - player.hp) || 1;\r\n                        Evt.target.chooseCard(Evt.gainnum, 'he', '将' + get.cnNumber(Evt.gainnum) + '张牌交给' + get.translation(player)).set('ai', card => {\r\n                            if (_status.event.goon > 0)\r\n                                return 0;\r\n                            if (_status.event.goon < 0)\r\n                                return 1 - get.value(card);\r\n                            return 5 - get.value(card);\r\n                        }).set('goon', function () {\r\n                            if (get.recoverEffect(player, Evt.target, Evt.target) > 0)\r\n                                return 1;\r\n                            if (player.isHealthy() || get.attitude(player, Evt.target) <= 0)\r\n                                return -1;\r\n                            return 0;\r\n                        }());\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    if (!result.bool || !result.cards) {\r\n                        player.recover(Evt.target);\r\n                    }\r\n                    else {\r\n                        Evt.target.give(result.cards, player, true);\r\n                    }\r\n                },\r\n                ai: {\r\n                    expose: 0.1\r\n                }\r\n            },\r\n            shengyang: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filterCard: true,\r\n                position: 'he',\r\n                filterTarget(card, player, target) {\r\n                    return target != player;\r\n                },\r\n                check(card) {\r\n                    let num = get.value(card);\r\n                    if (get.color(card) == 'black') {\r\n                        if (num >= 6)\r\n                            return 0;\r\n                        return 20 - num;\r\n                    }\r\n                    else {\r\n                        if (_status.event.player.needsToDiscard()) {\r\n                            return 7 - num;\r\n                        }\r\n                    }\r\n                    return 0;\r\n                },\r\n                discard: false,\r\n                lose: false,\r\n                delay: false,\r\n                content() {\r\n                    'step 0';\r\n                    target.gain(cards, player, 'giveAuto');\r\n                    'step 1';\r\n                    Evt.gainnum = (Math.abs(target.hp - player.hp) || 1) * 2;\r\n                    player.judge(card => {\r\n                        var _a;\r\n                        let evt = _status.event.getParent('shengyang');\r\n                        if ((evt === null || evt === void 0 ? void 0 : evt.gainnum) >= get.number(card))\r\n                            return 3;\r\n                        if ((_a = evt === null || evt === void 0 ? void 0 : evt.target) === null || _a === void 0 ? void 0 : _a.isDamaged())\r\n                            return 1;\r\n                        return -1;\r\n                    }).set('callback', function () {\r\n                        let evt = _status.event.getParent('shengyang');\r\n                        if (!evt || evt.name != 'shengyang')\r\n                            return;\r\n                        if (Evt.judgeResult.number <= evt.gainnum)\r\n                            player.gainPlayerCard([1, evt.gainnum], evt.target, true);\r\n                        else\r\n                            evt.target.recover();\r\n                    });\r\n                },\r\n                ai: {\r\n                    order: 8,\r\n                    expose: 0.2,\r\n                    result: {\r\n                        target(player, target) {\r\n                            return get.recoverEffect(target, player, target);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            daoyi: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = 0;\r\n                },\r\n                map: ['color', 'number', 'suit', 'name'],\r\n                trigger: { global: 'judge' },\r\n                filter: () => true,\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.player;\r\n                    let list = [];\r\n                    if (lib.skill.daoyi.map[player.storage.daoyi] == 'name') {\r\n                        for (let i = 0; i < lib.inpile.length; i++) {\r\n                            let name = lib.inpile[i];\r\n                            list.push([get.type2(name), '', name]);\r\n                        }\r\n                    }\r\n                    else {\r\n                        for (let i = 0; i < lib[lib.skill.daoyi.map[player.storage.daoyi]].length; i++) {\r\n                            let name = lib[lib.skill.daoyi.map[player.storage.daoyi]][i];\r\n                            list.push([lib.skill.daoyi.map[player.storage.daoyi], '', name]);\r\n                        }\r\n                    }\r\n                    let str = get.translation(Evt.target) + '的' + (trigger.judgestr || '') + '判定为' +\r\n                        get.translation(Evt.target.judging[0]) + '，是否发动『道易』，修改判定结果？';\r\n                    let dialog = ui.create.dialog(str, [list, 'vcard'], 'hidden');\r\n                    player.chooseButton(dialog).set('ai', function (button) {\r\n                        let judging = _status.event.judging, player = _status.event.player, change = _status.event.change;\r\n                        let trigger = _status.event.getTrigger(), res1 = trigger.judge(judging);\r\n                        let card = {\r\n                            name: get.name(judging),\r\n                            nature: get.nature(judging),\r\n                            suit: get.suit(judging),\r\n                            color: get.color(judging),\r\n                            number: get.number(judging),\r\n                        }, attitude = get.attitude(player, trigger.player);\r\n                        if (attitude == 0)\r\n                            return 0;\r\n                        card[change] = button.link[2];\r\n                        let now = trigger.judge(card);\r\n                        let effect = (now - res1) * attitude;\r\n                        if (player.storage.daoyi == 3 && _status.currentPhase && _status.currentPhase.isIn())\r\n                            effect += (get.damageEffect(_status.currentPhase, player, player)) * 1.5;\r\n                        return effect;\r\n                    }).set('change', lib.skill.daoyi.map[player.storage.daoyi]).set('judging', Evt.target.judging[0]);\r\n                    'step 1';\r\n                    if (result.bool == true) {\r\n                        let link = result.links[0][2];\r\n                        player.addExpose(0.25);\r\n                        player.logSkill('daoyi', Evt.target);\r\n                        player.popup(link);\r\n                        game.log(player, '将判定结果改为了', '#y' + get.translation(link));\r\n                        if (!trigger.fixedResult)\r\n                            trigger.fixedResult = {};\r\n                        if (lib.skill.daoyi.map[player.storage.daoyi] == 'number')\r\n                            trigger.fixedResult[lib.skill.daoyi.map[player.storage.daoyi]] = lib.number.indexOf(link) + 1;\r\n                        else\r\n                            trigger.fixedResult[lib.skill.daoyi.map[player.storage.daoyi]] = link;\r\n                        console.log(trigger.fixedResult);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    if (player.storage.daoyi < 3)\r\n                        player.storage.daoyi++;\r\n                    else {\r\n                        player.storage.daoyi = 0;\r\n                        if (_status.currentPhase && _status.currentPhase.isIn()) {\r\n                            player.line(_status.currentPhase);\r\n                            _status.currentPhase.damage(1, 'thunder');\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            shengyin: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filterTarget(card, player, target) {\r\n                    return target != player && target.countCards('h');\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    target.chooseCard('h', '『盛阴』：请展示一张牌', true);\r\n                    'step 1';\r\n                    if (result.cards) {\r\n                        let card = result.cards[0];\r\n                        target.showCards(card, '『盛阴』展示手牌');\r\n                        Evt.card = card;\r\n                        Evt.color = get.color(card);\r\n                        Evt.type2 = get.type2(card);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    let next = target.judge(card => {\r\n                        let evt = _status.event.getParent('shengyin');\r\n                        if (get.color(card) == (evt === null || evt === void 0 ? void 0 : evt.color))\r\n                            return 2;\r\n                        if (get.type2(card) == (evt === null || evt === void 0 ? void 0 : evt.type2))\r\n                            return -1;\r\n                        return 0;\r\n                    });\r\n                    next.set('callback', function () {\r\n                        let evt = _status.event.getParent('shengyin');\r\n                        if (!evt || evt.name != 'shengyin')\r\n                            return;\r\n                        let color = evt.color, type2 = evt.type2, card0 = evt.card, source = evt.player;\r\n                        if (get.type2(Evt.judgeResult.name) == type2)\r\n                            source.gain(card0, player, 'give');\r\n                        if (Evt.judgeResult.color == color)\r\n                            game.asyncDraw([player, source]);\r\n                    });\r\n                },\r\n                ai: {\r\n                    order: 8,\r\n                    expose: 0.2,\r\n                    result: {\r\n                        target(player, target) {\r\n                            return 2;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            hun: {\r\n                locked: true,\r\n                intro: {\r\n                    name: '『修又』：魂',\r\n                    content: 'cards',\r\n                    onunmark: 'throw',\r\n                },\r\n                cardAround: true\r\n            },\r\n            xiuyou: {\r\n                intro: {\r\n                    name: '已发动『修又』的目标角色',\r\n                    mark(dialog, storage, player) {\r\n                        if (storage && storage.length) {\r\n                            let name = storage.map(cur => get.name(cur));\r\n                            dialog.addSmall([name, 'character']);\r\n                        }\r\n                    },\r\n                    content(storage, player) {\r\n                        return '已『修又』' + get.cnNumber(storage.length) + '名角色';\r\n                    },\r\n                },\r\n                trigger: { player: 'dying' },\r\n                filter(Evt, player) {\r\n                    return player.getStorage('hun').length > 2 && _status.currentPhase && _status.currentPhase.isIn();\r\n                },\r\n                logTarget(Evt, player) {\r\n                    return _status.currentPhase;\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    'step 0';\r\n                    if (!player.storage.xiuyou)\r\n                        player.storage.xiuyou = [];\r\n                    Evt.target = _status.currentPhase;\r\n                    Evt.cards = player.getStorage('hun').slice(0);\r\n                    player.chooseCardButton(Evt.cards, '###『修又』选择交给' + get.translation(Evt.target) + '的牌###' + get.skillInfoTranslation('xiuyou', player), true).set('ai', function (button) {\r\n                        let player = _status.event.player;\r\n                        return get.attitude(player, _status.currentPhase) && get.buttonValue(button);\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.num = player.storage.xiuyou.includes(Evt.target) ? 2 : 1;\r\n                        Evt.cards.removeArray(result.links);\r\n                        Evt.target.gain(result.links, 'gain2');\r\n                        player.unmarkAuto('hun', result.links);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    let str = '选项A：将全部手牌与' + get.translation(player) + '的「魂」交换<br>选项B：令' + get.translation(player) + '摸「魂」数量张牌<br>选项C：令' + get.translation(player) + '回复一点体力';\r\n                    let list = [[['A', '', '选项A']], [['B', '', '选项B']], [['C', '', '选项C']]];\r\n                    Evt.videoId = lib.status.videoId++;\r\n                    game.broadcastAll(function (id, choicelist, str, num) {\r\n                        let dialog = ui.create.dialog('『修又』：请选择' + get.cnNumber(num) + '项');\r\n                        dialog.addSmall(str);\r\n                        choicelist.forEach(element => {\r\n                            dialog.add([element, 'vcard']);\r\n                        });\r\n                        dialog.videoId = id;\r\n                    }, Evt.videoId, list, str, Evt.num);\r\n                    'step 3';\r\n                    Evt.target.chooseButton(true, Evt.num).set('dialog', Evt.videoId).set('prompt', get.prompt('tiantang'));\r\n                    'step 4';\r\n                    game.broadcastAll('closeDialog', Evt.videoId);\r\n                    if (result.bool) {\r\n                        result.links.forEach(element => {\r\n                            switch (element[0]) {\r\n                                case 'A':\r\n                                    let cards = Evt.target.getCards('h');\r\n                                    player.unmarkAuto('hun', Evt.cards);\r\n                                    Evt.target.lose(cards, ui.special);\r\n                                    Evt.target.gain(Evt.cards);\r\n                                    Evt.target.$give(cards, player);\r\n                                    player.markAuto('hun', cards);\r\n                                    break;\r\n                                case 'B':\r\n                                    player.draw(player.getStorage('hun').length);\r\n                                    break;\r\n                                case 'C':\r\n                                    player.recover(Evt.target);\r\n                                    break;\r\n                            }\r\n                        });\r\n                    }\r\n                    'step 5';\r\n                    player.storage.xiuyou.add(Evt.target);\r\n                },\r\n                group: ['hun', 'xiuyou_gainMark'],\r\n                subSkill: {\r\n                    gainMark: {\r\n                        trigger: { player: ['judgeEnd', 'damageEnd'] },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            if (Evt.name == 'judge')\r\n                                return get.position(Evt.result.card, true) == 'o';\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            Evt.cards = trigger.name == 'judge' ? [trigger.result.card] : get.cards();\r\n                            game.cardsGotoSpecial(Evt.cards);\r\n                            player.markAuto('hun', Evt.cards);\r\n                            player.$gain2(Evt.cards);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            jiyuan: {\r\n                trigger: { global: 'phaseZhunbeiBegin' },\r\n                filter(Evt, player) {\r\n                    return Evt.player.isIn();\r\n                },\r\n                check(Evt, player) {\r\n                    return player == Evt.player;\r\n                },\r\n                logTarget: 'player',\r\n                round: 1,\r\n                content() {\r\n                    Evt.target = trigger.player;\r\n                    let next = Evt.target.judge(card => {\r\n                        if (get.color(card) == 'red')\r\n                            return 2;\r\n                        if (get.color(card) == 'black')\r\n                            return -2;\r\n                        return 0;\r\n                    });\r\n                    next.set('callback', function () {\r\n                        if (Evt.judgeResult.color == 'red')\r\n                            player.draw(2);\r\n                        if (Evt.judgeResult.color == 'black')\r\n                            player.damage('nosource', 'nocard');\r\n                    });\r\n                },\r\n            },\r\n            tibing: {\r\n                trigger: { player: ['phaseZhunbeiBegin', 'phaseJudgeBefore', 'phaseDrawBefore', 'phaseDiscardBefore', 'phaseJieshuBegin'] },\r\n                forced: true,\r\n                direct: true,\r\n                filter: () => true,\r\n                content() {\r\n                    trigger.cancel();\r\n                },\r\n                group: ['tibing_drawBy', 'tibing_discardBy'],\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: { player: ['phaseUseBegin'] },\r\n                        forced: true,\r\n                        filter: () => true,\r\n                        content() {\r\n                            'step 0';\r\n                            player.draw(2);\r\n                            'step 1';\r\n                            player.gain(player.getCards('ej'), player, 'giveAuto', 'log');\r\n                        },\r\n                    },\r\n                    discardBy: {\r\n                        trigger: { player: ['phaseUseEnd'] },\r\n                        forced: true,\r\n                        filter: () => true,\r\n                        content() {\r\n                            'step 0';\r\n                            player.showHandcards();\r\n                            'step 1';\r\n                            player.discard(player.getCards('h', { type: ['equip', 'trick', 'delay'] }));\r\n                        },\r\n                    }\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (get.type(card) == 'delay')\r\n                                return [0.1, 1];\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            guangtui: {\r\n                trigger: { global: 'phaseDiscardBegin' },\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && player.isDamaged();\r\n                },\r\n                check(Evt, player) {\r\n                    return player.hp <= 2 || get.attitude(player, Evt.player);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.loseMaxHp(true);\r\n                    'step 1';\r\n                    trigger.cancel(true);\r\n                    game.delayx();\r\n                    'step 2';\r\n                    player.phaseUse();\r\n                },\r\n                ai: {\r\n                    threaten(player, target) {\r\n                        if (!target.isDamaged())\r\n                            return 0.6;\r\n                    }\r\n                }\r\n            },\r\n            zhepie: {\r\n                trigger: { player: ['phaseZhunbeiBegin'] },\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                usable: 1,\r\n                content() {\r\n                    'step 0';\r\n                    Evt.card = get.cards()[0];\r\n                    player.showCards(Evt.card);\r\n                    game.delayx();\r\n                    'step 1';\r\n                    player.chooseTarget(true).set('ai', function (target) {\r\n                        let type2 = get.type2(_status.event.card);\r\n                        let att = get.attitude2(target);\r\n                        if (target.countCards('h', { type2: type2 }) <= 1 || type2 == 'equip') {\r\n                            if (target == player)\r\n                                return 1 + att;\r\n                            return att;\r\n                        }\r\n                        if (type2 == 'basic' && target.countCards('h', { type2: type2 }) >= 1 && att < 0) {\r\n                            return -att;\r\n                        }\r\n                        return get.value(card) * att / 4;\r\n                    }).set('card', Evt.card).set('createDialog', ['『折撇』：令一名角色获得此牌',\r\n                        [[Evt.card], 'card']]);\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        Evt.target = result.targets[0];\r\n                        player.line(Evt.target, 'ocean');\r\n                        Evt.target.gain(Evt.card, 'gain2', 'log');\r\n                        if (!Evt.target.storage.zhepie_cardDisable)\r\n                            Evt.target.storage.zhepie_cardDisable = [];\r\n                        Evt.target.storage.zhepie_cardDisable.add(Evt.card);\r\n                        Evt.target.addTempSkill('zhepie_cardDisable', { player: 'phaseAfter' });\r\n                        game.delayx();\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    cardDisable: {\r\n                        mark: true,\r\n                        intro: {\r\n                            name: '折撇',\r\n                            content: 'cards',\r\n                        },\r\n                        onremove: true,\r\n                        mod: {\r\n                            cardEnabled(card, player) {\r\n                                if (player.getStorage('zhepie_cardDisable').filter(zhepie => get.type2(zhepie) == get.type2(card)).length)\r\n                                    return false;\r\n                            },\r\n                            cardSavable(card, player) {\r\n                                if (player.getStorage('zhepie_cardDisable').filter(zhepie => get.type2(zhepie) == get.type2(card)).length)\r\n                                    return false;\r\n                            },\r\n                        },\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten: 1.2,\r\n                }\r\n            },\r\n            chumo: {\r\n                trigger: {\r\n                    player: 'loseAfter',\r\n                    global: 'cardsDiscardAfter',\r\n                },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'lose') {\r\n                        if (Evt.position != ui.discardPile)\r\n                            return false;\r\n                    }\r\n                    else {\r\n                        let evt = Evt.getParent();\r\n                        if (evt.name != 'orderingDiscard' || !evt.relatedEvent || evt.relatedEvent.player != player || !['useCard', 'respond'].includes(evt.relatedEvent.name))\r\n                            return false;\r\n                    }\r\n                    return (Evt.cards2 || Evt.cards).filterInD('d').length > 0;\r\n                },\r\n                round: 1,\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    let cards = (trigger.cards2 || trigger.cards).filterInD('d');\r\n                    Evt.cards = cards;\r\n                    player.chooseTarget().set('ai', function (target) {\r\n                        let att = get.attitude2(player, target);\r\n                        let num = 0;\r\n                        for (let i of _status.event.cards) {\r\n                            if (get.value(i) < 0 && att < 0 && !num)\r\n                                num += 1;\r\n                            if (get.value(i) > 0 && att > 0 && !num)\r\n                                num += att;\r\n                            if (!target.hasUseTarget(i))\r\n                                num += 2;\r\n                        }\r\n                        return num;\r\n                    }).set('cards', cards).set('createDialog', [get.prompt2('chumo'),\r\n                        [cards, 'card']]);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.target = result.targets[0];\r\n                        player.logSkill('chumo', Evt.target);\r\n                        let evt = trigger.getParent().relatedEvent;\r\n                        if ((trigger.name == 'discard' && !trigger.delay) || (evt === null || evt === void 0 ? void 0 : evt.name) == 'respond')\r\n                            game.delayx();\r\n                        if (Evt.cards.length == 1) {\r\n                            Evt._result = { links: [Evt.cards[0]] };\r\n                            Evt.goto(3);\r\n                        }\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    player.chooseCardButton(Evt.cards, true, '选择令' + get.translation(Evt.target) + '获得的牌', function (button) {\r\n                        let evt = _status.event.getParent();\r\n                        let att = get.attitude(evt.player, evt.target), i = button.link, value = get.value(i, target, 'raw');\r\n                        if (!evt.target.hasUseTarget(i))\r\n                            return att * value + 4;\r\n                        return att * value;\r\n                    });\r\n                    'step 3';\r\n                    if ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        Evt.card = result.links[0];\r\n                        Evt.target.gain(Evt.card, 'gain2', 'log');\r\n                        if (!Evt.target.hasUseTarget(Evt.card)) {\r\n                            player.draw(2);\r\n                        }\r\n                        ;\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten(player, target) {\r\n                        if (target.isDamaged())\r\n                            return 1.2;\r\n                    }\r\n                }\r\n            },\r\n            ahbingyi: {\r\n                trigger: { global: ['drawBegin'] },\r\n                filter(Evt, player) {\r\n                    return Evt.num && Evt.player != player && Evt.player.isMaxHandcard();\r\n                },\r\n                check(Evt, player) {\r\n                    if (Evt.num < 2)\r\n                        return false;\r\n                    return get.attitude(player, Evt.player) < -1 && player.hp >= 3;\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.player;\r\n                    player.loseHp();\r\n                    'step 1';\r\n                    trigger.cancel();\r\n                    game.delayx();\r\n                    'step 2';\r\n                    if (Evt.target.countDiscardableCards(player, 'he')) {\r\n                        player.discardPlayerCard(Evt.target, 'he', true);\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten: 1.1,\r\n                }\r\n            },\r\n            sujian: {\r\n                trigger: { player: 'damageEnd' },\r\n                filter(Evt, player) {\r\n                    return get.itemtype(Evt.cards) == 'cards' && get.position(Evt.cards[0], true) == 'o';\r\n                },\r\n                content() {\r\n                    game.cardsGotoSpecial(trigger.cards);\r\n                    player.$gain2(trigger.cards);\r\n                    player.markAuto('sujian_su', trigger.cards);\r\n                },\r\n                group: ['sujian_su', 'sujian_chooseBy', 'sujian_changeBy'],\r\n                subSkill: {\r\n                    su: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = [];\r\n                        },\r\n                        intro: {\r\n                            content: 'cards',\r\n                            locked: true,\r\n                            notemp: true,\r\n                            marktext: '🚨',\r\n                            onunmark(storage, player) {\r\n                                if (storage && storage.length) {\r\n                                    player.$throw(storage, 1000);\r\n                                    game.cardsDiscard(storage);\r\n                                    game.log(storage, '被置入了弃牌堆');\r\n                                    storage.length = 0;\r\n                                }\r\n                            },\r\n                            cardAround: true\r\n                        }\r\n                    },\r\n                    chooseBy: {\r\n                        trigger: { player: 'ahbingyiAfter' },\r\n                        filter(Evt, player) {\r\n                            return player.countCards('h');\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            'step 0';\r\n                            player.chooseCard('h', '发动『秉义』时，可以将一张手牌置于武将牌上').set('ai', card => {\r\n                                return 7 - get.value(card, player);\r\n                            }).set('logSkill', 'sujian');\r\n                            'step 1';\r\n                            if (result.bool && result.cards) {\r\n                                player.lose(result.cards, 'toStorage');\r\n                                player.$gain2(result.cards);\r\n                                player.markAuto('sujian_su', result.cards);\r\n                            }\r\n                        },\r\n                    },\r\n                    changeBy: {\r\n                        trigger: { global: ['useCard'] },\r\n                        filter(Evt, player) {\r\n                            if (!Evt.targets.length)\r\n                                return false;\r\n                            if (!player.getStorage('sujian_su').length)\r\n                                return false;\r\n                            return player.getStorage('sujian_su').filter(card => {\r\n                                return get.name(Evt.card) == get.name(card) || get.suit(Evt.card) == get.suit(card);\r\n                            }).length;\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            'step 0';\r\n                            Evt.sujian = player.getStorage('sujian_su').slice(0);\r\n                            Evt.card = trigger.card;\r\n                            Evt.target = trigger.player;\r\n                            let check = 0;\r\n                            for (let i of trigger.targets) {\r\n                                if (get.effect(i, Evt.card, Evt.target, player) < 0)\r\n                                    check++;\r\n                            }\r\n                            if (check < Evt.sujian.length)\r\n                                check = 0;\r\n                            player.chooseCardButton(Evt.sujian, '###' + get.prompt('sujian') + '###将一张对应' + get.translation(Evt.card) + '的「肃」置于牌堆顶').set('filterButton', function (button) {\r\n                                let card = button.link;\r\n                                return get.name(_status.event.card0) == get.name(card) || get.suit(_status.event.card0) == get.suit(card);\r\n                            }).set('ai', function (button) {\r\n                                if (!_status.event.check)\r\n                                    return -1;\r\n                                return 1;\r\n                            }).set('check', check).set('card0', Evt.card);\r\n                            'step 1';\r\n                            if (result.bool && result.links) {\r\n                                let card = result.links[0];\r\n                                player.logSkill('sujian', Evt.target);\r\n                                player.storage.sujian_su.remove(card);\r\n                                ui.cardPile.insertBefore(card, ui.cardPile.firstChild);\r\n                                player.$throw(card, 1000);\r\n                                game.log(player, '将' + get.translation(card) + '置于牌堆顶');\r\n                                player.updateMarks();\r\n                            }\r\n                            else\r\n                                Evt.finish();\r\n                            'step 2';\r\n                            let prompt2 = '为' + get.translation(Evt.card) + '减少任意个目标';\r\n                            player.chooseTarget('『肃监』：选择目标角色', [1, Infinity], function (card, player, target) {\r\n                                if (_status.event.targets.includes(target))\r\n                                    return true;\r\n                            }).set('prompt2', prompt2).set('ai', function (target) {\r\n                                let card = _status.event.card, player = _status.event.player, source = _status.event.source;\r\n                                return get.effect(target, card, source, player) * (_status.event.targets.includes(target) ? -1 : 1);\r\n                            }).set('targets', trigger.targets).set('card', Evt.card).set('source', Evt.target);\r\n                            'step 3';\r\n                            if (!Evt.isMine())\r\n                                game.delayx();\r\n                            Evt.targets = result.targets;\r\n                            'step 4';\r\n                            if (Evt.targets) {\r\n                                player.logSkill('sujian', Evt.targets);\r\n                                if (trigger.targets.includes(Evt.targets[0]))\r\n                                    trigger.targets.removeArray(Evt.targets);\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    combo: 'ahbingyi',\r\n                    maixie: true,\r\n                    maixie_hp: true,\r\n                    effect: {\r\n                        target(card, player, target) {\r\n                            if (player.hasSkillTag('jueqing', false, target))\r\n                                return [1, -1];\r\n                            if (get.tag(card, 'damage'))\r\n                                return [1, 0.55];\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            ciling: new toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return game.countPlayer(cur => cur !== player && !cur.hasSkill('ciling2'));\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.chooseTarget(get.prompt2('ciling'), function (card, player, target) {\r\n                        return target !== player && !target.hasSkill('ciling2');\r\n                    }).set('ai', tar => get.attitude2(tar) < 0);\r\n                    'step 1';\r\n                    if ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        Evt.target = result.targets[0];\r\n                        player.logSkill('ciling', Evt.target);\r\n                        Evt.target.addSkill('ciling2');\r\n                        trigger.cancel();\r\n                        game.delayx();\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten: 1.1,\r\n                },\r\n                involve: 'ciling',\r\n                subSkill: {\r\n                    dis: new toSkill('trigger', {\r\n                        filter(Evt, player) {\r\n                            return Evt.player.isIn() && Evt.player !== player && Evt.player.hasSkill('ciling2');\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            Evt.cards = trigger.cards;\r\n                            Evt.target = trigger.player;\r\n                            player.chooseControl('dialogcontrol', ['1.获得其弃牌', '2.视为对其使用一张【杀】', '取消']).set('ai', function () {\r\n                                let { player, target, cards } = _status.event.getParent();\r\n                                let values = get.value(cards || [], 'raw', player);\r\n                                console.log(get.effect(target, { name: 'sha' }, player, player));\r\n                                if (get.effect(target, { name: 'sha' }, player, player) > values / 3)\r\n                                    return 0;\r\n                                if (values > 0)\r\n                                    return 1;\r\n                                return 2;\r\n                            }).set('check', (get.attitude(player, _status.currentPhase) > 0) ? 0 : 1).set('prompt', get.prompt2('ciling', Evt.target)).set('addDialog', Evt.cards ? [Evt.cards] : []);\r\n                            'step 1';\r\n                            if (result.control.indexOf('1.') === 0 && Evt.cards.length) {\r\n                                player.gain(Evt.cards, 'log', 'gain2');\r\n                            }\r\n                            else if (result.control.indexOf('2.') === 0) {\r\n                                player.useCard({ name: 'sha' }, Evt.target, false);\r\n                            }\r\n                        }\r\n                    }).setT({ global: 'phaseDiscardEnd' })\r\n                }\r\n            }, 'direct', 'group:ciling_dis').setT('phaseUseBefore'),\r\n            ciling2: new toSkill('mark', {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = 0;\r\n                },\r\n                filter(Evt, player) {\r\n                    return Evt.name === 'dying' || Evt.target.hasSkill('ciling');\r\n                },\r\n                intro: {\r\n                    content: '被追杀中，已累计对杀手使用#张【杀】'\r\n                },\r\n                content() {\r\n                    if (trigger.name === 'dying') {\r\n                        delete player.storage.ciling2;\r\n                        player.removeSkill('ciling2');\r\n                    }\r\n                    else {\r\n                        if (++player.storage.ciling2 >= 3) {\r\n                            delete player.storage.ciling2;\r\n                            player.removeSkill('ciling2');\r\n                        }\r\n                    }\r\n                }\r\n            }, 'locked', 'mark').setT(['sha', 'dying'], 'Begin'),\r\n            xiyu: new toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return player !== _status.currentPhase;\r\n                },\r\n                content() {\r\n                    player.draw();\r\n                }\r\n            }, 'forced').setT('useCard2'),\r\n            exi: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filterTarget(card, player, target) {\r\n                    return target.countCards('h') && target != player;\r\n                },\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseToPSS(target);\r\n                    'step 1';\r\n                    if (!result.tie) {\r\n                        let card = { name: 'sha' };\r\n                        if (result.winner == 'stone')\r\n                            card.name = 'juedou';\r\n                        if (result.bool) {\r\n                            player.draw(2);\r\n                            target.useCard(card, player, false, 'noai');\r\n                        }\r\n                        else {\r\n                            target.draw(2);\r\n                            player.useCard(card, target, false, 'noai');\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 10,\r\n                    result: {\r\n                        player: 1,\r\n                        target: -0.1,\r\n                    }\r\n                }\r\n            },\r\n            suisui: {\r\n                trigger: { player: 'damageBegin3' },\r\n                forced: true,\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return !Evt.source && player.hp != 1 || Evt.source && player.hp == 1;\r\n                },\r\n                content() {\r\n                    trigger.cancel();\r\n                },\r\n                ai: {\r\n                    threaten(player, target) {\r\n                        if (target.hp == 1)\r\n                            return 0.5;\r\n                        return 1;\r\n                    },\r\n                }\r\n            },\r\n            yuanyao: {\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    if (player.countCards('h') > player.maxHp || player.countCards('h') == player.hp)\r\n                        return false;\r\n                    return (player.getStat('skill').yuanyao || 0) < game.countPlayer(cur => cur.sex == 'female');\r\n                },\r\n                complexCard: true,\r\n                filterCard(Evt, player) {\r\n                    if (player.countCards('h') > player.hp)\r\n                        return true;\r\n                    return false;\r\n                },\r\n                selectCard() {\r\n                    let player = _status.event.player;\r\n                    if (player.countCards('h') > player.hp)\r\n                        return (player.countCards('h') - player.hp);\r\n                    return -1;\r\n                },\r\n                discard: true,\r\n                check(card) {\r\n                    return 7.5 - get.value(card);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    if (cards && cards.length) {\r\n                        Evt.change = 'discard';\r\n                        Evt.num = cards.length;\r\n                    }\r\n                    else {\r\n                        Evt.change = 'draw';\r\n                        Evt.num = player.hp - player.countCards('h');\r\n                    }\r\n                    'step 1';\r\n                    switch (Evt.change) {\r\n                        case 'discard': {\r\n                            player.recover(Evt.num);\r\n                            break;\r\n                        }\r\n                        case 'draw': {\r\n                            player.draw(Evt.num);\r\n                            player.loseHp(Evt.num);\r\n                            break;\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 1.5,\r\n                    result: {\r\n                        player(player) {\r\n                            let num = game.countPlayer(cur => cur.sex == 'female') - (player.getStat('skill').yuanyao || 0);\r\n                            if (num > 1)\r\n                                return player.countCards('h');\r\n                            return player.countCards('h') - player.hp;\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            gongni: {\r\n                audio: true,\r\n                trigger: { player: ['phaseZhunbeiBegin', 'useCardAfter', 'respondAfter'] },\r\n                unique: true,\r\n                limited: true,\r\n                skillAnimation: true,\r\n                animationColor: 'yami',\r\n                filter(Evt, player) {\r\n                    if (Evt.name != 'phaseZhunbei' && _status.currentPhase == player)\r\n                        return false;\r\n                    return game.countPlayer() == game.countPlayer(cur => cur.isDamaged() && cur.hp >= 0);\r\n                },\r\n                logTarget(Evt, player) {\r\n                    return game.players;\r\n                },\r\n                check(Evt, player) {\r\n                    let effect = 0;\r\n                    game.filterPlayer(cur => {\r\n                        effect += (cur.getDamagedHp() - cur.hp) * get.attitude(player, target);\r\n                    });\r\n                    return effect >= 3;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.storage.gongni = true;\r\n                    player.awakenSkill('gongni');\r\n                    Evt.doon = [];\r\n                    Evt.current = player;\r\n                    'step 1';\r\n                    player.line(Evt.current, 'ocean');\r\n                    Evt.current.hp = (Evt.current.getDamagedHp());\r\n                    Evt.current.$thunder();\r\n                    game.log(Evt.current, '的体力变为', '#g' + Evt.current.hp);\r\n                    Evt.current.update();\r\n                    game.delayx(1.2);\r\n                    Evt.doon.add(Evt.current);\r\n                    'step 2';\r\n                    if (!Evt.doon.includes(Evt.current.next)) {\r\n                        Evt.current = Evt.current.next;\r\n                        Evt.goto(1);\r\n                    }\r\n                },\r\n            },\r\n            lianyin: {\r\n                trigger: { global: ['useCard', 'respond'] },\r\n                priority: 996,\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'respond' && !player.awakenedSkills.includes('guixiang'))\r\n                        return false;\r\n                    if (!player.storage.lianyin)\r\n                        player.storage.lianyin = 0;\r\n                    if (!player.storage.guixiang)\r\n                        player.storage.guixiang = 0;\r\n                    return Evt.player != player && player == _status.currentPhase && player.storage.lianyin < player.maxHp;\r\n                },\r\n                check(Evt, player) {\r\n                    return get.attitude(player, Evt.player) > -1;\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.player;\r\n                    game.asyncDraw([player, Evt.target]);\r\n                    'step 1';\r\n                    player.storage.lianyin++;\r\n                    player.storage.guixiang++;\r\n                    player.markSkill('guixiang');\r\n                },\r\n                group: 'lianyin_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { player: 'phaseAfter' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        filter(Evt, player) {\r\n                            return player.storage.lianyin;\r\n                        },\r\n                        content() {\r\n                            player.storage.lianyin = 0;\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            guixiang: {\r\n                skillAnimation: true,\r\n                unique: true,\r\n                juexingji: true,\r\n                forced: true,\r\n                init(player) {\r\n                    player.storage.guixiang = 0;\r\n                },\r\n                intro: {\r\n                    content: '已发动了&次『联音』',\r\n                },\r\n                trigger: { player: 'phaseZhunbeiBegin' },\r\n                filter(Evt, player) {\r\n                    return player.storage.guixiang >= game.countPlayer();\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.gainMaxHp();\r\n                    'step 1';\r\n                    player.recover();\r\n                    'step 2';\r\n                    player.storage.guixiang = true;\r\n                    player.awakenSkill('guixiang');\r\n                    player.unmarkSkill('guixiang');\r\n                },\r\n                ai: {\r\n                    combo: 'lianyin',\r\n                },\r\n            },\r\n            xuanying: {\r\n                trigger: { global: ['useCard', 'respond'] },\r\n                priority: 996,\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'respond' && !player.awakenedSkills.includes('houfan'))\r\n                        return false;\r\n                    if (!player.storage.xuanying)\r\n                        player.storage.xuanying = 0;\r\n                    return Evt.player != player && player == _status.currentPhase && player.storage.xuanying < (player.countCards('e') || 1);\r\n                },\r\n                check(Evt, player) {\r\n                    return get.attitude(player, Evt.player) > 0;\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    Evt.target = trigger.player;\r\n                    player.chooseCard('###' + get.prompt('xuanying') + '###将一张牌交给' + get.translation(Evt.target), 'he').set('target', Evt.target).ai = card => {\r\n                        let player = _status.event.player, target = _status.event.target;\r\n                        if (get.position(card) == 'e')\r\n                            return ((player.countCards('e') + 1) || 1) + get.value(card, target, 'raw') * get.attitude(player, target);\r\n                        else if (get.type(card) == 'equip')\r\n                            return ((player.countCards('e')) || 1) + get.value(card, target, 'raw') * get.attitude(player, target);\r\n                        return 1 + get.value(card, target, 'raw') * get.attitude(player, target);\r\n                    };\r\n                    'step 1';\r\n                    if (result.bool && result.cards) {\r\n                        if (get.type(result.cards[0]) == 'equip')\r\n                            Evt.drawNum = 'equip';\r\n                        player.give(result.cards, Evt.target, true);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    player.chooseTarget('『玄荫』：令你或其摸' + get.cnNumber(Evt.drawNum == 'equip' ? player.countCards('e') + 1 : 1) + '张牌', function (card, player, target) {\r\n                        return player == target || target == _status.event.target;\r\n                    }).set('target', Evt.target).ai = function (target) {\r\n                        if (target != player && target.hasSkillTag('nogain'))\r\n                            return 0;\r\n                        return get.attitude(player, target);\r\n                    };\r\n                    'step 3';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        if (Evt.drawNum == 'equip')\r\n                            result.targets[0].draw(player.countCards('e') + 1 || 1);\r\n                        else\r\n                            result.targets[0].draw();\r\n                    }\r\n                },\r\n                group: 'xuanying_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { player: 'phaseAfter' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        filter(Evt, player) {\r\n                            return player.storage.xuanying;\r\n                        },\r\n                        content() {\r\n                            player.storage.xuanying = 0;\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            houfan: {\r\n                enable: 'phaseUse',\r\n                unique: true,\r\n                limited: true,\r\n                filter(Evt, player) {\r\n                    return player.isMinHandcard();\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.loseMaxHp();\r\n                    Evt.num = 0;\r\n                    'step 1';\r\n                    let card = get.discardPile(card => get.type(card) == 'equip');\r\n                    if (card) {\r\n                        player.gain(card, 'gain2');\r\n                        Evt.num++;\r\n                    }\r\n                    else\r\n                        Evt.goto(3);\r\n                    'step 2';\r\n                    if (Evt.num < 4)\r\n                        Evt.goto(1);\r\n                    'step 3';\r\n                    player.storage.houfan = true;\r\n                    player.awakenSkill('houfan');\r\n                },\r\n                ai: {\r\n                    combo: 'xuanying',\r\n                    order(item, player) {\r\n                        let equips = [];\r\n                        for (let i = 0; i < ui.discardPile.childElementCount; i++) {\r\n                            let subtype = get.subtype(ui.discardPile.childNodes[i]);\r\n                            if (subtype && player.countCards('h', { subtype: subtype }) == 0) {\r\n                                equips.add(ui.discardPile.childNodes[i]);\r\n                            }\r\n                        }\r\n                        if (equips.length >= 3)\r\n                            return 10;\r\n                        return 0;\r\n                    },\r\n                    result: { player: 3 },\r\n                }\r\n            },\r\n            quzhuan: {\r\n                trigger: { global: 'useCardAfter' },\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player == _status.currentPhase && Evt.player != player && get.itemtype(Evt.cards) == 'cards' && Evt.cards.filterInD().length;\r\n                },\r\n                prompt2(Evt, player) {\r\n                    return '你可以获得' + get.translation(Evt.cards.filterInD());\r\n                },\r\n                check(Evt, player) {\r\n                    return Evt.cards.filterInD().length > 1 || get.value(Evt.cards.filterInD()[0], player) > 1;\r\n                },\r\n                content() {\r\n                    player.gain(trigger.cards.filterInD(), 'gain2');\r\n                }\r\n            },\r\n            yuanjiu: {\r\n                trigger: { global: 'phaseUseBegin' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    let esuits = get.suit3(Evt.player.getCards('e'));\r\n                    return esuits.length && player.countDiscardableCards(player, 'he', card => esuits.includes(card));\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.player;\r\n                    let suits = get.suit3(Evt.target.getCards('e'));\r\n                    player.chooseCard('he', get.prompt2('yuanjiu'), card => _status.event.suits.includes(get.suit(card))).set('suits', suits).set('ai', card => {\r\n                        let target = _status.event.getParent().target;\r\n                        let player = _status.event.player;\r\n                        if (target.hasSha() && target.getUseValue('jiu') > 0 && get.attitude(player, target) > 0)\r\n                            return 11 - get.value(card);\r\n                        return 0;\r\n                    }).set('logSkill', ['yuanjiu', Evt.target]);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.give(result.cards, Evt.target, true);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    player.useCard({ name: 'jiu' }, Evt.target);\r\n                }\r\n            },\r\n            qijian: {\r\n                audio: 4,\r\n                trigger: { global: 'useCardAfter' },\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('qijian_lost'))\r\n                        return false;\r\n                    return Evt.player == _status.currentPhase && Evt.player != player && get.color(Evt.card) == 'red' && Evt.targets && Evt.targets.length;\r\n                },\r\n                prompt2(Evt, player) {\r\n                    return '你可以跟随' + get.translation(Evt.cards) + '使用一张牌';\r\n                },\r\n                check(Evt, player) {\r\n                    return Evt.cards.length > 1 || get.value(Evt.cards[0], player) > 1;\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseToUse({\r\n                        prompt: '###' + get.translation('qijian') + '###跟随' + get.translation(trigger.player) + '使用一张牌？',\r\n                        filterCard(card, player) {\r\n                            return lib.filter.filterCard.apply(this, arguments);\r\n                        },\r\n                        addCount: false,\r\n                    }).set('ai1', card => {\r\n                        let player = _status.event.player;\r\n                        let useBy = _status.event.useBy;\r\n                        if (get.tag(card, 'damage') && useBy.group == 'qun' && player.hasZhuSkill('jushi'))\r\n                            return get.order(card) + 10;\r\n                        return get.order(card);\r\n                    }).set('useBy', trigger.player).set('logSkill', 'qijian').set('targetRequired', true);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        if (!player.hasHistory('sourceDamage', evt => evt.card.cardid == result.card.cardid && result.targets.includes(evt.player))) {\r\n                            player.draw();\r\n                            if (trigger.player.group != 'qun' || !player.hasZhuSkill('jushi'))\r\n                                player.addTempSkill('qijian_lost');\r\n                        }\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    lost: {}\r\n                }\r\n            },\r\n            yizhan: {\r\n                subSkill: {\r\n                    count: {\r\n                        trigger: {\r\n                            global: \"recoverBegin\",\r\n                        },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            if (!Evt.card)\r\n                                return false;\r\n                            if (!Evt.source || Evt.source != player)\r\n                                return false;\r\n                            if (!Evt.player.isDying())\r\n                                return false;\r\n                            if (Evt.player.storage.yizhan_mark != undefined)\r\n                                return false;\r\n                            return true;\r\n                        },\r\n                        content() {\r\n                            trigger.yizhan = true;\r\n                        },\r\n                    },\r\n                    mark: {\r\n                        mark: 'character',\r\n                        locked: true,\r\n                        intro: {\r\n                            name: 'ccm的翅膀',\r\n                            content: '已被$发动『翼展』',\r\n                        },\r\n                    }\r\n                },\r\n                audio: true,\r\n                group: ['yizhan_count'],\r\n                trigger: {\r\n                    global: \"recoverAfter\",\r\n                },\r\n                init(player) {\r\n                    player.storage.yizhan = false;\r\n                },\r\n                filter(Evt, player) {\r\n                    if (Evt.player.storage.yizhan)\r\n                        return false;\r\n                    if (Evt.player.isDying())\r\n                        return false;\r\n                    return Evt.yizhan == true;\r\n                },\r\n                skillAnimation: true,\r\n                animationColor: 'fire',\r\n                frequent: true,\r\n                logTarget: 'player',\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.player;\r\n                    player.drawTo(player.getHandcardLimit());\r\n                    'step 1';\r\n                    Evt.target.changeGroup('qun');\r\n                    Evt.target.storage.yizhan_mark = player;\r\n                    Evt.target.addSkill('yizhan_mark');\r\n                },\r\n            },\r\n            jushi: {\r\n                unique: true,\r\n                zhuSkill: true,\r\n                mod: {\r\n                    maxHandcard(player, num) {\r\n                        if (player.hasZhuSkill('jushi') && game.countPlayer(cur => cur.group && cur.group == 'qun'))\r\n                            return num + game.countPlayer(cur => cur.group && cur.group == 'qun');\r\n                    },\r\n                },\r\n                ai: {\r\n                    combo: 'qijian'\r\n                }\r\n            },\r\n            shangsheng: {\r\n                audio: 5,\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [-1, -1];\r\n                },\r\n                trigger: { player: 'phaseBegin' },\r\n                check(Evt, player) {\r\n                    return true;\r\n                },\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                frequent: true,\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseControl('dialogcontrol', ['A.于摸牌阶段多摸1张牌', 'B.于出牌阶段多出1张【杀】', 'C.于弃牌阶段手牌上限+1']).set('ai', function () {\r\n                        let player = _status.event.player;\r\n                        let controls = _status.event.controls.slice(0);\r\n                        let map = ['A.于摸牌阶段多摸1张牌', 'B.于出牌阶段多出1张【杀】', 'C.于弃牌阶段手牌上限+1'];\r\n                        if (player.storage.shangsheng[0] == -1)\r\n                            return controls.randomGet();\r\n                        else {\r\n                            if (player.storage.shangsheng[0] >= 0)\r\n                                controls.remove(map[player.storage.shangsheng[0]]);\r\n                            if (player.storage.shangsheng[1] >= 0)\r\n                                controls.remove(map[player.storage.shangsheng[1]]);\r\n                            if (controls.includes('B.于出牌阶段多出1张【杀】') && player.countCards('hs', 'sha') >= 2 && player.hasUseTarget({ name: 'sha', isCard: true }))\r\n                                return 'B.于出牌阶段多出1张【杀】';\r\n                            return controls.randomGet();\r\n                        }\r\n                    }).set('prompt', '『能力上升』：选择一项');\r\n                    'step 1';\r\n                    Evt.change = result.control;\r\n                    switch (Evt.change) {\r\n                        case 'A.于摸牌阶段多摸1张牌': {\r\n                            player.addTempSkill('shangsheng_Buff0');\r\n                            break;\r\n                        }\r\n                        case 'B.于出牌阶段多出1张【杀】': {\r\n                            player.addTempSkill('shangsheng_Buff1');\r\n                            break;\r\n                        }\r\n                        case 'C.于弃牌阶段手牌上限+1': {\r\n                            player.addTempSkill('shangsheng_Buff2');\r\n                            break;\r\n                        }\r\n                    }\r\n                    'step 2';\r\n                    Evt.map = {\r\n                        'A.于摸牌阶段多摸1张牌': 1,\r\n                        'B.于出牌阶段多出1张【杀】': 2,\r\n                        'C.于弃牌阶段手牌上限+1': 3,\r\n                    };\r\n                    if (player.storage.shangsheng[0] >= 0 && player.storage.shangsheng[0] != Evt.map[Evt.change]\r\n                        && player.storage.shangsheng[1] >= 0 && player.storage.shangsheng[1] != Evt.map[Evt.change])\r\n                        player.storage.shangsheng_Buff++;\r\n                    else if (player.storage.shangsheng_Buff > 0)\r\n                        player.storage.shangsheng_Buff--;\r\n                    'step 3';\r\n                    player.storage.shangsheng[1] = player.storage.shangsheng[0];\r\n                    player.storage.shangsheng[0] = Evt.map[Evt.change];\r\n                    player.markSkill('shangsheng_Buff');\r\n                },\r\n                group: 'shangsheng_Buff',\r\n                subSkill: {\r\n                    Buff0: {\r\n                        trigger: { player: 'phaseDrawBegin2' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return !Evt.numFixed;\r\n                        },\r\n                        content() {\r\n                            let Buff = (player.storage.shangsheng_Buff) || 1;\r\n                            trigger.num += Buff;\r\n                        },\r\n                        mark: true,\r\n                        marktext: 'A',\r\n                        intro: { name: 'Buff', content: '本回合内于摸牌阶段多摸牌' },\r\n                    },\r\n                    Buff1: {\r\n                        mod: {\r\n                            cardUsable(card, player, num) {\r\n                                let Buff = (player.storage.shangsheng_Buff) || 1;\r\n                                if (card.name == 'sha' && player.isPhaseUsing())\r\n                                    return num + Buff;\r\n                            },\r\n                        },\r\n                        mark: true,\r\n                        marktext: 'B',\r\n                        intro: { name: 'Buff', content: '本回合内于出牌阶段可以多使用【杀】' },\r\n                    },\r\n                    Buff2: {\r\n                        trigger: { player: 'phaseDiscardBegin' },\r\n                        forced: true,\r\n                        content() { },\r\n                        mod: {\r\n                            maxHandcard(player, num) {\r\n                                if (_status.event.name == 'phaseDiscard') {\r\n                                    let Buff = (player.storage.shangsheng_Buff) || 1;\r\n                                    return num += Buff;\r\n                                }\r\n                            },\r\n                        },\r\n                        mark: true,\r\n                        marktext: 'C',\r\n                        intro: { name: 'Buff', content: '本回合于弃牌阶段手牌上限上升' },\r\n                    },\r\n                    Buff: {\r\n                        init(player, skill) {\r\n                            if (!player.storage[skill])\r\n                                player.storage[skill] = 0;\r\n                        },\r\n                        marktext: \"↑↑\",\r\n                        locked: true,\r\n                        intro: {\r\n                            name: '能力值大上升↑↑',\r\n                            content: 'Buff已叠加&层',\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            jinghua: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.getStat().card.sha > 0;\r\n                },\r\n                filterCard: true,\r\n                complexCard: true,\r\n                selectCard() {\r\n                    let player = _status.event.player;\r\n                    return player.getStat().card.sha;\r\n                },\r\n                complexTarget: true,\r\n                multitarget: true,\r\n                selectTarget() {\r\n                    if (!ui.selected.cards.length)\r\n                        return [1, 1];\r\n                    return [ui.selected.cards.length, ui.selected.cards.length];\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    if (!ui.selected.cards.length)\r\n                        return false;\r\n                    return target != player;\r\n                },\r\n                discard: false,\r\n                lose: false,\r\n                check(card) {\r\n                    if (get.type(card) == 'basic')\r\n                        return 7 - get.value(card);\r\n                    return 4 - get.value(card);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.shows = cards.slice(0);\r\n                    Evt.gains = targets.slice(0);\r\n                    if (!player.storage.jinghua)\r\n                        player.storage.jinghua = [];\r\n                    player.storage.jinghua.addArray(Evt.gains);\r\n                    'step 1';\r\n                    let show = Evt.shows.shift();\r\n                    let gain = Evt.gains.shift();\r\n                    player.showCards(show, '『镜花水月』展示牌');\r\n                    gain.addSkill('jinghua2');\r\n                    player.give(show, gain, true);\r\n                    gain.markAuto('jinghua2', [show]);\r\n                    if (Evt.gains.length)\r\n                        Evt.redo();\r\n                },\r\n                ai: {\r\n                    order: 7,\r\n                    result: {\r\n                        target: -1,\r\n                    }\r\n                }\r\n            },\r\n            jinghua2: {\r\n                marktext: '镜',\r\n                intro: {\r\n                    name: '镜花水月',\r\n                    content: 'cards',\r\n                },\r\n                onremove: true,\r\n                charlotte: true,\r\n                mod: {\r\n                    cardEnabled(card, player) {\r\n                        if (player.getStorage('jinghua2').filter(jinghua => get.type2(jinghua) == get.type2(card)).length)\r\n                            return false;\r\n                    },\r\n                    cardSavable(card, player) {\r\n                        if (player.getStorage('jinghua2').filter(jinghua => get.type2(jinghua) == get.type2(card)).length)\r\n                            return false;\r\n                    },\r\n                },\r\n                trigger: {\r\n                    global: 'phaseBefore',\r\n                },\r\n                locked: true,\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return Evt.player.hasSkill('jinghua') && Evt.player.getStorage('jinghua').includes(player);\r\n                },\r\n                content() {\r\n                    player.line(trigger.player);\r\n                    trigger.player.storage.jinghua.remove(player);\r\n                    player.removeSkill('jinghua2');\r\n                },\r\n            },\r\n            shang: {\r\n                intro: {\r\n                    name: '裳',\r\n                    content: 'cards',\r\n                    onunmark: 'throw',\r\n                },\r\n                locked: true,\r\n                cardAround: true,\r\n            },\r\n            shangbei: {\r\n                group: ['shang', 'shangbei_give'],\r\n                trigger: { player: 'damageAfter' },\r\n                frequent: true,\r\n                content() {\r\n                    'step 0';\r\n                    let cards = [ui.cardPile.firstChild];\r\n                    Evt.cards = cards;\r\n                    player.showCards(Evt.cards, '『裳备』展示牌');\r\n                    'step 1';\r\n                    if (!player.getStorage('shang').includes(get.suit(Evt.cards[0], false))) {\r\n                        player.$draw(Evt.cards);\r\n                        player.markAuto('shang', game.cardsGotoSpecial(Evt.cards).cards);\r\n                        player.draw();\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    give: {\r\n                        trigger: { player: 'phaseUseBegin' },\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            return player.getStorage('shang').length > 0;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            var _a;\r\n                            Evt.cards = player.getStorage('shang');\r\n                            'step 1';\r\n                            Evt.videoId = lib.status.videoId++;\r\n                            let dialogx = ['###『裳备』：你的「裳」###选择某一类型的「裳」，然后令一名角色获得之'];\r\n                            dialogx.push(Evt.cards);\r\n                            if (player.isOnline2()) {\r\n                                player.send(function (dialogx, id) {\r\n                                    ui.create.dialog.apply(null, dialogx).videoId = id;\r\n                                }, dialogx, Evt.videoId);\r\n                            }\r\n                            Evt.dialog = ui.create.dialog.apply(null, dialogx);\r\n                            Evt.dialog.videoId = Evt.videoId;\r\n                            if (player != game.me || _status.auto) {\r\n                                Evt.dialog.style.display = 'none';\r\n                            }\r\n                            'step 2';\r\n                            let next = player.chooseButton();\r\n                            next.set('selectButton', 1);\r\n                            next.set('dialog', Evt.videoId);\r\n                            next.set('ai', function (button) {\r\n                                return get.value(button.link);\r\n                            });\r\n                            'step 3';\r\n                            if (result.bool && result.links) {\r\n                                Evt.links = result.links;\r\n                                let func = function (cards, id) {\r\n                                    let dialog = get.idDialog(id);\r\n                                    if (dialog) {\r\n                                        for (let j of cards) {\r\n                                            for (let i = 0; i < dialog.buttons.length; i++) {\r\n                                                if (get.type2(dialog.buttons[i].link) == get.type2(j)) {\r\n                                                    dialog.buttons[i].classList.add('glow');\r\n                                                }\r\n                                                else {\r\n                                                    dialog.buttons[i].classList.add('unselectable');\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                };\r\n                                if (player.isOnline2()) {\r\n                                    player.send(func, Evt.links, Evt.videoId);\r\n                                }\r\n                                else if (player == game.me && !_status.auto) {\r\n                                    func(Evt.links, Evt.videoId);\r\n                                }\r\n                                player.chooseTarget('『裳备』：令一名角色获得之').set('ai', function (target) {\r\n                                    let player = _status.event.player, effect = get.attitude(player, target) * 1.5;\r\n                                    if (target != player)\r\n                                        effect += get.recoverEffect(player, player, player);\r\n                                    return effect;\r\n                                });\r\n                            }\r\n                            else {\r\n                                if (player.isOnline2()) {\r\n                                    player.send('closeDialog', Evt.videoId);\r\n                                }\r\n                                Evt.dialog.close();\r\n                                Evt.finish();\r\n                            }\r\n                            'step 4';\r\n                            if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                                Evt.target = result.targets[0];\r\n                                let type = get.type2(Evt.links[0]);\r\n                                Evt.cards = Evt.cards.filter(card => get.type2(card) == type);\r\n                                player.unmarkAuto('shang', Evt.cards);\r\n                                player.$give(Evt.cards, Evt.target);\r\n                                Evt.target.gain(Evt.cards, 'giveAuto');\r\n                                if (Evt.target != player)\r\n                                    player.recover();\r\n                            }\r\n                            else {\r\n                                for (let i = 0; i < ui.dialog.buttons.length; i++) {\r\n                                    ui.dialog.buttons[i].classList.remove('glow');\r\n                                }\r\n                                Evt.goto(2);\r\n                            }\r\n                            'step 5';\r\n                            if (player.isOnline2()) {\r\n                                player.send('closeDialog', Evt.videoId);\r\n                            }\r\n                            Evt.dialog.close();\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            qianqing: {\r\n                trigger: { player: 'phaseBegin' },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return player.getStorage('shang').length == 0;\r\n                },\r\n                content() {\r\n                    player.damage('nosource');\r\n                }\r\n            },\r\n            shenghua: {\r\n                enable: 'phaseUse',\r\n                position: 'h',\r\n                filter(Evt, player) {\r\n                    return player.countCards('h');\r\n                },\r\n                filterCard: true,\r\n                selectCard: -1,\r\n                check(card) {\r\n                    if (get.type(card) == 'equip')\r\n                        return 10 - get.value(card);\r\n                    return 6 - get.value(card);\r\n                },\r\n                content() {\r\n                    player.draw(cards.length - player.countSkill('shenghua'));\r\n                },\r\n                ai: {\r\n                    order(item, player) {\r\n                        if (player.countCards('h', { type: 'equip' }))\r\n                            return 4;\r\n                        else\r\n                            return 1;\r\n                    },\r\n                    result: {\r\n                        player(player) {\r\n                            if (player.isTurnedOver() && player.countCards('h', { type: 'equip' }))\r\n                                return 1;\r\n                            return 1 - player.countSkill('shenghua');\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            zhanchong: {\r\n                trigger: { player: 'loseEnd' },\r\n                filter(Evt, player) {\r\n                    if (Evt.getParent().name && ['useCard', 'addJudge'].includes(Evt.getParent().name))\r\n                        return false;\r\n                    if (!Evt.visible)\r\n                        return false;\r\n                    for (let i = 0; i < Evt.hs.length; i++) {\r\n                        if (get.type(Evt.hs[i]) == 'equip')\r\n                            return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    var _a, _b;\r\n                    (_a = Evt.num) !== null && _a !== void 0 ? _a : (Evt.num = trigger.hs.filter(chong => get.type(chong) == 'equip').length);\r\n                    if (Evt.num > 0) {\r\n                        player.chooseTarget(get.prompt2('zhanchong'), function (card, player, target) {\r\n                            return target.countCards('he');\r\n                        }).set('ai', function (target) {\r\n                            let player = _status.event.player;\r\n                            if (player.isTurnedOver())\r\n                                return 4 - get.attitude(player, target);\r\n                            return -1 - get.attitude(player, target);\r\n                        });\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 1';\r\n                    if (result.bool && result.targets[0]) {\r\n                        Evt.target = result.targets[0];\r\n                        player.discardPlayerCard(result.targets[0], 'he', true).set('ai', function (button) {\r\n                            if (get.type(button.link) == 'equip')\r\n                                return 2 - get.value(button.link);\r\n                            return 3 - get.value(button.link) + get.damageEffect(_status.event.target, _status.event.player, _status.event.player);\r\n                        });\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    if (result.bool && ((_b = result.cards) === null || _b === void 0 ? void 0 : _b.length)) {\r\n                        player.turnOver();\r\n                        Evt.num--;\r\n                        if (get.type(result.cards[0]) != 'equip') {\r\n                            Evt.target.damage(player);\r\n                        }\r\n                        Evt.goto(0);\r\n                    }\r\n                },\r\n            },\r\n            baiqing: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = 0;\r\n                },\r\n                trigger: { global: 'useCard2' },\r\n                filter(Evt, player) {\r\n                    if (Evt.card.name != 'sha')\r\n                        return false;\r\n                    return true;\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    if (!player.storage.baiqing)\r\n                        player.storage.baiqing = 0;\r\n                    player.storage.baiqing++;\r\n                    player.markSkill('baiqing');\r\n                    'step 1';\r\n                    if (player.getDamagedHp() + 1 == player.storage.baiqing) {\r\n                        player.chooseBool(get.prompt2('baiqing')).ai = function () {\r\n                            return 1;\r\n                        };\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        Evt.cards = get.cards(player.storage.baiqing);\r\n                        player.showCards('『白情』亮出牌堆顶' + get.cnNumber(player.storage.baiqing) + '张牌', Evt.cards);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 3';\r\n                    let discards = [];\r\n                    if (trigger.cards) {\r\n                        Evt.cards = Evt.cards.filter(card => {\r\n                            for (let i = 0; i < trigger.cards.length; i++) {\r\n                                if (get.color(trigger.cards[i]) == get.color(card)) {\r\n                                    discards.add(card);\r\n                                    return false;\r\n                                }\r\n                            }\r\n                            return true;\r\n                        });\r\n                    }\r\n                    if (discards.length) {\r\n                        game.cardsDiscard(discards);\r\n                    }\r\n                    player.gain(Evt.cards, 'log', 'gain2');\r\n                },\r\n                marktext: 'ヰ',\r\n                mark: true,\r\n                intro: {\r\n                    content: '全场已使用#张杀',\r\n                },\r\n                group: 'baiqing_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { global: 'phaseAfter' },\r\n                        forced: true,\r\n                        silent: true,\r\n                        firstDo: true,\r\n                        priority: 42,\r\n                        content() {\r\n                            player.unmarkSkill('baiqing');\r\n                            player.storage.baiqing = 0;\r\n                        }\r\n                    },\r\n                },\r\n            },\r\n            shuangxing: {\r\n                trigger: { player: 'useCard2' },\r\n                filter(Evt, player) {\r\n                    if (get.type2(Evt.card) != 'trick')\r\n                        return false;\r\n                    return Evt.targets && Evt.targets.length && !Evt.targets.includes(player);\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    let controls = ['令你本回合使用牌无次数限制', '令其中一名目标对你使用一张【杀】，否则你获得其一张牌', '取消'];\r\n                    player.chooseControl('dialogcontrol', controls).set('ai', function () {\r\n                        let player = _status.event.player;\r\n                        if (player.countCards('hs', 'sha') > 2 && !player.hasSkill('shuangxing_chenhui') && !player.hasUnknown(2))\r\n                            return 0;\r\n                        return 1;\r\n                    }).set('prompt', get.prompt2('shuangxing'));\r\n                    'step 1';\r\n                    switch (result.control) {\r\n                        case '令你本回合使用牌无次数限制': {\r\n                            player.logSkill('shuangxing');\r\n                            player.addTempSkill('shuangxing_chenhui');\r\n                            Evt.finish();\r\n                            break;\r\n                        }\r\n                        case '令其中一名目标对你使用一张【杀】，否则你获得其一张牌': {\r\n                            player.chooseTarget(get.prompt2('shuangxing'), function (card, player, target) {\r\n                                return _status.event.targets.includes(target) && target.countCards('h');\r\n                            }).set('ai', function (target) {\r\n                                if (get.attitude(player, target) < 0) {\r\n                                    if (player.maxHp - player.hp + 1 > player.storage.baiqing)\r\n                                        return 4;\r\n                                    else\r\n                                        return 5 - target.countCards('hs');\r\n                                }\r\n                                return 0;\r\n                            }).set('targets', trigger.targets);\r\n                            break;\r\n                        }\r\n                        default: Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool && result.targets[0]) {\r\n                        let target = result.targets[0];\r\n                        Evt.target = target;\r\n                        player.logSkill('shuangxing', target);\r\n                        target.chooseToUse(function (card, player, Evt) {\r\n                            if (get.name(card) != 'sha')\r\n                                return false;\r\n                            return lib.filter.filterCard.apply(this, arguments);\r\n                        }, '『星徊』：对' + get.translation(player) + '使用一张杀，或令其获得你的一张牌').set('targetRequired', true).set('complexSelect', true).set('filterTarget', function (card, player, target) {\r\n                            if (target != _status.event.sourcex && !ui.selected.targets.includes(_status.event.sourcex))\r\n                                return false;\r\n                            return lib.filter.targetEnabled2.apply(this, arguments);\r\n                        }).set('sourcex', player);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 3';\r\n                    if (result.bool == false && Evt.target.countGainableCards(player, 'he') > 0) {\r\n                        player.gainPlayerCard(Evt.target, 'he', true);\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    chenhui: {\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '本回合使用牌无次数限制',\r\n                        },\r\n                        mod: {\r\n                            cardUsable(card, player, num) {\r\n                                return Infinity;\r\n                            },\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            nisheng: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                trigger: { global: 'phaseEnd' },\r\n                filter(Evt, player) {\r\n                    if (Evt.skill)\r\n                        return false;\r\n                    return player.countCards('h', card1 => {\r\n                        let num = get.number(card1, player);\r\n                        if (player.getStorage('nisheng').includes(num))\r\n                            return false;\r\n                        return player.countCards('h', card2 => card1 != card2 && num == get.number(card2, player));\r\n                    }) >= 2;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseCard(get.prompt2('nisheng'), 'h', 2, function (card, player) {\r\n                        let num = get.number(card);\r\n                        if (player.getStorage('nisheng').includes(num))\r\n                            return false;\r\n                        if (ui.selected.cards.length)\r\n                            return num == get.number(ui.selected.cards[0]);\r\n                        return true;\r\n                    }).ai = get.unuseful2;\r\n                    'step 1';\r\n                    if (result.bool && result.cards[0]) {\r\n                        player.showCards(result.cards, '拟声');\r\n                        player.storage.nisheng.add(get.number(result.cards[0]));\r\n                        player.markSkill('nisheng');\r\n                        player.insertPhase();\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                },\r\n                intro: {\r\n                    content: '已使用过的点数：#',\r\n                },\r\n            },\r\n            jingyan: {\r\n                trigger: { player: 'damageEnd' },\r\n                filter(Evt, player) {\r\n                    return Evt.source && Evt.source.isIn() && Evt.source.countCards('he') / 2 > 0;\r\n                },\r\n                check(Evt, player) {\r\n                    return Evt.source.countCards('he') / 2 >= 2 || player.isTurnedOver();\r\n                },\r\n                logTarget: 'source',\r\n                content() {\r\n                    'step 0';\r\n                    player.turnOver();\r\n                    'step 1';\r\n                    player.gainPlayerCard(trigger.source, true, 'he', Math.ceil(trigger.source.countCards('he') / 2));\r\n                },\r\n                ai: {\r\n                    maixie: true,\r\n                    skillTagFilter(player) {\r\n                        return player.isTurnedOver();\r\n                    },\r\n                }\r\n            },\r\n            fantuan: {\r\n                trigger: { player: 'useCard2' },\r\n                direct: true,\r\n                filter(Evt) {\r\n                    return get.type(Evt.card) == 'delay';\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseTarget(get.prompt2('fantuan')).set('ai', function (target) {\r\n                        let player = _status.event.player;\r\n                        return get.recoverEffect(target, player, player) + get.attitude(player, target);\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool && result.targets[0]) {\r\n                        result.targets[0].recover();\r\n                        result.targets[0].draw();\r\n                    }\r\n                },\r\n            },\r\n            shengang: {\r\n                group: ['shengang_judge', 'shengang_useCard'],\r\n                subSkill: {\r\n                    judge: {\r\n                        trigger: { global: ['judgeAfter'] },\r\n                        filter(Evt, player) {\r\n                            if (!game.filterPlayer(cur => get.distance(player, cur, 'pure') == 1, [player]).includes(Evt.player))\r\n                                return false;\r\n                            return Evt.card && get.type(Evt.card) == 'delay' && get.position(Evt.card) == 'd';\r\n                        },\r\n                        prompt2(Evt, player) {\r\n                            return '获得' + get.translation(Evt.card);\r\n                        },\r\n                        check(Evt, player) {\r\n                            return get.value(Evt.card) > 3;\r\n                        },\r\n                        round: 2,\r\n                        content() {\r\n                            player.gain(trigger.card, 'gain2', 'log');\r\n                        },\r\n                    },\r\n                    useCard: {\r\n                        trigger: { global: ['useCardAfter'] },\r\n                        filter(Evt, player) {\r\n                            if (!game.filterPlayer(cur => get.distance(player, cur, 'pure') == 1, [player]).includes(Evt.player))\r\n                                return false;\r\n                            return Evt.cards && Evt.cards.filterInD().length;\r\n                        },\r\n                        prompt2(Evt, player) {\r\n                            return '获得' + get.translation(Evt.cards.filterInD());\r\n                        },\r\n                        check(Evt, player) {\r\n                            return get.value(Evt.cards.filterInD()) > 3;\r\n                        },\r\n                        round: 2,\r\n                        content() {\r\n                            player.gain(trigger.cards.filterInD(), 'gain2', 'log');\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            dan: {\r\n                locked: true,\r\n                marktext: '弹',\r\n                intro: {\r\n                    content: 'cardCount',\r\n                },\r\n                cardAround: true\r\n            },\r\n            sbliedan: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                trigger: { player: 'useCardToPlayered' },\r\n                filter(Evt, player) {\r\n                    return get.name(Evt.card) == 'sha' && Evt.target.countCards('he');\r\n                },\r\n                logTarget: 'target',\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.target;\r\n                    Evt.num = Math.min(game.roundNumber || 1, 7);\r\n                    Evt.target.chooseCard('he', Evt.num, true, '『烈弹』：将' + get.cnNumber(Evt.num) + '张牌置为「弹」');\r\n                    'step 1';\r\n                    if (result.bool && result.cards.length) {\r\n                        Evt.target.lose(result.cards, ui.special, 'toStorage');\r\n                        target.addSkill('sbliedan2');\r\n                        target.storage.sbliedan2 = Evt.num;\r\n                        player.markAuto('dan', result.cards);\r\n                    }\r\n                },\r\n                group: ['dan', 'sbliedan_gainBy'],\r\n                subSkill: {\r\n                    gainBy: {\r\n                        trigger: { player: 'phaseEnd' },\r\n                        forced: true,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            return player.storage.dan && player.storage.dan.length > 0;\r\n                        },\r\n                        content() {\r\n                            game.log(player, '收回了' + get.cnNumber(player.gain(player.storage.dan, 'draw', 'fromStorage').cards.length) + '张「弹」');\r\n                            player.storage.dan.length = 0;\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            sbliedan2: {\r\n                trigger: { global: 'phaseDiscardEnd' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return player.storage.sbliedan2;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.num = player.storage.sbliedan2;\r\n                    let cards = [];\r\n                    game.filterPlayer(cur => {\r\n                        if (cur.getStorage('dan').length)\r\n                            cards.addArray(cur.getStorage('dan'));\r\n                    });\r\n                    if (cards.length) {\r\n                        player.chooseCardButton(cards, Evt.num, '『烈弹』：可以收回' + get.cnNumber(Evt.num) + '张「弹」');\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 1';\r\n                    if (result.bool && result.links.length) {\r\n                        game.filterPlayer(cur => {\r\n                            if (cur.getStorage('dan').length)\r\n                                cur.unmarkAuto('dan', result.links);\r\n                        });\r\n                        game.log(player, '收回了' + get.cnNumber(player.gain(result.links, 'draw', 'fromStorage').cards.length) + '张〖破军〗牌');\r\n                        delete player.storage.sbliedan2;\r\n                        player.removeSkill('sbliedan2');\r\n                    }\r\n                },\r\n                intro: {\r\n                    onunmark: 'throw',\r\n                    content: 'cardCount',\r\n                },\r\n            },\r\n            buqiang: {\r\n                trigger: { global: 'changeHp' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return Evt.player.hp == 1 && player.canUse('sha', Evt.player, false) && (player.hasSha() || _status.connectMode && player.countCards('hs'));\r\n                },\r\n                content() {\r\n                    Evt.target = trigger.player;\r\n                    player.chooseToUse(get.prompt2('buqiang', Evt.target), function (card, player, Evt) {\r\n                        if (get.name(card) != 'sha')\r\n                            return false;\r\n                        return lib.filter.filterCard.apply(this, arguments);\r\n                    }, Evt.target, -1).set('addCount', false).set('logSkill', 'buqiang');\r\n                },\r\n            },\r\n            pphpanfeng: {\r\n                trigger: { player: ['phaseUseBegin', 'damageAfter'] },\r\n                filter(Evt, player) {\r\n                    return !player.hasSkill('pphpanfeng_used');\r\n                },\r\n                content() {\r\n                    player.judge(card => {\r\n                        if (get.color(card) == 'red')\r\n                            return 2;\r\n                        return 0;\r\n                    }).callback = lib.skill.pphpanfeng.callback;\r\n                },\r\n                callback() {\r\n                    'step 0';\r\n                    var _a;\r\n                    if (Evt.judgeResult.color == 'red') {\r\n                        player.chooseTarget('『攀峰』：对体力最多的角色造成一点伤害', true, function (card, player, target) {\r\n                            return target.isMaxHp();\r\n                        }).set('ai', function (target) {\r\n                            let player = _status.event.player;\r\n                            return get.damageEffect(target, player, player);\r\n                        });\r\n                    }\r\n                    'step 1';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        Evt.target = result.targets[0];\r\n                        player.logSkill('pphpanfeng', Evt.target);\r\n                        Evt.target.damage('nocard');\r\n                    }\r\n                },\r\n                group: 'pphpanfeng_usedBy',\r\n                subSkill: {\r\n                    usedBy: {\r\n                        trigger: { global: 'dyingAfter' },\r\n                        forced: true,\r\n                        popup: false,\r\n                        filter(Evt, player) {\r\n                            return Evt.player.isAlive() && Evt.reason && Evt.reason.getParent().name == 'judgeCallback'\r\n                                && Evt.reason.getParent(3).name == 'pphpanfeng' && Evt.reason.getParent(3).player == player;\r\n                        },\r\n                        content() {\r\n                            player.addTempSkill('pphpanfeng_used');\r\n                        }\r\n                    },\r\n                    used: {\r\n                        mark: true,\r\n                        marktext: '峰',\r\n                        intro: {\r\n                            content: '不能发动『攀峰』'\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            lanyue: {\r\n                trigger: { global: 'damageSource' },\r\n                filter(Evt, player) {\r\n                    if (Evt._notrigger.includes(Evt.player))\r\n                        return false;\r\n                    if (!player.countCards('h'))\r\n                        return false;\r\n                    return (Evt.card && Evt.card.name == 'sha' && Evt.getParent().name == 'sha' &&\r\n                        Evt.source.isAlive());\r\n                },\r\n                direct: true,\r\n                limited: true,\r\n                skillAnimation: true,\r\n                animationColor: 'metal',\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.source;\r\n                    Evt.num = trigger.num;\r\n                    let check = get.attitude(player, Evt.target) > 0 && (!Evt.target.countCards('h') || Evt.num >= 2);\r\n                    player.chooseToDiscard(get.prompt2('lanyue')).set('ai', card => {\r\n                        let check = _status.event.check;\r\n                        if (!check)\r\n                            return 0;\r\n                        return get.unuseful2(card);\r\n                    }).set('check', check);\r\n                    'step 1';\r\n                    if (result.bool && result.cards) {\r\n                        player.logSkill('lanyue', Evt.target);\r\n                        player.awakenSkill('lanyue');\r\n                        Evt.target.gainMaxHp();\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    let list = [player];\r\n                    list.add(Evt.target);\r\n                    game.asyncDraw(list, Evt.num);\r\n                }\r\n            },\r\n            shenghuo: {\r\n                audio: 3,\r\n                init(player, skill) {\r\n                    player.markSkill('shenghuo');\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = 0;\r\n                },\r\n                enable: 'phaseUse',\r\n                position: 'h',\r\n                filter(Evt, player) {\r\n                    return !player.getStat('skill').shenghuo || player.getStat('skill').shenghuo < player.storage.shenghuo + 1;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.topCards = get.cards(player.storage.shenghuo + 1);\r\n                    Evt.bottomCards = get.bottomCards(player.storage.shenghuo + 1);\r\n                    Evt.bottomCards.removeArray(Evt.topCards);\r\n                    let cards = Evt.topCards.concat(Evt.bottomCards);\r\n                    player.chooseButton([0, Infinity], true, ['『圣火』：按顺序选择置于牌堆另一端的牌（先选择的在外侧）', '牌堆顶', [Evt.topCards, 'card'], '牌堆底', [Evt.bottomCards, 'card']]).set('ai', function (button) {\r\n                        let player = _status.event.player, now = _status.currentPhase, next = now.getNext();\r\n                        let att = get.attitude(player, next), card = button.link;\r\n                        let bottomCards = _status.event.bottomCards;\r\n                        let judge = next.getCards('j')[ui.selected.buttons.filter(buttonx => bottomCards.includes(buttonx.link)).length];\r\n                        if (judge) {\r\n                            if (bottomCards.includes(card))\r\n                                return get.judge(judge)(card) * att;\r\n                            else\r\n                                return -get.judge(judge)(card) * att;\r\n                        }\r\n                        if (bottomCards.includes(card))\r\n                            return next.getUseValue(card) * att;\r\n                        return -next.getUseValue(card) * att;\r\n                    }).set('bottomCards', Evt.bottomCards);\r\n                    'step 1';\r\n                    if (result.bool && result.links) {\r\n                        let links = result.links.slice(0);\r\n                        let top = Evt.topCards.slice(0).removeArray(links), bottom = Evt.bottomCards.slice(0).removeArray(links);\r\n                        for (let i = 0; i < links.length; i++) {\r\n                            if (Evt.topCards.includes(links[i]))\r\n                                bottom.push(links[i]);\r\n                            if (Evt.bottomCards.includes(links[i]))\r\n                                top.unshift(links[i]);\r\n                        }\r\n                        for (let i = top.length - 1; i > -1; i--) {\r\n                            ui.cardPile.insertBefore(top[i], ui.cardPile.firstChild);\r\n                        }\r\n                        for (let i = 0; i < bottom.length; i++) {\r\n                            ui.cardPile.appendChild(bottom[i]);\r\n                        }\r\n                        player.popup(get.cnNumber(top.length) + '上' + get.cnNumber(bottom.length) + '下');\r\n                        game.log(player, '将' + get.cnNumber(top.length) + '张牌置于牌堆顶');\r\n                        game.updateRoundNumber();\r\n                        game.delay(2);\r\n                    }\r\n                },\r\n                marktext: 'Nya',\r\n                mark: true,\r\n                intro: {\r\n                    content: '上次受到的伤害值为#',\r\n                },\r\n                group: 'shenghuo_change',\r\n                subSkill: {\r\n                    change: {\r\n                        trigger: { player: 'damage' },\r\n                        filter(Evt, player) {\r\n                            return Evt.num > 0;\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            player.storage.shenghuo = trigger.num;\r\n                            player.markSkill('shenghuo');\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    order(item, player) {\r\n                        if (player.countCards('hs', card => get.tag(card, 'draw')))\r\n                            return 10;\r\n                        else\r\n                            return 1;\r\n                    },\r\n                    result: {\r\n                        player(player) {\r\n                            return 1;\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            dipo: {\r\n                audio: 1,\r\n                trigger: {\r\n                    player: 'drawBegin'\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.isDamaged();\r\n                },\r\n                forced: true,\r\n                firstDo: true,\r\n                content() {\r\n                    trigger.bottom = true;\r\n                    trigger.num++;\r\n                },\r\n                ai: {\r\n                    maixie: true,\r\n                    maixie_hp: true,\r\n                    skillTagFilter(player) {\r\n                        return player.isHealthy();\r\n                    },\r\n                    threaten(player, target) {\r\n                        if (target.hp == target.maxHp)\r\n                            return 0.5;\r\n                        return 1.2;\r\n                    },\r\n                    effect: {\r\n                        target(card, player, target) {\r\n                            if (get.tag(card, 'draw') && target.isDamaged())\r\n                                return [1, 1];\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            miaoche: {\r\n                audio: 2,\r\n                trigger: { global: 'loseAfter' },\r\n                filter(Evt, player) {\r\n                    if (!player.hasZhuSkill('miaoche'))\r\n                        return false;\r\n                    return Evt.type == 'discard' && Evt.getParent('phaseDiscard').player == Evt.player && Evt.player.isYingV() && Evt.cards2.filterInD('d').length > 0;\r\n                },\r\n                zhuSkill: true,\r\n                direct: true,\r\n                logTarget: 'player',\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.player;\r\n                    if (trigger.delay === false)\r\n                        game.delay();\r\n                    let cards = trigger.cards2.filterInD('d');\r\n                    player.chooseCardButton(cards, '『喵车』：是否获得其中的一张牌？').set('ai', function (button) {\r\n                        return get.value(button.link, _status.event.player);\r\n                    });\r\n                    \"step 1\";\r\n                    if (result.bool) {\r\n                        player.logSkill('miaoche', Evt.target);\r\n                        player.gain(result.links[0], 'gain2');\r\n                        game.delayx();\r\n                    }\r\n                },\r\n            },\r\n            haosun: {\r\n                audio: 3,\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                trigger: {\r\n                    player: 'phaseBegin'\r\n                },\r\n                filter(Evt, player) {\r\n                    return true;\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    let controls = ['回复1点体力以重置此技能并修改『伴猫』，然后你本回合每次摸牌少摸一张', '声明一种你可以使用的基本牌并令你不能使用之，然后你本回合每次摸牌额外摸一张', '取消'];\r\n                    player.chooseControl('dialogcontrol', controls).set('ai', function () {\r\n                        let player = _status.event.player;\r\n                        if (player.isDamaged() || player.getStorage('haosun').length > 1)\r\n                            return 0;\r\n                        return 1;\r\n                    }).set('prompt', get.prompt2('haosun'));\r\n                    'step 1';\r\n                    switch (result.control) {\r\n                        case '回复1点体力以重置此技能并修改『伴猫』，然后你本回合每次摸牌少摸一张': {\r\n                            player.logSkill('haosun');\r\n                            player.recover();\r\n                            player.storage.banmao = true;\r\n                            player.storage.haosun = [];\r\n                            player.addTempSkill('haosun_drop');\r\n                            player.unmarkSkill('haosun');\r\n                            Evt.finish();\r\n                            break;\r\n                        }\r\n                        case '声明一种你可以使用的基本牌并令你不能使用之，然后你本回合每次摸牌额外摸一张': {\r\n                            player.chooseControl(get.inpile('basic', card => lib.filter.cardEnabled({ name: card }, player, 'forceEnable'))).set('prompt', '声明一种你可以使用的基本牌并令你不能使用之').set('choice', get.inpile('basic', card => {\r\n                                if (player.hasCard(card))\r\n                                    return false;\r\n                                return lib.filter.cardEnabled({ name: card }, player, 'forceEnable');\r\n                            })).set('ai', function () {\r\n                                let player = _status.event.player;\r\n                                let controls = _status.event.controls.slice(0);\r\n                                if (_status.event.choice && _status.event.choice.length)\r\n                                    return _status.event.choice.randomGet();\r\n                                if (controls.includes('qi'))\r\n                                    return 'qi';\r\n                                if (controls.includes('tao') && player.hp >= 2)\r\n                                    return 'tao';\r\n                                if (controls.includes('jiu'))\r\n                                    return 'jiu';\r\n                                return controls.randomGet();\r\n                            });\r\n                            break;\r\n                        }\r\n                        default: Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    if (result.control) {\r\n                        player.logSkill('haosun');\r\n                        player.popup(result.control);\r\n                        player.storage.haosun.add(result.control);\r\n                        player.addTempSkill('haosun_plus');\r\n                        player.markSkill('haosun');\r\n                        game.delayx();\r\n                    }\r\n                },\r\n                mod: {\r\n                    cardEnabled(card, player) {\r\n                        if (player.getStorage('haosun').includes(get.name(card)))\r\n                            return false;\r\n                    },\r\n                    cardSavable(card, player) {\r\n                        if (player.getStorage('haosun').includes(get.name(card)))\r\n                            return false;\r\n                    }\r\n                },\r\n                mark: true,\r\n                intro: {\r\n                    content: '已禁用的基本牌：$',\r\n                },\r\n                subSkill: {\r\n                    drop: {\r\n                        trigger: {\r\n                            player: 'drawBegin'\r\n                        },\r\n                        forced: true,\r\n                        firstDo: true,\r\n                        content() {\r\n                            trigger.num--;\r\n                        },\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '摸牌量-1',\r\n                        },\r\n                        ai: {\r\n                            effect: {\r\n                                target(card, player, target) {\r\n                                    if (get.tag(card, 'draw'))\r\n                                        return 0;\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    plus: {\r\n                        trigger: {\r\n                            player: 'drawBegin'\r\n                        },\r\n                        forced: true,\r\n                        firstDo: true,\r\n                        content() {\r\n                            trigger.num++;\r\n                        },\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '摸牌量+1',\r\n                        },\r\n                        ai: {\r\n                            effect: {\r\n                                target(card, player, target) {\r\n                                    if (get.tag(card, 'draw'))\r\n                                        return [1, 1];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            banmao: {\r\n                audio: 2,\r\n                trigger: {\r\n                    player: 'damageEnd', source: 'damageEnd'\r\n                },\r\n                filter(Evt, player) {\r\n                    return Evt.source && Evt.card && get.name(Evt.card) == 'sha';\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    trigger.source.draw();\r\n                },\r\n                mod: {\r\n                    cardEnabled(card, player) {\r\n                        if (['shan', 'jiu'].includes(get.name(card)) && player.isHealthy() && player.storage.banmao !== true)\r\n                            return false;\r\n                    },\r\n                    cardSavable(card, player) {\r\n                        if (['shan', 'jiu'].includes(get.name(card)) && player.isHealthy() && player.storage.banmao !== true)\r\n                            return false;\r\n                    }\r\n                },\r\n                derivation: 'banmao_rewrite',\r\n            },\r\n            exiao: {\r\n                trigger: { player: 'useCard' },\r\n                frequent: true,\r\n                filter(Evt) {\r\n                    return get.type(Evt.card) == 'trick';\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.judge(card => {\r\n                        if (get.color(card) == 'black')\r\n                            return 4;\r\n                        return -1;\r\n                    });\r\n                    'step 1';\r\n                    if (result.judge > 0) {\r\n                        trigger.nowuxie = true;\r\n                        game.delayx();\r\n                        if (get.position(result.card) == 'd')\r\n                            player.gain(result.card, 'gain2', 'log');\r\n                    }\r\n                },\r\n            },\r\n            jinmei: {\r\n                audio: 2,\r\n                trigger: { global: 'phaseBegin' },\r\n                round: 1,\r\n                priority: 996,\r\n                filter(Evt, player) {\r\n                    return Evt.player != player && player.countCards('he', { color: 'black' });\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.player;\r\n                    let goon = get.attitude(player, Evt.target) < 0 && !Evt.target.hasJudge('lebu') && !Evt.target.hasJudge('bingliang');\r\n                    let next = player.chooseCard(get.prompt2('jinmei'), 'he', { color: 'black' }).set('goon', goon).set('ai', card => {\r\n                        if (!goon)\r\n                            return 0;\r\n                        return 5 - get.value(card);\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.logSkill('jinmei', Evt.target);\r\n                        Evt.target.gain(result.cards, player, 'giveAuto');\r\n                        Evt.target.addTempSkill('jinmei_drop');\r\n                    }\r\n                },\r\n                ai: {\r\n                    expose: 0.1,\r\n                },\r\n                subSkill: {\r\n                    drop: {\r\n                        trigger: {\r\n                            player: 'drawBegin'\r\n                        },\r\n                        forced: true,\r\n                        firstDo: true,\r\n                        content() {\r\n                            trigger.num--;\r\n                        },\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '摸牌量-1',\r\n                        },\r\n                        ai: {\r\n                            effect: {\r\n                                target(card, player, target) {\r\n                                    if (get.tag(card, 'draw'))\r\n                                        return 0;\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            zhexun: {\r\n                group: 'zhexun0',\r\n                audio: 3,\r\n            },\r\n            zhexun0: {\r\n                trigger: { player: 'useCard2' },\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    let card = Evt.card;\r\n                    let info = get.info(card);\r\n                    if (info.allowMultiple == false)\r\n                        return false;\r\n                    let history = player.getHistory('useCard', evt => get.color(Evt.card) == get.color(evt.card)).length;\r\n                    return history > 1 && history == player.getHistory('useCard').length;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    trigger.directHit.addArray(game.players);\r\n                    'step 1';\r\n                    if (get.type2(trigger.card) != 'equip') {\r\n                        let prompt2 = '为' + get.translation(trigger.card) + '额外指定一个目标';\r\n                        player.chooseTarget(get.prompt(Evt.name), function (card, player, target) {\r\n                            if (_status.event.targets.includes(target))\r\n                                return false;\r\n                            return lib.filter.targetEnabled2(_status.event.card, player, target) && lib.filter.targetInRange(_status.event.card, player, target);\r\n                        }).set('prompt2', prompt2).set('ai', function (target) {\r\n                            let player = _status.event.player;\r\n                            return get.effect(target, _status.event.card, player, player);\r\n                        }).set('targets', trigger.targets).set('card', trigger.card);\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        player.line(result.targets);\r\n                        game.log(result.targets, '成为了', trigger.card, '的额外目标');\r\n                        trigger.targets.addArray(result.targets);\r\n                    }\r\n                },\r\n            },\r\n            yuci: {\r\n                audio: 2,\r\n                trigger: {\r\n                    player: 'drawBegin'\r\n                },\r\n                forced: true,\r\n                firstDo: true,\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('yuci_used'))\r\n                        return false;\r\n                    let another = player.next;\r\n                    let sex = false;\r\n                    while (another != player) {\r\n                        if (sex != false && another.sex != sex)\r\n                            return false;\r\n                        sex = another.sex;\r\n                        another = another.next;\r\n                    }\r\n                    return true;\r\n                },\r\n                content() {\r\n                    trigger.num++;\r\n                    player.addTempSkill('yuci_used', 'phaseNext');\r\n                },\r\n                subSkill: {\r\n                    used: {}\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target) {\r\n                            if (get.tag(card, 'draw') && !target.hasSkill('yuci_used'))\r\n                                return [1, 1];\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            kuangbiao: {\r\n                intro: {\r\n                    mark(dialog, storage, player) {\r\n                        if (player.countCards('s', card => card.hasGaintag('kuangbiao')))\r\n                            dialog.addAuto(player.getCards('s', card => card.hasGaintag('kuangbiao')));\r\n                    },\r\n                    markcount(storage, player) {\r\n                        return player.countCards('s', card => card.hasGaintag('kuangbiao'));\r\n                    },\r\n                    onunmark(storage, player) {\r\n                        let cards = player.getCards('s', card => card.hasGaintag('kuangbiao'));\r\n                        if (cards.length) {\r\n                            player.lose(cards, ui.discardPile);\r\n                            player.$throw(cards, 1000);\r\n                            game.log(cards, '进入了弃牌堆');\r\n                        }\r\n                    },\r\n                },\r\n                cardAround(player) {\r\n                    return player.getCards('s', card => card.hasGaintag('kuangbiao'));\r\n                },\r\n                trigger: { player: 'useCardAfter' },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    return get.suit(Evt.card) == 'heart' && player.hasHistory('lose', evt => {\r\n                        if (evt.getParent() != Evt)\r\n                            return false;\r\n                        if (JSON.stringify(evt.hs) == JSON.stringify(Evt.cards))\r\n                            return true;\r\n                        return false;\r\n                    });\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    if (player.hp != 1)\r\n                        player.loseHp();\r\n                    'step 1';\r\n                    player.directgains(trigger.cards, null, 'kuangbiao');\r\n                    player.markSkill('kuangbiao');\r\n                },\r\n                mod: {\r\n                    cardname(card, player, name) {\r\n                        if (get.suit(card) == 'heart' && get.position(card) == 'h')\r\n                            return 'wuzhong';\r\n                    },\r\n                    cardEnabled2(cardx, player) {\r\n                        if (player.countCards('s', card => card.hasGaintag('kuangbiao'))) {\r\n                            if (get.position(cardx) == 's' && cardx.hasGaintag('kuangbiao') && !player.isDamaged())\r\n                                return false;\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        player(card, player, target) {\r\n                            if (get.suit(card) == 'heart' && get.position(card) == 'h') {\r\n                                if (player.hp == 1)\r\n                                    return [1, 0.1, 1, 0];\r\n                                return [1, (player.hp - 3) * 2, 1, 0];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            leizhu: {\r\n                trigger: { player: 'useCard2' },\r\n                filter(Evt, player) {\r\n                    return get.type2(Evt.card) == 'trick';\r\n                },\r\n                direct: true,\r\n                intro: {\r\n                    name2: 'R18',\r\n                    content: 'mark',\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.addMark('leizhu', 1, false);\r\n                    if (player.countMark('leizhu') == 3) {\r\n                        player.removeMark('leizhu', 3, false);\r\n                        let card = trigger.card;\r\n                        let info = get.info(card);\r\n                        if (info.allowMultiple == false || !trigger.targets\r\n                            || !game.hasPlayer(cur => !trigger.targets.includes(cur) && lib.filter.targetEnabled2(card, player, cur)))\r\n                            Evt.finish();\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 1';\r\n                    let prompt2 = '为' + get.translation(trigger.card) + '增加一个目标';\r\n                    player.chooseTarget(get.prompt(Evt.name), function (card, player, target) {\r\n                        if (_status.event.targets.includes(target))\r\n                            return false;\r\n                        return lib.filter.targetEnabled2(_status.event.card, player, target) && lib.filter.targetInRange(_status.event.card, player, target);\r\n                    }).set('prompt2', prompt2).set('ai', function (target) {\r\n                        let trigger = _status.event.getTrigger();\r\n                        let player = _status.event.player;\r\n                        if (player.hp == 1)\r\n                            return false;\r\n                        return get.effect(target, trigger.card, player, player) + get.damageEffect(target, player, player);\r\n                    }).set('targets', trigger.targets).set('card', trigger.card);\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        if (!Evt.isMine() && !Evt.isOnline())\r\n                            game.delayx();\r\n                        Evt.targets = result.targets;\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 3';\r\n                    if (Evt.targets) {\r\n                        player.logSkill('leizhu', Evt.targets);\r\n                        trigger.targets.addArray(Evt.targets);\r\n                        player.damage();\r\n                        Evt.targets[0].damage();\r\n                    }\r\n                },\r\n            },\r\n            tonggan: {\r\n                unique: true,\r\n                trigger: {\r\n                    global: 'drawBegin'\r\n                },\r\n                zhuSkill: true,\r\n                forced: true,\r\n                firstDo: true,\r\n                filter(Evt, player) {\r\n                    if (!player.hasZhuSkill('tonggan'))\r\n                        return false;\r\n                    if (player.hasSkill('tonggan_used'))\r\n                        return false;\r\n                    return Evt.player.group && Evt.player.group == player.group;\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    Evt.target = trigger.player;\r\n                    Evt.target.addTempSkill('tonggan_used', 'phaseNext');\r\n                    if (game.roundNumber % 2 == 1)\r\n                        return trigger.num--;\r\n                    if (game.roundNumber % 2 != 1)\r\n                        return trigger.num++;\r\n                },\r\n                subSkill: {\r\n                    used: {}\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target) {\r\n                            if (get.tag(card, 'draw') && !target.hasSkill('tonggan_used')) {\r\n                                if (game.roundNumber % 2 == 1)\r\n                                    return [0.2, 0];\r\n                                if (game.roundNumber % 2 != 1)\r\n                                    return [1, 2];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            yingling: new toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return !player.hasSkill('yingling_used');\r\n                },\r\n                content() {\r\n                    player.addTempSkill('yingling_used', 'phaseNext');\r\n                    player.judge(card => {\r\n                        if (get.color(card) === 'red')\r\n                            return 1;\r\n                        return 0;\r\n                    }).callback = lib.skill.yingling.callback;\r\n                },\r\n                callback() {\r\n                    let evt = _status.event.getParent('yingling');\r\n                    if (Evt.judgeResult.color == 'red') {\r\n                        evt.getTrigger().num++;\r\n                    }\r\n                },\r\n                subSkill: { used: new toSkill('mark') },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target) {\r\n                            if (get.tag(card, 'draw') && !target.hasSkill('yingling_used'))\r\n                                return [1, 0.5];\r\n                        }\r\n                    }\r\n                }\r\n            }, 'forced', 'firstDo').setT('drawBegin'),\r\n            duchun: new toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return get.position(Evt.result.card, true) == 'o';\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    Evt.card = trigger.result.card;\r\n                    player.chooseTarget(get.prompt2('duchun'), function (card, player, target) {\r\n                        return true;\r\n                    }).set('ai', target => {\r\n                        let { player, card } = _status.event.getParent();\r\n                        return get.attitude(player, target) * (get.value(card, 'raw', target) + (target.storage.duchun_drop > 1 ? 1 : -2));\r\n                    });\r\n                    'step 1';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        Evt.target = result.targets[0];\r\n                        player.logSkill('duchun', Evt.target);\r\n                        Evt.target.gain(Evt.card, 'gain2');\r\n                        if (!Evt.target.storage.duchun_drop) {\r\n                            Evt.target.storage.duchun_drop = 1;\r\n                            Evt.target.addSkill('duchun_drop');\r\n                        }\r\n                        else {\r\n                            Evt.target.storage.duchun_drop++;\r\n                            Evt.target.markSkill('duchun_drop');\r\n                        }\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    drop: new toSkill('mark', {\r\n                        content() {\r\n                            trigger.num -= player.storage.duchun_drop;\r\n                            player.removeSkill('duchun_drop');\r\n                        },\r\n                        intro: {\r\n                            content: '摸牌量-#',\r\n                        },\r\n                        ai: {\r\n                            effect: {\r\n                                target(card, player, target) {\r\n                                    if (get.tag(card, 'draw'))\r\n                                        return 0;\r\n                                }\r\n                            }\r\n                        }\r\n                    }, 'mark', 'onremove', 'forced', 'firstDo').setT('drawBefore'),\r\n                }\r\n            }, 'direct').setT('judgeEnd'),\r\n            jiace: {\r\n                trigger: { target: 'useCardToTarget' },\r\n                filter(Evt, player) {\r\n                    if (!Evt.targets || !Evt.targets.includes(player))\r\n                        return false;\r\n                    if (Evt.player == player)\r\n                        return false;\r\n                    let info = get.info(Evt.card);\r\n                    if (info.allowMultiple == false || info.multitarget)\r\n                        return false;\r\n                    if (get.color(Evt.card) != 'black')\r\n                        return false;\r\n                    if (Evt.targets.length >= 1)\r\n                        return true;\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.player;\r\n                    player.chooseCard('h', get.prompt2('jiace'), { suit: get.suit(trigger.card) }).ai = get.unuseful2;\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.logSkill('jiace', Evt.target);\r\n                        player.give(result.cards, Evt.target, true);\r\n                        if (!player.hasSkill('jiace_used')) {\r\n                            if (!trigger.getParent().addedSkill)\r\n                                trigger.getParent().addedSkill = [];\r\n                            trigger.getParent().addedSkill.add('jiace');\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    player.addTempSkill('jiace_used');\r\n                    let prompt2 = '为' + get.translation(trigger.card) + '增加或减少一个目标';\r\n                    player.chooseTarget(get.prompt('jiace'), function (card, player, target) {\r\n                        let source = _status.event.source;\r\n                        if (_status.event.targets.includes(target))\r\n                            return true;\r\n                        return lib.filter.targetEnabled2(_status.event.card, source, target) && lib.filter.targetInRange(_status.event.card, source, target);\r\n                    }).set('prompt2', prompt2).set('ai', target => {\r\n                        let player = _status.event.player, source = _status.event.source;\r\n                        return get.effect(target, _status.event.card, source, player) * (_status.event.targets.includes(target) ? -1 : 1);\r\n                    }).set('targets', trigger.targets).set('card', trigger.card).set('source', Evt.target);\r\n                    'step 3';\r\n                    if (result.bool) {\r\n                        if (!Evt.isMine() && !Evt.isOnline())\r\n                            game.delayx();\r\n                        Evt.targets = result.targets;\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 4';\r\n                    if (Evt.targets) {\r\n                        player.logSkill('jiace', Evt.targets);\r\n                        if (trigger.targets.includes(Evt.targets[0]))\r\n                            trigger.targets.removeArray(Evt.targets);\r\n                        else\r\n                            trigger.targets.addArray(Evt.targets);\r\n                    }\r\n                },\r\n                group: ['jiace_gainBy'],\r\n                subSkill: {\r\n                    used: {},\r\n                    gainBy: {\r\n                        trigger: { global: 'useCardAfter' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            let cards = Evt.cards.filterInD();\r\n                            return cards.length && Evt.addedSkill && Evt.addedSkill.includes('jiace');\r\n                        },\r\n                        content() {\r\n                            let cards = trigger.cards.filterInD();\r\n                            player.gain(cards, 'gain2');\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            xiangying: {\r\n                enable: 'phaseUse',\r\n                position: 'h',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('h', { color: 'red' });\r\n                },\r\n                filterCard(card, player) {\r\n                    return get.color(card) == 'red';\r\n                },\r\n                selectCard: [1, Infinity],\r\n                filterTarget(card, player, target) {\r\n                    return target.countCards('h') < player.countCards('h');\r\n                },\r\n                discard: false,\r\n                prepare: 'give2',\r\n                content() {\r\n                    'step 0';\r\n                    target.gain(cards, player);\r\n                    'step 1';\r\n                    if (target.countCards('h') > player.countCards('h')) {\r\n                        target.showHandcards();\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    let num = Math.abs(target.countCards('h', { color: 'red' }) - target.countCards('h', { color: 'black' }));\r\n                    player.draw(num);\r\n                },\r\n                ai: {\r\n                    order: 10,\r\n                    result: {\r\n                        player(player, target) {\r\n                            let num = ui.selected.cards.length * 2 + target.countCards('h');\r\n                            if (num <= player.countCards('h'))\r\n                                return -1;\r\n                            return Math.abs(num + target.countCards('h', { color: 'red' }) - target.countCards('h', { color: 'black' }));\r\n                        },\r\n                        target(player, target) {\r\n                            if (target.hasSkillTag('nogain'))\r\n                                return 0;\r\n                            return ui.selected.cards.length;\r\n                        }\r\n                    },\r\n                    threaten: 0.6\r\n                }\r\n            },\r\n            chengzhang: {\r\n                audio: 3,\r\n                trigger: {\r\n                    player: 'loseAfter',\r\n                    global: ['gainAfter', 'equipAfter', 'addJudgeAfter', 'loseAsyncAfter'],\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    return target != player && target.isIn() && target.hasUseTarget(card);\r\n                },\r\n                filter(Evt, player) {\r\n                    var _a;\r\n                    let evt = Evt.getl(player);\r\n                    return ((_a = evt === null || evt === void 0 ? void 0 : evt.es) === null || _a === void 0 ? void 0 : _a.filter(card => get.position(card, true) == 'd'\r\n                        && game.hasPlayer(target => lib.skill.chengzhang.filterTarget)).length) > 0;\r\n                },\r\n                frequent: true,\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    Evt.cards = trigger.getl(player).es.filter(card => {\r\n                        return get.position(card, true) == 'd' && game.hasPlayer(target => lib.skill.chengzhang.filterTarget(card, player, target));\r\n                    });\r\n                    Evt.count = Evt.cards.length;\r\n                    'step 1';\r\n                    Evt.count--;\r\n                    player.chooseTarget(function (card, player, target) {\r\n                        return target != player && target.isIn() && target.hasUseTarget(_status.event.cardx);\r\n                    }, '选择一名角色使用' + get.translation(Evt.cards[Evt.count])).set('ai', (target) => get.attitude(_status.event.player, target) * get.value(_status.event.cardx, target)).set('cardx', Evt.cards[Evt.count]);\r\n                    'step 2';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        let target = result.targets[0];\r\n                        player.line(target, 'green');\r\n                        if (target.hasUseTarget(Evt.cards[Evt.count]))\r\n                            target.chooseUseTarget(Evt.cards[Evt.count], true);\r\n                    }\r\n                    'step 3';\r\n                    if (Evt.count)\r\n                        Evt.goto(1);\r\n                },\r\n            },\r\n            mengdong: {\r\n                audio: 3,\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                trigger: { player: 'useCardToPlayered' },\r\n                check: () => true,\r\n                filter(Evt, player) {\r\n                    return !player.getStorage('mengdong').includes(Evt.target) && Evt.target.countCards('e') % 2 == 1;\r\n                },\r\n                frequent: true,\r\n                logTarget: 'target',\r\n                content() {\r\n                    player.storage.mengdong.add(trigger.target);\r\n                    player.markSkill('mengdong');\r\n                    player.draw();\r\n                },\r\n                group: 'mengdong_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: { global: 'phaseAfter' },\r\n                        priority: 23,\r\n                        filter(Evt, player) {\r\n                            return player.storage.mengdong && player.storage.mengdong.length;\r\n                        },\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            player.storage.mengdong.length = 0;\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    result: {\r\n                        player: 1,\r\n                    },\r\n                    effect: {\r\n                        player(card, player, target, current) {\r\n                            if (target && !player.getStorage('mengdong').includes(target) && target.countCards('e') % 2 == 1)\r\n                                return [1, 1];\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            moemanyi: {\r\n                locked: true,\r\n                mod: {\r\n                    targetEnabled(card, player, target, now) {\r\n                        if (get.type(card) == 'delay') {\r\n                            for (let i = 0; i < game.players.length; i++) {\r\n                                if (!(game.players[i].isOut() || game.players[i] == player)) {\r\n                                    if (game.players[i].getAttackRange() < player.getAttackRange())\r\n                                        return now;\r\n                                }\r\n                                return false;\r\n                            }\r\n                        }\r\n                        if (get.name(card) == 'sha' && get.color(card) == 'black') {\r\n                            for (let i = 0; i < game.players.length; i++) {\r\n                                if (!(game.players[i].isOut() || game.players[i] == player)) {\r\n                                    if (game.players[i].getAttackRange() > player.getAttackRange())\r\n                                        return now;\r\n                                }\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            cuchuan: {\r\n                trigger: { player: 'phaseDrawBegin1' },\r\n                filter(Evt, player) {\r\n                    return !Evt.numFixed && game.hasPlayer(cur => player != cur && get.distance(player, cur) <= 1);\r\n                },\r\n                check(Evt, player) {\r\n                    return game.countPlayer(cur => player != cur && get.distance(player, cur) <= 1) >= 2;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    trigger.changeToZero();\r\n                    Evt.targets = game.filterPlayer(cur => player != cur && get.distance(player, cur) <= 1);\r\n                    'step 1';\r\n                    game.asyncDraw(Evt.targets);\r\n                    game.delayx();\r\n                    Evt.num = 0;\r\n                    'step 2';\r\n                    player.gainPlayerCard(Evt.targets[Evt.num], 'he', true);\r\n                    Evt.num++;\r\n                    'step 3';\r\n                    if (Evt.targets[Evt.num])\r\n                        Evt.goto(2);\r\n                },\r\n            },\r\n            huoju: {\r\n                trigger: { global: 'damageBegin' },\r\n                forced: true,\r\n                filter(Evt, player) {\r\n                    if (!Evt.source)\r\n                        return false;\r\n                    if (Evt.source == player || get.distance(player, Evt.source, 'pure') == 1) {\r\n                        return Evt.nature != 'fire';\r\n                    }\r\n                },\r\n                content() {\r\n                    trigger.nature = 'fire';\r\n                },\r\n                group: 'huoju_turnOverBy',\r\n                subSkill: {\r\n                    turnOverBy: {\r\n                        trigger: { player: 'damageAfter', source: 'damageAfter' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return Evt.nature == 'fire' && Evt.source && Evt.source.isIn()\r\n                                && (Evt.source.isMinHp() || Evt.source.isMinHandcard());\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            if (trigger.source.isMinHandcard()) {\r\n                                trigger.source.turnOver();\r\n                                trigger.source.draw();\r\n                            }\r\n                            'step 1';\r\n                            if (trigger.source.isMinHp()) {\r\n                                trigger.source.turnOver();\r\n                                trigger.source.recover();\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            zouyang: {\r\n                trigger: { player: 'useCard2' },\r\n                filter(Evt, player) {\r\n                    if (player.hasSkill('zouyang_used'))\r\n                        return false;\r\n                    let card = Evt.card, info = get.info(card);\r\n                    if (info.allowMultiple == false)\r\n                        return false;\r\n                    if (Evt.targets && Evt.targets.length == 1 && !info.multitarget) {\r\n                        if (game.hasPlayer(cur => !Evt.targets.includes(cur) && get.distance(Evt.targets[0], cur, 'pure') == 1)) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                },\r\n                logTarget(Evt, player) {\r\n                    return game.filterPlayer(cur => !Evt.targets.includes(cur) && get.distance(Evt.targets[0], cur, 'pure') == 1);\r\n                },\r\n                check(Evt, player) {\r\n                    return game.hasPlayer(cur => !Evt.targets.includes(cur) && get.distance(Evt.targets[0], cur, 'pure') == 1 && get.effect(cur, Evt.card, player, player) > 0);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.draws = [];\r\n                    Evt.targets = game.filterPlayer(cur => !trigger.targets.includes(cur) && get.distance(trigger.targets[0], cur, 'pure') == 1);\r\n                    for (let i of Evt.targets) {\r\n                        if (lib.filter.targetEnabled2(trigger.card, player, i)) {\r\n                            if (Evt._zouyang_tmp && Evt._zouyang_tmp != 'target')\r\n                                Evt._zouyang_tmp = 'goon';\r\n                            else\r\n                                Evt._zouyang_tmp = 'target';\r\n                        }\r\n                        else {\r\n                            Evt.draws.add(i);\r\n                            if (Evt._zouyang_tmp && Evt._zouyang_tmp != 'draw')\r\n                                Evt._zouyang_tmp = 'goon';\r\n                            else\r\n                                Evt._zouyang_tmp = 'draw';\r\n                        }\r\n                    }\r\n                    Evt.targets.removeArray(Evt.draws);\r\n                    'step 1';\r\n                    if (Evt._zouyang_tmp != 'goon') {\r\n                        player.addTempSkill('zouyang_used');\r\n                    }\r\n                    'step 2';\r\n                    if (Evt.targets.length) {\r\n                        trigger.targets.addArray(Evt.targets);\r\n                    }\r\n                    if (Evt.draws.length) {\r\n                        game.asyncDraw(Evt.draws);\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    used: {\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '不能发动『奏扬』',\r\n                        },\r\n                    },\r\n                }\r\n            },\r\n            xiezhen: {\r\n                trigger: { global: 'damageBegin' },\r\n                filter(Evt, player) {\r\n                    return Evt.source != player && get.distance(Evt.source, player) <= 1 && Evt.source.countDiscardableCards(player, 'he');\r\n                },\r\n                check(Evt, player) {\r\n                    return get.damageEffect(_status.event.player0, player, player) > 0;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    Evt.forced = true;\r\n                    Evt.target = trigger.source;\r\n                    player.turnOver();\r\n                    'step 1';\r\n                    player.discardPlayerCard('he', Evt.target, Evt.forced, '『谐振』：弃置' + get.translation(Evt.target) + '的一张牌').set('ai', (button) => {\r\n                        let player = _status.event.player;\r\n                        let num = 10;\r\n                        if (get.position(button.link) == 'e') {\r\n                            if (get.damageEffect(_status.event.player0, player, player) > 0)\r\n                                num += 6;\r\n                            if (get.damageEffect(_status.event.player0, player, player) < 0)\r\n                                num -= 6;\r\n                        }\r\n                        return num - get.value(button.link) * _status.event.att;\r\n                    }).set('logSkill', ['rejianchu', Evt.target]).set('player0', trigger.player).set('att', get.attitude(player, Evt.target) / 2);\r\n                    'step 2';\r\n                    if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        if (get.type(result.links[0], null, result.links[0].original == 'h' ? Evt.target : false) == 'equip') {\r\n                            Evt.forced = false;\r\n                            trigger.num++;\r\n                            game.delayx();\r\n                            if (Evt.target.countDiscardableCards(player, 'he'))\r\n                                Evt.goto(1);\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            wenzhou: {\r\n                trigger: { player: 'damageEnd', global: 'turnOverEnd' },\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'damage')\r\n                        return Evt.num > 1 && Evt.source && Evt.source.isIn();\r\n                    return !Evt.player.isTurnedOver();\r\n                },\r\n                logTarget(Evt, player) {\r\n                    if (Evt.name == 'damage')\r\n                        return Evt.source;\r\n                    return Evt.player;\r\n                },\r\n                forced: true,\r\n                content() {\r\n                    if (trigger.name == 'damage')\r\n                        trigger.source.turnOver();\r\n                    else\r\n                        trigger.player.draw();\r\n                },\r\n            },\r\n            miaolu: {\r\n                audio: 3,\r\n                trigger: { global: 'dying' },\r\n                filter(Evt, player) {\r\n                    return Evt.player.hp <= 0 && Evt.player.countCards('h') > 0;\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    \"step 0\";\r\n                    let check;\r\n                    if (trigger.player.isUnderControl(true, player) || get.attitude(player, trigger.player) > 0) {\r\n                        check = trigger.player.hasCard(card => {\r\n                            return get.type(card) != 'basic';\r\n                        });\r\n                    }\r\n                    else {\r\n                        check = trigger.player.hasCard(card => {\r\n                            return get.type(card) == 'basic';\r\n                        });\r\n                    }\r\n                    player.discardPlayerCard(trigger.player, get.prompt('miaolu', trigger.player), 'h').set('ai', (button) => {\r\n                        if (!_status.event.check)\r\n                            return 0;\r\n                        if (_status.event.target.isUnderControl(true, _status.event.player) || get.recoverEffect(_status.event.target, _status.event.player, _status.event.player) > 0) {\r\n                            if (get.type(button.link) != 'basic') {\r\n                                return 10 - get.value(button.link);\r\n                            }\r\n                            return 0;\r\n                        }\r\n                        else {\r\n                            return Math.random();\r\n                        }\r\n                    }).set('check', check);\r\n                    \"step 1\";\r\n                    if (result.bool) {\r\n                        player.logSkill('miaolu', trigger.player);\r\n                        Evt.card = result.links[0];\r\n                        player.showCards([Evt.card], get.translation(player) + '弃置的手牌');\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    \"step 2\";\r\n                    if (get.type(Evt.card) != 'basic') {\r\n                        trigger.player.recover();\r\n                    }\r\n                    else {\r\n                        player.gain(Evt.card, 'gain2', 'log');\r\n                    }\r\n                },\r\n                ai: {\r\n                    threaten: 1.4\r\n                }\r\n            },\r\n            benglei: {\r\n                audio: 2,\r\n                trigger: { player: 'damageEnd' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    return (Evt.num > 0);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    Evt.count = trigger.num;\r\n                    'step 1';\r\n                    Evt.count--;\r\n                    player.chooseTarget(get.prompt2('benglei')).set('ai', (target) => {\r\n                        let player = _status.event.player;\r\n                        return get.damageEffect(target, player, player);\r\n                    });\r\n                    'step 2';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        player.logSkill('benglei', result.targets);\r\n                        Evt.target = result.targets[0];\r\n                        Evt.target.judge(card => {\r\n                            if (get.suit(card) == 'spade')\r\n                                return -3;\r\n                            if (get.suit(card) == 'club')\r\n                                return -2;\r\n                            return 0;\r\n                        }).callback = lib.skill.benglei.callback;\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 3';\r\n                    if (Evt.discardBy === true) {\r\n                        if (Evt.target.countDiscardableCards(player, 'he')) {\r\n                            player.line(Evt.target);\r\n                            player.discardPlayerCard('he', Evt.target, true);\r\n                        }\r\n                        if (Evt.redoBy) {\r\n                            delete Evt.redoBy;\r\n                        }\r\n                        else if (Evt.discardBy) {\r\n                            delete Evt.discardBy;\r\n                        }\r\n                        Evt.redo();\r\n                    }\r\n                    'step 4';\r\n                    if (Evt.count > 0)\r\n                        Evt.goto(1);\r\n                },\r\n                callback() {\r\n                    'step 0';\r\n                    let evt = _status.event.getParent('benglei');\r\n                    Evt.Nyaru = evt.player;\r\n                    if (Evt.judgeResult.suit == 'spade') {\r\n                        let evt = _status.event.getParent('damage');\r\n                        if ((evt === null || evt === void 0 ? void 0 : evt.name) == 'damage' && evt.num) {\r\n                            player.damage(evt.num, 'thunder', Evt.Nyaru);\r\n                        }\r\n                    }\r\n                    else if (Evt.judgeResult.suit == 'club') {\r\n                        evt.discardBy = true;\r\n                        evt.redoBy = true;\r\n                    }\r\n                    else if (Evt.judgeResult.color == 'red') {\r\n                        Evt.goto(2);\r\n                    }\r\n                    'step 1';\r\n                    game.delay(2);\r\n                    Evt.finish();\r\n                    'step 2';\r\n                    Evt.Nyaru.discardPlayerCard(player, get.prompt('miaolu', player), 'h').set('ai', (button) => {\r\n                        if (_status.event.target.isUnderControl(true, _status.event.player) || get.recoverEffect(_status.event.target, _status.event.player, _status.event.player) > 0) {\r\n                            if (get.type(button.link) != 'basic') {\r\n                                return 10 - get.value(button.link);\r\n                            }\r\n                            return 0;\r\n                        }\r\n                        else {\r\n                            return Math.random();\r\n                        }\r\n                    });\r\n                    'step 3';\r\n                    if (result.bool) {\r\n                        Evt.Nyaru.logSkill('miaolu', player);\r\n                        Evt.card = result.links[0];\r\n                        Evt.Nyaru.showCards([Evt.card], get.translation(Evt.Nyaru) + '弃置的手牌');\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 4';\r\n                    if (get.type(Evt.card) != 'basic') {\r\n                        player.recover();\r\n                    }\r\n                    else {\r\n                        Evt.Nyaru.gain(Evt.card, 'gain2', 'log');\r\n                    }\r\n                },\r\n                ai: {\r\n                    maixie_defend: true,\r\n                    effect: {\r\n                        target(card, player, target) {\r\n                            if (player.countCards('he') > 1 && get.tag(card, 'damage')) {\r\n                                if (player.hasSkillTag('jueqing', false, target))\r\n                                    return [1, -1.5];\r\n                                if (get.attitude(target, player) < 0)\r\n                                    return [1, 1];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            xuanquan: {\r\n                derivation: 'zhihu',\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countDisabled() < 5;\r\n                },\r\n                chooseButton: {\r\n                    dialog(Evt, player) {\r\n                        return ui.create.dialog('###『选权』###' + lib.translate.xuanquan_info);\r\n                    },\r\n                    chooseControl(Evt, player) {\r\n                        let list = [];\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (!player.isDisabled(i))\r\n                                list.push('equip' + i);\r\n                        }\r\n                        list.push('cancel2');\r\n                        return list;\r\n                    },\r\n                    check(Evt, player) {\r\n                        for (let i = 5; i > 0; i--) {\r\n                            if (player.isEmpty(i))\r\n                                return ('equip' + i);\r\n                        }\r\n                        return 'cancel2';\r\n                    },\r\n                    backup(result) {\r\n                        let next = get.copy(lib.skill.xuanquanx);\r\n                        next.position = result.control;\r\n                        return next;\r\n                    },\r\n                },\r\n                group: ['xuanquan_record'],\r\n                subSkill: {\r\n                    record: {\r\n                        trigger: { global: 'disableEquipAfter' },\r\n                        filter(Evt, player) {\r\n                            return Evt.player != player;\r\n                        },\r\n                        forced: true,\r\n                        content() {\r\n                            player.draw();\r\n                        },\r\n                    },\r\n                },\r\n                ai: {\r\n                    order: 1,\r\n                    result: {\r\n                        player(player) {\r\n                            if (game.hasPlayer(target => {\r\n                                if (player == target)\r\n                                    return false;\r\n                                let hs = target.countCards('he');\r\n                                return hs > 2 && get.attitude(player, target) >= 0;\r\n                            }))\r\n                                return 1;\r\n                            return 0;\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            xuanquanx: {\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.disableEquip(lib.skill.xuanquan_backup.position);\r\n                    'step 1';\r\n                    if (player.isAlive() && game.hasPlayer(cur => cur != player && cur.countCards('he'))) {\r\n                        player.chooseTarget(true, '获得一名角色的一张牌并令其获得技能『选权』', function (card, player, target) {\r\n                            if (player == target)\r\n                                return false;\r\n                            return target.countGainableCards(player, 'he') > 0;\r\n                        }).set('ai', target => get.attitude(_status.event.player, target) * (target.countCards('he') - 2));\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        let target = result.targets[0];\r\n                        Evt.target = target;\r\n                        player.line(target);\r\n                        player.gainPlayerCard(target, 'he', true);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 3';\r\n                    if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        target = Evt.target;\r\n                        target.addSkill('xuanquan');\r\n                    }\r\n                },\r\n            },\r\n            rusu: {\r\n                trigger: {\r\n                    player: ['loseAfter'],\r\n                    global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter'],\r\n                },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    var _a, _b;\r\n                    let evt = Evt.getl(player);\r\n                    return (((_a = evt === null || evt === void 0 ? void 0 : evt.es) === null || _a === void 0 ? void 0 : _a.length) && player.countCards('he', { type: 'equip' }))\r\n                        || (((_b = evt === null || evt === void 0 ? void 0 : evt.js) === null || _b === void 0 ? void 0 : _b.length) && player.countCards('he', { type: ['trick', 'delay'] }));\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a, _b, _c, _d, _e, _f;\r\n                    {\r\n                        let evt = trigger.getl(player);\r\n                        if (((_a = evt === null || evt === void 0 ? void 0 : evt.js) === null || _a === void 0 ? void 0 : _a.length) && player.countCards('he', { type: ['trick', 'delay'] })) {\r\n                            player.chooseCardTarget({\r\n                                filterCard: { type: ['trick', 'delay'] },\r\n                                position: 'he',\r\n                                filterTarget(card, player, target) {\r\n                                    return target.canAddToJudge(card);\r\n                                },\r\n                                ai1(card) {\r\n                                    return 7 - get.value(card);\r\n                                },\r\n                                ai2(target) {\r\n                                    return 1 - get.attitude(_status.event.player, target);\r\n                                },\r\n                                prompt: '###' + get.prompt('rusu') + '###将一张锦囊牌置于选择目标的判定区'\r\n                            });\r\n                        }\r\n                    }\r\n                    'step 1';\r\n                    if (result.bool && ((_b = result.cards) === null || _b === void 0 ? void 0 : _b.length) && ((_c = result.targets) === null || _c === void 0 ? void 0 : _c.length)) {\r\n                        player.logSkill('rusu', result.targets);\r\n                        let thisTarget = result.targets[0];\r\n                        let thisCard = result.cards[0];\r\n                        thisTarget.addToJudge(thisCard, player);\r\n                    }\r\n                    'step 2';\r\n                    let evt = trigger.getl(player);\r\n                    if (((_d = evt === null || evt === void 0 ? void 0 : evt.es) === null || _d === void 0 ? void 0 : _d.length) && player.countCards('he', { type: 'equip' })) {\r\n                        player.chooseCardTarget({\r\n                            filterCard: { type: 'equip' },\r\n                            position: 'he',\r\n                            filterTarget(card, player, target) {\r\n                                return target.isEmpty(get.subtype(card));\r\n                            },\r\n                            ai1(card) {\r\n                                return 6 - get.value(card);\r\n                            },\r\n                            ai2(target) {\r\n                                return get.attitude(_status.event.player, target) - 3;\r\n                            },\r\n                            prompt: '###' + get.prompt('rusu') + '###将一张装备牌置于选择目标的装备区'\r\n                        });\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 3';\r\n                    if (result.bool && ((_e = result.cards) === null || _e === void 0 ? void 0 : _e.length) && ((_f = result.targets) === null || _f === void 0 ? void 0 : _f.length)) {\r\n                        player.logSkill('rusu', result.targets);\r\n                        let thisTarget = result.targets[0];\r\n                        let thisCard = result.cards[0];\r\n                        thisTarget.equip(thisCard);\r\n                        Evt.target = thisTarget;\r\n                        if (thisTarget != player) {\r\n                            player.$give(thisCard, thisTarget, false);\r\n                        }\r\n                    }\r\n                },\r\n                ai: {\r\n                    effect: {\r\n                        target(card, player, target, current) {\r\n                            if (get.type(card) == 'delay' && target.countCards('he', { type: ['trick', 'delay'] }))\r\n                                return [1, 1];\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            jichu: {\r\n                mod: {\r\n                    selectTarget(card, player, range) {\r\n                        if (range[1] == -1)\r\n                            return;\r\n                        let evt = player.getLastUsed();\r\n                        if ((evt === null || evt === void 0 ? void 0 : evt.card) && get.type2(evt.card) == 'trick' && !['delay', 'equip'].includes(get.type(card)))\r\n                            range[1] += 1;\r\n                    },\r\n                    aiOrder(player, card, num) {\r\n                        if (typeof card == 'object' && player.isPhaseUsing()) {\r\n                            let evt = player.getLastUsed();\r\n                            let order = num;\r\n                            if ((evt === null || evt === void 0 ? void 0 : evt.card) && get.type2(evt.card) == 'trick' && !['delay', 'equip'].includes(get.type(card))) {\r\n                                order += 2;\r\n                            }\r\n                            if ((evt === null || evt === void 0 ? void 0 : evt.card) && get.suit(evt.card) == 'diamond') {\r\n                                order += 2;\r\n                            }\r\n                            return order;\r\n                        }\r\n                    },\r\n                },\r\n                trigger: { player: 'useCardAfter' },\r\n                frequent: true,\r\n                filter(Evt, player) {\r\n                    let evt = player.getLastUsed(1);\r\n                    if (!evt || !evt.card)\r\n                        return false;\r\n                    return get.suit(evt.card) == 'diamond' && !(Evt.result.bool == false || Evt.iswuxied);\r\n                },\r\n                content() {\r\n                    player.draw();\r\n                },\r\n            },\r\n            mingshizhige: {\r\n                trigger: { player: 'damageEnd' },\r\n                filter(Evt, player) {\r\n                    return Evt.num > 0;\r\n                },\r\n                check(Evt, player) {\r\n                    return player.countCards('h', card => {\r\n                        return player.getUseValue(card) > 0;\r\n                    });\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.cards = player.getCards('h');\r\n                    let num = Evt.cards.length;\r\n                    player.lose(Evt.cards, ui.discardPile).set('visible', true);\r\n                    player.$throw(Evt.cards, 1000);\r\n                    game.log(player, '将', Evt.cards, '置入了弃牌堆');\r\n                    player.draw(num);\r\n                    game.delayx();\r\n                    'step 1';\r\n                    player.chooseCardButton(Evt.cards, '是否使用其中的一张？').set('filterButton', function (button) {\r\n                        return _status.event.player.hasUseTarget(button.link);\r\n                    }).set('ai', button => _status.event.player.getUseValue(button.link));\r\n                    'step 2';\r\n                    if (result.bool) {\r\n                        player.chooseUseTarget(true, result.links[0]);\r\n                    }\r\n                },\r\n            },\r\n            meihua: {\r\n                trigger: { global: ['loseAfter', 'cardsDiscardAfter'] },\r\n                filter(Evt, player) {\r\n                    if (Evt.type == 'discard')\r\n                        return false;\r\n                    return Evt.cards.filter(card => get.position(card, true) == 'd' && get.suit(card) == 'club').length > 0;\r\n                },\r\n                addDialog(Evt, player) {\r\n                    return Evt.cards.filter(card => get.position(card, true) == 'd' && get.suit(card) == 'club');\r\n                },\r\n                check(Evt, player) {\r\n                    return Evt.cards.filter(card => get.position(card, true) == 'd' && get.suit(card) == 'club' && get.value(card, player) > 3).length;\r\n                },\r\n                round: 1,\r\n                content() {\r\n                    'step 0';\r\n                    let cards = trigger.cards.filter(card => get.position(card, true) == 'd' && get.suit(card) == 'club');\r\n                    if (cards.length == 1) {\r\n                        Evt.cards = cards;\r\n                    }\r\n                    else {\r\n                        player.chooseCardButton(cards, true).set('ai', (button) => get.value(button.link, _status.event.player) - 3);\r\n                    }\r\n                    'step 1';\r\n                    if (result.bool && result.links) {\r\n                        Evt.cards = result.links.slice(0);\r\n                    }\r\n                    player.gain(Evt.cards, 'gain2', 'log');\r\n                },\r\n            },\r\n            shentian: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filterTarget(card, player, target) {\r\n                    return target.countCards('h') > 0;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.viewHandcards(target);\r\n                    'step 1';\r\n                    player.judge();\r\n                    'step 2';\r\n                    let suit = result.suit;\r\n                    player.chooseButton(['请选择重铸' + get.translation(target) + '的手牌', target.getCards('h')], [1, Infinity]).set('filterButton', function (button) {\r\n                        if (_status.event.suit == get.suit(button.link))\r\n                            return false;\r\n                        for (let i = 0; i < ui.selected.buttons.length; i++) {\r\n                            if (get.suit(ui.selected.buttons[i].link) == get.suit(button.link))\r\n                                return false;\r\n                        }\r\n                        return true;\r\n                    }).set('suit', suit).set('att', get.attitude(player, target)).set('ai', (button) => {\r\n                        if (_status.event.att <= 0)\r\n                            return get.value(button.link) - 4;\r\n                        return 4 - get.value(button.link);\r\n                    });\r\n                    'step 3';\r\n                    if (result.bool) {\r\n                        let cards = result.links;\r\n                        target.lose(cards, ui.discardPile).set('visible', true);\r\n                        target.$throw(cards, 1000);\r\n                        game.log(target, '将', cards, '置入了弃牌堆');\r\n                        target.draw(cards.length);\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 6,\r\n                    result: {\r\n                        target(player, target) {\r\n                            if (target.countCards('h') > 2) {\r\n                                if (get.attitude(player, target) > 0)\r\n                                    return 1;\r\n                                else\r\n                                    return -1;\r\n                            }\r\n                            return -0.1;\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            mishu: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = [];\r\n                },\r\n                trigger: { global: 'phaseEnd' },\r\n                filter(Evt, player) {\r\n                    if (Evt.player == player)\r\n                        return false;\r\n                    let cards = [];\r\n                    game.getGlobalHistory('cardMove', evt => {\r\n                        if (evt == Evt || (evt.name != 'lose' && evt.name != 'cardsDiscard'))\r\n                            return false;\r\n                        if (evt.name == 'lose' && evt.position != ui.discardPile)\r\n                            return false;\r\n                        cards.addArray(evt.cards);\r\n                    });\r\n                    return cards.length && _status.currentPhase.isIn();\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    let cards = _status.discarded.slice(0);\r\n                    Evt.discards = cards;\r\n                    let list = ['获得本回合进入弃牌堆的任意类型不同的牌，且若这些牌之和为质数，令其回复1点体力', '令其获得本回合进入弃牌堆的一种类型的牌，且若这些牌点数之积大于13，对其造成1点伤害', '取消'];\r\n                    list.removeArray(player.storage.mishu);\r\n                    if (list.length) {\r\n                        player.chooseControl('dialogcontrol', list).set('ai', function () {\r\n                            let evt = _status.event.getParent();\r\n                            let controls = _status.event.controls.slice(0);\r\n                            if (evt.discards.length >= 4 && controls.includes('获得本回合进入弃牌堆的任意类型不同的牌，且若这些牌之和为质数，令其回复1点体力'))\r\n                                return 0;\r\n                            return _status.event.att;\r\n                        }).set('check', (get.attitude(player, _status.currentPhase) > 0) ? 0 : 1).set('prompt', get.prompt2('mishu')).set('addDialog', [cards]);\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 1';\r\n                    if (result.control && result.control != '取消') {\r\n                        let prompt = result.control;\r\n                        Evt.target = _status.currentPhase;\r\n                        Evt.control = result.control;\r\n                        prompt.replace(/其/, get.translation(_status.currentPhase));\r\n                        let next = player.chooseCardButton(Evt.discards, prompt);\r\n                        if (Evt.control == '获得本回合进入弃牌堆的任意类型不同的牌，且若这些牌之和为质数，令其回复1点体力') {\r\n                            next.set('filterButton', function (button) {\r\n                                for (let i = 0; i < ui.selected.buttons.length; i++) {\r\n                                    if (get.type2(ui.selected.buttons[i].link) == get.type2(button.link))\r\n                                        return false;\r\n                                }\r\n                                return true;\r\n                            });\r\n                            next.set('selectButton', function () {\r\n                                let types = [];\r\n                                for (let i of Evt.discards) {\r\n                                    types.add(get.type2(i));\r\n                                }\r\n                                return types.length;\r\n                            }());\r\n                        }\r\n                        else {\r\n                            next.set('filterButton', function (button) {\r\n                                return true;\r\n                            });\r\n                            next.set('ai', function (button) {\r\n                                let cards = [];\r\n                                let type = get.type2(button.link);\r\n                                let player = _status.event.player;\r\n                                let target = _status.event.target;\r\n                                cards.concat(_status.event.discards.filter(card => {\r\n                                    return type == get.type2(card);\r\n                                }));\r\n                                let eff = get.attitude(player, target) * get.value(cards, target, 'raw');\r\n                                let num = 1;\r\n                                for (let i of cards) {\r\n                                    num *= get.number(i);\r\n                                }\r\n                                if (num > 13)\r\n                                    eff += get.damageEffect(target, player, player);\r\n                                return eff;\r\n                            });\r\n                            next.set('discards', Evt.discards);\r\n                            next.set('target', Evt.target);\r\n                        }\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 2';\r\n                    if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        player.storage.mishu.add(Evt.control);\r\n                        if (Evt.control == '获得本回合进入弃牌堆的任意类型不同的牌，且若这些牌之和为质数，令其回复1点体力') {\r\n                            let num = 0, count = 0, cards = result.links;\r\n                            for (let i of cards) {\r\n                                num += get.number(i);\r\n                            }\r\n                            for (let i = 1; i <= num; i++) {\r\n                                if (num % i == 0) {\r\n                                    count++;\r\n                                }\r\n                            }\r\n                            player.gain(cards, 'gain2', 'log');\r\n                            if (count <= 2)\r\n                                Evt.target.recover();\r\n                        }\r\n                        else {\r\n                            let num = 1;\r\n                            let cards = Evt.discards.filter(card => {\r\n                                return get.type2(result.links[0]) == get.type2(card);\r\n                            });\r\n                            for (let i of cards) {\r\n                                num *= get.number(i);\r\n                            }\r\n                            Evt.target.gain(cards, 'gain2', 'log');\r\n                            if (num > 13)\r\n                                Evt.target.damage();\r\n                        }\r\n                    }\r\n                },\r\n                group: 'mishu_clear',\r\n                subSkill: {\r\n                    clear: {\r\n                        trigger: {\r\n                            global: 'roundStart'\r\n                        },\r\n                        firstDo: true,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            return player.storage.mishu.length;\r\n                        },\r\n                        content() {\r\n                            player.storage.mishu = [];\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            xingchen: {\r\n                trigger: { player: 'damageAfter' },\r\n                priority: 2,\r\n                filter(Evt, player) {\r\n                    if (Evt.name == 'damage' || (Evt.name == 'useCard' && get.type(Evt.card, 'trick') == 'trick')) {\r\n                        return true;\r\n                    }\r\n                    else\r\n                        return false;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    player.draw(5);\r\n                    'step 1';\r\n                    player.chooseCard(5, 'he', '『未卜星辰』：选择放置到牌堆顶部的牌', true);\r\n                    'step 2';\r\n                    if (result.bool == true && result.cards != null) {\r\n                        Evt.cards = result.cards;\r\n                    }\r\n                    if (Evt.cards.length > 0) {\r\n                        player.chooseButton(true, Evt.cards.length, ['『未卜星辰』：按顺序将卡牌置于牌堆顶（先选择的在上）', Evt.cards]).set('ai', function (button) {\r\n                            let player = _status.event.player, now = _status.currentPhase, next = now.getNext();\r\n                            let att = get.attitude(player, next), card = button.link;\r\n                            let judge = next.getCards('j')[ui.selected.buttons.length];\r\n                            if (judge) {\r\n                                return get.judge(judge)(card) * att;\r\n                            }\r\n                            return next.getUseValue(card) * att;\r\n                        });\r\n                    }\r\n                    'step 3';\r\n                    if (result.bool && ((_a = result.links) === null || _a === void 0 ? void 0 : _a.length))\r\n                        Evt.linkcards = result.links.slice(0);\r\n                    else\r\n                        Evt.finish();\r\n                    game.delay();\r\n                    'step 4';\r\n                    player.lose(Evt.linkcards, ui.special);\r\n                    game.delay();\r\n                    'step 5';\r\n                    let cards = Evt.linkcards;\r\n                    while (cards.length > 0) {\r\n                        ui.cardPile.insertBefore(cards.pop().fix(), ui.cardPile.firstChild);\r\n                        game.updateRoundNumber();\r\n                    }\r\n                },\r\n                ai: {\r\n                    maixie: true,\r\n                }\r\n            },\r\n            minghuahongxiao: {\r\n                trigger: { player: ['useCard', 'discardAfter'] },\r\n                filter(Evt, player) {\r\n                    return (Evt.name == 'useCard' && player != _status.currentPhase && Evt.cards.length && Evt.cards.length)\r\n                        || (Evt.name == 'discard' && player == _status.currentPhase && Evt.cards.length);\r\n                },\r\n                check(Evt, player) {\r\n                    if (Evt.name == 'useCard' && player.isPhaseUsing() && player.countCards('h') && get.type2(Evt.card) == 'trick')\r\n                        return false;\r\n                    return true;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    Evt.list = [];\r\n                    for (let i of trigger.cards) {\r\n                        Evt.list.add(get.type2(i));\r\n                    }\r\n                    'step 1';\r\n                    if (Evt.list.includes('basic'))\r\n                        player.addSkill('minghuahongxiao_change');\r\n                    'step 2';\r\n                    if (Evt.list.includes('trick')) {\r\n                        let evt = _status.event.getParent('phaseUse');\r\n                        if ((evt === null || evt === void 0 ? void 0 : evt.name) == 'phaseUse') {\r\n                            evt.skipped = true;\r\n                        }\r\n                        player.chooseTarget('令一名没有手牌的角色摸两张牌', function (card, player, target) {\r\n                            return target.countCards('h') == 0;\r\n                        });\r\n                    }\r\n                    else\r\n                        Evt.goto(4);\r\n                    'step 3';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        result.targets[0].draw(2);\r\n                    }\r\n                    'step 4';\r\n                    if (Evt.list.includes('equip'))\r\n                        player.recover();\r\n                },\r\n                subSkill: {\r\n                    change: {\r\n                        trigger: { global: 'useCard2' },\r\n                        priority: 23,\r\n                        popup: false,\r\n                        direct: true,\r\n                        filter(Evt, player) {\r\n                            let card = Evt.card;\r\n                            let info = get.info(card);\r\n                            if (info.allowMultiple == false)\r\n                                return false;\r\n                            return Evt.targets && Evt.targets.length;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            if (['equip', 'delay'].includes(get.type(trigger.card))\r\n                                || !game.hasPlayer(cur => !trigger.targets.includes(cur) && lib.filter.targetEnabled2(trigger.card, player, cur)))\r\n                                Evt.goto(4);\r\n                            'step 1';\r\n                            let prompt2 = '为' + get.translation(trigger.card) + '增加一个目标';\r\n                            player.chooseTarget(get.prompt('minghuahongxiao_change'), function (card, player, target) {\r\n                                let source = _status.event.source;\r\n                                if (_status.event.targets.includes(target))\r\n                                    return false;\r\n                                return lib.filter.targetEnabled2(_status.event.card, source, target) && lib.filter.targetInRange(_status.event.card, source, target);\r\n                            }).set('prompt2', prompt2).set('ai', function (target) {\r\n                                let player = _status.event.player;\r\n                                let source = _status.event.source;\r\n                                return get.effect(target, _status.event.card, source, player) * (_status.event.targets.includes(target) ? -1 : 1);\r\n                            }).set('targets', trigger.targets).set('card', trigger.card).set('source', trigger.player);\r\n                            'step 2';\r\n                            if (!Evt.isMine())\r\n                                game.delayx();\r\n                            Evt.targets = result.targets;\r\n                            'step 3';\r\n                            if (Evt.targets) {\r\n                                player.logSkill('minghuahongxiao_change', Evt.targets);\r\n                                if (trigger.targets.includes(Evt.targets[0]))\r\n                                    trigger.targets.removeArray(Evt.targets);\r\n                                else\r\n                                    trigger.targets.addArray(Evt.targets);\r\n                            }\r\n                            'step 4';\r\n                            player.removeSkill('minghuahongxiao_change');\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            qianqi: {\r\n                init(player, skill) {\r\n                    player.storage[skill] = 0;\r\n                },\r\n                trigger: { global: 'phaseBegin' },\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') > player.storage.qianqi || 1;\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseToDiscard(get.prompt2('qianqi', trigger.player), 'he', player.storage.qianqi || 1).set('logSkill', ['qianqi', trigger.player]);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        Evt.target = trigger.player;\r\n                        game.delay();\r\n                        let list = trigger.stageList || lib.phaseName.slice(0);\r\n                        player.chooseButton(['『迁奇』：选择两个阶段调换位置（若不选则执行另一个效果）', [list, 'vcard'], 'hidden'], 2).set('prompt', get.prompt('tiangou'));\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    if (result.bool && result.links) {\r\n                        let steps = result.links.slice(0), stageList = (trigger.stageList || lib.phaseName).slice(0);\r\n                        let index0 = stageList.indexOf(result.links[0][2]), index1 = stageList.indexOf(result.links[1][2]);\r\n                        [stageList[index0], stageList[index1]] = [stageList[index1], stageList[index0]];\r\n                        trigger.stageList = stageList;\r\n                    }\r\n                    else {\r\n                        Evt.target.storage.qianqi_change = player.storage.qianqi || 1;\r\n                        Evt.target.addTempSkill('qianqi_change');\r\n                    }\r\n                    player.storage.qianqi++;\r\n                    player.addTempSkill('qianqi_clear');\r\n                    player.markSkill('qianqi');\r\n                },\r\n                intro: {\r\n                    content: '『迁奇』发动次数：#',\r\n                },\r\n                subSkill: {\r\n                    change: {\r\n                        trigger: { player: 'useCard2' },\r\n                        priority: 23,\r\n                        forced: true,\r\n                        lastDo: true,\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '本回合使用的前&张牌，目标锁定为1',\r\n                        },\r\n                        filter(Evt, player) {\r\n                            if (player.countUsed(null, true) > player.storage.qianqi_change)\r\n                                return false;\r\n                            let card = Evt.card, info = get.info(card);\r\n                            if (info.allowMultiple == false)\r\n                                return false;\r\n                            return Evt.targets && Evt.targets.length && Evt.targets.length != 1;\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            player.chooseTarget('『迁奇』：将目标数锁定为1', function (card, player, target) {\r\n                                if (_status.event.targets.includes(target))\r\n                                    return true;\r\n                            }).set('ai', function (target) {\r\n                                let player = _status.event.player;\r\n                                return get.effect(target, _status.event.card, player, player);\r\n                            }).set('targets', trigger.targets).set('card', trigger.card);\r\n                            'step 1';\r\n                            if (!Evt.isMine())\r\n                                game.delayx();\r\n                            Evt.targets = result.targets;\r\n                            'step 2';\r\n                            if (Evt.targets) {\r\n                                player.logSkill('qianqi_change', Evt.targets);\r\n                                trigger.targets = Evt.targets;\r\n                            }\r\n                        },\r\n                    },\r\n                    clear: {\r\n                        trigger: { global: 'phaseEnd' },\r\n                        filter(Evt, player) {\r\n                            return !game.countPlayer2(cur => cur.getHistory('damage').length);\r\n                        },\r\n                        forced: true,\r\n                        content() {\r\n                            'step 0';\r\n                            player.storage.qianqi = 0;\r\n                            player.unmarkSkill('qianqi');\r\n                            game.log(player, '重置了『迁奇』计数');\r\n                            game.delay(0.5);\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            chutan: {\r\n                init(player, skill) {\r\n                    player.storage[skill] = [];\r\n                },\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    return game.countPlayer(cur => {\r\n                        return cur != player;\r\n                    }) >= 2;\r\n                },\r\n                filterCard(card, player) {\r\n                    return true;\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    return target != player;\r\n                },\r\n                selectTarget: 2,\r\n                position: 'he',\r\n                check(card) {\r\n                    return 6 - get.value(card);\r\n                },\r\n                usable: 1,\r\n                line: false,\r\n                log: 'notarget',\r\n                content() {\r\n                    'step 0';\r\n                    if (!player.storage.chutan)\r\n                        player.storage.chutan = [];\r\n                    player.storage.chutan.add(target);\r\n                    target.storage.chutan_next = player;\r\n                    player.addTempSkill('chutan_next', { player: 'phaseBegin' });\r\n                },\r\n                ai: {\r\n                    order: 10,\r\n                    result: {\r\n                        player: 1,\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    next: {\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '『雏探』标记了两名角色'\r\n                        },\r\n                        onremove(player) {\r\n                            player.storage.chutan.forEach(chu => {\r\n                                if (chu.storage.chutan_next == player)\r\n                                    delete chu.storage.chutan_next;\r\n                            });\r\n                            delete player.storage.chutan;\r\n                        },\r\n                        trigger: { global: 'phaseEnd' },\r\n                        priority: 23,\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            let chus = player.getStorage('chutan').slice(0);\r\n                            if (!chus.includes(Evt.player))\r\n                                return false;\r\n                            chus.remove(Evt.player);\r\n                            return Evt.player.getHistory('useCard', evt => {\r\n                                return evt.targets.includes(chus[0]);\r\n                            }).length > 0;\r\n                        },\r\n                        logTarget: 'player',\r\n                        content() {\r\n                            let cards = [];\r\n                            trigger.player.getHistory('useCard', evt => {\r\n                                cards.addArray(evt.cards);\r\n                            });\r\n                            player.gain(cards, 'gain2', 'log');\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            yikai: {\r\n                enable: 'phaseUse',\r\n                limited: true,\r\n                filterTarget: true,\r\n                content() {\r\n                    'step 0';\r\n                    player.awakenSkill('yikai');\r\n                    target.draw(2);\r\n                    'step 1';\r\n                    target.damage('thunder');\r\n                    'step 2';\r\n                    let list = [];\r\n                    let skills = target.getOriginalSkills();\r\n                    for (let i of skills) {\r\n                        if (lib.skill[i].limited) {\r\n                            list.push(i);\r\n                        }\r\n                    }\r\n                    list.push('cancel2');\r\n                    if (list.length > 1) {\r\n                        player.chooseControl(list).set('prompt', '选择一个限定技：<br><ul><li>未发动~该限定技失效直到你的下个回合开始<li>已发动~此回合结束后视为该限定技未发动过</ul>');\r\n                    }\r\n                    else {\r\n                        Evt.finish();\r\n                    }\r\n                    'step 3';\r\n                    if (result.control !== 'cancel2') {\r\n                        if (target.awakenedSkills.includes(result.control)) {\r\n                            target.storage.yikai_restore = result.control;\r\n                            target.addTempSkill('yikai_restore', 'phaseZhunbeiBegin');\r\n                        }\r\n                        else {\r\n                            target.storage.yikai_blocker = [result.control, player];\r\n                            target.addTempSkill('yikai_blocker', 'none');\r\n                        }\r\n                    }\r\n                },\r\n                subSkill: {\r\n                    restore: {\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '在回合结束后重置『$』',\r\n                        },\r\n                        trigger: { global: 'phaseAfter' },\r\n                        locked: true,\r\n                        silent: true,\r\n                        onremove: true,\r\n                        content() {\r\n                            player.restoreSkill(player.storage.yikai_restore);\r\n                        }\r\n                    },\r\n                    blocker: {\r\n                        mark: true,\r\n                        intro: {\r\n                            content(storage, player, skill) {\r\n                                let str = '';\r\n                                let list = player.getSkills(null, null, false).filter(i => lib.skill.yikai_blocker.skillBlocker(i, player));\r\n                                if (list.length)\r\n                                    str += ('<li>失效技能：' + get.translation(list));\r\n                                return str;\r\n                            }\r\n                        },\r\n                        init(player, skill) {\r\n                            player.addSkillBlocker(skill);\r\n                        },\r\n                        onremove(player, skill) {\r\n                            delete player.storage.yikai_blocker;\r\n                            player.removeSkillBlocker(skill);\r\n                        },\r\n                        locked: true,\r\n                        skillBlocker(skill, player) {\r\n                            return !lib.skill[skill].charlotte && player.getStorage('yikai_blocker')[0] == skill;\r\n                        },\r\n                        trigger: { global: 'phaseBegin' },\r\n                        filter(Evt, player) {\r\n                            let pika = player.getStorage('yikai_blocker')[0];\r\n                            return !pika || !pika.isIn() || pika == Evt.player;\r\n                        },\r\n                        content() {\r\n                            player.removeSkill('yikai_blocker');\r\n                        },\r\n                    }\r\n                },\r\n                ai: {\r\n                    order: 4,\r\n                    damage: true,\r\n                    result: {\r\n                        target(player, target) {\r\n                            if (target.hp > 1) {\r\n                                let skills = target.getOriginalSkills();\r\n                                for (let i of skills) {\r\n                                    if (lib.skill[i].limited && target.awakenedSkills.includes(i)) {\r\n                                        return 8;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (target != player)\r\n                                return 0;\r\n                            if (get.damageEffect(target, player, player) >= 0)\r\n                                return 10;\r\n                            if (target.hp >= 1)\r\n                                return 5;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            pkyuanjun: {\r\n                trigger: { player: 'damageEnd', source: 'damageEnd' },\r\n                filter(Evt, player) {\r\n                    if (Evt.nature != 'thunder')\r\n                        return false;\r\n                    return Evt.source && Evt.source.isAlive() && Evt.player.isAlive();\r\n                },\r\n                usable: 1,\r\n                logTarget(Evt, player) {\r\n                    return player == Evt.player ? Evt.source : Evt.player;\r\n                },\r\n                check(Evt, player) {\r\n                    let target = player == Evt.player ? Evt.source : Evt.player;\r\n                    if (target.countCards('h') >= player.countCards('h'))\r\n                        return true;\r\n                    if (target.countCards('h') - player.countCards('h') >= -1)\r\n                        return player.isDamaged();\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = player == trigger.player ? trigger.source : trigger.player;\r\n                    let num = Evt.target.countCards('h') - player.countCards('h');\r\n                    if (num > 0) {\r\n                        player.draw(num);\r\n                        Evt.finish();\r\n                    }\r\n                    else if (num < 0) {\r\n                        player.chooseToDiscard(-num, true);\r\n                    }\r\n                    'step 1';\r\n                    player.recover();\r\n                },\r\n                ai: {\r\n                    result: {\r\n                        player: 1,\r\n                    }\r\n                },\r\n            },\r\n            qinhuo: {\r\n                trigger: { global: 'useCardAfter' },\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    if (Evt.cards && get.name(Evt.card) == 'huogong'\r\n                        && !Evt.player.hasHistory('sourceDamage', evt => Evt == evt.getParent('useCard')))\r\n                        return true;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseTarget(function (card, player, target) {\r\n                        return target != _status.event.source;\r\n                    }).set('ai', function (target) {\r\n                        let att = get.attitude(_status.event.player, target);\r\n                        if (target.hasSkillTag('nogain'))\r\n                            att /= 10;\r\n                        if (target.hasJudge('lebu'))\r\n                            att /= 2;\r\n                        return get.value(_status.event.cardx, target, 'raw') * att;\r\n                    }).set('cardx', trigger.cards).set('source', trigger.player).set('createDialog', [get.prompt('qinhuo'),\r\n                        'small', get.skillInfoTranslation('qinhuo', player), '令一名角色获得这些牌',\r\n                        [trigger.cards, 'card']]);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        let target = result.targets[0];\r\n                        player.logSkill('qinhuo', target);\r\n                        target.gain(trigger.cards, 'gain2');\r\n                    }\r\n                },\r\n            },\r\n            lvecao: {\r\n                trigger: { player: 'damageEnd' },\r\n                filter(Evt, player) {\r\n                    return player.hasUseTarget({ name: 'tiesuo' });\r\n                },\r\n                check(Evt, player) {\r\n                    return true;\r\n                },\r\n                frequent: true,\r\n                content() {\r\n                    player.chooseUseTarget({ name: 'tiesuo' }, true).set('addedSkill', ['lvecao']);\r\n                },\r\n                group: 'lvecao_fadian',\r\n                subSkill: {\r\n                    fadian: {\r\n                        trigger: { global: 'linkEnd' },\r\n                        filter(Evt, player) {\r\n                            let evt = Evt.getParent('useCard');\r\n                            if (evt.getParent('chooseUseTarget').addedSkill && evt.getParent('chooseUseTarget').addedSkill.includes('lvecao')) {\r\n                                return evt.card.name == 'tiesuo' && evt.player == player && !Evt.player.isLinked()\r\n                                    && Evt.player.countGainableCards(player, 'hej', card => {\r\n                                        if (get.position(card) != 'e' && get.position(card) != 'j' && !card.hasGaintag('ming_'))\r\n                                            return false;\r\n                                        return true;\r\n                                    });\r\n                            }\r\n                        },\r\n                        direct: true,\r\n                        content() {\r\n                            player.gainPlayerCard(trigger.player, 'hej', '获得其区域内一张可见牌').set('filterButton', function (button) {\r\n                                if (get.position(button.link) != 'e' && get.position(button.link) != 'j' && !button.link.hasGaintag('ming_'))\r\n                                    return false;\r\n                                return true;\r\n                            }).set('logSkill', 'lvecao_fadian');\r\n                        },\r\n                        ai: {\r\n                            effect: {\r\n                                player(card, player, target, current) {\r\n                                    if (_status.event.name == 'chooseUseTarget' && _status.event.addedSkill.includes('lvecao')) {\r\n                                        if (card.name == 'tiesuo' && target && target.isLinked() && target.countCards('hej', card => {\r\n                                            if (get.position(card) != 'e' && get.position(card) != 'j' && !card.hasGaintag('ming_'))\r\n                                                return false;\r\n                                            return true;\r\n                                        }))\r\n                                            return [1, 2, 1, -1];\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            yangxi: {\r\n                enable: 'phaseUse',\r\n                usable: 1,\r\n                filter(Evt, player) {\r\n                    return player.countCards('he') > player.countCards('he', { type: ['trick', 'delay'] });\r\n                },\r\n                filterCard(card, player) {\r\n                    if (get.type2(card) == 'basic')\r\n                        return false;\r\n                    if (get.type(card) == 'delay')\r\n                        return player.canAddJudge(card);\r\n                    if (player.canAddJudge('lebu') && get.color(card) == 'red')\r\n                        return true;\r\n                    if (player.canAddJudge('bingliang') && get.color(card) == 'black')\r\n                        return true;\r\n                    return false;\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    return true;\r\n                },\r\n                position: 'he',\r\n                discard: false,\r\n                lose: false,\r\n                check(card) {\r\n                    let player = _status.event.player;\r\n                    if (['shandian', 'fulei', 'haidi'].includes(get.name(card)))\r\n                        return 9 - get.value(card);\r\n                    if (get.color(card) == 'red' && !player.needsToDiscard())\r\n                        return 6 - get.value(card);\r\n                    if (get.color(card) == 'black' && player.countCards('he') >= 3)\r\n                        return 5 - get.value(card);\r\n                    if (get.type(card) == 'delay')\r\n                        return 4 - get.value(card);\r\n                    return 3 - get.value(card);\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.$give(cards, player, false);\r\n                    if (get.type(cards[0]) == 'delay')\r\n                        player.addJudge(cards[0]);\r\n                    else if (get.color(cards[0]) == 'red' && player.canAddJudge('lebu'))\r\n                        player.addJudge({ name: 'lebu' }, cards);\r\n                    else if (get.color(cards[0]) == 'black' && player.canAddJudge('bingliang'))\r\n                        player.addJudge({ name: 'bingliang' }, cards);\r\n                    'step 1';\r\n                    target.damage('thunder');\r\n                },\r\n                ai: {\r\n                    order: 2,\r\n                    result: {\r\n                        player(player, target) {\r\n                            if (player.countCards('h', card => ['shandian', 'fulei', 'haidi'].includes(get.name(card))))\r\n                                return 0;\r\n                            return -1.5;\r\n                        },\r\n                        target(player, target) {\r\n                            if (target.hasSkill('shenyou'))\r\n                                return 0;\r\n                            if (target.hp == 1)\r\n                                return get.damageEffect(target, player, target) - 2;\r\n                            return get.damageEffect(target, player, target);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            naisi: {\r\n                trigger: { global: 'phaseEnd' },\r\n                direct: true,\r\n                init(player, skill) {\r\n                    player.storage[skill] = 0;\r\n                },\r\n                filter(Evt, player) {\r\n                    return player.storage.naisi;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    if (player.storage.naisi > 1) {\r\n                        player.chooseTarget(get.prompt2('naisi'), function (card, player, target) {\r\n                            return true;\r\n                        }).set('ai', function (target) {\r\n                            return get.damageEffect(target, _status.event.player, _status.event.player);\r\n                        });\r\n                    }\r\n                    'step 1';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        let target = result.targets[0];\r\n                        player.logSkill('naisi', target);\r\n                        target.damage(player.storage.naisi);\r\n                    }\r\n                    'step 2';\r\n                    player.storage.naisi = 0;\r\n                },\r\n                group: 'naisi_recover',\r\n                subSkill: {\r\n                    recover: {\r\n                        trigger: { player: 'recoverAfter' },\r\n                        direct: true,\r\n                        lastDo: true,\r\n                        forced: true,\r\n                        silent: true,\r\n                        content() {\r\n                            player.storage.naisi++;\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            tuzai: {\r\n                trigger: { source: 'damageEnd' },\r\n                filter(Evt, player) {\r\n                    return Evt.player.countGainableCards(player, 'hej', card => {\r\n                        if (get.position(card) != 'e' && get.position(card) != 'j' && !card.hasGaintag('ming_'))\r\n                            return false;\r\n                        return true;\r\n                    });\r\n                },\r\n                check(Evt, player) {\r\n                    if (get.recoverEffect(Evt.player, player, player) > 0)\r\n                        return true;\r\n                    let att = get.attitude(player, Evt.player);\r\n                    if (att > 0 && Evt.player.countCards('j'))\r\n                        return true;\r\n                    let cards = Evt.player.getGainableCards(player, 'he', card => get.position(card) == 'e' || card.hasGaintag('ming_'));\r\n                    for (let i of cards) {\r\n                        if (get.equipValue(i) >= 6)\r\n                            return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    'step 0';\r\n                    player.gainPlayerCard(trigger.player, 'hej', '获得其区域内一张可见牌', true).set('filterButton', function (button) {\r\n                        if (get.position(button.link) != 'e' && get.position(button.link) != 'j' && !button.link.hasGaintag('ming_'))\r\n                            return false;\r\n                        return true;\r\n                    });\r\n                    'step 1';\r\n                    trigger.player.recover();\r\n                },\r\n                effect: {\r\n                    player(cardx, player, target) {\r\n                        if (get.attitude(player, target) > 0 && target.countGainableCards(player, 'hej', card => {\r\n                            if (get.position(card) != 'e' && get.position(card) != 'j' && !card.hasGaintag('ming_'))\r\n                                return false;\r\n                            return true;\r\n                        })) {\r\n                            if (get.tag(cardx, 'damage') == 1) {\r\n                                if (target.countGainableCards(player, 'j'))\r\n                                    return [1, 1, 0, 2];\r\n                                else\r\n                                    return [1, 1, 0, -0.5];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            wuneng: {\r\n                enable: 'phaseUse',\r\n                filter(Evt, player) {\r\n                    return player.countCards('h', card => ['tao', 'taoyuan'].includes(card.name) && !card.hasGaintag('ming_'));\r\n                },\r\n                filterCard(card, player) {\r\n                    return ['tao', 'taoyuan'].includes(card.name) && !card.hasGaintag('ming_');\r\n                },\r\n                position: 'h',\r\n                discard: false,\r\n                lose: false,\r\n                check(card) {\r\n                    return true;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.showCards(cards, '『呜能』亮出手牌');\r\n                    player.addGaintag(cards, 'ming_wuneng');\r\n                    player.$give(cards, player, false);\r\n                    game.delayx();\r\n                    'step 1';\r\n                    player.draw();\r\n                },\r\n                ai: {\r\n                    order: 10,\r\n                    result: {\r\n                        player: 1,\r\n                    }\r\n                }\r\n            },\r\n            xilv: {\r\n                trigger: { global: 'drawAfter' },\r\n                filter(Evt, player) {\r\n                    if (Evt.player == player)\r\n                        return false;\r\n                    let name = lib.skill.yiqu.process(Evt), info = lib.skill[name];\r\n                    if (!info || info.equipSkill || info.ruleSkill)\r\n                        return false;\r\n                    return lib.translate[name + '_info'] && player.countCards('h') > 0;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.player;\r\n                    player.chooseCard('h', get.prompt2('xilv')).set('ai', card => {\r\n                        let target = _status.event.target;\r\n                        return get.attitude2(target) * get.value(card, target, 'raw') + 1;\r\n                    }).set('target', Evt.target);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.logSkill('xilv', Evt.target);\r\n                        Evt.target.gain(result.cards, player, 'giveAuto');\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    let name = lib.skill.yiqu.process(trigger);\r\n                    Evt.list = ['将摸到的牌交给' + get.translation(player), '令' + get.translation(player) + '获得<div class=\"skill\">' + get.translation(name) + '</div>'];\r\n                    if (!player.hasSkill(name)) {\r\n                        Evt.target.chooseControl('dialogcontrol', Evt.list, function () {\r\n                            return _status.event.att;\r\n                        }).set('att', get.attitude(Evt.target, player) > 0 ? 1 : 0).set('prompt', '『习律』请选择一项').set('addDialog', [trigger.result]);\r\n                    }\r\n                    else {\r\n                        Evt._result = { control: Evt.list[0] };\r\n                    }\r\n                    'step 3';\r\n                    switch (result.control) {\r\n                        case Evt.list[0]: {\r\n                            player.gain(trigger.result, Evt.target, 'giveAuto');\r\n                            break;\r\n                        }\r\n                        case Evt.list[1]: {\r\n                            let name = lib.skill.yiqu.process(trigger);\r\n                            player.flashAvatar('xilv', get.name(trigger.player));\r\n                            player.addAdditionalSkill('xilv', name, true);\r\n                            break;\r\n                        }\r\n                    }\r\n                },\r\n                group: 'xilv_phaseEnd',\r\n                subSkill: {\r\n                    phaseEnd: {\r\n                        trigger: { player: 'phaseEnd' },\r\n                        forced: true,\r\n                        filter(Evt, player) {\r\n                            return player.additionalSkills['xilv'];\r\n                        },\r\n                        content() {\r\n                            player.removeAdditionalSkill('xilv');\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            bana: {\r\n                trigger: { global: 'changeHp' },\r\n                filter(Evt, player) {\r\n                    return Evt.player.countCards('he') <= Evt.player.hp && Evt.player.hp <= game.countPlayer();\r\n                },\r\n                check(Evt, player) {\r\n                    return get.attitude(player, Evt.player) > 0;\r\n                },\r\n                logTarget: 'player',\r\n                content() {\r\n                    trigger.player.draw();\r\n                },\r\n                ai: {\r\n                    expose: 0.1,\r\n                }\r\n            },\r\n            weiguang: {\r\n                intro: {\r\n                    content: '『微光』：$',\r\n                },\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = null;\r\n                },\r\n                trigger: { player: 'phaseBegin' },\r\n                filter(Evt, player) {\r\n                    return player.countCards('hs');\r\n                },\r\n                direct: true,\r\n                content() {\r\n                    'step 0';\r\n                    player.chooseToUse({\r\n                        prompt: get.prompt2('weiguang'),\r\n                        addCount: false,\r\n                    });\r\n                    'step 1';\r\n                    if (result.card && get.type(result.card)) {\r\n                        if (!player.storage.weiguang)\r\n                            player.storage.weiguang = get.type(result.card);\r\n                        if (player.storage.weiguang === get.type(result.card)) {\r\n                            player.markSkill('weiguang');\r\n                            player.draw();\r\n                        }\r\n                        else {\r\n                            player.storage.weiguang = true;\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            liangqin: {\r\n                trigger: { player: 'dyingAfter' },\r\n                unique: true,\r\n                limited: true,\r\n                priority: 100,\r\n                check(Evt, player) {\r\n                    return true;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    player.storage.liangqin = true;\r\n                    player.awakenSkill('liangqin');\r\n                    'step 1';\r\n                    player.addSkill('liangqin_phaseBefore');\r\n                },\r\n                subSkill: {\r\n                    phaseBefore: {\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '在下个回合内摸牌量上升',\r\n                        },\r\n                        trigger: {\r\n                            player: 'phaseBefore'\r\n                        },\r\n                        forced: true,\r\n                        firstDo: true,\r\n                        content() {\r\n                            'step 0';\r\n                            player.storage.liangqin_drawPlus = 1;\r\n                            player.addTempSkill('liangqin_drawPlus');\r\n                            'step 1';\r\n                            player.removeSkill('liangqin_phaseBefore');\r\n                        },\r\n                    },\r\n                    drawPlus: {\r\n                        trigger: {\r\n                            player: 'drawBegin'\r\n                        },\r\n                        forced: true,\r\n                        firstDo: true,\r\n                        onremove: true,\r\n                        content() {\r\n                            trigger.num += player.storage.liangqin_drawPlus;\r\n                            player.storage.liangqin_drawPlus++;\r\n                        },\r\n                        mark: true,\r\n                        intro: {\r\n                            content: '摸牌量+#',\r\n                        },\r\n                        ai: {\r\n                            effect: {\r\n                                target(card, player, target) {\r\n                                    if (get.tag(card, 'draw'))\r\n                                        return [1, player.storage.liangqin_drawPlus || 1];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            tage: {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = 0;\r\n                },\r\n                trigger: { global: 'useCardAfter' },\r\n                firstDo: true,\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    if (Evt.player != _status.currentPhase)\r\n                        return false;\r\n                    let usable = player.getDamagedHp() || 1;\r\n                    if (player.storage.tage >= usable)\r\n                        return false;\r\n                    let num = get.number(Evt.card);\r\n                    return typeof num == \"number\" && player.countCards('hs', card => [1, -1].includes(get.number(card) - num));\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    Evt.precard = trigger.cards.slice(0);\r\n                    let num = get.number(trigger.card);\r\n                    player.chooseToRespond('『踏歌』：是否打出一张牌替换' + get.translation(Evt.precard), card => {\r\n                        if (!get.number(card))\r\n                            return false;\r\n                        let num = _status.event.num;\r\n                        return [1, -1].includes(get.number(card) - num);\r\n                    }).set('num', num).set('ai', card => {\r\n                        if (!_status.event.check)\r\n                            return 1 - get.value(card);\r\n                        return 7 - get.value(card);\r\n                    }).set('check', get.value(Evt.precard, player) > 1 || (player.getDamagedHp() >= 2));\r\n                    'step 1';\r\n                    if (result.bool && result.cards) {\r\n                        player.logSkill('tage');\r\n                        if (!player.storage.tage)\r\n                            player.storage.tage = 1;\r\n                        else\r\n                            player.storage.tage++;\r\n                        player.markSkill('tage');\r\n                        Evt.cards = result.cards.slice(0);\r\n                        trigger.cards = Evt.cards;\r\n                        player.gain(Evt.precard, 'gain2', 'log');\r\n                    }\r\n                },\r\n                intro: {\r\n                    content: '『踏歌』发动次数：#',\r\n                },\r\n                group: ['tage_drawBy', 'tage_clear'],\r\n                subSkill: {\r\n                    drawBy: {\r\n                        trigger: { global: 'phaseEnd' },\r\n                        filter(Evt, player) {\r\n                            return player.storage.tage > 0;\r\n                        },\r\n                        prompt2(Evt, player) {\r\n                            let usable = player.getDamagedHp() || 1;\r\n                            return '摸' + get.cnNumber(usable) + '张牌，并交给' + get.translation(Evt.player) + '至少一张牌';\r\n                        },\r\n                        content() {\r\n                            'step 0';\r\n                            let usable = player.getDamagedHp() || 1;\r\n                            player.draw(usable);\r\n                            'step 1';\r\n                            if (player.countCards('he') && trigger.player.isIn()) {\r\n                                Evt.target = trigger.player;\r\n                                player.chooseCard('he', true).set('ai', card => {\r\n                                    let player = _status.event.player, target = _status.event.target;\r\n                                    if (get.attitude(player, target) > 0)\r\n                                        return get.value(card, target) - get.value(card, player);\r\n                                    return get.value(card, player) - get.value(card, target);\r\n                                }).set('target', Evt.target).set('prompt', '选择交给' + get.translation(Evt.target) + '的牌');\r\n                            }\r\n                            else\r\n                                Evt.finish();\r\n                            'step 2';\r\n                            if (result.bool && result.cards) {\r\n                                player.line(Evt.target);\r\n                                player.give(result.cards, Evt.target, true);\r\n                            }\r\n                        }\r\n                    },\r\n                    clear: {\r\n                        trigger: { global: 'phaseAfter' },\r\n                        priority: 23,\r\n                        forced: true,\r\n                        silent: true,\r\n                        popup: false,\r\n                        content() {\r\n                            player.storage.tage = 0;\r\n                            player.unmarkSkill('tage');\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            aowei: {\r\n                trigger: { global: 'cardsDiscardAfter' },\r\n                firstDo: true,\r\n                direct: true,\r\n                filter(Evt, player) {\r\n                    let evt = Evt.getParent();\r\n                    if (evt.name != 'orderingDiscard' || !evt.relatedEvent || evt.relatedEvent.player == player\r\n                        || !['useCard', 'respond'].includes(evt.relatedEvent.name) || get.name(evt.relatedEvent.card) != 'sha')\r\n                        return false;\r\n                    let cards = (Evt.cards2 || Evt.cards).filterInD('d');\r\n                    let card0 = evt.relatedEvent.card;\r\n                    return cards.length > 0 && player.countCards('hs', card => get.suit(card) == get.suit(card0) || get.number(card) == get.number(card0));\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    var _a;\r\n                    let evt = trigger.getParent(), cards = (trigger.cards2 || trigger.cards).filterInD('d');\r\n                    let precard = evt.relatedEvent.card;\r\n                    Evt.precard = cards.slice(0);\r\n                    Evt.change = !precard.nature;\r\n                    player.chooseToRespond('『傲尾』：是否打出一张牌替换' + get.translation(Evt.precard), card => {\r\n                        if (!get.suit(card) && !get.number(card))\r\n                            return false;\r\n                        let precard = _status.event.precard;\r\n                        return get.suit(card) == get.suit(precard)\r\n                            || get.number(card) == get.number(precard);\r\n                    }).set('precard', precard).set('ai', card => {\r\n                        if (!_status.event.check)\r\n                            return 1 - get.value(card);\r\n                        return 7 - get.value(card);\r\n                    }).set('check', 1);\r\n                    'step 1';\r\n                    if (result.bool && result.cards) {\r\n                        player.logSkill('aowei');\r\n                        Evt.cards = result.cards.slice(0);\r\n                        trigger.cards = Evt.cards;\r\n                        player.gain(Evt.precard, 'gain2', 'log');\r\n                    }\r\n                    else\r\n                        Evt.finish();\r\n                    'step 2';\r\n                    player.chooseTarget('『傲尾』：你可以' + (Evt.change ? '弃置一名角色一张牌' : '令一名角色回复一点体力')).set('ai', function (target) {\r\n                        let player = _status.event.player;\r\n                        if (_status.event.change)\r\n                            return 1 - get.attitude(player, target);\r\n                        return get.recoverEffect(target, player, player);\r\n                    }).set('change', Evt.change);\r\n                    'step 3';\r\n                    if (result.bool && ((_a = result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                        Evt.target = result.targets[0];\r\n                        if (Evt.change) {\r\n                            player.discardPlayerCard(Evt.target, true, 'he');\r\n                        }\r\n                        else {\r\n                            Evt.target.recover();\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            meizhan: {\r\n                audio: true,\r\n                zhuSkill: true,\r\n                trigger: { global: 'gainAfter' },\r\n                filter(Evt, player) {\r\n                    if (!player.hasZhuSkill('meizhan'))\r\n                        return false;\r\n                    if (Evt.getParent().name == 'draw')\r\n                        return false;\r\n                    return Evt.player.group == player.group;\r\n                },\r\n                direct: true,\r\n                usable: 1,\r\n                content() {\r\n                    'step 0';\r\n                    Evt.target = trigger.player;\r\n                    let check = get.attitude(Evt.target, player) > 0;\r\n                    let next = Evt.target.chooseBool(get.prompt2('meizhan', player, Evt.target));\r\n                    next.set('ai', () => {\r\n                        if (!_status.event.check)\r\n                            return 0;\r\n                        return 1;\r\n                    });\r\n                    next.set('check', check);\r\n                    'step 1';\r\n                    if (result.bool) {\r\n                        player.logSkill('meizhan', Evt.target);\r\n                        let draws = [Evt.target];\r\n                        draws.add(player);\r\n                        game.asyncDraw(draws);\r\n                    }\r\n                },\r\n            },\r\n            xiandu: new toSkill('trigger', {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = 0;\r\n                },\r\n                content() {\r\n                    player.storage.xiandu++;\r\n                    player.markSkill('xiandu');\r\n                    if (player.storage.xiandu % 10 === 0) {\r\n                        player.logSkill('xiandu');\r\n                        player.draw(Math.min(player.storage.xiandu / 10, 5));\r\n                    }\r\n                },\r\n                intro: {\r\n                    content: '本局游戏内累计使用了#张牌'\r\n                }\r\n            }, 'direct').setT('useCard'),\r\n            yexi: new toSkill('active', {\r\n                filter(Evt, player) {\r\n                    return player.countCards('he');\r\n                },\r\n                filterTarget(card, player, target) {\r\n                    return target !== player && player.countDiscardableCards(target, 'he');\r\n                },\r\n                content: [() => {\r\n                        target.discardPlayerCard(player, 'he', true, `『椰熙』：请弃置${get.translation(player)}的一张牌`);\r\n                    }, () => {\r\n                        var _a;\r\n                        if ((_a = result === null || result === void 0 ? void 0 : result.cards) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            if (get.name(result.cards[0]) === 'sha' || get.type(result.cards[0]) === 'equip')\r\n                                target.useCard({ name: 'sha' }, get.cards(), player, false);\r\n                            else\r\n                                Evt.finish();\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        if (target.countCards('he')) {\r\n                            player.gainPlayerCard(target, 'he', `『椰熙』：请回收${get.translation(target)}的椰子壳🥥`);\r\n                        }\r\n                    }],\r\n                ai: {\r\n                    order: 2,\r\n                    result: {\r\n                        player(player, target) {\r\n                            if (player.hp === 1 || player.countCards('he', { type: 'equip' }) + player.countCards('h', 'sha') === 0)\r\n                                return -5;\r\n                            if (!player.needsToDiscard() || player.isEmpty(2))\r\n                                return -2;\r\n                            if (!player.hasShan())\r\n                                return -1;\r\n                            return 0;\r\n                        },\r\n                        target(player, target) {\r\n                            if (target.countCards('he', 'equip'))\r\n                                return -2;\r\n                            if (target.countCards('he') > 2)\r\n                                return -1;\r\n                            return 0;\r\n                        }\r\n                    }\r\n                }\r\n            }),\r\n            jiuxian: new toSkill('trigger', {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = 0;\r\n                },\r\n                content: [() => {\r\n                        player.storage.jiuxian++;\r\n                        player.markSkill('jiuxian');\r\n                        if (player.storage.jiuxian % 9 === 0) {\r\n                            player.chooseTarget(get.prompt2('jiuxian')).set('ai', tar => {\r\n                                let player = _status.event.player, att = get.attitude(player, tar);\r\n                                if (att)\r\n                                    return get.recoverEffect(tar, player, player);\r\n                                else if (tar.hasSkillTag('maixie'))\r\n                                    return -0.5 * att;\r\n                                else\r\n                                    return -1.5 * att;\r\n                            });\r\n                        }\r\n                    }, () => {\r\n                        if (result.bool) {\r\n                            Evt.target = result.targets[0];\r\n                            player.chooseControl('cancel2', 'recover_hp', 'lose_hp', function () {\r\n                                if (_status.event.check)\r\n                                    return 1;\r\n                                return 2;\r\n                            }).set('prompt', '令目标执行：').set('check', get.recoverEffect(Evt.target, player, player) > 0);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        switch (result.index) {\r\n                            case 0: {\r\n                                Evt.goto(0);\r\n                                break;\r\n                            }\r\n                            case 1: {\r\n                                player.logSkill('jiuxian', Evt.target);\r\n                                Evt.target.recover();\r\n                                break;\r\n                            }\r\n                            case 2: {\r\n                                player.logSkill('jiuxian', Evt.target);\r\n                                Evt.target.loseHp();\r\n                                break;\r\n                            }\r\n                        }\r\n                    }],\r\n                intro: {\r\n                    content: '本局游戏内累计使用了#张牌'\r\n                },\r\n                ai: {\r\n                    expose: 0.2\r\n                }\r\n            }, 'direct').setT('useCard'),\r\n            yujian: new toSkill('trigger', {\r\n                init(player, skill) {\r\n                    if (!player.storage[skill])\r\n                        player.storage[skill] = true;\r\n                },\r\n                filter(Evt, player) {\r\n                    if (get.type(Evt.card) === 'equip') {\r\n                        return (player.storage.yujian === true && player === Evt.player)\r\n                            || (player.storage.yujian === false && player !== Evt.player);\r\n                    }\r\n                    return false;\r\n                },\r\n                log: false,\r\n                content: [() => {\r\n                        if (player.storage.yujian === true) {\r\n                            player.chooseTarget(get.prompt2('yujian'), function (card, player, target) {\r\n                                return player != target;\r\n                            }).set('ai', tar => {\r\n                                let player = _status.event.player;\r\n                                return get.effect(tar, _status.event.card, player, player);\r\n                            }).set('card', trigger.card);\r\n                        }\r\n                        else if (player.storage.yujian === false) {\r\n                            Evt.target = trigger.player;\r\n                            player.logSkill('yujian', Evt.target);\r\n                        }\r\n                    }, () => {\r\n                        var _a;\r\n                        if (player.storage.yujian === true && ((_a = result === null || result === void 0 ? void 0 : result.targets) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                            Evt.target = result.targets[0];\r\n                            player.logSkill('yujian', Evt.target);\r\n                            trigger.targets = [Evt.target];\r\n                        }\r\n                        else if (player.storage.yujian === false) {\r\n                            trigger.finish();\r\n                            player.gain(trigger.cards);\r\n                        }\r\n                        else\r\n                            Evt.finish();\r\n                    }, () => {\r\n                        player.storage.yujian = !player.storage.yujian;\r\n                    }],\r\n            }).setT({ global: 'useCard2' }),\r\n            yuenan: new toSkill('trigger', {\r\n                filter(Evt, player) {\r\n                    return !Evt.numFixed;\r\n                },\r\n                check(Evt, player) {\r\n                    return true;\r\n                },\r\n                content() {\r\n                    'step 0';\r\n                    trigger.changeToZero();\r\n                    'step 1';\r\n                    var cards = Evt.cards = get.cards(5);\r\n                    game.cardsGotoOrdering(cards).relatedEvent = Evt.getParent();\r\n                    var dialog = ui.create.dialog('『月喃』使用一张牌', cards);\r\n                    _status.dieClose.push(dialog);\r\n                    dialog.videoId = lib.status.videoId++;\r\n                    game.addVideo('cardDialog', null, ['月喃', get.cardsInfo(cards), dialog.videoId]);\r\n                    Evt.getParent().preResult = dialog.videoId;\r\n                    game.broadcast(function (cards, id) {\r\n                        let dialog = ui.create.dialog('月喃', cards);\r\n                        _status.dieClose.push(dialog);\r\n                        dialog.videoId = id;\r\n                    }, cards, dialog.videoId);\r\n                    Evt.dialog = dialog;\r\n                    game.log(player, '亮出了', '#y牌堆顶的牌');\r\n                    player.chooseButton().set('dialog', dialog.videoId).set('filterButton', function (button) {\r\n                        let player = _status.event.player;\r\n                        return player.hasUseTarget(button.link);\r\n                    }).set('ai', button => {\r\n                        let player = _status.event.player;\r\n                        let effect = player.getUseValue(button.link);\r\n                        if (effect > 0)\r\n                            return effect;\r\n                        return 0;\r\n                    });\r\n                    'step 2';\r\n                    Evt.dialog.close();\r\n                    _status.dieClose.remove(Evt.dialog);\r\n                    game.broadcast(function (id) {\r\n                        var dialog = get.idDialog(id);\r\n                        if (dialog) {\r\n                            dialog.close();\r\n                            _status.dieClose.remove(dialog);\r\n                        }\r\n                    }, Evt.dialog.videoId);\r\n                    if (!result.links[0]) {\r\n                        Evt.goto(5);\r\n                    }\r\n                    else {\r\n                        player.chooseUseTarget(result.links[0], true, false);\r\n                        Evt.cards.remove(result.links[0]);\r\n                    }\r\n                    'step 3';\r\n                    if (Evt.cards.length == 0) {\r\n                        Evt.finish();\r\n                        return;\r\n                    }\r\n                    var cards = Evt.cards;\r\n                    var dialog = ui.create.dialog('『月喃』使用一张牌', cards);\r\n                    _status.dieClose.push(dialog);\r\n                    dialog.videoId = lib.status.videoId++;\r\n                    game.addVideo('cardDialog', null, ['月喃', get.cardsInfo(cards), dialog.videoId]);\r\n                    Evt.getParent().preResult = dialog.videoId;\r\n                    game.broadcast(function (cards, id) {\r\n                        var dialog = ui.create.dialog('月喃', cards);\r\n                        _status.dieClose.push(dialog);\r\n                        dialog.videoId = id;\r\n                    }, cards, dialog.videoId);\r\n                    Evt.dialog = dialog;\r\n                    game.log(player, '亮出了', '#y牌堆顶的牌');\r\n                    player.chooseButton().set('dialog', dialog.videoId).set('filterButton', function (button) {\r\n                        let player = _status.event.player;\r\n                        return player.hasUseTarget(button.link);\r\n                    }).set('ai', button => {\r\n                        let player = _status.event.player;\r\n                        let effect = player.getUseValue(button.link);\r\n                        if (effect > 0)\r\n                            return effect;\r\n                        return 0;\r\n                    });\r\n                    'step 4';\r\n                    if (!result.links[0]) {\r\n                        Evt.goto(5);\r\n                    }\r\n                    else {\r\n                        player.chooseUseTarget(result.links[0], true, false);\r\n                    }\r\n                    'step 5';\r\n                    Evt.dialog.close();\r\n                    _status.dieClose.remove(Evt.dialog);\r\n                    game.broadcast(function (id) {\r\n                        var dialog = get.idDialog(id);\r\n                        if (dialog) {\r\n                            dialog.close();\r\n                            _status.dieClose.remove(dialog);\r\n                        }\r\n                    }, Evt.dialog.videoId);\r\n                    if (Evt.cards.length == 0) {\r\n                        Evt.finish();\r\n                    }\r\n                },\r\n            }).setT('phaseDrawBegin1'),\r\n        },\r\n        card: {\r\n            niwei_sha: {\r\n                content() {\r\n                    Evt.target.recover(player);\r\n                    game.delay(0.5);\r\n                },\r\n            },\r\n            niwei_shan: {\r\n                content() {\r\n                    delete Evt.result;\r\n                    Evt.player.draw(2);\r\n                    game.delay(0.5);\r\n                },\r\n            },\r\n            niwei_tao: {\r\n                content() {\r\n                    Evt.target.loseHp();\r\n                    game.delay(0.5);\r\n                },\r\n            },\r\n            niwei_jiu: {\r\n                content() {\r\n                    Evt.target.chooseToUse().set('targetRequired', true);\r\n                    game.delay(0.5);\r\n                },\r\n            },\r\n        },\r\n        dynamicTranslate: {\r\n            tiantang(player) {\r\n                let str = lib.translate.tiantang_info;\r\n                if (player.storage.haoren === true)\r\n                    return `<font color=#fcd>${str.slice(0, str.indexOf(`（`)).replace(/弃置/g, `重铸`)}</font>${str.slice(str.indexOf(`（`))}`;\r\n                return str;\r\n            },\r\n            liying(player) {\r\n                let str = lib.translate.liying_info;\r\n                if (player.storage.fuyu === true)\r\n                    return `<font color=#fcd>${str.slice(0, str.indexOf(`（`)).replace(/基本/g, `通常锦囊`)}</font>${str.slice(str.indexOf(`（`))}`;\r\n                return str;\r\n            },\r\n            gunxun(player) {\r\n                let str = lib.translate.gunxun_info;\r\n                switch (player.storage.gunxun) {\r\n                    case 1: return str.replace(/①红色/g, `<span class=\"firetext\">①红色</span>`).replace(/①【杀】/g, `<span class=\"firetext\">①【杀】</span>`);\r\n                    case 2: return str.replace(/②黑色/g, `<span class=\"browntext\">②黑色</span>`).replace(/②【闪】/g, `<span class=\"browntext\">②【闪】</span>`);\r\n                }\r\n            },\r\n            fengqing(player) {\r\n                let str = lib.translate.fengqing_info;\r\n                switch (player.storage.fengqing) {\r\n                    case 1: return str.replace(/①视为使用了【酒】/g, `<span class=\"changetext\">①视为使用了【酒】</span>`);\r\n                    case 2: return str.replace(/②视为使用了【桃】/g, `<span class=\"changetext\">②视为使用了【桃】</span>`);\r\n                    case 3: return str.replace(/③跳过本回合的判定和弃牌阶段/g, `<span class=\"changetext\">③跳过本回合的判定和弃牌阶段</span>`);\r\n                }\r\n                return str;\r\n            },\r\n            erni(player) {\r\n                let str = lib.translate.erni_info;\r\n                switch (player.storage.erni) {\r\n                    case 1: return str.replace(/①【杀】/g, `<span class=\"changetext\">①【杀】</span>`);\r\n                    case 2: return str.replace(/②【闪】/g, `<span class=\"changetext\">②【闪】</span>`);\r\n                    case 3: return str.replace(/③【桃】/g, `<span class=\"changetext\">③【桃】</span>`);\r\n                }\r\n                return str;\r\n            },\r\n            luqiu(player) {\r\n                let str = lib.translate.luqiu_info;\r\n                switch (player.storage.luqiu) {\r\n                    case 1: return str.replace(/①视为使用一张【杀】/g, `<span class=\"changetext\">①视为使用一张【杀】</span>`);\r\n                    case 2: return str.replace(/②摸一张牌/g, `<span class=\"changetext\">②摸一张牌</span>`);\r\n                    case 3: return str.replace(/③弃一张牌/g, `<span class=\"changetext\">③弃一张牌</span>`);\r\n                }\r\n                return str;\r\n            },\r\n            qianjiwanbian(player) {\r\n                let str = lib.translate.qianjiwanbian_info;\r\n                return player.storage.qianjiwanbian_change ? str.replace(/雷电/g, `<span class=\"changetext\">${get.rawName(player.storage.qianjiwanbian_change)}</span>`) : str;\r\n            },\r\n            shangsheng(player) {\r\n                let str = lib.translate.shangsheng_info;\r\n                let num = player.storage.shangsheng_Buff || 1;\r\n                return num ? str.replace(/1/g, `<span class=\"changetext\">${num}</span>`) : str;\r\n            },\r\n            lianyin(player) {\r\n                let str = lib.translate.lianyin_info;\r\n                if (player.awakenedSkills.includes(`guixiang`)) {\r\n                    return str.replace(/使用/g, `<span class=\"changetext\">使用或打出</span>`);\r\n                }\r\n                return str;\r\n            },\r\n            xuanying(player) {\r\n                let str = lib.translate.xuanying_info;\r\n                if (player.awakenedSkills.includes(`houfan`)) {\r\n                    return str.replace(/使用/g, `<span class=\"changetext\">使用或打出</span>`);\r\n                }\r\n                return str;\r\n            },\r\n            shixi(player) {\r\n                let str = lib.translate.shixi_info;\r\n                if (player.storage.yuezhi) {\r\n                    return str.replace(/（你）/g, `<span class=\"changetext\">（你或一名<皇珈骑士>）</span>`);\r\n                }\r\n                return str;\r\n            },\r\n            banmao(player) {\r\n                if (player.storage.banmao)\r\n                    return `【已修改】 锁定技 你造成或受到来自【杀】的伤害时，来源摸一张牌。`;\r\n                return `锁定技 若你未受伤，你不能使用【闪】或【酒】。你造成或受到来自【杀】的伤害时，来源摸一张牌。`;\r\n            },\r\n            daoyi(player) {\r\n                let str = lib.translate.daoyi_info;\r\n                switch (player.storage.daoyi) {\r\n                    case 0: return str.replace(/①颜色/g, `<span class=\"changetext\">①颜色</span>`);\r\n                    case 1: return str.replace(/②点数/g, `<span class=\"changetext\">②点数</span>`);\r\n                    case 2: return str.replace(/③花色/g, `<span class=\"changetext\">③花色</span>`);\r\n                    case 3: return str.replace(/④牌名/g, `<span class=\"changetext\">④牌名</span>`);\r\n                }\r\n                return str;\r\n            },\r\n            xiangnuo(player) {\r\n                let str = lib.translate.xiangnuo_info;\r\n                switch (player.storage.xiangnuo) {\r\n                    case 1: return str.replace(/①进入/g, `<span class=\"changetext\">①进入</span>`);\r\n                    case 2: return str.replace(/②离开/g, `<span class=\"changetext\">②离开</span>`);\r\n                }\r\n                return str;\r\n            },\r\n            qingsui(player) {\r\n                let str = lib.translate.qingsui_info;\r\n                switch (player.storage.qingsui) {\r\n                    case 0: return str.replace(/①『集爱』/g, `${lib.spanClass(`①『集爱』`, 'changetext')}`);\r\n                    case 1: return str.replace(/②『盛阴』/g, `${lib.spanClass(`②『盛阴』`, 'changetext')}`);\r\n                    case 2: return str.replace(/③『全域』/g, `${lib.spanClass(`③『全域』`, 'changetext')}`);\r\n                }\r\n                return str;\r\n            },\r\n            tuncai(player) {\r\n                let str = lib.translate.tuncai_info;\r\n                let result = /(阳~.*?)[；。].*(阴~.*?)[；。]/g.exec(str);\r\n                let yang = result[1], yin = result[2];\r\n                if (player.storage.tuncai === true)\r\n                    return str.replace(yang, lib.spanClass(yang, 'changetext'));\r\n                return str.replace(yin, lib.spanClass(yin, 'changetext'));\r\n            },\r\n            yujian(player) {\r\n                let str = lib.translate.yujian_info;\r\n                let result = /(阳~.*?)[；。].*(阴~.*?)[；。]/g.exec(str);\r\n                let yang = result[1], yin = result[2];\r\n                if (player.storage.yujian === true)\r\n                    return str.replace(yang, lib.spanClass(yang, 'changetext'));\r\n                return str.replace(yin, lib.spanClass(yin, 'changetext'));\r\n            },\r\n            yinxu(player) {\r\n                if (player.storage.yinxu === true)\r\n                    return `转换技 你可以将一张${lib.spanClass(`①锦囊牌`, 'changetext')}②装备牌当作无视距离和次数限制的【杀】使用；以此使用的【杀】被抵消时，你可以令你或目标调整手牌至上限。`;\r\n                return `转换技 你可以将一张①锦囊牌${lib.spanClass(`②装备牌`, 'changetext')}当作无视距离和次数限制的【杀】使用；以此使用的【杀】被抵消时，你可以令你或目标调整手牌至上限。`;\r\n            },\r\n        },\r\n        translate: {\r\n            xinyuelan: `新月岚`,\r\n            xinyuelan_ab: `炒作大师`,\r\n            chisha: `迟砂`,\r\n            chisha_info: `准备阶段，你可以将手牌调整至全场唯一最多，若如此做，你不能使用本回合摸到的牌直到回合结束。`,\r\n            chisha_append: lib.figurer(`FAQ：“将手牌调整至全场唯一最多”不属于摸牌`),\r\n            wujian: `鹜荐`,\r\n            wujian_info: `你对其他角色造成伤害或受到其他角色的伤害后，若你手牌数多于对方，你可以与其交换手牌。`,\r\n            Shiranekoyuki: `白音小雪`,\r\n            jvliu: `拒流`,\r\n            jvliu_info: `其他角色使用非基本牌时，你可以失去一点体力取消之。`,\r\n            jvliu_append: lib.figurer(`特性：干扰`),\r\n            wuxia: `无瑕`,\r\n            wuxia_info: `觉醒技 准备阶段，若你体力为1，你增加一点体力并回复一点体力，弃置三张手牌（若不足则改为失去『拒流』）并获得『鸢揺』。`,\r\n            wuxia_yuanyao: `鸢揺(雪)`,\r\n            wuxia_yuanyao_append: lib.figurer(`特性：制衡`),\r\n            TsukushiAria: `月紫亚里亚`,\r\n            tatongling: `彤灵`,\r\n            tatongling_info: `一名角色体力流失或受到来源为你的伤害后，你可令其选择一项：\r\n\t\t\t将两张手牌置于你的武将牌上；翻面并回复一点体力，令你的『彤灵』失效直到本阶段结束。<br>\r\n\t\t\t当你的阶段被跳过时，你获得武将牌上的牌。`,\r\n            tatongling_append: lib.figurer(`特性：压制`),\r\n            yumeng: `预梦`,\r\n            yumeng2: `预梦`,\r\n            yumeng_info: `你可以跳过判定阶段与摸牌阶段，指定一名其他角色，其受到的伤害改为体力流失，直到你的下个回合开始。`,\r\n            AoiYui: `碧居结衣`,\r\n            suyuan: `溯愿`,\r\n            suyuan_info: `你的牌进入弃牌堆时，若这些牌包含三种或以上花色，\r\n\t\t\t你可以令一名其他角色获得这些牌并受到一点无来源的伤害，你于下个准备阶段获得其等量牌。`,\r\n            mujian: `幕间`,\r\n            mujian_info: `锁定技 若你以体力为 0 的状态死亡，下个轮次开始时，你复活并发现一个主动技，获得之直到你下次死亡。`,\r\n            NachoNeko: `甘城なつき`,\r\n            cirong: `赐绒`,\r\n            cirong_info: `出牌阶段限一次，你可以将一张手牌交给相邻角色。`,\r\n            maoyu: `猫羽`,\r\n            maoyu_info: `回合内，其他角色因为技能获得牌时，你可以令其选择一项：\r\n\t\t\t交给你两张牌；弃置一张牌，令其下家摸一张牌。`,\r\n            TEST: `测试员`,\r\n            Ruki: `琉绮Ruki`,\r\n            Ruki_ab: `琉绮`,\r\n            beixie: `备械`,\r\n            beixie_info: `${lib.discoloration1}游戏开始时，你可以指定获得牌堆中的一张牌，且若为武器牌，你立即装备之。`,\r\n            hunzhan: `混战`,\r\n            hunzhan_info: `锁定技 一名角色受到伤害时，其可立即使用一张牌，若其如此做，你摸一张牌。`,\r\n            YukiTuan: `雪团yuki`,\r\n            YukiTuan_ab: `雪团`,\r\n            chentu: `衬兔`,\r\n            chentu_info: `出牌阶段限一次，你可以弃置任意张牌，然后若你的手牌数为全场最低，你于下个回合开始时摸此次弃牌数两倍的牌。`,\r\n            chentu_append: lib.figurer(`特性：制衡`),\r\n            sishu: `饲鼠`,\r\n            sishu_info: `锁定技 回合内，你需要使用基本牌时，能且仅能将一组花色的牌交给一名其他角色视为使用之。`,\r\n            sishu_append: lib.figurer(`一组花色的牌：即四张花色各不相同的牌；特性：自肃（不能以其他方式使用基本牌）`),\r\n            Nyanners: `Nyanners`,\r\n            Nyanners_ab: `喵喵人`,\r\n            shenghuo: `圣火`,\r\n            shenghuo_info: `出牌阶段限X次，你可以观看牌堆顶与底各X张牌，然后将其中的任意张置于牌堆另一端。（X为你上一次受到伤害的伤害值+1）`,\r\n            shenghuo_append: lib.figurer(`特性：控顶`),\r\n            dipo: `底破`,\r\n            dipo_info: `锁定技 若你已受伤，你摸牌时从牌堆底摸取且摸牌量+1。`,\r\n            miaoche: `喵车`,\r\n            miaoche_info: `主公技 英V于弃牌阶段弃置牌后，你可以获得其中一张弃牌。`,\r\n            Ironmouse: `Ironmouse`,\r\n            Ironmouse_ab: `铁耗子`,\r\n            haosun: `耗损`,\r\n            haosun_info: `回合开始时，你可以选择一项：<br>回复1点体力以重置此技能并修改『伴猫』，然后你本回合摸牌量-1；声明一种你可以使用的基本牌并令你不能使用之，然后你本回合摸牌量+1。`,\r\n            banmao: `伴猫`,\r\n            banmao_info: `锁定技 若你未受伤，你不能使用【闪】或【酒】。你造成或受到来自【杀】的伤害时，来源摸一张牌。`,\r\n            banmao_rewrite: `伴猫·改`,\r\n            banmao_rewrite_info: `锁定技 你造成或受到来自【杀】的伤害时，来源摸一张牌。`,\r\n            Froot: `Froot`,\r\n            Froot_ab: `巫妖`,\r\n            exiao: `恶哮`,\r\n            exiao_info: `你使用通常锦囊牌时，可以进行一次判定，若结果为黑色，其不能被【无懈可击】抵消且你获得判定牌。`,\r\n            jinmei: `禁魅`,\r\n            jinmei_info: `轮次技 其他角色的回合开始时，你可以交给其一张黑色牌，然后其本回合摸牌量-1。`,\r\n            jinmei_append: lib.figurer(`特性：干扰`),\r\n            Veibae: `Veibae`,\r\n            Veibae_ab: `白恶魔`,\r\n            zhexun: `哲循`,\r\n            zhexun0: `哲循`,\r\n            zhexun_info: `你使用的一张牌若与你本回合已使用的所有牌颜色相同，其不可被响应且可以额外指定一个目标。`,\r\n            yuci: `欲词`,\r\n            yuci_info: `锁定技 若场上的其他角色均为同一性别，你每个阶段首次摸牌量+1。`,\r\n            Melody: `Projekt Melody`,\r\n            Melody_ab: `Mel`,\r\n            kuangbiao: `狂飙`,\r\n            kuangbiao_info: `锁定技 你的♥手牌视为【无中生有】。你使用的♥手牌结算后，你失去不为1的一点体力并将此牌置于武将牌上。你已受伤时，可以将『狂飙』牌如手牌般使用或打出。`,\r\n            leizhu: `磊诛`,\r\n            leizhu_info: `你每使用三张锦囊牌，可以为此牌增加一个目标，然后其与你各受到一点伤害。`,\r\n            tonggan: `同甘`,\r\n            tonggan_info: `主公技 锁定技 与你势力相同的角色，在奇数/偶数轮次内，每阶段首次摸牌量-1/+1。`,\r\n            Silvervale: `Silvervale`,\r\n            Silvervale_ab: `樱花狼灵`,\r\n            yingling: `樱聆`,\r\n            yingling_info: `锁定技 你每阶段首次摸牌时，进行一次判定，若结果为红色，本次摸牌量+1。`,\r\n            duchun: `渎纯`,\r\n            duchun_info: `你的判定牌生效后，你可以令一名其他角色获得之，其下次摸牌量-1。`,\r\n            ShishiroBotan: `狮白牡丹`,\r\n            dan: `弹`,\r\n            sbliedan: `烈弹`,\r\n            sbliedan2: `烈弹`,\r\n            sbliedan_info: `当你使用【杀】指定一名其他角色时，你可以令其将X张牌置于你的武将牌上，称之为「弹」。若如此做，一个弃牌阶段结束时，其可以获得等量的「弹」。若回合结束时你的武将牌上仍有「弹」，你获得之（X等于当前轮次数且至多为7）。`,\r\n            buqiang: `补枪`,\r\n            buqiang_info: `当其他角色体力值改变为1时，你可以对其使用一张【杀】。`,\r\n            PinkyPopHepburn: `PinkyPopHepburn`,\r\n            PinkyPopHepburn_ab: `PPH`,\r\n            pphpanfeng: `攀峰`,\r\n            pphpanfeng_info: `出牌阶段开始时或你受到伤害后，你可以进行一次判定，若结果为红色，你指定体力最多的一名角色，对其造成一点伤害；若其因此进入濒死状态，你不能发动『攀峰』直到本回合结束。`,\r\n            lanyue: `揽月`,\r\n            lanyue_info: `限定技 一名角色使用【杀】造成伤害后，你可以弃一张牌令其体力上限+1，并与其各摸伤害值的牌。`,\r\n            HosimiyaSio: `星宫汐`,\r\n            yuanyao: `鸢揺`,\r\n            yuanyao_info: `出牌阶段限X次，若你的手牌数不多于体力上限，你可以交换体力值与手牌数。（X为场上存在的女性角色数）`,\r\n            yuanyao_append: lib.figurer(`特性：制衡`),\r\n            gongni: `宫逆`,\r\n            gongni_info: `限定技 准备阶段开始时，或你于回合外使用或打出一张牌后，若所有角色均已受伤，你可以令所有角色依次交换体力值与已损失体力值。`,\r\n            ShikaiYue: `紫海由爱`,\r\n            lianyin: `联音`,\r\n            lianyin_info: `每回合限X次，其他角色在你的回合内使用牌时，你可以与其各摸一张牌。（X为你的体力上限）`,\r\n            guixiang: `归乡`,\r\n            guixiang_info: `<font color=#caf>觉醒技</font> 准备阶段，若你发动『联音』的次数不少于存活角色数，你增加一点体力上限并回复一点体力，将『联音』的“使用”改为“使用或打出”。`,\r\n            KurokiriAria: `黑桐亚里亚`,\r\n            xuanying: `玄荫`,\r\n            xuanying_info: `每回合限X次，其他角色在你的回合内使用牌时，你可以交给其一张牌，然后令你或其摸一张牌，若你交出了装备牌，则额外摸X张。（X为你装备区的牌数且至少为1）`,\r\n            houfan: `候返`,\r\n            houfan_info: `<font color=#b56>限定技</font> 出牌阶段，若你手牌数为全场最少，你可以减1点体力上限，从弃牌堆随机获得四张装备牌，并将『玄荫』的“使用”改为“使用或打出”。`,\r\n            shanbao: `扇宝`,\r\n            fengxu: `风许`,\r\n            fengxu_info: `你使用牌指定唯一目标时，可以将其区域内的一张牌移至其下家（可替换），若未发生替换，则对其下家重复此流程，直到发生替换或重复了五次。<br>若你的牌因此发生了替换，此技能结算后你摸重复次数的牌，然后不能发动此技能直到你下一次弃置手牌。`,\r\n            fengxu_append: lib.figurer(`特性：捡瓶子`),\r\n            qiudi: `秋蒂Q`,\r\n            xiangnuo: `香诺`,\r\n            xiangnuo2: `香诺-转换`,\r\n            xiangnuo_info: `转换技 当牌①进入②离开你的装备区时，你可以令一名角色摸两张牌，若其体力为全场最低，额外回复一点体力。<br>\r\n\t\t\t出牌阶段限一次，你可以重铸点数之和为Q(12)的手牌并转换一次『香诺』。`,\r\n            xiaoxiayu: `Siva小虾鱼`,\r\n            xiaoxiayu_ab: `小虾鱼`,\r\n            tanghuang: `堂皇`,\r\n            tanghuang_info: `每回合限一次，当你成为其他角色使用牌的目标时，你可以摸X张牌并令其弃置你和其共计X+3张牌，然后弃置牌数：较少者～受到一点伤害；较多者～摸弃牌差的牌。（X为你已损失的体力值且至少为1）`,\r\n            xiejiang: `蟹酱`,\r\n            xiejiang_info: `锁定技 你摸两张以上的牌后，获得1点护甲；你失去护甲后，当前回合角色摸两张牌。`,\r\n            tianxixi: `田汐汐`,\r\n            lache: `拉扯`,\r\n            lache_info: `你回复体力时，可以令当前回合角色摸两张牌；你弃置两张以上的牌或护甲减少后，可以回复一点体力，若发生在回合外，你摸等量牌。`,\r\n            danfu: `蛋孵`,\r\n            danfu_info: `锁定技 结束阶段，若你本回合未造成伤害，你失去一点体力并获得1点护甲；你失去1点护甲后，当前回合角色摸一张牌。`,\r\n            iiivan: `伊万`,\r\n            shuipo: `水魄`,\r\n            shuipo_info: `锁定技 你弃置三张以上的牌或失去最后1点护甲后，回复一点体力并摸一张牌；你每阶段首次使用锦囊牌时，失去一点体力并弃置任意张牌。`,\r\n            ming_pianchao: `片超`,\r\n            pianchao: `片超`,\r\n            pianchao_phaseUseBy: `片超`,\r\n            pianchao_info: `你体力流失后，可以亮出两张手牌并获得1点护甲；当你弃置亮出的手牌时，可以使用其中一张，并于此额定阶段结束后进行一个额外的出牌阶段。`,\r\n            shenxiaoya: `申䒕雅`,\r\n            xyshixi: `实习`,\r\n            xyshixi_info: `出牌阶段限一次，你可以对一名角色造成一点伤害，然后令其回复一点体力。`,\r\n            wenxin: `闻新`,\r\n            wenxin_info: `结束阶段，你可以令本回合回复过体力的角色各摸一张牌。`,\r\n            lanruo: `兰若Ruo`,\r\n            dieyuan: `蝶缘`,\r\n            dieyuan_info: `其他角色回复1点体力后，你可以令其摸X张牌，令其选择一项：<br>令你回复一点体力；交给你X张牌。（X为你与其的体力差且至少为1）`,\r\n            shengyang: `盛阳`,\r\n            shengyang_info: `出牌阶段限一次，你可以交给一名其他角色一张牌并进行一次判定，若结果的点数：<br>不大于2X~你获得其至多2X张牌；大于2X~其回复一点体力。`,\r\n            lanre: `兰若Re`,\r\n            daoyi: `道易`,\r\n            daoyi_info: `转换技 你可以修改场上一次判定结果的①颜色②点数③花色④牌名。此技能转换至①时，你可以对当前回合角色造成1点雷电伤害。`,\r\n            shengyin: `盛阴`,\r\n            shengyin_info: `出牌阶段限一次，你可以展示其他角色的一张手牌并令其进行一次判定，若结果与展示牌：类型相同～你获得展示牌；颜色相同～你与其各摸一张牌。`,\r\n            hunmiaomiao: `魂喵喵`,\r\n            hun: `魂`,\r\n            xiuyou: `修又`,\r\n            xiuyou_info: `锁定技 你进行判定/受到伤害后，你将判定牌/牌堆顶牌置于武将牌上，称为「魂」。你进入濒死状态时，若「魂」的数量多于2，你需将一张「魂」交给当前回合角色，令其选择一项：<br>\r\n\t\t\t将全部手牌与你的「魂」交换；令你摸「魂」数量张牌；令你回复一点体力。<br>\r\n\t\t\t若此技能多次对其发动，改为选择两项。`,\r\n            jiyuan: `楫渊`,\r\n            jiyuan_info: `轮次技 一名角色的准备阶段，你可以令其进行一次判定，若结果为：红色~其摸两张牌；黑色~其受到一点无来源的伤害。`,\r\n            caicai: `菜菜姐`,\r\n            tibing: `体并`,\r\n            tibing_info: `锁定技 你跳过不为出牌阶段的阶段。你于出牌阶段开始时，摸两张牌并获得自己场上的所有牌；于出牌阶段结束时，展示并弃置手牌中的非基本牌。`,\r\n            guangtui: `广推`,\r\n            guangtui_info: `若你已受伤，你可以扣减一点体力上限，将其他角色的弃牌阶段改为自己的出牌阶段。`,\r\n            mibai: `米白zzz`,\r\n            mibai_ab: `米白`,\r\n            zhepie: `折撇`,\r\n            zhepie_info: `准备阶段，你可以亮出牌堆顶牌并令一名角色获得之，其无法使用同类型的牌直到其回合结束。`,\r\n            chumo: `除魔`,\r\n            chumo_info: `轮次技。你区域内的牌进入弃牌堆时，你可以令一名角色获得之，若此牌无法被立即使用，你摸两张牌。`,\r\n            Ahab: `亚哈`,\r\n            ahbingyi: `秉义`,\r\n            ahbingyi_info: `其他角色摸牌时，若其手牌为全场最高，你可以失去一点体力，取消之并弃置其一张牌。`,\r\n            sujian: `肃监`,\r\n            sujian_info: `你受到来自一张牌的伤害/发动『秉义』时，可以将此牌/一张手牌置于武将牌上，称为「肃」。<br>与「肃」同名称或花色的牌在被使用时，你可以将一张对应的「肃」置于牌堆顶，取消此牌任意名目标。`,\r\n            sujian_append: lib.figurer(`特性：控顶 干扰`),\r\n            FushimiGaku: `伏见学`,\r\n            exi: `恶戏`,\r\n            exi_info: `出牌阶段限一次，你可与一名有手牌的角色猜拳：赢家摸两张牌，输家视为对赢家使用了一张【杀】。若以剪刀输，则将使用【杀】改为使用【决斗】。`,\r\n            suisui: `祟崇`,\r\n            suisui_info: `锁定技 当你的体力值不为1/为1时，防止你每回合首次受到的无/有来源伤害。`,\r\n            Xiaorou: `小柔`,\r\n            rouqing: `柔情`,\r\n            rouqing_info: `每回合限一次，一名角色体力减少1点后，你可以令其观看牌堆顶的四张牌并将至少（3）张牌置于牌堆底，获得其余的牌。`,\r\n            rouqing_append: lib.figurer(`特性：卖血`),\r\n            guangying: `光萦`,\r\n            guangying_info: `锁定技 当你一次性获得四张以上的牌后，你回复一点体力；当你不因使用失去手牌后，你『柔情』的（）值-1，直到你下一次发动『柔情』。`,\r\n            Ailurus: `艾露露`,\r\n            aldanyan: `胆燕`,\r\n            aldanyan_info: `出牌阶段限一次，你可以将两张牌交给体力不少于你的一名角色，令其选择一项：\r\n\t\t\t令你获得其三张牌；受到你造成的一点伤害。`,\r\n            aldanyan_append: lib.figurer(`特性：直接伤害`),\r\n            lunao: `胡闹`,\r\n            lunao_info: `当你造成伤害时，若目标体力不多于你，你可以令本次伤害改为指定属性且此伤害+1，本次伤害结算后立即结束当前回合。`,\r\n            ByakuyaMayoi: `白夜真宵`,\r\n            bykuangxin: `狂信`,\r\n            bykuangxin_info: `出牌阶段限一次，你可以进行判定直到出现两次点数为A～10的结果，然后你获得其他判定牌，并根据判定顺序组合（第一次为个位、第二次为十位）执行：<br>\r\n\t\t\t${lib.spanClass(`01～05`, `greentext`)}--摸两张牌增加一点体力上限；\r\n\t\t\t${lib.spanClass(`06～40`, `changetext`)}--回复一点体力；\r\n\t\t\t${lib.spanClass(`41～70`, `bluetext`)}--视为使用一张【决斗】；\r\n\t\t\t${lib.spanClass(`71～95`, `browntext`)}--失去一点体力并弃置手牌至上限；\r\n\t\t\t${lib.spanClass(`96～100`, `legendtext`)}--依次获得其他角色随机一张手牌并扣减一点体力上限。`,\r\n            Mamoru: `高原守`,\r\n            shoumi: `密守`,\r\n            shoumi_info: `锁定技 当且仅当你的体力变为0时，你进入濒死状态。你的体力小于/大于0时，视为拥有『英姿』/『鬼才』。`,\r\n            shoumi_yingzi: `英姿(密)`,\r\n            shoumi_yingzi_info: `锁定技 摸牌阶段摸牌时，你额外摸一张牌；你的手牌上限为你的体力上限。`,\r\n            shoumi_guicai: `鬼才(密)`,\r\n            shoumi_guicai_info: `在任意角色的判定牌生效前，你可以打出一张牌代替之`,\r\n            yanwang: `妄诳`,\r\n            yanwang_info: `其他角色使用牌指定你为目标时，其可以令你回复一点体力，然后展示并获得你的一张牌；若其因此获得了黑色牌，你可以令其视为对你指定的一名角色使用一张【决斗】。`,\r\n            Niuniuzi: `牛牛子`,\r\n            qiying: `奇嘤`,\r\n            qiying_info: `你于其他角色的回合受到伤害后，你可以翻面并视为使用一张【南蛮入侵】。`,\r\n            hengxuan: `恒宣`,\r\n            hengxuan_info: `结束阶段，你可以摸两张牌；当你被其他角色指定为牌的唯一目标时，立即弃置以此法摸到的牌。`,\r\n            Zaodaoji: `早稻叽`,\r\n            guangan: `珖黯`,\r\n            guangan_info: `你的上家对你使用牌，或你对你的下家使用牌时，你可以摸一张牌。每轮限X次（X为场上存活的其他角色数）。`,\r\n            guangan_append: lib.figurer(`特性：易上手`),\r\n            lanxuan: `澜绚`,\r\n            lanxuan_info: `每回合每项限一次，你造成或受到伤害后，可以立即无视距离与次数限制使用一张牌。`,\r\n            zonghe: `纵合`,\r\n            zonghe_info: `<font color=#fbd>主公技</font> 游戏开始时，你可以指定一名社势力角色，你对其发动『珖黯』时无视座次限制。`,\r\n            Hiiro: `希萝`,\r\n            jiace: `铗策`,\r\n            jiace_info: `你成为黑色牌的目标时，可以将一张与之同花色的手牌交给来源，为此牌增加或减少一个目标。若为你本回合首次发动『铗策』，你于此牌结算后获得之。`,\r\n            xiangying: `襄英`,\r\n            xiangying_info: `出牌阶段限一次，你可将任意红色牌交给一名手牌数小于你的角色，然后若其手牌数大于你，其展示手牌，你摸其中红黑色牌数差的牌。`,\r\n            xiangying_append: lib.figurer(`特性：难上手`),\r\n            Moemi: `萌实`,\r\n            chengzhang: `澄涨`,\r\n            chengzhang_info: `你装备区内的一张牌进入弃牌堆时，你可以令一名其他角色使用之。`,\r\n            mengdong: `萌动`,\r\n            mengdong_info: `你使用牌指定本回合未指定过的角色为目标时，若其装备区牌数为奇数，你可以摸一张牌。`,\r\n            NatsumiMoe: `夏实萌惠`,\r\n            moemanyi: `满溢`,\r\n            moemanyi_info: `锁定技 你的攻击范围为全场最高/最低时，不能成为延时锦囊牌/黑色【杀】的目标。`,\r\n            cuchuan: `粗串`,\r\n            cuchuan_info: `摸牌阶段，你可以放弃摸牌，改为令距离为1的角色各摸一张牌，然后你获得这些角色各一张牌。`,\r\n            Harusaruhi: `春猿火`,\r\n            huoju: `火居`,\r\n            huoju_info: `锁定技 你和相邻角色造成的伤害改为火焰伤害。你造成或受到火焰伤害后，若伤害来源手牌/体力全场最少，其翻面并摸一张牌/回复一点体力。`,\r\n            zouyang: `奏扬`,\r\n            zouyang_info: `你使用非装备牌仅指定一名角色为目标时，可使其相邻角色也成为此牌目标，其中不能成为合法目标的摸一张牌，若均摸牌或均成为目标，你不能再发动此技能直到回合结束。`,\r\n            Koko: `幸祜`,\r\n            xiezhen: `谐振`,\r\n            xiezhen_info: `距离你为1的角色造成伤害时，你可以翻面并☆弃置其一张牌，若为装备牌，此伤害+1且你可以重复☆。`,\r\n            wenzhou: `吻昼`,\r\n            wenzhou_info: `锁定技 你受到大于1点的伤害后，令来源翻面；一名角色翻至正面时，令其摸一张牌。`,\r\n            NecoraNyaru: `猫雷NyaRu`,\r\n            NecoraNyaru_ab: `猫雷`,\r\n            miaolu: `露佐`,\r\n            miaolu_info: `一名角色进入濒死状态时，你可以弃置其一张手牌，若为基本牌，你获得之；若不为，其回复一点体力。`,\r\n            benglei: `绷雷`,\r\n            benglei_info: `你受到 1 点伤害后，可以令一名角色进行一次判定，若结果为：♠～对其造成与本次伤害等量的雷电伤害；♣～依次弃置其两张牌；红色～对其发动一次『露佐』。`,\r\n            Shiratama: `白玉`,\r\n            meihua: `莓华`,\r\n            meihua_info: `轮次技 当♣牌不因弃置进入弃牌堆时，你可以获得之。`,\r\n            shentian: `审甜`,\r\n            shentian_info: `出牌阶段限一次，你可以观看一名角色的手牌并进行一次判定，然后重铸其中与判定牌花色不同的牌，每种花色至多一张。`,\r\n            KotobukiYume: `琴吹梦`,\r\n            xuanquan: `选权`,\r\n            xuanquan_backup: `选权`,\r\n            xuanquan_info: `出牌阶段限一次，你可以废除一个装备栏，获得其他角色的一张牌并令其获得『选权』。其他角色废除装备栏后，你摸一张牌。`,\r\n            rusu: `入俗`,\r\n            rusu_info: `你判定/装备区的牌减少时，你可以将一张锦囊/装备牌置于场上同区域。`,\r\n            HIMEHINA: `田中姬&铃木雏`,\r\n            HIMEHINA_ab: `姬&雏`,\r\n            jichu: `姬雏轮舞`,\r\n            jichu_info: `若本回合被使用的上一张牌为锦囊牌，你使用牌可以额外选择一个目标。若本回合被使用的上一张牌为♦️，你使用牌生效并结算后摸一张牌。`,\r\n            mingshizhige: `命逝之歌`,\r\n            mingshizhige_info: `当你受到 1 点伤害后，你可以重铸所有手牌，然后使用因此失去的其中一张。`,\r\n            SephiraSu: `塞菲拉·苏`,\r\n            mishu: `数之秘术`,\r\n            mishu_info: `其他角色的回合结束时，你可以选择一项：<br>\r\n\t\t\t获得本回合进入弃牌堆的任意类型不同的牌，且若这些牌之和为质数，令其回复1点体力； 令其获得本回合进入弃牌堆的一种类型的牌，且若这些牌点数之积大于13，对其造成1点伤害。每轮每项限一次。`,\r\n            xingchen: `未卜星辰`,\r\n            xingchen_info: `当你受到伤害后，可摸五张牌，然后将五张牌以任意顺序置于牌堆顶。`,\r\n            xingchen_append: lib.figurer(`特性：控顶`),\r\n            CierraRunis: `谢拉·露妮丝`,\r\n            CierraRunis_ab: `谢拉`,\r\n            minghuahongxiao: `鸣花轰咲`,\r\n            minghuahongxiao_info: `你在回合外使用牌或在回合内弃置牌时，可根据你失去的牌执行对应项：基本牌~为下一张牌额外指定一名目标；锦囊牌~结束当前阶段，然后可以令一名没有手牌的角色摸两张牌；装备牌~回复1点体力。`,\r\n            Taffy: `永雏塔菲`,\r\n            qianqi: `迁奇`,\r\n            qianqi_info: `一名角色的回合开始时，你可以弃置X张牌，交换本回合的两个阶段，或令其本回合使用的前X张牌可指定目标数为1；<br>然后若本回合没有角色受到伤害，重置X（X为此技能发动的次数且至少为1）。`,\r\n            chutan: `雏探`,\r\n            chutan_info: `出牌阶段限一次，你可以弃置一张牌，选择两名其他角色。你的下个回合开始前，若目标角色于其回合使用牌指定过另一名目标角色为目标，你于其回合结束时获得其本回合使用的实体牌，否则其不能成为『雏探』的目标。`,\r\n            shanguangpika: `闪光pika`,\r\n            shanguangpika_ab: `闪光皮卡`,\r\n            yikai: `异开`,\r\n            yikai_info: `限定技 出牌阶段，你可令一名角色摸2张牌并对其造成一点雷电伤害。然后你可以选择其的一个限定技，若该技能：<br>\r\n\t\t\t未发动~该限定技失效直到你的下个回合开始；已发动~此回合结束后视为该限定技未发动过。`,\r\n            pkyuanjun: `元昀`,\r\n            pkyuanjun_info: `每回合限一次，你造成或受到雷电伤害时，可以将手牌调整至与对方相同，若你未因此摸牌，你回复一点体力。`,\r\n            Merry: `咩栗`,\r\n            qinhuo: `侵火`,\r\n            qinhuo_info: `当一名角色使用的【火攻】结算后，若之未造成伤害，你可以令另一名角色获得之。`,\r\n            lvecao: `略草`,\r\n            lvecao_info: `你受到伤害后，可以视为使用一张【铁索连环】，若有角色因此重置，你可以获得其区域内一张可见牌。`,\r\n            yangxi: `羊袭`,\r\n            yangxi_info: `出牌阶段限一次，你可以将一张非基本牌置于你的判定区，然后对一名角色造成1点雷电伤害。`,\r\n            Umy: `呜米`,\r\n            naisi: `奶死`,\r\n            naisi_info: `你回复过多次体力的回合结束时，你可以对一名角色造成X点伤害。（X为你本回合回复体力的次数）`,\r\n            tuzai: `图崽`,\r\n            tuzai_info: `你对一名角色造成伤害后，可以获得其区域内一张可见牌，并令其回复一点体力。`,\r\n            wuneng: `呜能`,\r\n            ming_wuneng: `呜能`,\r\n            wuneng_info: `出牌阶段，你可以亮出一张【桃】或【桃园结义】并摸一张牌。`,\r\n            RinaHayashi: `林莉奈`,\r\n            xilv: `习律`,\r\n            xilv_info: `其他角色因为技能摸牌时，你可以交给其一张手牌，然后其选择一项：<br>1.交给你摸到的牌；2.若你没有对应技能，令你获得之，直到你的下个回合结束。`,\r\n            bana: `拔奈`,\r\n            bana_info: `当一名角色的体力改变后，若其牌数≤体力值≤场上角色数，你可以令其摸一张牌。`,\r\n            Kira: `姬拉Kira`,\r\n            Kira_ab: `姬拉`,\r\n            weiguang: `微光`,\r\n            weiguang_info: `回合开始时，你可以使用一张牌，若与你以『微光』使用的每一张牌类型相同，你摸一张牌。`,\r\n            liangqin: `良寝`,\r\n            liangqin_info: `<font color=#f57>限定技</font> 你脱离濒死状态后，可以令你下个回合内第X次摸牌的摸牌量+X。`,\r\n            Menherachan: `七濑胡桃`,\r\n            shang: `裳`,\r\n            shangbei: `裳备`,\r\n            shangbei_info: `你受到伤害后，可以展示牌堆顶牌，若你没有与之花色相同的「裳」，你将之置于武将牌上，称为「裳」，然后摸一张牌。<br>出牌阶段开始时，你可以令一名角色获得某一类型的「裳」，若为其他角色获得，你回复一点体力。`,\r\n            qianqing: `迁情`,\r\n            qianqing_info: `锁定技 回合开始时，若你没有「裳」，你受到一点无来源的伤害。`,\r\n            liqingge: `李清歌`,\r\n            tage: `踏歌`,\r\n            tage_info: `每回合限X次，当一名角色于其回合内使用一张牌后，你可以打出一张点数与之相差1的牌替换之。你以此法获得牌的回合结束时，可以摸X张牌，然后将一张手牌交给当前回合角色。（X为你已损失的体力值且至少为1）`,\r\n            JingujiTamamo: `神宫司玉藻`,\r\n            aowei: `傲尾`,\r\n            aowei_info: `当其他角色的【杀】结算完毕即将进入弃牌堆时，你可打出一张同花色或点数的手牌替换之。若你获得的牌：<br>有属性~你可以令一名角色回复一点体力；无属性~你可以弃置一名角色的一张牌。`,\r\n            meizhan: `魅绽`,\r\n            meizhan_info: `主公技 每回合限一次，与你同势力的角色不因摸牌获得牌时，可以与你各摸一张牌。`,\r\n            Kino: `吉诺儿kino`,\r\n            Kino_ab: `吉诺儿`,\r\n            xiandu: `显渡`,\r\n            xiandu_info: `锁定技 一局游戏内，你每使用十张牌，摸X张牌（X为此技能被发动的次数且至多为5）`,\r\n            yexi: `椰熙`,\r\n            yexi_info: `出牌阶段，你可以令一名其他角色弃置你的一张牌，若其弃置了【杀】或装备牌，其将牌堆顶牌当作【杀】对你使用，然后你获得其一张牌。`,\r\n            tangjiuxia: `唐九夏`,\r\n            jiuxian: `韭仙`,\r\n            jiuxian_info: `你每使用九张牌，你可以令一名角色回复或失去一点体力。`,\r\n            yujian: `御剑`,\r\n            yujian_info: `转换技 阳~你使用装备牌时，可以摸一张牌并令其他角色装备之；阴~其他角色使用装备牌时，你可以弃一张牌并令你获得之。`,\r\n            Bafuko: `晴步子`,\r\n            shangsheng: `能力上升`,\r\n            shangsheng_info: `回合开始时，你于本回合获得一项效果：A.于摸牌阶段多摸1张牌；B.于出牌阶段多出1张【杀】；C.于弃牌阶段手牌上限+1。然后若本次选择与前两次均不同，此技能所有数字+1；否则-1（至少为1）。`,\r\n            shangsheng_append: lib.figurer(`特性：成长`),\r\n            jinghua: `镜花水月`,\r\n            jinghua_info: `出牌阶段限一次，你可以将X张牌依次展示并交给不同角色，令其无法使用相同类型的牌，直到你的下个回合开始（X为你本回合使用【杀】的次数）。`,\r\n            AmemachiF: `雨街F`,\r\n            ciling: `刺令`,\r\n            ciling_info: `你可以跳过出牌阶段，改为指定一名其他角色，其每次弃牌阶段结束后，你可以选择一项：\r\n\t\t\t1.获得其弃牌；2.视为对其使用一张【杀】。<br>\r\n\t\t\t『刺令』状态会持续直至其进入濒死状态或其对你使用了三张【杀】。`,\r\n            ciling2: `刺令`,\r\n            ciling2_info: `被杀手刺杀中`,\r\n            xiyu: `细雨`,\r\n            xiyu_info: `锁定技。你于回合外使用牌时，摸一张牌。`,\r\n            linxi: `麟＆犀`,\r\n            lilian: `历敛`,\r\n            lilian_info: `准备阶段，你可以令一名角色摸等同你体力上限的牌，然后令你不为全场唯一最低的体力上限扣减1点。`,\r\n            zihuai: `辎徊`,\r\n            zihuai_info: `轮次技 你一次性弃置至少X张牌后，可以摸X张牌。（X为你上一次于弃牌阶段弃置的牌数）`,\r\n            jike: `机萪`,\r\n            qianjiwanbian: `千机万变`,\r\n            qianjiwanbian_info: `当你造成伤害时，你可将此伤害改为（雷电）属性。<br>\r\n\t\t\t回合开始时或你于一个独立事件中首次造成伤害后，可修改（）内属性并发现一个有字与此技能某字拼音相同的技能，在你下个回合开始之前获得之。若选择『千机万变』，直到你的下个回合开始前此技能触发时额外发现一次。`,\r\n            qianjiwanbian_append: lib.figurer(`特性：难上手`),\r\n            xinkeniang: `新科娘`,\r\n            daimao: `呆毛科技`,\r\n            daimao_info: `锁定技 游戏开始时，你将牌堆顶牌置于武将牌上，称为「萪」；你使用与「萪」同花色的牌不受距离和次数限制；你进入濒死状态时，将一张与「萪」不同花色的牌置于「萪」中，若如此做，则你体力上限-1，回复满体力，摸三张牌。`,\r\n            hongtou: `红头文件`,\r\n            hongtou_info: `<font color=#f44>主公技</font> 当你需要使用或打出基本牌时，场上的国V可代替你使用或打出。`,\r\n            azhun: `天气阿准`,\r\n            azhun_ab: `阿准`,\r\n            tianqi: `天气`,\r\n            tianqi_mark: `天气`,\r\n            tianqi_info: `锁定技 游戏开始时，你将牌堆顶牌置于你的武将牌旁，称为「天气」。`,\r\n            yubao: `预报`,\r\n            yubao_info: `拥有「天气」的角色的准备阶段开始时，你可以观看牌堆顶的X张牌，并以任意顺序放回（X为场上「天气」的数量）。`,\r\n            yubao_append: lib.figurer(`特性：控顶`),\r\n            butaizhun: `不太准`,\r\n            butaizhun_info: `每回合限一次，你可以扣置一张手牌当任意一张基本牌或通常锦囊牌使用或打出。此时，未拥有「天气」的其他角色可质疑则翻开此牌：若为假则此牌作废，若为真则质疑角色将牌堆顶牌置于武将牌旁，称为「天气」。`,\r\n            butaizhun_guess: `不太准`,\r\n            butaizhun_respond: `不太准`,\r\n            butaizhun_wuxie: `不太准`,\r\n            butaizhun_ally_bg: `真`,\r\n            butaizhun_betray_bg: `假`,\r\n            zhongguobanai: `中国绊爱`,\r\n            liying: `立影`,\r\n            liying_info: `当你受到伤害或打出牌响应其他角色后，你可以获得来源X张牌，然后交给其X-1张牌；当你于一个阶段内以此法给出第二张牌时，你可以视为使用一张基本牌。（X为其体力值）`,\r\n            fuyu: `扶谕`,\r\n            fuyu_info: `觉醒技 准备阶段，若你通过『立影』给出的牌数为4的倍数。你扣减一点体力上限，将『立影』里的“基本”改为“通常锦囊”。`,\r\n            YamaUsagi: `山兔YamaUsagi`,\r\n            YamaUsagi_ab: `山兔`,\r\n            zhengmeng: `正萌`,\r\n            zhengmeng_info: `摸牌阶段，你可以改为翻面并投掷一枚骰子，摸骰点张牌，若骰点为6，你本局游戏内【杀】造成的伤害+1。`,\r\n            wadao: `蛙蹈`,\r\n            wadao_info: `你翻至正面时，可以令一名其他角色进行一个额外的回合。`,\r\n            RIKO: `栗子酱`,\r\n            tieyu: `铁驭`,\r\n            tieyu_info: `你使用非装备牌时，可以弃置（3）张牌，若弃牌颜色为：<br>\r\n\t\t\t黑色～此牌数值+1；红色～增加至多两个目标；无色～此技能（）值-1。<br>\r\n\t\t\t你使用装备牌时，可以摸（2）张牌。`,\r\n            tieyu_append: lib.figurer(`特性：成长<br>FAQ：“数值”仅限于伤害值、回复值与护甲获得值`),\r\n            EQueen: `乃琳`,\r\n            yehua: `夜话`,\r\n            yehua_info: `回合开始时，你可以将手牌调整至场上唯一最多并翻面。`,\r\n            fengqing: `风情`,\r\n            fengqing_info: `转换技 当你的武将牌状态发生变化时，你可以选择一名角色，其在其下个准备阶段①视为使用了【酒】②视为使用了【桃】③跳过本回合的判定和弃牌阶段。`,\r\n            fengqing_jiu: `风情-酒`,\r\n            fengqing_tao: `风情-桃`,\r\n            Carol: `珈乐`,\r\n            huangjia: `王力口乐`,\r\n            shixi: `时隙`,\r\n            shixi_info: `锁定技 游戏开始时，记录你的初始手牌。当（你）的牌进入弃牌堆时，你可以选定一张花色与之相同的记录牌。一个阶段结束时，每有两个选定你便摸一张牌，然后重置选定。`,\r\n            xueta: `靴匿`,\r\n            xueta_info: `你响应其他角色的牌后，可以弃一张牌，令其摸两张牌，并令其成为<皇珈骑士>。`,\r\n            yuezhi: `乐治`,\r\n            yuezhi_info: `<font color=#a7f>觉醒技</font> 回合开始时，若场上<皇珈骑士>的数量不少于你的体力值或手牌数，你增加一点体力上限并从弃牌堆获得你的初始手牌，每有一张无法获得，你回复1点体力并摸两张牌，然后修改『时隙』（）内容为“你或一名<皇珈骑士>”。`,\r\n            Ava: `向晚`,\r\n            yiqu: `亦趋`,\r\n            yiqu_info: `若你在其他角色执行技能的过程中被指定为目标，你可以获得该技能直到下次进入濒死状态。`,\r\n            wanxian: `挽弦`,\r\n            wanxian_info: `锁定技 你令其他角色进入濒死状态时，你失去来自『亦趋』额外技能并摸等量的牌。`,\r\n            Diana: `嘉然`,\r\n            quanyu: `全域`,\r\n            quanyu_info: `其他角色使用一张牌时，若你没有该花色的手牌，你可以令此牌无效并获得之，然后你展示所有手牌，每缺少一种花色便受到1点无来源的伤害。`,\r\n            quanyu_append: lib.figurer(`特性：干扰`),\r\n            wulian: `舞连`,\r\n            wulian_info: `<font color=#ecd>限定技</font> 出牌阶段，你可以摸等同于已损失体力值的牌，然后在本轮内获得『连破』。`,\r\n            lianpo: `连破`,\r\n            lianpo_info: `一名角色的回合结束时，若你本回合内杀死过角色，则你可以进行一个额外的回合。`,\r\n            Bella: `贝拉`,\r\n            aswusheng: `舞圣`,\r\n            aswusheng_info: `你连续使用或打出第（）张基本牌时，可以触发对应项：（0）使之不计入次数；（1）摸一张牌；（2）获得对方的一张牌；（3）回复1点体力。`,\r\n            aswusheng_append: lib.figurer(`特性：易上手`),\r\n            gunxun: `棍训`,\r\n            gunxun_info: `转换技 出牌阶段，你可以亮出至少一张①红色②黑色手牌使之视为①【杀】②【闪】，然后你可令装备区牌数少于本次亮出牌数的一名角色失去所有非锁定技直到回合结束。`,\r\n            ming_gunxunshan: `棍训:闪`,\r\n            ming_gunxunsha: `棍训:杀`,\r\n            Mikawa: `三川`,\r\n            zhezhuan: `辙转`,\r\n            zhezhuan_info: `每回合限一次，你可以将一张非基本牌当作具有任意应变条件的应变标签同名牌或基本牌使用。`,\r\n            setu: `涩涂`,\r\n            setu_info: `出牌阶段限一次，你可以将任意张点数之和小于18的手牌置于武将牌上。然后若你武将牌上牌之乘积大于100，你将这些牌置入弃牌堆，摸等量的牌，并对一名角色造成1点伤害。`,\r\n            Sakurai: `樱井林`,\r\n            junxu: `军序`,\r\n            junxu_info: `你每个回合使用第X张牌时，可以摸两张牌或回复一点体力。（X为你的体力值）`,\r\n            jingniang: `井酿`,\r\n            jingniang_info: `出牌阶段，你可以弃一张牌，令你的【杀】不计入次数且伤害+1，直到本回合结束。`,\r\n            ŌokamiMio: `大神澪`,\r\n            niwei: `逆位`,\r\n            ming_niwei: `逆位`,\r\n            xuanxu: `玄虚映实`,\r\n            xuanxu_info: `出牌阶段开始时，你可以亮出任意张基本牌，称为「逆位」牌，「逆位」牌不计入手牌数，且只能以以下效果对原不合法的目标使用：【杀】∽回复1点体力；【闪】∽摸两张牌；【桃】∽失去1点体力；【酒】∽立即使用一张牌。`,\r\n            weizeng: `味增弼佐`,\r\n            weizeng_info: `其他角色的回合开始时，你可以将任意亮出牌以任意顺序置于牌堆顶，其获得这些牌后，其所有同名牌在本回合内均视为「逆位」。`,\r\n            weizeng_append: lib.figurer(`特性：难上手 控顶`),\r\n            Ciyana: `希亚娜`,\r\n            yankui: `魇窥`,\r\n            yankui_info: `其他角色的准备阶段，你可以弃置一张与本轮以此法弃置的牌类型均不同的牌，然后观看其手牌，展示并获得其中一张。若此牌为：非基本牌，本回合其跳过判定阶段与弃牌阶段；基本牌，本回合其可以多使用一张【杀】。`,\r\n            YaotomeNoe: `八乙女のえ`,\r\n            huiyuan: `回援`,\r\n            huiyuan_info: `每回合限一次，当其他角色使用基本牌时，若其手牌数多于你，则你可以与其各摸一张牌。`,\r\n            huiyuan_append: lib.figurer(`特性：辅助`),\r\n            suoshi: `琐事`,\r\n            suoshi_info: `当你受到伤害时，你可以将一张手牌交给一名全场手牌数最多的角色；若你手牌数不为全场最少，你受到的伤害+1。`,\r\n            SuouPatra: `周防パトラ`,\r\n            mianmo: `眠魔`,\r\n            mianmo_info: `每回合限一次，你使用牌的目标可改为任意体力和等于之点数或合计点数的角色，若包括你，重置此技能。`,\r\n            tiaolv: `调律`,\r\n            tiaolv_info: `你使用一张牌时，可以令其点数增加/减少X（X为你已损失的体力值且至少为1），然后若你以此牌发动『眠魔』，则你可以令目标横置/各摸一张牌。`,\r\n            tiaolv_append: lib.figurer(`特性：难上手`),\r\n            Paryi: `帕里`,\r\n            tiantang: `天扉`,\r\n            tiantang_info: `一名角色的回合开始时，你可以弃置X张牌并声明一种花色：<br>\r\n\t\t\t观看并弃置其一张声明花色的牌，令其执行一个额外的出牌阶段；或令其摸两张牌，只能使用声明花色的牌直到回合结束。（X为你对目标发动此技能的次数且至少为1）`,\r\n            haoren: `好人`,\r\n            haoren_info: `觉醒技 你发动『天扉』后，若发动次数大于存活人数，你扣减1点体力上限，将『天扉』的“弃置”改为“重铸”；且在『天扉』的额外出牌阶段内，当前回合角色获得『引流』。`,\r\n            haoren_append: lib.figurer(`特性：难上手`),\r\n            TakatsukiRitsu: `高槻律`,\r\n            shengya: `生涯`,\r\n            shengya_info: `<font color=#f33>锁定技</font> 出牌阶段内，你使用的一张红色牌后，你亮出牌堆顶一张牌并获得之。若你亮出了♣牌，你失去一点体力，并且失去此技能直到下个回合开始。`,\r\n            shengya_append: lib.figurer(`特性：易上手`),\r\n            liangshan: `汉歌`,\r\n            liangshan_info: `其他角色在你的回合内第一次摸牌后，你可以将牌堆顶牌置于你的武将牌上。一名角色回合开始或濒死时，你可以交给其一张你武将牌上的牌，视为其使用了一张【酒】。`,\r\n            liangshan_append: lib.figurer(`特性：辅助`),\r\n            chongshi: `铳士`,\r\n            chongshi_info: `你使用【杀】指定目标后，可与其各摸一张牌。`,\r\n            MorinagaMiu: `森永缪`,\r\n            guanzhai: `观宅`,\r\n            guanzhai_info: `其他角色的回合结束时，若其本回合使用的牌少于（2）张，你可观看其手牌并获得其中（1）张。`,\r\n            guanzhai_append: lib.figurer(`特性：易上手 压制`),\r\n            zhishu: `直抒`,\r\n            zhishu_info: `出牌阶段开始或你的体力改变时，你可以展示一张手牌，令一名其他角色选择一项：<br>交给你一张同花色的牌；令你与其下个回合内『观宅』的（）值+1。`,\r\n            OtomeOto: `乙女音`,\r\n            yuxia: `玉匣`,\r\n            yuxia_info: `你可以将三张牌当作一张通常锦囊牌使用；其结算后，你可以将这些牌以任意顺序置于牌堆顶。`,\r\n            yuxia_append: lib.figurer(`特性：控顶`),\r\n            lianjue: `连崛`,\r\n            lianjue_info: `回合结束时，若你的手牌数与本回合开始时差值为三的倍数，你可以选择一项：<br>令至多三名角色各摸一张牌；或视为使用一张未以此法使用过的通常锦囊牌。`,\r\n            changxiang: `长箱`,\r\n            changxiang_info: `主公技 其他同势力角色进入濒死状态时，你可以弃置数量等于自己当前体力值的手牌，视为对其使用一张【桃】。`,\r\n            xhhuanshi: `士`,\r\n            HisekiErio: `绯赤艾莉欧`,\r\n            huange: `幻歌`,\r\n            huange_info: `轮次技 一个回合开始时，你可以摸等同一名角色体力值的牌，然后于回合结束时，弃置等同其当前体力值的牌。若你发动过『奇誓』，你可以将弃牌改为置于你的武将牌上。`,\r\n            qishi: `奇誓`,\r\n            qishi_info: `<font color=#f54>觉醒技</font> 你造成且受到伤害的轮次结束时，你减1体力上限，获得『系绊』，然后进行判定直到出现黑色并将这些牌置于武将牌上，称为「士」。`,\r\n            xiban: `系绊`,\r\n            xiban_info: `其他角色造成伤害的回合结束时，你可以弃置X张「士」令其选择一项：弃置等量的牌；或若你已受伤，令你回复1点体力。（X为你当前体力值）`,\r\n            yongtuan: `拥团`,\r\n            yongtuan_info: `主公技 <font color=#fa8>限定技</font> 你弃置「士」时，可以令一名同势力角色获得之。`,\r\n            dusongziGin: `杜松子_Gin`,\r\n            dusongziGin_ab: `杜松子`,\r\n            danqing: `蛋擎`,\r\n            danqing_info: `你造成或受到伤害后，可以令一名本回合未以此法获得牌的角色获得一张【酒】，若是该回合首次发动，改为获得两张。`,\r\n            gaiqu: `改躯`,\r\n            gaiqu_info: `觉醒技 准备阶段，若你本局游戏内使用【酒】的次数多于你的手牌数，你增加一点体力上限并回复一点体力，弃置三张手牌（若不足则改为失去『蛋擎』）并令所有成为过『蛋擎』目标的角色获得『松星』。`,\r\n            songxing: `松星`,\r\n            songxing_info: `你可以将一张【酒】当作一张锦囊牌使用，每回合每种牌名限一次。`,\r\n            Yousa: `泠鸢`,\r\n            niaoji: `鸟肌`,\r\n            niaoji_info: `你造成/受到伤害后，可以进行判定：若为♥️，你摸X张牌；若为♠️，你弃置目标/来源X张牌。（X为你已损失的体力值+1）`,\r\n            ysxiangxing: `翔星`,\r\n            ysxiangxing_info: `出牌阶段限一次，你可以将所有手牌以任意顺序置于牌堆顶，然后对攻击范围内一名角色造成1点伤害。`,\r\n            ysxiangxing_append: lib.figurer(`特性：易上手 直接伤害 控顶`),\r\n            Hanser: `hanser`,\r\n            Hanser_ab: `憨色`,\r\n            naiwei: `奶味天使`,\r\n            naiwei_info: `出牌阶段限一次，你可令体力值最大的一名角色失去1点体力，或令体力值最小的一名角色回复1点体力。然后若满足该项的角色不止一名，你可发动另一项。`,\r\n            cishan: `慈善赌王`,\r\n            cishan_info: `摸牌阶段，你可改为将手牌数翻倍。然后其他角色可以选择与你拼点，赢的角色获得你一张牌。`,\r\n            cishan_append: lib.figurer(`特性：爆发`),\r\n            Shaun: `勺`,\r\n            juxiao: `句销`,\r\n            juxiao_info: `当你受到伤害后，可以令至多两名角色各摸一张牌，因此摸牌的角色不能使用【杀】直到回合结束。`,\r\n            juxiao_append: lib.figurer(`特性：卖血`),\r\n            shshenyan: `神言`,\r\n            shshenyan_info: `出牌阶段限一次，你可以展示并弃置手牌中一种牌名的牌，摸等量的牌。然后你可以：视为使用一张名称长度等于本阶段此技能弃置牌花色数的锦囊牌；否则若你弃置了【杀】，重置此技能。`,\r\n            shshenyan_append: lib.figurer(`特性：制衡`),\r\n            Muri: `无理Muri`,\r\n            Muri_ab: `无理`,\r\n            lique: `理却`,\r\n            lique_info: `锁定技 你成为非装备牌的目标时，失去一点体力并摸一张牌。`,\r\n            zhangdeng: `掌灯`,\r\n            zhangdeng_info: `锁定技 你进入濒死状态时，回复一点体力。`,\r\n            Aza: `阿萨Aza`,\r\n            Aza_ab: `阿萨`,\r\n            qiding: `契定`,\r\n            qiding_info: `出牌阶段限一次，你可以令攻击范围内的一名角色观看你的手牌并选择一项：<br>受到1点伤害；令你观看并获得其一张牌且防止你对其的伤害直到本回合结束。`,\r\n            chouxin: `酬心`,\r\n            chouxin_info: `锁定技 当♥牌正面朝上离开你的手牌时，若你：未受伤~失去1点体力；已受伤~回复一点体力。你已发动过此技能的回合内，你跳过弃牌阶段。`,\r\n            Mahiru: `真绯瑠Mahiru`,\r\n            Mahiru_ab: `真绯瑠`,\r\n            jusheng: `剧生`,\r\n            jusheng_info: `轮次技 其他角色的准备阶段，你可以与其交换装备区，若其装备区的牌数因此：<br>减少~你令你或其调整手牌至与对方相同；增加~其本回合使用牌指定你或其为目标时，你可以视为使用一张【杀】。`,\r\n            xingqu: `星取`,\r\n            xingqu_info: `限定技 你令其他角色进入濒死状态时，你可以扣减1点体力上限令其回复1点体力，然后你们同时发现一组技能，若你们选择的技能相同，你本局游戏内造成的伤害+1；若不同，你获得对方选择的技能。`,\r\n            Miki: `弥希Miki`,\r\n            Miki_ab: `弥希`,\r\n            xingxu: `星许`,\r\n            xingxu_shiyue: `星许`,\r\n            xingxu_info: `轮次技 其他角色的准备阶段，你可以交给其两张牌。本回合结束时，若其：使用了其中一张～你视为使用另一张；对你造成了伤害～你回复一点体力。`,\r\n            qingsui: `清随`,\r\n            qingsui_jiai: `集爱(清)`,\r\n            qingsui_shengyin: `盛阴(清)`,\r\n            qingsui_quanyu: `全域(清)`,\r\n            qingsui_info: `转换技 你视为拥有①『集爱』②『盛阴』③『全域』。<br>当此技能于你回合外转换至①时，你可以获得当前回合角色的一张牌。`,\r\n            Chiyuu: `千幽Chiyuu`,\r\n            Chiyuu_ab: `千幽`,\r\n            anyou: `暗友`,\r\n            anyou_info: `出牌阶段开始或你受到伤害后时，你可以令与你距离为1的角色依次选择一项：<br>交给你一张牌；使用一张牌，以此使用的牌指定你为目标时，你摸一张牌。`,\r\n            mingyou: `明悠`,\r\n            mingyou_info: `本回合已受到伤害的角色使用牌指定你为目标时，你可以与其各回复一点体力。`,\r\n            Mari: `茉里Mari`,\r\n            Mari_ab: `茉里`,\r\n            tingzhu: `庭柱`,\r\n            tingzhu_info: `你使用牌造成伤害后，可以弃置一张本回合未进入弃牌堆类型的牌，对目标外的一名角色造成一点伤害。`,\r\n            xuemo: `血耱`,\r\n            xuemo_info: `你对体力与你不同的角色造成伤害时，可以将体力调整至与其相同令伤害+1。`,\r\n            Mayumi: `勾檀Mayumi`,\r\n            Mayumi_ab: `勾檀`,\r\n            jinzhou: `晋胄`,\r\n            jinzhou_info: `锁定技 当你失去装备区的防具牌时，你摸（1）张牌，然后令所有（）值+1。`,\r\n            gouhun: `勾魂`,\r\n            gouhun_info: `出牌阶段限一次，你可以亮出牌堆顶（3）张牌，并选择一项：获得其中一种类型的牌；令所有（）值+1。<br>你以此技能获得的基本牌不计入次数，锦囊牌不计入手牌上限。`,\r\n            gouhun_append: lib.figurer(`特性：成长`),\r\n            Ruruna: `露露娜Ruruna`,\r\n            Ruruna_ab: `露露娜`,\r\n            miluan: `迷乱`,\r\n            miluan_info: `出牌阶段，你可以与至多两名角色拼点，没赢的角色受到来自对方的一点伤害并摸两张牌。`,\r\n            shenjiao: `身教`,\r\n            shenjiao_info: `你受到伤害后，可以令一名角色受到的伤害-1直到回合结束。`,\r\n            shenjiao_append: lib.figurer(`特性：辅助`),\r\n            xiaoke: `小可学妹`,\r\n            xiaoke_ab: `小可`,\r\n            mian: `面`,\r\n            dianying: `店营`,\r\n            dianying2: `店营`,\r\n            dianying_info: `其他角色的出牌阶段限一次，其可以将至少一张手牌扣置于你的武将牌旁，称为「面」，然后其可以将两张「面」明置以回复1点体力。<br>\r\n\t\t\t你受到伤害时，可以将至少三张明置的「面」暗置，使此伤害-1，若伤害被防止，伤害来源获得因此暗置的「面」。`,\r\n            ganfen: `擀奋`,\r\n            ganfen_info: `你可以对自己造成1点伤害并跳过一个主要阶段，将牌堆顶三张牌扣置为「面」。<br>\r\n\t\t\t你使用或打出基本牌时，可以将一张「面」明置。`,\r\n            Azusa: `阿梓`,\r\n            juehuo: `绝活`,\r\n            zhiyue: `指月`,\r\n            zhiyue_info: `游戏开始时，你将牌堆顶牌扣置于武将牌旁，称为「绝活」。<br>\r\n\t\t\t当你使用与暗置「绝活」类型相同的牌时，可以将其中一张明置，然后若所有「绝活」均明置，你扣置牌堆顶牌于武将牌旁；<br>\r\n\t\t\t当你使用与明置「绝活」花色相同的牌时，可以将其中任意张暗置并摸等量的牌。`,\r\n            zhiyue_append: lib.figurer(`特性：成长`),\r\n            zhengniu: `蒸牛`,\r\n            zhengniu_info: `其他角色令你重置、回复体力或摸牌时，你可以令其获得任意的「绝活」。`,\r\n            ap_Nana7mi: `天启·七海`,\r\n            ap_Nana7mi_ab: `界七海`,\r\n            niyou: `溺游`,\r\n            niyou_info: `锁定技 你受到了伤害的回合结束时，你进行一个额外的出牌阶段。若你于此阶段内没有使用牌，你翻面并摸两张牌；若使用了，你与其他角色距离+1。`,\r\n            shalu: `鲨戮`,\r\n            shalu_info: `出牌阶段限一次，你可以弃置所有手牌并对攻击范围外的一名角色造成一点伤害，然后摸其体力值的牌。`,\r\n            ap_Azusa: `天启·阿梓`,\r\n            ap_Azusa_ab: `界阿梓`,\r\n            puyu: `璞玉`,\r\n            puyu_info: `出牌阶段开始时，你可以令一名角色弃一张牌，本阶段内，你所有手牌的牌名视为之，且你使用5张牌或所有角色合计获得10张牌后立即结束此阶段。`,\r\n            appojian: `破茧`,\r\n            appojian_info: `锁定技 你使用牌造成伤害后，你令体力最多的一名角色失去一点体力，体力最少的一名角色回复一点体力；然后若你满足至少一项，立即结束当前回合。`,\r\n            qingzezi: `清则子`,\r\n            ze: `则`,\r\n            menghuan: `梦桓`,\r\n            menghuan_info: `锁定技 游戏开始时/一名角色进行判定后，你将牌堆顶牌/判定牌依次置于武将牌右侧，称为「则」，然后若「则」数量大于6，将左起第1张「则」置入弃牌堆。<br>\r\n\t\t\t当你于一个回合内使用的第n张牌与左起第n张「则」花色或类型相同时，你摸一张牌。`,\r\n            gengu: `亘古`,\r\n            gengu_info: `当你体力改变后，你可以令一名角色进行一次判定，若结果：<br>\r\n\t\t\t为黑色～其弃一张牌，若其武将牌周围有牌，则改为重铸一张牌。`,\r\n            shengge: `笙歌`,\r\n            di: `笛`,\r\n            dixian: `笛鲜`,\r\n            dixian_info: `出牌阶段限一次，你可以将牌堆顶牌置于武将牌的左侧或右侧，称为「笛」，当另一张同颜色的「笛」被置于另一侧或你使用一张同类型的牌后，你获得之。<br>\r\n\t\t\t你一次性获得3张或以上的「笛」后，可以立即发动一次此技能。`,\r\n            gumei: `古寐`,\r\n            gumei_info: `你使用锦囊牌时，可以令一名角色横置或重置，若其武将牌周围有牌，则改为摸一张牌。`,\r\n            KurumiUsa: `胡桃Usa`,\r\n            KurumiUsa_ab: `胡桃`,\r\n            jidou: `激斗`,\r\n            jidou_info: `锁定技 你使用【决斗】指定唯一目标或成为【决斗】的目标时，摸一张牌，若你没有手牌或体力为1，改为摸三张。`,\r\n            duotian: `堕天`,\r\n            duotian_info: `出牌阶段限一次，你可以将一张基本牌当作一张单体锦囊牌使用，若此牌点数：<br>\r\n\t\t\t≥6~你可为之增加一个目标；≥12~你于此阶段结束后进行一个额外的出牌阶段。`,\r\n            NanaseUnia: `七濑Unia`,\r\n            NanaseUnia_ab: `七濑`,\r\n            qisui: `麒随`,\r\n            qisui_info: `每回合每名角色限一次，一名角色于你的回合内摸牌或其他角色令你摸牌时，你可以令其获得『灵军』直到其下一次使用【决斗】，若其已拥有『灵军』，改为本次摸牌量+1。`,\r\n            lingjun: `灵军`,\r\n            lingjun_info: `锁定技 你手牌中的【杀】视为【决斗】。`,\r\n            Shirako: `白桃shirako`,\r\n            Shirako_ab: `白桃`,\r\n            jufu: `咀福`,\r\n            jufu_info: `你可以将【桃】当作【无中生有】或【五谷丰登】使用。`,\r\n            qihun: `祈婚`,\r\n            qihun_info: `出牌阶段结束时，你可以令一名角色展示手牌并将其中所有的红色牌交给你，若其中没有【桃】，你需交给其等量牌（若其势力与你相同，改为令其摸等量牌）。`,\r\n            SukoyaKana: `健屋花那`,\r\n            huawen: `花吻交染`,\r\n            huawen_info: `出牌阶段限一次，你可以选择一名其他女性角色，你与其互相展示手牌，然后交换花色、点数、种类相同的牌各一张，每交换一张便各摸一张牌。然后若交换不足三次，你与其各失去1点体力。`,\r\n            huawen_append: lib.figurer(`特性：难上手 爆发`),\r\n            liaohu: `逃杀疗护`,\r\n            liaohu_info: `你造成过伤害的回合结束时，若该回合未发动/发动了『花吻交染』，你可以令你/本轮『花吻交染』选择的其他角色回复1点体力。`,\r\n            ShirayukiTomoe: `白雪巴`,\r\n            gonggan: `奇癖共感`,\r\n            gonggan_info: `其他角色的回合开始时，你可以展示所有手牌然后扣置其中一张，令当前回合角色猜测此牌花色，若猜对，其获得此牌，且本回合你手牌花色、点数均视为与此牌相同；若猜错，你收回此牌，且本回合你手牌点数均视为Q。`,\r\n            gonggan_append: lib.figurer(`特性：难上手`),\r\n            yeyu: `夜域女王`,\r\n            yeyu_info: `其他角色使用【杀】时，你可以弃置一张点数大于此【杀】的牌取消之。其他角色使用通常锦囊牌时，你可以重铸一张梅花牌为之增加或减少一名目标。`,\r\n            yeyu_append: lib.figurer(`特性：干扰`),\r\n            Elu: `Elu`,\r\n            Elu_ab: `艾露`,\r\n            huangran: `煌燃`,\r\n            huangran_info: `你受到火焰伤害时，可以选择一名距离为1的角色与你平均承担，不能平均的额外1点由你分配。<br>每有一名角色因此受伤，你摸一张牌。`,\r\n            yinzhen: `隐真`,\r\n            yinzhen_info: `锁定技 每回合造成的第一次伤害均改为火焰伤害。其他角色与你距离减小的回合结束时，你观看其手牌并获得其中一张。`,\r\n            senhu: `森护`,\r\n            senhu_info: `锁定技 若你的装备区里没有防具牌，你受到的火焰伤害+1。`,\r\n            KenmochiDouya: `剑持刀也`,\r\n            shenglang: `声浪燃烈`,\r\n            shenglang_info: `出牌阶段限一次，你可以将一张【杀】当【决斗】使用。你失去过牌的回合结束时，摸等同于该回合进入弃牌堆的♠【杀】数量的牌`,\r\n            nodao: `无刀之咎`,\r\n            nodao_info: `你没有装备武器时，可以于出牌阶段重铸【杀】，若你以此法获得武器牌，你可以立即装备之并回复1点体力。`,\r\n            AchikitaChinami: `远北千南`,\r\n            yingkuo: `影拓`,\r\n            yingkuo_info: `你装备区或手牌区的牌数增加时，若有其他角色在此区域内的牌数与你相同，你可令其弃置该区域内的一张牌。`,\r\n            shengni: `声拟`,\r\n            shengni_info: `若上一张进入弃牌堆的牌为其他角色的基本牌或通常锦囊牌，你可将你的一张手牌当做该牌使用或打出。若这是在你回合内首次发动『声拟』，改为“你可视为使用或打出该牌”。`,\r\n            HayamiSaki: `早见咲`,\r\n            tuncai: `屯财`,\r\n            tuncai_info: `轮次技 转换技 阳~其他角色摸牌后，你可以摸等量牌；阴~你弃牌后，可以令一名其他角色弃等量牌。`,\r\n            zhidu: `值督`,\r\n            zhidu_info: `主公技 当同势力角色进入濒死状态或受到两点或以上伤害时，你可以重置并转换『屯财』。`,\r\n            KiyoInga: `纪代因果`,\r\n            huanxi: `浣洗`,\r\n            huanxi_info: `出牌阶段开始或结束时，你可以弃置所有手牌，然后摸等量牌。若均弃牌且两次弃牌不包含同名牌，重置『册吕』`,\r\n            celv: `册吕`,\r\n            celv_info: `你体力减少或弃置与体力等量的牌时，可以展示并获得其他角色的一张手牌，然后你不能使用或打出与此牌同名的牌。`,\r\n            celv_append: lib.figurer(`特性：自肃`),\r\n            AngeKatrina: `安洁·卡特琳娜`,\r\n            chuangzuo: `创作延续`,\r\n            chuangzuo_info: `准备阶段，你可令一名角色获得其判定区或装备区的一张牌，然后你摸一张牌。`,\r\n            SuzuharaLulu: `铃原露露`,\r\n            zhongli: `重力牵引`,\r\n            zhongli_info: `锁定技 出牌阶段结束时，你进行判定：若为装备牌，你获得判定牌并继续判定；若你本回合首次因此获得了某张装备牌，你减1点体力上限（至少为1）且执行一个额外的出牌阶段。`,\r\n            xinhuo: `薪火相传`,\r\n            xinhuo_chuanhuo: `传火`,\r\n            xinhuo_info: `出牌阶段，你可以将两张牌置于牌堆顶，令你本回合下一张使用的牌无距离和次数限制且可额外选择一个目标（可叠加）。`,\r\n            weizhuang: `魔界伪装`,\r\n            weizhuang_discard: `魔界伪装`,\r\n            weizhuang_info: `锁定技 你在一回合内多次使用基本牌/锦囊牌后，摸/弃X张牌。（X为此牌指定的目标数）`,\r\n            weizhuang_append: lib.figurer(`特性：自肃`),\r\n            KagamiHayato: `加賀美隼人`,\r\n            liebo: `裂帛核哮`,\r\n            liebo_info: `锁定技 你的黑色牌无法被响应。你的一张黑色牌首次造成伤害时，摸一张牌，然后目标可以令你弃置你装备区内的一张牌`,\r\n            zhongjizhimeng: `重机织梦`,\r\n            zhongjizhimeng_info: `出牌阶段限一次，你可弃置一张牌并展示一张手牌，此牌的颜色视为原来的异色直到回合结束。本回合内你失去此牌时，可以令一名角色回复1点体力或摸两张牌`,\r\n            AmamiyaKokoro: `天宫心`,\r\n            miaomiao: `流泪喵喵`,\r\n            miaomiao_info: `锁定技 你造成数值为1的伤害时，需将其改为等量体力回复，或令目标摸两张牌；若你本回合已发动『逞能龙息』，你摸一张牌。`,\r\n            chengneng: `逞能龙息`,\r\n            chengneng_info: `每回合限一次，当其他角色受到伤害时，你可以弃一张牌令其来源视为你，若你为其原来源，本次伤害改为等量体力流失。`,\r\n            chengneng_append: lib.figurer(`特性：难上手 combo`),\r\n            SakuraRitsuki: `櫻凜月`,\r\n            zhuqiao: `筑巧`,\r\n            zhuqiao_info: `出牌阶段，若你本回合因此进入弃牌堆的牌点数之和小于24，你可重铸一张牌。回合结束时，你可令一名角色将手牌数补至X张（X为你本回合以此重铸牌的花色数）。`,\r\n            zhuqiao_append: lib.figurer(`特性：易上手`),\r\n            TenkaiTsukasa: `天开司`,\r\n            pojie: `破戒`,\r\n            pojie_info: `回合内，一名角色装备区内的牌数变化时，你可以摸一张牌。弃牌阶段，你需弃置的牌数改为本回合发动此技能的次数。`,\r\n            dazhen: `大振`,\r\n            dazhen_info: `出牌阶段限一次，你可将你武器栏的牌移动至其他角色武器栏（可替换原武器），然后其弃置你手牌数与手牌上限之差的牌，若不足，受到你造成的1点伤害。`,\r\n            dazhen_append: lib.figurer(`特性：爆发 破军`),\r\n            UsakiNono: `宇佐纪诺诺`,\r\n            tuhui: `兔烩`,\r\n            tuhuiA: `兔烩(伤害)`,\r\n            tuhuiB: `兔烩(受伤害)`,\r\n            tuhui_info: `每轮每项限一次。你对其他角色造成伤害或其他角色对你造成伤害后，你可以与其各回复（1）点体力；无法回复体力的角色摸（1）张牌。`,\r\n            fuyou: `复幼`,\r\n            fuyou_info: `限定技 出牌阶段，你可以令所有角色无法回复体力直到回合结束，重置『兔烩』并使之的（）值+1。`,\r\n            Rynia: `莱妮娅Rynia`,\r\n            Rynia_ab: `莱妮娅`,\r\n            yinxu: `吟虚`,\r\n            yinxu_info: `转换技 你可以将一张①锦囊牌②装备牌当作无视距离和次数限制的【杀】使用；以此使用的【杀】被抵消时，你可以令你或目标调整手牌至上限。`,\r\n            yinxu_append: lib.figurer(`特性：易上手 爆发`),\r\n            airuisi: `艾瑞思`,\r\n            maozhi: `茆织`,\r\n            maozhi_info: `出牌阶段，你可以弃置两张不同类型的牌，令一名其他角色根据你弃牌包含的花色执行对应效果：<br>♥～失去1点体力并摸三张牌；♦～视为使用一张【杀】；♠～展示所有手牌并横置；♣～重铸至少三张牌。<br>\r\n\t\t\t若你的弃牌颜色相同，本回合你不能再发动此技能。`,\r\n            baifei: `拜妃`,\r\n            baifei_info: `主公技 每名角色限一次，你对其造成伤害或受到其造成的伤害后，可以回复1点体力或摸两张牌。`,\r\n            aibai: `艾白`,\r\n            bianyin: `变音`,\r\n            bianyin_info: `每回合限一次，当你使用一张牌时，你可以重铸一张牌，将之改为重铸牌的花色。`,\r\n            shabai: `傻白`,\r\n            shabai_info: `当一张红色牌于回合内离开你的区域时，你可摸一张牌；当一张黑色牌于回合外离开你的区域时，你可移动场上一张牌。`,\r\n            wenjing: `文静`,\r\n            zaiying: `再赢`,\r\n            zaiying_info: `出牌阶段限一次/其他角色于你的回合内获得牌时，你可以与一名角色/其拼点，赢的角色摸牌至上限，没赢的角色回复一点体力。`,\r\n            zhengen: `政恩`,\r\n            zhengen_info: `使命技 每名角色限一次，你对其造成伤害或受到其伤害时，你弃置一张手牌与其场上的一张牌。<br>\r\n\t\t\t成功～若你以此技能弃置了四张同点数的牌：你调整手牌至上限，重置次技能。<br>\r\n\t\t\t失败～你体力回复至上限时，若有手牌：你令X名角色横置并摸一张牌，然后你受到X点火焰伤害。（X为你手牌数）`,\r\n            xingtong: `星瞳`,\r\n            jiezou: `节奏`,\r\n            jiezou_info: `锁定技 你攻击范围内每有一名角色，你的手牌上限+1。`,\r\n            xtguyong: `孤勇`,\r\n            xtguyong_info: `准备阶段，你可以翻面并令一名手牌区/装备区/判定区牌数少于你的角色弃置你的对应区域各一张牌，\r\n\t\t\t然后你对攻击范围内至多X名角色各造成X点伤害（X为此技能弃置的牌数）`,\r\n            wula: `乌拉の帝国`,\r\n            wula_ab: `乌拉`,\r\n            dizuo: `帝座`,\r\n            dizuo_info: `你使用装备牌时，可以令一名与你距离为1的角色选择一项：<br>交给你一张装备牌并摸两张牌；成为你下一张牌的额外目标，若是首次选择此项，其与你交换座次。`,\r\n            hongtie: `洪铁`,\r\n            hongtie_info: `你使用牌指定偶数名角色为目标时，可以对其中一名目标造成一点伤害。`,\r\n            yunyuluan: `云玉鸾`,\r\n            jiujiu: `臼啾`,\r\n            jiujiu_info: `出牌阶段开始时，你可以将一张装备牌置于牌堆顶并跳过此阶段，令一名角色选择一项：<br>交给你一张装备牌并摸两张牌；受到你造成的一点伤害。`,\r\n            qitong: `栖桐`,\r\n            qitong_info: `转换技 结束阶段，若你本回合没有造成伤害，你可以与下家交换①装备区②座次；若你的座次因此变为最后，你调整手牌至上限并进行一个额外的出牌阶段。`,\r\n            yizhiYY: `亦枝YY`,\r\n            bianshi: `辨识`,\r\n            bianshi2: `辨识`,\r\n            ming_bianshi: `辨识`,\r\n            bianshi_info: `体力值不少于你的角色的回合开始时，你可以亮出一张手牌：直到回合结束，每当与此牌类别相同的牌进入弃牌堆时，该角色摸一张牌。以此法获得第二张牌后，该角色失去一点体力并令其因『辨识』的摸牌改为弃牌。`,\r\n            bianshi_append: lib.figurer(`特性：干扰`),\r\n            Pudding: `步玎`,\r\n            tianlve: `甜略`,\r\n            tianlve_info: `出牌阶段开始时，你可以令一名其他角色回复1点体力，然后本阶段内你对其使用牌无距离限制，且指定其为唯一目标时，可以摸一张牌或增加一个额外目标。`,\r\n            tianlve_append: lib.figurer(`特性：卖血 辅助 强化出杀`),\r\n            luxian: `颅祭`,\r\n            luxian_info: `<font color=#fda>限定技</font> 准备阶段，若你已受伤，你可以扣减1点体力上限，并发现一次P-SP角色，你视为拥有其所有技能直到弃牌阶段结束。`,\r\n            luxian_append: lib.figurer(`特性：难上手 爆发`),\r\n            AyanaNana: `绫奈奈奈`,\r\n            erni: `耳匿`,\r\n            erni_info: `转换技 你可以展示一张手牌并置于牌堆顶，视为使用或打出了一张同花色的①【杀】②【闪】③【桃】；当你发动其他技能后，可以转换一次『耳匿』。`,\r\n            erni_append: lib.figurer(`特性：控顶`),\r\n            shouru: `受乳`,\r\n            shouru_info: `每回合限一次，你受到伤害/发动『耳匿』后，可以获得当前回合角色上家或下家的一张牌。`,\r\n            shouru_append: lib.figurer(`特性：combo`),\r\n            chonghuang: `崇皇`,\r\n            chonghuang_info: `<font color=#dac>限定技</font> 当你体力值变为1时，你可以扣减1点体力上限，并发现一次P-SP角色，本轮次内你视为拥有其所有技能。`,\r\n            chonghuang_append: lib.figurer(`特性：难上手`),\r\n            yinzun: `隐尊`,\r\n            yinzun_info: `<font color=#dac>主公技</font> 你的『崇皇』可以在同势力角色体力变为1时发动。`,\r\n            AkiRinco: `秋凛子`,\r\n            jiren: `祭刃`,\r\n            jiren2: `祭刃-重置`,\r\n            jiren_info: `出牌阶段限一次，你可以进行判定，若结果为：红色~你摸一张牌；武器牌~你获得之。你可以失去1点体力以重置此技能。`,\r\n            luqiu: `戮秋`,\r\n            luqiu_info: `转换技 当一张牌进入弃牌堆时，若其花色与你本回合上一次『祭刃』的判定牌相同，你可以①视为使用一张【杀】②摸一张牌③弃一张牌。`,\r\n            luqiu_append: lib.figurer(`特性：难上手 爆发 combo`),\r\n            canxin: `残心`,\r\n            canxin_info: `<font color=#ed9>限定技</font> 出牌阶段结束时，若你已受伤，你可以重铸一张牌。若你以此法重铸了【杀】或伤害类锦囊牌，重复此操作；否则回复1点体力并立即结束回合。`,\r\n            KurenaiAkane: `红晓音`,\r\n            quankai: `拳开`,\r\n            quankai_info: `轮次技 你造成伤害后，可以弃置目标区域内的一张牌；当你使用锦囊牌后，可以从弃牌堆中获得上一次『拳开』的弃牌，或重置此技能。`,\r\n            heyuan: `合缘`,\r\n            heyuan_info: `<font color=#f57>限定技</font> 摸牌阶段，若你已受伤，你可以放弃摸牌，改为发现两次P-SP势力角色，然后视为拥有前者的非限定技和后者的限定技直到你的下个回合开始。`,\r\n            heyuan_append: lib.figurer(`特性：难上手`),\r\n            Lovely: `东爱璃`,\r\n            yangyao: `秧耀`,\r\n            yangyao_info: `出牌阶段，你可以失去一点体力或弃置两张同色的牌，令一名角色从弃牌堆获得一张锦囊牌；每回合每种锦囊牌限一次。`,\r\n            yangyao_append: lib.figurer(`特性：爆发 combo`),\r\n            shili: `拾璃`,\r\n            shili_info: `<font color=#987>限定技</font> 一个回合结束时，若你已受伤，你可以令一名角色摸X张牌并执行一个额外的出牌阶段（X为你本回合使用过的非基本牌数量）。`,\r\n            AkumaYuu: `西魔幽`,\r\n            akjianwu: `剑舞`,\r\n            akjianwu_info: `你使用或打出一张基本牌时，可以与对方拼点，赢的角色选择一项：<br>1.于此牌结算后获得之；2.展示并获得对方的一张牌。<br>以此获得【杀】或单体锦囊牌的角色可以立即使用之。`,\r\n            tongzhao: `同召`,\r\n            tongzhao_info: `<font color=#d87>限定技</font> 你拼点没赢时，若你已受伤，你可以发现一次（若为平局则改为发现两次）P-SP势力角色，视为拥有其所有技能直到你下一次体力减少。`,\r\n            AiTeN: `莲汰`,\r\n            langfei: `狼吠`,\r\n            langfei_info: `每回合限一次，你可以令你使用的通常锦囊牌伤害+1。`,\r\n            xieyun: `协韵`,\r\n            xieyun_info: `限定技 出牌阶段开始时，你可以指定场上一个已发动的限定技，令持有者重置此技能，然后你获得同名技能。`,\r\n            Seki: `星汐Seki`,\r\n            Seki_ab: `星汐`,\r\n            zhuxing: `铸星`,\r\n            zhuxing_info: `出牌阶段限一次，你可以观看牌堆顶的七张牌，并用手牌替换其中任意张。`,\r\n            zhuxing_append: lib.figurer(`特性：控顶`),\r\n            shanzhu: `潸逐`,\r\n            shanzhu_info: `限定技 结束阶段，若你已受伤，你可以获得本回合你使用的所有实体牌。`,\r\n            P_SP: `P-SP`,\r\n            zhu_tag: `常驻主公`,\r\n            guoV_tag: `国V`,\r\n            yingV_tag: `英V`,\r\n        },\r\n    };\r\n});\r\n\n\n//# sourceURL=webpack:///./yuzu.ts?")}},__webpack_exports__={};__webpack_modules__["./yuzu.ts"]()})();